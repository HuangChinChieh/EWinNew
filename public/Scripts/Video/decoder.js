// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
    if (Module.hasOwnProperty(key)) {
        moduleOverrides[key] = Module[key];
    }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function (status, toThrow) {
    throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
    if (Module['ENVIRONMENT'] === 'WEB') {
        ENVIRONMENT_IS_WEB = true;
    } else if (Module['ENVIRONMENT'] === 'WORKER') {
        ENVIRONMENT_IS_WORKER = true;
    } else if (Module['ENVIRONMENT'] === 'NODE') {
        ENVIRONMENT_IS_NODE = true;
    } else if (Module['ENVIRONMENT'] === 'SHELL') {
        ENVIRONMENT_IS_SHELL = true;
    } else {
        throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
    }
} else {
    ENVIRONMENT_IS_WEB = typeof window === 'object';
    ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
    ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
    // Expose functionality in the same simple way that the shells work
    // Note that we pollute the global namespace here, otherwise we break in node
    var nodeFS;
    var nodePath;

    Module['read'] = function shell_read(filename, binary) {
        var ret;
        ret = tryParseAsDataURI(filename);
        if (!ret) {
            if (!nodeFS) nodeFS = require('fs');
            if (!nodePath) nodePath = require('path');
            filename = nodePath['normalize'](filename);
            ret = nodeFS['readFileSync'](filename);
        }
        return binary ? ret : ret.toString();
    };

    Module['readBinary'] = function readBinary(filename) {
        var ret = Module['read'](filename, true);
        if (!ret.buffer) {
            ret = new Uint8Array(ret);
        }
        assert(ret.buffer);
        return ret;
    };

    if (process['argv'].length > 1) {
        Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    }

    Module['arguments'] = process['argv'].slice(2);

    if (typeof module !== 'undefined') {
        module['exports'] = Module;
    }

    process['on']('uncaughtException', function (ex) {
        // suppress ExitStatus exceptions from showing an error
        if (!(ex instanceof ExitStatus)) {
            throw ex;
        }
    });
    // Currently node will swallow unhandled rejections, but this behavior is
    // deprecated, and in the future it will exit with error status.
    process['on']('unhandledRejection', function (reason, p) {
        process['exit'](1);
    });

    Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
    if (typeof read != 'undefined') {
        Module['read'] = function shell_read(f) {
            var data = tryParseAsDataURI(f);
            if (data) {
                return intArrayToString(data);
            }
            return read(f);
        };
    }

    Module['readBinary'] = function readBinary(f) {
        var data;
        data = tryParseAsDataURI(f);
        if (data) {
            return data;
        }
        if (typeof readbuffer === 'function') {
            return new Uint8Array(readbuffer(f));
        }
        data = read(f, 'binary');
        assert(typeof data === 'object');
        return data;
    };

    if (typeof scriptArgs != 'undefined') {
        Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
        Module['arguments'] = arguments;
    }

    if (typeof quit === 'function') {
        Module['quit'] = function (status, toThrow) {
            quit(status);
        }
    }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module['read'] = function shell_read(url) {
        try {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            xhr.send(null);
            return xhr.responseText;
        } catch (err) {
            var data = tryParseAsDataURI(url);
            if (data) {
                return intArrayToString(data);
            }
            throw err;
        }
    };

    if (ENVIRONMENT_IS_WORKER) {
        Module['readBinary'] = function readBinary(url) {
            try {
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                xhr.responseType = 'arraybuffer';
                xhr.send(null);
                return new Uint8Array(xhr.response);
            } catch (err) {
                var data = tryParseAsDataURI(url);
                if (data) {
                    return data;
                }
                throw err;
            }
        };
    }

    Module['readAsync'] = function readAsync(url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
            if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
                onload(xhr.response);
                return;
            }
            var data = tryParseAsDataURI(url);
            if (data) {
                onload(data.buffer);
                return;
            }
            onerror();
        };
        xhr.onerror = onerror;
        xhr.send(null);
    };

    Module['setWindowTitle'] = function (title) { document.title = title };
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
        Module[key] = moduleOverrides[key];
    }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;


function staticAlloc(size) {
    assert(!staticSealed);
    var ret = STATICTOP;
    STATICTOP = (STATICTOP + size + 15) & -16;
    return ret;
}

function dynamicAlloc(size) {
    assert(DYNAMICTOP_PTR);
    var ret = HEAP32[DYNAMICTOP_PTR >> 2];
    var end = (ret + size + 15) & -16;
    HEAP32[DYNAMICTOP_PTR >> 2] = end;
    if (end >= TOTAL_MEMORY) {
        var success = enlargeMemory();
        if (!success) {
            HEAP32[DYNAMICTOP_PTR >> 2] = ret;
            return 0;
        }
    }
    return ret;
}

function alignMemory(size, factor) {
    if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
    var ret = size = Math.ceil(size / factor) * factor;
    return ret;
}

function getNativeTypeSize(type) {
    switch (type) {
        case 'i1': case 'i8': return 1;
        case 'i16': return 2;
        case 'i32': return 4;
        case 'i64': return 8;
        case 'float': return 4;
        case 'double': return 8;
        default: {
            if (type[type.length - 1] === '*') {
                return 4; // A pointer
            } else if (type[0] === 'i') {
                var bits = parseInt(type.substr(1));
                assert(bits % 8 === 0);
                return bits / 8;
            } else {
                return 0;
            }
        }
    }
}

function warnOnce(text) {
    if (!warnOnce.shown) warnOnce.shown = {};
    if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        Module.printErr(text);
    }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
    var base = 0;
    for (var i = base; i < base + 0; i++) {
        if (!functionPointers[i]) {
            functionPointers[i] = func;
            return jsCallStartIndex + i;
        }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
    functionPointers[index - jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
    if (!func) return; // on null pointer, return undefined
    assert(sig);
    if (!funcWrappers[sig]) {
        funcWrappers[sig] = {};
    }
    var sigCache = funcWrappers[sig];
    if (!sigCache[func]) {
        // optimize away arguments usage in common cases
        if (sig.length === 1) {
            sigCache[func] = function dynCall_wrapper() {
                return dynCall(sig, func);
            };
        } else if (sig.length === 2) {
            sigCache[func] = function dynCall_wrapper(arg) {
                return dynCall(sig, func, [arg]);
            };
        } else {
            // general case
            sigCache[func] = function dynCall_wrapper() {
                return dynCall(sig, func, Array.prototype.slice.call(arguments));
            };
        }
    }
    return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
    return unsigned ? ((+((low >>> 0))) + ((+((high >>> 0))) * 4294967296.0)) : ((+((low >>> 0))) + ((+((high | 0))) * 4294967296.0));
}

function dynCall(sig, ptr, args) {
    if (args && args.length) {
        return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
        return Module['dynCall_' + sig].call(null, ptr);
    }
}



var Runtime = {
    // FIXME backwards compatibility layer for ports. Support some Runtime.*
    //       for now, fix it there, then remove it from here. That way we
    //       can minimize any period of breakage.
    dynCall: dynCall, // for SDL2 port
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
    if (!condition) {
        abort('Assertion failed: ' + text);
    }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
    var func = Module['_' + ident]; // closure exported function
    assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
    return func;
}

var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function () {
        stackSave()
    },
    'stackRestore': function () {
        stackRestore()
    },
    // type conversion from js to c
    'arrayToC': function (arr) {
        var ret = stackAlloc(arr.length);
        writeArrayToMemory(arr, ret);
        return ret;
    },
    'stringToC': function (str) {
        var ret = 0;
        if (str !== null && str !== undefined && str !== 0) { // null string
            // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
            var len = (str.length << 2) + 1;
            ret = stackAlloc(len);
            stringToUTF8(str, ret, len);
        }
        return ret;
    }
};

// For fast lookup of conversion functions
var toC = {
    'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
        for (var i = 0; i < args.length; i++) {
            var converter = toC[argTypes[i]];
            if (converter) {
                if (stack === 0) stack = stackSave();
                cArgs[i] = converter(args[i]);
            } else {
                cArgs[i] = args[i];
            }
        }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    else if (returnType === 'boolean') ret = Boolean(ret);
    if (stack !== 0) {
        stackRestore(stack);
    }
    return ret;
}

function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function (type) { return type === 'number' });
    var numericRet = returnType !== 'string';
    if (numericRet && numericArgs) {
        return cfunc;
    }
    return function () {
        return ccall(ident, returnType, argTypes, arguments);
    }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
        case 'i1': HEAP8[((ptr) >> 0)] = value; break;
        case 'i8': HEAP8[((ptr) >> 0)] = value; break;
        case 'i16': HEAP16[((ptr) >> 1)] = value; break;
        case 'i32': HEAP32[((ptr) >> 2)] = value; break;
        case 'i64': (tempI64 = [value >>> 0, (tempDouble = value, (+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble) / 4294967296.0))), 4294967295.0)) | 0) >>> 0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble))) >>> 0)) / 4294967296.0))))) >>> 0) : 0)], HEAP32[((ptr) >> 2)] = tempI64[0], HEAP32[(((ptr) + (4)) >> 2)] = tempI64[1]); break;
        case 'float': HEAPF32[((ptr) >> 2)] = value; break;
        case 'double': HEAPF64[((ptr) >> 3)] = value; break;
        default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
    type = type || 'i8';
    if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
        case 'i1': return HEAP8[((ptr) >> 0)];
        case 'i8': return HEAP8[((ptr) >> 0)];
        case 'i16': return HEAP16[((ptr) >> 1)];
        case 'i32': return HEAP32[((ptr) >> 2)];
        case 'i64': return HEAP32[((ptr) >> 2)];
        case 'float': return HEAPF32[((ptr) >> 2)];
        case 'double': return HEAPF64[((ptr) >> 3)];
        default: abort('invalid type for getValue: ' + type);
    }
    return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
    var zeroinit, size;
    if (typeof slab === 'number') {
        zeroinit = true;
        size = slab;
    } else {
        zeroinit = false;
        size = slab.length;
    }

    var singleType = typeof types === 'string' ? types : null;

    var ret;
    if (allocator == ALLOC_NONE) {
        ret = ptr;
    } else {
        ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
    }

    if (zeroinit) {
        var stop;
        ptr = ret;
        assert((ret & 3) == 0);
        stop = ret + (size & ~3);
        for (; ptr < stop; ptr += 4) {
            HEAP32[((ptr) >> 2)] = 0;
        }
        stop = ret + size;
        while (ptr < stop) {
            HEAP8[((ptr++) >> 0)] = 0;
        }
        return ret;
    }

    if (singleType === 'i8') {
        if (slab.subarray || slab.slice) {
            HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
        } else {
            HEAPU8.set(new Uint8Array(slab), ret);
        }
        return ret;
    }

    var i = 0, type, typeSize, previousType;
    while (i < size) {
        var curr = slab[i];

        type = singleType || types[i];
        if (type === 0) {
            i++;
            continue;
        }

        if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

        setValue(ret + i, curr, type);

        // no need to look up size unless type changes, so cache it
        if (previousType !== type) {
            typeSize = getNativeTypeSize(type);
            previousType = type;
        }
        i += typeSize;
    }

    return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
    if (!staticSealed) return staticAlloc(size);
    if (!runtimeInitialized) return dynamicAlloc(size);
    return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
    if (length === 0 || !ptr) return '';
    // TODO: use TextDecoder
    // Find the length, and check for UTF while doing so
    var hasUtf = 0;
    var t;
    var i = 0;
    while (1) {
        t = HEAPU8[(((ptr) + (i)) >> 0)];
        hasUtf |= t;
        if (t == 0 && !length) break;
        i++;
        if (length && i == length) break;
    }
    if (!length) length = i;

    var ret = '';

    if (hasUtf < 128) {
        var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
        var curr;
        while (length > 0) {
            curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
            ret = ret ? ret + curr : curr;
            ptr += MAX_CHUNK;
            length -= MAX_CHUNK;
        }
        return ret;
    }
    return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
    var str = '';
    while (1) {
        var ch = HEAP8[((ptr++) >> 0)];
        if (!ch) return str;
        str += String.fromCharCode(ch);
    }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
    return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
    var endPtr = idx;
    // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
    // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
    while (u8Array[endPtr])++endPtr;

    if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
    } else {
        var u0, u1, u2, u3, u4, u5;

        var str = '';
        while (1) {
            // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
            u0 = u8Array[idx++];
            if (!u0) return str;
            if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
            u1 = u8Array[idx++] & 63;
            if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
            u2 = u8Array[idx++] & 63;
            if ((u0 & 0xF0) == 0xE0) {
                u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
            } else {
                u3 = u8Array[idx++] & 63;
                if ((u0 & 0xF8) == 0xF0) {
                    u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
                } else {
                    u4 = u8Array[idx++] & 63;
                    if ((u0 & 0xFC) == 0xF8) {
                        u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
                    } else {
                        u5 = u8Array[idx++] & 63;
                        u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
                    }
                }
            }
            if (u0 < 0x10000) {
                str += String.fromCharCode(u0);
            } else {
                var ch = u0 - 0x10000;
                str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
            }
        }
    }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
    return UTF8ArrayToString(HEAPU8, ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
        return 0;

    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
        if (u <= 0x7F) {
            if (outIdx >= endIdx) break;
            outU8Array[outIdx++] = u;
        } else if (u <= 0x7FF) {
            if (outIdx + 1 >= endIdx) break;
            outU8Array[outIdx++] = 0xC0 | (u >> 6);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
            if (outIdx + 2 >= endIdx) break;
            outU8Array[outIdx++] = 0xE0 | (u >> 12);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0x1FFFFF) {
            if (outIdx + 3 >= endIdx) break;
            outU8Array[outIdx++] = 0xF0 | (u >> 18);
            outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0x3FFFFFF) {
            if (outIdx + 4 >= endIdx) break;
            outU8Array[outIdx++] = 0xF8 | (u >> 24);
            outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        } else {
            if (outIdx + 5 >= endIdx) break;
            outU8Array[outIdx++] = 0xFC | (u >> 30);
            outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
            outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
            outU8Array[outIdx++] = 0x80 | (u & 63);
        }
    }
    // Null-terminate the pointer to the buffer.
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
        if (u <= 0x7F) {
            ++len;
        } else if (u <= 0x7FF) {
            len += 2;
        } else if (u <= 0xFFFF) {
            len += 3;
        } else if (u <= 0x1FFFFF) {
            len += 4;
        } else if (u <= 0x3FFFFFF) {
            len += 5;
        } else {
            len += 6;
        }
    }
    return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
    var endPtr = ptr;
    // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
    // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
    var idx = endPtr >> 1;
    while (HEAP16[idx])++idx;
    endPtr = idx << 1;

    if (endPtr - ptr > 32 && UTF16Decoder) {
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
    } else {
        var i = 0;

        var str = '';
        while (1) {
            var codeUnit = HEAP16[(((ptr) + (i * 2)) >> 1)];
            if (codeUnit == 0) return str;
            ++i;
            // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
            str += String.fromCharCode(codeUnit);
        }
    }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
    // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
    }
    if (maxBytesToWrite < 2) return 0;
    maxBytesToWrite -= 2; // Null terminator.
    var startPtr = outPtr;
    var numCharsToWrite = (maxBytesToWrite < str.length * 2) ? (maxBytesToWrite / 2) : str.length;
    for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr) >> 1)] = codeUnit;
        outPtr += 2;
    }
    // Null-terminate the pointer to the HEAP.
    HEAP16[((outPtr) >> 1)] = 0;
    return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
    return str.length * 2;
}

function UTF32ToString(ptr) {
    var i = 0;

    var str = '';
    while (1) {
        var utf32 = HEAP32[(((ptr) + (i * 4)) >> 2)];
        if (utf32 == 0)
            return str;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
            var ch = utf32 - 0x10000;
            str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
            str += String.fromCharCode(utf32);
        }
    }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
    // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
    if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
    }
    if (maxBytesToWrite < 4) return 0;
    var startPtr = outPtr;
    var endPtr = startPtr + maxBytesToWrite - 4;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
            var trailSurrogate = str.charCodeAt(++i);
            codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr) >> 2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
    }
    // Null-terminate the pointer to the HEAP.
    HEAP32[((outPtr) >> 2)] = 0;
    return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
    var len = 0;
    for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF)++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
    }

    return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
    var size = lengthBytesUTF8(str) + 1;
    var ret = _malloc(size);
    if (ret) stringToUTF8Array(str, HEAP8, ret, size);
    return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
    var size = lengthBytesUTF8(str) + 1;
    var ret = stackAlloc(size);
    stringToUTF8Array(str, HEAP8, ret, size);
    return ret;
}

function demangle(func) {
    return func;
}

function demangleAll(text) {
    var regex =
        /__Z[\w\d_]+/g;
    return text.replace(regex,
        function (x) {
            var y = demangle(x);
            return x === y ? x : (x + ' [' + y + ']');
        });
}

function jsStackTrace() {
    var err = new Error();
    if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
            throw new Error(0);
        } catch (e) {
            err = e;
        }
        if (!err.stack) {
            return '(no stack trace available)';
        }
    }
    return err.stack.toString();
}

function stackTrace() {
    var js = jsStackTrace();
    if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
    return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
    if (x % multiple > 0) {
        x += multiple - (x % multiple);
    }
    return x;
}

var HEAP,
    /** @type {ArrayBuffer} */
    buffer,
    /** @type {Int8Array} */
    HEAP8,
    /** @type {Uint8Array} */
    HEAPU8,
    /** @type {Int16Array} */
    HEAP16,
    /** @type {Uint16Array} */
    HEAPU16,
    /** @type {Int32Array} */
    HEAP32,
    /** @type {Uint32Array} */
    HEAPU32,
    /** @type {Float32Array} */
    HEAPF32,
    /** @type {Float64Array} */
    HEAPF64;

function updateGlobalBuffer(buf) {
    Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
    Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
    Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
    Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
    Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
    Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
    Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
    Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
    Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
staticSealed = false;



function abortOnCannotGrowMemory() {
    abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
    abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
    buffer = Module['buffer'];
} else {
    // Use a WebAssembly memory where available
    {
        buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
    Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
    return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
            callback();
            continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
            if (callback.arg === undefined) {
                Module['dynCall_v'](func);
            } else {
                Module['dynCall_vi'](func, callback.arg);
            }
        } else {
            func(callback.arg === undefined ? null : callback.arg);
        }
    }
}

var __ATPRERUN__ = []; // functions called before the runtime is initialized
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
    // compatibility - merge in anything from Module['preRun'] at this time
    if (Module['preRun']) {
        if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
        while (Module['preRun'].length) {
            addOnPreRun(Module['preRun'].shift());
        }
    }
    callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
    if (runtimeInitialized) return;
    runtimeInitialized = true;
    callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
    callRuntimeCallbacks(__ATEXIT__);
    runtimeExited = true;
}

function postRun() {
    // compatibility - merge in anything from Module['postRun'] at this time
    if (Module['postRun']) {
        if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
        while (Module['postRun'].length) {
            addOnPostRun(Module['postRun'].shift());
        }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
    __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
    __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
    __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
    warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

    var /** @type {number} */ lastChar, /** @type {number} */ end;
    if (dontAddNull) {
        // stringToUTF8Array always appends null. If we don't want to do that, remember the
        // character that existed at the location where the null will be placed, and restore
        // that after the write (below).
        end = buffer + lengthBytesUTF8(string);
        lastChar = HEAP8[end];
    }
    stringToUTF8(string, buffer, Infinity);
    if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
    HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
    for (var i = 0; i < str.length; ++i) {
        HEAP8[((buffer++) >> 0)] = str.charCodeAt(i);
    }
    // Null-terminate the pointer to the HEAP.
    if (!dontAddNull) HEAP8[((buffer) >> 0)] = 0;
}

function unSign(value, bits, ignore) {
    if (value >= 0) {
        return value;
    }
    return bits <= 32 ? 2 * Math.abs(1 << (bits - 1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
        : Math.pow(2, bits) + value;
}
function reSign(value, bits, ignore) {
    if (value <= 0) {
        return value;
    }
    var half = bits <= 32 ? Math.abs(1 << (bits - 1)) // abs is needed if bits == 32
        : Math.pow(2, bits - 1);
    if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
        // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
        // TODO: In i64 mode 1, resign the two parts separately and safely
        value = -2 * half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
    }
    return value;
}


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
    return id;
}

function addRunDependency(id) {
    runDependencies++;
    if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
    }
}

function removeRunDependency(id) {
    runDependencies--;
    if (Module['monitorRunDependencies']) {
        Module['monitorRunDependencies'](runDependencies);
    }
    if (runDependencies == 0) {
        if (runDependencyWatcher !== null) {
            clearInterval(runDependencyWatcher);
            runDependencyWatcher = null;
        }
        if (dependenciesFulfilled) {
            var callback = dependenciesFulfilled;
            dependenciesFulfilled = null;
            callback(); // can add another dependenciesFulfilled
        }
    }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
    return String.prototype.startsWith ?
        filename.startsWith(dataURIPrefix) :
        filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function ($0, $1, $2, $3, $4, $5, $6) { frame_callback($0, $1, $2, $3, $4, $5, $6); }];

function _emscripten_asm_const_iiiiiiii(code, a0, a1, a2, a3, a4, a5, a6) {
    return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5, a6);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 33904;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

    HEAP8[tempDoublePtr] = HEAP8[ptr];

    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];

    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];

    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];

}

function copyTempDouble(ptr) {

    HEAP8[tempDoublePtr] = HEAP8[ptr];

    HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];

    HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];

    HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];

    HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];

    HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];

    HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];

    HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];

}

// {{PRE_LIBRARY}}


function ___assert_fail(condition, filename, line, func) {
    abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
}


function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
    return !!__ZSt18uncaught_exceptionv.uncaught_exception;
}



var EXCEPTIONS = {
    last: 0, caught: [], infos: {}, deAdjust: function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var key in EXCEPTIONS.infos) {
            var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
            var info = EXCEPTIONS.infos[ptr];
            if (info.adjusted === adjusted) {
                return ptr;
            }
        }
        return adjusted;
    }, addRef: function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
    }, decRef: function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
            if (info.destructor) {
                Module['dynCall_vi'](info.destructor, ptr);
            }
            delete EXCEPTIONS.infos[ptr];
            ___cxa_free_exception(ptr);
        }
    }, clearRef: function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
    }
};
function ___resumeException(ptr) {
    if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
    throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
} function ___cxa_find_matching_catch() {
    var thrown = EXCEPTIONS.last;
    if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0), 0) | 0);
    }
    var info = EXCEPTIONS.infos[thrown];
    var throwntype = info.type;
    if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0), thrown) | 0);
    }
    var typeArray = Array.prototype.slice.call(arguments);

    var pointer = Module['___cxa_is_pointer_type'](throwntype);
    // can_catch receives a **, add indirection
    if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
    HEAP32[((___cxa_find_matching_catch.buffer) >> 2)] = thrown;
    thrown = ___cxa_find_matching_catch.buffer;
    // The different catch blocks are denoted by different types.
    // Due to inheritance, those types may not precisely match the
    // type of the thrown object. Find one which matches, and
    // return the type of the catch block which should be called.
    for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
            thrown = HEAP32[((thrown) >> 2)]; // undo indirection
            info.adjusted = thrown;
            return ((setTempRet0(typeArray[i]), thrown) | 0);
        }
    }
    // Shouldn't happen unless we have bogus data in typeArray
    // or encounter a type for which emscripten doesn't have suitable
    // typeinfo defined. Best-efforts match just in case.
    thrown = HEAP32[((thrown) >> 2)]; // undo indirection
    return ((setTempRet0(throwntype), thrown) | 0);
} function ___gxx_personality_v0() {
}





var SYSCALLS = {
    varargs: 0, get: function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs) - (4)) >> 2)];
        return ret;
    }, getStr: function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
    }, get64: function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
    }, getZero: function () {
        assert(SYSCALLS.get() === 0);
    }
}; function ___syscall140(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // llseek
        var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
        // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
        var offset = offset_low;
        FS.llseek(stream, offset, whence);
        HEAP32[((result) >> 2)] = stream.position;
        if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
        return 0;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}


function flush_NO_FILESYSTEM() {
    // flush anything remaining in the buffers during shutdown
    var fflush = Module["_fflush"];
    if (fflush) fflush(0);
    var printChar = ___syscall146.printChar;
    if (!printChar) return;
    var buffers = ___syscall146.buffers;
    if (buffers[1].length) printChar(1, 10);
    if (buffers[2].length) printChar(2, 10);
} function ___syscall146(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // writev
        // hack to support printf in NO_FILESYSTEM
        var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
        var ret = 0;
        if (!___syscall146.buffers) {
            ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
            ___syscall146.printChar = function (stream, curr) {
                var buffer = ___syscall146.buffers[stream];
                assert(buffer);
                if (curr === 0 || curr === 10) {
                    (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
                    buffer.length = 0;
                } else {
                    buffer.push(curr);
                }
            };
        }
        for (var i = 0; i < iovcnt; i++) {
            var ptr = HEAP32[(((iov) + (i * 8)) >> 2)];
            var len = HEAP32[(((iov) + (i * 8 + 4)) >> 2)];
            for (var j = 0; j < len; j++) {
                ___syscall146.printChar(stream, HEAPU8[ptr + j]);
            }
            ret += len;
        }
        return ret;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}

function ___syscall6(which, varargs) {
SYSCALLS.varargs = varargs;
    try {
        // close
        var stream = SYSCALLS.getStreamFromFD();
        FS.close(stream);
        return 0;
    } catch (e) {
        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
        return -e.errno;
    }
}







var cttz_i8 = allocate([8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0], "i8", ALLOC_STATIC);







var _emscripten_asm_const_int = true;



function __reallyNegative(x) {
    return x < 0 || (x === 0 && (1 / x) === -Infinity);
} function __formatString(format, varargs) {
    assert((varargs & 3) === 0);
    var textIndex = format;
    var argIndex = varargs;
    // This must be called before reading a double or i64 vararg. It will bump the pointer properly.
    // It also does an assert on i32 values, so it's nice to call it before all varargs calls.
    function prepVararg(ptr, type) {
        if (type === 'double' || type === 'i64') {
            // move so the load is aligned
            if (ptr & 7) {
                assert((ptr & 7) === 4);
                ptr += 4;
            }
        } else {
            assert((ptr & 3) === 0);
        }
        return ptr;
    }
    function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = prepVararg(argIndex, type);
        if (type === 'double') {
            ret = HEAPF64[((argIndex) >> 3)];
            argIndex += 8;
        } else if (type == 'i64') {
            ret = [HEAP32[((argIndex) >> 2)],
            HEAP32[(((argIndex) + (4)) >> 2)]];
            argIndex += 8;
        } else {
            assert((argIndex & 3) === 0);
            type = 'i32'; // varargs are always i32, i64, or double
            ret = HEAP32[((argIndex) >> 2)];
            argIndex += 4;
        }
        return ret;
    }

    var ret = [];
    var curr, next, currArg;
    while (1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex) >> 0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex + 1) >> 0)];
        if (curr == 37) {
            // Handle flags.
            var flagAlwaysSigned = false;
            var flagLeftAlign = false;
            var flagAlternative = false;
            var flagZeroPad = false;
            var flagPadSign = false;
            flagsLoop: while (1) {
                switch (next) {
                    case 43:
                        flagAlwaysSigned = true;
                        break;
                    case 45:
                        flagLeftAlign = true;
                        break;
                    case 35:
                        flagAlternative = true;
                        break;
                    case 48:
                        if (flagZeroPad) {
                            break flagsLoop;
                        } else {
                            flagZeroPad = true;
                            break;
                        }
                    case 32:
                        flagPadSign = true;
                        break;
                    default:
                        break flagsLoop;
                }
                textIndex++;
                next = HEAP8[((textIndex + 1) >> 0)];
            }

            // Handle width.
            var width = 0;
            if (next == 42) {
                width = getNextArg('i32');
                textIndex++;
                next = HEAP8[((textIndex + 1) >> 0)];
            } else {
                while (next >= 48 && next <= 57) {
                    width = width * 10 + (next - 48);
                    textIndex++;
                    next = HEAP8[((textIndex + 1) >> 0)];
                }
            }

            // Handle precision.
            var precisionSet = false, precision = -1;
            if (next == 46) {
                precision = 0;
                precisionSet = true;
                textIndex++;
                next = HEAP8[((textIndex + 1) >> 0)];
                if (next == 42) {
                    precision = getNextArg('i32');
                    textIndex++;
                } else {
                    while (1) {
                        var precisionChr = HEAP8[((textIndex + 1) >> 0)];
                        if (precisionChr < 48 ||
                            precisionChr > 57) break;
                        precision = precision * 10 + (precisionChr - 48);
                        textIndex++;
                    }
                }
                next = HEAP8[((textIndex + 1) >> 0)];
            }
            if (precision < 0) {
                precision = 6; // Standard default.
                precisionSet = false;
            }

            // Handle integer sizes. WARNING: These assume a 32-bit architecture!
            var argSize;
            switch (String.fromCharCode(next)) {
                case 'h':
                    var nextNext = HEAP8[((textIndex + 2) >> 0)];
                    if (nextNext == 104) {
                        textIndex++;
                        argSize = 1; // char (actually i32 in varargs)
                    } else {
                        argSize = 2; // short (actually i32 in varargs)
                    }
                    break;
                case 'l':
                    var nextNext = HEAP8[((textIndex + 2) >> 0)];
                    if (nextNext == 108) {
                        textIndex++;
                        argSize = 8; // long long
                    } else {
                        argSize = 4; // long
                    }
                    break;
                case 'L': // long long
                case 'q': // int64_t
                case 'j': // intmax_t
                    argSize = 8;
                    break;
                case 'z': // size_t
                case 't': // ptrdiff_t
                case 'I': // signed ptrdiff_t or unsigned size_t
                    argSize = 4;
                    break;
                default:
                    argSize = null;
            }
            if (argSize) textIndex++;
            next = HEAP8[((textIndex + 1) >> 0)];

            // Handle type specifier.
            switch (String.fromCharCode(next)) {
                case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
                    // Integer.
                    var signed = next == 100 || next == 105;
                    argSize = argSize || 4;
                    currArg = getNextArg('i' + (argSize * 8));
                    var origArg = currArg;
                    var argText;
                    // Flatten i64-1 [low, high] into a (slightly rounded) double
                    if (argSize == 8) {
                        currArg = makeBigInt(currArg[0], currArg[1], next == 117);
                    }
                    // Truncate to requested size.
                    if (argSize <= 4) {
                        var limit = Math.pow(256, argSize) - 1;
                        currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
                    }
                    // Format the number.
                    var currAbsArg = Math.abs(currArg);
                    var prefix = '';
                    if (next == 100 || next == 105) {
                        if (argSize == 8 && typeof i64Math === 'object') argText = i64Math.stringify(origArg[0], origArg[1], null); else
                            argText = reSign(currArg, 8 * argSize, 1).toString(10);
                    } else if (next == 117) {
                        if (argSize == 8 && typeof i64Math === 'object') argText = i64Math.stringify(origArg[0], origArg[1], true); else
                            argText = unSign(currArg, 8 * argSize, 1).toString(10);
                        currArg = Math.abs(currArg);
                    } else if (next == 111) {
                        argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
                    } else if (next == 120 || next == 88) {
                        prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                        if (argSize == 8 && typeof i64Math === 'object') {
                            if (origArg[1]) {
                                argText = (origArg[1] >>> 0).toString(16);
                                var lower = (origArg[0] >>> 0).toString(16);
                                while (lower.length < 8) lower = '0' + lower;
                                argText += lower;
                            } else {
                                argText = (origArg[0] >>> 0).toString(16);
                            }
                        } else
                            if (currArg < 0) {
                                // Represent negative numbers in hex as 2's complement.
                                currArg = -currArg;
                                argText = (currAbsArg - 1).toString(16);
                                var buffer = [];
                                for (var i = 0; i < argText.length; i++) {
                                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                                }
                                argText = buffer.join('');
                                while (argText.length < argSize * 2) argText = 'f' + argText;
                            } else {
                                argText = currAbsArg.toString(16);
                            }
                        if (next == 88) {
                            prefix = prefix.toUpperCase();
                            argText = argText.toUpperCase();
                        }
                    } else if (next == 112) {
                        if (currAbsArg === 0) {
                            argText = '(nil)';
                        } else {
                            prefix = '0x';
                            argText = currAbsArg.toString(16);
                        }
                    }
                    if (precisionSet) {
                        while (argText.length < precision) {
                            argText = '0' + argText;
                        }
                    }

                    // Add sign if needed
                    if (currArg >= 0) {
                        if (flagAlwaysSigned) {
                            prefix = '+' + prefix;
                        } else if (flagPadSign) {
                            prefix = ' ' + prefix;
                        }
                    }

                    // Move sign to prefix so we zero-pad after the sign
                    if (argText.charAt(0) == '-') {
                        prefix = '-' + prefix;
                        argText = argText.substr(1);
                    }

                    // Add padding.
                    while (prefix.length + argText.length < width) {
                        if (flagLeftAlign) {
                            argText += ' ';
                        } else {
                            if (flagZeroPad) {
                                argText = '0' + argText;
                            } else {
                                prefix = ' ' + prefix;
                            }
                        }
                    }

                    // Insert the result into the buffer.
                    argText = prefix + argText;
                    argText.split('').forEach(function (chr) {
                        ret.push(chr.charCodeAt(0));
                    });
                    break;
                }
                case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
                    // Float.
                    currArg = getNextArg('double');
                    var argText;
                    if (isNaN(currArg)) {
                        argText = 'nan';
                        flagZeroPad = false;
                    } else if (!isFinite(currArg)) {
                        argText = (currArg < 0 ? '-' : '') + 'inf';
                        flagZeroPad = false;
                    } else {
                        var isGeneral = false;
                        var effectivePrecision = Math.min(precision, 20);

                        // Convert g/G to f/F or e/E, as per:
                        // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                        if (next == 103 || next == 71) {
                            isGeneral = true;
                            precision = precision || 1;
                            var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                            if (precision > exponent && exponent >= -4) {
                                next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                                precision -= exponent + 1;
                            } else {
                                next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                                precision--;
                            }
                            effectivePrecision = Math.min(precision, 20);
                        }

                        if (next == 101 || next == 69) {
                            argText = currArg.toExponential(effectivePrecision);
                            // Make sure the exponent has at least 2 digits.
                            if (/[eE][-+]\d$/.test(argText)) {
                                argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                            }
                        } else if (next == 102 || next == 70) {
                            argText = currArg.toFixed(effectivePrecision);
                            if (currArg === 0 && __reallyNegative(currArg)) {
                                argText = '-' + argText;
                            }
                        }

                        var parts = argText.split('e');
                        if (isGeneral && !flagAlternative) {
                            // Discard trailing zeros and periods.
                            while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                                (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                                parts[0] = parts[0].slice(0, -1);
                            }
                        } else {
                            // Make sure we have a period in alternative mode.
                            if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                            // Zero pad until required precision.
                            while (precision > effectivePrecision++) parts[0] += '0';
                        }
                        argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');

                        // Capitalize 'E' if needed.
                        if (next == 69) argText = argText.toUpperCase();

                        // Add sign.
                        if (currArg >= 0) {
                            if (flagAlwaysSigned) {
                                argText = '+' + argText;
                            } else if (flagPadSign) {
                                argText = ' ' + argText;
                            }
                        }
                    }

                    // Add padding.
                    while (argText.length < width) {
                        if (flagLeftAlign) {
                            argText += ' ';
                        } else {
                            if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                                argText = argText[0] + '0' + argText.slice(1);
                            } else {
                                argText = (flagZeroPad ? '0' : ' ') + argText;
                            }
                        }
                    }

                    // Adjust case.
                    if (next < 97) argText = argText.toUpperCase();

                    // Insert the result into the buffer.
                    argText.split('').forEach(function (chr) {
                        ret.push(chr.charCodeAt(0));
                    });
                    break;
                }
                case 's': {
                    // String.
                    var arg = getNextArg('i8*');
                    var argLength = arg ? _strlen(arg) : '(null)'.length;
                    if (precisionSet) argLength = Math.min(argLength, precision);
                    if (!flagLeftAlign) {
                        while (argLength < width--) {
                            ret.push(32);
                        }
                    }
                    if (arg) {
                        for (var i = 0; i < argLength; i++) {
                            ret.push(HEAPU8[((arg++) >> 0)]);
                        }
                    } else {
                        ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
                    }
                    if (flagLeftAlign) {
                        while (argLength < width--) {
                            ret.push(32);
                        }
                    }
                    break;
                }
                case 'c': {
                    // Character.
                    if (flagLeftAlign) ret.push(getNextArg('i8'));
                    while (--width > 0) {
                        ret.push(32);
                    }
                    if (!flagLeftAlign) ret.push(getNextArg('i8'));
                    break;
                }
                case 'n': {
                    // Write the length written so far to the next parameter.
                    var ptr = getNextArg('i32*');
                    HEAP32[((ptr) >> 2)] = ret.length;
                    break;
                }
                case '%': {
                    // Literal percent sign.
                    ret.push(curr);
                    break;
                }
                default: {
                    // Unknown specifiers remain untouched.
                    for (var i = startTextIndex; i < textIndex + 2; i++) {
                        ret.push(HEAP8[((i) >> 0)]);
                    }
                }
            }
            textIndex += 2;
            // TODO: Support a/A (hex float) and m (last error) specifiers.
            // TODO: Support %1${specifier} for arg selection.
        } else {
            ret.push(curr);
            textIndex += 1;
        }
    }
    return ret;
}



function __emscripten_traverse_stack(args) {
    if (!args || !args.callee || !args.callee.name) {
        return [null, '', ''];
    }

    var funstr = args.callee.toString();
    var funcname = args.callee.name;
    var str = '(';
    var first = true;
    for (var i in args) {
        var a = args[i];
        if (!first) {
            str += ", ";
        }
        first = false;
        if (typeof a === 'number' || typeof a === 'string') {
            str += a;
        } else {
            str += '(' + typeof a + ')';
        }
    }
    str += ')';
    var caller = args.callee.caller;
    args = caller ? caller.arguments : [];
    if (first)
        str = '';
    return [args, funcname, str];
} function _emscripten_get_callstack_js(flags) {
    var callstack = jsStackTrace();

    // Find the symbols in the callstack that corresponds to the functions that report callstack information, and remove everyhing up to these from the output.
    var iThisFunc = callstack.lastIndexOf('_emscripten_log');
    var iThisFunc2 = callstack.lastIndexOf('_emscripten_get_callstack');
    var iNextLine = callstack.indexOf('\n', Math.max(iThisFunc, iThisFunc2)) + 1;
    callstack = callstack.slice(iNextLine);

    // If user requested to see the original source stack, but no source map information is available, just fall back to showing the JS stack.
    if (flags & 8/*EM_LOG_C_STACK*/ && typeof emscripten_source_map === 'undefined') {
        warnOnce('Source map information is not available, emscripten_log with EM_LOG_C_STACK will be ignored. Build with "--pre-js $EMSCRIPTEN/src/emscripten-source-map.min.js" linker flag to add source map loading to code.');
        flags ^= 8/*EM_LOG_C_STACK*/;
        flags |= 16/*EM_LOG_JS_STACK*/;
    }

    var stack_args = null;
    if (flags & 128 /*EM_LOG_FUNC_PARAMS*/) {
        // To get the actual parameters to the functions, traverse the stack via the unfortunately deprecated 'arguments.callee' method, if it works:
        stack_args = __emscripten_traverse_stack(arguments);
        while (stack_args[1].indexOf('_emscripten_') >= 0)
            stack_args = __emscripten_traverse_stack(stack_args[0]);
    }

    // Process all lines:
    var lines = callstack.split('\n');
    callstack = '';
    var newFirefoxRe = new RegExp('\\s*(.*?)@(.*?):([0-9]+):([0-9]+)'); // New FF30 with column info: extract components of form '       Object._main@http://server.com:4324:12'
    var firefoxRe = new RegExp('\\s*(.*?)@(.*):(.*)(:(.*))?'); // Old FF without column info: extract components of form '       Object._main@http://server.com:4324'
    var chromeRe = new RegExp('\\s*at (.*?) \\\((.*):(.*):(.*)\\\)'); // Extract components of form '    at Object._main (http://server.com/file.html:4324:12)'

    for (var l in lines) {
        var line = lines[l];

        var jsSymbolName = '';
        var file = '';
        var lineno = 0;
        var column = 0;

        var parts = chromeRe.exec(line);
        if (parts && parts.length == 5) {
            jsSymbolName = parts[1];
            file = parts[2];
            lineno = parts[3];
            column = parts[4];
        } else {
            parts = newFirefoxRe.exec(line);
            if (!parts) parts = firefoxRe.exec(line);
            if (parts && parts.length >= 4) {
                jsSymbolName = parts[1];
                file = parts[2];
                lineno = parts[3];
                column = parts[4] | 0; // Old Firefox doesn't carry column information, but in new FF30, it is present. See https://bugzilla.mozilla.org/show_bug.cgi?id=762556
            } else {
                // Was not able to extract this line for demangling/sourcemapping purposes. Output it as-is.
                callstack += line + '\n';
                continue;
            }
        }

        // Try to demangle the symbol, but fall back to showing the original JS symbol name if not available.
        var cSymbolName = (flags & 32/*EM_LOG_DEMANGLE*/) ? demangle(jsSymbolName) : jsSymbolName;
        if (!cSymbolName) {
            cSymbolName = jsSymbolName;
        }

        var haveSourceMap = false;

        if (flags & 8/*EM_LOG_C_STACK*/) {
            var orig = emscripten_source_map.originalPositionFor({ line: lineno, column: column });
            haveSourceMap = (orig && orig.source);
            if (haveSourceMap) {
                if (flags & 64/*EM_LOG_NO_PATHS*/) {
                    orig.source = orig.source.substring(orig.source.replace(/\\/g, "/").lastIndexOf('/') + 1);
                }
                callstack += '    at ' + cSymbolName + ' (' + orig.source + ':' + orig.line + ':' + orig.column + ')\n';
            }
        }
        if ((flags & 16/*EM_LOG_JS_STACK*/) || !haveSourceMap) {
            if (flags & 64/*EM_LOG_NO_PATHS*/) {
                file = file.substring(file.replace(/\\/g, "/").lastIndexOf('/') + 1);
            }
            callstack += (haveSourceMap ? ('     = ' + jsSymbolName) : ('    at ' + cSymbolName)) + ' (' + file + ':' + lineno + ':' + column + ')\n';
        }

        // If we are still keeping track with the callstack by traversing via 'arguments.callee', print the function parameters as well.
        if (flags & 128 /*EM_LOG_FUNC_PARAMS*/ && stack_args[0]) {
            if (stack_args[1] == jsSymbolName && stack_args[2].length > 0) {
                callstack = callstack.replace(/\s+$/, '');
                callstack += ' with values: ' + stack_args[1] + stack_args[2] + '\n';
            }
            stack_args = __emscripten_traverse_stack(stack_args[0]);
        }
    }
    // Trim extra whitespace at the end of the output.
    callstack = callstack.replace(/\s+$/, '');
    return callstack;
} function _emscripten_log_js(flags, str) {
    if (flags & 24/*EM_LOG_C_STACK | EM_LOG_JS_STACK*/) {
        str = str.replace(/\s+$/, ''); // Ensure the message and the callstack are joined cleanly with exactly one newline.
        str += (str.length > 0 ? '\n' : '') + _emscripten_get_callstack_js(flags);
    }

    if (flags & 1 /*EM_LOG_CONSOLE*/) {
        if (flags & 4 /*EM_LOG_ERROR*/) {
            console.error(str);
        } else if (flags & 2 /*EM_LOG_WARN*/) {
            console.warn(str);
        } else {
            console.log(str);
        }
    } else if (flags & 6 /*EM_LOG_ERROR|EM_LOG_WARN*/) {
        Module.printErr(str);
    } else {
        Module.print(str);
    }
} function _emscripten_log(flags, varargs) {
    // Extract the (optionally-existing) printf format specifier field from varargs.
    var format = HEAP32[((varargs) >> 2)];
    varargs += 4;
    var str = '';
    if (format) {
        var result = __formatString(format, varargs);
        for (var i = 0; i < result.length; ++i) {
            str += String.fromCharCode(result[i]);
        }
    }
    _emscripten_log_js(flags, str);
}

function _gettimeofday(ptr) {
    var now = Date.now();
    HEAP32[((ptr) >> 2)] = (now / 1000) | 0; // seconds
    HEAP32[(((ptr) + (4)) >> 2)] = ((now % 1000) * 1000) | 0; // microseconds
    return 0;
}





var _llvm_ceil_f64 = Math_ceil;


function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
    return dest;
}






function ___setErrNo(value) {
    if (Module['___errno_location']) HEAP32[((Module['___errno_location']()) >> 2)] = value;
    return value;
}
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

var ASSERTIONS = false;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
}

function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
        var chr = array[i];
        if (chr > 0xFF) {
            if (ASSERTIONS) {
                assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
            }
            chr &= 0xFF;
        }
        ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
    var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

    var output = '';
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;
    // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
    do {
        enc1 = keyStr.indexOf(input.charAt(i++));
        enc2 = keyStr.indexOf(input.charAt(i++));
        enc3 = keyStr.indexOf(input.charAt(i++));
        enc4 = keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 !== 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 !== 64) {
            output = output + String.fromCharCode(chr3);
        }
    } while (i < input.length);
    return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
    if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
        var buf;
        try {
            buf = Buffer.from(s, 'base64');
        } catch (_) {
            buf = new Buffer(s, 'base64');
        }
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    }

    try {
        var decoded = decodeBase64(s);
        var bytes = new Uint8Array(decoded.length);
        for (var i = 0; i < decoded.length; ++i) {
            bytes[i] = decoded.charCodeAt(i);
        }
        return bytes;
    } catch (_) {
        throw new Error('Converting base64 string to bytes failed.');
    }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
    if (!isDataURI(filename)) {
        return;
    }

    return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function invoke_ii(index, a1) {
    try {
        return Module["dynCall_ii"](index, a1);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_iii(index, a1, a2) {
    try {
        return Module["dynCall_iii"](index, a1, a2);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_iiii(index, a1, a2, a3) {
    try {
        return Module["dynCall_iiii"](index, a1, a2, a3);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_iiiii(index, a1, a2, a3, a4) {
    try {
        return Module["dynCall_iiiii"](index, a1, a2, a3, a4);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_iiiiii(index, a1, a2, a3, a4, a5) {
    try {
        return Module["dynCall_iiiiii"](index, a1, a2, a3, a4, a5);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
    try {
        return Module["dynCall_iiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
    try {
        return Module["dynCall_iiiiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8, a9);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_v(index) {
    try {
        Module["dynCall_v"](index);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_vi(index, a1) {
    try {
        Module["dynCall_vi"](index, a1);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_vii(index, a1, a2) {
    try {
        Module["dynCall_vii"](index, a1, a2);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_viii(index, a1, a2, a3) {
    try {
        Module["dynCall_viii"](index, a1, a2, a3);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_viiii(index, a1, a2, a3, a4) {
    try {
        Module["dynCall_viiii"](index, a1, a2, a3, a4);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_viiiii(index, a1, a2, a3, a4, a5) {
    try {
        Module["dynCall_viiiii"](index, a1, a2, a3, a4, a5);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {
    try {
        Module["dynCall_viiiiii"](index, a1, a2, a3, a4, a5, a6);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

function invoke_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
    try {
        Module["dynCall_viiiiiiii"](index, a1, a2, a3, a4, a5, a6, a7, a8);
    } catch (e) {
        if (typeof e !== 'number' && e !== 'longjmp') throw e;
        Module["setThrew"](1, 0);
    }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___gxx_personality_v0": ___gxx_personality_v0, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall6": ___syscall6, "__emscripten_traverse_stack": __emscripten_traverse_stack, "__formatString": __formatString, "__reallyNegative": __reallyNegative, "_emscripten_asm_const_iiiiiiii": _emscripten_asm_const_iiiiiiii, "_emscripten_get_callstack_js": _emscripten_get_callstack_js, "_emscripten_log": _emscripten_log, "_emscripten_log_js": _emscripten_log_js, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function (global, env, buffer) {
    'use asm';


    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);

    var DYNAMICTOP_PTR = env.DYNAMICTOP_PTR | 0;
    var tempDoublePtr = env.tempDoublePtr | 0;
    var ABORT = env.ABORT | 0;
    var STACKTOP = env.STACKTOP | 0;
    var STACK_MAX = env.STACK_MAX | 0;
    var cttz_i8 = env.cttz_i8 | 0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = global.NaN, inf = global.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
    var tempRet0 = 0;

    var Math_floor = global.Math.floor;
    var Math_abs = global.Math.abs;
    var Math_sqrt = global.Math.sqrt;
    var Math_pow = global.Math.pow;
    var Math_cos = global.Math.cos;
    var Math_sin = global.Math.sin;
    var Math_tan = global.Math.tan;
    var Math_acos = global.Math.acos;
    var Math_asin = global.Math.asin;
    var Math_atan = global.Math.atan;
    var Math_atan2 = global.Math.atan2;
    var Math_exp = global.Math.exp;
    var Math_log = global.Math.log;
    var Math_ceil = global.Math.ceil;
    var Math_imul = global.Math.imul;
    var Math_min = global.Math.min;
    var Math_max = global.Math.max;
    var Math_clz32 = global.Math.clz32;
    var abort = env.abort;
    var assert = env.assert;
    var enlargeMemory = env.enlargeMemory;
    var getTotalMemory = env.getTotalMemory;
    var abortOnCannotGrowMemory = env.abortOnCannotGrowMemory;
    var invoke_ii = env.invoke_ii;
    var invoke_iii = env.invoke_iii;
    var invoke_iiii = env.invoke_iiii;
    var invoke_iiiii = env.invoke_iiiii;
    var invoke_iiiiii = env.invoke_iiiiii;
    var invoke_iiiiiiii = env.invoke_iiiiiiii;
    var invoke_iiiiiiiiii = env.invoke_iiiiiiiiii;
    var invoke_v = env.invoke_v;
    var invoke_vi = env.invoke_vi;
    var invoke_vii = env.invoke_vii;
    var invoke_viii = env.invoke_viii;
    var invoke_viiii = env.invoke_viiii;
    var invoke_viiiii = env.invoke_viiiii;
    var invoke_viiiiii = env.invoke_viiiiii;
    var invoke_viiiiiiii = env.invoke_viiiiiiii;
    var __ZSt18uncaught_exceptionv = env.__ZSt18uncaught_exceptionv;
    var ___assert_fail = env.___assert_fail;
    var ___cxa_find_matching_catch = env.___cxa_find_matching_catch;
    var ___gxx_personality_v0 = env.___gxx_personality_v0;
    var ___resumeException = env.___resumeException;
    var ___setErrNo = env.___setErrNo;
    var ___syscall140 = env.___syscall140;
    var ___syscall146 = env.___syscall146;
    var ___syscall6 = env.___syscall6;
    var __emscripten_traverse_stack = env.__emscripten_traverse_stack;
    var __formatString = env.__formatString;
    var __reallyNegative = env.__reallyNegative;
    var _emscripten_asm_const_iiiiiiii = env._emscripten_asm_const_iiiiiiii;
    var _emscripten_get_callstack_js = env._emscripten_get_callstack_js;
    var _emscripten_log = env._emscripten_log;
    var _emscripten_log_js = env._emscripten_log_js;
    var _emscripten_memcpy_big = env._emscripten_memcpy_big;
    var _gettimeofday = env._gettimeofday;
    var _llvm_ceil_f64 = env._llvm_ceil_f64;
    var flush_NO_FILESYSTEM = env.flush_NO_FILESYSTEM;
    var tempFloat = 0.0;

    // EMSCRIPTEN_START_FUNCS

    function stackAlloc(size) {
        size = size | 0;
        var ret = 0;
        ret = STACKTOP;
        STACKTOP = (STACKTOP + size) | 0;
        STACKTOP = (STACKTOP + 15) & -16;

        return ret | 0;
    }
    function stackSave() {
        return STACKTOP | 0;
    }
    function stackRestore(top) {
        top = top | 0;
        STACKTOP = top;
    }
    function establishStackSpace(stackBase, stackMax) {
        stackBase = stackBase | 0;
        stackMax = stackMax | 0;
        STACKTOP = stackBase;
        STACK_MAX = stackMax;
    }

    function setThrew(threw, value) {
        threw = threw | 0;
        value = value | 0;
        if ((__THREW__ | 0) == 0) {
            __THREW__ = threw;
            threwValue = value;
        }
    }

    function setTempRet0(value) {
        value = value | 0;
        tempRet0 = value;
    }
    function getTempRet0() {
        return tempRet0 | 0;
    }

    function _openh264_log($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        HEAP32[$vararg_buffer >> 2] = 10398;
        $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
        HEAP32[$vararg_ptr1 >> 2] = $1;
        $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
        HEAP32[$vararg_ptr2 >> 2] = $2;
        _emscripten_log(1, ($vararg_buffer | 0));
        STACKTOP = sp; return;
    }
    function _open_decoder() {
        var $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 96 | 0;
        $vararg_buffer10 = sp + 32 | 0;
        $vararg_buffer7 = sp + 24 | 0;
        $vararg_buffer4 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $0 = sp + 80 | 0;
        $1 = sp + 76 | 0;
        $2 = sp + 72 | 0;
        $3 = sp + 40 | 0;
        HEAP32[$0 >> 2] = 0;
        $4 = (_WelsCreateDecoder($0) | 0);
        $5 = ($4 | 0) == (0);
        if (!($5)) {
            HEAP32[$vararg_buffer >> 2] = 10420;
            _emscripten_log(1, ($vararg_buffer | 0));
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        $6 = HEAP32[$0 >> 2] | 0;
        $7 = ($6 | 0) == (0 | 0);
        if ($7) {
            HEAP32[$vararg_buffer1 >> 2] = 10443;
            _emscripten_log(1, ($vararg_buffer1 | 0));
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        HEAP32[$1 >> 2] = 1;
        HEAP32[$2 >> 2] = 3;
        $8 = HEAP32[$0 >> 2] | 0;
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($9)) + 28 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = (FUNCTION_TABLE_iiii[$11 & 15]($8, 10, $1) | 0);
        $13 = ($12 | 0) == (0);
        if (!($13)) {
            HEAP32[$vararg_buffer4 >> 2] = 10478;
            _emscripten_log(1, ($vararg_buffer4 | 0));
        }
        $14 = HEAP32[$0 >> 2] | 0;
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ((($15)) + 28 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = (FUNCTION_TABLE_iiii[$17 & 15]($14, 9, $2) | 0);
        $19 = ($18 | 0) == (0);
        if (!($19)) {
            HEAP32[$vararg_buffer7 >> 2] = 10478;
            _emscripten_log(1, ($vararg_buffer7 | 0));
        }
        ; HEAP32[$3 >> 2] = 0 | 0; HEAP32[$3 + 4 >> 2] = 0 | 0; HEAP32[$3 + 8 >> 2] = 0 | 0; HEAP32[$3 + 12 >> 2] = 0 | 0; HEAP32[$3 + 16 >> 2] = 0 | 0; HEAP32[$3 + 20 >> 2] = 0 | 0; HEAP32[$3 + 24 >> 2] = 0 | 0;
        $20 = ((($3)) + 4 | 0);
        HEAP32[$20 >> 2] = 23;
        $21 = ((($3)) + 12 | 0);
        HEAP8[$21 >> 0] = -1;
        $22 = ((($3)) + 16 | 0);
        HEAP32[$22 >> 2] = 2;
        $23 = ((($3)) + 28 | 0);
        HEAP32[$23 >> 2] = 1;
        $24 = HEAP32[$0 >> 2] | 0;
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = HEAP32[$25 >> 2] | 0;
        $27 = (FUNCTION_TABLE_iii[$26 & 1]($24, $3) | 0);
        $28 = ($27 | 0) == (0);
        if ($28) {
            $29 = HEAP32[$0 >> 2] | 0;
            $$0 = $29;
        } else {
            HEAP32[$vararg_buffer10 >> 2] = 10496;
            _emscripten_log(1, ($vararg_buffer10 | 0));
            $$0 = 0;
        }
        $$1 = $$0;
        STACKTOP = sp; return ($$1 | 0);
    }
    function _close_decoder($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0 | 0);
        if ($1) {
            return;
        }
        $2 = HEAP32[$0 >> 2] | 0;
        $3 = ((($2)) + 4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        (FUNCTION_TABLE_ii[$4 & 3]($0) | 0);
        _WelsDestroyDecoder($0);
        return;
    }
    function _decode_nal($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $$022 = 0, $$023 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $endptr = 0, $endptr25 = 0, $endptr27 = 0, $endptr29 = 0, $endptr31 = 0, $endptr33 = 0, $endptr35 = 0, $endptr37 = 0, $endptr39 = 0;
        var $endptr41 = 0, $strlen = 0, $strlen24 = 0, $strlen26 = 0, $strlen28 = 0, $strlen30 = 0, $strlen32 = 0, $strlen34 = 0, $strlen36 = 0, $strlen38 = 0, $strlen40 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 176 | 0;
        $vararg_buffer = sp + 48 | 0;
        $3 = sp + 160 | 0;
        $4 = sp;
        $5 = sp + 60 | 0;
        ; HEAP32[$3 >> 2] = 0 | 0; HEAP32[$3 + 4 >> 2] = 0 | 0; HEAP32[$3 + 8 >> 2] = 0 | 0;
        dest = $4; stop = dest + 48 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $6 = ($2 | 0) == (0);
        if ($6) {
            HEAP32[$5 >> 2] = 1;
            $7 = HEAP32[$0 >> 2] | 0;
            $8 = ((($7)) + 28 | 0);
            $9 = HEAP32[$8 >> 2] | 0;
            (FUNCTION_TABLE_iiii[$9 & 15]($0, 1, $5) | 0);
            $$022 = 0; $$023 = 0;
        } else {
            $$022 = $1; $$023 = $2;
        }
        $10 = HEAP32[$0 >> 2] | 0;
        $11 = ((($10)) + 16 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = (FUNCTION_TABLE_iiiiii[$12 & 3]($0, $$022, $$023, $3, $4) | 0);
        $cond = ($13 | 0) == (0);
        if ($cond) {
            $14 = HEAP32[$4 >> 2] | 0;
            $15 = ($14 | 0) == (0);
            if ($15) {
                $$0 = 0;
                STACKTOP = sp; return ($$0 | 0);
            }
            $16 = HEAP32[$3 >> 2] | 0;
            $17 = ((($3)) + 4 | 0);
            $18 = HEAP32[$17 >> 2] | 0;
            $19 = ((($3)) + 8 | 0);
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = ((($4)) + 24 | 0);
            $22 = HEAP32[$21 >> 2] | 0;
            $23 = ((($4)) + 28 | 0);
            $24 = HEAP32[$23 >> 2] | 0;
            $25 = ((($4)) + 36 | 0);
            $26 = HEAP32[$25 >> 2] | 0;
            $27 = ((($4)) + 40 | 0);
            $28 = HEAP32[$27 >> 2] | 0;
            $29 = _emscripten_asm_const_iiiiiiii(0, ($16 | 0), ($18 | 0), ($20 | 0), ($22 | 0), ($24 | 0), ($26 | 0), ($28 | 0)) | 0;
            $$0 = 1;
            STACKTOP = sp; return ($$0 | 0);
        }
        dest = $5; stop = dest + 100 | 0; do { HEAP8[dest >> 0] = 0 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
        $30 = $13 & 1;
        $31 = ($30 | 0) == (0);
        if (!($31)) {
            $strlen40 = (_strlen($5) | 0);
            $endptr41 = (($5) + ($strlen40) | 0);
            dest = $endptr41; src = 10563; stop = dest + 14 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $32 = $13 & 2;
        $33 = ($32 | 0) == (0);
        if (!($33)) {
            $strlen38 = (_strlen($5) | 0);
            $endptr39 = (($5) + ($strlen38) | 0);
            dest = $endptr39; src = 10577; stop = dest + 9 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $34 = $13 & 4;
        $35 = ($34 | 0) == (0);
        if (!($35)) {
            $strlen36 = (_strlen($5) | 0);
            $endptr37 = (($5) + ($strlen36) | 0);
            dest = $endptr37; src = 10586; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $36 = $13 & 8;
        $37 = ($36 | 0) == (0);
        if (!($37)) {
            $strlen34 = (_strlen($5) | 0);
            $endptr35 = (($5) + ($strlen34) | 0);
            dest = $endptr35; src = 10602; stop = dest + 14 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $38 = $13 & 16;
        $39 = ($38 | 0) == (0);
        if (!($39)) {
            $strlen32 = (_strlen($5) | 0);
            $endptr33 = (($5) + ($strlen32) | 0);
            dest = $endptr33; src = 10616; stop = dest + 13 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $40 = $13 & 32;
        $41 = ($40 | 0) == (0);
        if (!($41)) {
            $strlen30 = (_strlen($5) | 0);
            $endptr31 = (($5) + ($strlen30) | 0);
            dest = $endptr31; src = 10629; stop = dest + 20 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $42 = $13 & 4096;
        $43 = ($42 | 0) == (0);
        if (!($43)) {
            $strlen28 = (_strlen($5) | 0);
            $endptr29 = (($5) + ($strlen28) | 0);
            dest = $endptr29; src = 10649; stop = dest + 17 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $44 = $13 & 8192;
        $45 = ($44 | 0) == (0);
        if (!($45)) {
            $strlen26 = (_strlen($5) | 0);
            $endptr27 = (($5) + ($strlen26) | 0);
            dest = $endptr27; src = 10666; stop = dest + 21 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $46 = $13 & 16384;
        $47 = ($46 | 0) == (0);
        if (!($47)) {
            $strlen24 = (_strlen($5) | 0);
            $endptr25 = (($5) + ($strlen24) | 0);
            dest = $endptr25; src = 10687; stop = dest + 13 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        $48 = $13 & 32768;
        $49 = ($48 | 0) == (0);
        if (!($49)) {
            $strlen = (_strlen($5) | 0);
            $endptr = (($5) + ($strlen) | 0);
            dest = $endptr; src = 10700; stop = dest + 17 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        }
        HEAP32[$vararg_buffer >> 2] = 10717;
        $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
        HEAP32[$vararg_ptr1 >> 2] = $13;
        $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
        HEAP32[$vararg_ptr2 >> 2] = $5;
        _emscripten_log(1, ($vararg_buffer | 0));
        $$0 = -1;
        STACKTOP = sp; return ($$0 | 0);
    }
    function __Z6getnalPKhjj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$017$lcssa = 0, $$01720 = 0, $$018 = 0, $$021 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = (($1) + 3) | 0;
        $4 = ($1 >>> 0) < ($2 >>> 0);
        if (!($4)) {
            $$018 = -1;
            return ($$018 | 0);
        }
        $5 = ($3 >>> 0) < ($2 >>> 0);
        L4: do {
            if ($5) {
                $$01720 = $3; $$021 = 0;
                L5: while (1) {
                    $6 = (($0) + ($$01720) | 0);
                    $7 = HEAP8[$6 >> 0] | 0;
                    switch ($7 << 24 >> 24) {
                        case 0: {
                            $8 = (($$021) + 1) | 0;
                            $$1 = $8;
                            break;
                        }
                        case 1: {
                            $9 = ($$021 | 0) == (3);
                            if ($9) {
                                break L5;
                            } else {
                                $$1 = 0;
                            }
                            break;
                        }
                        default: {
                            $$1 = 0;
                        }
                    }
                    $12 = (($$01720) + 1) | 0;
                    $13 = ($12 >>> 0) < ($2 >>> 0);
                    if ($13) {
                        $$01720 = $12; $$021 = $$1;
                    } else {
                        $$017$lcssa = $12;
                        break L4;
                    }
                }
                $10 = (-3 - ($1)) | 0;
                $11 = (($10) + ($$01720)) | 0;
                $$018 = $11;
                return ($$018 | 0);
            } else {
                $$017$lcssa = $3;
            }
        } while (0);
        $14 = (($$017$lcssa) - ($1)) | 0;
        $$018 = $14;
        return ($$018 | 0);
    }
    function _decode_h264buffer($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $$0 = 0;
        while (1) {
            $3 = (__Z6getnalPKhjj($1, $$0, $2) | 0);
            $4 = (($1) + ($$0) | 0);
            (_decode_nal($0, $4, $3) | 0);
            $5 = (($3) + ($$0)) | 0;
            $6 = ($3 | 0) > (0);
            if ($6) {
                $$0 = $5;
            } else {
                break;
            }
        }
        return 0;
    }
    function __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$neg7 = 0, $$neg8 = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($1 | 0) == (0 | 0);
        if ($3) {
            return;
        }
        $4 = ((($1)) + -8 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 4 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($0)) + 8 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $$neg7 = (-7 - ($5)) | 0;
        $$neg8 = (($$neg7) - ($7)) | 0;
        $10 = (($$neg8) + ($9)) | 0;
        HEAP32[$8 >> 2] = $10;
        $11 = ((($1)) + -4 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        _free($12);
        return;
    }
    function __Z7WelsLogP13TagLogContextiPKcz($0, $1, $2, $varargs) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $varargs = $varargs | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 1088 | 0;
        $vararg_buffer10 = sp + 32 | 0;
        $vararg_buffer7 = sp + 24 | 0;
        $vararg_buffer4 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $3 = sp + 40 | 0;
        $4 = sp + 56 | 0;
        switch ($1 | 0) {
            case 1: {
                $5 = ((($0)) + 8 | 0);
                $6 = HEAP32[$5 >> 2] | 0;
                HEAP32[$vararg_buffer >> 2] = $6;
                (_WelsSnprintf($4, 1024, 10742, $vararg_buffer) | 0);
                break;
            }
            case 2: {
                $7 = ((($0)) + 8 | 0);
                $8 = HEAP32[$7 >> 2] | 0;
                HEAP32[$vararg_buffer1 >> 2] = $8;
                (_WelsSnprintf($4, 1024, 10773, $vararg_buffer1) | 0);
                break;
            }
            case 4: {
                $9 = ((($0)) + 8 | 0);
                $10 = HEAP32[$9 >> 2] | 0;
                HEAP32[$vararg_buffer4 >> 2] = $10;
                (_WelsSnprintf($4, 1024, 10806, $vararg_buffer4) | 0);
                break;
            }
            case 8: {
                $11 = ((($0)) + 8 | 0);
                $12 = HEAP32[$11 >> 2] | 0;
                HEAP32[$vararg_buffer7 >> 2] = $12;
                (_WelsSnprintf($4, 1024, 10836, $vararg_buffer7) | 0);
                break;
            }
            default: {
                $13 = ((($0)) + 8 | 0);
                $14 = HEAP32[$13 >> 2] | 0;
                HEAP32[$vararg_buffer10 >> 2] = $14;
                (_WelsSnprintf($4, 1024, 10867, $vararg_buffer10) | 0);
            }
        }
        (_WelsStrcat($4, 1024, $2) | 0);
        HEAP32[$3 >> 2] = $varargs;
        $15 = HEAP32[$0 >> 2] | 0;
        $16 = ((($0)) + 4 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        FUNCTION_TABLE_viiii[$15 & 31]($17, $1, $4, $3);
        STACKTOP = sp; return;
    }
    function _WelsSnprintf($0, $1, $2, $varargs) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $varargs = $varargs | 0;
        var $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $3 = sp;
        HEAP32[$3 >> 2] = $varargs;
        $4 = (_vsnprintf($0, $1, $2, $3) | 0);
        STACKTOP = sp; return ($4 | 0);
    }
    function _WelsStrcat($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = (_strlen($0) | 0);
        $4 = (($0) + ($3) | 0);
        $5 = (($1) - ($3)) | 0;
        (_strncpy($4, $2, $5) | 0);
        $6 = (($5) + -1) | 0;
        $7 = (($4) + ($6) | 0);
        HEAP8[$7 >> 0] = 0;
        return ($4 | 0);
    }
    function __ZNK10WelsCommon12CMemoryAlign18WelsGetMemoryUsageEv($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 8 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        return ($2 | 0);
    }
    function __ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
        var $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ((($0)) + 4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = (($4) + -1) | 0;
        $6 = (($1) + 8) | 0;
        $7 = (($6) + ($5)) | 0;
        $8 = (_malloc($7) | 0);
        $9 = ($8 | 0) == (0 | 0);
        $10 = (($8) + ($5) | 0);
        $11 = ((($10)) + 4 | 0);
        $12 = ((($11)) + 4 | 0);
        $13 = $12;
        $14 = $5 & $13;
        $15 = (0 - ($14)) | 0;
        $16 = (($12) + ($15) | 0);
        if ($9) {
            $$0 = 0;
            return ($$0 | 0);
        }
        $17 = ((($16)) + -8 | 0);
        $18 = ((($16)) + -4 | 0);
        HEAP32[$18 >> 2] = $8;
        HEAP32[$17 >> 2] = $1;
        $19 = ((($0)) + 8 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = (($1) + 7) | 0;
        $22 = (($21) + ($4)) | 0;
        $23 = (($22) + ($20)) | 0;
        HEAP32[$19 >> 2] = $23;
        _memset(($16 | 0), 0, ($1 | 0)) | 0;
        $$0 = $16;
        return ($$0 | 0);
    }
    function _WelsCPUFeatureDetect($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return 0;
    }
    function __ZN14welsCodecTraceD2Ev($0) {
        $0 = $0 | 0;
        var $1 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 4 | 0);
        HEAP32[$1 >> 2] = 0;
        return;
    }
    function __ZN14welsCodecTrace13SetTraceLevelEi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 | 0) > (-1);
        if (!($2)) {
            return;
        }
        HEAP32[$0 >> 2] = $1;
        return;
    }
    function __ZN14welsCodecTrace16SetTraceCallbackEPFvPviPKcE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 4 | 0);
        HEAP32[$2 >> 2] = $1;
        return;
    }
    function __ZN14welsCodecTrace23SetTraceCallbackContextEPv($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 8 | 0);
        HEAP32[$2 >> 2] = $1;
        return;
    }
    function _InitExpandPictureFunc($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = 3;
        $2 = ((($0)) + 4 | 0);
        HEAP32[$2 >> 2] = 4;
        $3 = ((($0)) + 8 | 0);
        HEAP32[$3 >> 2] = 4;
        return;
    }
    function __ZN10WelsCommon10InitMcFuncEP9TagMcFuncj($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = 9;
        $2 = ((($0)) + 4 | 0);
        HEAP32[$2 >> 2] = 3;
        $3 = ((($0)) + 8 | 0);
        HEAP32[$3 >> 2] = 11;
        $4 = ((($0)) + 20 | 0);
        HEAP32[$4 >> 2] = 1;
        $5 = ((($0)) + 12 | 0);
        HEAP32[$5 >> 2] = 2;
        $6 = ((($0)) + 16 | 0);
        HEAP32[$6 >> 2] = 3;
        return;
    }
    function _ExpandReferencingPicture($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0;
        var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = HEAP32[$0 >> 2] | 0;
        $7 = ((($0)) + 4 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($0)) + 8 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = $1 >> 1;
        $12 = $2 >> 1;
        $13 = HEAP32[$3 >> 2] | 0;
        FUNCTION_TABLE_viiii[$4 & 31]($6, $13, $1, $2);
        $14 = ($11 | 0) > (15);
        if ($14) {
            $15 = $11 & 15;
            $16 = ($15 | 0) == (0);
            $17 = $16 & 1;
            $18 = (($5) + ($17 << 2) | 0);
            $19 = HEAP32[$18 >> 2] | 0;
            $20 = ((($3)) + 4 | 0);
            $21 = HEAP32[$20 >> 2] | 0;
            FUNCTION_TABLE_viiii[$19 & 31]($8, $21, $11, $12);
            $22 = HEAP32[$18 >> 2] | 0;
            $23 = ((($3)) + 8 | 0);
            $24 = HEAP32[$23 >> 2] | 0;
            FUNCTION_TABLE_viiii[$22 & 31]($10, $24, $11, $12);
            return;
        } else {
            $25 = ((($3)) + 4 | 0);
            $26 = HEAP32[$25 >> 2] | 0;
            __ZL21ExpandPictureChroma_cPhiii($8, $26, $11, $12);
            $27 = ((($3)) + 8 | 0);
            $28 = HEAP32[$27 >> 2] | 0;
            __ZL21ExpandPictureChroma_cPhiii($10, $28, $11, $12);
            return;
        }
    }
    function __ZL21ExpandPictureChroma_cPhiii($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
        var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
        var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
        var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
        var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
        var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = (($3) + -1) | 0;
        $5 = Math_imul($4, $1) | 0;
        $6 = (($0) + ($5) | 0);
        $7 = HEAP8[$0 >> 0] | 0;
        $8 = (($2) + -1) | 0;
        $9 = (($0) + ($8) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = HEAP8[$6 >> 0] | 0;
        $12 = (($6) + ($8) | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = (0 - ($1)) | 0;
        $15 = (($0) + ($14) | 0);
        $16 = (($6) + ($1) | 0);
        _memcpy(($15 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($16 | 0), ($6 | 0), ($2 | 0)) | 0;
        $17 = ((($15)) + -16 | 0);
        _memset(($17 | 0), ($7 | 0), 16) | 0;
        $18 = (($15) + ($2) | 0);
        _memset(($18 | 0), ($10 | 0), 16) | 0;
        $19 = ((($16)) + -16 | 0);
        _memset(($19 | 0), ($11 | 0), 16) | 0;
        $20 = (($16) + ($2) | 0);
        _memset(($20 | 0), ($13 | 0), 16) | 0;
        $21 = $1 << 1;
        $22 = (0 - ($21)) | 0;
        $23 = (($0) + ($22) | 0);
        $24 = (($6) + ($21) | 0);
        _memcpy(($23 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($24 | 0), ($6 | 0), ($2 | 0)) | 0;
        $25 = ((($23)) + -16 | 0);
        _memset(($25 | 0), ($7 | 0), 16) | 0;
        $26 = (($23) + ($2) | 0);
        _memset(($26 | 0), ($10 | 0), 16) | 0;
        $27 = ((($24)) + -16 | 0);
        _memset(($27 | 0), ($11 | 0), 16) | 0;
        $28 = (($24) + ($2) | 0);
        _memset(($28 | 0), ($13 | 0), 16) | 0;
        $29 = ($1 * 3) | 0;
        $30 = (0 - ($29)) | 0;
        $31 = (($0) + ($30) | 0);
        $32 = (($6) + ($29) | 0);
        _memcpy(($31 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($32 | 0), ($6 | 0), ($2 | 0)) | 0;
        $33 = ((($31)) + -16 | 0);
        _memset(($33 | 0), ($7 | 0), 16) | 0;
        $34 = (($31) + ($2) | 0);
        _memset(($34 | 0), ($10 | 0), 16) | 0;
        $35 = ((($32)) + -16 | 0);
        _memset(($35 | 0), ($11 | 0), 16) | 0;
        $36 = (($32) + ($2) | 0);
        _memset(($36 | 0), ($13 | 0), 16) | 0;
        $37 = $1 << 2;
        $38 = (0 - ($37)) | 0;
        $39 = (($0) + ($38) | 0);
        $40 = (($6) + ($37) | 0);
        _memcpy(($39 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($40 | 0), ($6 | 0), ($2 | 0)) | 0;
        $41 = ((($39)) + -16 | 0);
        _memset(($41 | 0), ($7 | 0), 16) | 0;
        $42 = (($39) + ($2) | 0);
        _memset(($42 | 0), ($10 | 0), 16) | 0;
        $43 = ((($40)) + -16 | 0);
        _memset(($43 | 0), ($11 | 0), 16) | 0;
        $44 = (($40) + ($2) | 0);
        _memset(($44 | 0), ($13 | 0), 16) | 0;
        $45 = ($1 * 5) | 0;
        $46 = (0 - ($45)) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = (($6) + ($45) | 0);
        _memcpy(($47 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($48 | 0), ($6 | 0), ($2 | 0)) | 0;
        $49 = ((($47)) + -16 | 0);
        _memset(($49 | 0), ($7 | 0), 16) | 0;
        $50 = (($47) + ($2) | 0);
        _memset(($50 | 0), ($10 | 0), 16) | 0;
        $51 = ((($48)) + -16 | 0);
        _memset(($51 | 0), ($11 | 0), 16) | 0;
        $52 = (($48) + ($2) | 0);
        _memset(($52 | 0), ($13 | 0), 16) | 0;
        $53 = ($1 * 6) | 0;
        $54 = (0 - ($53)) | 0;
        $55 = (($0) + ($54) | 0);
        $56 = (($6) + ($53) | 0);
        _memcpy(($55 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($56 | 0), ($6 | 0), ($2 | 0)) | 0;
        $57 = ((($55)) + -16 | 0);
        _memset(($57 | 0), ($7 | 0), 16) | 0;
        $58 = (($55) + ($2) | 0);
        _memset(($58 | 0), ($10 | 0), 16) | 0;
        $59 = ((($56)) + -16 | 0);
        _memset(($59 | 0), ($11 | 0), 16) | 0;
        $60 = (($56) + ($2) | 0);
        _memset(($60 | 0), ($13 | 0), 16) | 0;
        $61 = ($1 * 7) | 0;
        $62 = (0 - ($61)) | 0;
        $63 = (($0) + ($62) | 0);
        $64 = (($6) + ($61) | 0);
        _memcpy(($63 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($64 | 0), ($6 | 0), ($2 | 0)) | 0;
        $65 = ((($63)) + -16 | 0);
        _memset(($65 | 0), ($7 | 0), 16) | 0;
        $66 = (($63) + ($2) | 0);
        _memset(($66 | 0), ($10 | 0), 16) | 0;
        $67 = ((($64)) + -16 | 0);
        _memset(($67 | 0), ($11 | 0), 16) | 0;
        $68 = (($64) + ($2) | 0);
        _memset(($68 | 0), ($13 | 0), 16) | 0;
        $69 = $1 << 3;
        $70 = (0 - ($69)) | 0;
        $71 = (($0) + ($70) | 0);
        $72 = (($6) + ($69) | 0);
        _memcpy(($71 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($72 | 0), ($6 | 0), ($2 | 0)) | 0;
        $73 = ((($71)) + -16 | 0);
        _memset(($73 | 0), ($7 | 0), 16) | 0;
        $74 = (($71) + ($2) | 0);
        _memset(($74 | 0), ($10 | 0), 16) | 0;
        $75 = ((($72)) + -16 | 0);
        _memset(($75 | 0), ($11 | 0), 16) | 0;
        $76 = (($72) + ($2) | 0);
        _memset(($76 | 0), ($13 | 0), 16) | 0;
        $77 = ($1 * 9) | 0;
        $78 = (0 - ($77)) | 0;
        $79 = (($0) + ($78) | 0);
        $80 = (($6) + ($77) | 0);
        _memcpy(($79 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($80 | 0), ($6 | 0), ($2 | 0)) | 0;
        $81 = ((($79)) + -16 | 0);
        _memset(($81 | 0), ($7 | 0), 16) | 0;
        $82 = (($79) + ($2) | 0);
        _memset(($82 | 0), ($10 | 0), 16) | 0;
        $83 = ((($80)) + -16 | 0);
        _memset(($83 | 0), ($11 | 0), 16) | 0;
        $84 = (($80) + ($2) | 0);
        _memset(($84 | 0), ($13 | 0), 16) | 0;
        $85 = ($1 * 10) | 0;
        $86 = (0 - ($85)) | 0;
        $87 = (($0) + ($86) | 0);
        $88 = (($6) + ($85) | 0);
        _memcpy(($87 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($88 | 0), ($6 | 0), ($2 | 0)) | 0;
        $89 = ((($87)) + -16 | 0);
        _memset(($89 | 0), ($7 | 0), 16) | 0;
        $90 = (($87) + ($2) | 0);
        _memset(($90 | 0), ($10 | 0), 16) | 0;
        $91 = ((($88)) + -16 | 0);
        _memset(($91 | 0), ($11 | 0), 16) | 0;
        $92 = (($88) + ($2) | 0);
        _memset(($92 | 0), ($13 | 0), 16) | 0;
        $93 = ($1 * 11) | 0;
        $94 = (0 - ($93)) | 0;
        $95 = (($0) + ($94) | 0);
        $96 = (($6) + ($93) | 0);
        _memcpy(($95 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($96 | 0), ($6 | 0), ($2 | 0)) | 0;
        $97 = ((($95)) + -16 | 0);
        _memset(($97 | 0), ($7 | 0), 16) | 0;
        $98 = (($95) + ($2) | 0);
        _memset(($98 | 0), ($10 | 0), 16) | 0;
        $99 = ((($96)) + -16 | 0);
        _memset(($99 | 0), ($11 | 0), 16) | 0;
        $100 = (($96) + ($2) | 0);
        _memset(($100 | 0), ($13 | 0), 16) | 0;
        $101 = ($1 * 12) | 0;
        $102 = (0 - ($101)) | 0;
        $103 = (($0) + ($102) | 0);
        $104 = (($6) + ($101) | 0);
        _memcpy(($103 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($104 | 0), ($6 | 0), ($2 | 0)) | 0;
        $105 = ((($103)) + -16 | 0);
        _memset(($105 | 0), ($7 | 0), 16) | 0;
        $106 = (($103) + ($2) | 0);
        _memset(($106 | 0), ($10 | 0), 16) | 0;
        $107 = ((($104)) + -16 | 0);
        _memset(($107 | 0), ($11 | 0), 16) | 0;
        $108 = (($104) + ($2) | 0);
        _memset(($108 | 0), ($13 | 0), 16) | 0;
        $109 = ($1 * 13) | 0;
        $110 = (0 - ($109)) | 0;
        $111 = (($0) + ($110) | 0);
        $112 = (($6) + ($109) | 0);
        _memcpy(($111 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($112 | 0), ($6 | 0), ($2 | 0)) | 0;
        $113 = ((($111)) + -16 | 0);
        _memset(($113 | 0), ($7 | 0), 16) | 0;
        $114 = (($111) + ($2) | 0);
        _memset(($114 | 0), ($10 | 0), 16) | 0;
        $115 = ((($112)) + -16 | 0);
        _memset(($115 | 0), ($11 | 0), 16) | 0;
        $116 = (($112) + ($2) | 0);
        _memset(($116 | 0), ($13 | 0), 16) | 0;
        $117 = ($1 * 14) | 0;
        $118 = (0 - ($117)) | 0;
        $119 = (($0) + ($118) | 0);
        $120 = (($6) + ($117) | 0);
        _memcpy(($119 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($120 | 0), ($6 | 0), ($2 | 0)) | 0;
        $121 = ((($119)) + -16 | 0);
        _memset(($121 | 0), ($7 | 0), 16) | 0;
        $122 = (($119) + ($2) | 0);
        _memset(($122 | 0), ($10 | 0), 16) | 0;
        $123 = ((($120)) + -16 | 0);
        _memset(($123 | 0), ($11 | 0), 16) | 0;
        $124 = (($120) + ($2) | 0);
        _memset(($124 | 0), ($13 | 0), 16) | 0;
        $125 = ($1 * 15) | 0;
        $126 = (0 - ($125)) | 0;
        $127 = (($0) + ($126) | 0);
        $128 = (($6) + ($125) | 0);
        _memcpy(($127 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($128 | 0), ($6 | 0), ($2 | 0)) | 0;
        $129 = ((($127)) + -16 | 0);
        _memset(($129 | 0), ($7 | 0), 16) | 0;
        $130 = (($127) + ($2) | 0);
        _memset(($130 | 0), ($10 | 0), 16) | 0;
        $131 = ((($128)) + -16 | 0);
        _memset(($131 | 0), ($11 | 0), 16) | 0;
        $132 = (($128) + ($2) | 0);
        _memset(($132 | 0), ($13 | 0), 16) | 0;
        $133 = $1 << 4;
        $134 = (0 - ($133)) | 0;
        $135 = (($0) + ($134) | 0);
        $136 = (($6) + ($133) | 0);
        _memcpy(($135 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($136 | 0), ($6 | 0), ($2 | 0)) | 0;
        $137 = ((($135)) + -16 | 0);
        _memset(($137 | 0), ($7 | 0), 16) | 0;
        $138 = (($135) + ($2) | 0);
        _memset(($138 | 0), ($10 | 0), 16) | 0;
        $139 = ((($136)) + -16 | 0);
        _memset(($139 | 0), ($11 | 0), 16) | 0;
        $140 = (($136) + ($2) | 0);
        _memset(($140 | 0), ($13 | 0), 16) | 0;
        $$0 = $0; $$1 = 0;
        while (1) {
            $141 = ((($$0)) + -16 | 0);
            $142 = HEAP8[$$0 >> 0] | 0;
            _memset(($141 | 0), ($142 | 0), 16) | 0;
            $143 = (($$0) + ($2) | 0);
            $144 = (($$0) + ($8) | 0);
            $145 = HEAP8[$144 >> 0] | 0;
            _memset(($143 | 0), ($145 | 0), 16) | 0;
            $146 = (($$0) + ($1) | 0);
            $147 = (($$1) + 1) | 0;
            $148 = ($147 | 0) < ($3 | 0);
            if ($148) {
                $$0 = $146; $$1 = $147;
            } else {
                break;
            }
        }
        return;
    }
    function __Z18WelsNonZeroCount_cPa($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
        var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = HEAP8[$0 >> 0] | 0;
        $2 = ($1 << 24 >> 24) != (0);
        $3 = $2 & 1;
        HEAP8[$0 >> 0] = $3;
        $4 = ((($0)) + 1 | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = ($5 << 24 >> 24) != (0);
        $7 = $6 & 1;
        HEAP8[$4 >> 0] = $7;
        $8 = ((($0)) + 2 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ($9 << 24 >> 24) != (0);
        $11 = $10 & 1;
        HEAP8[$8 >> 0] = $11;
        $12 = ((($0)) + 3 | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = ($13 << 24 >> 24) != (0);
        $15 = $14 & 1;
        HEAP8[$12 >> 0] = $15;
        $16 = ((($0)) + 4 | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = ($17 << 24 >> 24) != (0);
        $19 = $18 & 1;
        HEAP8[$16 >> 0] = $19;
        $20 = ((($0)) + 5 | 0);
        $21 = HEAP8[$20 >> 0] | 0;
        $22 = ($21 << 24 >> 24) != (0);
        $23 = $22 & 1;
        HEAP8[$20 >> 0] = $23;
        $24 = ((($0)) + 6 | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = ($25 << 24 >> 24) != (0);
        $27 = $26 & 1;
        HEAP8[$24 >> 0] = $27;
        $28 = ((($0)) + 7 | 0);
        $29 = HEAP8[$28 >> 0] | 0;
        $30 = ($29 << 24 >> 24) != (0);
        $31 = $30 & 1;
        HEAP8[$28 >> 0] = $31;
        $32 = ((($0)) + 8 | 0);
        $33 = HEAP8[$32 >> 0] | 0;
        $34 = ($33 << 24 >> 24) != (0);
        $35 = $34 & 1;
        HEAP8[$32 >> 0] = $35;
        $36 = ((($0)) + 9 | 0);
        $37 = HEAP8[$36 >> 0] | 0;
        $38 = ($37 << 24 >> 24) != (0);
        $39 = $38 & 1;
        HEAP8[$36 >> 0] = $39;
        $40 = ((($0)) + 10 | 0);
        $41 = HEAP8[$40 >> 0] | 0;
        $42 = ($41 << 24 >> 24) != (0);
        $43 = $42 & 1;
        HEAP8[$40 >> 0] = $43;
        $44 = ((($0)) + 11 | 0);
        $45 = HEAP8[$44 >> 0] | 0;
        $46 = ($45 << 24 >> 24) != (0);
        $47 = $46 & 1;
        HEAP8[$44 >> 0] = $47;
        $48 = ((($0)) + 12 | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = ($49 << 24 >> 24) != (0);
        $51 = $50 & 1;
        HEAP8[$48 >> 0] = $51;
        $52 = ((($0)) + 13 | 0);
        $53 = HEAP8[$52 >> 0] | 0;
        $54 = ($53 << 24 >> 24) != (0);
        $55 = $54 & 1;
        HEAP8[$52 >> 0] = $55;
        $56 = ((($0)) + 14 | 0);
        $57 = HEAP8[$56 >> 0] | 0;
        $58 = ($57 << 24 >> 24) != (0);
        $59 = $58 & 1;
        HEAP8[$56 >> 0] = $59;
        $60 = ((($0)) + 15 | 0);
        $61 = HEAP8[$60 >> 0] | 0;
        $62 = ($61 << 24 >> 24) != (0);
        $63 = $62 & 1;
        HEAP8[$60 >> 0] = $63;
        $64 = ((($0)) + 16 | 0);
        $65 = HEAP8[$64 >> 0] | 0;
        $66 = ($65 << 24 >> 24) != (0);
        $67 = $66 & 1;
        HEAP8[$64 >> 0] = $67;
        $68 = ((($0)) + 17 | 0);
        $69 = HEAP8[$68 >> 0] | 0;
        $70 = ($69 << 24 >> 24) != (0);
        $71 = $70 & 1;
        HEAP8[$68 >> 0] = $71;
        $72 = ((($0)) + 18 | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = ($73 << 24 >> 24) != (0);
        $75 = $74 & 1;
        HEAP8[$72 >> 0] = $75;
        $76 = ((($0)) + 19 | 0);
        $77 = HEAP8[$76 >> 0] | 0;
        $78 = ($77 << 24 >> 24) != (0);
        $79 = $78 & 1;
        HEAP8[$76 >> 0] = $79;
        $80 = ((($0)) + 20 | 0);
        $81 = HEAP8[$80 >> 0] | 0;
        $82 = ($81 << 24 >> 24) != (0);
        $83 = $82 & 1;
        HEAP8[$80 >> 0] = $83;
        $84 = ((($0)) + 21 | 0);
        $85 = HEAP8[$84 >> 0] | 0;
        $86 = ($85 << 24 >> 24) != (0);
        $87 = $86 & 1;
        HEAP8[$84 >> 0] = $87;
        $88 = ((($0)) + 22 | 0);
        $89 = HEAP8[$88 >> 0] | 0;
        $90 = ($89 << 24 >> 24) != (0);
        $91 = $90 & 1;
        HEAP8[$88 >> 0] = $91;
        $92 = ((($0)) + 23 | 0);
        $93 = HEAP8[$92 >> 0] | 0;
        $94 = ($93 << 24 >> 24) != (0);
        $95 = $94 & 1;
        HEAP8[$92 >> 0] = $95;
        return;
    }
    function __Z17DeblockLumaLt4V_cPhiiiPa($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __Z16DeblockLumaLt4_cPhiiiiPa($0, $1, 1, $2, $3, $4);
        return;
    }
    function __Z17DeblockLumaEq4V_cPhiii($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __Z16DeblockLumaEq4_cPhiiii($0, $1, 1, $2, $3);
        return;
    }
    function __Z17DeblockLumaLt4H_cPhiiiPa($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __Z16DeblockLumaLt4_cPhiiiiPa($0, 1, $1, $2, $3, $4);
        return;
    }
    function __Z17DeblockLumaEq4H_cPhiii($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __Z16DeblockLumaEq4_cPhiiii($0, 1, $1, $2, $3);
        return;
    }
    function __Z19DeblockChromaLt4V_cPhS_iiiPa($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __Z18DeblockChromaLt4_cPhS_iiiiPa($0, $1, $2, 1, $3, $4, $5);
        return;
    }
    function __Z19DeblockChromaEq4V_cPhS_iii($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __Z18DeblockChromaEq4_cPhS_iiii($0, $1, $2, 1, $3, $4);
        return;
    }
    function __Z19DeblockChromaLt4H_cPhS_iiiPa($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __Z18DeblockChromaLt4_cPhS_iiiiPa($0, $1, 1, $2, $3, $4, $5);
        return;
    }
    function __Z19DeblockChromaEq4H_cPhS_iii($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __Z18DeblockChromaEq4_cPhS_iiii($0, $1, 1, $2, $3, $4);
        return;
    }
    function __Z18DeblockChromaEq4_cPhS_iiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$0102 = 0, $$094101 = 0, $$095100 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $9 = 0, $brmerge = 0, $brmerge99 = 0, $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = (0 - ($2)) | 0;
        $7 = Math_imul($2, -2) | 0;
        $$0102 = 0; $$094101 = $0; $$095100 = $1;
        while (1) {
            $8 = (($$094101) + ($6) | 0);
            $9 = HEAP8[$8 >> 0] | 0;
            $10 = $9 & 255;
            $11 = (($$094101) + ($7) | 0);
            $12 = HEAP8[$11 >> 0] | 0;
            $13 = $12 & 255;
            $14 = HEAP8[$$094101 >> 0] | 0;
            $15 = $14 & 255;
            $16 = (($$094101) + ($2) | 0);
            $17 = HEAP8[$16 >> 0] | 0;
            $18 = $17 & 255;
            $19 = (($10) - ($15)) | 0;
            $20 = $19 >> 31;
            $21 = $20 ^ $19;
            $22 = (($21) - ($20)) | 0;
            $23 = ($22 | 0) < ($4 | 0);
            $24 = (($13) - ($10)) | 0;
            $25 = $24 >> 31;
            $26 = (($18) - ($15)) | 0;
            $27 = $26 >> 31;
            if ($23) {
                $28 = $27 ^ $26;
                $29 = (($28) - ($27)) | 0;
                $30 = ($29 | 0) >= ($5 | 0);
                $31 = $25 ^ $24;
                $32 = (($31) - ($25)) | 0;
                $33 = ($32 | 0) >= ($5 | 0);
                $brmerge = $33 | $30;
                if (!($brmerge)) {
                    $34 = $13 << 1;
                    $35 = (($10) + 2) | 0;
                    $36 = (($35) + ($34)) | 0;
                    $37 = (($36) + ($18)) | 0;
                    $38 = $37 >>> 2;
                    $39 = $38 & 255;
                    HEAP8[$8 >> 0] = $39;
                    $40 = $18 << 1;
                    $41 = (($13) + 2) | 0;
                    $42 = (($41) + ($15)) | 0;
                    $43 = (($42) + ($40)) | 0;
                    $44 = $43 >>> 2;
                    $45 = $44 & 255;
                    HEAP8[$$094101 >> 0] = $45;
                }
            }
            $46 = (($$095100) + ($6) | 0);
            $47 = HEAP8[$46 >> 0] | 0;
            $48 = $47 & 255;
            $49 = (($$095100) + ($7) | 0);
            $50 = HEAP8[$49 >> 0] | 0;
            $51 = $50 & 255;
            $52 = HEAP8[$$095100 >> 0] | 0;
            $53 = $52 & 255;
            $54 = (($$095100) + ($2) | 0);
            $55 = HEAP8[$54 >> 0] | 0;
            $56 = $55 & 255;
            $57 = (($48) - ($53)) | 0;
            $58 = $57 >> 31;
            $59 = $58 ^ $57;
            $60 = (($59) - ($58)) | 0;
            $61 = ($60 | 0) < ($4 | 0);
            $62 = (($51) - ($48)) | 0;
            $63 = $62 >> 31;
            $64 = (($56) - ($53)) | 0;
            $65 = $64 >> 31;
            if ($61) {
                $66 = $65 ^ $64;
                $67 = (($66) - ($65)) | 0;
                $68 = ($67 | 0) >= ($5 | 0);
                $69 = $63 ^ $62;
                $70 = (($69) - ($63)) | 0;
                $71 = ($70 | 0) >= ($5 | 0);
                $brmerge99 = $71 | $68;
                if (!($brmerge99)) {
                    $72 = $51 << 1;
                    $73 = (($48) + 2) | 0;
                    $74 = (($73) + ($72)) | 0;
                    $75 = (($74) + ($56)) | 0;
                    $76 = $75 >>> 2;
                    $77 = $76 & 255;
                    HEAP8[$46 >> 0] = $77;
                    $78 = $56 << 1;
                    $79 = (($51) + 2) | 0;
                    $80 = (($79) + ($53)) | 0;
                    $81 = (($80) + ($78)) | 0;
                    $82 = $81 >>> 2;
                    $83 = $82 & 255;
                    HEAP8[$$095100 >> 0] = $83;
                }
            }
            $84 = (($$095100) + ($3) | 0);
            $85 = (($$094101) + ($3) | 0);
            $86 = (($$0102) + 1) | 0;
            $exitcond = ($86 | 0) == (8);
            if ($exitcond) {
                break;
            } else {
                $$0102 = $86; $$094101 = $85; $$095100 = $84;
            }
        }
        return;
    }
    function __Z18DeblockChromaLt4_cPhS_iiiiPa($0, $1, $2, $3, $4, $5, $6) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        var $$ = 0, $$0129139 = 0, $$0130137 = 0, $$0140 = 0, $$135 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
        var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
        var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
        var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
        var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge134 = 0, $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $7 = (0 - ($2)) | 0;
        $8 = Math_imul($2, -2) | 0;
        $$0129139 = 0; $$0130137 = $1; $$0140 = $0;
        while (1) {
            $9 = $$0129139 >> 1;
            $10 = (($6) + ($9) | 0);
            $11 = HEAP8[$10 >> 0] | 0;
            $12 = $11 << 24 >> 24;
            $13 = ($11 << 24 >> 24) > (0);
            if ($13) {
                $14 = (($$0140) + ($7) | 0);
                $15 = HEAP8[$14 >> 0] | 0;
                $16 = $15 & 255;
                $17 = (($$0140) + ($8) | 0);
                $18 = HEAP8[$17 >> 0] | 0;
                $19 = $18 & 255;
                $20 = HEAP8[$$0140 >> 0] | 0;
                $21 = $20 & 255;
                $22 = (($$0140) + ($2) | 0);
                $23 = HEAP8[$22 >> 0] | 0;
                $24 = $23 & 255;
                $25 = (($16) - ($21)) | 0;
                $26 = $25 >> 31;
                $27 = $26 ^ $25;
                $28 = (($27) - ($26)) | 0;
                $29 = ($28 | 0) < ($4 | 0);
                $30 = (($19) - ($16)) | 0;
                $31 = $30 >> 31;
                $32 = (($24) - ($21)) | 0;
                $33 = $32 >> 31;
                if ($29) {
                    $34 = $33 ^ $32;
                    $35 = (($34) - ($33)) | 0;
                    $36 = ($35 | 0) >= ($5 | 0);
                    $37 = $31 ^ $30;
                    $38 = (($37) - ($31)) | 0;
                    $39 = ($38 | 0) >= ($5 | 0);
                    $brmerge = $39 | $36;
                    if (!($brmerge)) {
                        $40 = (($21) - ($16)) | 0;
                        $41 = $40 << 2;
                        $42 = (($19) + 4) | 0;
                        $43 = (($42) - ($24)) | 0;
                        $44 = (($43) + ($41)) | 0;
                        $45 = $44 >> 3;
                        $46 = (0 - ($12)) | 0;
                        $47 = ($45 | 0) < ($46 | 0);
                        $48 = ($45 | 0) > ($12 | 0);
                        $$ = $48 ? $12 : $45;
                        $49 = $47 ? $46 : $$;
                        $50 = (($49) + ($16)) | 0;
                        $51 = ($50 >>> 0) > (255);
                        $52 = (0 - ($50)) | 0;
                        $53 = $52 >> 31;
                        $54 = $51 ? $53 : $50;
                        $55 = $54 & 255;
                        HEAP8[$14 >> 0] = $55;
                        $56 = (($21) - ($49)) | 0;
                        $57 = ($56 >>> 0) > (255);
                        $58 = (0 - ($56)) | 0;
                        $59 = $58 >> 31;
                        $60 = $57 ? $59 : $56;
                        $61 = $60 & 255;
                        HEAP8[$$0140 >> 0] = $61;
                    }
                }
                $62 = (($$0130137) + ($7) | 0);
                $63 = HEAP8[$62 >> 0] | 0;
                $64 = $63 & 255;
                $65 = (($$0130137) + ($8) | 0);
                $66 = HEAP8[$65 >> 0] | 0;
                $67 = $66 & 255;
                $68 = HEAP8[$$0130137 >> 0] | 0;
                $69 = $68 & 255;
                $70 = (($$0130137) + ($2) | 0);
                $71 = HEAP8[$70 >> 0] | 0;
                $72 = $71 & 255;
                $73 = (($64) - ($69)) | 0;
                $74 = $73 >> 31;
                $75 = $74 ^ $73;
                $76 = (($75) - ($74)) | 0;
                $77 = ($76 | 0) < ($4 | 0);
                $78 = (($67) - ($64)) | 0;
                $79 = $78 >> 31;
                $80 = (($72) - ($69)) | 0;
                $81 = $80 >> 31;
                if ($77) {
                    $82 = $81 ^ $80;
                    $83 = (($82) - ($81)) | 0;
                    $84 = ($83 | 0) >= ($5 | 0);
                    $85 = $79 ^ $78;
                    $86 = (($85) - ($79)) | 0;
                    $87 = ($86 | 0) >= ($5 | 0);
                    $brmerge134 = $87 | $84;
                    if (!($brmerge134)) {
                        $88 = (($69) - ($64)) | 0;
                        $89 = $88 << 2;
                        $90 = (($67) + 4) | 0;
                        $91 = (($90) - ($72)) | 0;
                        $92 = (($91) + ($89)) | 0;
                        $93 = $92 >> 3;
                        $94 = (0 - ($12)) | 0;
                        $95 = ($93 | 0) < ($94 | 0);
                        $96 = ($93 | 0) > ($12 | 0);
                        $$135 = $96 ? $12 : $93;
                        $97 = $95 ? $94 : $$135;
                        $98 = (($97) + ($64)) | 0;
                        $99 = ($98 >>> 0) > (255);
                        $100 = (0 - ($98)) | 0;
                        $101 = $100 >> 31;
                        $102 = $99 ? $101 : $98;
                        $103 = $102 & 255;
                        HEAP8[$62 >> 0] = $103;
                        $104 = (($69) - ($97)) | 0;
                        $105 = ($104 >>> 0) > (255);
                        $106 = (0 - ($104)) | 0;
                        $107 = $106 >> 31;
                        $108 = $105 ? $107 : $104;
                        $109 = $108 & 255;
                        HEAP8[$$0130137 >> 0] = $109;
                    }
                }
            }
            $110 = (($$0140) + ($3) | 0);
            $111 = (($$0130137) + ($3) | 0);
            $112 = (($$0129139) + 1) | 0;
            $exitcond = ($112 | 0) == (8);
            if ($exitcond) {
                break;
            } else {
                $$0129139 = $112; $$0130137 = $111; $$0140 = $110;
            }
        }
        return;
    }
    function __Z16DeblockLumaEq4_cPhiiii($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0$sink = 0, $$0138162 = 0, $$0163 = 0, $$sink141 = 0, $$sink143 = 0, $$sink144 = 0, $$sink145 = 0, $$sink146 = 0, $$sink148 = 0, $$sink150 = 0, $$sink151 = 0, $$sink152 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
        var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
        var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
        var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
        var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
        var $99 = 0, $brmerge = 0, $exitcond = 0, $tmp = 0, $tmp153 = 0, $tmp154 = 0, $tmp155 = 0, $tmp156 = 0, $tmp157 = 0, $tmp158 = 0, $tmp159 = 0, $tmp160 = 0, $tmp161 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = (0 - ($1)) | 0;
        $6 = Math_imul($1, -2) | 0;
        $7 = Math_imul($1, -3) | 0;
        $8 = $1 << 1;
        $9 = $3 >> 2;
        $10 = (($9) + 2) | 0;
        $11 = Math_imul($1, -4) | 0;
        $12 = ($1 * 3) | 0;
        $$0138162 = 0; $$0163 = $0;
        while (1) {
            $13 = (($$0163) + ($5) | 0);
            $14 = HEAP8[$13 >> 0] | 0;
            $15 = $14 & 255;
            $16 = (($$0163) + ($6) | 0);
            $17 = HEAP8[$16 >> 0] | 0;
            $18 = $17 & 255;
            $19 = (($$0163) + ($7) | 0);
            $20 = HEAP8[$19 >> 0] | 0;
            $21 = $20 & 255;
            $22 = HEAP8[$$0163 >> 0] | 0;
            $23 = $22 & 255;
            $24 = (($$0163) + ($1) | 0);
            $25 = HEAP8[$24 >> 0] | 0;
            $26 = $25 & 255;
            $27 = (($$0163) + ($8) | 0);
            $28 = HEAP8[$27 >> 0] | 0;
            $29 = $28 & 255;
            $30 = (($15) - ($23)) | 0;
            $31 = $30 >> 31;
            $32 = $31 ^ $30;
            $33 = (($32) - ($31)) | 0;
            $34 = (($18) - ($15)) | 0;
            $35 = $34 >> 31;
            $36 = (($26) - ($23)) | 0;
            $37 = $36 >> 31;
            $38 = ($33 | 0) < ($3 | 0);
            do {
                if ($38) {
                    $39 = $37 ^ $36;
                    $40 = (($39) - ($37)) | 0;
                    $41 = ($40 | 0) >= ($4 | 0);
                    $42 = $35 ^ $34;
                    $43 = (($42) - ($35)) | 0;
                    $44 = ($43 | 0) >= ($4 | 0);
                    $brmerge = $44 | $41;
                    if (!($brmerge)) {
                        $45 = ($33 | 0) < ($10 | 0);
                        if (!($45)) {
                            $100 = $18 << 1;
                            $101 = (($15) + 2) | 0;
                            $102 = (($101) + ($100)) | 0;
                            $103 = (($102) + ($26)) | 0;
                            $104 = $103 >>> 2;
                            $105 = $104 & 255;
                            HEAP8[$13 >> 0] = $105;
                            $106 = $26 << 1;
                            $107 = (($18) + 2) | 0;
                            $108 = (($107) + ($23)) | 0;
                            $109 = (($108) + ($106)) | 0;
                            $110 = $109 >>> 2;
                            $111 = $110 & 255;
                            HEAP8[$$0163 >> 0] = $111;
                            break;
                        }
                        $46 = (($21) - ($15)) | 0;
                        $47 = $46 >> 31;
                        $48 = $47 ^ $46;
                        $49 = (($48) - ($47)) | 0;
                        $50 = ($49 | 0) < ($4 | 0);
                        $51 = (($29) - ($23)) | 0;
                        $52 = $51 >> 31;
                        $53 = $52 ^ $51;
                        $54 = (($53) - ($52)) | 0;
                        $55 = ($54 | 0) < ($4 | 0);
                        if ($50) {
                            $56 = (($$0163) + ($11) | 0);
                            $57 = HEAP8[$56 >> 0] | 0;
                            $58 = $57 & 255;
                            $tmp = (($18) + ($15)) | 0;
                            $tmp153 = (($tmp) + ($23)) | 0;
                            $tmp154 = $tmp153 << 1;
                            $59 = (($21) + 4) | 0;
                            $60 = (($59) + ($26)) | 0;
                            $61 = (($60) + ($tmp154)) | 0;
                            $62 = $61 >>> 3;
                            $63 = $62 & 255;
                            HEAP8[$13 >> 0] = $63;
                            $64 = (($15) + 2) | 0;
                            $65 = (($64) + ($18)) | 0;
                            $66 = (($65) + ($21)) | 0;
                            $67 = (($66) + ($23)) | 0;
                            $68 = $67 >>> 2;
                            $69 = $68 & 255;
                            HEAP8[$16 >> 0] = $69;
                            $tmp155 = (($58) + ($21)) | 0;
                            $tmp156 = $tmp155 << 1;
                            $70 = (($21) + ($18)) | 0;
                            $71 = (($70) + ($tmp156)) | 0;
                            $$sink146 = $19; $$sink148 = 3; $$sink150 = 4; $$sink151 = $23; $$sink152 = $71;
                        } else {
                            $72 = $18 << 1;
                            $$sink146 = $13; $$sink148 = 2; $$sink150 = 2; $$sink151 = $26; $$sink152 = $72;
                        }
                        $73 = (($$sink152) + ($15)) | 0;
                        $74 = (($73) + ($$sink151)) | 0;
                        $75 = (($74) + ($$sink150)) | 0;
                        $76 = $75 >>> $$sink148;
                        $77 = $76 & 255;
                        HEAP8[$$sink146 >> 0] = $77;
                        if ($55) {
                            $78 = (($$0163) + ($12) | 0);
                            $79 = HEAP8[$78 >> 0] | 0;
                            $80 = $79 & 255;
                            $tmp157 = (($23) + ($15)) | 0;
                            $tmp158 = (($tmp157) + ($26)) | 0;
                            $tmp159 = $tmp158 << 1;
                            $81 = (($18) + 4) | 0;
                            $82 = (($81) + ($29)) | 0;
                            $83 = (($82) + ($tmp159)) | 0;
                            $84 = $83 >>> 3;
                            $85 = $84 & 255;
                            HEAP8[$$0163 >> 0] = $85;
                            $86 = (($15) + 2) | 0;
                            $87 = (($86) + ($23)) | 0;
                            $88 = (($87) + ($26)) | 0;
                            $89 = (($88) + ($29)) | 0;
                            $90 = $89 >>> 2;
                            $91 = $90 & 255;
                            HEAP8[$24 >> 0] = $91;
                            $tmp160 = (($80) + ($29)) | 0;
                            $tmp161 = $tmp160 << 1;
                            $92 = (($29) + ($26)) | 0;
                            $93 = (($92) + ($tmp161)) | 0;
                            $$0$sink = $27; $$sink141 = 3; $$sink143 = 4; $$sink144 = $15; $$sink145 = $93;
                        } else {
                            $94 = $26 << 1;
                            $$0$sink = $$0163; $$sink141 = 2; $$sink143 = 2; $$sink144 = $18; $$sink145 = $94;
                        }
                        $95 = (($$sink145) + ($23)) | 0;
                        $96 = (($95) + ($$sink144)) | 0;
                        $97 = (($96) + ($$sink143)) | 0;
                        $98 = $97 >>> $$sink141;
                        $99 = $98 & 255;
                        HEAP8[$$0$sink >> 0] = $99;
                    }
                }
            } while (0);
            $112 = (($$0163) + ($2) | 0);
            $113 = (($$0138162) + 1) | 0;
            $exitcond = ($113 | 0) == (16);
            if ($exitcond) {
                break;
            } else {
                $$0138162 = $113; $$0163 = $112;
            }
        }
        return;
    }
    function __Z16DeblockLumaLt4_cPhiiiiPa($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$ = 0, $$0140146 = 0, $$0141 = 0, $$0147 = 0, $$1 = 0, $$1$ = 0, $$143 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0;
        var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
        var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = (0 - ($1)) | 0;
        $7 = Math_imul($1, -2) | 0;
        $8 = Math_imul($1, -3) | 0;
        $9 = $1 << 1;
        $$0140146 = 0; $$0147 = $0;
        while (1) {
            $10 = $$0140146 >> 2;
            $11 = (($5) + ($10) | 0);
            $12 = HEAP8[$11 >> 0] | 0;
            $13 = $12 << 24 >> 24;
            $14 = ($12 << 24 >> 24) > (-1);
            if ($14) {
                $15 = (($$0147) + ($6) | 0);
                $16 = HEAP8[$15 >> 0] | 0;
                $17 = $16 & 255;
                $18 = (($$0147) + ($7) | 0);
                $19 = HEAP8[$18 >> 0] | 0;
                $20 = $19 & 255;
                $21 = (($$0147) + ($8) | 0);
                $22 = HEAP8[$21 >> 0] | 0;
                $23 = $22 & 255;
                $24 = HEAP8[$$0147 >> 0] | 0;
                $25 = $24 & 255;
                $26 = (($$0147) + ($1) | 0);
                $27 = HEAP8[$26 >> 0] | 0;
                $28 = $27 & 255;
                $29 = (($$0147) + ($9) | 0);
                $30 = HEAP8[$29 >> 0] | 0;
                $31 = $30 & 255;
                $32 = (($17) - ($25)) | 0;
                $33 = $32 >> 31;
                $34 = $33 ^ $32;
                $35 = (($34) - ($33)) | 0;
                $36 = ($35 | 0) < ($3 | 0);
                $37 = (($20) - ($17)) | 0;
                $38 = $37 >> 31;
                $39 = (($28) - ($25)) | 0;
                $40 = $39 >> 31;
                if ($36) {
                    $41 = $40 ^ $39;
                    $42 = (($41) - ($40)) | 0;
                    $43 = ($42 | 0) >= ($4 | 0);
                    $44 = $38 ^ $37;
                    $45 = (($44) - ($38)) | 0;
                    $46 = ($45 | 0) >= ($4 | 0);
                    $brmerge = $46 | $43;
                    if (!($brmerge)) {
                        $47 = (($23) - ($17)) | 0;
                        $48 = $47 >> 31;
                        $49 = $48 ^ $47;
                        $50 = (($49) - ($48)) | 0;
                        $51 = ($50 | 0) < ($4 | 0);
                        $52 = (($31) - ($25)) | 0;
                        $53 = $52 >> 31;
                        $54 = $53 ^ $52;
                        $55 = (($54) - ($53)) | 0;
                        $56 = ($55 | 0) < ($4 | 0);
                        if ($51) {
                            $57 = (($17) + 1) | 0;
                            $58 = (($57) + ($25)) | 0;
                            $59 = $58 >>> 1;
                            $60 = $20 << 1;
                            $61 = (($23) - ($60)) | 0;
                            $62 = (($61) + ($59)) | 0;
                            $63 = $62 >> 1;
                            $64 = (0 - ($13)) | 0;
                            $65 = ($63 | 0) < ($64 | 0);
                            $66 = ($63 | 0) > ($13 | 0);
                            $$ = $66 ? $13 : $63;
                            $67 = $65 ? $64 : $$;
                            $68 = (($67) + ($20)) | 0;
                            $69 = $68 & 255;
                            HEAP8[$18 >> 0] = $69;
                            $70 = (($13) + 1) | 0;
                            $$0141 = $70;
                        } else {
                            $$0141 = $13;
                        }
                        if ($56) {
                            $71 = (($17) + 1) | 0;
                            $72 = (($71) + ($25)) | 0;
                            $73 = $72 >>> 1;
                            $74 = $28 << 1;
                            $75 = (($31) - ($74)) | 0;
                            $76 = (($75) + ($73)) | 0;
                            $77 = $76 >> 1;
                            $78 = (0 - ($13)) | 0;
                            $79 = ($77 | 0) < ($78 | 0);
                            $80 = ($77 | 0) > ($13 | 0);
                            $$143 = $80 ? $13 : $77;
                            $81 = $79 ? $78 : $$143;
                            $82 = (($81) + ($28)) | 0;
                            $83 = $82 & 255;
                            HEAP8[$26 >> 0] = $83;
                            $84 = (($$0141) + 1) | 0;
                            $$1 = $84;
                        } else {
                            $$1 = $$0141;
                        }
                        $85 = (($25) - ($17)) | 0;
                        $86 = $85 << 2;
                        $87 = (($20) + 4) | 0;
                        $88 = (($87) - ($28)) | 0;
                        $89 = (($88) + ($86)) | 0;
                        $90 = $89 >> 3;
                        $91 = (0 - ($$1)) | 0;
                        $92 = ($90 | 0) < ($91 | 0);
                        $93 = ($90 | 0) > ($$1 | 0);
                        $$1$ = $93 ? $$1 : $90;
                        $94 = $92 ? $91 : $$1$;
                        $95 = (($94) + ($17)) | 0;
                        $96 = ($95 >>> 0) > (255);
                        $97 = (0 - ($95)) | 0;
                        $98 = $97 >> 31;
                        $99 = $96 ? $98 : $95;
                        $100 = $99 & 255;
                        HEAP8[$15 >> 0] = $100;
                        $101 = (($25) - ($94)) | 0;
                        $102 = ($101 >>> 0) > (255);
                        $103 = (0 - ($101)) | 0;
                        $104 = $103 >> 31;
                        $105 = $102 ? $104 : $101;
                        $106 = $105 & 255;
                        HEAP8[$$0147 >> 0] = $106;
                    }
                }
            }
            $107 = (($$0147) + ($2) | 0);
            $108 = (($$0140146) + 1) | 0;
            $exitcond = ($108 | 0) == (16);
            if ($exitcond) {
                break;
            } else {
                $$0140146 = $108; $$0147 = $107;
            }
        }
        return;
    }
    function __Z13WelsCopy8x8_cPhiS_i($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = $1 << 1;
        $5 = $3 << 1;
        $6 = HEAPU8[$2 >> 0] | (HEAPU8[$2 + 1 >> 0] << 8) | (HEAPU8[$2 + 2 >> 0] << 16) | (HEAPU8[$2 + 3 >> 0] << 24);
        HEAP8[$0 >> 0] = $6 & 255; HEAP8[$0 + 1 >> 0] = ($6 >> 8) & 255; HEAP8[$0 + 2 >> 0] = ($6 >> 16) & 255; HEAP8[$0 + 3 >> 0] = $6 >> 24;
        $7 = ((($2)) + 4 | 0);
        $8 = HEAPU8[$7 >> 0] | (HEAPU8[$7 + 1 >> 0] << 8) | (HEAPU8[$7 + 2 >> 0] << 16) | (HEAPU8[$7 + 3 >> 0] << 24);
        $9 = ((($0)) + 4 | 0);
        HEAP8[$9 >> 0] = $8 & 255; HEAP8[$9 + 1 >> 0] = ($8 >> 8) & 255; HEAP8[$9 + 2 >> 0] = ($8 >> 16) & 255; HEAP8[$9 + 3 >> 0] = $8 >> 24;
        $10 = (($2) + ($3) | 0);
        $11 = HEAPU8[$10 >> 0] | (HEAPU8[$10 + 1 >> 0] << 8) | (HEAPU8[$10 + 2 >> 0] << 16) | (HEAPU8[$10 + 3 >> 0] << 24);
        $12 = (($0) + ($1) | 0);
        HEAP8[$12 >> 0] = $11 & 255; HEAP8[$12 + 1 >> 0] = ($11 >> 8) & 255; HEAP8[$12 + 2 >> 0] = ($11 >> 16) & 255; HEAP8[$12 + 3 >> 0] = $11 >> 24;
        $13 = ((($10)) + 4 | 0);
        $14 = HEAPU8[$13 >> 0] | (HEAPU8[$13 + 1 >> 0] << 8) | (HEAPU8[$13 + 2 >> 0] << 16) | (HEAPU8[$13 + 3 >> 0] << 24);
        $15 = ((($12)) + 4 | 0);
        HEAP8[$15 >> 0] = $14 & 255; HEAP8[$15 + 1 >> 0] = ($14 >> 8) & 255; HEAP8[$15 + 2 >> 0] = ($14 >> 16) & 255; HEAP8[$15 + 3 >> 0] = $14 >> 24;
        $16 = (($0) + ($4) | 0);
        $17 = (($2) + ($5) | 0);
        $18 = HEAPU8[$17 >> 0] | (HEAPU8[$17 + 1 >> 0] << 8) | (HEAPU8[$17 + 2 >> 0] << 16) | (HEAPU8[$17 + 3 >> 0] << 24);
        HEAP8[$16 >> 0] = $18 & 255; HEAP8[$16 + 1 >> 0] = ($18 >> 8) & 255; HEAP8[$16 + 2 >> 0] = ($18 >> 16) & 255; HEAP8[$16 + 3 >> 0] = $18 >> 24;
        $19 = ((($17)) + 4 | 0);
        $20 = HEAPU8[$19 >> 0] | (HEAPU8[$19 + 1 >> 0] << 8) | (HEAPU8[$19 + 2 >> 0] << 16) | (HEAPU8[$19 + 3 >> 0] << 24);
        $21 = ((($16)) + 4 | 0);
        HEAP8[$21 >> 0] = $20 & 255; HEAP8[$21 + 1 >> 0] = ($20 >> 8) & 255; HEAP8[$21 + 2 >> 0] = ($20 >> 16) & 255; HEAP8[$21 + 3 >> 0] = $20 >> 24;
        $22 = (($17) + ($3) | 0);
        $23 = HEAPU8[$22 >> 0] | (HEAPU8[$22 + 1 >> 0] << 8) | (HEAPU8[$22 + 2 >> 0] << 16) | (HEAPU8[$22 + 3 >> 0] << 24);
        $24 = (($16) + ($1) | 0);
        HEAP8[$24 >> 0] = $23 & 255; HEAP8[$24 + 1 >> 0] = ($23 >> 8) & 255; HEAP8[$24 + 2 >> 0] = ($23 >> 16) & 255; HEAP8[$24 + 3 >> 0] = $23 >> 24;
        $25 = ((($22)) + 4 | 0);
        $26 = HEAPU8[$25 >> 0] | (HEAPU8[$25 + 1 >> 0] << 8) | (HEAPU8[$25 + 2 >> 0] << 16) | (HEAPU8[$25 + 3 >> 0] << 24);
        $27 = ((($24)) + 4 | 0);
        HEAP8[$27 >> 0] = $26 & 255; HEAP8[$27 + 1 >> 0] = ($26 >> 8) & 255; HEAP8[$27 + 2 >> 0] = ($26 >> 16) & 255; HEAP8[$27 + 3 >> 0] = $26 >> 24;
        $28 = (($16) + ($4) | 0);
        $29 = (($17) + ($5) | 0);
        $30 = HEAPU8[$29 >> 0] | (HEAPU8[$29 + 1 >> 0] << 8) | (HEAPU8[$29 + 2 >> 0] << 16) | (HEAPU8[$29 + 3 >> 0] << 24);
        HEAP8[$28 >> 0] = $30 & 255; HEAP8[$28 + 1 >> 0] = ($30 >> 8) & 255; HEAP8[$28 + 2 >> 0] = ($30 >> 16) & 255; HEAP8[$28 + 3 >> 0] = $30 >> 24;
        $31 = ((($29)) + 4 | 0);
        $32 = HEAPU8[$31 >> 0] | (HEAPU8[$31 + 1 >> 0] << 8) | (HEAPU8[$31 + 2 >> 0] << 16) | (HEAPU8[$31 + 3 >> 0] << 24);
        $33 = ((($28)) + 4 | 0);
        HEAP8[$33 >> 0] = $32 & 255; HEAP8[$33 + 1 >> 0] = ($32 >> 8) & 255; HEAP8[$33 + 2 >> 0] = ($32 >> 16) & 255; HEAP8[$33 + 3 >> 0] = $32 >> 24;
        $34 = (($29) + ($3) | 0);
        $35 = HEAPU8[$34 >> 0] | (HEAPU8[$34 + 1 >> 0] << 8) | (HEAPU8[$34 + 2 >> 0] << 16) | (HEAPU8[$34 + 3 >> 0] << 24);
        $36 = (($28) + ($1) | 0);
        HEAP8[$36 >> 0] = $35 & 255; HEAP8[$36 + 1 >> 0] = ($35 >> 8) & 255; HEAP8[$36 + 2 >> 0] = ($35 >> 16) & 255; HEAP8[$36 + 3 >> 0] = $35 >> 24;
        $37 = ((($34)) + 4 | 0);
        $38 = HEAPU8[$37 >> 0] | (HEAPU8[$37 + 1 >> 0] << 8) | (HEAPU8[$37 + 2 >> 0] << 16) | (HEAPU8[$37 + 3 >> 0] << 24);
        $39 = ((($36)) + 4 | 0);
        HEAP8[$39 >> 0] = $38 & 255; HEAP8[$39 + 1 >> 0] = ($38 >> 8) & 255; HEAP8[$39 + 2 >> 0] = ($38 >> 16) & 255; HEAP8[$39 + 3 >> 0] = $38 >> 24;
        $40 = (($28) + ($4) | 0);
        $41 = (($29) + ($5) | 0);
        $42 = HEAPU8[$41 >> 0] | (HEAPU8[$41 + 1 >> 0] << 8) | (HEAPU8[$41 + 2 >> 0] << 16) | (HEAPU8[$41 + 3 >> 0] << 24);
        HEAP8[$40 >> 0] = $42 & 255; HEAP8[$40 + 1 >> 0] = ($42 >> 8) & 255; HEAP8[$40 + 2 >> 0] = ($42 >> 16) & 255; HEAP8[$40 + 3 >> 0] = $42 >> 24;
        $43 = ((($41)) + 4 | 0);
        $44 = HEAPU8[$43 >> 0] | (HEAPU8[$43 + 1 >> 0] << 8) | (HEAPU8[$43 + 2 >> 0] << 16) | (HEAPU8[$43 + 3 >> 0] << 24);
        $45 = ((($40)) + 4 | 0);
        HEAP8[$45 >> 0] = $44 & 255; HEAP8[$45 + 1 >> 0] = ($44 >> 8) & 255; HEAP8[$45 + 2 >> 0] = ($44 >> 16) & 255; HEAP8[$45 + 3 >> 0] = $44 >> 24;
        $46 = (($41) + ($3) | 0);
        $47 = HEAPU8[$46 >> 0] | (HEAPU8[$46 + 1 >> 0] << 8) | (HEAPU8[$46 + 2 >> 0] << 16) | (HEAPU8[$46 + 3 >> 0] << 24);
        $48 = (($40) + ($1) | 0);
        HEAP8[$48 >> 0] = $47 & 255; HEAP8[$48 + 1 >> 0] = ($47 >> 8) & 255; HEAP8[$48 + 2 >> 0] = ($47 >> 16) & 255; HEAP8[$48 + 3 >> 0] = $47 >> 24;
        $49 = ((($46)) + 4 | 0);
        $50 = HEAPU8[$49 >> 0] | (HEAPU8[$49 + 1 >> 0] << 8) | (HEAPU8[$49 + 2 >> 0] << 16) | (HEAPU8[$49 + 3 >> 0] << 24);
        $51 = ((($48)) + 4 | 0);
        HEAP8[$51 >> 0] = $50 & 255; HEAP8[$51 + 1 >> 0] = ($50 >> 8) & 255; HEAP8[$51 + 2 >> 0] = ($50 >> 16) & 255; HEAP8[$51 + 3 >> 0] = $50 >> 24;
        return;
    }
    function __Z15WelsCopy16x16_cPhiS_i($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
        var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = HEAPU8[$2 >> 0] | (HEAPU8[$2 + 1 >> 0] << 8) | (HEAPU8[$2 + 2 >> 0] << 16) | (HEAPU8[$2 + 3 >> 0] << 24);
        HEAP8[$0 >> 0] = $4 & 255; HEAP8[$0 + 1 >> 0] = ($4 >> 8) & 255; HEAP8[$0 + 2 >> 0] = ($4 >> 16) & 255; HEAP8[$0 + 3 >> 0] = $4 >> 24;
        $5 = ((($2)) + 4 | 0);
        $6 = HEAPU8[$5 >> 0] | (HEAPU8[$5 + 1 >> 0] << 8) | (HEAPU8[$5 + 2 >> 0] << 16) | (HEAPU8[$5 + 3 >> 0] << 24);
        $7 = ((($0)) + 4 | 0);
        HEAP8[$7 >> 0] = $6 & 255; HEAP8[$7 + 1 >> 0] = ($6 >> 8) & 255; HEAP8[$7 + 2 >> 0] = ($6 >> 16) & 255; HEAP8[$7 + 3 >> 0] = $6 >> 24;
        $8 = ((($2)) + 8 | 0);
        $9 = HEAPU8[$8 >> 0] | (HEAPU8[$8 + 1 >> 0] << 8) | (HEAPU8[$8 + 2 >> 0] << 16) | (HEAPU8[$8 + 3 >> 0] << 24);
        $10 = ((($0)) + 8 | 0);
        HEAP8[$10 >> 0] = $9 & 255; HEAP8[$10 + 1 >> 0] = ($9 >> 8) & 255; HEAP8[$10 + 2 >> 0] = ($9 >> 16) & 255; HEAP8[$10 + 3 >> 0] = $9 >> 24;
        $11 = ((($2)) + 12 | 0);
        $12 = HEAPU8[$11 >> 0] | (HEAPU8[$11 + 1 >> 0] << 8) | (HEAPU8[$11 + 2 >> 0] << 16) | (HEAPU8[$11 + 3 >> 0] << 24);
        $13 = ((($0)) + 12 | 0);
        HEAP8[$13 >> 0] = $12 & 255; HEAP8[$13 + 1 >> 0] = ($12 >> 8) & 255; HEAP8[$13 + 2 >> 0] = ($12 >> 16) & 255; HEAP8[$13 + 3 >> 0] = $12 >> 24;
        $14 = (($0) + ($1) | 0);
        $15 = (($2) + ($3) | 0);
        $16 = HEAPU8[$15 >> 0] | (HEAPU8[$15 + 1 >> 0] << 8) | (HEAPU8[$15 + 2 >> 0] << 16) | (HEAPU8[$15 + 3 >> 0] << 24);
        HEAP8[$14 >> 0] = $16 & 255; HEAP8[$14 + 1 >> 0] = ($16 >> 8) & 255; HEAP8[$14 + 2 >> 0] = ($16 >> 16) & 255; HEAP8[$14 + 3 >> 0] = $16 >> 24;
        $17 = ((($15)) + 4 | 0);
        $18 = HEAPU8[$17 >> 0] | (HEAPU8[$17 + 1 >> 0] << 8) | (HEAPU8[$17 + 2 >> 0] << 16) | (HEAPU8[$17 + 3 >> 0] << 24);
        $19 = ((($14)) + 4 | 0);
        HEAP8[$19 >> 0] = $18 & 255; HEAP8[$19 + 1 >> 0] = ($18 >> 8) & 255; HEAP8[$19 + 2 >> 0] = ($18 >> 16) & 255; HEAP8[$19 + 3 >> 0] = $18 >> 24;
        $20 = ((($15)) + 8 | 0);
        $21 = HEAPU8[$20 >> 0] | (HEAPU8[$20 + 1 >> 0] << 8) | (HEAPU8[$20 + 2 >> 0] << 16) | (HEAPU8[$20 + 3 >> 0] << 24);
        $22 = ((($14)) + 8 | 0);
        HEAP8[$22 >> 0] = $21 & 255; HEAP8[$22 + 1 >> 0] = ($21 >> 8) & 255; HEAP8[$22 + 2 >> 0] = ($21 >> 16) & 255; HEAP8[$22 + 3 >> 0] = $21 >> 24;
        $23 = ((($15)) + 12 | 0);
        $24 = HEAPU8[$23 >> 0] | (HEAPU8[$23 + 1 >> 0] << 8) | (HEAPU8[$23 + 2 >> 0] << 16) | (HEAPU8[$23 + 3 >> 0] << 24);
        $25 = ((($14)) + 12 | 0);
        HEAP8[$25 >> 0] = $24 & 255; HEAP8[$25 + 1 >> 0] = ($24 >> 8) & 255; HEAP8[$25 + 2 >> 0] = ($24 >> 16) & 255; HEAP8[$25 + 3 >> 0] = $24 >> 24;
        $26 = (($14) + ($1) | 0);
        $27 = (($15) + ($3) | 0);
        $28 = HEAPU8[$27 >> 0] | (HEAPU8[$27 + 1 >> 0] << 8) | (HEAPU8[$27 + 2 >> 0] << 16) | (HEAPU8[$27 + 3 >> 0] << 24);
        HEAP8[$26 >> 0] = $28 & 255; HEAP8[$26 + 1 >> 0] = ($28 >> 8) & 255; HEAP8[$26 + 2 >> 0] = ($28 >> 16) & 255; HEAP8[$26 + 3 >> 0] = $28 >> 24;
        $29 = ((($27)) + 4 | 0);
        $30 = HEAPU8[$29 >> 0] | (HEAPU8[$29 + 1 >> 0] << 8) | (HEAPU8[$29 + 2 >> 0] << 16) | (HEAPU8[$29 + 3 >> 0] << 24);
        $31 = ((($26)) + 4 | 0);
        HEAP8[$31 >> 0] = $30 & 255; HEAP8[$31 + 1 >> 0] = ($30 >> 8) & 255; HEAP8[$31 + 2 >> 0] = ($30 >> 16) & 255; HEAP8[$31 + 3 >> 0] = $30 >> 24;
        $32 = ((($27)) + 8 | 0);
        $33 = HEAPU8[$32 >> 0] | (HEAPU8[$32 + 1 >> 0] << 8) | (HEAPU8[$32 + 2 >> 0] << 16) | (HEAPU8[$32 + 3 >> 0] << 24);
        $34 = ((($26)) + 8 | 0);
        HEAP8[$34 >> 0] = $33 & 255; HEAP8[$34 + 1 >> 0] = ($33 >> 8) & 255; HEAP8[$34 + 2 >> 0] = ($33 >> 16) & 255; HEAP8[$34 + 3 >> 0] = $33 >> 24;
        $35 = ((($27)) + 12 | 0);
        $36 = HEAPU8[$35 >> 0] | (HEAPU8[$35 + 1 >> 0] << 8) | (HEAPU8[$35 + 2 >> 0] << 16) | (HEAPU8[$35 + 3 >> 0] << 24);
        $37 = ((($26)) + 12 | 0);
        HEAP8[$37 >> 0] = $36 & 255; HEAP8[$37 + 1 >> 0] = ($36 >> 8) & 255; HEAP8[$37 + 2 >> 0] = ($36 >> 16) & 255; HEAP8[$37 + 3 >> 0] = $36 >> 24;
        $38 = (($26) + ($1) | 0);
        $39 = (($27) + ($3) | 0);
        $40 = HEAPU8[$39 >> 0] | (HEAPU8[$39 + 1 >> 0] << 8) | (HEAPU8[$39 + 2 >> 0] << 16) | (HEAPU8[$39 + 3 >> 0] << 24);
        HEAP8[$38 >> 0] = $40 & 255; HEAP8[$38 + 1 >> 0] = ($40 >> 8) & 255; HEAP8[$38 + 2 >> 0] = ($40 >> 16) & 255; HEAP8[$38 + 3 >> 0] = $40 >> 24;
        $41 = ((($39)) + 4 | 0);
        $42 = HEAPU8[$41 >> 0] | (HEAPU8[$41 + 1 >> 0] << 8) | (HEAPU8[$41 + 2 >> 0] << 16) | (HEAPU8[$41 + 3 >> 0] << 24);
        $43 = ((($38)) + 4 | 0);
        HEAP8[$43 >> 0] = $42 & 255; HEAP8[$43 + 1 >> 0] = ($42 >> 8) & 255; HEAP8[$43 + 2 >> 0] = ($42 >> 16) & 255; HEAP8[$43 + 3 >> 0] = $42 >> 24;
        $44 = ((($39)) + 8 | 0);
        $45 = HEAPU8[$44 >> 0] | (HEAPU8[$44 + 1 >> 0] << 8) | (HEAPU8[$44 + 2 >> 0] << 16) | (HEAPU8[$44 + 3 >> 0] << 24);
        $46 = ((($38)) + 8 | 0);
        HEAP8[$46 >> 0] = $45 & 255; HEAP8[$46 + 1 >> 0] = ($45 >> 8) & 255; HEAP8[$46 + 2 >> 0] = ($45 >> 16) & 255; HEAP8[$46 + 3 >> 0] = $45 >> 24;
        $47 = ((($39)) + 12 | 0);
        $48 = HEAPU8[$47 >> 0] | (HEAPU8[$47 + 1 >> 0] << 8) | (HEAPU8[$47 + 2 >> 0] << 16) | (HEAPU8[$47 + 3 >> 0] << 24);
        $49 = ((($38)) + 12 | 0);
        HEAP8[$49 >> 0] = $48 & 255; HEAP8[$49 + 1 >> 0] = ($48 >> 8) & 255; HEAP8[$49 + 2 >> 0] = ($48 >> 16) & 255; HEAP8[$49 + 3 >> 0] = $48 >> 24;
        $50 = (($38) + ($1) | 0);
        $51 = (($39) + ($3) | 0);
        $52 = HEAPU8[$51 >> 0] | (HEAPU8[$51 + 1 >> 0] << 8) | (HEAPU8[$51 + 2 >> 0] << 16) | (HEAPU8[$51 + 3 >> 0] << 24);
        HEAP8[$50 >> 0] = $52 & 255; HEAP8[$50 + 1 >> 0] = ($52 >> 8) & 255; HEAP8[$50 + 2 >> 0] = ($52 >> 16) & 255; HEAP8[$50 + 3 >> 0] = $52 >> 24;
        $53 = ((($51)) + 4 | 0);
        $54 = HEAPU8[$53 >> 0] | (HEAPU8[$53 + 1 >> 0] << 8) | (HEAPU8[$53 + 2 >> 0] << 16) | (HEAPU8[$53 + 3 >> 0] << 24);
        $55 = ((($50)) + 4 | 0);
        HEAP8[$55 >> 0] = $54 & 255; HEAP8[$55 + 1 >> 0] = ($54 >> 8) & 255; HEAP8[$55 + 2 >> 0] = ($54 >> 16) & 255; HEAP8[$55 + 3 >> 0] = $54 >> 24;
        $56 = ((($51)) + 8 | 0);
        $57 = HEAPU8[$56 >> 0] | (HEAPU8[$56 + 1 >> 0] << 8) | (HEAPU8[$56 + 2 >> 0] << 16) | (HEAPU8[$56 + 3 >> 0] << 24);
        $58 = ((($50)) + 8 | 0);
        HEAP8[$58 >> 0] = $57 & 255; HEAP8[$58 + 1 >> 0] = ($57 >> 8) & 255; HEAP8[$58 + 2 >> 0] = ($57 >> 16) & 255; HEAP8[$58 + 3 >> 0] = $57 >> 24;
        $59 = ((($51)) + 12 | 0);
        $60 = HEAPU8[$59 >> 0] | (HEAPU8[$59 + 1 >> 0] << 8) | (HEAPU8[$59 + 2 >> 0] << 16) | (HEAPU8[$59 + 3 >> 0] << 24);
        $61 = ((($50)) + 12 | 0);
        HEAP8[$61 >> 0] = $60 & 255; HEAP8[$61 + 1 >> 0] = ($60 >> 8) & 255; HEAP8[$61 + 2 >> 0] = ($60 >> 16) & 255; HEAP8[$61 + 3 >> 0] = $60 >> 24;
        $62 = (($50) + ($1) | 0);
        $63 = (($51) + ($3) | 0);
        $64 = HEAPU8[$63 >> 0] | (HEAPU8[$63 + 1 >> 0] << 8) | (HEAPU8[$63 + 2 >> 0] << 16) | (HEAPU8[$63 + 3 >> 0] << 24);
        HEAP8[$62 >> 0] = $64 & 255; HEAP8[$62 + 1 >> 0] = ($64 >> 8) & 255; HEAP8[$62 + 2 >> 0] = ($64 >> 16) & 255; HEAP8[$62 + 3 >> 0] = $64 >> 24;
        $65 = ((($63)) + 4 | 0);
        $66 = HEAPU8[$65 >> 0] | (HEAPU8[$65 + 1 >> 0] << 8) | (HEAPU8[$65 + 2 >> 0] << 16) | (HEAPU8[$65 + 3 >> 0] << 24);
        $67 = ((($62)) + 4 | 0);
        HEAP8[$67 >> 0] = $66 & 255; HEAP8[$67 + 1 >> 0] = ($66 >> 8) & 255; HEAP8[$67 + 2 >> 0] = ($66 >> 16) & 255; HEAP8[$67 + 3 >> 0] = $66 >> 24;
        $68 = ((($63)) + 8 | 0);
        $69 = HEAPU8[$68 >> 0] | (HEAPU8[$68 + 1 >> 0] << 8) | (HEAPU8[$68 + 2 >> 0] << 16) | (HEAPU8[$68 + 3 >> 0] << 24);
        $70 = ((($62)) + 8 | 0);
        HEAP8[$70 >> 0] = $69 & 255; HEAP8[$70 + 1 >> 0] = ($69 >> 8) & 255; HEAP8[$70 + 2 >> 0] = ($69 >> 16) & 255; HEAP8[$70 + 3 >> 0] = $69 >> 24;
        $71 = ((($63)) + 12 | 0);
        $72 = HEAPU8[$71 >> 0] | (HEAPU8[$71 + 1 >> 0] << 8) | (HEAPU8[$71 + 2 >> 0] << 16) | (HEAPU8[$71 + 3 >> 0] << 24);
        $73 = ((($62)) + 12 | 0);
        HEAP8[$73 >> 0] = $72 & 255; HEAP8[$73 + 1 >> 0] = ($72 >> 8) & 255; HEAP8[$73 + 2 >> 0] = ($72 >> 16) & 255; HEAP8[$73 + 3 >> 0] = $72 >> 24;
        $74 = (($62) + ($1) | 0);
        $75 = (($63) + ($3) | 0);
        $76 = HEAPU8[$75 >> 0] | (HEAPU8[$75 + 1 >> 0] << 8) | (HEAPU8[$75 + 2 >> 0] << 16) | (HEAPU8[$75 + 3 >> 0] << 24);
        HEAP8[$74 >> 0] = $76 & 255; HEAP8[$74 + 1 >> 0] = ($76 >> 8) & 255; HEAP8[$74 + 2 >> 0] = ($76 >> 16) & 255; HEAP8[$74 + 3 >> 0] = $76 >> 24;
        $77 = ((($75)) + 4 | 0);
        $78 = HEAPU8[$77 >> 0] | (HEAPU8[$77 + 1 >> 0] << 8) | (HEAPU8[$77 + 2 >> 0] << 16) | (HEAPU8[$77 + 3 >> 0] << 24);
        $79 = ((($74)) + 4 | 0);
        HEAP8[$79 >> 0] = $78 & 255; HEAP8[$79 + 1 >> 0] = ($78 >> 8) & 255; HEAP8[$79 + 2 >> 0] = ($78 >> 16) & 255; HEAP8[$79 + 3 >> 0] = $78 >> 24;
        $80 = ((($75)) + 8 | 0);
        $81 = HEAPU8[$80 >> 0] | (HEAPU8[$80 + 1 >> 0] << 8) | (HEAPU8[$80 + 2 >> 0] << 16) | (HEAPU8[$80 + 3 >> 0] << 24);
        $82 = ((($74)) + 8 | 0);
        HEAP8[$82 >> 0] = $81 & 255; HEAP8[$82 + 1 >> 0] = ($81 >> 8) & 255; HEAP8[$82 + 2 >> 0] = ($81 >> 16) & 255; HEAP8[$82 + 3 >> 0] = $81 >> 24;
        $83 = ((($75)) + 12 | 0);
        $84 = HEAPU8[$83 >> 0] | (HEAPU8[$83 + 1 >> 0] << 8) | (HEAPU8[$83 + 2 >> 0] << 16) | (HEAPU8[$83 + 3 >> 0] << 24);
        $85 = ((($74)) + 12 | 0);
        HEAP8[$85 >> 0] = $84 & 255; HEAP8[$85 + 1 >> 0] = ($84 >> 8) & 255; HEAP8[$85 + 2 >> 0] = ($84 >> 16) & 255; HEAP8[$85 + 3 >> 0] = $84 >> 24;
        $86 = (($74) + ($1) | 0);
        $87 = (($75) + ($3) | 0);
        $88 = HEAPU8[$87 >> 0] | (HEAPU8[$87 + 1 >> 0] << 8) | (HEAPU8[$87 + 2 >> 0] << 16) | (HEAPU8[$87 + 3 >> 0] << 24);
        HEAP8[$86 >> 0] = $88 & 255; HEAP8[$86 + 1 >> 0] = ($88 >> 8) & 255; HEAP8[$86 + 2 >> 0] = ($88 >> 16) & 255; HEAP8[$86 + 3 >> 0] = $88 >> 24;
        $89 = ((($87)) + 4 | 0);
        $90 = HEAPU8[$89 >> 0] | (HEAPU8[$89 + 1 >> 0] << 8) | (HEAPU8[$89 + 2 >> 0] << 16) | (HEAPU8[$89 + 3 >> 0] << 24);
        $91 = ((($86)) + 4 | 0);
        HEAP8[$91 >> 0] = $90 & 255; HEAP8[$91 + 1 >> 0] = ($90 >> 8) & 255; HEAP8[$91 + 2 >> 0] = ($90 >> 16) & 255; HEAP8[$91 + 3 >> 0] = $90 >> 24;
        $92 = ((($87)) + 8 | 0);
        $93 = HEAPU8[$92 >> 0] | (HEAPU8[$92 + 1 >> 0] << 8) | (HEAPU8[$92 + 2 >> 0] << 16) | (HEAPU8[$92 + 3 >> 0] << 24);
        $94 = ((($86)) + 8 | 0);
        HEAP8[$94 >> 0] = $93 & 255; HEAP8[$94 + 1 >> 0] = ($93 >> 8) & 255; HEAP8[$94 + 2 >> 0] = ($93 >> 16) & 255; HEAP8[$94 + 3 >> 0] = $93 >> 24;
        $95 = ((($87)) + 12 | 0);
        $96 = HEAPU8[$95 >> 0] | (HEAPU8[$95 + 1 >> 0] << 8) | (HEAPU8[$95 + 2 >> 0] << 16) | (HEAPU8[$95 + 3 >> 0] << 24);
        $97 = ((($86)) + 12 | 0);
        HEAP8[$97 >> 0] = $96 & 255; HEAP8[$97 + 1 >> 0] = ($96 >> 8) & 255; HEAP8[$97 + 2 >> 0] = ($96 >> 16) & 255; HEAP8[$97 + 3 >> 0] = $96 >> 24;
        $98 = (($86) + ($1) | 0);
        $99 = (($87) + ($3) | 0);
        $100 = HEAPU8[$99 >> 0] | (HEAPU8[$99 + 1 >> 0] << 8) | (HEAPU8[$99 + 2 >> 0] << 16) | (HEAPU8[$99 + 3 >> 0] << 24);
        HEAP8[$98 >> 0] = $100 & 255; HEAP8[$98 + 1 >> 0] = ($100 >> 8) & 255; HEAP8[$98 + 2 >> 0] = ($100 >> 16) & 255; HEAP8[$98 + 3 >> 0] = $100 >> 24;
        $101 = ((($99)) + 4 | 0);
        $102 = HEAPU8[$101 >> 0] | (HEAPU8[$101 + 1 >> 0] << 8) | (HEAPU8[$101 + 2 >> 0] << 16) | (HEAPU8[$101 + 3 >> 0] << 24);
        $103 = ((($98)) + 4 | 0);
        HEAP8[$103 >> 0] = $102 & 255; HEAP8[$103 + 1 >> 0] = ($102 >> 8) & 255; HEAP8[$103 + 2 >> 0] = ($102 >> 16) & 255; HEAP8[$103 + 3 >> 0] = $102 >> 24;
        $104 = ((($99)) + 8 | 0);
        $105 = HEAPU8[$104 >> 0] | (HEAPU8[$104 + 1 >> 0] << 8) | (HEAPU8[$104 + 2 >> 0] << 16) | (HEAPU8[$104 + 3 >> 0] << 24);
        $106 = ((($98)) + 8 | 0);
        HEAP8[$106 >> 0] = $105 & 255; HEAP8[$106 + 1 >> 0] = ($105 >> 8) & 255; HEAP8[$106 + 2 >> 0] = ($105 >> 16) & 255; HEAP8[$106 + 3 >> 0] = $105 >> 24;
        $107 = ((($99)) + 12 | 0);
        $108 = HEAPU8[$107 >> 0] | (HEAPU8[$107 + 1 >> 0] << 8) | (HEAPU8[$107 + 2 >> 0] << 16) | (HEAPU8[$107 + 3 >> 0] << 24);
        $109 = ((($98)) + 12 | 0);
        HEAP8[$109 >> 0] = $108 & 255; HEAP8[$109 + 1 >> 0] = ($108 >> 8) & 255; HEAP8[$109 + 2 >> 0] = ($108 >> 16) & 255; HEAP8[$109 + 3 >> 0] = $108 >> 24;
        $110 = (($98) + ($1) | 0);
        $111 = (($99) + ($3) | 0);
        $112 = HEAPU8[$111 >> 0] | (HEAPU8[$111 + 1 >> 0] << 8) | (HEAPU8[$111 + 2 >> 0] << 16) | (HEAPU8[$111 + 3 >> 0] << 24);
        HEAP8[$110 >> 0] = $112 & 255; HEAP8[$110 + 1 >> 0] = ($112 >> 8) & 255; HEAP8[$110 + 2 >> 0] = ($112 >> 16) & 255; HEAP8[$110 + 3 >> 0] = $112 >> 24;
        $113 = ((($111)) + 4 | 0);
        $114 = HEAPU8[$113 >> 0] | (HEAPU8[$113 + 1 >> 0] << 8) | (HEAPU8[$113 + 2 >> 0] << 16) | (HEAPU8[$113 + 3 >> 0] << 24);
        $115 = ((($110)) + 4 | 0);
        HEAP8[$115 >> 0] = $114 & 255; HEAP8[$115 + 1 >> 0] = ($114 >> 8) & 255; HEAP8[$115 + 2 >> 0] = ($114 >> 16) & 255; HEAP8[$115 + 3 >> 0] = $114 >> 24;
        $116 = ((($111)) + 8 | 0);
        $117 = HEAPU8[$116 >> 0] | (HEAPU8[$116 + 1 >> 0] << 8) | (HEAPU8[$116 + 2 >> 0] << 16) | (HEAPU8[$116 + 3 >> 0] << 24);
        $118 = ((($110)) + 8 | 0);
        HEAP8[$118 >> 0] = $117 & 255; HEAP8[$118 + 1 >> 0] = ($117 >> 8) & 255; HEAP8[$118 + 2 >> 0] = ($117 >> 16) & 255; HEAP8[$118 + 3 >> 0] = $117 >> 24;
        $119 = ((($111)) + 12 | 0);
        $120 = HEAPU8[$119 >> 0] | (HEAPU8[$119 + 1 >> 0] << 8) | (HEAPU8[$119 + 2 >> 0] << 16) | (HEAPU8[$119 + 3 >> 0] << 24);
        $121 = ((($110)) + 12 | 0);
        HEAP8[$121 >> 0] = $120 & 255; HEAP8[$121 + 1 >> 0] = ($120 >> 8) & 255; HEAP8[$121 + 2 >> 0] = ($120 >> 16) & 255; HEAP8[$121 + 3 >> 0] = $120 >> 24;
        $122 = (($110) + ($1) | 0);
        $123 = (($111) + ($3) | 0);
        $124 = HEAPU8[$123 >> 0] | (HEAPU8[$123 + 1 >> 0] << 8) | (HEAPU8[$123 + 2 >> 0] << 16) | (HEAPU8[$123 + 3 >> 0] << 24);
        HEAP8[$122 >> 0] = $124 & 255; HEAP8[$122 + 1 >> 0] = ($124 >> 8) & 255; HEAP8[$122 + 2 >> 0] = ($124 >> 16) & 255; HEAP8[$122 + 3 >> 0] = $124 >> 24;
        $125 = ((($123)) + 4 | 0);
        $126 = HEAPU8[$125 >> 0] | (HEAPU8[$125 + 1 >> 0] << 8) | (HEAPU8[$125 + 2 >> 0] << 16) | (HEAPU8[$125 + 3 >> 0] << 24);
        $127 = ((($122)) + 4 | 0);
        HEAP8[$127 >> 0] = $126 & 255; HEAP8[$127 + 1 >> 0] = ($126 >> 8) & 255; HEAP8[$127 + 2 >> 0] = ($126 >> 16) & 255; HEAP8[$127 + 3 >> 0] = $126 >> 24;
        $128 = ((($123)) + 8 | 0);
        $129 = HEAPU8[$128 >> 0] | (HEAPU8[$128 + 1 >> 0] << 8) | (HEAPU8[$128 + 2 >> 0] << 16) | (HEAPU8[$128 + 3 >> 0] << 24);
        $130 = ((($122)) + 8 | 0);
        HEAP8[$130 >> 0] = $129 & 255; HEAP8[$130 + 1 >> 0] = ($129 >> 8) & 255; HEAP8[$130 + 2 >> 0] = ($129 >> 16) & 255; HEAP8[$130 + 3 >> 0] = $129 >> 24;
        $131 = ((($123)) + 12 | 0);
        $132 = HEAPU8[$131 >> 0] | (HEAPU8[$131 + 1 >> 0] << 8) | (HEAPU8[$131 + 2 >> 0] << 16) | (HEAPU8[$131 + 3 >> 0] << 24);
        $133 = ((($122)) + 12 | 0);
        HEAP8[$133 >> 0] = $132 & 255; HEAP8[$133 + 1 >> 0] = ($132 >> 8) & 255; HEAP8[$133 + 2 >> 0] = ($132 >> 16) & 255; HEAP8[$133 + 3 >> 0] = $132 >> 24;
        $134 = (($122) + ($1) | 0);
        $135 = (($123) + ($3) | 0);
        $136 = HEAPU8[$135 >> 0] | (HEAPU8[$135 + 1 >> 0] << 8) | (HEAPU8[$135 + 2 >> 0] << 16) | (HEAPU8[$135 + 3 >> 0] << 24);
        HEAP8[$134 >> 0] = $136 & 255; HEAP8[$134 + 1 >> 0] = ($136 >> 8) & 255; HEAP8[$134 + 2 >> 0] = ($136 >> 16) & 255; HEAP8[$134 + 3 >> 0] = $136 >> 24;
        $137 = ((($135)) + 4 | 0);
        $138 = HEAPU8[$137 >> 0] | (HEAPU8[$137 + 1 >> 0] << 8) | (HEAPU8[$137 + 2 >> 0] << 16) | (HEAPU8[$137 + 3 >> 0] << 24);
        $139 = ((($134)) + 4 | 0);
        HEAP8[$139 >> 0] = $138 & 255; HEAP8[$139 + 1 >> 0] = ($138 >> 8) & 255; HEAP8[$139 + 2 >> 0] = ($138 >> 16) & 255; HEAP8[$139 + 3 >> 0] = $138 >> 24;
        $140 = ((($135)) + 8 | 0);
        $141 = HEAPU8[$140 >> 0] | (HEAPU8[$140 + 1 >> 0] << 8) | (HEAPU8[$140 + 2 >> 0] << 16) | (HEAPU8[$140 + 3 >> 0] << 24);
        $142 = ((($134)) + 8 | 0);
        HEAP8[$142 >> 0] = $141 & 255; HEAP8[$142 + 1 >> 0] = ($141 >> 8) & 255; HEAP8[$142 + 2 >> 0] = ($141 >> 16) & 255; HEAP8[$142 + 3 >> 0] = $141 >> 24;
        $143 = ((($135)) + 12 | 0);
        $144 = HEAPU8[$143 >> 0] | (HEAPU8[$143 + 1 >> 0] << 8) | (HEAPU8[$143 + 2 >> 0] << 16) | (HEAPU8[$143 + 3 >> 0] << 24);
        $145 = ((($134)) + 12 | 0);
        HEAP8[$145 >> 0] = $144 & 255; HEAP8[$145 + 1 >> 0] = ($144 >> 8) & 255; HEAP8[$145 + 2 >> 0] = ($144 >> 16) & 255; HEAP8[$145 + 3 >> 0] = $144 >> 24;
        $146 = (($134) + ($1) | 0);
        $147 = (($135) + ($3) | 0);
        $148 = HEAPU8[$147 >> 0] | (HEAPU8[$147 + 1 >> 0] << 8) | (HEAPU8[$147 + 2 >> 0] << 16) | (HEAPU8[$147 + 3 >> 0] << 24);
        HEAP8[$146 >> 0] = $148 & 255; HEAP8[$146 + 1 >> 0] = ($148 >> 8) & 255; HEAP8[$146 + 2 >> 0] = ($148 >> 16) & 255; HEAP8[$146 + 3 >> 0] = $148 >> 24;
        $149 = ((($147)) + 4 | 0);
        $150 = HEAPU8[$149 >> 0] | (HEAPU8[$149 + 1 >> 0] << 8) | (HEAPU8[$149 + 2 >> 0] << 16) | (HEAPU8[$149 + 3 >> 0] << 24);
        $151 = ((($146)) + 4 | 0);
        HEAP8[$151 >> 0] = $150 & 255; HEAP8[$151 + 1 >> 0] = ($150 >> 8) & 255; HEAP8[$151 + 2 >> 0] = ($150 >> 16) & 255; HEAP8[$151 + 3 >> 0] = $150 >> 24;
        $152 = ((($147)) + 8 | 0);
        $153 = HEAPU8[$152 >> 0] | (HEAPU8[$152 + 1 >> 0] << 8) | (HEAPU8[$152 + 2 >> 0] << 16) | (HEAPU8[$152 + 3 >> 0] << 24);
        $154 = ((($146)) + 8 | 0);
        HEAP8[$154 >> 0] = $153 & 255; HEAP8[$154 + 1 >> 0] = ($153 >> 8) & 255; HEAP8[$154 + 2 >> 0] = ($153 >> 16) & 255; HEAP8[$154 + 3 >> 0] = $153 >> 24;
        $155 = ((($147)) + 12 | 0);
        $156 = HEAPU8[$155 >> 0] | (HEAPU8[$155 + 1 >> 0] << 8) | (HEAPU8[$155 + 2 >> 0] << 16) | (HEAPU8[$155 + 3 >> 0] << 24);
        $157 = ((($146)) + 12 | 0);
        HEAP8[$157 >> 0] = $156 & 255; HEAP8[$157 + 1 >> 0] = ($156 >> 8) & 255; HEAP8[$157 + 2 >> 0] = ($156 >> 16) & 255; HEAP8[$157 + 3 >> 0] = $156 >> 24;
        $158 = (($146) + ($1) | 0);
        $159 = (($147) + ($3) | 0);
        $160 = HEAPU8[$159 >> 0] | (HEAPU8[$159 + 1 >> 0] << 8) | (HEAPU8[$159 + 2 >> 0] << 16) | (HEAPU8[$159 + 3 >> 0] << 24);
        HEAP8[$158 >> 0] = $160 & 255; HEAP8[$158 + 1 >> 0] = ($160 >> 8) & 255; HEAP8[$158 + 2 >> 0] = ($160 >> 16) & 255; HEAP8[$158 + 3 >> 0] = $160 >> 24;
        $161 = ((($159)) + 4 | 0);
        $162 = HEAPU8[$161 >> 0] | (HEAPU8[$161 + 1 >> 0] << 8) | (HEAPU8[$161 + 2 >> 0] << 16) | (HEAPU8[$161 + 3 >> 0] << 24);
        $163 = ((($158)) + 4 | 0);
        HEAP8[$163 >> 0] = $162 & 255; HEAP8[$163 + 1 >> 0] = ($162 >> 8) & 255; HEAP8[$163 + 2 >> 0] = ($162 >> 16) & 255; HEAP8[$163 + 3 >> 0] = $162 >> 24;
        $164 = ((($159)) + 8 | 0);
        $165 = HEAPU8[$164 >> 0] | (HEAPU8[$164 + 1 >> 0] << 8) | (HEAPU8[$164 + 2 >> 0] << 16) | (HEAPU8[$164 + 3 >> 0] << 24);
        $166 = ((($158)) + 8 | 0);
        HEAP8[$166 >> 0] = $165 & 255; HEAP8[$166 + 1 >> 0] = ($165 >> 8) & 255; HEAP8[$166 + 2 >> 0] = ($165 >> 16) & 255; HEAP8[$166 + 3 >> 0] = $165 >> 24;
        $167 = ((($159)) + 12 | 0);
        $168 = HEAPU8[$167 >> 0] | (HEAPU8[$167 + 1 >> 0] << 8) | (HEAPU8[$167 + 2 >> 0] << 16) | (HEAPU8[$167 + 3 >> 0] << 24);
        $169 = ((($158)) + 12 | 0);
        HEAP8[$169 >> 0] = $168 & 255; HEAP8[$169 + 1 >> 0] = ($168 >> 8) & 255; HEAP8[$169 + 2 >> 0] = ($168 >> 16) & 255; HEAP8[$169 + 3 >> 0] = $168 >> 24;
        $170 = (($158) + ($1) | 0);
        $171 = (($159) + ($3) | 0);
        $172 = HEAPU8[$171 >> 0] | (HEAPU8[$171 + 1 >> 0] << 8) | (HEAPU8[$171 + 2 >> 0] << 16) | (HEAPU8[$171 + 3 >> 0] << 24);
        HEAP8[$170 >> 0] = $172 & 255; HEAP8[$170 + 1 >> 0] = ($172 >> 8) & 255; HEAP8[$170 + 2 >> 0] = ($172 >> 16) & 255; HEAP8[$170 + 3 >> 0] = $172 >> 24;
        $173 = ((($171)) + 4 | 0);
        $174 = HEAPU8[$173 >> 0] | (HEAPU8[$173 + 1 >> 0] << 8) | (HEAPU8[$173 + 2 >> 0] << 16) | (HEAPU8[$173 + 3 >> 0] << 24);
        $175 = ((($170)) + 4 | 0);
        HEAP8[$175 >> 0] = $174 & 255; HEAP8[$175 + 1 >> 0] = ($174 >> 8) & 255; HEAP8[$175 + 2 >> 0] = ($174 >> 16) & 255; HEAP8[$175 + 3 >> 0] = $174 >> 24;
        $176 = ((($171)) + 8 | 0);
        $177 = HEAPU8[$176 >> 0] | (HEAPU8[$176 + 1 >> 0] << 8) | (HEAPU8[$176 + 2 >> 0] << 16) | (HEAPU8[$176 + 3 >> 0] << 24);
        $178 = ((($170)) + 8 | 0);
        HEAP8[$178 >> 0] = $177 & 255; HEAP8[$178 + 1 >> 0] = ($177 >> 8) & 255; HEAP8[$178 + 2 >> 0] = ($177 >> 16) & 255; HEAP8[$178 + 3 >> 0] = $177 >> 24;
        $179 = ((($171)) + 12 | 0);
        $180 = HEAPU8[$179 >> 0] | (HEAPU8[$179 + 1 >> 0] << 8) | (HEAPU8[$179 + 2 >> 0] << 16) | (HEAPU8[$179 + 3 >> 0] << 24);
        $181 = ((($170)) + 12 | 0);
        HEAP8[$181 >> 0] = $180 & 255; HEAP8[$181 + 1 >> 0] = ($180 >> 8) & 255; HEAP8[$181 + 2 >> 0] = ($180 >> 16) & 255; HEAP8[$181 + 3 >> 0] = $180 >> 24;
        $182 = (($170) + ($1) | 0);
        $183 = (($171) + ($3) | 0);
        $184 = HEAPU8[$183 >> 0] | (HEAPU8[$183 + 1 >> 0] << 8) | (HEAPU8[$183 + 2 >> 0] << 16) | (HEAPU8[$183 + 3 >> 0] << 24);
        HEAP8[$182 >> 0] = $184 & 255; HEAP8[$182 + 1 >> 0] = ($184 >> 8) & 255; HEAP8[$182 + 2 >> 0] = ($184 >> 16) & 255; HEAP8[$182 + 3 >> 0] = $184 >> 24;
        $185 = ((($183)) + 4 | 0);
        $186 = HEAPU8[$185 >> 0] | (HEAPU8[$185 + 1 >> 0] << 8) | (HEAPU8[$185 + 2 >> 0] << 16) | (HEAPU8[$185 + 3 >> 0] << 24);
        $187 = ((($182)) + 4 | 0);
        HEAP8[$187 >> 0] = $186 & 255; HEAP8[$187 + 1 >> 0] = ($186 >> 8) & 255; HEAP8[$187 + 2 >> 0] = ($186 >> 16) & 255; HEAP8[$187 + 3 >> 0] = $186 >> 24;
        $188 = ((($183)) + 8 | 0);
        $189 = HEAPU8[$188 >> 0] | (HEAPU8[$188 + 1 >> 0] << 8) | (HEAPU8[$188 + 2 >> 0] << 16) | (HEAPU8[$188 + 3 >> 0] << 24);
        $190 = ((($182)) + 8 | 0);
        HEAP8[$190 >> 0] = $189 & 255; HEAP8[$190 + 1 >> 0] = ($189 >> 8) & 255; HEAP8[$190 + 2 >> 0] = ($189 >> 16) & 255; HEAP8[$190 + 3 >> 0] = $189 >> 24;
        $191 = ((($183)) + 12 | 0);
        $192 = HEAPU8[$191 >> 0] | (HEAPU8[$191 + 1 >> 0] << 8) | (HEAPU8[$191 + 2 >> 0] << 16) | (HEAPU8[$191 + 3 >> 0] << 24);
        $193 = ((($182)) + 12 | 0);
        HEAP8[$193 >> 0] = $192 & 255; HEAP8[$193 + 1 >> 0] = ($192 >> 8) & 255; HEAP8[$193 + 2 >> 0] = ($192 >> 16) & 255; HEAP8[$193 + 3 >> 0] = $192 >> 24;
        return;
    }
    function __ZN10WelsCommonL12McHorVer20_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us = 0, $$01721$us = 0, $$01820$us = 0, $$019$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $7 = 0;
        var $8 = 0, $9 = 0, $exitcond = 0, $exitcond25 = 0, $or$cond = 0, $tmp30$i$us = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = ($5 | 0) > (0);
        $7 = ($4 | 0) > (0);
        $or$cond = $6 & $7;
        if ($or$cond) {
            $$01622$us = 0; $$01721$us = $0; $$01820$us = $2;
        } else {
            return;
        }
        while (1) {
            $$019$us = 0;
            while (1) {
                $8 = (($$01721$us) + ($$019$us) | 0);
                $9 = ((($8)) + -2 | 0);
                $10 = HEAP8[$9 >> 0] | 0;
                $11 = $10 & 255;
                $12 = ((($8)) + 3 | 0);
                $13 = HEAP8[$12 >> 0] | 0;
                $14 = $13 & 255;
                $15 = ((($8)) + -1 | 0);
                $16 = HEAP8[$15 >> 0] | 0;
                $17 = $16 & 255;
                $18 = ((($8)) + 2 | 0);
                $19 = HEAP8[$18 >> 0] | 0;
                $20 = $19 & 255;
                $21 = (($20) + ($17)) | 0;
                $22 = HEAP8[$8 >> 0] | 0;
                $23 = $22 & 255;
                $24 = ((($8)) + 1 | 0);
                $25 = HEAP8[$24 >> 0] | 0;
                $26 = $25 & 255;
                $27 = (($26) + ($23)) | 0;
                $28 = Math_imul($21, -5) | 0;
                $tmp30$i$us = ($27 * 20) | 0;
                $29 = (($11) + 16) | 0;
                $30 = (($29) + ($14)) | 0;
                $31 = (($30) + ($28)) | 0;
                $32 = (($31) + ($tmp30$i$us)) | 0;
                $33 = $32 >> 5;
                $34 = ($33 >>> 0) > (255);
                $35 = (0 - ($33)) | 0;
                $36 = $35 >> 31;
                $37 = $34 ? $36 : $33;
                $38 = $37 & 255;
                $39 = (($$01820$us) + ($$019$us) | 0);
                HEAP8[$39 >> 0] = $38;
                $40 = (($$019$us) + 1) | 0;
                $exitcond = ($40 | 0) == ($4 | 0);
                if ($exitcond) {
                    break;
                } else {
                    $$019$us = $40;
                }
            }
            $41 = (($$01820$us) + ($3) | 0);
            $42 = (($$01721$us) + ($1) | 0);
            $43 = (($$01622$us) + 1) | 0;
            $exitcond25 = ($43 | 0) == ($5 | 0);
            if ($exitcond25) {
                break;
            } else {
                $$01622$us = $43; $$01721$us = $42; $$01820$us = $41;
            }
        }
        return;
    }
    function __ZN10WelsCommonL12McHorVer02_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01723$us = 0, $$01822$us = 0, $$01921$us = 0, $$020$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond26 = 0, $tmp30$i$us = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = ($5 | 0) > (0);
        if (!($6)) {
            return;
        }
        $7 = ($4 | 0) > (0);
        $8 = $1 << 1;
        $9 = ($1 * 3) | 0;
        $10 = (0 - ($8)) | 0;
        $11 = (0 - ($1)) | 0;
        if ($7) {
            $$01723$us = 0; $$01822$us = $0; $$01921$us = $2;
        } else {
            return;
        }
        while (1) {
            $$020$us = 0;
            while (1) {
                $12 = (($$01822$us) + ($$020$us) | 0);
                $13 = (($12) + ($10) | 0);
                $14 = HEAP8[$13 >> 0] | 0;
                $15 = $14 & 255;
                $16 = (($12) + ($9) | 0);
                $17 = HEAP8[$16 >> 0] | 0;
                $18 = $17 & 255;
                $19 = (($12) + ($11) | 0);
                $20 = HEAP8[$19 >> 0] | 0;
                $21 = $20 & 255;
                $22 = (($12) + ($8) | 0);
                $23 = HEAP8[$22 >> 0] | 0;
                $24 = $23 & 255;
                $25 = (($24) + ($21)) | 0;
                $26 = HEAP8[$12 >> 0] | 0;
                $27 = $26 & 255;
                $28 = (($12) + ($1) | 0);
                $29 = HEAP8[$28 >> 0] | 0;
                $30 = $29 & 255;
                $31 = (($30) + ($27)) | 0;
                $32 = Math_imul($25, -5) | 0;
                $tmp30$i$us = ($31 * 20) | 0;
                $33 = (($15) + 16) | 0;
                $34 = (($33) + ($18)) | 0;
                $35 = (($34) + ($32)) | 0;
                $36 = (($35) + ($tmp30$i$us)) | 0;
                $37 = $36 >> 5;
                $38 = ($37 >>> 0) > (255);
                $39 = (0 - ($37)) | 0;
                $40 = $39 >> 31;
                $41 = $38 ? $40 : $37;
                $42 = $41 & 255;
                $43 = (($$01921$us) + ($$020$us) | 0);
                HEAP8[$43 >> 0] = $42;
                $44 = (($$020$us) + 1) | 0;
                $exitcond = ($44 | 0) == ($4 | 0);
                if ($exitcond) {
                    break;
                } else {
                    $$020$us = $44;
                }
            }
            $45 = (($$01921$us) + ($3) | 0);
            $46 = (($$01822$us) + ($1) | 0);
            $47 = (($$01723$us) + 1) | 0;
            $exitcond26 = ($47 | 0) == ($5 | 0);
            if ($exitcond26) {
                break;
            } else {
                $$01723$us = $47; $$01822$us = $46; $$01921$us = $45;
            }
        }
        return;
    }
    function __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$02429$us = 0, $$02534 = 0, $$02534$us = 0, $$02633$us = 0, $$02732 = 0, $$02732$us = 0, $$030 = 0, $$030$us = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
        var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
        var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0;
        var $exitcond37 = 0, $exitcond38 = 0, $exitcond39 = 0, $tmp30$i$us = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $6 = sp;
        $7 = ($5 | 0) > (0);
        if (!($7)) {
            STACKTOP = sp; return;
        }
        $8 = ($4 | 0) > (-5);
        $9 = ($4 | 0) > (0);
        $10 = $1 << 1;
        $11 = ($1 * 3) | 0;
        $12 = (0 - ($10)) | 0;
        $13 = (0 - ($1)) | 0;
        if (!($8)) {
            $$02534 = 0; $$02732 = $2;
            while (1) {
                if ($9) {
                    $$030 = 0;
                    while (1) {
                        $81 = (($6) + ($$030 << 1) | 0);
                        $82 = HEAP16[$81 >> 1] | 0;
                        $83 = $82 << 16 >> 16;
                        $84 = ((($81)) + 10 | 0);
                        $85 = HEAP16[$84 >> 1] | 0;
                        $86 = $85 << 16 >> 16;
                        $87 = ((($81)) + 2 | 0);
                        $88 = HEAP16[$87 >> 1] | 0;
                        $89 = $88 << 16 >> 16;
                        $90 = ((($81)) + 8 | 0);
                        $91 = HEAP16[$90 >> 1] | 0;
                        $92 = $91 << 16 >> 16;
                        $93 = (($92) + ($89)) | 0;
                        $94 = ((($81)) + 4 | 0);
                        $95 = HEAP16[$94 >> 1] | 0;
                        $96 = $95 << 16 >> 16;
                        $97 = ((($81)) + 6 | 0);
                        $98 = HEAP16[$97 >> 1] | 0;
                        $99 = $98 << 16 >> 16;
                        $100 = (($99) + ($96)) | 0;
                        $101 = Math_imul($93, -5) | 0;
                        $102 = ($100 * 20) | 0;
                        $103 = (($83) + 512) | 0;
                        $104 = (($103) + ($86)) | 0;
                        $105 = (($104) + ($101)) | 0;
                        $106 = (($105) + ($102)) | 0;
                        $107 = $106 >> 10;
                        $108 = ($107 >>> 0) > (255);
                        $109 = (0 - ($107)) | 0;
                        $110 = $109 >> 31;
                        $111 = $108 ? $110 : $107;
                        $112 = $111 & 255;
                        $113 = (($$02732) + ($$030) | 0);
                        HEAP8[$113 >> 0] = $112;
                        $114 = (($$030) + 1) | 0;
                        $exitcond38 = ($114 | 0) == ($4 | 0);
                        if ($exitcond38) {
                            break;
                        } else {
                            $$030 = $114;
                        }
                    }
                }
                $115 = (($$02732) + ($3) | 0);
                $116 = (($$02534) + 1) | 0;
                $exitcond39 = ($116 | 0) == ($5 | 0);
                if ($exitcond39) {
                    break;
                } else {
                    $$02534 = $116; $$02732 = $115;
                }
            }
            STACKTOP = sp; return;
        }
        $14 = (($4) + 4) | 0;
        $$02534$us = 0; $$02633$us = $0; $$02732$us = $2;
        while (1) {
            $15 = ((($$02633$us)) + -2 | 0);
            $$02429$us = 0;
            while (1) {
                $53 = (($15) + ($$02429$us) | 0);
                $54 = (($53) + ($12) | 0);
                $55 = HEAP8[$54 >> 0] | 0;
                $56 = $55 & 255;
                $57 = (($53) + ($11) | 0);
                $58 = HEAP8[$57 >> 0] | 0;
                $59 = $58 & 255;
                $60 = (($53) + ($13) | 0);
                $61 = HEAP8[$60 >> 0] | 0;
                $62 = $61 & 255;
                $63 = (($53) + ($10) | 0);
                $64 = HEAP8[$63 >> 0] | 0;
                $65 = $64 & 255;
                $66 = (($65) + ($62)) | 0;
                $67 = HEAP8[$53 >> 0] | 0;
                $68 = $67 & 255;
                $69 = (($53) + ($1) | 0);
                $70 = HEAP8[$69 >> 0] | 0;
                $71 = $70 & 255;
                $72 = (($71) + ($68)) | 0;
                $73 = Math_imul($66, -5) | 0;
                $tmp30$i$us = ($72 * 20) | 0;
                $74 = (($59) + ($56)) | 0;
                $75 = (($74) + ($73)) | 0;
                $76 = (($75) + ($tmp30$i$us)) | 0;
                $77 = $76 & 65535;
                $78 = (($6) + ($$02429$us << 1) | 0);
                HEAP16[$78 >> 1] = $77;
                $79 = (($$02429$us) + 1) | 0;
                $80 = ($$02429$us | 0) < ($14 | 0);
                if ($80) {
                    $$02429$us = $79;
                } else {
                    break;
                }
            }
            if ($9) {
                $$030$us = 0;
                while (1) {
                    $19 = (($6) + ($$030$us << 1) | 0);
                    $20 = HEAP16[$19 >> 1] | 0;
                    $21 = $20 << 16 >> 16;
                    $22 = ((($19)) + 10 | 0);
                    $23 = HEAP16[$22 >> 1] | 0;
                    $24 = $23 << 16 >> 16;
                    $25 = ((($19)) + 2 | 0);
                    $26 = HEAP16[$25 >> 1] | 0;
                    $27 = $26 << 16 >> 16;
                    $28 = ((($19)) + 8 | 0);
                    $29 = HEAP16[$28 >> 1] | 0;
                    $30 = $29 << 16 >> 16;
                    $31 = (($30) + ($27)) | 0;
                    $32 = ((($19)) + 4 | 0);
                    $33 = HEAP16[$32 >> 1] | 0;
                    $34 = $33 << 16 >> 16;
                    $35 = ((($19)) + 6 | 0);
                    $36 = HEAP16[$35 >> 1] | 0;
                    $37 = $36 << 16 >> 16;
                    $38 = (($37) + ($34)) | 0;
                    $39 = Math_imul($31, -5) | 0;
                    $40 = ($38 * 20) | 0;
                    $41 = (($21) + 512) | 0;
                    $42 = (($41) + ($24)) | 0;
                    $43 = (($42) + ($39)) | 0;
                    $44 = (($43) + ($40)) | 0;
                    $45 = $44 >> 10;
                    $46 = ($45 >>> 0) > (255);
                    $47 = (0 - ($45)) | 0;
                    $48 = $47 >> 31;
                    $49 = $46 ? $48 : $45;
                    $50 = $49 & 255;
                    $51 = (($$02732$us) + ($$030$us) | 0);
                    HEAP8[$51 >> 0] = $50;
                    $52 = (($$030$us) + 1) | 0;
                    $exitcond = ($52 | 0) == ($4 | 0);
                    if ($exitcond) {
                        break;
                    } else {
                        $$030$us = $52;
                    }
                }
            }
            $16 = (($$02633$us) + ($1) | 0);
            $17 = (($$02732$us) + ($3) | 0);
            $18 = (($$02534$us) + 1) | 0;
            $exitcond37 = ($18 | 0) == ($5 | 0);
            if ($exitcond37) {
                break;
            } else {
                $$02534$us = $18; $$02633$us = $16; $$02732$us = $17;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL10PixelAvg_cEPhiPKhiS2_iii($0, $1, $2, $3, $4, $5, $6, $7) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        var $$02028$us = 0, $$02127$us = 0, $$02226$us = 0, $$02325$us = 0, $$024$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond31 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $8 = ($7 | 0) > (0);
        $9 = ($6 | 0) > (0);
        $or$cond = $8 & $9;
        if ($or$cond) {
            $$02028$us = 0; $$02127$us = $0; $$02226$us = $2; $$02325$us = $4;
        } else {
            return;
        }
        while (1) {
            $$024$us = 0;
            while (1) {
                $10 = (($$02226$us) + ($$024$us) | 0);
                $11 = HEAP8[$10 >> 0] | 0;
                $12 = $11 & 255;
                $13 = (($$02325$us) + ($$024$us) | 0);
                $14 = HEAP8[$13 >> 0] | 0;
                $15 = $14 & 255;
                $16 = (($12) + 1) | 0;
                $17 = (($16) + ($15)) | 0;
                $18 = $17 >>> 1;
                $19 = $18 & 255;
                $20 = (($$02127$us) + ($$024$us) | 0);
                HEAP8[$20 >> 0] = $19;
                $21 = (($$024$us) + 1) | 0;
                $exitcond = ($21 | 0) == ($6 | 0);
                if ($exitcond) {
                    break;
                } else {
                    $$024$us = $21;
                }
            }
            $22 = (($$02127$us) + ($1) | 0);
            $23 = (($$02226$us) + ($3) | 0);
            $24 = (($$02325$us) + ($5) | 0);
            $25 = (($$02028$us) + 1) | 0;
            $exitcond31 = ($25 | 0) == ($7 | 0);
            if ($exitcond31) {
                break;
            } else {
                $$02028$us = $25; $$02127$us = $22; $$02226$us = $23; $$02325$us = $24;
            }
        }
        return;
    }
    function __ZN10WelsCommon10McChroma_cEPKhiPhissii($0, $1, $2, $3, $4, $5, $6, $7) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        var $$01011$i$i = 0, $$01011$i21$i = 0, $$01011$i26$i = 0, $$01114$i$i = 0, $$01213$i$i = 0, $$013$i$i = 0, $$013$i19$i = 0, $$013$i24$i = 0, $$015$i$i = 0, $$04756$us$i = 0, $$04756$us$pn$i = 0, $$04854$us$i = 0, $$04953$us$i = 0, $$05051$us$i = 0, $$0912$i$i = 0, $$0912$i20$i = 0, $$0912$i25$i = 0, $10 = 0, $100 = 0, $101 = 0;
        var $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
        var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i17$i = 0, $exitcond$i22$i = 0, $exitcond$i27$i = 0, $exitcond59$i = 0;
        var $or$cond$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $8 = $5 | $4;
        $9 = $8 & 7;
        $10 = ($9 << 16 >> 16) == (0);
        if (!($10)) {
            $61 = $5 & 7;
            $62 = $61 & 65535;
            $63 = $4 & 7;
            $64 = $63 & 65535;
            $65 = ((15055 + ($62 << 5) | 0) + ($64 << 2) | 0);
            $66 = HEAP8[$65 >> 0] | 0;
            $67 = $66 & 255;
            $68 = ((((15055 + ($62 << 5) | 0) + ($64 << 2) | 0)) + 1 | 0);
            $69 = HEAP8[$68 >> 0] | 0;
            $70 = $69 & 255;
            $71 = ((((15055 + ($62 << 5) | 0) + ($64 << 2) | 0)) + 2 | 0);
            $72 = HEAP8[$71 >> 0] | 0;
            $73 = $72 & 255;
            $74 = ((((15055 + ($62 << 5) | 0) + ($64 << 2) | 0)) + 3 | 0);
            $75 = HEAP8[$74 >> 0] | 0;
            $76 = $75 & 255;
            $77 = ($7 | 0) > (0);
            $78 = ($6 | 0) > (0);
            $or$cond$i = $78 & $77;
            if ($or$cond$i) {
                $$04756$us$pn$i = $0; $$04854$us$i = $2; $$04953$us$i = 0;
            } else {
                return;
            }
            while (1) {
                $$04756$us$i = (($$04756$us$pn$i) + ($1) | 0);
                $$05051$us$i = 0;
                while (1) {
                    $79 = (($$04756$us$pn$i) + ($$05051$us$i) | 0);
                    $80 = HEAP8[$79 >> 0] | 0;
                    $81 = $80 & 255;
                    $82 = Math_imul($81, $67) | 0;
                    $83 = (($$05051$us$i) + 1) | 0;
                    $84 = (($$04756$us$pn$i) + ($83) | 0);
                    $85 = HEAP8[$84 >> 0] | 0;
                    $86 = $85 & 255;
                    $87 = Math_imul($86, $70) | 0;
                    $88 = (($$04756$us$i) + ($$05051$us$i) | 0);
                    $89 = HEAP8[$88 >> 0] | 0;
                    $90 = $89 & 255;
                    $91 = Math_imul($90, $73) | 0;
                    $92 = (($$04756$us$i) + ($83) | 0);
                    $93 = HEAP8[$92 >> 0] | 0;
                    $94 = $93 & 255;
                    $95 = Math_imul($94, $76) | 0;
                    $96 = (($82) + 32) | 0;
                    $97 = (($96) + ($87)) | 0;
                    $98 = (($97) + ($91)) | 0;
                    $99 = (($98) + ($95)) | 0;
                    $100 = $99 >>> 6;
                    $101 = $100 & 255;
                    $102 = (($$04854$us$i) + ($$05051$us$i) | 0);
                    HEAP8[$102 >> 0] = $101;
                    $exitcond$i = ($83 | 0) == ($6 | 0);
                    if ($exitcond$i) {
                        break;
                    } else {
                        $$05051$us$i = $83;
                    }
                }
                $103 = (($$04854$us$i) + ($3) | 0);
                $104 = (($$04953$us$i) + 1) | 0;
                $exitcond59$i = ($104 | 0) == ($7 | 0);
                if ($exitcond59$i) {
                    break;
                } else {
                    $$04756$us$pn$i = $$04756$us$i; $$04854$us$i = $103; $$04953$us$i = $104;
                }
            }
            return;
        }
        switch ($6 | 0) {
            case 16: {
                $11 = ($7 | 0) > (0);
                if ($11) {
                    $$01114$i$i = $0; $$01213$i$i = $2; $$015$i$i = 0;
                } else {
                    return;
                }
                while (1) {
                    $12 = $$01114$i$i;
                    $13 = $12;
                    $14 = HEAPU8[$13 >> 0] | (HEAPU8[$13 + 1 >> 0] << 8) | (HEAPU8[$13 + 2 >> 0] << 16) | (HEAPU8[$13 + 3 >> 0] << 24);
                    $15 = (($12) + 4) | 0;
                    $16 = $15;
                    $17 = HEAPU8[$16 >> 0] | (HEAPU8[$16 + 1 >> 0] << 8) | (HEAPU8[$16 + 2 >> 0] << 16) | (HEAPU8[$16 + 3 >> 0] << 24);
                    $18 = $$01213$i$i;
                    $19 = $18;
                    HEAP32[$19 >> 2] = $14;
                    $20 = (($18) + 4) | 0;
                    $21 = $20;
                    HEAP32[$21 >> 2] = $17;
                    $22 = ((($$01114$i$i)) + 8 | 0);
                    $23 = $22;
                    $24 = $23;
                    $25 = HEAPU8[$24 >> 0] | (HEAPU8[$24 + 1 >> 0] << 8) | (HEAPU8[$24 + 2 >> 0] << 16) | (HEAPU8[$24 + 3 >> 0] << 24);
                    $26 = (($23) + 4) | 0;
                    $27 = $26;
                    $28 = HEAPU8[$27 >> 0] | (HEAPU8[$27 + 1 >> 0] << 8) | (HEAPU8[$27 + 2 >> 0] << 16) | (HEAPU8[$27 + 3 >> 0] << 24);
                    $29 = ((($$01213$i$i)) + 8 | 0);
                    $30 = $29;
                    $31 = $30;
                    HEAP32[$31 >> 2] = $25;
                    $32 = (($30) + 4) | 0;
                    $33 = $32;
                    HEAP32[$33 >> 2] = $28;
                    $34 = (($$01213$i$i) + ($3) | 0);
                    $35 = (($$01114$i$i) + ($1) | 0);
                    $36 = (($$015$i$i) + 1) | 0;
                    $exitcond$i$i = ($36 | 0) == ($7 | 0);
                    if ($exitcond$i$i) {
                        break;
                    } else {
                        $$01114$i$i = $35; $$01213$i$i = $34; $$015$i$i = $36;
                    }
                }
                return;
                break;
            }
            case 8: {
                $37 = ($7 | 0) > (0);
                if ($37) {
                    $$01011$i26$i = $2; $$013$i24$i = 0; $$0912$i25$i = $0;
                } else {
                    return;
                }
                while (1) {
                    $38 = $$0912$i25$i;
                    $39 = $38;
                    $40 = HEAPU8[$39 >> 0] | (HEAPU8[$39 + 1 >> 0] << 8) | (HEAPU8[$39 + 2 >> 0] << 16) | (HEAPU8[$39 + 3 >> 0] << 24);
                    $41 = (($38) + 4) | 0;
                    $42 = $41;
                    $43 = HEAPU8[$42 >> 0] | (HEAPU8[$42 + 1 >> 0] << 8) | (HEAPU8[$42 + 2 >> 0] << 16) | (HEAPU8[$42 + 3 >> 0] << 24);
                    $44 = $$01011$i26$i;
                    $45 = $44;
                    HEAP32[$45 >> 2] = $40;
                    $46 = (($44) + 4) | 0;
                    $47 = $46;
                    HEAP32[$47 >> 2] = $43;
                    $48 = (($$01011$i26$i) + ($3) | 0);
                    $49 = (($$0912$i25$i) + ($1) | 0);
                    $50 = (($$013$i24$i) + 1) | 0;
                    $exitcond$i27$i = ($50 | 0) == ($7 | 0);
                    if ($exitcond$i27$i) {
                        break;
                    } else {
                        $$01011$i26$i = $48; $$013$i24$i = $50; $$0912$i25$i = $49;
                    }
                }
                return;
                break;
            }
            case 4: {
                $51 = ($7 | 0) > (0);
                if ($51) {
                    $$01011$i21$i = $2; $$013$i19$i = 0; $$0912$i20$i = $0;
                } else {
                    return;
                }
                while (1) {
                    $52 = HEAPU8[$$0912$i20$i >> 0] | (HEAPU8[$$0912$i20$i + 1 >> 0] << 8) | (HEAPU8[$$0912$i20$i + 2 >> 0] << 16) | (HEAPU8[$$0912$i20$i + 3 >> 0] << 24);
                    HEAP32[$$01011$i21$i >> 2] = $52;
                    $53 = (($$01011$i21$i) + ($3) | 0);
                    $54 = (($$0912$i20$i) + ($1) | 0);
                    $55 = (($$013$i19$i) + 1) | 0;
                    $exitcond$i22$i = ($55 | 0) == ($7 | 0);
                    if ($exitcond$i22$i) {
                        break;
                    } else {
                        $$01011$i21$i = $53; $$013$i19$i = $55; $$0912$i20$i = $54;
                    }
                }
                return;
                break;
            }
            default: {
                $56 = ($7 | 0) > (0);
                if ($56) {
                    $$01011$i$i = $2; $$013$i$i = 0; $$0912$i$i = $0;
                } else {
                    return;
                }
                while (1) {
                    $57 = HEAPU8[$$0912$i$i >> 0] | (HEAPU8[$$0912$i$i + 1 >> 0] << 8);
                    HEAP16[$$01011$i$i >> 1] = $57;
                    $58 = (($$01011$i$i) + ($3) | 0);
                    $59 = (($$0912$i$i) + ($1) | 0);
                    $60 = (($$013$i$i) + 1) | 0;
                    $exitcond$i17$i = ($60 | 0) == ($7 | 0);
                    if ($exitcond$i17$i) {
                        break;
                    } else {
                        $$01011$i$i = $58; $$013$i$i = $60; $$0912$i$i = $59;
                    }
                }
                return;
            }
        }
    }
    function __ZN10WelsCommon8McLuma_cEPKhiPhissii($0, $1, $2, $3, $4, $5, $6, $7) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $8 = $4 & 3;
        $9 = $8 & 65535;
        $10 = $5 & 3;
        $11 = $10 & 65535;
        $12 = ((9160 + ($9 << 4) | 0) + ($11 << 2) | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        FUNCTION_TABLE_viiiiii[$13 & 31]($0, $1, $2, $3, $6, $7);
        return;
    }
    function __ZN10WelsCommonL8McCopy_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01011$i = 0, $$01011$i21 = 0, $$01011$i26 = 0, $$01114$i = 0, $$01213$i = 0, $$013$i = 0, $$013$i19 = 0, $$013$i24 = 0, $$015$i = 0, $$0912$i = 0, $$0912$i20 = 0, $$0912$i25 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
        var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
        var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0;
        var $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i17 = 0, $exitcond$i22 = 0, $exitcond$i27 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        switch ($4 | 0) {
            case 16: {
                $6 = ($5 | 0) > (0);
                if ($6) {
                    $$01114$i = $0; $$01213$i = $2; $$015$i = 0;
                } else {
                    return;
                }
                while (1) {
                    $7 = $$01114$i;
                    $8 = $7;
                    $9 = HEAPU8[$8 >> 0] | (HEAPU8[$8 + 1 >> 0] << 8) | (HEAPU8[$8 + 2 >> 0] << 16) | (HEAPU8[$8 + 3 >> 0] << 24);
                    $10 = (($7) + 4) | 0;
                    $11 = $10;
                    $12 = HEAPU8[$11 >> 0] | (HEAPU8[$11 + 1 >> 0] << 8) | (HEAPU8[$11 + 2 >> 0] << 16) | (HEAPU8[$11 + 3 >> 0] << 24);
                    $13 = $$01213$i;
                    $14 = $13;
                    HEAP32[$14 >> 2] = $9;
                    $15 = (($13) + 4) | 0;
                    $16 = $15;
                    HEAP32[$16 >> 2] = $12;
                    $17 = ((($$01114$i)) + 8 | 0);
                    $18 = $17;
                    $19 = $18;
                    $20 = HEAPU8[$19 >> 0] | (HEAPU8[$19 + 1 >> 0] << 8) | (HEAPU8[$19 + 2 >> 0] << 16) | (HEAPU8[$19 + 3 >> 0] << 24);
                    $21 = (($18) + 4) | 0;
                    $22 = $21;
                    $23 = HEAPU8[$22 >> 0] | (HEAPU8[$22 + 1 >> 0] << 8) | (HEAPU8[$22 + 2 >> 0] << 16) | (HEAPU8[$22 + 3 >> 0] << 24);
                    $24 = ((($$01213$i)) + 8 | 0);
                    $25 = $24;
                    $26 = $25;
                    HEAP32[$26 >> 2] = $20;
                    $27 = (($25) + 4) | 0;
                    $28 = $27;
                    HEAP32[$28 >> 2] = $23;
                    $29 = (($$01213$i) + ($3) | 0);
                    $30 = (($$01114$i) + ($1) | 0);
                    $31 = (($$015$i) + 1) | 0;
                    $exitcond$i = ($31 | 0) == ($5 | 0);
                    if ($exitcond$i) {
                        break;
                    } else {
                        $$01114$i = $30; $$01213$i = $29; $$015$i = $31;
                    }
                }
                return;
                break;
            }
            case 8: {
                $32 = ($5 | 0) > (0);
                if ($32) {
                    $$01011$i26 = $2; $$013$i24 = 0; $$0912$i25 = $0;
                } else {
                    return;
                }
                while (1) {
                    $33 = $$0912$i25;
                    $34 = $33;
                    $35 = HEAPU8[$34 >> 0] | (HEAPU8[$34 + 1 >> 0] << 8) | (HEAPU8[$34 + 2 >> 0] << 16) | (HEAPU8[$34 + 3 >> 0] << 24);
                    $36 = (($33) + 4) | 0;
                    $37 = $36;
                    $38 = HEAPU8[$37 >> 0] | (HEAPU8[$37 + 1 >> 0] << 8) | (HEAPU8[$37 + 2 >> 0] << 16) | (HEAPU8[$37 + 3 >> 0] << 24);
                    $39 = $$01011$i26;
                    $40 = $39;
                    HEAP32[$40 >> 2] = $35;
                    $41 = (($39) + 4) | 0;
                    $42 = $41;
                    HEAP32[$42 >> 2] = $38;
                    $43 = (($$01011$i26) + ($3) | 0);
                    $44 = (($$0912$i25) + ($1) | 0);
                    $45 = (($$013$i24) + 1) | 0;
                    $exitcond$i27 = ($45 | 0) == ($5 | 0);
                    if ($exitcond$i27) {
                        break;
                    } else {
                        $$01011$i26 = $43; $$013$i24 = $45; $$0912$i25 = $44;
                    }
                }
                return;
                break;
            }
            case 4: {
                $46 = ($5 | 0) > (0);
                if ($46) {
                    $$01011$i21 = $2; $$013$i19 = 0; $$0912$i20 = $0;
                } else {
                    return;
                }
                while (1) {
                    $47 = HEAPU8[$$0912$i20 >> 0] | (HEAPU8[$$0912$i20 + 1 >> 0] << 8) | (HEAPU8[$$0912$i20 + 2 >> 0] << 16) | (HEAPU8[$$0912$i20 + 3 >> 0] << 24);
                    HEAP32[$$01011$i21 >> 2] = $47;
                    $48 = (($$01011$i21) + ($3) | 0);
                    $49 = (($$0912$i20) + ($1) | 0);
                    $50 = (($$013$i19) + 1) | 0;
                    $exitcond$i22 = ($50 | 0) == ($5 | 0);
                    if ($exitcond$i22) {
                        break;
                    } else {
                        $$01011$i21 = $48; $$013$i19 = $50; $$0912$i20 = $49;
                    }
                }
                return;
                break;
            }
            default: {
                $51 = ($5 | 0) > (0);
                if ($51) {
                    $$01011$i = $2; $$013$i = 0; $$0912$i = $0;
                } else {
                    return;
                }
                while (1) {
                    $52 = HEAPU8[$$0912$i >> 0] | (HEAPU8[$$0912$i + 1 >> 0] << 8);
                    HEAP16[$$01011$i >> 1] = $52;
                    $53 = (($$01011$i) + ($3) | 0);
                    $54 = (($$0912$i) + ($1) | 0);
                    $55 = (($$013$i) + 1) | 0;
                    $exitcond$i17 = ($55 | 0) == ($5 | 0);
                    if ($exitcond$i17) {
                        break;
                    } else {
                        $$01011$i = $53; $$013$i = $55; $$0912$i = $54;
                    }
                }
                return;
            }
        }
    }
    function __ZN10WelsCommonL12McHorVer01_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01723$us$i = 0, $$01822$us$i = 0, $$01921$us$i = 0, $$020$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i10 = 0, $exitcond26$i = 0, $exitcond31$i = 0, $tmp30$i$us$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 256 | 0;
        $6 = sp;
        $7 = ($5 | 0) > (0);
        if (!($7)) {
            STACKTOP = sp; return;
        }
        $8 = ($4 | 0) > (0);
        $9 = $1 << 1;
        $10 = ($1 * 3) | 0;
        $11 = (0 - ($9)) | 0;
        $12 = (0 - ($1)) | 0;
        if ($8) {
            $$01723$us$i = 0; $$01822$us$i = $0; $$01921$us$i = $6;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $$020$us$i = 0;
            while (1) {
                $13 = (($$01822$us$i) + ($$020$us$i) | 0);
                $14 = (($13) + ($11) | 0);
                $15 = HEAP8[$14 >> 0] | 0;
                $16 = $15 & 255;
                $17 = (($13) + ($10) | 0);
                $18 = HEAP8[$17 >> 0] | 0;
                $19 = $18 & 255;
                $20 = (($13) + ($12) | 0);
                $21 = HEAP8[$20 >> 0] | 0;
                $22 = $21 & 255;
                $23 = (($13) + ($9) | 0);
                $24 = HEAP8[$23 >> 0] | 0;
                $25 = $24 & 255;
                $26 = (($25) + ($22)) | 0;
                $27 = HEAP8[$13 >> 0] | 0;
                $28 = $27 & 255;
                $29 = (($13) + ($1) | 0);
                $30 = HEAP8[$29 >> 0] | 0;
                $31 = $30 & 255;
                $32 = (($31) + ($28)) | 0;
                $33 = Math_imul($26, -5) | 0;
                $tmp30$i$us$i = ($32 * 20) | 0;
                $34 = (($16) + 16) | 0;
                $35 = (($34) + ($19)) | 0;
                $36 = (($35) + ($33)) | 0;
                $37 = (($36) + ($tmp30$i$us$i)) | 0;
                $38 = $37 >> 5;
                $39 = ($38 >>> 0) > (255);
                $40 = (0 - ($38)) | 0;
                $41 = $40 >> 31;
                $42 = $39 ? $41 : $38;
                $43 = $42 & 255;
                $44 = (($$01921$us$i) + ($$020$us$i) | 0);
                HEAP8[$44 >> 0] = $43;
                $45 = (($$020$us$i) + 1) | 0;
                $exitcond$i = ($45 | 0) == ($4 | 0);
                if ($exitcond$i) {
                    break;
                } else {
                    $$020$us$i = $45;
                }
            }
            $46 = ((($$01921$us$i)) + 16 | 0);
            $47 = (($$01822$us$i) + ($1) | 0);
            $48 = (($$01723$us$i) + 1) | 0;
            $exitcond26$i = ($48 | 0) == ($5 | 0);
            if ($exitcond26$i) {
                $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $0; $$02325$us$i = $6;
                break;
            } else {
                $$01723$us$i = $48; $$01822$us$i = $47; $$01921$us$i = $46;
            }
        }
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $49 = (($$02226$us$i) + ($$024$us$i) | 0);
                $50 = HEAP8[$49 >> 0] | 0;
                $51 = $50 & 255;
                $52 = (($$02325$us$i) + ($$024$us$i) | 0);
                $53 = HEAP8[$52 >> 0] | 0;
                $54 = $53 & 255;
                $55 = (($51) + 1) | 0;
                $56 = (($55) + ($54)) | 0;
                $57 = $56 >>> 1;
                $58 = $57 & 255;
                $59 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$59 >> 0] = $58;
                $60 = (($$024$us$i) + 1) | 0;
                $exitcond$i10 = ($60 | 0) == ($4 | 0);
                if ($exitcond$i10) {
                    break;
                } else {
                    $$024$us$i = $60;
                }
            }
            $61 = (($$02127$us$i) + ($3) | 0);
            $62 = (($$02226$us$i) + ($1) | 0);
            $63 = ((($$02325$us$i)) + 16 | 0);
            $64 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($64 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $64; $$02127$us$i = $61; $$02226$us$i = $62; $$02325$us$i = $63;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer03_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01723$us$i = 0, $$01822$us$i = 0, $$01921$us$i = 0, $$020$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02226$us$i$pn = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
        var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
        var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
        var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i11 = 0, $exitcond26$i = 0, $exitcond31$i = 0, $tmp30$i$us$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 256 | 0;
        $6 = sp;
        $7 = ($5 | 0) > (0);
        if (!($7)) {
            STACKTOP = sp; return;
        }
        $8 = ($4 | 0) > (0);
        $9 = $1 << 1;
        $10 = ($1 * 3) | 0;
        $11 = (0 - ($9)) | 0;
        $12 = (0 - ($1)) | 0;
        if ($8) {
            $$01723$us$i = 0; $$01822$us$i = $0; $$01921$us$i = $6;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $$020$us$i = 0;
            while (1) {
                $13 = (($$01822$us$i) + ($$020$us$i) | 0);
                $14 = (($13) + ($11) | 0);
                $15 = HEAP8[$14 >> 0] | 0;
                $16 = $15 & 255;
                $17 = (($13) + ($10) | 0);
                $18 = HEAP8[$17 >> 0] | 0;
                $19 = $18 & 255;
                $20 = (($13) + ($12) | 0);
                $21 = HEAP8[$20 >> 0] | 0;
                $22 = $21 & 255;
                $23 = (($13) + ($9) | 0);
                $24 = HEAP8[$23 >> 0] | 0;
                $25 = $24 & 255;
                $26 = (($25) + ($22)) | 0;
                $27 = HEAP8[$13 >> 0] | 0;
                $28 = $27 & 255;
                $29 = (($13) + ($1) | 0);
                $30 = HEAP8[$29 >> 0] | 0;
                $31 = $30 & 255;
                $32 = (($31) + ($28)) | 0;
                $33 = Math_imul($26, -5) | 0;
                $tmp30$i$us$i = ($32 * 20) | 0;
                $34 = (($16) + 16) | 0;
                $35 = (($34) + ($19)) | 0;
                $36 = (($35) + ($33)) | 0;
                $37 = (($36) + ($tmp30$i$us$i)) | 0;
                $38 = $37 >> 5;
                $39 = ($38 >>> 0) > (255);
                $40 = (0 - ($38)) | 0;
                $41 = $40 >> 31;
                $42 = $39 ? $41 : $38;
                $43 = $42 & 255;
                $44 = (($$01921$us$i) + ($$020$us$i) | 0);
                HEAP8[$44 >> 0] = $43;
                $45 = (($$020$us$i) + 1) | 0;
                $exitcond$i = ($45 | 0) == ($4 | 0);
                if ($exitcond$i) {
                    break;
                } else {
                    $$020$us$i = $45;
                }
            }
            $46 = ((($$01921$us$i)) + 16 | 0);
            $47 = (($$01822$us$i) + ($1) | 0);
            $48 = (($$01723$us$i) + 1) | 0;
            $exitcond26$i = ($48 | 0) == ($5 | 0);
            if ($exitcond26$i) {
                $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i$pn = $0; $$02325$us$i = $6;
                break;
            } else {
                $$01723$us$i = $48; $$01822$us$i = $47; $$01921$us$i = $46;
            }
        }
        while (1) {
            $$02226$us$i = (($$02226$us$i$pn) + ($1) | 0);
            $$024$us$i = 0;
            while (1) {
                $49 = (($$02226$us$i) + ($$024$us$i) | 0);
                $50 = HEAP8[$49 >> 0] | 0;
                $51 = $50 & 255;
                $52 = (($$02325$us$i) + ($$024$us$i) | 0);
                $53 = HEAP8[$52 >> 0] | 0;
                $54 = $53 & 255;
                $55 = (($51) + 1) | 0;
                $56 = (($55) + ($54)) | 0;
                $57 = $56 >>> 1;
                $58 = $57 & 255;
                $59 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$59 >> 0] = $58;
                $60 = (($$024$us$i) + 1) | 0;
                $exitcond$i11 = ($60 | 0) == ($4 | 0);
                if ($exitcond$i11) {
                    break;
                } else {
                    $$024$us$i = $60;
                }
            }
            $61 = (($$02127$us$i) + ($3) | 0);
            $62 = ((($$02325$us$i)) + 16 | 0);
            $63 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($63 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $63; $$02127$us$i = $61; $$02226$us$i$pn = $$02226$us$i; $$02325$us$i = $62;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer10_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us$i = 0, $$01721$us$i = 0, $$01820$us$i = 0, $$019$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i11 = 0, $exitcond25$i = 0, $exitcond31$i = 0, $or$cond$i = 0, $tmp30$i$us$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 256 | 0;
        $6 = sp;
        $7 = ($5 | 0) > (0);
        $8 = ($4 | 0) > (0);
        $or$cond$i = $8 & $7;
        if ($or$cond$i) {
            $$01622$us$i = 0; $$01721$us$i = $0; $$01820$us$i = $6;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $$019$us$i = 0;
            while (1) {
                $9 = (($$01721$us$i) + ($$019$us$i) | 0);
                $10 = ((($9)) + -2 | 0);
                $11 = HEAP8[$10 >> 0] | 0;
                $12 = $11 & 255;
                $13 = ((($9)) + 3 | 0);
                $14 = HEAP8[$13 >> 0] | 0;
                $15 = $14 & 255;
                $16 = ((($9)) + -1 | 0);
                $17 = HEAP8[$16 >> 0] | 0;
                $18 = $17 & 255;
                $19 = ((($9)) + 2 | 0);
                $20 = HEAP8[$19 >> 0] | 0;
                $21 = $20 & 255;
                $22 = (($21) + ($18)) | 0;
                $23 = HEAP8[$9 >> 0] | 0;
                $24 = $23 & 255;
                $25 = ((($9)) + 1 | 0);
                $26 = HEAP8[$25 >> 0] | 0;
                $27 = $26 & 255;
                $28 = (($27) + ($24)) | 0;
                $29 = Math_imul($22, -5) | 0;
                $tmp30$i$us$i = ($28 * 20) | 0;
                $30 = (($12) + 16) | 0;
                $31 = (($30) + ($15)) | 0;
                $32 = (($31) + ($29)) | 0;
                $33 = (($32) + ($tmp30$i$us$i)) | 0;
                $34 = $33 >> 5;
                $35 = ($34 >>> 0) > (255);
                $36 = (0 - ($34)) | 0;
                $37 = $36 >> 31;
                $38 = $35 ? $37 : $34;
                $39 = $38 & 255;
                $40 = (($$01820$us$i) + ($$019$us$i) | 0);
                HEAP8[$40 >> 0] = $39;
                $41 = (($$019$us$i) + 1) | 0;
                $exitcond$i = ($41 | 0) == ($4 | 0);
                if ($exitcond$i) {
                    break;
                } else {
                    $$019$us$i = $41;
                }
            }
            $42 = ((($$01820$us$i)) + 16 | 0);
            $43 = (($$01721$us$i) + ($1) | 0);
            $44 = (($$01622$us$i) + 1) | 0;
            $exitcond25$i = ($44 | 0) == ($5 | 0);
            if ($exitcond25$i) {
                $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $0; $$02325$us$i = $6;
                break;
            } else {
                $$01622$us$i = $44; $$01721$us$i = $43; $$01820$us$i = $42;
            }
        }
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $45 = (($$02226$us$i) + ($$024$us$i) | 0);
                $46 = HEAP8[$45 >> 0] | 0;
                $47 = $46 & 255;
                $48 = (($$02325$us$i) + ($$024$us$i) | 0);
                $49 = HEAP8[$48 >> 0] | 0;
                $50 = $49 & 255;
                $51 = (($47) + 1) | 0;
                $52 = (($51) + ($50)) | 0;
                $53 = $52 >>> 1;
                $54 = $53 & 255;
                $55 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$55 >> 0] = $54;
                $56 = (($$024$us$i) + 1) | 0;
                $exitcond$i11 = ($56 | 0) == ($4 | 0);
                if ($exitcond$i11) {
                    break;
                } else {
                    $$024$us$i = $56;
                }
            }
            $57 = (($$02127$us$i) + ($3) | 0);
            $58 = (($$02226$us$i) + ($1) | 0);
            $59 = ((($$02325$us$i)) + 16 | 0);
            $60 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($60 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $60; $$02127$us$i = $57; $$02226$us$i = $58; $$02325$us$i = $59;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer11_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us$i = 0, $$01721$us$i = 0, $$01723$us$i = 0, $$01820$us$i = 0, $$01822$us$i = 0, $$019$us$i = 0, $$01921$us$i = 0, $$020$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
        var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
        var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
        var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i13 = 0, $exitcond$i17 = 0, $exitcond25$i = 0, $exitcond26$i = 0, $exitcond31$i = 0, $or$cond$i = 0, $tmp30$i$us$i = 0, $tmp30$i$us$i16 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 512 | 0;
        $6 = sp + 256 | 0;
        $7 = sp;
        $8 = ($5 | 0) > (0);
        $9 = ($4 | 0) > (0);
        $or$cond$i = $9 & $8;
        if ($or$cond$i) {
            $$01622$us$i = 0; $$01721$us$i = $0; $$01820$us$i = $6;
            while (1) {
                $$019$us$i = 0;
                while (1) {
                    $10 = (($$01721$us$i) + ($$019$us$i) | 0);
                    $11 = ((($10)) + -2 | 0);
                    $12 = HEAP8[$11 >> 0] | 0;
                    $13 = $12 & 255;
                    $14 = ((($10)) + 3 | 0);
                    $15 = HEAP8[$14 >> 0] | 0;
                    $16 = $15 & 255;
                    $17 = ((($10)) + -1 | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    $20 = ((($10)) + 2 | 0);
                    $21 = HEAP8[$20 >> 0] | 0;
                    $22 = $21 & 255;
                    $23 = (($22) + ($19)) | 0;
                    $24 = HEAP8[$10 >> 0] | 0;
                    $25 = $24 & 255;
                    $26 = ((($10)) + 1 | 0);
                    $27 = HEAP8[$26 >> 0] | 0;
                    $28 = $27 & 255;
                    $29 = (($28) + ($25)) | 0;
                    $30 = Math_imul($23, -5) | 0;
                    $tmp30$i$us$i = ($29 * 20) | 0;
                    $31 = (($13) + 16) | 0;
                    $32 = (($31) + ($16)) | 0;
                    $33 = (($32) + ($30)) | 0;
                    $34 = (($33) + ($tmp30$i$us$i)) | 0;
                    $35 = $34 >> 5;
                    $36 = ($35 >>> 0) > (255);
                    $37 = (0 - ($35)) | 0;
                    $38 = $37 >> 31;
                    $39 = $36 ? $38 : $35;
                    $40 = $39 & 255;
                    $41 = (($$01820$us$i) + ($$019$us$i) | 0);
                    HEAP8[$41 >> 0] = $40;
                    $42 = (($$019$us$i) + 1) | 0;
                    $exitcond$i = ($42 | 0) == ($4 | 0);
                    if ($exitcond$i) {
                        break;
                    } else {
                        $$019$us$i = $42;
                    }
                }
                $43 = ((($$01820$us$i)) + 16 | 0);
                $44 = (($$01721$us$i) + ($1) | 0);
                $45 = (($$01622$us$i) + 1) | 0;
                $exitcond25$i = ($45 | 0) == ($5 | 0);
                if ($exitcond25$i) {
                    break;
                } else {
                    $$01622$us$i = $45; $$01721$us$i = $44; $$01820$us$i = $43;
                }
            }
        }
        if ($8) {
            $46 = $1 << 1;
            $47 = ($1 * 3) | 0;
            $48 = (0 - ($46)) | 0;
            $49 = (0 - ($1)) | 0;
            if ($9) {
                $$01723$us$i = 0; $$01822$us$i = $0; $$01921$us$i = $7;
                while (1) {
                    $$020$us$i = 0;
                    while (1) {
                        $50 = (($$01822$us$i) + ($$020$us$i) | 0);
                        $51 = (($50) + ($48) | 0);
                        $52 = HEAP8[$51 >> 0] | 0;
                        $53 = $52 & 255;
                        $54 = (($50) + ($47) | 0);
                        $55 = HEAP8[$54 >> 0] | 0;
                        $56 = $55 & 255;
                        $57 = (($50) + ($49) | 0);
                        $58 = HEAP8[$57 >> 0] | 0;
                        $59 = $58 & 255;
                        $60 = (($50) + ($46) | 0);
                        $61 = HEAP8[$60 >> 0] | 0;
                        $62 = $61 & 255;
                        $63 = (($62) + ($59)) | 0;
                        $64 = HEAP8[$50 >> 0] | 0;
                        $65 = $64 & 255;
                        $66 = (($50) + ($1) | 0);
                        $67 = HEAP8[$66 >> 0] | 0;
                        $68 = $67 & 255;
                        $69 = (($68) + ($65)) | 0;
                        $70 = Math_imul($63, -5) | 0;
                        $tmp30$i$us$i16 = ($69 * 20) | 0;
                        $71 = (($53) + 16) | 0;
                        $72 = (($71) + ($56)) | 0;
                        $73 = (($72) + ($70)) | 0;
                        $74 = (($73) + ($tmp30$i$us$i16)) | 0;
                        $75 = $74 >> 5;
                        $76 = ($75 >>> 0) > (255);
                        $77 = (0 - ($75)) | 0;
                        $78 = $77 >> 31;
                        $79 = $76 ? $78 : $75;
                        $80 = $79 & 255;
                        $81 = (($$01921$us$i) + ($$020$us$i) | 0);
                        HEAP8[$81 >> 0] = $80;
                        $82 = (($$020$us$i) + 1) | 0;
                        $exitcond$i17 = ($82 | 0) == ($4 | 0);
                        if ($exitcond$i17) {
                            break;
                        } else {
                            $$020$us$i = $82;
                        }
                    }
                    $83 = ((($$01921$us$i)) + 16 | 0);
                    $84 = (($$01822$us$i) + ($1) | 0);
                    $85 = (($$01723$us$i) + 1) | 0;
                    $exitcond26$i = ($85 | 0) == ($5 | 0);
                    if ($exitcond26$i) {
                        break;
                    } else {
                        $$01723$us$i = $85; $$01822$us$i = $84; $$01921$us$i = $83;
                    }
                }
            }
        }
        if ($or$cond$i) {
            $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $6; $$02325$us$i = $7;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $86 = (($$02226$us$i) + ($$024$us$i) | 0);
                $87 = HEAP8[$86 >> 0] | 0;
                $88 = $87 & 255;
                $89 = (($$02325$us$i) + ($$024$us$i) | 0);
                $90 = HEAP8[$89 >> 0] | 0;
                $91 = $90 & 255;
                $92 = (($88) + 1) | 0;
                $93 = (($92) + ($91)) | 0;
                $94 = $93 >>> 1;
                $95 = $94 & 255;
                $96 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$96 >> 0] = $95;
                $97 = (($$024$us$i) + 1) | 0;
                $exitcond$i13 = ($97 | 0) == ($4 | 0);
                if ($exitcond$i13) {
                    break;
                } else {
                    $$024$us$i = $97;
                }
            }
            $98 = (($$02127$us$i) + ($3) | 0);
            $99 = ((($$02226$us$i)) + 16 | 0);
            $100 = ((($$02325$us$i)) + 16 | 0);
            $101 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($101 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $101; $$02127$us$i = $98; $$02226$us$i = $99; $$02325$us$i = $100;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer12_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01723$us$i = 0, $$01822$us$i = 0, $$01921$us$i = 0, $$020$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond26$i = 0, $exitcond31$i = 0, $tmp30$i$us$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 512 | 0;
        $6 = sp + 256 | 0;
        $7 = sp;
        $8 = ($5 | 0) > (0);
        if ($8) {
            $9 = ($4 | 0) > (0);
            $10 = $1 << 1;
            $11 = ($1 * 3) | 0;
            $12 = (0 - ($10)) | 0;
            $13 = (0 - ($1)) | 0;
            if ($9) {
                $$01723$us$i = 0; $$01822$us$i = $0; $$01921$us$i = $6;
                while (1) {
                    $$020$us$i = 0;
                    while (1) {
                        $14 = (($$01822$us$i) + ($$020$us$i) | 0);
                        $15 = (($14) + ($12) | 0);
                        $16 = HEAP8[$15 >> 0] | 0;
                        $17 = $16 & 255;
                        $18 = (($14) + ($11) | 0);
                        $19 = HEAP8[$18 >> 0] | 0;
                        $20 = $19 & 255;
                        $21 = (($14) + ($13) | 0);
                        $22 = HEAP8[$21 >> 0] | 0;
                        $23 = $22 & 255;
                        $24 = (($14) + ($10) | 0);
                        $25 = HEAP8[$24 >> 0] | 0;
                        $26 = $25 & 255;
                        $27 = (($26) + ($23)) | 0;
                        $28 = HEAP8[$14 >> 0] | 0;
                        $29 = $28 & 255;
                        $30 = (($14) + ($1) | 0);
                        $31 = HEAP8[$30 >> 0] | 0;
                        $32 = $31 & 255;
                        $33 = (($32) + ($29)) | 0;
                        $34 = Math_imul($27, -5) | 0;
                        $tmp30$i$us$i = ($33 * 20) | 0;
                        $35 = (($17) + 16) | 0;
                        $36 = (($35) + ($20)) | 0;
                        $37 = (($36) + ($34)) | 0;
                        $38 = (($37) + ($tmp30$i$us$i)) | 0;
                        $39 = $38 >> 5;
                        $40 = ($39 >>> 0) > (255);
                        $41 = (0 - ($39)) | 0;
                        $42 = $41 >> 31;
                        $43 = $40 ? $42 : $39;
                        $44 = $43 & 255;
                        $45 = (($$01921$us$i) + ($$020$us$i) | 0);
                        HEAP8[$45 >> 0] = $44;
                        $46 = (($$020$us$i) + 1) | 0;
                        $exitcond$i = ($46 | 0) == ($4 | 0);
                        if ($exitcond$i) {
                            break;
                        } else {
                            $$020$us$i = $46;
                        }
                    }
                    $47 = ((($$01921$us$i)) + 16 | 0);
                    $48 = (($$01822$us$i) + ($1) | 0);
                    $49 = (($$01723$us$i) + 1) | 0;
                    $exitcond26$i = ($49 | 0) == ($5 | 0);
                    if ($exitcond26$i) {
                        break;
                    } else {
                        $$01723$us$i = $49; $$01822$us$i = $48; $$01921$us$i = $47;
                    }
                }
                __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $7, 16, $4, $5);
                $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $6; $$02325$us$i = $7;
                while (1) {
                    $$024$us$i = 0;
                    while (1) {
                        $50 = (($$02226$us$i) + ($$024$us$i) | 0);
                        $51 = HEAP8[$50 >> 0] | 0;
                        $52 = $51 & 255;
                        $53 = (($$02325$us$i) + ($$024$us$i) | 0);
                        $54 = HEAP8[$53 >> 0] | 0;
                        $55 = $54 & 255;
                        $56 = (($52) + 1) | 0;
                        $57 = (($56) + ($55)) | 0;
                        $58 = $57 >>> 1;
                        $59 = $58 & 255;
                        $60 = (($$02127$us$i) + ($$024$us$i) | 0);
                        HEAP8[$60 >> 0] = $59;
                        $61 = (($$024$us$i) + 1) | 0;
                        $exitcond$i12 = ($61 | 0) == ($4 | 0);
                        if ($exitcond$i12) {
                            break;
                        } else {
                            $$024$us$i = $61;
                        }
                    }
                    $62 = (($$02127$us$i) + ($3) | 0);
                    $63 = ((($$02226$us$i)) + 16 | 0);
                    $64 = ((($$02325$us$i)) + 16 | 0);
                    $65 = (($$02028$us$i) + 1) | 0;
                    $exitcond31$i = ($65 | 0) == ($5 | 0);
                    if ($exitcond31$i) {
                        break;
                    } else {
                        $$02028$us$i = $65; $$02127$us$i = $62; $$02226$us$i = $63; $$02325$us$i = $64;
                    }
                }
                STACKTOP = sp; return;
            }
        }
        __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $7, 16, $4, $5);
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer13_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us$i = 0, $$01721$us$i = 0, $$01721$us$i$pn = 0, $$01723$us$i = 0, $$01820$us$i = 0, $$01822$us$i = 0, $$019$us$i = 0, $$01921$us$i = 0, $$020$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
        var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
        var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
        var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i14 = 0, $exitcond$i18 = 0, $exitcond25$i = 0, $exitcond26$i = 0, $exitcond31$i = 0, $or$cond$i = 0, $tmp30$i$us$i = 0, $tmp30$i$us$i17 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 512 | 0;
        $6 = sp + 256 | 0;
        $7 = sp;
        $8 = ($5 | 0) > (0);
        $9 = ($4 | 0) > (0);
        $or$cond$i = $9 & $8;
        if ($or$cond$i) {
            $$01622$us$i = 0; $$01721$us$i$pn = $0; $$01820$us$i = $6;
            while (1) {
                $$01721$us$i = (($$01721$us$i$pn) + ($1) | 0);
                $$019$us$i = 0;
                while (1) {
                    $10 = (($$01721$us$i) + ($$019$us$i) | 0);
                    $11 = ((($10)) + -2 | 0);
                    $12 = HEAP8[$11 >> 0] | 0;
                    $13 = $12 & 255;
                    $14 = ((($10)) + 3 | 0);
                    $15 = HEAP8[$14 >> 0] | 0;
                    $16 = $15 & 255;
                    $17 = ((($10)) + -1 | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    $20 = ((($10)) + 2 | 0);
                    $21 = HEAP8[$20 >> 0] | 0;
                    $22 = $21 & 255;
                    $23 = (($22) + ($19)) | 0;
                    $24 = HEAP8[$10 >> 0] | 0;
                    $25 = $24 & 255;
                    $26 = ((($10)) + 1 | 0);
                    $27 = HEAP8[$26 >> 0] | 0;
                    $28 = $27 & 255;
                    $29 = (($28) + ($25)) | 0;
                    $30 = Math_imul($23, -5) | 0;
                    $tmp30$i$us$i = ($29 * 20) | 0;
                    $31 = (($13) + 16) | 0;
                    $32 = (($31) + ($16)) | 0;
                    $33 = (($32) + ($30)) | 0;
                    $34 = (($33) + ($tmp30$i$us$i)) | 0;
                    $35 = $34 >> 5;
                    $36 = ($35 >>> 0) > (255);
                    $37 = (0 - ($35)) | 0;
                    $38 = $37 >> 31;
                    $39 = $36 ? $38 : $35;
                    $40 = $39 & 255;
                    $41 = (($$01820$us$i) + ($$019$us$i) | 0);
                    HEAP8[$41 >> 0] = $40;
                    $42 = (($$019$us$i) + 1) | 0;
                    $exitcond$i = ($42 | 0) == ($4 | 0);
                    if ($exitcond$i) {
                        break;
                    } else {
                        $$019$us$i = $42;
                    }
                }
                $43 = ((($$01820$us$i)) + 16 | 0);
                $44 = (($$01622$us$i) + 1) | 0;
                $exitcond25$i = ($44 | 0) == ($5 | 0);
                if ($exitcond25$i) {
                    break;
                } else {
                    $$01622$us$i = $44; $$01721$us$i$pn = $$01721$us$i; $$01820$us$i = $43;
                }
            }
        }
        if ($8) {
            $45 = $1 << 1;
            $46 = ($1 * 3) | 0;
            $47 = (0 - ($45)) | 0;
            $48 = (0 - ($1)) | 0;
            if ($9) {
                $$01723$us$i = 0; $$01822$us$i = $0; $$01921$us$i = $7;
                while (1) {
                    $$020$us$i = 0;
                    while (1) {
                        $49 = (($$01822$us$i) + ($$020$us$i) | 0);
                        $50 = (($49) + ($47) | 0);
                        $51 = HEAP8[$50 >> 0] | 0;
                        $52 = $51 & 255;
                        $53 = (($49) + ($46) | 0);
                        $54 = HEAP8[$53 >> 0] | 0;
                        $55 = $54 & 255;
                        $56 = (($49) + ($48) | 0);
                        $57 = HEAP8[$56 >> 0] | 0;
                        $58 = $57 & 255;
                        $59 = (($49) + ($45) | 0);
                        $60 = HEAP8[$59 >> 0] | 0;
                        $61 = $60 & 255;
                        $62 = (($61) + ($58)) | 0;
                        $63 = HEAP8[$49 >> 0] | 0;
                        $64 = $63 & 255;
                        $65 = (($49) + ($1) | 0);
                        $66 = HEAP8[$65 >> 0] | 0;
                        $67 = $66 & 255;
                        $68 = (($67) + ($64)) | 0;
                        $69 = Math_imul($62, -5) | 0;
                        $tmp30$i$us$i17 = ($68 * 20) | 0;
                        $70 = (($52) + 16) | 0;
                        $71 = (($70) + ($55)) | 0;
                        $72 = (($71) + ($69)) | 0;
                        $73 = (($72) + ($tmp30$i$us$i17)) | 0;
                        $74 = $73 >> 5;
                        $75 = ($74 >>> 0) > (255);
                        $76 = (0 - ($74)) | 0;
                        $77 = $76 >> 31;
                        $78 = $75 ? $77 : $74;
                        $79 = $78 & 255;
                        $80 = (($$01921$us$i) + ($$020$us$i) | 0);
                        HEAP8[$80 >> 0] = $79;
                        $81 = (($$020$us$i) + 1) | 0;
                        $exitcond$i18 = ($81 | 0) == ($4 | 0);
                        if ($exitcond$i18) {
                            break;
                        } else {
                            $$020$us$i = $81;
                        }
                    }
                    $82 = ((($$01921$us$i)) + 16 | 0);
                    $83 = (($$01822$us$i) + ($1) | 0);
                    $84 = (($$01723$us$i) + 1) | 0;
                    $exitcond26$i = ($84 | 0) == ($5 | 0);
                    if ($exitcond26$i) {
                        break;
                    } else {
                        $$01723$us$i = $84; $$01822$us$i = $83; $$01921$us$i = $82;
                    }
                }
            }
        }
        if ($or$cond$i) {
            $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $6; $$02325$us$i = $7;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $85 = (($$02226$us$i) + ($$024$us$i) | 0);
                $86 = HEAP8[$85 >> 0] | 0;
                $87 = $86 & 255;
                $88 = (($$02325$us$i) + ($$024$us$i) | 0);
                $89 = HEAP8[$88 >> 0] | 0;
                $90 = $89 & 255;
                $91 = (($87) + 1) | 0;
                $92 = (($91) + ($90)) | 0;
                $93 = $92 >>> 1;
                $94 = $93 & 255;
                $95 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$95 >> 0] = $94;
                $96 = (($$024$us$i) + 1) | 0;
                $exitcond$i14 = ($96 | 0) == ($4 | 0);
                if ($exitcond$i14) {
                    break;
                } else {
                    $$024$us$i = $96;
                }
            }
            $97 = (($$02127$us$i) + ($3) | 0);
            $98 = ((($$02226$us$i)) + 16 | 0);
            $99 = ((($$02325$us$i)) + 16 | 0);
            $100 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($100 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $100; $$02127$us$i = $97; $$02226$us$i = $98; $$02325$us$i = $99;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer21_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us$i = 0, $$01721$us$i = 0, $$01820$us$i = 0, $$019$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i13 = 0, $exitcond25$i = 0, $exitcond31$i = 0, $or$cond$i = 0, $tmp30$i$us$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 512 | 0;
        $6 = sp + 256 | 0;
        $7 = sp;
        $8 = ($5 | 0) > (0);
        $9 = ($4 | 0) > (0);
        $or$cond$i = $9 & $8;
        if ($or$cond$i) {
            $$01622$us$i = 0; $$01721$us$i = $0; $$01820$us$i = $6;
        } else {
            __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $7, 16, $4, $5);
            STACKTOP = sp; return;
        }
        while (1) {
            $$019$us$i = 0;
            while (1) {
                $10 = (($$01721$us$i) + ($$019$us$i) | 0);
                $11 = ((($10)) + -2 | 0);
                $12 = HEAP8[$11 >> 0] | 0;
                $13 = $12 & 255;
                $14 = ((($10)) + 3 | 0);
                $15 = HEAP8[$14 >> 0] | 0;
                $16 = $15 & 255;
                $17 = ((($10)) + -1 | 0);
                $18 = HEAP8[$17 >> 0] | 0;
                $19 = $18 & 255;
                $20 = ((($10)) + 2 | 0);
                $21 = HEAP8[$20 >> 0] | 0;
                $22 = $21 & 255;
                $23 = (($22) + ($19)) | 0;
                $24 = HEAP8[$10 >> 0] | 0;
                $25 = $24 & 255;
                $26 = ((($10)) + 1 | 0);
                $27 = HEAP8[$26 >> 0] | 0;
                $28 = $27 & 255;
                $29 = (($28) + ($25)) | 0;
                $30 = Math_imul($23, -5) | 0;
                $tmp30$i$us$i = ($29 * 20) | 0;
                $31 = (($13) + 16) | 0;
                $32 = (($31) + ($16)) | 0;
                $33 = (($32) + ($30)) | 0;
                $34 = (($33) + ($tmp30$i$us$i)) | 0;
                $35 = $34 >> 5;
                $36 = ($35 >>> 0) > (255);
                $37 = (0 - ($35)) | 0;
                $38 = $37 >> 31;
                $39 = $36 ? $38 : $35;
                $40 = $39 & 255;
                $41 = (($$01820$us$i) + ($$019$us$i) | 0);
                HEAP8[$41 >> 0] = $40;
                $42 = (($$019$us$i) + 1) | 0;
                $exitcond$i = ($42 | 0) == ($4 | 0);
                if ($exitcond$i) {
                    break;
                } else {
                    $$019$us$i = $42;
                }
            }
            $43 = ((($$01820$us$i)) + 16 | 0);
            $44 = (($$01721$us$i) + ($1) | 0);
            $45 = (($$01622$us$i) + 1) | 0;
            $exitcond25$i = ($45 | 0) == ($5 | 0);
            if ($exitcond25$i) {
                break;
            } else {
                $$01622$us$i = $45; $$01721$us$i = $44; $$01820$us$i = $43;
            }
        }
        __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $7, 16, $4, $5);
        $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $6; $$02325$us$i = $7;
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $46 = (($$02226$us$i) + ($$024$us$i) | 0);
                $47 = HEAP8[$46 >> 0] | 0;
                $48 = $47 & 255;
                $49 = (($$02325$us$i) + ($$024$us$i) | 0);
                $50 = HEAP8[$49 >> 0] | 0;
                $51 = $50 & 255;
                $52 = (($48) + 1) | 0;
                $53 = (($52) + ($51)) | 0;
                $54 = $53 >>> 1;
                $55 = $54 & 255;
                $56 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$56 >> 0] = $55;
                $57 = (($$024$us$i) + 1) | 0;
                $exitcond$i13 = ($57 | 0) == ($4 | 0);
                if ($exitcond$i13) {
                    break;
                } else {
                    $$024$us$i = $57;
                }
            }
            $58 = (($$02127$us$i) + ($3) | 0);
            $59 = ((($$02226$us$i)) + 16 | 0);
            $60 = ((($$02325$us$i)) + 16 | 0);
            $61 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($61 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $61; $$02127$us$i = $58; $$02226$us$i = $59; $$02325$us$i = $60;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer23_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us$i = 0, $$01721$us$i = 0, $$01721$us$i$pn = 0, $$01820$us$i = 0, $$019$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
        var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
        var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
        var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i14 = 0, $exitcond25$i = 0, $exitcond31$i = 0, $or$cond$i = 0, $tmp30$i$us$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 512 | 0;
        $6 = sp + 256 | 0;
        $7 = sp;
        $8 = ($5 | 0) > (0);
        $9 = ($4 | 0) > (0);
        $or$cond$i = $9 & $8;
        if ($or$cond$i) {
            $$01622$us$i = 0; $$01721$us$i$pn = $0; $$01820$us$i = $6;
        } else {
            __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $7, 16, $4, $5);
            STACKTOP = sp; return;
        }
        while (1) {
            $$01721$us$i = (($$01721$us$i$pn) + ($1) | 0);
            $$019$us$i = 0;
            while (1) {
                $10 = (($$01721$us$i) + ($$019$us$i) | 0);
                $11 = ((($10)) + -2 | 0);
                $12 = HEAP8[$11 >> 0] | 0;
                $13 = $12 & 255;
                $14 = ((($10)) + 3 | 0);
                $15 = HEAP8[$14 >> 0] | 0;
                $16 = $15 & 255;
                $17 = ((($10)) + -1 | 0);
                $18 = HEAP8[$17 >> 0] | 0;
                $19 = $18 & 255;
                $20 = ((($10)) + 2 | 0);
                $21 = HEAP8[$20 >> 0] | 0;
                $22 = $21 & 255;
                $23 = (($22) + ($19)) | 0;
                $24 = HEAP8[$10 >> 0] | 0;
                $25 = $24 & 255;
                $26 = ((($10)) + 1 | 0);
                $27 = HEAP8[$26 >> 0] | 0;
                $28 = $27 & 255;
                $29 = (($28) + ($25)) | 0;
                $30 = Math_imul($23, -5) | 0;
                $tmp30$i$us$i = ($29 * 20) | 0;
                $31 = (($13) + 16) | 0;
                $32 = (($31) + ($16)) | 0;
                $33 = (($32) + ($30)) | 0;
                $34 = (($33) + ($tmp30$i$us$i)) | 0;
                $35 = $34 >> 5;
                $36 = ($35 >>> 0) > (255);
                $37 = (0 - ($35)) | 0;
                $38 = $37 >> 31;
                $39 = $36 ? $38 : $35;
                $40 = $39 & 255;
                $41 = (($$01820$us$i) + ($$019$us$i) | 0);
                HEAP8[$41 >> 0] = $40;
                $42 = (($$019$us$i) + 1) | 0;
                $exitcond$i = ($42 | 0) == ($4 | 0);
                if ($exitcond$i) {
                    break;
                } else {
                    $$019$us$i = $42;
                }
            }
            $43 = ((($$01820$us$i)) + 16 | 0);
            $44 = (($$01622$us$i) + 1) | 0;
            $exitcond25$i = ($44 | 0) == ($5 | 0);
            if ($exitcond25$i) {
                break;
            } else {
                $$01622$us$i = $44; $$01721$us$i$pn = $$01721$us$i; $$01820$us$i = $43;
            }
        }
        __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $7, 16, $4, $5);
        $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $6; $$02325$us$i = $7;
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $45 = (($$02226$us$i) + ($$024$us$i) | 0);
                $46 = HEAP8[$45 >> 0] | 0;
                $47 = $46 & 255;
                $48 = (($$02325$us$i) + ($$024$us$i) | 0);
                $49 = HEAP8[$48 >> 0] | 0;
                $50 = $49 & 255;
                $51 = (($47) + 1) | 0;
                $52 = (($51) + ($50)) | 0;
                $53 = $52 >>> 1;
                $54 = $53 & 255;
                $55 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$55 >> 0] = $54;
                $56 = (($$024$us$i) + 1) | 0;
                $exitcond$i14 = ($56 | 0) == ($4 | 0);
                if ($exitcond$i14) {
                    break;
                } else {
                    $$024$us$i = $56;
                }
            }
            $57 = (($$02127$us$i) + ($3) | 0);
            $58 = ((($$02226$us$i)) + 16 | 0);
            $59 = ((($$02325$us$i)) + 16 | 0);
            $60 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($60 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $60; $$02127$us$i = $57; $$02226$us$i = $58; $$02325$us$i = $59;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer30_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us$i = 0, $$01721$us$i = 0, $$01820$us$i = 0, $$019$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i11 = 0, $exitcond25$i = 0, $exitcond31$i = 0, $or$cond$i = 0, $tmp30$i$us$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 256 | 0;
        $6 = sp;
        $7 = ($5 | 0) > (0);
        $8 = ($4 | 0) > (0);
        $or$cond$i = $8 & $7;
        if ($or$cond$i) {
            $$01622$us$i = 0; $$01721$us$i = $0; $$01820$us$i = $6;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $$019$us$i = 0;
            while (1) {
                $9 = (($$01721$us$i) + ($$019$us$i) | 0);
                $10 = ((($9)) + -2 | 0);
                $11 = HEAP8[$10 >> 0] | 0;
                $12 = $11 & 255;
                $13 = ((($9)) + 3 | 0);
                $14 = HEAP8[$13 >> 0] | 0;
                $15 = $14 & 255;
                $16 = ((($9)) + -1 | 0);
                $17 = HEAP8[$16 >> 0] | 0;
                $18 = $17 & 255;
                $19 = ((($9)) + 2 | 0);
                $20 = HEAP8[$19 >> 0] | 0;
                $21 = $20 & 255;
                $22 = (($21) + ($18)) | 0;
                $23 = HEAP8[$9 >> 0] | 0;
                $24 = $23 & 255;
                $25 = ((($9)) + 1 | 0);
                $26 = HEAP8[$25 >> 0] | 0;
                $27 = $26 & 255;
                $28 = (($27) + ($24)) | 0;
                $29 = Math_imul($22, -5) | 0;
                $tmp30$i$us$i = ($28 * 20) | 0;
                $30 = (($12) + 16) | 0;
                $31 = (($30) + ($15)) | 0;
                $32 = (($31) + ($29)) | 0;
                $33 = (($32) + ($tmp30$i$us$i)) | 0;
                $34 = $33 >> 5;
                $35 = ($34 >>> 0) > (255);
                $36 = (0 - ($34)) | 0;
                $37 = $36 >> 31;
                $38 = $35 ? $37 : $34;
                $39 = $38 & 255;
                $40 = (($$01820$us$i) + ($$019$us$i) | 0);
                HEAP8[$40 >> 0] = $39;
                $41 = (($$019$us$i) + 1) | 0;
                $exitcond$i = ($41 | 0) == ($4 | 0);
                if ($exitcond$i) {
                    break;
                } else {
                    $$019$us$i = $41;
                }
            }
            $42 = ((($$01820$us$i)) + 16 | 0);
            $43 = (($$01721$us$i) + ($1) | 0);
            $44 = (($$01622$us$i) + 1) | 0;
            $exitcond25$i = ($44 | 0) == ($5 | 0);
            if ($exitcond25$i) {
                break;
            } else {
                $$01622$us$i = $44; $$01721$us$i = $43; $$01820$us$i = $42;
            }
        }
        $45 = ((($0)) + 1 | 0);
        $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $45; $$02325$us$i = $6;
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $46 = (($$02226$us$i) + ($$024$us$i) | 0);
                $47 = HEAP8[$46 >> 0] | 0;
                $48 = $47 & 255;
                $49 = (($$02325$us$i) + ($$024$us$i) | 0);
                $50 = HEAP8[$49 >> 0] | 0;
                $51 = $50 & 255;
                $52 = (($48) + 1) | 0;
                $53 = (($52) + ($51)) | 0;
                $54 = $53 >>> 1;
                $55 = $54 & 255;
                $56 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$56 >> 0] = $55;
                $57 = (($$024$us$i) + 1) | 0;
                $exitcond$i11 = ($57 | 0) == ($4 | 0);
                if ($exitcond$i11) {
                    break;
                } else {
                    $$024$us$i = $57;
                }
            }
            $58 = (($$02127$us$i) + ($3) | 0);
            $59 = (($$02226$us$i) + ($1) | 0);
            $60 = ((($$02325$us$i)) + 16 | 0);
            $61 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($61 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $61; $$02127$us$i = $58; $$02226$us$i = $59; $$02325$us$i = $60;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer31_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us$i = 0, $$01721$us$i = 0, $$01723$us$i = 0, $$01820$us$i = 0, $$01822$us$i = 0, $$019$us$i = 0, $$01921$us$i = 0, $$020$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0;
        var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
        var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i13 = 0, $exitcond$i17 = 0, $exitcond25$i = 0, $exitcond26$i = 0, $exitcond31$i = 0, $or$cond$i = 0, $tmp30$i$us$i = 0, $tmp30$i$us$i16 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 512 | 0;
        $6 = sp + 256 | 0;
        $7 = sp;
        $8 = ($5 | 0) > (0);
        $9 = ($4 | 0) > (0);
        $or$cond$i = $9 & $8;
        if ($or$cond$i) {
            $$01622$us$i = 0; $$01721$us$i = $0; $$01820$us$i = $6;
            while (1) {
                $$019$us$i = 0;
                while (1) {
                    $10 = (($$01721$us$i) + ($$019$us$i) | 0);
                    $11 = ((($10)) + -2 | 0);
                    $12 = HEAP8[$11 >> 0] | 0;
                    $13 = $12 & 255;
                    $14 = ((($10)) + 3 | 0);
                    $15 = HEAP8[$14 >> 0] | 0;
                    $16 = $15 & 255;
                    $17 = ((($10)) + -1 | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    $20 = ((($10)) + 2 | 0);
                    $21 = HEAP8[$20 >> 0] | 0;
                    $22 = $21 & 255;
                    $23 = (($22) + ($19)) | 0;
                    $24 = HEAP8[$10 >> 0] | 0;
                    $25 = $24 & 255;
                    $26 = ((($10)) + 1 | 0);
                    $27 = HEAP8[$26 >> 0] | 0;
                    $28 = $27 & 255;
                    $29 = (($28) + ($25)) | 0;
                    $30 = Math_imul($23, -5) | 0;
                    $tmp30$i$us$i = ($29 * 20) | 0;
                    $31 = (($13) + 16) | 0;
                    $32 = (($31) + ($16)) | 0;
                    $33 = (($32) + ($30)) | 0;
                    $34 = (($33) + ($tmp30$i$us$i)) | 0;
                    $35 = $34 >> 5;
                    $36 = ($35 >>> 0) > (255);
                    $37 = (0 - ($35)) | 0;
                    $38 = $37 >> 31;
                    $39 = $36 ? $38 : $35;
                    $40 = $39 & 255;
                    $41 = (($$01820$us$i) + ($$019$us$i) | 0);
                    HEAP8[$41 >> 0] = $40;
                    $42 = (($$019$us$i) + 1) | 0;
                    $exitcond$i = ($42 | 0) == ($4 | 0);
                    if ($exitcond$i) {
                        break;
                    } else {
                        $$019$us$i = $42;
                    }
                }
                $43 = ((($$01820$us$i)) + 16 | 0);
                $44 = (($$01721$us$i) + ($1) | 0);
                $45 = (($$01622$us$i) + 1) | 0;
                $exitcond25$i = ($45 | 0) == ($5 | 0);
                if ($exitcond25$i) {
                    break;
                } else {
                    $$01622$us$i = $45; $$01721$us$i = $44; $$01820$us$i = $43;
                }
            }
        }
        if ($8) {
            $46 = $1 << 1;
            $47 = ($1 * 3) | 0;
            $48 = (0 - ($46)) | 0;
            $49 = (0 - ($1)) | 0;
            if ($9) {
                $50 = ((($0)) + 1 | 0);
                $$01723$us$i = 0; $$01822$us$i = $50; $$01921$us$i = $7;
                while (1) {
                    $$020$us$i = 0;
                    while (1) {
                        $51 = (($$01822$us$i) + ($$020$us$i) | 0);
                        $52 = (($51) + ($48) | 0);
                        $53 = HEAP8[$52 >> 0] | 0;
                        $54 = $53 & 255;
                        $55 = (($51) + ($47) | 0);
                        $56 = HEAP8[$55 >> 0] | 0;
                        $57 = $56 & 255;
                        $58 = (($51) + ($49) | 0);
                        $59 = HEAP8[$58 >> 0] | 0;
                        $60 = $59 & 255;
                        $61 = (($51) + ($46) | 0);
                        $62 = HEAP8[$61 >> 0] | 0;
                        $63 = $62 & 255;
                        $64 = (($63) + ($60)) | 0;
                        $65 = HEAP8[$51 >> 0] | 0;
                        $66 = $65 & 255;
                        $67 = (($51) + ($1) | 0);
                        $68 = HEAP8[$67 >> 0] | 0;
                        $69 = $68 & 255;
                        $70 = (($69) + ($66)) | 0;
                        $71 = Math_imul($64, -5) | 0;
                        $tmp30$i$us$i16 = ($70 * 20) | 0;
                        $72 = (($54) + 16) | 0;
                        $73 = (($72) + ($57)) | 0;
                        $74 = (($73) + ($71)) | 0;
                        $75 = (($74) + ($tmp30$i$us$i16)) | 0;
                        $76 = $75 >> 5;
                        $77 = ($76 >>> 0) > (255);
                        $78 = (0 - ($76)) | 0;
                        $79 = $78 >> 31;
                        $80 = $77 ? $79 : $76;
                        $81 = $80 & 255;
                        $82 = (($$01921$us$i) + ($$020$us$i) | 0);
                        HEAP8[$82 >> 0] = $81;
                        $83 = (($$020$us$i) + 1) | 0;
                        $exitcond$i17 = ($83 | 0) == ($4 | 0);
                        if ($exitcond$i17) {
                            break;
                        } else {
                            $$020$us$i = $83;
                        }
                    }
                    $84 = ((($$01921$us$i)) + 16 | 0);
                    $85 = (($$01822$us$i) + ($1) | 0);
                    $86 = (($$01723$us$i) + 1) | 0;
                    $exitcond26$i = ($86 | 0) == ($5 | 0);
                    if ($exitcond26$i) {
                        break;
                    } else {
                        $$01723$us$i = $86; $$01822$us$i = $85; $$01921$us$i = $84;
                    }
                }
            }
        }
        if ($or$cond$i) {
            $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $6; $$02325$us$i = $7;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $87 = (($$02226$us$i) + ($$024$us$i) | 0);
                $88 = HEAP8[$87 >> 0] | 0;
                $89 = $88 & 255;
                $90 = (($$02325$us$i) + ($$024$us$i) | 0);
                $91 = HEAP8[$90 >> 0] | 0;
                $92 = $91 & 255;
                $93 = (($89) + 1) | 0;
                $94 = (($93) + ($92)) | 0;
                $95 = $94 >>> 1;
                $96 = $95 & 255;
                $97 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$97 >> 0] = $96;
                $98 = (($$024$us$i) + 1) | 0;
                $exitcond$i13 = ($98 | 0) == ($4 | 0);
                if ($exitcond$i13) {
                    break;
                } else {
                    $$024$us$i = $98;
                }
            }
            $99 = (($$02127$us$i) + ($3) | 0);
            $100 = ((($$02226$us$i)) + 16 | 0);
            $101 = ((($$02325$us$i)) + 16 | 0);
            $102 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($102 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $102; $$02127$us$i = $99; $$02226$us$i = $100; $$02325$us$i = $101;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer32_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01723$us$i = 0, $$01822$us$i = 0, $$01921$us$i = 0, $$020$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i12 = 0, $exitcond26$i = 0, $exitcond31$i = 0, $tmp30$i$us$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 512 | 0;
        $6 = sp + 256 | 0;
        $7 = sp;
        $8 = ($5 | 0) > (0);
        if ($8) {
            $9 = ($4 | 0) > (0);
            $10 = $1 << 1;
            $11 = ($1 * 3) | 0;
            $12 = (0 - ($10)) | 0;
            $13 = (0 - ($1)) | 0;
            if ($9) {
                $14 = ((($0)) + 1 | 0);
                $$01723$us$i = 0; $$01822$us$i = $14; $$01921$us$i = $6;
                while (1) {
                    $$020$us$i = 0;
                    while (1) {
                        $15 = (($$01822$us$i) + ($$020$us$i) | 0);
                        $16 = (($15) + ($12) | 0);
                        $17 = HEAP8[$16 >> 0] | 0;
                        $18 = $17 & 255;
                        $19 = (($15) + ($11) | 0);
                        $20 = HEAP8[$19 >> 0] | 0;
                        $21 = $20 & 255;
                        $22 = (($15) + ($13) | 0);
                        $23 = HEAP8[$22 >> 0] | 0;
                        $24 = $23 & 255;
                        $25 = (($15) + ($10) | 0);
                        $26 = HEAP8[$25 >> 0] | 0;
                        $27 = $26 & 255;
                        $28 = (($27) + ($24)) | 0;
                        $29 = HEAP8[$15 >> 0] | 0;
                        $30 = $29 & 255;
                        $31 = (($15) + ($1) | 0);
                        $32 = HEAP8[$31 >> 0] | 0;
                        $33 = $32 & 255;
                        $34 = (($33) + ($30)) | 0;
                        $35 = Math_imul($28, -5) | 0;
                        $tmp30$i$us$i = ($34 * 20) | 0;
                        $36 = (($18) + 16) | 0;
                        $37 = (($36) + ($21)) | 0;
                        $38 = (($37) + ($35)) | 0;
                        $39 = (($38) + ($tmp30$i$us$i)) | 0;
                        $40 = $39 >> 5;
                        $41 = ($40 >>> 0) > (255);
                        $42 = (0 - ($40)) | 0;
                        $43 = $42 >> 31;
                        $44 = $41 ? $43 : $40;
                        $45 = $44 & 255;
                        $46 = (($$01921$us$i) + ($$020$us$i) | 0);
                        HEAP8[$46 >> 0] = $45;
                        $47 = (($$020$us$i) + 1) | 0;
                        $exitcond$i = ($47 | 0) == ($4 | 0);
                        if ($exitcond$i) {
                            break;
                        } else {
                            $$020$us$i = $47;
                        }
                    }
                    $48 = ((($$01921$us$i)) + 16 | 0);
                    $49 = (($$01822$us$i) + ($1) | 0);
                    $50 = (($$01723$us$i) + 1) | 0;
                    $exitcond26$i = ($50 | 0) == ($5 | 0);
                    if ($exitcond26$i) {
                        break;
                    } else {
                        $$01723$us$i = $50; $$01822$us$i = $49; $$01921$us$i = $48;
                    }
                }
                __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $7, 16, $4, $5);
                $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $6; $$02325$us$i = $7;
                while (1) {
                    $$024$us$i = 0;
                    while (1) {
                        $51 = (($$02226$us$i) + ($$024$us$i) | 0);
                        $52 = HEAP8[$51 >> 0] | 0;
                        $53 = $52 & 255;
                        $54 = (($$02325$us$i) + ($$024$us$i) | 0);
                        $55 = HEAP8[$54 >> 0] | 0;
                        $56 = $55 & 255;
                        $57 = (($53) + 1) | 0;
                        $58 = (($57) + ($56)) | 0;
                        $59 = $58 >>> 1;
                        $60 = $59 & 255;
                        $61 = (($$02127$us$i) + ($$024$us$i) | 0);
                        HEAP8[$61 >> 0] = $60;
                        $62 = (($$024$us$i) + 1) | 0;
                        $exitcond$i12 = ($62 | 0) == ($4 | 0);
                        if ($exitcond$i12) {
                            break;
                        } else {
                            $$024$us$i = $62;
                        }
                    }
                    $63 = (($$02127$us$i) + ($3) | 0);
                    $64 = ((($$02226$us$i)) + 16 | 0);
                    $65 = ((($$02325$us$i)) + 16 | 0);
                    $66 = (($$02028$us$i) + 1) | 0;
                    $exitcond31$i = ($66 | 0) == ($5 | 0);
                    if ($exitcond31$i) {
                        break;
                    } else {
                        $$02028$us$i = $66; $$02127$us$i = $63; $$02226$us$i = $64; $$02325$us$i = $65;
                    }
                }
                STACKTOP = sp; return;
            }
        }
        __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii($0, $1, $7, 16, $4, $5);
        STACKTOP = sp; return;
    }
    function __ZN10WelsCommonL12McHorVer33_cEPKhiPhiii($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$01622$us$i = 0, $$01721$us$i = 0, $$01721$us$i$pn = 0, $$01723$us$i = 0, $$01820$us$i = 0, $$01822$us$i = 0, $$019$us$i = 0, $$01921$us$i = 0, $$020$us$i = 0, $$02028$us$i = 0, $$02127$us$i = 0, $$02226$us$i = 0, $$02325$us$i = 0, $$024$us$i = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0;
        var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
        var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i14 = 0, $exitcond$i18 = 0, $exitcond25$i = 0, $exitcond26$i = 0, $exitcond31$i = 0, $or$cond$i = 0, $tmp30$i$us$i = 0, $tmp30$i$us$i17 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 512 | 0;
        $6 = sp + 256 | 0;
        $7 = sp;
        $8 = ($5 | 0) > (0);
        $9 = ($4 | 0) > (0);
        $or$cond$i = $9 & $8;
        if ($or$cond$i) {
            $$01622$us$i = 0; $$01721$us$i$pn = $0; $$01820$us$i = $6;
            while (1) {
                $$01721$us$i = (($$01721$us$i$pn) + ($1) | 0);
                $$019$us$i = 0;
                while (1) {
                    $10 = (($$01721$us$i) + ($$019$us$i) | 0);
                    $11 = ((($10)) + -2 | 0);
                    $12 = HEAP8[$11 >> 0] | 0;
                    $13 = $12 & 255;
                    $14 = ((($10)) + 3 | 0);
                    $15 = HEAP8[$14 >> 0] | 0;
                    $16 = $15 & 255;
                    $17 = ((($10)) + -1 | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    $20 = ((($10)) + 2 | 0);
                    $21 = HEAP8[$20 >> 0] | 0;
                    $22 = $21 & 255;
                    $23 = (($22) + ($19)) | 0;
                    $24 = HEAP8[$10 >> 0] | 0;
                    $25 = $24 & 255;
                    $26 = ((($10)) + 1 | 0);
                    $27 = HEAP8[$26 >> 0] | 0;
                    $28 = $27 & 255;
                    $29 = (($28) + ($25)) | 0;
                    $30 = Math_imul($23, -5) | 0;
                    $tmp30$i$us$i = ($29 * 20) | 0;
                    $31 = (($13) + 16) | 0;
                    $32 = (($31) + ($16)) | 0;
                    $33 = (($32) + ($30)) | 0;
                    $34 = (($33) + ($tmp30$i$us$i)) | 0;
                    $35 = $34 >> 5;
                    $36 = ($35 >>> 0) > (255);
                    $37 = (0 - ($35)) | 0;
                    $38 = $37 >> 31;
                    $39 = $36 ? $38 : $35;
                    $40 = $39 & 255;
                    $41 = (($$01820$us$i) + ($$019$us$i) | 0);
                    HEAP8[$41 >> 0] = $40;
                    $42 = (($$019$us$i) + 1) | 0;
                    $exitcond$i = ($42 | 0) == ($4 | 0);
                    if ($exitcond$i) {
                        break;
                    } else {
                        $$019$us$i = $42;
                    }
                }
                $43 = ((($$01820$us$i)) + 16 | 0);
                $44 = (($$01622$us$i) + 1) | 0;
                $exitcond25$i = ($44 | 0) == ($5 | 0);
                if ($exitcond25$i) {
                    break;
                } else {
                    $$01622$us$i = $44; $$01721$us$i$pn = $$01721$us$i; $$01820$us$i = $43;
                }
            }
        }
        if ($8) {
            $45 = $1 << 1;
            $46 = ($1 * 3) | 0;
            $47 = (0 - ($45)) | 0;
            $48 = (0 - ($1)) | 0;
            if ($9) {
                $49 = ((($0)) + 1 | 0);
                $$01723$us$i = 0; $$01822$us$i = $49; $$01921$us$i = $7;
                while (1) {
                    $$020$us$i = 0;
                    while (1) {
                        $50 = (($$01822$us$i) + ($$020$us$i) | 0);
                        $51 = (($50) + ($47) | 0);
                        $52 = HEAP8[$51 >> 0] | 0;
                        $53 = $52 & 255;
                        $54 = (($50) + ($46) | 0);
                        $55 = HEAP8[$54 >> 0] | 0;
                        $56 = $55 & 255;
                        $57 = (($50) + ($48) | 0);
                        $58 = HEAP8[$57 >> 0] | 0;
                        $59 = $58 & 255;
                        $60 = (($50) + ($45) | 0);
                        $61 = HEAP8[$60 >> 0] | 0;
                        $62 = $61 & 255;
                        $63 = (($62) + ($59)) | 0;
                        $64 = HEAP8[$50 >> 0] | 0;
                        $65 = $64 & 255;
                        $66 = (($50) + ($1) | 0);
                        $67 = HEAP8[$66 >> 0] | 0;
                        $68 = $67 & 255;
                        $69 = (($68) + ($65)) | 0;
                        $70 = Math_imul($63, -5) | 0;
                        $tmp30$i$us$i17 = ($69 * 20) | 0;
                        $71 = (($53) + 16) | 0;
                        $72 = (($71) + ($56)) | 0;
                        $73 = (($72) + ($70)) | 0;
                        $74 = (($73) + ($tmp30$i$us$i17)) | 0;
                        $75 = $74 >> 5;
                        $76 = ($75 >>> 0) > (255);
                        $77 = (0 - ($75)) | 0;
                        $78 = $77 >> 31;
                        $79 = $76 ? $78 : $75;
                        $80 = $79 & 255;
                        $81 = (($$01921$us$i) + ($$020$us$i) | 0);
                        HEAP8[$81 >> 0] = $80;
                        $82 = (($$020$us$i) + 1) | 0;
                        $exitcond$i18 = ($82 | 0) == ($4 | 0);
                        if ($exitcond$i18) {
                            break;
                        } else {
                            $$020$us$i = $82;
                        }
                    }
                    $83 = ((($$01921$us$i)) + 16 | 0);
                    $84 = (($$01822$us$i) + ($1) | 0);
                    $85 = (($$01723$us$i) + 1) | 0;
                    $exitcond26$i = ($85 | 0) == ($5 | 0);
                    if ($exitcond26$i) {
                        break;
                    } else {
                        $$01723$us$i = $85; $$01822$us$i = $84; $$01921$us$i = $83;
                    }
                }
            }
        }
        if ($or$cond$i) {
            $$02028$us$i = 0; $$02127$us$i = $2; $$02226$us$i = $6; $$02325$us$i = $7;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $$024$us$i = 0;
            while (1) {
                $86 = (($$02226$us$i) + ($$024$us$i) | 0);
                $87 = HEAP8[$86 >> 0] | 0;
                $88 = $87 & 255;
                $89 = (($$02325$us$i) + ($$024$us$i) | 0);
                $90 = HEAP8[$89 >> 0] | 0;
                $91 = $90 & 255;
                $92 = (($88) + 1) | 0;
                $93 = (($92) + ($91)) | 0;
                $94 = $93 >>> 1;
                $95 = $94 & 255;
                $96 = (($$02127$us$i) + ($$024$us$i) | 0);
                HEAP8[$96 >> 0] = $95;
                $97 = (($$024$us$i) + 1) | 0;
                $exitcond$i14 = ($97 | 0) == ($4 | 0);
                if ($exitcond$i14) {
                    break;
                } else {
                    $$024$us$i = $97;
                }
            }
            $98 = (($$02127$us$i) + ($3) | 0);
            $99 = ((($$02226$us$i)) + 16 | 0);
            $100 = ((($$02325$us$i)) + 16 | 0);
            $101 = (($$02028$us$i) + 1) | 0;
            $exitcond31$i = ($101 | 0) == ($5 | 0);
            if ($exitcond31$i) {
                break;
            } else {
                $$02028$us$i = $101; $$02127$us$i = $98; $$02226$us$i = $99; $$02325$us$i = $100;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZL19ExpandPictureLuma_cPhiii($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0 = 0, $$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
        var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
        var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
        var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
        var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
        var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
        var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
        var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $30 = 0;
        var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
        var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
        var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = (($3) + -1) | 0;
        $5 = Math_imul($4, $1) | 0;
        $6 = (($0) + ($5) | 0);
        $7 = HEAP8[$0 >> 0] | 0;
        $8 = (($2) + -1) | 0;
        $9 = (($0) + ($8) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = HEAP8[$6 >> 0] | 0;
        $12 = (($6) + ($8) | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = (0 - ($1)) | 0;
        $15 = (($0) + ($14) | 0);
        $16 = (($6) + ($1) | 0);
        _memcpy(($15 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($16 | 0), ($6 | 0), ($2 | 0)) | 0;
        $17 = ((($15)) + -32 | 0);
        _memset(($17 | 0), ($7 | 0), 32) | 0;
        $18 = (($15) + ($2) | 0);
        _memset(($18 | 0), ($10 | 0), 32) | 0;
        $19 = ((($16)) + -32 | 0);
        _memset(($19 | 0), ($11 | 0), 32) | 0;
        $20 = (($16) + ($2) | 0);
        _memset(($20 | 0), ($13 | 0), 32) | 0;
        $21 = $1 << 1;
        $22 = (0 - ($21)) | 0;
        $23 = (($0) + ($22) | 0);
        $24 = (($6) + ($21) | 0);
        _memcpy(($23 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($24 | 0), ($6 | 0), ($2 | 0)) | 0;
        $25 = ((($23)) + -32 | 0);
        _memset(($25 | 0), ($7 | 0), 32) | 0;
        $26 = (($23) + ($2) | 0);
        _memset(($26 | 0), ($10 | 0), 32) | 0;
        $27 = ((($24)) + -32 | 0);
        _memset(($27 | 0), ($11 | 0), 32) | 0;
        $28 = (($24) + ($2) | 0);
        _memset(($28 | 0), ($13 | 0), 32) | 0;
        $29 = ($1 * 3) | 0;
        $30 = (0 - ($29)) | 0;
        $31 = (($0) + ($30) | 0);
        $32 = (($6) + ($29) | 0);
        _memcpy(($31 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($32 | 0), ($6 | 0), ($2 | 0)) | 0;
        $33 = ((($31)) + -32 | 0);
        _memset(($33 | 0), ($7 | 0), 32) | 0;
        $34 = (($31) + ($2) | 0);
        _memset(($34 | 0), ($10 | 0), 32) | 0;
        $35 = ((($32)) + -32 | 0);
        _memset(($35 | 0), ($11 | 0), 32) | 0;
        $36 = (($32) + ($2) | 0);
        _memset(($36 | 0), ($13 | 0), 32) | 0;
        $37 = $1 << 2;
        $38 = (0 - ($37)) | 0;
        $39 = (($0) + ($38) | 0);
        $40 = (($6) + ($37) | 0);
        _memcpy(($39 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($40 | 0), ($6 | 0), ($2 | 0)) | 0;
        $41 = ((($39)) + -32 | 0);
        _memset(($41 | 0), ($7 | 0), 32) | 0;
        $42 = (($39) + ($2) | 0);
        _memset(($42 | 0), ($10 | 0), 32) | 0;
        $43 = ((($40)) + -32 | 0);
        _memset(($43 | 0), ($11 | 0), 32) | 0;
        $44 = (($40) + ($2) | 0);
        _memset(($44 | 0), ($13 | 0), 32) | 0;
        $45 = ($1 * 5) | 0;
        $46 = (0 - ($45)) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = (($6) + ($45) | 0);
        _memcpy(($47 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($48 | 0), ($6 | 0), ($2 | 0)) | 0;
        $49 = ((($47)) + -32 | 0);
        _memset(($49 | 0), ($7 | 0), 32) | 0;
        $50 = (($47) + ($2) | 0);
        _memset(($50 | 0), ($10 | 0), 32) | 0;
        $51 = ((($48)) + -32 | 0);
        _memset(($51 | 0), ($11 | 0), 32) | 0;
        $52 = (($48) + ($2) | 0);
        _memset(($52 | 0), ($13 | 0), 32) | 0;
        $53 = ($1 * 6) | 0;
        $54 = (0 - ($53)) | 0;
        $55 = (($0) + ($54) | 0);
        $56 = (($6) + ($53) | 0);
        _memcpy(($55 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($56 | 0), ($6 | 0), ($2 | 0)) | 0;
        $57 = ((($55)) + -32 | 0);
        _memset(($57 | 0), ($7 | 0), 32) | 0;
        $58 = (($55) + ($2) | 0);
        _memset(($58 | 0), ($10 | 0), 32) | 0;
        $59 = ((($56)) + -32 | 0);
        _memset(($59 | 0), ($11 | 0), 32) | 0;
        $60 = (($56) + ($2) | 0);
        _memset(($60 | 0), ($13 | 0), 32) | 0;
        $61 = ($1 * 7) | 0;
        $62 = (0 - ($61)) | 0;
        $63 = (($0) + ($62) | 0);
        $64 = (($6) + ($61) | 0);
        _memcpy(($63 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($64 | 0), ($6 | 0), ($2 | 0)) | 0;
        $65 = ((($63)) + -32 | 0);
        _memset(($65 | 0), ($7 | 0), 32) | 0;
        $66 = (($63) + ($2) | 0);
        _memset(($66 | 0), ($10 | 0), 32) | 0;
        $67 = ((($64)) + -32 | 0);
        _memset(($67 | 0), ($11 | 0), 32) | 0;
        $68 = (($64) + ($2) | 0);
        _memset(($68 | 0), ($13 | 0), 32) | 0;
        $69 = $1 << 3;
        $70 = (0 - ($69)) | 0;
        $71 = (($0) + ($70) | 0);
        $72 = (($6) + ($69) | 0);
        _memcpy(($71 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($72 | 0), ($6 | 0), ($2 | 0)) | 0;
        $73 = ((($71)) + -32 | 0);
        _memset(($73 | 0), ($7 | 0), 32) | 0;
        $74 = (($71) + ($2) | 0);
        _memset(($74 | 0), ($10 | 0), 32) | 0;
        $75 = ((($72)) + -32 | 0);
        _memset(($75 | 0), ($11 | 0), 32) | 0;
        $76 = (($72) + ($2) | 0);
        _memset(($76 | 0), ($13 | 0), 32) | 0;
        $77 = ($1 * 9) | 0;
        $78 = (0 - ($77)) | 0;
        $79 = (($0) + ($78) | 0);
        $80 = (($6) + ($77) | 0);
        _memcpy(($79 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($80 | 0), ($6 | 0), ($2 | 0)) | 0;
        $81 = ((($79)) + -32 | 0);
        _memset(($81 | 0), ($7 | 0), 32) | 0;
        $82 = (($79) + ($2) | 0);
        _memset(($82 | 0), ($10 | 0), 32) | 0;
        $83 = ((($80)) + -32 | 0);
        _memset(($83 | 0), ($11 | 0), 32) | 0;
        $84 = (($80) + ($2) | 0);
        _memset(($84 | 0), ($13 | 0), 32) | 0;
        $85 = ($1 * 10) | 0;
        $86 = (0 - ($85)) | 0;
        $87 = (($0) + ($86) | 0);
        $88 = (($6) + ($85) | 0);
        _memcpy(($87 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($88 | 0), ($6 | 0), ($2 | 0)) | 0;
        $89 = ((($87)) + -32 | 0);
        _memset(($89 | 0), ($7 | 0), 32) | 0;
        $90 = (($87) + ($2) | 0);
        _memset(($90 | 0), ($10 | 0), 32) | 0;
        $91 = ((($88)) + -32 | 0);
        _memset(($91 | 0), ($11 | 0), 32) | 0;
        $92 = (($88) + ($2) | 0);
        _memset(($92 | 0), ($13 | 0), 32) | 0;
        $93 = ($1 * 11) | 0;
        $94 = (0 - ($93)) | 0;
        $95 = (($0) + ($94) | 0);
        $96 = (($6) + ($93) | 0);
        _memcpy(($95 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($96 | 0), ($6 | 0), ($2 | 0)) | 0;
        $97 = ((($95)) + -32 | 0);
        _memset(($97 | 0), ($7 | 0), 32) | 0;
        $98 = (($95) + ($2) | 0);
        _memset(($98 | 0), ($10 | 0), 32) | 0;
        $99 = ((($96)) + -32 | 0);
        _memset(($99 | 0), ($11 | 0), 32) | 0;
        $100 = (($96) + ($2) | 0);
        _memset(($100 | 0), ($13 | 0), 32) | 0;
        $101 = ($1 * 12) | 0;
        $102 = (0 - ($101)) | 0;
        $103 = (($0) + ($102) | 0);
        $104 = (($6) + ($101) | 0);
        _memcpy(($103 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($104 | 0), ($6 | 0), ($2 | 0)) | 0;
        $105 = ((($103)) + -32 | 0);
        _memset(($105 | 0), ($7 | 0), 32) | 0;
        $106 = (($103) + ($2) | 0);
        _memset(($106 | 0), ($10 | 0), 32) | 0;
        $107 = ((($104)) + -32 | 0);
        _memset(($107 | 0), ($11 | 0), 32) | 0;
        $108 = (($104) + ($2) | 0);
        _memset(($108 | 0), ($13 | 0), 32) | 0;
        $109 = ($1 * 13) | 0;
        $110 = (0 - ($109)) | 0;
        $111 = (($0) + ($110) | 0);
        $112 = (($6) + ($109) | 0);
        _memcpy(($111 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($112 | 0), ($6 | 0), ($2 | 0)) | 0;
        $113 = ((($111)) + -32 | 0);
        _memset(($113 | 0), ($7 | 0), 32) | 0;
        $114 = (($111) + ($2) | 0);
        _memset(($114 | 0), ($10 | 0), 32) | 0;
        $115 = ((($112)) + -32 | 0);
        _memset(($115 | 0), ($11 | 0), 32) | 0;
        $116 = (($112) + ($2) | 0);
        _memset(($116 | 0), ($13 | 0), 32) | 0;
        $117 = ($1 * 14) | 0;
        $118 = (0 - ($117)) | 0;
        $119 = (($0) + ($118) | 0);
        $120 = (($6) + ($117) | 0);
        _memcpy(($119 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($120 | 0), ($6 | 0), ($2 | 0)) | 0;
        $121 = ((($119)) + -32 | 0);
        _memset(($121 | 0), ($7 | 0), 32) | 0;
        $122 = (($119) + ($2) | 0);
        _memset(($122 | 0), ($10 | 0), 32) | 0;
        $123 = ((($120)) + -32 | 0);
        _memset(($123 | 0), ($11 | 0), 32) | 0;
        $124 = (($120) + ($2) | 0);
        _memset(($124 | 0), ($13 | 0), 32) | 0;
        $125 = ($1 * 15) | 0;
        $126 = (0 - ($125)) | 0;
        $127 = (($0) + ($126) | 0);
        $128 = (($6) + ($125) | 0);
        _memcpy(($127 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($128 | 0), ($6 | 0), ($2 | 0)) | 0;
        $129 = ((($127)) + -32 | 0);
        _memset(($129 | 0), ($7 | 0), 32) | 0;
        $130 = (($127) + ($2) | 0);
        _memset(($130 | 0), ($10 | 0), 32) | 0;
        $131 = ((($128)) + -32 | 0);
        _memset(($131 | 0), ($11 | 0), 32) | 0;
        $132 = (($128) + ($2) | 0);
        _memset(($132 | 0), ($13 | 0), 32) | 0;
        $133 = $1 << 4;
        $134 = (0 - ($133)) | 0;
        $135 = (($0) + ($134) | 0);
        $136 = (($6) + ($133) | 0);
        _memcpy(($135 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($136 | 0), ($6 | 0), ($2 | 0)) | 0;
        $137 = ((($135)) + -32 | 0);
        _memset(($137 | 0), ($7 | 0), 32) | 0;
        $138 = (($135) + ($2) | 0);
        _memset(($138 | 0), ($10 | 0), 32) | 0;
        $139 = ((($136)) + -32 | 0);
        _memset(($139 | 0), ($11 | 0), 32) | 0;
        $140 = (($136) + ($2) | 0);
        _memset(($140 | 0), ($13 | 0), 32) | 0;
        $141 = ($1 * 17) | 0;
        $142 = (0 - ($141)) | 0;
        $143 = (($0) + ($142) | 0);
        $144 = (($6) + ($141) | 0);
        _memcpy(($143 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($144 | 0), ($6 | 0), ($2 | 0)) | 0;
        $145 = ((($143)) + -32 | 0);
        _memset(($145 | 0), ($7 | 0), 32) | 0;
        $146 = (($143) + ($2) | 0);
        _memset(($146 | 0), ($10 | 0), 32) | 0;
        $147 = ((($144)) + -32 | 0);
        _memset(($147 | 0), ($11 | 0), 32) | 0;
        $148 = (($144) + ($2) | 0);
        _memset(($148 | 0), ($13 | 0), 32) | 0;
        $149 = ($1 * 18) | 0;
        $150 = (0 - ($149)) | 0;
        $151 = (($0) + ($150) | 0);
        $152 = (($6) + ($149) | 0);
        _memcpy(($151 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($152 | 0), ($6 | 0), ($2 | 0)) | 0;
        $153 = ((($151)) + -32 | 0);
        _memset(($153 | 0), ($7 | 0), 32) | 0;
        $154 = (($151) + ($2) | 0);
        _memset(($154 | 0), ($10 | 0), 32) | 0;
        $155 = ((($152)) + -32 | 0);
        _memset(($155 | 0), ($11 | 0), 32) | 0;
        $156 = (($152) + ($2) | 0);
        _memset(($156 | 0), ($13 | 0), 32) | 0;
        $157 = ($1 * 19) | 0;
        $158 = (0 - ($157)) | 0;
        $159 = (($0) + ($158) | 0);
        $160 = (($6) + ($157) | 0);
        _memcpy(($159 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($160 | 0), ($6 | 0), ($2 | 0)) | 0;
        $161 = ((($159)) + -32 | 0);
        _memset(($161 | 0), ($7 | 0), 32) | 0;
        $162 = (($159) + ($2) | 0);
        _memset(($162 | 0), ($10 | 0), 32) | 0;
        $163 = ((($160)) + -32 | 0);
        _memset(($163 | 0), ($11 | 0), 32) | 0;
        $164 = (($160) + ($2) | 0);
        _memset(($164 | 0), ($13 | 0), 32) | 0;
        $165 = ($1 * 20) | 0;
        $166 = (0 - ($165)) | 0;
        $167 = (($0) + ($166) | 0);
        $168 = (($6) + ($165) | 0);
        _memcpy(($167 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($168 | 0), ($6 | 0), ($2 | 0)) | 0;
        $169 = ((($167)) + -32 | 0);
        _memset(($169 | 0), ($7 | 0), 32) | 0;
        $170 = (($167) + ($2) | 0);
        _memset(($170 | 0), ($10 | 0), 32) | 0;
        $171 = ((($168)) + -32 | 0);
        _memset(($171 | 0), ($11 | 0), 32) | 0;
        $172 = (($168) + ($2) | 0);
        _memset(($172 | 0), ($13 | 0), 32) | 0;
        $173 = ($1 * 21) | 0;
        $174 = (0 - ($173)) | 0;
        $175 = (($0) + ($174) | 0);
        $176 = (($6) + ($173) | 0);
        _memcpy(($175 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($176 | 0), ($6 | 0), ($2 | 0)) | 0;
        $177 = ((($175)) + -32 | 0);
        _memset(($177 | 0), ($7 | 0), 32) | 0;
        $178 = (($175) + ($2) | 0);
        _memset(($178 | 0), ($10 | 0), 32) | 0;
        $179 = ((($176)) + -32 | 0);
        _memset(($179 | 0), ($11 | 0), 32) | 0;
        $180 = (($176) + ($2) | 0);
        _memset(($180 | 0), ($13 | 0), 32) | 0;
        $181 = ($1 * 22) | 0;
        $182 = (0 - ($181)) | 0;
        $183 = (($0) + ($182) | 0);
        $184 = (($6) + ($181) | 0);
        _memcpy(($183 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($184 | 0), ($6 | 0), ($2 | 0)) | 0;
        $185 = ((($183)) + -32 | 0);
        _memset(($185 | 0), ($7 | 0), 32) | 0;
        $186 = (($183) + ($2) | 0);
        _memset(($186 | 0), ($10 | 0), 32) | 0;
        $187 = ((($184)) + -32 | 0);
        _memset(($187 | 0), ($11 | 0), 32) | 0;
        $188 = (($184) + ($2) | 0);
        _memset(($188 | 0), ($13 | 0), 32) | 0;
        $189 = ($1 * 23) | 0;
        $190 = (0 - ($189)) | 0;
        $191 = (($0) + ($190) | 0);
        $192 = (($6) + ($189) | 0);
        _memcpy(($191 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($192 | 0), ($6 | 0), ($2 | 0)) | 0;
        $193 = ((($191)) + -32 | 0);
        _memset(($193 | 0), ($7 | 0), 32) | 0;
        $194 = (($191) + ($2) | 0);
        _memset(($194 | 0), ($10 | 0), 32) | 0;
        $195 = ((($192)) + -32 | 0);
        _memset(($195 | 0), ($11 | 0), 32) | 0;
        $196 = (($192) + ($2) | 0);
        _memset(($196 | 0), ($13 | 0), 32) | 0;
        $197 = ($1 * 24) | 0;
        $198 = (0 - ($197)) | 0;
        $199 = (($0) + ($198) | 0);
        $200 = (($6) + ($197) | 0);
        _memcpy(($199 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($200 | 0), ($6 | 0), ($2 | 0)) | 0;
        $201 = ((($199)) + -32 | 0);
        _memset(($201 | 0), ($7 | 0), 32) | 0;
        $202 = (($199) + ($2) | 0);
        _memset(($202 | 0), ($10 | 0), 32) | 0;
        $203 = ((($200)) + -32 | 0);
        _memset(($203 | 0), ($11 | 0), 32) | 0;
        $204 = (($200) + ($2) | 0);
        _memset(($204 | 0), ($13 | 0), 32) | 0;
        $205 = ($1 * 25) | 0;
        $206 = (0 - ($205)) | 0;
        $207 = (($0) + ($206) | 0);
        $208 = (($6) + ($205) | 0);
        _memcpy(($207 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($208 | 0), ($6 | 0), ($2 | 0)) | 0;
        $209 = ((($207)) + -32 | 0);
        _memset(($209 | 0), ($7 | 0), 32) | 0;
        $210 = (($207) + ($2) | 0);
        _memset(($210 | 0), ($10 | 0), 32) | 0;
        $211 = ((($208)) + -32 | 0);
        _memset(($211 | 0), ($11 | 0), 32) | 0;
        $212 = (($208) + ($2) | 0);
        _memset(($212 | 0), ($13 | 0), 32) | 0;
        $213 = ($1 * 26) | 0;
        $214 = (0 - ($213)) | 0;
        $215 = (($0) + ($214) | 0);
        $216 = (($6) + ($213) | 0);
        _memcpy(($215 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($216 | 0), ($6 | 0), ($2 | 0)) | 0;
        $217 = ((($215)) + -32 | 0);
        _memset(($217 | 0), ($7 | 0), 32) | 0;
        $218 = (($215) + ($2) | 0);
        _memset(($218 | 0), ($10 | 0), 32) | 0;
        $219 = ((($216)) + -32 | 0);
        _memset(($219 | 0), ($11 | 0), 32) | 0;
        $220 = (($216) + ($2) | 0);
        _memset(($220 | 0), ($13 | 0), 32) | 0;
        $221 = ($1 * 27) | 0;
        $222 = (0 - ($221)) | 0;
        $223 = (($0) + ($222) | 0);
        $224 = (($6) + ($221) | 0);
        _memcpy(($223 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($224 | 0), ($6 | 0), ($2 | 0)) | 0;
        $225 = ((($223)) + -32 | 0);
        _memset(($225 | 0), ($7 | 0), 32) | 0;
        $226 = (($223) + ($2) | 0);
        _memset(($226 | 0), ($10 | 0), 32) | 0;
        $227 = ((($224)) + -32 | 0);
        _memset(($227 | 0), ($11 | 0), 32) | 0;
        $228 = (($224) + ($2) | 0);
        _memset(($228 | 0), ($13 | 0), 32) | 0;
        $229 = ($1 * 28) | 0;
        $230 = (0 - ($229)) | 0;
        $231 = (($0) + ($230) | 0);
        $232 = (($6) + ($229) | 0);
        _memcpy(($231 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($232 | 0), ($6 | 0), ($2 | 0)) | 0;
        $233 = ((($231)) + -32 | 0);
        _memset(($233 | 0), ($7 | 0), 32) | 0;
        $234 = (($231) + ($2) | 0);
        _memset(($234 | 0), ($10 | 0), 32) | 0;
        $235 = ((($232)) + -32 | 0);
        _memset(($235 | 0), ($11 | 0), 32) | 0;
        $236 = (($232) + ($2) | 0);
        _memset(($236 | 0), ($13 | 0), 32) | 0;
        $237 = ($1 * 29) | 0;
        $238 = (0 - ($237)) | 0;
        $239 = (($0) + ($238) | 0);
        $240 = (($6) + ($237) | 0);
        _memcpy(($239 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($240 | 0), ($6 | 0), ($2 | 0)) | 0;
        $241 = ((($239)) + -32 | 0);
        _memset(($241 | 0), ($7 | 0), 32) | 0;
        $242 = (($239) + ($2) | 0);
        _memset(($242 | 0), ($10 | 0), 32) | 0;
        $243 = ((($240)) + -32 | 0);
        _memset(($243 | 0), ($11 | 0), 32) | 0;
        $244 = (($240) + ($2) | 0);
        _memset(($244 | 0), ($13 | 0), 32) | 0;
        $245 = ($1 * 30) | 0;
        $246 = (0 - ($245)) | 0;
        $247 = (($0) + ($246) | 0);
        $248 = (($6) + ($245) | 0);
        _memcpy(($247 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($248 | 0), ($6 | 0), ($2 | 0)) | 0;
        $249 = ((($247)) + -32 | 0);
        _memset(($249 | 0), ($7 | 0), 32) | 0;
        $250 = (($247) + ($2) | 0);
        _memset(($250 | 0), ($10 | 0), 32) | 0;
        $251 = ((($248)) + -32 | 0);
        _memset(($251 | 0), ($11 | 0), 32) | 0;
        $252 = (($248) + ($2) | 0);
        _memset(($252 | 0), ($13 | 0), 32) | 0;
        $253 = ($1 * 31) | 0;
        $254 = (0 - ($253)) | 0;
        $255 = (($0) + ($254) | 0);
        $256 = (($6) + ($253) | 0);
        _memcpy(($255 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($256 | 0), ($6 | 0), ($2 | 0)) | 0;
        $257 = ((($255)) + -32 | 0);
        _memset(($257 | 0), ($7 | 0), 32) | 0;
        $258 = (($255) + ($2) | 0);
        _memset(($258 | 0), ($10 | 0), 32) | 0;
        $259 = ((($256)) + -32 | 0);
        _memset(($259 | 0), ($11 | 0), 32) | 0;
        $260 = (($256) + ($2) | 0);
        _memset(($260 | 0), ($13 | 0), 32) | 0;
        $261 = $1 << 5;
        $262 = (0 - ($261)) | 0;
        $263 = (($0) + ($262) | 0);
        $264 = (($6) + ($261) | 0);
        _memcpy(($263 | 0), ($0 | 0), ($2 | 0)) | 0;
        _memcpy(($264 | 0), ($6 | 0), ($2 | 0)) | 0;
        $265 = ((($263)) + -32 | 0);
        _memset(($265 | 0), ($7 | 0), 32) | 0;
        $266 = (($263) + ($2) | 0);
        _memset(($266 | 0), ($10 | 0), 32) | 0;
        $267 = ((($264)) + -32 | 0);
        _memset(($267 | 0), ($11 | 0), 32) | 0;
        $268 = (($264) + ($2) | 0);
        _memset(($268 | 0), ($13 | 0), 32) | 0;
        $$0 = $0; $$1 = 0;
        while (1) {
            $269 = ((($$0)) + -32 | 0);
            $270 = HEAP8[$$0 >> 0] | 0;
            _memset(($269 | 0), ($270 | 0), 32) | 0;
            $271 = (($$0) + ($2) | 0);
            $272 = (($$0) + ($8) | 0);
            $273 = HEAP8[$272 >> 0] | 0;
            _memset(($271 | 0), ($273 | 0), 32) | 0;
            $274 = (($$0) + ($1) | 0);
            $275 = (($$1) + 1) | 0;
            $276 = ($275 | 0) < ($3 | 0);
            if ($276) {
                $$0 = $274; $$1 = $275;
            } else {
                break;
            }
        }
        return;
    }
    function __ZN10WelsCommon12CMemoryAlignC2Ej($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$$ = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = (9232);
        $2 = ((($0)) + 8 | 0);
        HEAP32[$2 >> 2] = 0;
        $3 = ($1 | 0) == (0);
        $4 = $1 & 15;
        $5 = ($4 | 0) != (0);
        $6 = $3 | $5;
        $$$ = $6 ? 16 : $1;
        $7 = ((($0)) + 4 | 0);
        HEAP32[$7 >> 2] = $$$;
        return;
    }
    function __ZN10WelsCommon12CMemoryAlignD2Ev($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = (9232);
        $1 = ((($0)) + 8 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ($2 | 0) == (0);
        if ($3) {
            return;
        } else {
            ___assert_fail((15311 | 0), (15338 | 0), 60, (15372 | 0));
            // unreachable;
        }
    }
    function __ZN10WelsCommon12CMemoryAlignD0Ev($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = (9232);
        $1 = ((($0)) + 8 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ($2 | 0) == (0);
        if ($3) {
            __ZdlPv($0);
            return;
        } else {
            ___assert_fail((15311 | 0), (15338 | 0), 60, (15372 | 0));
            // unreachable;
        }
    }
    function __ZN7WelsDec12CWelsDecoder10InitializeEPK19TagSVCDecodingParam($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $2 = ((($0)) + 8 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ($3 | 0) == (0 | 0);
        do {
            if ($4) {
                $$0 = 3;
            } else {
                $5 = ($1 | 0) == (0 | 0);
                if ($5) {
                    $6 = ((($3)) + 12 | 0);
                    __Z7WelsLogP13TagLogContextiPKcz($6, 1, 30539, $vararg_buffer);
                    $$0 = 1;
                    break;
                }
                $7 = ((($1)) + 20 | 0);
                $8 = HEAP8[$7 >> 0] | 0;
                $9 = ($8 << 24 >> 24) != (0);
                $10 = (__ZN7WelsDec12CWelsDecoder11InitDecoderEb($0, $9) | 0);
                $11 = ($10 | 0) == (0);
                if ($11) {
                    $12 = ((($0)) + 4 | 0);
                    $13 = HEAP32[$12 >> 2] | 0;
                    $14 = (_DecoderConfigParam($13, $1) | 0);
                    $$0 = $14;
                } else {
                    $$0 = $10;
                }
            }
        } while (0);
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec12CWelsDecoder12UninitializeEv($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($0);
        return 0;
    }
    function __ZN7WelsDec12CWelsDecoder11DecodeFrameEPKhiPPhPiRiS6_($0, $1, $2, $3, $4, $5, $6) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0;
        var label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $7 = sp;
        dest = $7; stop = dest + 48 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $8 = HEAP32[$4 >> 2] | 0;
        $9 = ((($7)) + 36 | 0);
        HEAP32[$9 >> 2] = $8;
        $10 = ((($4)) + 4 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($7)) + 40 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = HEAP32[$5 >> 2] | 0;
        $14 = ((($7)) + 24 | 0);
        HEAP32[$14 >> 2] = $13;
        $15 = HEAP32[$6 >> 2] | 0;
        $16 = ((($7)) + 28 | 0);
        HEAP32[$16 >> 2] = $15;
        $17 = HEAP32[$0 >> 2] | 0;
        $18 = ((($17)) + 16 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = (FUNCTION_TABLE_iiiiii[$19 & 3]($0, $1, $2, $3, $7) | 0);
        $21 = ($20 | 0) == (0);
        if (!($21)) {
            STACKTOP = sp; return ($20 | 0);
        }
        $22 = HEAP32[$9 >> 2] | 0;
        HEAP32[$4 >> 2] = $22;
        $23 = HEAP32[$12 >> 2] | 0;
        HEAP32[$10 >> 2] = $23;
        $24 = HEAP32[$14 >> 2] | 0;
        HEAP32[$5 >> 2] = $24;
        $25 = HEAP32[$16 >> 2] | 0;
        HEAP32[$6 >> 2] = $25;
        STACKTOP = sp; return ($20 | 0);
    }
    function __ZN7WelsDec12CWelsDecoder18DecodeFrameNoDelayEPKhiPPhP13TagBufferInfo($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = HEAP32[$0 >> 2] | 0;
        $6 = ((($5)) + 16 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (FUNCTION_TABLE_iiiiii[$7 & 3]($0, $1, $2, $3, $4) | 0);
        $9 = HEAP32[$0 >> 2] | 0;
        $10 = ((($9)) + 16 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = (FUNCTION_TABLE_iiiiii[$11 & 3]($0, 0, 0, $3, $4) | 0);
        $13 = $12 | $8;
        return ($13 | 0);
    }
    function __ZN7WelsDec12CWelsDecoder12DecodeFrame2EPKhiPPhP13TagBufferInfo($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$1 = 0, $$pre = 0, $$pre$phi69Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre59 = 0, $$pre63 = 0, $$pre64 = 0, $$pre66 = 0, $$pre68 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
        var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
        var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
        var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
        var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
        var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
        var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
        var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0.0, $226 = 0.0, $227 = 0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
        var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
        var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
        var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $29 = 0, $30 = 0, $31 = 0;
        var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
        var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
        var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
        var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $5 = sp + 16 | 0;
        $6 = ((($0)) + 4 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (__ZN7WelsDec13CheckBsBufferEPNS_21TagWelsDecoderContextEi($7, $2) | 0);
        $9 = ($8 | 0) == (0);
        if (!($9)) {
            $$1 = 16384;
            STACKTOP = sp; return ($$1 | 0);
        }
        $10 = ($2 | 0) > (0);
        $11 = ($1 | 0) != (0 | 0);
        $or$cond = $11 & $10;
        $12 = HEAP32[$6 >> 2] | 0;
        $13 = ((($12)) + 241950 | 0);
        if ($or$cond) {
            HEAP8[$13 >> 0] = 0;
        } else {
            HEAP8[$13 >> 0] = 1;
            $14 = HEAP32[$6 >> 2] | 0;
            $15 = ((($14)) + 241951 | 0);
            HEAP8[$15 >> 0] = 1;
        }
        (_gettimeofday(($5 | 0), (0 | 0)) | 0);
        $16 = HEAP32[$5 >> 2] | 0;
        $17 = ($16 | 0) < (0);
        $18 = $17 << 31 >> 31;
        $19 = (___muldi3(($16 | 0), ($18 | 0), 1000000, 0) | 0);
        $20 = tempRet0;
        $21 = ((($5)) + 4 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = ($22 | 0) < (0);
        $24 = $23 << 31 >> 31;
        $25 = (_i64Add(($19 | 0), ($20 | 0), ($22 | 0), ($24 | 0)) | 0);
        $26 = tempRet0;
        $27 = ((($3)) + 8 | 0);
        HEAP32[$27 >> 2] = 0;
        $28 = ((($3)) + 4 | 0);
        HEAP32[$28 >> 2] = 0;
        HEAP32[$3 >> 2] = 0;
        $29 = HEAP32[$6 >> 2] | 0;
        $30 = ((($29)) + 116 | 0);
        HEAP32[$30 >> 2] = 0;
        $31 = HEAP32[$6 >> 2] | 0;
        $32 = ((($31)) + 317160 | 0);
        HEAP32[$32 >> 2] = 2;
        $33 = ((($4)) + 8 | 0);
        $34 = $33;
        $35 = $34;
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = (($34) + 4) | 0;
        $38 = $37;
        $39 = HEAP32[$38 >> 2] | 0;
        dest = $4; stop = dest + 48 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $40 = $33;
        $41 = $40;
        HEAP32[$41 >> 2] = $36;
        $42 = (($40) + 4) | 0;
        $43 = $42;
        HEAP32[$43 >> 2] = $39;
        $44 = HEAP32[$6 >> 2] | 0;
        $45 = ((($44)) + 242316 | 0);
        HEAP8[$45 >> 0] = 0;
        $46 = HEAP32[$6 >> 2] | 0;
        $47 = ((($46)) + 242325 | 0);
        HEAP8[$47 >> 0] = 0;
        $48 = HEAP32[$6 >> 2] | 0;
        $49 = ((($48)) + 242328 | 0);
        HEAP32[$49 >> 2] = 0;
        $50 = HEAP32[$6 >> 2] | 0;
        $51 = ((($50)) + 104 | 0);
        HEAP32[$51 >> 2] = -1;
        $52 = HEAP32[$6 >> 2] | 0;
        $53 = ((($52)) + 317164 | 0);
        HEAP32[$53 >> 2] = -1;
        $54 = ($4 | 0) == (0 | 0);
        if ($54) {
            $70 = 0; $73 = 0;
        } else {
            $55 = ((($4)) + 16 | 0);
            $56 = $55;
            $57 = $56;
            HEAP32[$57 >> 2] = 0;
            $58 = (($56) + 4) | 0;
            $59 = $58;
            HEAP32[$59 >> 2] = 0;
            $60 = $33;
            $61 = $60;
            $62 = HEAP32[$61 >> 2] | 0;
            $63 = (($60) + 4) | 0;
            $64 = $63;
            $65 = HEAP32[$64 >> 2] | 0;
            $70 = $62; $73 = $65;
        }
        $66 = HEAP32[$6 >> 2] | 0;
        $67 = ((($66)) + 512544 | 0);
        $68 = $67;
        $69 = $68;
        HEAP32[$69 >> 2] = $70;
        $71 = (($68) + 4) | 0;
        $72 = $71;
        HEAP32[$72 >> 2] = $73;
        $74 = HEAP32[$6 >> 2] | 0;
        (_WelsDecodeBs($74, $1, $2, $3, $4, 0) | 0);
        $75 = HEAP32[$6 >> 2] | 0;
        $76 = ((($75)) + 241951 | 0);
        HEAP8[$76 >> 0] = 0;
        $77 = HEAP32[$6 >> 2] | 0;
        $78 = ((($77)) + 116 | 0);
        $79 = HEAP32[$78 >> 2] | 0;
        $80 = ($79 | 0) == (0);
        if ($80) {
            $234 = HEAP32[$4 >> 2] | 0;
            $235 = ($234 | 0) == (1);
            do {
                if ($235) {
                    $236 = ((($77)) + 512264 | 0);
                    $237 = HEAP32[$236 >> 2] | 0;
                    $238 = (($237) + 1) | 0;
                    HEAP32[$236 >> 2] = $238;
                    $239 = HEAP32[$6 >> 2] | 0;
                    $240 = ((($239)) + 512264 | 0);
                    $241 = HEAP32[$240 >> 2] | 0;
                    $242 = ($241 | 0) == (0);
                    if ($242) {
                        $243 = ((($239)) + 512248 | 0);
                        _ResetDecStatNums($243);
                        $244 = HEAP32[$6 >> 2] | 0;
                        $245 = ((($244)) + 512264 | 0);
                        $246 = HEAP32[$245 >> 2] | 0;
                        $247 = (($246) + 1) | 0;
                        HEAP32[$245 >> 2] = $247;
                        $$pre59 = HEAP32[$6 >> 2] | 0;
                        $249 = $$pre59;
                    } else {
                        $249 = $239;
                    }
                    $248 = ((($249)) + 512248 | 0);
                    $250 = HEAP32[$248 >> 2] | 0;
                    $251 = ((($4)) + 24 | 0);
                    $252 = HEAP32[$251 >> 2] | 0;
                    $253 = ($250 | 0) == ($252 | 0);
                    if ($253) {
                        $254 = ((($249)) + 512252 | 0);
                        $255 = HEAP32[$254 >> 2] | 0;
                        $256 = ((($4)) + 28 | 0);
                        $257 = HEAP32[$256 >> 2] | 0;
                        $258 = ($255 | 0) == ($257 | 0);
                        if ($258) {
                            break;
                        } else {
                            $$pre$phiZ2D = $256;
                        }
                    } else {
                        $$pre63 = ((($4)) + 28 | 0);
                        $$pre$phiZ2D = $$pre63;
                    }
                    $259 = ((($249)) + 512268 | 0);
                    $260 = HEAP32[$259 >> 2] | 0;
                    $261 = (($260) + 1) | 0;
                    HEAP32[$259 >> 2] = $261;
                    $262 = HEAP32[$251 >> 2] | 0;
                    $263 = HEAP32[$6 >> 2] | 0;
                    $264 = ((($263)) + 512248 | 0);
                    HEAP32[$264 >> 2] = $262;
                    $265 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                    $266 = HEAP32[$6 >> 2] | 0;
                    $267 = ((($266)) + 512252 | 0);
                    HEAP32[$267 >> 2] = $265;
                }
            } while (0);
            (_gettimeofday(($5 | 0), (0 | 0)) | 0);
            $268 = HEAP32[$5 >> 2] | 0;
            $269 = ($268 | 0) < (0);
            $270 = $269 << 31 >> 31;
            $271 = (___muldi3(($268 | 0), ($270 | 0), 1000000, 0) | 0);
            $272 = tempRet0;
            $273 = ((($5)) + 4 | 0);
            $274 = HEAP32[$273 >> 2] | 0;
            $275 = ($274 | 0) < (0);
            $276 = $275 << 31 >> 31;
            $277 = (_i64Subtract(($274 | 0), ($276 | 0), ($25 | 0), ($26 | 0)) | 0);
            $278 = tempRet0;
            $279 = (_i64Add(($277 | 0), ($278 | 0), ($271 | 0), ($272 | 0)) | 0);
            $280 = tempRet0;
            $281 = (+($279 >>> 0)) + (4294967296.0 * (+($280 | 0)));
            $282 = $281 / 1000.0;
            $283 = HEAP32[$6 >> 2] | 0;
            $284 = ((($283)) + 512240 | 0);
            $285 = +HEAPF64[$284 >> 3];
            $286 = $285 + $282;
            HEAPF64[$284 >> 3] = $286;
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        $81 = ((($77)) + 92 | 0);
        $82 = HEAP32[$81 >> 2] | 0;
        $83 = $79 & 16384;
        $84 = ($83 | 0) == (0);
        if (!($84)) {
            __ZN7WelsDec32ForceResetParaSetStatusAndAUListEPNS_21TagWelsDecoderContextE($77);
        }
        switch ($82 | 0) {
            case 5: case 7: case 8: case 15: {
                label = 12;
                break;
            }
            default: {
                $85 = HEAP32[$6 >> 2] | 0;
                $86 = ((($85)) + 60 | 0);
                $87 = HEAP32[$86 >> 2] | 0;
                $88 = ($87 | 0) == (0);
                if ($88) {
                    label = 12;
                } else {
                    $95 = $85;
                }
            }
        }
        if ((label | 0) == 12) {
            $89 = HEAP32[$6 >> 2] | 0;
            $90 = ((($89)) + 242340 | 0);
            $91 = HEAP32[$90 >> 2] | 0;
            $92 = ($91 | 0) == (0);
            if ($92) {
                $93 = ((($89)) + 242324 | 0);
                HEAP8[$93 >> 0] = 1;
                $$pre = HEAP32[$6 >> 2] | 0;
                $95 = $$pre;
            } else {
                $95 = $89;
            }
        }
        $94 = ((($95)) + 317169 | 0);
        $96 = HEAP8[$94 >> 0] | 0;
        $97 = ($96 << 24 >> 24) == (0);
        if ($97) {
            $105 = ((($95)) + 317172 | 0);
            $106 = HEAP32[$105 >> 2] | 0;
            $107 = (($106) + 1) | 0;
            HEAP32[$105 >> 2] = $107;
            $108 = HEAP32[$6 >> 2] | 0;
            $109 = ((($108)) + 317172 | 0);
            $110 = HEAP32[$109 >> 2] | 0;
            $111 = ($110 | 0) == (2147483647);
            if ($111) {
                $112 = ((($0)) + 8 | 0);
                $113 = HEAP32[$112 >> 2] | 0;
                $114 = ((($113)) + 12 | 0);
                __Z7WelsLogP13TagLogContextiPKcz($114, 2, 30491, $vararg_buffer1);
                $115 = HEAP32[$6 >> 2] | 0;
                $116 = ((($115)) + 317172 | 0);
                HEAP32[$116 >> 2] = 0;
            }
        } else {
            $98 = ((($0)) + 8 | 0);
            $99 = HEAP32[$98 >> 2] | 0;
            $100 = ((($99)) + 12 | 0);
            $101 = ((($95)) + 116 | 0);
            $102 = HEAP32[$101 >> 2] | 0;
            HEAP32[$vararg_buffer >> 2] = $102;
            __Z7WelsLogP13TagLogContextiPKcz($100, 4, 30458, $vararg_buffer);
            $103 = HEAP32[$6 >> 2] | 0;
            $104 = ((($103)) + 317169 | 0);
            HEAP8[$104 >> 0] = 0;
        }
        $117 = HEAP32[$6 >> 2] | 0;
        $118 = ((($117)) + 242340 | 0);
        $119 = HEAP32[$118 >> 2] | 0;
        $120 = ($119 | 0) == (0);
        if (!($120)) {
            $121 = HEAP32[$4 >> 2] | 0;
            $122 = ($121 | 0) == (1);
            if ($122) {
                $123 = ((($117)) + 116 | 0);
                $124 = HEAP32[$123 >> 2] | 0;
                $125 = $124 | 32;
                HEAP32[$123 >> 2] = $125;
                $126 = HEAP32[$6 >> 2] | 0;
                $127 = ((($126)) + 512248 | 0);
                $128 = HEAP32[$127 >> 2] | 0;
                $129 = ((($4)) + 24 | 0);
                $130 = HEAP32[$129 >> 2] | 0;
                $131 = ($128 | 0) == ($130 | 0);
                if ($131) {
                    $132 = ((($126)) + 512252 | 0);
                    $133 = HEAP32[$132 >> 2] | 0;
                    $134 = ((($4)) + 28 | 0);
                    $135 = HEAP32[$134 >> 2] | 0;
                    $136 = ($133 | 0) == ($135 | 0);
                    if ($136) {
                        $147 = $126;
                    } else {
                        $$pre$phi69Z2D = $134;
                        label = 23;
                    }
                } else {
                    $$pre68 = ((($4)) + 28 | 0);
                    $$pre$phi69Z2D = $$pre68;
                    label = 23;
                }
                if ((label | 0) == 23) {
                    $137 = ((($126)) + 512268 | 0);
                    $138 = HEAP32[$137 >> 2] | 0;
                    $139 = (($138) + 1) | 0;
                    HEAP32[$137 >> 2] = $139;
                    $140 = HEAP32[$129 >> 2] | 0;
                    $141 = HEAP32[$6 >> 2] | 0;
                    $142 = ((($141)) + 512248 | 0);
                    HEAP32[$142 >> 2] = $140;
                    $143 = HEAP32[$$pre$phi69Z2D >> 2] | 0;
                    $144 = HEAP32[$6 >> 2] | 0;
                    $145 = ((($144)) + 512252 | 0);
                    HEAP32[$145 >> 2] = $143;
                    $$pre57 = HEAP32[$6 >> 2] | 0;
                    $147 = $$pre57;
                }
                $146 = ((($147)) + 512264 | 0);
                $148 = HEAP32[$146 >> 2] | 0;
                $149 = (($148) + 1) | 0;
                HEAP32[$146 >> 2] = $149;
                $150 = HEAP32[$6 >> 2] | 0;
                $151 = ((($150)) + 512264 | 0);
                $152 = HEAP32[$151 >> 2] | 0;
                $153 = ($152 | 0) == (0);
                if ($153) {
                    $154 = ((($150)) + 512248 | 0);
                    _ResetDecStatNums($154);
                    $155 = HEAP32[$6 >> 2] | 0;
                    $156 = ((($155)) + 512264 | 0);
                    $157 = HEAP32[$156 >> 2] | 0;
                    $158 = (($157) + 1) | 0;
                    HEAP32[$156 >> 2] = $158;
                    $$pre58 = HEAP32[$6 >> 2] | 0;
                    $160 = $$pre58;
                } else {
                    $160 = $150;
                }
                $159 = ((($160)) + 512332 | 0);
                $161 = HEAP32[$159 >> 2] | 0;
                $162 = ((($160)) + 512336 | 0);
                $163 = HEAP32[$162 >> 2] | 0;
                $164 = (($163) + ($161)) | 0;
                $165 = ((($160)) + 512340 | 0);
                $166 = HEAP32[$165 >> 2] | 0;
                $167 = ($166 | 0) == (0);
                $168 = ((($160)) + 512276 | 0);
                $169 = HEAP32[$168 >> 2] | 0;
                $170 = ((($160)) + 512288 | 0);
                $171 = HEAP32[$170 >> 2] | 0;
                $172 = Math_imul($171, $169) | 0;
                if ($167) {
                    $176 = $172;
                } else {
                    $173 = ($164 * 100) | 0;
                    $174 = (($173 | 0) / ($166 | 0)) & -1;
                    $175 = (($174) + ($172)) | 0;
                    $176 = $175;
                }
                HEAP32[$168 >> 2] = $176;
                $177 = HEAP32[$6 >> 2] | 0;
                $178 = ((($177)) + 512340 | 0);
                $179 = HEAP32[$178 >> 2] | 0;
                $180 = ($179 | 0) == (0);
                $181 = ((($177)) + 512280 | 0);
                $182 = HEAP32[$181 >> 2] | 0;
                $183 = ((($177)) + 512288 | 0);
                $184 = HEAP32[$183 >> 2] | 0;
                $185 = Math_imul($184, $182) | 0;
                if ($180) {
                    $191 = $185;
                } else {
                    $186 = ((($177)) + 512336 | 0);
                    $187 = HEAP32[$186 >> 2] | 0;
                    $188 = ($187 * 100) | 0;
                    $189 = (($188 | 0) / ($179 | 0)) & -1;
                    $190 = (($189) + ($185)) | 0;
                    $191 = $190;
                }
                HEAP32[$181 >> 2] = $191;
                $192 = ($164 | 0) != (0);
                $193 = $192 & 1;
                $194 = HEAP32[$6 >> 2] | 0;
                $195 = ((($194)) + 512288 | 0);
                $196 = HEAP32[$195 >> 2] | 0;
                $197 = (($196) + ($193)) | 0;
                HEAP32[$195 >> 2] = $197;
                $198 = HEAP32[$6 >> 2] | 0;
                $199 = ((($198)) + 512288 | 0);
                $200 = HEAP32[$199 >> 2] | 0;
                $201 = ($200 | 0) == (0);
                $$pre64 = ((($198)) + 512276 | 0);
                if ($201) {
                    $204 = 0;
                } else {
                    $202 = HEAP32[$$pre64 >> 2] | 0;
                    $203 = (($202 >>> 0) / ($200 >>> 0)) & -1;
                    $204 = $203;
                }
                HEAP32[$$pre64 >> 2] = $204;
                $205 = HEAP32[$6 >> 2] | 0;
                $206 = ((($205)) + 512288 | 0);
                $207 = HEAP32[$206 >> 2] | 0;
                $208 = ($207 | 0) == (0);
                $$pre66 = ((($205)) + 512280 | 0);
                if ($208) {
                    $211 = 0;
                } else {
                    $209 = HEAP32[$$pre66 >> 2] | 0;
                    $210 = (($209 >>> 0) / ($207 >>> 0)) & -1;
                    $211 = $210;
                }
                HEAP32[$$pre66 >> 2] = $211;
            }
        }
        (_gettimeofday(($5 | 0), (0 | 0)) | 0);
        $212 = HEAP32[$5 >> 2] | 0;
        $213 = ($212 | 0) < (0);
        $214 = $213 << 31 >> 31;
        $215 = (___muldi3(($212 | 0), ($214 | 0), 1000000, 0) | 0);
        $216 = tempRet0;
        $217 = ((($5)) + 4 | 0);
        $218 = HEAP32[$217 >> 2] | 0;
        $219 = ($218 | 0) < (0);
        $220 = $219 << 31 >> 31;
        $221 = (_i64Subtract(($218 | 0), ($220 | 0), ($25 | 0), ($26 | 0)) | 0);
        $222 = tempRet0;
        $223 = (_i64Add(($221 | 0), ($222 | 0), ($215 | 0), ($216 | 0)) | 0);
        $224 = tempRet0;
        $225 = (+($223 >>> 0)) + (4294967296.0 * (+($224 | 0)));
        $226 = $225 / 1000.0;
        $227 = HEAP32[$6 >> 2] | 0;
        $228 = ((($227)) + 512240 | 0);
        $229 = +HEAPF64[$228 >> 3];
        $230 = $229 + $226;
        HEAPF64[$228 >> 3] = $230;
        $231 = HEAP32[$6 >> 2] | 0;
        $232 = ((($231)) + 116 | 0);
        $233 = HEAP32[$232 >> 2] | 0;
        $$1 = $233;
        STACKTOP = sp; return ($$1 | 0);
    }
    function __ZN7WelsDec12CWelsDecoder12DecodeParserEPKhiP15TagParserBsInfo($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0 = 0, $$pre = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        $4 = ((($0)) + 4 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = (__ZN7WelsDec13CheckBsBufferEPNS_21TagWelsDecoderContextEi($5, $2) | 0);
        $7 = ($6 | 0) == (0);
        if (!($7)) {
            $$0 = 16384;
            return ($$0 | 0);
        }
        $8 = ($2 | 0) > (0);
        $9 = ($1 | 0) != (0 | 0);
        $or$cond = $9 & $8;
        $10 = HEAP32[$4 >> 2] | 0;
        $11 = ((($10)) + 241950 | 0);
        if ($or$cond) {
            HEAP8[$11 >> 0] = 0;
        } else {
            HEAP8[$11 >> 0] = 1;
            $12 = HEAP32[$4 >> 2] | 0;
            $13 = ((($12)) + 241951 | 0);
            HEAP8[$13 >> 0] = 1;
        }
        $14 = HEAP32[$4 >> 2] | 0;
        $15 = ((($14)) + 116 | 0);
        HEAP32[$15 >> 2] = 0;
        $16 = HEAP32[$4 >> 2] | 0;
        $17 = ((($16)) + 242340 | 0);
        HEAP32[$17 >> 2] = 0;
        $18 = HEAP32[$4 >> 2] | 0;
        $19 = ((($18)) + 242345 | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = ($20 << 24 >> 24) == (0);
        if ($21) {
            $22 = ((($18)) + 316848 | 0);
            $23 = HEAP32[$22 >> 2] | 0;
            HEAP32[$23 >> 2] = 0;
            $24 = HEAP32[$4 >> 2] | 0;
            $25 = ((($24)) + 316848 | 0);
            $26 = HEAP32[$25 >> 2] | 0;
            $27 = ((($26)) + 4 | 0);
            dest = $27; stop = dest + 128 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        }
        HEAP32[$3 >> 2] = 0;
        $28 = ((($3)) + 524 | 0);
        HEAP32[$28 >> 2] = 0;
        $29 = ((($3)) + 520 | 0);
        HEAP32[$29 >> 2] = 0;
        $30 = ($3 | 0) == (0 | 0);
        if ($30) {
            $45 = HEAP32[$4 >> 2] | 0;
            $46 = ((($45)) + 512544 | 0);
            $$sink = $46;
        } else {
            $31 = ((($3)) + 528 | 0);
            $32 = $31;
            $33 = $32;
            $34 = HEAP32[$33 >> 2] | 0;
            $35 = (($32) + 4) | 0;
            $36 = $35;
            $37 = HEAP32[$36 >> 2] | 0;
            $38 = HEAP32[$4 >> 2] | 0;
            $39 = ((($38)) + 512544 | 0);
            $40 = $39;
            $41 = $40;
            HEAP32[$41 >> 2] = $34;
            $42 = (($40) + 4) | 0;
            $43 = $42;
            HEAP32[$43 >> 2] = $37;
            $44 = ((($3)) + 536 | 0);
            $$sink = $44;
        }
        $47 = $$sink;
        $48 = $47;
        HEAP32[$48 >> 2] = 0;
        $49 = (($47) + 4) | 0;
        $50 = $49;
        HEAP32[$50 >> 2] = 0;
        $51 = HEAP32[$4 >> 2] | 0;
        (_WelsDecodeBs($51, $1, $2, 0, 0, $3) | 0);
        $52 = HEAP32[$4 >> 2] | 0;
        $53 = ((($52)) + 242345 | 0);
        $54 = HEAP8[$53 >> 0] | 0;
        $55 = ($54 << 24 >> 24) == (0);
        if ($55) {
            $56 = ((($52)) + 316848 | 0);
            $57 = HEAP32[$56 >> 2] | 0;
            $58 = HEAP32[$57 >> 2] | 0;
            $59 = ($58 | 0) == (0);
            if ($59) {
                $61 = $52;
            } else {
                _memcpy(($3 | 0), ($57 | 0), 544) | 0;
                $$pre = HEAP32[$4 >> 2] | 0;
                $61 = $$pre;
            }
        } else {
            $61 = $52;
        }
        $60 = ((($61)) + 241951 | 0);
        HEAP8[$60 >> 0] = 0;
        $62 = HEAP32[$4 >> 2] | 0;
        $63 = ((($62)) + 116 | 0);
        $64 = HEAP32[$63 >> 2] | 0;
        $$0 = $64;
        return ($$0 | 0);
    }
    function __ZN7WelsDec12CWelsDecoder13DecodeFrameExEPKhiPhiRiS4_S4_S4_($0, $1, $2, $3, $4, $5, $6, $7, $8) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        $8 = $8 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return 0;
    }
    function __ZN7WelsDec12CWelsDecoder9SetOptionE14DECODER_OPTIONPv($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $vararg_buffer9 = sp + 32 | 0;
        $vararg_buffer6 = sp + 24 | 0;
        $vararg_buffer3 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $3 = ((($0)) + 4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ($4 | 0) == (0 | 0);
        L1: do {
            if ($5) {
                switch ($1 | 0) {
                    case 9: {
                        label = 15;
                        break;
                    }
                    case 10: {
                        label = 17;
                        break;
                    }
                    case 11: {
                        label = 19;
                        break;
                    }
                    default: {
                        $$0 = 8192;
                    }
                }
            } else {
                switch ($1 | 0) {
                    case 9: {
                        label = 15;
                        break L1;
                        break;
                    }
                    case 10: {
                        label = 17;
                        break L1;
                        break;
                    }
                    case 11: {
                        label = 19;
                        break L1;
                        break;
                    }
                    case 0: {
                        $6 = ((($4)) + 242344 | 0);
                        $7 = HEAP8[$6 >> 0] | 0;
                        $8 = ($7 << 24 >> 24) == (0);
                        if (!($8)) {
                            $9 = ((($0)) + 8 | 0);
                            $10 = HEAP32[$9 >> 2] | 0;
                            $11 = ((($10)) + 12 | 0);
                            __Z7WelsLogP13TagLogContextiPKcz($11, 2, 22164, $vararg_buffer);
                            $$0 = 0;
                            break L1;
                        }
                        $12 = ($2 | 0) == (0 | 0);
                        if ($12) {
                            $$0 = 1;
                            break L1;
                        }
                        $13 = HEAP32[$2 >> 2] | 0;
                        $14 = (_DecoderSetCsp($4, $13) | 0);
                        $$0 = $14;
                        break L1;
                        break;
                    }
                    case 1: {
                        $15 = ($2 | 0) == (0 | 0);
                        if ($15) {
                            $$0 = 1;
                            break L1;
                        }
                        $16 = ((($4)) + 241950 | 0);
                        $17 = HEAP32[$2 >> 2] | 0;
                        $18 = ($17 | 0) != (0);
                        $19 = $18 & 1;
                        HEAP8[$16 >> 0] = $19;
                        $$0 = 0;
                        break L1;
                        break;
                    }
                    case 8: {
                        $20 = ($2 | 0) == (0 | 0);
                        if ($20) {
                            $$0 = 1;
                            break L1;
                        }
                        $21 = HEAP32[$2 >> 2] | 0;
                        $22 = ($21 | 0) < (7);
                        $23 = $22 ? $21 : 7;
                        $24 = ($21 | 0) > (0);
                        $25 = $24 ? $23 : 0;
                        $26 = ((($4)) + 242340 | 0);
                        HEAP32[$26 >> 2] = $25;
                        $27 = HEAP32[$3 >> 2] | 0;
                        $28 = ((($27)) + 242344 | 0);
                        $29 = HEAP8[$28 >> 0] | 0;
                        $30 = ($29 << 24 >> 24) == (0);
                        if (!($30)) {
                            $31 = ((($27)) + 242340 | 0);
                            $32 = HEAP32[$31 >> 2] | 0;
                            $33 = ($32 | 0) == (0);
                            if (!($33)) {
                                $34 = ((($0)) + 8 | 0);
                                $35 = HEAP32[$34 >> 2] | 0;
                                $36 = ((($35)) + 12 | 0);
                                HEAP32[$vararg_buffer1 >> 2] = $25;
                                __Z7WelsLogP13TagLogContextiPKcz($36, 4, 22231, $vararg_buffer1);
                                $$0 = 1;
                                break L1;
                            }
                        }
                        __ZN7WelsDec12InitErrorConEPNS_21TagWelsDecoderContextE($27);
                        $37 = ((($0)) + 8 | 0);
                        $38 = HEAP32[$37 >> 2] | 0;
                        $39 = ((($38)) + 12 | 0);
                        HEAP32[$vararg_buffer3 >> 2] = $25;
                        __Z7WelsLogP13TagLogContextiPKcz($39, 4, 22306, $vararg_buffer3);
                        $$0 = 0;
                        break L1;
                        break;
                    }
                    case 12: {
                        $54 = ((($0)) + 8 | 0);
                        $55 = HEAP32[$54 >> 2] | 0;
                        $56 = ((($55)) + 12 | 0);
                        __Z7WelsLogP13TagLogContextiPKcz($56, 2, 22410, $vararg_buffer9);
                        $$0 = 1;
                        break L1;
                        break;
                    }
                    default: {
                        $$0 = 1;
                        break L1;
                    }
                }
            }
        } while (0);
        if ((label | 0) == 15) {
            $40 = ((($0)) + 8 | 0);
            $41 = HEAP32[$40 >> 2] | 0;
            $42 = ($41 | 0) == (0 | 0);
            if ($42) {
                $$0 = 0;
            } else {
                $43 = HEAP32[$2 >> 2] | 0;
                __ZN14welsCodecTrace13SetTraceLevelEi($41, $43);
                $$0 = 0;
            }
        }
        else if ((label | 0) == 17) {
            $44 = ((($0)) + 8 | 0);
            $45 = HEAP32[$44 >> 2] | 0;
            $46 = ($45 | 0) == (0 | 0);
            if ($46) {
                $$0 = 0;
            } else {
                $47 = HEAP32[$2 >> 2] | 0;
                __ZN14welsCodecTrace16SetTraceCallbackEPFvPviPKcE($45, $47);
                $48 = HEAP32[$44 >> 2] | 0;
                $49 = ((($48)) + 12 | 0);
                HEAP32[$vararg_buffer6 >> 2] = 21262;
                __Z7WelsLogP13TagLogContextiPKcz($49, 4, 22354, $vararg_buffer6);
                $$0 = 0;
            }
        }
        else if ((label | 0) == 19) {
            $50 = ((($0)) + 8 | 0);
            $51 = HEAP32[$50 >> 2] | 0;
            $52 = ($51 | 0) == (0 | 0);
            if ($52) {
                $$0 = 0;
            } else {
                $53 = HEAP32[$2 >> 2] | 0;
                __ZN14welsCodecTrace23SetTraceCallbackContextEPv($51, $53);
                $$0 = 0;
            }
        }
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec12CWelsDecoder9GetOptionE14DECODER_OPTIONPv($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
        sp = STACKTOP;
        $3 = ((($0)) + 4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ($4 | 0) == (0 | 0);
        if ($5) {
            $$0 = 4;
            return ($$0 | 0);
        }
        $6 = ($2 | 0) == (0 | 0);
        if ($6) {
            $$0 = 1;
            return ($$0 | 0);
        }
        do {
            switch ($1 | 0) {
                case 0: {
                    $7 = ((($4)) + 56 | 0);
                    $8 = HEAP32[$7 >> 2] | 0;
                    HEAP32[$2 >> 2] = $8;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 1: {
                    $9 = ((($4)) + 241950 | 0);
                    $10 = HEAP8[$9 >> 0] | 0;
                    $11 = $10 & 255;
                    HEAP32[$2 >> 2] = $11;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 5: {
                    $12 = ((($4)) + 242332 | 0);
                    $13 = HEAP16[$12 >> 1] | 0;
                    $14 = $13 & 65535;
                    HEAP32[$2 >> 2] = $14;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 4: {
                    $15 = ((($4)) + 104 | 0);
                    $16 = HEAP32[$15 >> 2] | 0;
                    HEAP32[$2 >> 2] = $16;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 6: {
                    $17 = ((($4)) + 242325 | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    HEAP32[$2 >> 2] = $19;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 7: {
                    $20 = ((($4)) + 242328 | 0);
                    $21 = HEAP32[$20 >> 2] | 0;
                    HEAP32[$2 >> 2] = $21;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 2: {
                    $22 = ((($4)) + 317160 | 0);
                    $23 = HEAP32[$22 >> 2] | 0;
                    HEAP32[$2 >> 2] = $23;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 3: {
                    $24 = ((($4)) + 317164 | 0);
                    $25 = HEAP32[$24 >> 2] | 0;
                    HEAP32[$2 >> 2] = $25;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 8: {
                    $26 = ((($4)) + 242340 | 0);
                    $27 = HEAP32[$26 >> 2] | 0;
                    HEAP32[$2 >> 2] = $27;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                case 12: {
                    $28 = ((($4)) + 512248 | 0);
                    dest = $2; src = $28; stop = dest + 84 | 0; do { HEAP32[dest >> 2] = HEAP32[src >> 2] | 0; dest = dest + 4 | 0; src = src + 4 | 0; } while ((dest | 0) < (stop | 0));
                    $29 = HEAP32[$3 >> 2] | 0;
                    $30 = ((($29)) + 512240 | 0);
                    $31 = +HEAPF64[$30 >> 3];
                    $32 = $31;
                    $33 = ((($29)) + 512264 | 0);
                    $34 = HEAP32[$33 >> 2] | 0;
                    $35 = (+($34 >>> 0));
                    $36 = $32 / $35;
                    $37 = ((($2)) + 8 | 0);
                    HEAPF32[$37 >> 2] = $36;
                    $38 = HEAP32[$3 >> 2] | 0;
                    $39 = ((($38)) + 512240 | 0);
                    $40 = +HEAPF64[$39 >> 3];
                    $41 = $40;
                    $42 = ((($38)) + 512264 | 0);
                    $43 = HEAP32[$42 >> 2] | 0;
                    $44 = ((($38)) + 512296 | 0);
                    $45 = HEAP32[$44 >> 2] | 0;
                    $46 = (($45) + ($43)) | 0;
                    $47 = ((($38)) + 512300 | 0);
                    $48 = HEAP32[$47 >> 2] | 0;
                    $49 = (($46) + ($48)) | 0;
                    $50 = (+($49 >>> 0));
                    $51 = $41 / $50;
                    $52 = ((($2)) + 12 | 0);
                    HEAPF32[$52 >> 2] = $51;
                    $$0 = 0;
                    return ($$0 | 0);
                    break;
                }
                default: {
                    $$0 = 1;
                    return ($$0 | 0);
                }
            }
        } while (0);
        return (0) | 0;
    }
    function __ZN7WelsDec12CWelsDecoderD2Ev($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        HEAP32[$0 >> 2] = (9248);
        $1 = ((($0)) + 8 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ($2 | 0) == (0 | 0);
        if (!($3)) {
            $4 = ((($2)) + 12 | 0);
            __Z7WelsLogP13TagLogContextiPKcz($4, 4, 21172, $vararg_buffer);
        }
        __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($0);
        $5 = HEAP32[$1 >> 2] | 0;
        $6 = ($5 | 0) == (0 | 0);
        if ($6) {
            STACKTOP = sp; return;
        }
        __ZN14welsCodecTraceD2Ev($5);
        __ZdlPv($5);
        HEAP32[$1 >> 2] = 0;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec12CWelsDecoderD0Ev($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        HEAP32[$0 >> 2] = (9248);
        $1 = ((($0)) + 8 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ($2 | 0) == (0 | 0);
        if (!($3)) {
            $4 = ((($2)) + 12 | 0);
            __Z7WelsLogP13TagLogContextiPKcz($4, 4, 21172, $vararg_buffer);
        }
        __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($0);
        $5 = HEAP32[$1 >> 2] | 0;
        $6 = ($5 | 0) == (0 | 0);
        if ($6) {
            __ZdlPv($0);
            STACKTOP = sp; return;
        }
        __ZN14welsCodecTraceD2Ev($5);
        __ZdlPv($5);
        __ZdlPv($0);
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($0) {
        $0 = $0 | 0;
        var $$pr = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $1 = ((($0)) + 4 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ($2 | 0) == (0 | 0);
        if ($3) {
            STACKTOP = sp; return;
        }
        $4 = ((($0)) + 8 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($5)) + 12 | 0);
        HEAP32[$vararg_buffer >> 2] = 21262;
        __Z7WelsLogP13TagLogContextiPKcz($6, 4, 21202, $vararg_buffer);
        $7 = HEAP32[$1 >> 2] | 0;
        _WelsEndDecoder($7);
        $8 = HEAP32[$1 >> 2] | 0;
        $9 = ((($8)) + 562528 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ($10 | 0) == (0 | 0);
        if ($11) {
            $24 = $8;
        } else {
            $12 = HEAP32[$4 >> 2] | 0;
            $13 = ((($12)) + 12 | 0);
            $14 = (__ZNK10WelsCommon12CMemoryAlign18WelsGetMemoryUsageEv($10) | 0);
            HEAP32[$vararg_buffer1 >> 2] = $14;
            __Z7WelsLogP13TagLogContextiPKcz($13, 4, 21270, $vararg_buffer1);
            $15 = HEAP32[$1 >> 2] | 0;
            $16 = ((($15)) + 562528 | 0);
            $17 = HEAP32[$16 >> 2] | 0;
            $18 = ($17 | 0) == (0 | 0);
            if ($18) {
                $23 = $15;
            } else {
                $19 = HEAP32[$17 >> 2] | 0;
                $20 = ((($19)) + 4 | 0);
                $21 = HEAP32[$20 >> 2] | 0;
                FUNCTION_TABLE_vi[$21 & 15]($17);
                $$pre = HEAP32[$1 >> 2] | 0;
                $23 = $$pre;
            }
            $22 = ((($23)) + 562528 | 0);
            HEAP32[$22 >> 2] = 0;
            $$pr = HEAP32[$1 >> 2] | 0;
            $24 = $$pr;
        }
        $25 = ($24 | 0) == (0 | 0);
        if ($25) {
            STACKTOP = sp; return;
        }
        __ZN10WelsCommon8WelsFreeEPvPKc($24, 21345);
        HEAP32[$1 >> 2] = 0;
        STACKTOP = sp; return;
    }
    function _WelsEndDecoder($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        _WelsFreeMem($0);
        __ZN7WelsDec14WelsFreeMemoryEPNS_21TagWelsDecoderContextE($0);
        __ZN7WelsDec24UninitialDqLayersContextEPNS_21TagWelsDecoderContextE($0);
        $1 = ((($0)) + 242324 | 0);
        HEAP8[$1 >> 0] = 0;
        $2 = ((($0)) + 242334 | 0);
        HEAP8[$2 >> 0] = 0;
        $3 = ((($0)) + 317169 | 0);
        HEAP8[$3 >> 0] = 0;
        return;
    }
    function __ZN10WelsCommon8WelsFreeEPvPKc($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($0 | 0) == (0 | 0);
        if ($2) {
            return;
        }
        $3 = ((($0)) + -4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        _free($4);
        return;
    }
    function _WelsFreeMem($0) {
        $0 = $0 | 0;
        var $$025$i = 0, $$025$i$1 = 0, $$pre$i = 0, $$pre$i$1 = 0, $$pre$phi$i$1Z2D = 0, $$pre$phi$iZ2D = 0, $$pre27$i = 0, $$pre27$i$1 = 0, $$pre28$i = 0, $$pre28$i$1 = 0, $$pre29$i = 0, $$pre29$i$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
        var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 562528 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        (__ZN7WelsDec12ResetFmoListEPNS_21TagWelsDecoderContextE($0) | 0);
        __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($0);
        $3 = ((($0)) + 209440 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ($4 | 0) == (0 | 0);
        if (!($5)) {
            $6 = HEAP32[$4 >> 2] | 0;
            $7 = ($6 | 0) == (0 | 0);
            if ($7) {
                $$pre29$i = ((($4)) + 4 | 0);
                $$pre$phi$iZ2D = $$pre29$i;
            } else {
                $8 = ((($4)) + 4 | 0);
                $9 = HEAP32[$8 >> 2] | 0;
                $10 = ($9 | 0) > (0);
                if ($10) {
                    $$025$i = 0; $12 = $6; $42 = $9;
                    while (1) {
                        $11 = (($12) + ($$025$i << 2) | 0);
                        $13 = HEAP32[$11 >> 2] | 0;
                        $14 = ($13 | 0) == (0 | 0);
                        if ($14) {
                            $17 = $42;
                        } else {
                            __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($13, $2);
                            $$pre27$i = HEAP32[$8 >> 2] | 0;
                            $17 = $$pre27$i;
                        }
                        $15 = (($$025$i) + 1) | 0;
                        $16 = ($15 | 0) < ($17 | 0);
                        if (!($16)) {
                            break;
                        }
                        $$pre$i = HEAP32[$4 >> 2] | 0;
                        $$025$i = $15; $12 = $$pre$i; $42 = $17;
                    }
                    $$pre28$i = HEAP32[$4 >> 2] | 0;
                    $18 = $$pre28$i;
                } else {
                    $18 = $6;
                }
                __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $18, 22078);
                HEAP32[$4 >> 2] = 0;
                $$pre$phi$iZ2D = $8;
            }
            HEAP32[$$pre$phi$iZ2D >> 2] = 0;
            $19 = ((($4)) + 8 | 0);
            HEAP32[$19 >> 2] = 0;
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $4, 22093);
            HEAP32[$3 >> 2] = 0;
        }
        $20 = ((($0)) + 209444 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ($21 | 0) == (0 | 0);
        if ($22) {
            $37 = ((($0)) + 68 | 0);
            $38 = ((($0)) + 84 | 0);
            ; HEAP32[$37 >> 2] = 0 | 0; HEAP32[$37 + 4 >> 2] = 0 | 0; HEAP32[$37 + 8 >> 2] = 0 | 0; HEAP32[$37 + 12 >> 2] = 0 | 0;
            HEAP8[$38 >> 0] = 1;
            $39 = ((($0)) + 64 | 0);
            HEAP8[$39 >> 0] = 0;
            $40 = ((($0)) + 512232 | 0);
            $41 = HEAP32[$40 >> 2] | 0;
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $41, 22101);
            return;
        }
        $23 = HEAP32[$21 >> 2] | 0;
        $24 = ($23 | 0) == (0 | 0);
        if ($24) {
            $$pre29$i$1 = ((($21)) + 4 | 0);
            $$pre$phi$i$1Z2D = $$pre29$i$1;
        } else {
            $25 = ((($21)) + 4 | 0);
            $26 = HEAP32[$25 >> 2] | 0;
            $27 = ($26 | 0) > (0);
            if ($27) {
                $$025$i$1 = 0; $29 = $23; $43 = $26;
                while (1) {
                    $28 = (($29) + ($$025$i$1 << 2) | 0);
                    $30 = HEAP32[$28 >> 2] | 0;
                    $31 = ($30 | 0) == (0 | 0);
                    if ($31) {
                        $34 = $43;
                    } else {
                        __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($30, $2);
                        $$pre27$i$1 = HEAP32[$25 >> 2] | 0;
                        $34 = $$pre27$i$1;
                    }
                    $32 = (($$025$i$1) + 1) | 0;
                    $33 = ($32 | 0) < ($34 | 0);
                    if (!($33)) {
                        break;
                    }
                    $$pre$i$1 = HEAP32[$21 >> 2] | 0;
                    $$025$i$1 = $32; $29 = $$pre$i$1; $43 = $34;
                }
                $$pre28$i$1 = HEAP32[$21 >> 2] | 0;
                $35 = $$pre28$i$1;
            } else {
                $35 = $23;
            }
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $35, 22078);
            HEAP32[$21 >> 2] = 0;
            $$pre$phi$i$1Z2D = $25;
        }
        HEAP32[$$pre$phi$i$1Z2D >> 2] = 0;
        $36 = ((($21)) + 8 | 0);
        HEAP32[$36 >> 2] = 0;
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $21, 22093);
        HEAP32[$20 >> 2] = 0;
        $37 = ((($0)) + 68 | 0);
        $38 = ((($0)) + 84 | 0);
        ; HEAP32[$37 >> 2] = 0 | 0; HEAP32[$37 + 4 >> 2] = 0 | 0; HEAP32[$37 + 8 >> 2] = 0 | 0; HEAP32[$37 + 12 >> 2] = 0 | 0;
        HEAP8[$38 >> 0] = 1;
        $39 = ((($0)) + 64 | 0);
        HEAP8[$39 >> 0] = 0;
        $40 = ((($0)) + 512232 | 0);
        $41 = HEAP32[$40 >> 2] | 0;
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $41, 22101);
        return;
    }
    function __ZN7WelsDec14WelsFreeMemoryEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
        var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0 | 0);
        if ($1) {
            return;
        }
        $2 = ((($0)) + 562528 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($0)) + 48 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ($5 | 0) == (0 | 0);
        if (!($6)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3, $5, 21957);
            HEAP32[$4 >> 2] = 0;
        }
        $7 = ((($0)) + 241888 | 0);
        (__ZN7WelsDec14MemFreeNalListEPPNS_14TagAccessUnitsEPN10WelsCommon12CMemoryAlignE($7, $3) | 0);
        $8 = ((($0)) + 16 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ($9 | 0) == (0 | 0);
        if (!($10)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3, $9, 21970);
        }
        $11 = ((($0)) + 242344 | 0);
        ; HEAP32[$8 >> 2] = 0 | 0; HEAP32[$8 + 4 >> 2] = 0 | 0; HEAP32[$8 + 8 >> 2] = 0 | 0; HEAP32[$8 + 12 >> 2] = 0 | 0;
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = ($12 << 24 >> 24) == (0);
        if ($13) {
            return;
        }
        $14 = ((($0)) + 32 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ($15 | 0) == (0 | 0);
        if (!($16)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3, $15, 21992);
        }
        $17 = ((($0)) + 316848 | 0);
        ; HEAP32[$14 >> 2] = 0 | 0; HEAP32[$14 + 4 >> 2] = 0 | 0; HEAP32[$14 + 8 >> 2] = 0 | 0; HEAP32[$14 + 12 >> 2] = 0 | 0;
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = ($18 | 0) == (0 | 0);
        if ($19) {
            return;
        }
        $20 = ((($18)) + 516 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ($21 | 0) == (0 | 0);
        if ($22) {
            $25 = $18;
        } else {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3, $21, 22016);
            $23 = HEAP32[$17 >> 2] | 0;
            $24 = ((($23)) + 516 | 0);
            HEAP32[$24 >> 2] = 0;
            $$pre = HEAP32[$17 >> 2] | 0;
            $25 = $$pre;
        }
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3, $25, 22046);
        HEAP32[$17 >> 2] = 0;
        return;
    }
    function __ZN7WelsDec24UninitialDqLayersContextEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 562528 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($0)) + 241936 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ($4 | 0) == (0 | 0);
        if ($5) {
            $75 = ((($0)) + 241940 | 0);
            HEAP32[$75 >> 2] = 0;
            $76 = ((($0)) + 241944 | 0);
            HEAP32[$76 >> 2] = 0;
            $77 = ((($0)) + 241952 | 0);
            HEAP8[$77 >> 0] = 0;
            return;
        }
        $6 = ((($0)) + 5344 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ($7 | 0) == (0 | 0);
        if (!($8)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $7, 21359);
            HEAP32[$6 >> 2] = 0;
        }
        $9 = ((($0)) + 5348 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ($10 | 0) == (0 | 0);
        if (!($11)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $10, 21379);
            HEAP32[$9 >> 2] = 0;
        }
        $12 = ((($0)) + 5356 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ($13 | 0) == (0 | 0);
        if (!($14)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $13, 21397);
            HEAP32[$12 >> 2] = 0;
        }
        $15 = ((($0)) + 5364 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = ($16 | 0) == (0 | 0);
        if (!($17)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $16, 21421);
            HEAP32[$15 >> 2] = 0;
        }
        $18 = ((($0)) + 5368 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ($19 | 0) == (0 | 0);
        if (!($20)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $19, 21465);
            HEAP32[$18 >> 2] = 0;
        }
        $21 = ((($0)) + 5372 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = ($22 | 0) == (0 | 0);
        if (!($23)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $22, 21499);
            HEAP32[$21 >> 2] = 0;
        }
        $24 = ((($0)) + 5376 | 0);
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = ($25 | 0) == (0 | 0);
        if (!($26)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $25, 21519);
            HEAP32[$24 >> 2] = 0;
        }
        $27 = ((($0)) + 5380 | 0);
        $28 = HEAP32[$27 >> 2] | 0;
        $29 = ($28 | 0) == (0 | 0);
        if (!($29)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $28, 21541);
            HEAP32[$27 >> 2] = 0;
        }
        $30 = ((($0)) + 5388 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = ($31 | 0) == (0 | 0);
        if (!($32)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $31, 21560);
            HEAP32[$30 >> 2] = 0;
        }
        $33 = ((($0)) + 5392 | 0);
        $34 = HEAP32[$33 >> 2] | 0;
        $35 = ($34 | 0) == (0 | 0);
        if (!($35)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $34, 21579);
            HEAP32[$33 >> 2] = 0;
        }
        $36 = ((($0)) + 5396 | 0);
        $37 = HEAP32[$36 >> 2] | 0;
        $38 = ($37 | 0) == (0 | 0);
        if (!($38)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $37, 21596);
            HEAP32[$36 >> 2] = 0;
        }
        $39 = ((($0)) + 5400 | 0);
        $40 = HEAP32[$39 >> 2] | 0;
        $41 = ($40 | 0) == (0 | 0);
        if (!($41)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $40, 21615);
            HEAP32[$39 >> 2] = 0;
        }
        $42 = ((($0)) + 5404 | 0);
        $43 = HEAP32[$42 >> 2] | 0;
        $44 = ($43 | 0) == (0 | 0);
        if (!($44)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $43, 21641);
            HEAP32[$42 >> 2] = 0;
        }
        $45 = ((($0)) + 5408 | 0);
        $46 = HEAP32[$45 >> 2] | 0;
        $47 = ($46 | 0) == (0 | 0);
        if (!($47)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $46, 21668);
            HEAP32[$45 >> 2] = 0;
        }
        $48 = ((($0)) + 5412 | 0);
        $49 = HEAP32[$48 >> 2] | 0;
        $50 = ($49 | 0) == (0 | 0);
        if (!($50)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $49, 21699);
            HEAP32[$48 >> 2] = 0;
        }
        $51 = ((($0)) + 5416 | 0);
        $52 = HEAP32[$51 >> 2] | 0;
        $53 = ($52 | 0) == (0 | 0);
        if (!($53)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $52, 21728);
            HEAP32[$51 >> 2] = 0;
        }
        $54 = ((($0)) + 5420 | 0);
        $55 = HEAP32[$54 >> 2] | 0;
        $56 = ($55 | 0) == (0 | 0);
        if (!($56)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $55, 21756);
            HEAP32[$54 >> 2] = 0;
        }
        $57 = ((($0)) + 5432 | 0);
        $58 = HEAP32[$57 >> 2] | 0;
        $59 = ($58 | 0) == (0 | 0);
        if (!($59)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $58, 21773);
            HEAP32[$57 >> 2] = 0;
        }
        $60 = ((($0)) + 5436 | 0);
        $61 = HEAP32[$60 >> 2] | 0;
        $62 = ($61 | 0) == (0 | 0);
        if (!($62)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $61, 21796);
            HEAP32[$60 >> 2] = 0;
        }
        $63 = ((($0)) + 5440 | 0);
        $64 = HEAP32[$63 >> 2] | 0;
        $65 = ($64 | 0) == (0 | 0);
        if (!($65)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $64, 21818);
            HEAP32[$63 >> 2] = 0;
        }
        $66 = ((($0)) + 5444 | 0);
        $67 = HEAP32[$66 >> 2] | 0;
        $68 = ($67 | 0) == (0 | 0);
        if (!($68)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $67, 21848);
            HEAP32[$66 >> 2] = 0;
        }
        $69 = ((($0)) + 5448 | 0);
        $70 = HEAP32[$69 >> 2] | 0;
        $71 = ($70 | 0) == (0 | 0);
        if (!($71)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $70, 21885);
            HEAP32[$69 >> 2] = 0;
        }
        $72 = ((($0)) + 5452 | 0);
        $73 = HEAP32[$72 >> 2] | 0;
        $74 = ($73 | 0) == (0 | 0);
        if (!($74)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $73, 21921);
            HEAP32[$72 >> 2] = 0;
        }
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $4, 21953);
        HEAP32[$3 >> 2] = 0;
        $75 = ((($0)) + 241940 | 0);
        HEAP32[$75 >> 2] = 0;
        $76 = ((($0)) + 241944 | 0);
        HEAP32[$76 >> 2] = 0;
        $77 = ((($0)) + 241952 | 0);
        HEAP8[$77 >> 0] = 0;
        return;
    }
    function __ZN7WelsDec14MemFreeNalListEPPNS_14TagAccessUnitsEPN10WelsCommon12CMemoryAlignE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($0 | 0) == (0 | 0);
        if ($2) {
            return 0;
        }
        $3 = HEAP32[$0 >> 2] | 0;
        $4 = ($3 | 0) == (0 | 0);
        if ($4) {
            return 0;
        }
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1, $3, 22066);
        HEAP32[$0 >> 2] = 0;
        return 0;
    }
    function __ZN7WelsDec12ResetFmoListEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0 | 0);
        if ($1) {
            $$0 = 0;
            return ($$0 | 0);
        }
        $2 = ((($0)) + 120 | 0);
        $3 = ((($0)) + 5244 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($0)) + 562528 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        __ZN7WelsDec13UninitFmoListEPNS_6TagFmoEiiPN10WelsCommon12CMemoryAlignE($2, 256, $4, $6);
        $7 = HEAP32[$3 >> 2] | 0;
        HEAP32[$3 >> 2] = 0;
        $$0 = $7;
        return ($$0 | 0);
    }
    function __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
        var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
        var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
        var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
        var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
        var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
        var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
        var $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
        var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
        var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
        var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
        var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 5854 | 0);
        HEAP8[$1 >> 0] = 0;
        $2 = ((($0)) + 5856 | 0);
        HEAP8[$2 >> 0] = 0;
        $3 = ((($0)) + 5852 | 0);
        HEAP8[$3 >> 0] = 0;
        $4 = ((($0)) + 5596 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ($5 | 0) == (0 | 0);
        if (!($6)) {
            $7 = ((($5)) + 68 | 0);
            HEAP8[$7 >> 0] = 0;
            $8 = ((($5)) + 69 | 0);
            HEAP8[$8 >> 0] = 0;
            $9 = ((($5)) + 73 | 0);
            $10 = ((($5)) + 72 | 0);
            dest = $9; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$10 >> 0] = 0;
            HEAP32[$4 >> 2] = 0;
        }
        $11 = ((($0)) + 5600 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ($12 | 0) == (0 | 0);
        if (!($13)) {
            $125 = ((($12)) + 68 | 0);
            HEAP8[$125 >> 0] = 0;
            $126 = ((($12)) + 69 | 0);
            HEAP8[$126 >> 0] = 0;
            $127 = ((($12)) + 73 | 0);
            $128 = ((($12)) + 72 | 0);
            dest = $127; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$128 >> 0] = 0;
            HEAP32[$11 >> 2] = 0;
        }
        $129 = ((($0)) + 5604 | 0);
        $130 = HEAP32[$129 >> 2] | 0;
        $131 = ($130 | 0) == (0 | 0);
        if (!($131)) {
            $132 = ((($130)) + 68 | 0);
            HEAP8[$132 >> 0] = 0;
            $133 = ((($130)) + 69 | 0);
            HEAP8[$133 >> 0] = 0;
            $134 = ((($130)) + 73 | 0);
            $135 = ((($130)) + 72 | 0);
            dest = $134; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$135 >> 0] = 0;
            HEAP32[$129 >> 2] = 0;
        }
        $136 = ((($0)) + 5608 | 0);
        $137 = HEAP32[$136 >> 2] | 0;
        $138 = ($137 | 0) == (0 | 0);
        if (!($138)) {
            $139 = ((($137)) + 68 | 0);
            HEAP8[$139 >> 0] = 0;
            $140 = ((($137)) + 69 | 0);
            HEAP8[$140 >> 0] = 0;
            $141 = ((($137)) + 73 | 0);
            $142 = ((($137)) + 72 | 0);
            dest = $141; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$142 >> 0] = 0;
            HEAP32[$136 >> 2] = 0;
        }
        $143 = ((($0)) + 5612 | 0);
        $144 = HEAP32[$143 >> 2] | 0;
        $145 = ($144 | 0) == (0 | 0);
        if (!($145)) {
            $146 = ((($144)) + 68 | 0);
            HEAP8[$146 >> 0] = 0;
            $147 = ((($144)) + 69 | 0);
            HEAP8[$147 >> 0] = 0;
            $148 = ((($144)) + 73 | 0);
            $149 = ((($144)) + 72 | 0);
            dest = $148; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$149 >> 0] = 0;
            HEAP32[$143 >> 2] = 0;
        }
        $150 = ((($0)) + 5616 | 0);
        $151 = HEAP32[$150 >> 2] | 0;
        $152 = ($151 | 0) == (0 | 0);
        if (!($152)) {
            $153 = ((($151)) + 68 | 0);
            HEAP8[$153 >> 0] = 0;
            $154 = ((($151)) + 69 | 0);
            HEAP8[$154 >> 0] = 0;
            $155 = ((($151)) + 73 | 0);
            $156 = ((($151)) + 72 | 0);
            dest = $155; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$156 >> 0] = 0;
            HEAP32[$150 >> 2] = 0;
        }
        $157 = ((($0)) + 5620 | 0);
        $158 = HEAP32[$157 >> 2] | 0;
        $159 = ($158 | 0) == (0 | 0);
        if (!($159)) {
            $160 = ((($158)) + 68 | 0);
            HEAP8[$160 >> 0] = 0;
            $161 = ((($158)) + 69 | 0);
            HEAP8[$161 >> 0] = 0;
            $162 = ((($158)) + 73 | 0);
            $163 = ((($158)) + 72 | 0);
            dest = $162; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$163 >> 0] = 0;
            HEAP32[$157 >> 2] = 0;
        }
        $164 = ((($0)) + 5624 | 0);
        $165 = HEAP32[$164 >> 2] | 0;
        $166 = ($165 | 0) == (0 | 0);
        if (!($166)) {
            $167 = ((($165)) + 68 | 0);
            HEAP8[$167 >> 0] = 0;
            $168 = ((($165)) + 69 | 0);
            HEAP8[$168 >> 0] = 0;
            $169 = ((($165)) + 73 | 0);
            $170 = ((($165)) + 72 | 0);
            dest = $169; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$170 >> 0] = 0;
            HEAP32[$164 >> 2] = 0;
        }
        $171 = ((($0)) + 5628 | 0);
        $172 = HEAP32[$171 >> 2] | 0;
        $173 = ($172 | 0) == (0 | 0);
        if (!($173)) {
            $174 = ((($172)) + 68 | 0);
            HEAP8[$174 >> 0] = 0;
            $175 = ((($172)) + 69 | 0);
            HEAP8[$175 >> 0] = 0;
            $176 = ((($172)) + 73 | 0);
            $177 = ((($172)) + 72 | 0);
            dest = $176; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$177 >> 0] = 0;
            HEAP32[$171 >> 2] = 0;
        }
        $178 = ((($0)) + 5632 | 0);
        $179 = HEAP32[$178 >> 2] | 0;
        $180 = ($179 | 0) == (0 | 0);
        if (!($180)) {
            $181 = ((($179)) + 68 | 0);
            HEAP8[$181 >> 0] = 0;
            $182 = ((($179)) + 69 | 0);
            HEAP8[$182 >> 0] = 0;
            $183 = ((($179)) + 73 | 0);
            $184 = ((($179)) + 72 | 0);
            dest = $183; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$184 >> 0] = 0;
            HEAP32[$178 >> 2] = 0;
        }
        $185 = ((($0)) + 5636 | 0);
        $186 = HEAP32[$185 >> 2] | 0;
        $187 = ($186 | 0) == (0 | 0);
        if (!($187)) {
            $188 = ((($186)) + 68 | 0);
            HEAP8[$188 >> 0] = 0;
            $189 = ((($186)) + 69 | 0);
            HEAP8[$189 >> 0] = 0;
            $190 = ((($186)) + 73 | 0);
            $191 = ((($186)) + 72 | 0);
            dest = $190; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$191 >> 0] = 0;
            HEAP32[$185 >> 2] = 0;
        }
        $192 = ((($0)) + 5640 | 0);
        $193 = HEAP32[$192 >> 2] | 0;
        $194 = ($193 | 0) == (0 | 0);
        if (!($194)) {
            $195 = ((($193)) + 68 | 0);
            HEAP8[$195 >> 0] = 0;
            $196 = ((($193)) + 69 | 0);
            HEAP8[$196 >> 0] = 0;
            $197 = ((($193)) + 73 | 0);
            $198 = ((($193)) + 72 | 0);
            dest = $197; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$198 >> 0] = 0;
            HEAP32[$192 >> 2] = 0;
        }
        $199 = ((($0)) + 5644 | 0);
        $200 = HEAP32[$199 >> 2] | 0;
        $201 = ($200 | 0) == (0 | 0);
        if (!($201)) {
            $202 = ((($200)) + 68 | 0);
            HEAP8[$202 >> 0] = 0;
            $203 = ((($200)) + 69 | 0);
            HEAP8[$203 >> 0] = 0;
            $204 = ((($200)) + 73 | 0);
            $205 = ((($200)) + 72 | 0);
            dest = $204; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$205 >> 0] = 0;
            HEAP32[$199 >> 2] = 0;
        }
        $206 = ((($0)) + 5648 | 0);
        $207 = HEAP32[$206 >> 2] | 0;
        $208 = ($207 | 0) == (0 | 0);
        if (!($208)) {
            $209 = ((($207)) + 68 | 0);
            HEAP8[$209 >> 0] = 0;
            $210 = ((($207)) + 69 | 0);
            HEAP8[$210 >> 0] = 0;
            $211 = ((($207)) + 73 | 0);
            $212 = ((($207)) + 72 | 0);
            dest = $211; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$212 >> 0] = 0;
            HEAP32[$206 >> 2] = 0;
        }
        $213 = ((($0)) + 5652 | 0);
        $214 = HEAP32[$213 >> 2] | 0;
        $215 = ($214 | 0) == (0 | 0);
        if (!($215)) {
            $216 = ((($214)) + 68 | 0);
            HEAP8[$216 >> 0] = 0;
            $217 = ((($214)) + 69 | 0);
            HEAP8[$217 >> 0] = 0;
            $218 = ((($214)) + 73 | 0);
            $219 = ((($214)) + 72 | 0);
            dest = $218; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$219 >> 0] = 0;
            HEAP32[$213 >> 2] = 0;
        }
        $220 = ((($0)) + 5656 | 0);
        $221 = HEAP32[$220 >> 2] | 0;
        $222 = ($221 | 0) == (0 | 0);
        if (!($222)) {
            $223 = ((($221)) + 68 | 0);
            HEAP8[$223 >> 0] = 0;
            $224 = ((($221)) + 69 | 0);
            HEAP8[$224 >> 0] = 0;
            $225 = ((($221)) + 73 | 0);
            $226 = ((($221)) + 72 | 0);
            dest = $225; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$226 >> 0] = 0;
            HEAP32[$220 >> 2] = 0;
        }
        HEAP8[$1 >> 0] = 0;
        $19 = ((($0)) + 5724 | 0);
        $15 = HEAP32[$19 >> 2] | 0;
        $227 = ($15 | 0) == (0 | 0);
        if (!($227)) {
            $14 = ((($15)) + 68 | 0);
            HEAP8[$14 >> 0] = 0;
            $16 = ((($15)) + 69 | 0);
            HEAP8[$16 >> 0] = 0;
            $17 = ((($15)) + 73 | 0);
            $18 = ((($15)) + 72 | 0);
            dest = $17; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$18 >> 0] = 0;
            HEAP32[$19 >> 2] = 0;
        }
        $20 = ((($0)) + 5728 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ($21 | 0) == (0 | 0);
        if (!($22)) {
            $23 = ((($21)) + 68 | 0);
            HEAP8[$23 >> 0] = 0;
            $24 = ((($21)) + 69 | 0);
            HEAP8[$24 >> 0] = 0;
            $25 = ((($21)) + 73 | 0);
            $26 = ((($21)) + 72 | 0);
            dest = $25; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$26 >> 0] = 0;
            HEAP32[$20 >> 2] = 0;
        }
        $27 = ((($0)) + 5732 | 0);
        $28 = HEAP32[$27 >> 2] | 0;
        $29 = ($28 | 0) == (0 | 0);
        if (!($29)) {
            $30 = ((($28)) + 68 | 0);
            HEAP8[$30 >> 0] = 0;
            $31 = ((($28)) + 69 | 0);
            HEAP8[$31 >> 0] = 0;
            $32 = ((($28)) + 73 | 0);
            $33 = ((($28)) + 72 | 0);
            dest = $32; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$33 >> 0] = 0;
            HEAP32[$27 >> 2] = 0;
        }
        $34 = ((($0)) + 5736 | 0);
        $35 = HEAP32[$34 >> 2] | 0;
        $36 = ($35 | 0) == (0 | 0);
        if (!($36)) {
            $37 = ((($35)) + 68 | 0);
            HEAP8[$37 >> 0] = 0;
            $38 = ((($35)) + 69 | 0);
            HEAP8[$38 >> 0] = 0;
            $39 = ((($35)) + 73 | 0);
            $40 = ((($35)) + 72 | 0);
            dest = $39; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$40 >> 0] = 0;
            HEAP32[$34 >> 2] = 0;
        }
        $41 = ((($0)) + 5740 | 0);
        $42 = HEAP32[$41 >> 2] | 0;
        $43 = ($42 | 0) == (0 | 0);
        if (!($43)) {
            $44 = ((($42)) + 68 | 0);
            HEAP8[$44 >> 0] = 0;
            $45 = ((($42)) + 69 | 0);
            HEAP8[$45 >> 0] = 0;
            $46 = ((($42)) + 73 | 0);
            $47 = ((($42)) + 72 | 0);
            dest = $46; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$47 >> 0] = 0;
            HEAP32[$41 >> 2] = 0;
        }
        $48 = ((($0)) + 5744 | 0);
        $49 = HEAP32[$48 >> 2] | 0;
        $50 = ($49 | 0) == (0 | 0);
        if (!($50)) {
            $51 = ((($49)) + 68 | 0);
            HEAP8[$51 >> 0] = 0;
            $52 = ((($49)) + 69 | 0);
            HEAP8[$52 >> 0] = 0;
            $53 = ((($49)) + 73 | 0);
            $54 = ((($49)) + 72 | 0);
            dest = $53; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$54 >> 0] = 0;
            HEAP32[$48 >> 2] = 0;
        }
        $55 = ((($0)) + 5748 | 0);
        $56 = HEAP32[$55 >> 2] | 0;
        $57 = ($56 | 0) == (0 | 0);
        if (!($57)) {
            $58 = ((($56)) + 68 | 0);
            HEAP8[$58 >> 0] = 0;
            $59 = ((($56)) + 69 | 0);
            HEAP8[$59 >> 0] = 0;
            $60 = ((($56)) + 73 | 0);
            $61 = ((($56)) + 72 | 0);
            dest = $60; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$61 >> 0] = 0;
            HEAP32[$55 >> 2] = 0;
        }
        $62 = ((($0)) + 5752 | 0);
        $63 = HEAP32[$62 >> 2] | 0;
        $64 = ($63 | 0) == (0 | 0);
        if (!($64)) {
            $65 = ((($63)) + 68 | 0);
            HEAP8[$65 >> 0] = 0;
            $66 = ((($63)) + 69 | 0);
            HEAP8[$66 >> 0] = 0;
            $67 = ((($63)) + 73 | 0);
            $68 = ((($63)) + 72 | 0);
            dest = $67; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$68 >> 0] = 0;
            HEAP32[$62 >> 2] = 0;
        }
        $69 = ((($0)) + 5756 | 0);
        $70 = HEAP32[$69 >> 2] | 0;
        $71 = ($70 | 0) == (0 | 0);
        if (!($71)) {
            $72 = ((($70)) + 68 | 0);
            HEAP8[$72 >> 0] = 0;
            $73 = ((($70)) + 69 | 0);
            HEAP8[$73 >> 0] = 0;
            $74 = ((($70)) + 73 | 0);
            $75 = ((($70)) + 72 | 0);
            dest = $74; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$75 >> 0] = 0;
            HEAP32[$69 >> 2] = 0;
        }
        $76 = ((($0)) + 5760 | 0);
        $77 = HEAP32[$76 >> 2] | 0;
        $78 = ($77 | 0) == (0 | 0);
        if (!($78)) {
            $79 = ((($77)) + 68 | 0);
            HEAP8[$79 >> 0] = 0;
            $80 = ((($77)) + 69 | 0);
            HEAP8[$80 >> 0] = 0;
            $81 = ((($77)) + 73 | 0);
            $82 = ((($77)) + 72 | 0);
            dest = $81; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$82 >> 0] = 0;
            HEAP32[$76 >> 2] = 0;
        }
        $83 = ((($0)) + 5764 | 0);
        $84 = HEAP32[$83 >> 2] | 0;
        $85 = ($84 | 0) == (0 | 0);
        if (!($85)) {
            $86 = ((($84)) + 68 | 0);
            HEAP8[$86 >> 0] = 0;
            $87 = ((($84)) + 69 | 0);
            HEAP8[$87 >> 0] = 0;
            $88 = ((($84)) + 73 | 0);
            $89 = ((($84)) + 72 | 0);
            dest = $88; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$89 >> 0] = 0;
            HEAP32[$83 >> 2] = 0;
        }
        $90 = ((($0)) + 5768 | 0);
        $91 = HEAP32[$90 >> 2] | 0;
        $92 = ($91 | 0) == (0 | 0);
        if (!($92)) {
            $93 = ((($91)) + 68 | 0);
            HEAP8[$93 >> 0] = 0;
            $94 = ((($91)) + 69 | 0);
            HEAP8[$94 >> 0] = 0;
            $95 = ((($91)) + 73 | 0);
            $96 = ((($91)) + 72 | 0);
            dest = $95; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$96 >> 0] = 0;
            HEAP32[$90 >> 2] = 0;
        }
        $97 = ((($0)) + 5772 | 0);
        $98 = HEAP32[$97 >> 2] | 0;
        $99 = ($98 | 0) == (0 | 0);
        if (!($99)) {
            $100 = ((($98)) + 68 | 0);
            HEAP8[$100 >> 0] = 0;
            $101 = ((($98)) + 69 | 0);
            HEAP8[$101 >> 0] = 0;
            $102 = ((($98)) + 73 | 0);
            $103 = ((($98)) + 72 | 0);
            dest = $102; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$103 >> 0] = 0;
            HEAP32[$97 >> 2] = 0;
        }
        $104 = ((($0)) + 5776 | 0);
        $105 = HEAP32[$104 >> 2] | 0;
        $106 = ($105 | 0) == (0 | 0);
        if (!($106)) {
            $107 = ((($105)) + 68 | 0);
            HEAP8[$107 >> 0] = 0;
            $108 = ((($105)) + 69 | 0);
            HEAP8[$108 >> 0] = 0;
            $109 = ((($105)) + 73 | 0);
            $110 = ((($105)) + 72 | 0);
            dest = $109; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$110 >> 0] = 0;
            HEAP32[$104 >> 2] = 0;
        }
        $111 = ((($0)) + 5780 | 0);
        $112 = HEAP32[$111 >> 2] | 0;
        $113 = ($112 | 0) == (0 | 0);
        if (!($113)) {
            $114 = ((($112)) + 68 | 0);
            HEAP8[$114 >> 0] = 0;
            $115 = ((($112)) + 69 | 0);
            HEAP8[$115 >> 0] = 0;
            $116 = ((($112)) + 73 | 0);
            $117 = ((($112)) + 72 | 0);
            dest = $116; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            HEAP8[$117 >> 0] = 0;
            HEAP32[$111 >> 2] = 0;
        }
        $118 = ((($0)) + 5784 | 0);
        $119 = HEAP32[$118 >> 2] | 0;
        $120 = ($119 | 0) == (0 | 0);
        if ($120) {
            HEAP8[$2 >> 0] = 0;
            return;
        }
        $121 = ((($119)) + 68 | 0);
        HEAP8[$121 >> 0] = 0;
        $122 = ((($119)) + 69 | 0);
        HEAP8[$122 >> 0] = 0;
        $123 = ((($119)) + 73 | 0);
        $124 = ((($119)) + 72 | 0);
        dest = $123; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
        HEAP8[$124 >> 0] = 0;
        HEAP32[$118 >> 2] = 0;
        HEAP8[$2 >> 0] = 0;
        return;
    }
    function __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($0 | 0) == (0 | 0);
        if ($2) {
            return;
        }
        $3 = HEAP32[$0 >> 2] | 0;
        $4 = ($3 | 0) == (0 | 0);
        if (!($4)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1, $3, 22123);
        }
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($1, $0, 22140);
        return;
    }
    function __ZN7WelsDec13UninitFmoListEPNS_6TagFmoEiiPN10WelsCommon12CMemoryAlignE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$02731 = 0, $$02830 = 0, $$032 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
        var $8 = 0, $9 = 0, $or$cond = 0, $or$cond29 = 0, $or$cond29$not = 0, $or$cond34 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ($0 | 0) == (0 | 0);
        $5 = ($2 | 0) < (1);
        $or$cond = $4 | $5;
        $6 = ($1 | 0) < ($2 | 0);
        $or$cond29 = $6 | $or$cond;
        $or$cond29$not = $or$cond29 ^ 1;
        $7 = ($1 | 0) > (0);
        $or$cond34 = $7 & $or$cond29$not;
        if ($or$cond34) {
            $$02731 = 0; $$02830 = $0; $$032 = 0;
        } else {
            return;
        }
        while (1) {
            $8 = ($$02830 | 0) == (0 | 0);
            if ($8) {
                $$1 = $$032;
            } else {
                $9 = ((($$02830)) + 16 | 0);
                $10 = HEAP8[$9 >> 0] | 0;
                $11 = ($10 << 24 >> 24) == (0);
                if ($11) {
                    $$1 = $$032;
                } else {
                    $12 = HEAP32[$$02830 >> 2] | 0;
                    $13 = ($12 | 0) == (0 | 0);
                    if (!($13)) {
                        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3, $12, 22145);
                        HEAP32[$$02830 >> 2] = 0;
                    }
                    $14 = ((($$02830)) + 8 | 0);
                    HEAP32[$14 >> 2] = 0;
                    $15 = ((($$02830)) + 12 | 0);
                    HEAP32[$15 >> 2] = -1;
                    $16 = ((($$02830)) + 4 | 0);
                    HEAP32[$16 >> 2] = 0;
                    HEAP8[$9 >> 0] = 0;
                    $17 = (($$032) + 1) | 0;
                    $18 = ($17 | 0) < ($2 | 0);
                    if ($18) {
                        $$1 = $17;
                    } else {
                        label = 8;
                        break;
                    }
                }
            }
            $19 = ((($$02830)) + 20 | 0);
            $20 = (($$02731) + 1) | 0;
            $21 = ($20 | 0) < ($1 | 0);
            if ($21) {
                $$02731 = $20; $$02830 = $19; $$032 = $$1;
            } else {
                label = 8;
                break;
            }
        }
        if ((label | 0) == 8) {
            return;
        }
    }
    function _DecoderSetCsp($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $2 = ($0 | 0) == (0 | 0);
        L1: do {
            if ($2) {
                $$0 = 1;
            } else {
                $3 = ((($0)) + 56 | 0);
                HEAP32[$3 >> 2] = $1;
                $4 = ((($0)) + 48 | 0);
                $5 = HEAP32[$4 >> 2] | 0;
                $6 = ($5 | 0) == (0 | 0);
                if (!($6)) {
                    $7 = ((($5)) + 4 | 0);
                    HEAP32[$7 >> 2] = $1;
                }
                switch ($1 | 0) {
                    case 23: {
                        $$0 = 0;
                        break L1;
                        break;
                    }
                    case 25: {
                        HEAP32[$3 >> 2] = 23;
                        $8 = HEAP32[$4 >> 2] | 0;
                        $9 = ((($8)) + 4 | 0);
                        HEAP32[$9 >> 2] = 23;
                        $$0 = 0;
                        break L1;
                        break;
                    }
                    default: {
                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 22492, $vararg_buffer);
                        HEAP32[$3 >> 2] = 23;
                        $10 = HEAP32[$4 >> 2] | 0;
                        $11 = ((($10)) + 4 | 0);
                        HEAP32[$11 >> 2] = 23;
                        $$0 = 5;
                        break L1;
                    }
                }
            }
        } while (0);
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec12InitErrorConEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 242340 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        switch ($2 | 0) {
            case 5: case 7: {
                break;
            }
            case 6: case 4: case 2: {
                $3 = ((($0)) + 84 | 0);
                HEAP8[$3 >> 0] = 0;
                break;
            }
            default: {
                return;
            }
        }
        $4 = ((($0)) + 317056 | 0);
        HEAP32[$4 >> 2] = 5;
        $5 = ((($0)) + 317060 | 0);
        HEAP32[$5 >> 2] = 6;
        return;
    }
    function __ZN7WelsDec13CheckBsBufferEPNS_21TagWelsDecoderContextEi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $2 = ($1 | 0) > (7077888);
        if ($2) {
            HEAP32[$vararg_buffer >> 2] = 7077888;
            $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
            HEAP32[$vararg_ptr1 >> 2] = $1;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 30378, $vararg_buffer);
            $3 = ((($0)) + 116 | 0);
            $4 = HEAP32[$3 >> 2] | 0;
            $5 = $4 | 4;
            HEAP32[$3 >> 2] = $5;
            $$0 = 2;
            STACKTOP = sp; return ($$0 | 0);
        }
        $6 = ((($0)) + 6172 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (($7 | 0) / 3) & -1;
        $9 = ($8 | 0) < ($1 | 0);
        if ($9) {
            $10 = (__ZN7WelsDec14ExpandBsBufferEPNS_21TagWelsDecoderContextEi($0, $1) | 0);
            $11 = ($10 | 0) == (0);
            if (!($11)) {
                $$0 = 1;
                STACKTOP = sp; return ($$0 | 0);
            }
        }
        $$0 = 0;
        STACKTOP = sp; return ($$0 | 0);
    }
    function _WelsDecodeBs($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$0$ph = 0, $$0175$ph$lcssa191 = 0, $$0175$ph206 = 0, $$0177$ph$lcssa193 = 0, $$0177$ph205 = 0, $$0181$be = 0, $$0181$lcssa = 0, $$0181196 = 0, $$0182$ph204 = 0, $$0182195 = 0, $$0183$be = 0, $$0183$lcssa = 0, $$0183194 = 0, $$1179 = 0, $$2 = 0, $$2180 = 0, $$3 = 0, $$4 = 0, $$in = 0, $$pre = 0;
        var $$pre223 = 0, $$sink211 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
        var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
        var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
        var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $6 = sp + 4 | 0;
        $7 = sp;
        $8 = ((($0)) + 241950 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ($9 << 24 >> 24) == (0);
        if (!($10)) {
            $140 = ((($0)) + 241888 | 0);
            $141 = HEAP32[$140 >> 2] | 0;
            $142 = ((($141)) + 4 | 0);
            $143 = HEAP32[$142 >> 2] | 0;
            $144 = ($143 | 0) == (0);
            if ($144) {
                $145 = ((($0)) + 116 | 0);
                $$pre = HEAP32[$145 >> 2] | 0;
                $$2 = $$pre;
                STACKTOP = sp; return ($$2 | 0);
            }
            $146 = (($143) + -1) | 0;
            $147 = ((($141)) + 20 | 0);
            HEAP32[$147 >> 2] = $146;
            (__ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $3, $4) | 0);
            __ZN7WelsDec18DecodeFinishUpdateEPNS_21TagWelsDecoderContextE($0);
            $148 = ((($0)) + 116 | 0);
            $149 = HEAP32[$148 >> 2] | 0;
            $150 = $149 & 16400;
            $151 = ($150 | 0) == (0);
            if ($151) {
                $$2 = $149;
                STACKTOP = sp; return ($$2 | 0);
            }
            $152 = ((($0)) + 242324 | 0);
            HEAP8[$152 >> 0] = 1;
            $$2 = $149;
            STACKTOP = sp; return ($$2 | 0);
        }
        $11 = ((($0)) + 16 | 0);
        HEAP32[$6 >> 2] = 0;
        HEAP32[$7 >> 2] = 0;
        $12 = (__ZN7WelsDec21DetectStartCodePrefixEPKhPii($1, $7, $2) | 0);
        $13 = ($12 | 0) == (0 | 0);
        L12: do {
            if ($13) {
                $14 = ((($0)) + 116 | 0);
                $15 = HEAP32[$14 >> 2] | 0;
                $16 = $15 | 4;
                HEAP32[$14 >> 2] = $16;
                $$0$ph = 4;
            } else {
                $17 = HEAP32[$7 >> 2] | 0;
                $18 = (($1) + ($17) | 0);
                $19 = (($2) - ($17)) | 0;
                $20 = (($2) + 4) | 0;
                $21 = ((($0)) + 20 | 0);
                $22 = HEAP32[$21 >> 2] | 0;
                $23 = ((($0)) + 28 | 0);
                $24 = HEAP32[$23 >> 2] | 0;
                $25 = (($22) - ($24)) | 0;
                $26 = ($20 | 0) > ($25 | 0);
                if ($26) {
                    $27 = HEAP32[$11 >> 2] | 0;
                    HEAP32[$23 >> 2] = $27;
                    $$in = $27;
                } else {
                    $$in = $24;
                }
                $28 = $$in;
                $29 = ((($0)) + 242344 | 0);
                $30 = HEAP8[$29 >> 0] | 0;
                $31 = ($30 << 24 >> 24) == (0);
                if (!($31)) {
                    $32 = ((($0)) + 36 | 0);
                    $33 = HEAP32[$32 >> 2] | 0;
                    $34 = ((($0)) + 44 | 0);
                    $35 = HEAP32[$34 >> 2] | 0;
                    $36 = (($33) - ($35)) | 0;
                    $37 = ($20 | 0) > ($36 | 0);
                    if ($37) {
                        $38 = ((($0)) + 32 | 0);
                        $39 = HEAP32[$38 >> 2] | 0;
                        HEAP32[$34 >> 2] = $39;
                    }
                }
                $40 = ($19 | 0) > (0);
                $41 = ((($0)) + 88 | 0);
                L22: do {
                    if ($40) {
                        $42 = ((($0)) + 116 | 0);
                        $43 = (($19) + 4) | 0;
                        $44 = ((($0)) + 242324 | 0);
                        $45 = ((($0)) + 92 | 0);
                        $46 = ((($0)) + 317168 | 0);
                        $47 = ((($0)) + 241888 | 0);
                        $$0175$ph206 = $28; $$0177$ph205 = $18; $$0182$ph204 = 0;
                        while (1) {
                            $$0181196 = 0; $$0182195 = $$0182$ph204; $$0183194 = 0;
                            L26: while (1) {
                                $48 = (($$0182195) + 2) | 0;
                                $49 = ($48 | 0) < ($19 | 0);
                                $50 = (($$0177$ph205) + ($$0183194) | 0);
                                L28: do {
                                    if ($49) {
                                        $51 = HEAPU8[$50 >> 0] | (HEAPU8[$50 + 1 >> 0] << 8);
                                        $52 = ($51 << 16 >> 16) == (0);
                                        $53 = $51 & 255;
                                        if ($52) {
                                            $54 = (($$0183194) + 2) | 0;
                                            $55 = (($$0177$ph205) + ($54) | 0);
                                            $56 = HEAP8[$55 >> 0] | 0;
                                            switch ($56 << 24 >> 24) {
                                                case 1: {
                                                    break L26;
                                                    break;
                                                }
                                                case 3: {
                                                    break;
                                                }
                                                default: {
                                                    $103 = $53;
                                                    label = 31;
                                                    break L28;
                                                }
                                            }
                                            $57 = (($$0175$ph206) + ($$0181196) | 0);
                                            HEAP8[$57 >> 0] = 0 & 255; HEAP8[$57 + 1 >> 0] = 0 >> 8;
                                            $58 = (($$0181196) + 2) | 0;
                                            $59 = (($$0183194) + 3) | 0;
                                            $$0181$be = $58; $$0183$be = $59; $$sink211 = 3;
                                        } else {
                                            $103 = $53;
                                            label = 31;
                                        }
                                    } else {
                                        $$pre223 = HEAP8[$50 >> 0] | 0;
                                        $103 = $$pre223;
                                        label = 31;
                                    }
                                } while (0);
                                if ((label | 0) == 31) {
                                    label = 0;
                                    $100 = (($$0183194) + 1) | 0;
                                    $101 = (($$0181196) + 1) | 0;
                                    $102 = (($$0175$ph206) + ($$0181196) | 0);
                                    HEAP8[$102 >> 0] = $103;
                                    $$0181$be = $101; $$0183$be = $100; $$sink211 = 1;
                                }
                                $104 = (($$0182195) + ($$sink211)) | 0;
                                $105 = ($19 | 0) > ($104 | 0);
                                if ($105) {
                                    $$0181196 = $$0181$be; $$0182195 = $104; $$0183194 = $$0183$be;
                                } else {
                                    $$0175$ph$lcssa191 = $$0175$ph206; $$0177$ph$lcssa193 = $$0177$ph205; $$0181$lcssa = $$0181$be; $$0183$lcssa = $$0183$be;
                                    break L22;
                                }
                            }
                            HEAP32[$6 >> 2] = 0;
                            $60 = (($$0181196) + 3) | 0;
                            $61 = (($$0175$ph206) + ($60) | 0);
                            HEAP8[$61 >> 0] = 0;
                            $62 = (($$0181196) + 2) | 0;
                            $63 = (($$0175$ph206) + ($62) | 0);
                            HEAP8[$63 >> 0] = 0;
                            $64 = (($$0181196) + 1) | 0;
                            $65 = (($$0175$ph206) + ($64) | 0);
                            HEAP8[$65 >> 0] = 0;
                            $66 = (($$0175$ph206) + ($$0181196) | 0);
                            HEAP8[$66 >> 0] = 0;
                            $67 = ((($$0177$ph205)) + -3 | 0);
                            $68 = (($$0183194) + 3) | 0;
                            $69 = (__ZN7WelsDec14ParseNalHeaderEPNS_21TagWelsDecoderContextEPN10WelsCommon16TagNalUnitHeaderEPhiS5_iPi($0, $41, $$0175$ph206, $$0181196, $67, $68, $6) | 0);
                            $70 = ($69 | 0) == (0 | 0);
                            if ($70) {
                                $$2180 = 0;
                            } else {
                                $71 = HEAP32[$45 >> 2] | 0;
                                switch ($71 | 0) {
                                    case 15: case 8: case 7: {
                                        $72 = HEAP32[$6 >> 2] | 0;
                                        $73 = (($$0181196) - ($72)) | 0;
                                        $74 = (__ZN7WelsDec14ParseNonVclNalEPNS_21TagWelsDecoderContextEPhiS2_i($0, $69, $73, $67, $68) | 0);
                                        $$1179 = $74;
                                        break;
                                    }
                                    default: {
                                        $$1179 = 0;
                                    }
                                }
                                (__ZN7WelsDec21CheckAndFinishLastPicEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $3, $4) | 0);
                                $75 = HEAP8[$46 >> 0] | 0;
                                $76 = ($75 << 24 >> 24) == (0);
                                if ($76) {
                                    $$2180 = $$1179;
                                } else {
                                    $77 = HEAP32[$47 >> 2] | 0;
                                    $78 = ((($77)) + 4 | 0);
                                    $79 = HEAP32[$78 >> 2] | 0;
                                    $80 = ($79 | 0) == (0);
                                    if ($80) {
                                        $$2180 = $$1179;
                                    } else {
                                        (__ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $3, $4) | 0);
                                        $$2180 = $$1179;
                                    }
                                }
                            }
                            __ZN7WelsDec18DecodeFinishUpdateEPNS_21TagWelsDecoderContextE($0);
                            $81 = HEAP32[$42 >> 2] | 0;
                            $82 = $81 & 16400;
                            $83 = ($82 | 0) == (0);
                            if (!($83)) {
                                HEAP8[$44 >> 0] = 1;
                                $84 = $81 & 16384;
                                $85 = ($84 | 0) == (0);
                                if (!($85)) {
                                    $$0$ph = $81;
                                    break L12;
                                }
                            }
                            $86 = ($$2180 | 0) == (0);
                            if (!($86)) {
                                break;
                            }
                            $89 = (($$0181196) + 4) | 0;
                            $90 = (($$0175$ph206) + ($89) | 0);
                            $91 = (($43) - ($$0182195)) | 0;
                            $92 = HEAP32[$21 >> 2] | 0;
                            $93 = $90;
                            $94 = (($92) - ($93)) | 0;
                            $95 = ($91 | 0) > ($94 | 0);
                            if ($95) {
                                $96 = HEAP32[$11 >> 2] | 0;
                                $storemerge = $96;
                            } else {
                                $storemerge = $90;
                            }
                            HEAP32[$23 >> 2] = $storemerge;
                            $97 = (($$0177$ph205) + ($68) | 0);
                            $98 = (($$0182195) + 3) | 0;
                            $99 = ($19 | 0) > ($98 | 0);
                            if ($99) {
                                $$0175$ph206 = $storemerge; $$0177$ph205 = $97; $$0182$ph204 = $98;
                            } else {
                                $$0175$ph$lcssa191 = $storemerge; $$0177$ph$lcssa193 = $97; $$0181$lcssa = 0; $$0183$lcssa = 0;
                                break L22;
                            }
                        }
                        $87 = $81 & 16;
                        $88 = ($87 | 0) == (0);
                        if ($88) {
                            $$0$ph = $81;
                            break L12;
                        }
                        HEAP8[$44 >> 0] = 1;
                        $$0$ph = $81;
                        break L12;
                    } else {
                        $$0175$ph$lcssa191 = $28; $$0177$ph$lcssa193 = $18; $$0181$lcssa = 0; $$0183$lcssa = 0;
                    }
                } while (0);
                HEAP32[$6 >> 2] = 0;
                $106 = (($$0181$lcssa) + 3) | 0;
                $107 = (($$0175$ph$lcssa191) + ($106) | 0);
                HEAP8[$107 >> 0] = 0;
                $108 = (($$0181$lcssa) + 2) | 0;
                $109 = (($$0175$ph$lcssa191) + ($108) | 0);
                HEAP8[$109 >> 0] = 0;
                $110 = (($$0181$lcssa) + 1) | 0;
                $111 = (($$0175$ph$lcssa191) + ($110) | 0);
                HEAP8[$111 >> 0] = 0;
                $112 = (($$0175$ph$lcssa191) + ($$0181$lcssa) | 0);
                HEAP8[$112 >> 0] = 0;
                $113 = ((($112)) + 4 | 0);
                HEAP32[$23 >> 2] = $113;
                $114 = ((($$0177$ph$lcssa193)) + -3 | 0);
                $115 = (($$0183$lcssa) + 3) | 0;
                $116 = (__ZN7WelsDec14ParseNalHeaderEPNS_21TagWelsDecoderContextEPN10WelsCommon16TagNalUnitHeaderEPhiS5_iPi($0, $41, $$0175$ph$lcssa191, $$0181$lcssa, $114, $115, $6) | 0);
                $117 = ($116 | 0) == (0 | 0);
                if ($117) {
                    $$4 = 0;
                } else {
                    $118 = ((($0)) + 92 | 0);
                    $119 = HEAP32[$118 >> 2] | 0;
                    switch ($119 | 0) {
                        case 15: case 8: case 7: {
                            $120 = HEAP32[$6 >> 2] | 0;
                            $121 = (($$0181$lcssa) - ($120)) | 0;
                            $122 = (__ZN7WelsDec14ParseNonVclNalEPNS_21TagWelsDecoderContextEPhiS2_i($0, $116, $121, $114, $115) | 0);
                            $$3 = $122;
                            break;
                        }
                        default: {
                            $$3 = 0;
                        }
                    }
                    (__ZN7WelsDec21CheckAndFinishLastPicEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $3, $4) | 0);
                    $123 = ((($0)) + 317168 | 0);
                    $124 = HEAP8[$123 >> 0] | 0;
                    $125 = ($124 << 24 >> 24) == (0);
                    if ($125) {
                        $$4 = $$3;
                    } else {
                        $126 = ((($0)) + 241888 | 0);
                        $127 = HEAP32[$126 >> 2] | 0;
                        $128 = ((($127)) + 4 | 0);
                        $129 = HEAP32[$128 >> 2] | 0;
                        $130 = ($129 | 0) == (0);
                        if ($130) {
                            $$4 = $$3;
                        } else {
                            (__ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $3, $4) | 0);
                            $$4 = $$3;
                        }
                    }
                }
                __ZN7WelsDec18DecodeFinishUpdateEPNS_21TagWelsDecoderContextE($0);
                $131 = ((($0)) + 116 | 0);
                $132 = HEAP32[$131 >> 2] | 0;
                $133 = $132 & 16400;
                $134 = ($133 | 0) == (0);
                if (!($134)) {
                    $135 = ((($0)) + 242324 | 0);
                    HEAP8[$135 >> 0] = 1;
                    $$0$ph = $132;
                    break;
                }
                $136 = ($$4 | 0) == (0);
                if ($136) {
                    $$2 = $132;
                    STACKTOP = sp; return ($$2 | 0);
                } else {
                    $137 = $132 & 16;
                    $138 = ($137 | 0) == (0);
                    if ($138) {
                        $$0$ph = $132;
                        break;
                    }
                    $139 = ((($0)) + 242324 | 0);
                    HEAP8[$139 >> 0] = 1;
                    $$0$ph = $132;
                    break;
                }
            }
        } while (0);
        $$2 = $$0$ph;
        STACKTOP = sp; return ($$2 | 0);
    }
    function __ZN7WelsDec21DetectStartCodePrefixEPKhPii($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$02233 = 0, $$02336 = 0, $$02435 = 0, $$132 = 0, $$228 = 0, $$neg = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($2 | 0) > (0);
        if ($3) {
            $$02336 = $0; $$02435 = $2;
        } else {
            $$228 = 0;
            return ($$228 | 0);
        }
        L3: while (1) {
            $$02233 = 0; $$132 = $$02336;
            while (1) {
                $4 = HEAP8[$$132 >> 0] | 0;
                $5 = ($4 << 24 >> 24) == (0);
                $6 = ((($$132)) + 1 | 0);
                if (!($5)) {
                    break;
                }
                $7 = (($$02233) + 1) | 0;
                $8 = ($7 | 0) < ($$02435 | 0);
                if ($8) {
                    $$02233 = $7; $$132 = $6;
                } else {
                    $$228 = 0;
                    label = 8;
                    break L3;
                }
            }
            $9 = ($$02233 | 0) > (1);
            $10 = ($4 << 24 >> 24) == (1);
            $or$cond = $9 & $10;
            if ($or$cond) {
                label = 6;
                break;
            }
            $$neg = (($$02435) + -1) | 0;
            $14 = (($$neg) - ($$02233)) | 0;
            $15 = ($14 | 0) > (0);
            if ($15) {
                $$02336 = $6; $$02435 = $14;
            } else {
                $$228 = 0;
                label = 8;
                break;
            }
        }
        if ((label | 0) == 6) {
            $11 = $6;
            $12 = $0;
            $13 = (($11) - ($12)) | 0;
            HEAP32[$1 >> 2] = $13;
            $$228 = $6;
            return ($$228 | 0);
        }
        else if ((label | 0) == 8) {
            return ($$228 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec14ParseNalHeaderEPNS_21TagWelsDecoderContextEPN10WelsCommon16TagNalUnitHeaderEPhiS5_iPi($0, $1, $2, $3, $4, $5, $6) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        var $$$i344 = 0, $$0 = 0, $$0$i = 0, $$0331 = 0, $$0332 = 0, $$0333 = 0, $$0335 = 0, $$0336$lcssa = 0, $$0338$off0 = 0, $$0340359 = 0, $$0340359$in = 0, $$1 = 0, $$1337 = 0, $$mask$i = 0, $$mask$i343 = 0, $$phi$trans$insert = 0, $$phi$trans$insert365 = 0, $$phi$trans$insert374 = 0, $$pre = 0, $$pre366 = 0;
        var $$pre369 = 0, $$pre375 = 0, $$pre378 = 0, $$sink = 0, $$val = 0, $$val341 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
        var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
        var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
        var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
        var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
        var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
        var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
        var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
        var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
        var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
        var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
        var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
        var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
        var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
        var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
        var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
        var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
        var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
        var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
        var $44 = 0, $440 = 0, $441 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0;
        var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
        var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
        var $99 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i346 = 0, $or$cond382 = 0, $or$cond383 = 0, $phitmp = 0, $scevgep$i = 0, $scevgep$i349 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 80 | 0;
        $vararg_buffer21 = sp + 64 | 0;
        $vararg_buffer18 = sp + 56 | 0;
        $vararg_buffer15 = sp + 48 | 0;
        $vararg_buffer13 = sp + 40 | 0;
        $vararg_buffer11 = sp + 32 | 0;
        $vararg_buffer7 = sp + 24 | 0;
        $vararg_buffer4 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $7 = ((($1)) + 4 | 0);
        HEAP32[$7 >> 2] = 0;
        $8 = ($3 | 0) > (0);
        L1: do {
            if ($8) {
                $$0340359$in = $3;
                while (1) {
                    $$0340359 = (($$0340359$in) + -1) | 0;
                    $9 = (($2) + ($$0340359) | 0);
                    $10 = HEAP8[$9 >> 0] | 0;
                    $11 = ($10 << 24 >> 24) == (0);
                    if (!($11)) {
                        $$0336$lcssa = $$0340359$in;
                        break L1;
                    }
                    $12 = HEAP32[$6 >> 2] | 0;
                    $13 = (($12) + 1) | 0;
                    HEAP32[$6 >> 2] = $13;
                    $14 = ($$0340359$in | 0) > (1);
                    if ($14) {
                        $$0340359$in = $$0340359;
                    } else {
                        $$0336$lcssa = $$0340359;
                        break;
                    }
                }
            } else {
                $$0336$lcssa = $3;
            }
        } while (0);
        $15 = HEAP8[$2 >> 0] | 0;
        $16 = ($15 & 255) >>> 7;
        HEAP8[$1 >> 0] = $16;
        $17 = ($16 << 24 >> 24) == (0);
        if (!($17)) {
            $18 = ((($0)) + 116 | 0);
            $19 = HEAP32[$18 >> 2] | 0;
            $20 = $19 | 4;
            HEAP32[$18 >> 2] = $20;
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        $21 = HEAP8[$2 >> 0] | 0;
        $22 = ($21 & 255) >>> 5;
        $23 = ((($1)) + 1 | 0);
        HEAP8[$23 >> 0] = $22;
        $24 = HEAP8[$2 >> 0] | 0;
        $25 = $24 & 31;
        $26 = $25 & 255;
        HEAP32[$7 >> 2] = $26;
        $27 = ((($2)) + 1 | 0);
        $28 = (($$0336$lcssa) + -1) | 0;
        $29 = HEAP32[$6 >> 2] | 0;
        $30 = (($29) + 1) | 0;
        HEAP32[$6 >> 2] = $30;
        $31 = HEAP32[$7 >> 2] | 0;
        $32 = $31 & -2;
        $switch = ($32 | 0) == (6);
        if (!($switch)) {
            $33 = ((($0)) + 241954 | 0);
            $34 = HEAP8[$33 >> 0] | 0;
            $35 = ($34 << 24 >> 24) == (0);
            if ($35) {
                $36 = ((($0)) + 317169 | 0);
                $37 = HEAP8[$36 >> 0] | 0;
                $38 = ($37 << 24 >> 24) != (0);
                $$phi$trans$insert = ((($0)) + 241960 | 0);
                $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
                $39 = ($$pre | 0) == (0);
                $or$cond = $38 & $39;
                if ($or$cond) {
                    HEAP32[$vararg_buffer >> 2] = $31;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28306, $vararg_buffer);
                } else {
                    $40 = (($$pre) + 1) | 0;
                    HEAP32[$$phi$trans$insert >> 2] = $40;
                }
                $41 = ((($0)) + 512320 | 0);
                $42 = HEAP32[$41 >> 2] | 0;
                $43 = (($42) + 1) | 0;
                HEAP32[$41 >> 2] = $43;
                $44 = ((($0)) + 116 | 0);
                HEAP32[$44 >> 2] = 16;
                $$1 = 0;
                STACKTOP = sp; return ($$1 | 0);
            }
        }
        $45 = ((($0)) + 241960 | 0);
        HEAP32[$45 >> 2] = 0;
        $46 = HEAP32[$7 >> 2] | 0;
        switch ($46 | 0) {
            case 15: case 8: case 7: case 6: {
                break;
            }
            default: {
                $47 = ((($0)) + 241956 | 0);
                $48 = HEAP8[$47 >> 0] | 0;
                $49 = ($48 << 24 >> 24) == (0);
                if ($49) {
                    $50 = ((($0)) + 317169 | 0);
                    $51 = HEAP8[$50 >> 0] | 0;
                    $52 = ($51 << 24 >> 24) != (0);
                    $$phi$trans$insert374 = ((($0)) + 241968 | 0);
                    $$pre375 = HEAP32[$$phi$trans$insert374 >> 2] | 0;
                    $53 = ($$pre375 | 0) == (0);
                    $or$cond382 = $52 & $53;
                    if ($or$cond382) {
                        HEAP32[$vararg_buffer1 >> 2] = $46;
                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28403, $vararg_buffer1);
                    } else {
                        $54 = (($$pre375) + 1) | 0;
                        HEAP32[$$phi$trans$insert374 >> 2] = $54;
                    }
                    $55 = ((($0)) + 512328 | 0);
                    $56 = HEAP32[$55 >> 2] | 0;
                    $57 = (($56) + 1) | 0;
                    HEAP32[$55 >> 2] = $57;
                    $58 = ((($0)) + 116 | 0);
                    HEAP32[$58 >> 2] = 16;
                    $$1 = 0;
                    STACKTOP = sp; return ($$1 | 0);
                }
            }
        }
        $59 = ((($0)) + 241968 | 0);
        HEAP32[$59 >> 2] = 0;
        $60 = HEAP32[$7 >> 2] | 0;
        L28: do {
            switch ($60 | 0) {
                case 5: case 1: {
                    $61 = ((($0)) + 241954 | 0);
                    $62 = HEAP8[$61 >> 0] | 0;
                    $63 = ($62 << 24 >> 24) == (0);
                    if ($63) {
                        $64 = ((($0)) + 241956 | 0);
                        $65 = HEAP8[$64 >> 0] | 0;
                        $66 = ($65 << 24 >> 24) == (0);
                        if ($66) {
                            label = 25;
                            break L28;
                        }
                    }
                    switch ($60 | 0) {
                        case 20: case 14: {
                            label = 22;
                            break;
                        }
                        default: {
                        }
                    }
                    break;
                }
                case 20: case 14: {
                    label = 22;
                    break;
                }
                default: {
                }
            }
        } while (0);
        if ((label | 0) == 22) {
            $67 = ((($0)) + 241954 | 0);
            $68 = HEAP8[$67 >> 0] | 0;
            $69 = ($68 << 24 >> 24) == (0);
            if ($69) {
                $70 = ((($0)) + 241955 | 0);
                $71 = HEAP8[$70 >> 0] | 0;
                $72 = ($71 << 24 >> 24) == (0);
                if ($72) {
                    $73 = ((($0)) + 241956 | 0);
                    $74 = HEAP8[$73 >> 0] | 0;
                    $75 = ($74 << 24 >> 24) == (0);
                    if ($75) {
                        label = 25;
                    }
                }
            }
        }
        if ((label | 0) == 25) {
            $76 = ((($0)) + 317169 | 0);
            $77 = HEAP8[$76 >> 0] | 0;
            $78 = ($77 << 24 >> 24) != (0);
            $$phi$trans$insert365 = ((($0)) + 241964 | 0);
            $$pre366 = HEAP32[$$phi$trans$insert365 >> 2] | 0;
            $79 = ($$pre366 | 0) == (0);
            $or$cond383 = $78 & $79;
            if ($or$cond383) {
                HEAP32[$vararg_buffer4 >> 2] = $60;
                __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28499, $vararg_buffer4);
            } else {
                $80 = (($$pre366) + 1) | 0;
                HEAP32[$$phi$trans$insert365 >> 2] = $80;
            }
            $81 = ((($0)) + 512324 | 0);
            $82 = HEAP32[$81 >> 2] | 0;
            $83 = (($82) + 1) | 0;
            HEAP32[$81 >> 2] = $83;
            $84 = ((($0)) + 116 | 0);
            $85 = HEAP32[$84 >> 2] | 0;
            $86 = $85 | 16;
            HEAP32[$84 >> 2] = $86;
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        $87 = ((($0)) + 241964 | 0);
        HEAP32[$87 >> 2] = 0;
        $88 = HEAP32[$7 >> 2] | 0;
        switch ($88 | 0) {
            case 6: case 9: {
                $89 = ((($0)) + 241888 | 0);
                $90 = HEAP32[$89 >> 2] | 0;
                $91 = ((($90)) + 4 | 0);
                $92 = HEAP32[$91 >> 2] | 0;
                $93 = ($92 | 0) == (0);
                if ($93) {
                    $$1 = $27;
                    STACKTOP = sp; return ($$1 | 0);
                }
                $94 = ((($0)) + 317168 | 0);
                $95 = ((($90)) + 20 | 0);
                $96 = (($92) + -1) | 0;
                HEAP32[$95 >> 2] = $96;
                HEAP8[$94 >> 0] = 1;
                $$1 = $27;
                STACKTOP = sp; return ($$1 | 0);
                break;
            }
            case 14: {
                $97 = ((($0)) + 237968 | 0);
                $98 = ((($0)) + 512544 | 0);
                $99 = $98;
                $100 = $99;
                $101 = HEAP32[$100 >> 2] | 0;
                $102 = (($99) + 4) | 0;
                $103 = $102;
                $104 = HEAP32[$103 >> 2] | 0;
                $105 = ((($0)) + 241880 | 0);
                $106 = $105;
                $107 = $106;
                HEAP32[$107 >> 2] = $101;
                $108 = (($106) + 4) | 0;
                $109 = $108;
                HEAP32[$109 >> 2] = $104;
                $110 = ($$0336$lcssa | 0) < (4);
                if ($110) {
                    $111 = ((($0)) + 241888 | 0);
                    $112 = HEAP32[$111 >> 2] | 0;
                    $113 = ((($112)) + 4 | 0);
                    $114 = HEAP32[$113 >> 2] | 0;
                    $115 = ($114 | 0) == (0);
                    if (!($115)) {
                        $116 = (($114) + -1) | 0;
                        $117 = ((($112)) + 20 | 0);
                        HEAP32[$117 >> 2] = $116;
                        $118 = ((($0)) + 242340 | 0);
                        $119 = HEAP32[$118 >> 2] | 0;
                        $120 = ($119 | 0) == (0);
                        if ($120) {
                            $121 = ((($0)) + 317168 | 0);
                            HEAP8[$121 >> 0] = 1;
                        }
                    }
                    $122 = ((($0)) + 237992 | 0);
                    $123 = ((($122)) + 1063 | 0);
                    HEAP8[$123 >> 0] = 0;
                    $124 = ((($0)) + 116 | 0);
                    $125 = HEAP32[$124 >> 2] | 0;
                    $126 = $125 | 4;
                    HEAP32[$124 >> 2] = $126;
                    $$1 = 0;
                    STACKTOP = sp; return ($$1 | 0);
                }
                __ZN7WelsDec18DecodeNalHeaderExtEPNS_10TagNalUnitEPh($97, $27);
                $127 = ((($0)) + 237984 | 0);
                $128 = HEAP8[$127 >> 0] | 0;
                $129 = ($128 << 24 >> 24) == (0);
                $130 = ((($0)) + 237986 | 0);
                $131 = HEAP8[$130 >> 0] | 0;
                if ($129) {
                    $132 = ($131 << 24 >> 24) == (0);
                    if ($132) {
                        $152 = ((($2)) + 4 | 0);
                        $153 = HEAP32[$6 >> 2] | 0;
                        $154 = (($153) + 3) | 0;
                        HEAP32[$6 >> 2] = $154;
                        $155 = HEAP8[$1 >> 0] | 0;
                        HEAP8[$97 >> 0] = $155;
                        $156 = HEAP8[$23 >> 0] | 0;
                        $157 = ((($0)) + 237969 | 0);
                        HEAP8[$157 >> 0] = $156;
                        $158 = HEAP32[$7 >> 2] | 0;
                        $159 = ((($0)) + 237972 | 0);
                        HEAP32[$159 >> 2] = $158;
                        $160 = HEAP8[$23 >> 0] | 0;
                        $161 = ($160 << 24 >> 24) == (0);
                        do {
                            if (!($161)) {
                                $162 = ((($0)) + 6144 | 0);
                                $163 = $$0336$lcssa << 3;
                                $164 = (($163) + -32) | 0;
                                $165 = (($2) + ($$0336$lcssa) | 0);
                                $166 = ((($165)) + -1 | 0);
                                $$val341 = HEAP8[$166 >> 0] | 0;
                                $167 = $$val341 & 255;
                                $168 = $167 & 1;
                                $169 = ($168 | 0) == (0);
                                if ($169) {
                                    $170 = $167 & 2;
                                    $171 = ($170 | 0) == (0);
                                    if ($171) {
                                        $172 = $167 & 4;
                                        $173 = ($172 | 0) == (0);
                                        if ($173) {
                                            $174 = $167 & 8;
                                            $175 = ($174 | 0) == (0);
                                            if ($175) {
                                                $176 = $167 & 16;
                                                $177 = ($176 | 0) == (0);
                                                if ($177) {
                                                    $178 = $167 & 32;
                                                    $179 = ($178 | 0) == (0);
                                                    if ($179) {
                                                        $180 = $167 & 64;
                                                        $181 = ($180 | 0) == (0);
                                                        if ($181) {
                                                            $$mask$i = $167 & 128;
                                                            $182 = ($$mask$i | 0) == (0);
                                                            $phitmp = $182 ? 0 : -7;
                                                            $184 = $phitmp;
                                                        } else {
                                                            $184 = -6;
                                                        }
                                                    } else {
                                                        $184 = -5;
                                                    }
                                                } else {
                                                    $184 = -4;
                                                }
                                            } else {
                                                $184 = -3;
                                            }
                                        } else {
                                            $184 = -2;
                                        }
                                    } else {
                                        $184 = -1;
                                    }
                                } else {
                                    $184 = 0;
                                }
                                $183 = (($164) + ($184)) | 0;
                                $185 = (__ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($162, $152, $183) | 0);
                                $186 = ($185 | 0) == (0);
                                if ($186) {
                                    (__ZN7WelsDec18ParsePrefixNalUnitEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxE($0, $162) | 0);
                                    break;
                                }
                                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 28698, $vararg_buffer11);
                                $187 = ((($0)) + 116 | 0);
                                $188 = HEAP32[$187 >> 2] | 0;
                                $189 = $188 | 4;
                                HEAP32[$187 >> 2] = $189;
                                $$1 = 0;
                                STACKTOP = sp; return ($$1 | 0);
                            }
                        } while (0);
                        $190 = ((($0)) + 237992 | 0);
                        $191 = ((($190)) + 1063 | 0);
                        HEAP8[$191 >> 0] = 1;
                        $$1 = $152;
                        STACKTOP = sp; return ($$1 | 0);
                    } else {
                        $135 = 1;
                    }
                } else {
                    $135 = $131;
                }
                $133 = $128 & 255;
                $134 = $135 & 255;
                HEAP32[$vararg_buffer7 >> 2] = $133;
                $vararg_ptr10 = ((($vararg_buffer7)) + 4 | 0);
                HEAP32[$vararg_ptr10 >> 2] = $134;
                __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28594, $vararg_buffer7);
                $136 = ((($0)) + 241888 | 0);
                $137 = HEAP32[$136 >> 2] | 0;
                $138 = ((($137)) + 4 | 0);
                $139 = HEAP32[$138 >> 2] | 0;
                $140 = ($139 | 0) == (0);
                if (!($140)) {
                    $141 = (($139) + -1) | 0;
                    $142 = ((($137)) + 20 | 0);
                    HEAP32[$142 >> 2] = $141;
                    $143 = ((($0)) + 242340 | 0);
                    $144 = HEAP32[$143 >> 2] | 0;
                    $145 = ($144 | 0) == (0);
                    if ($145) {
                        $146 = ((($0)) + 317168 | 0);
                        HEAP8[$146 >> 0] = 1;
                    }
                }
                $147 = ((($0)) + 237992 | 0);
                $148 = ((($147)) + 1063 | 0);
                HEAP8[$148 >> 0] = 0;
                $149 = ((($0)) + 116 | 0);
                $150 = HEAP32[$149 >> 2] | 0;
                $151 = $150 | 4;
                HEAP32[$149 >> 2] = $151;
                $$1 = 0;
                STACKTOP = sp; return ($$1 | 0);
                break;
            }
            case 20: {
                $$0338$off0 = 1;
                break;
            }
            case 5: case 1: {
                $$0338$off0 = 0;
                break;
            }
            default: {
                $$1 = $27;
                STACKTOP = sp; return ($$1 | 0);
            }
        }
        $192 = ((($0)) + 241888 | 0);
        $193 = ((($0)) + 562528 | 0);
        $194 = HEAP32[$193 >> 2] | 0;
        $195 = (__ZN7WelsDec13MemGetNextNalEPPNS_14TagAccessUnitsEPN10WelsCommon12CMemoryAlignE($192, $194) | 0);
        $196 = ($195 | 0) == (0 | 0);
        if ($196) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 28754, $vararg_buffer13);
            $197 = ((($0)) + 116 | 0);
            $198 = HEAP32[$197 >> 2] | 0;
            $199 = $198 | 16384;
            HEAP32[$197 >> 2] = $199;
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        $200 = ((($0)) + 512544 | 0);
        $201 = $200;
        $202 = $201;
        $203 = HEAP32[$202 >> 2] | 0;
        $204 = (($201) + 4) | 0;
        $205 = $204;
        $206 = HEAP32[$205 >> 2] | 0;
        $207 = ((($195)) + 3912 | 0);
        $208 = $207;
        $209 = $208;
        HEAP32[$209 >> 2] = $203;
        $210 = (($208) + 4) | 0;
        $211 = $210;
        HEAP32[$211 >> 2] = $206;
        $212 = HEAP8[$1 >> 0] | 0;
        HEAP8[$195 >> 0] = $212;
        $213 = HEAP8[$23 >> 0] | 0;
        $214 = ((($195)) + 1 | 0);
        HEAP8[$214 >> 0] = $213;
        $215 = HEAP32[$7 >> 2] | 0;
        $216 = ((($195)) + 4 | 0);
        HEAP32[$216 >> 2] = $215;
        $217 = HEAP32[$192 >> 2] | 0;
        $218 = ((($217)) + 4 | 0);
        $219 = HEAP32[$218 >> 2] | 0;
        $220 = HEAP32[$7 >> 2] | 0;
        $221 = ($220 | 0) == (20);
        do {
            if ($221) {
                $222 = ($$0336$lcssa | 0) < (4);
                if ($222) {
                    __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($217);
                    $223 = ($219 >>> 0) > (1);
                    if ($223) {
                        $224 = (($219) + -2) | 0;
                        $225 = ((($217)) + 20 | 0);
                        HEAP32[$225 >> 2] = $224;
                        $226 = ((($0)) + 242340 | 0);
                        $227 = HEAP32[$226 >> 2] | 0;
                        $228 = ($227 | 0) == (0);
                        if ($228) {
                            $229 = ((($0)) + 317168 | 0);
                            HEAP8[$229 >> 0] = 1;
                        }
                    }
                    $230 = ((($0)) + 116 | 0);
                    $231 = HEAP32[$230 >> 2] | 0;
                    $232 = $231 | 4;
                    HEAP32[$230 >> 2] = $232;
                    $$1 = 0;
                    STACKTOP = sp; return ($$1 | 0);
                }
                __ZN7WelsDec18DecodeNalHeaderExtEPNS_10TagNalUnitEPh($195, $27);
                $233 = ((($195)) + 16 | 0);
                $234 = HEAP8[$233 >> 0] | 0;
                $235 = ($234 << 24 >> 24) == (0);
                if ($235) {
                    $236 = ((($195)) + 18 | 0);
                    $237 = HEAP8[$236 >> 0] | 0;
                    $238 = ($237 << 24 >> 24) == (0);
                    if ($238) {
                        $251 = ((($2)) + 4 | 0);
                        $252 = (($$0336$lcssa) + -4) | 0;
                        $253 = HEAP32[$6 >> 2] | 0;
                        $254 = (($253) + 3) | 0;
                        HEAP32[$6 >> 2] = $254;
                        $255 = ((($0)) + 242344 | 0);
                        $256 = HEAP8[$255 >> 0] | 0;
                        $257 = ($256 << 24 >> 24) == (0);
                        if ($257) {
                            $$0333 = $251; $$1337 = $252;
                            break;
                        }
                        $258 = ((($0)) + 44 | 0);
                        $259 = HEAP32[$258 >> 2] | 0;
                        $260 = ((($195)) + 3896 | 0);
                        HEAP32[$260 >> 2] = $259;
                        $$0335 = 0;
                        while (1) {
                            $261 = (($5) - ($$0335)) | 0;
                            $262 = (($261) + -1) | 0;
                            $263 = (($4) + ($262) | 0);
                            $264 = HEAP8[$263 >> 0] | 0;
                            $265 = ($264 << 24 >> 24) == (0);
                            $266 = (($$0335) + 1) | 0;
                            if ($265) {
                                $$0335 = $266;
                            } else {
                                break;
                            }
                        }
                        $267 = (($261) + -3) | 0;
                        $268 = ((($195)) + 3900 | 0);
                        HEAP32[$268 >> 2] = $267;
                        $269 = HEAP8[$4 >> 0] | 0;
                        $270 = ($269 << 24 >> 24) == (0);
                        if ($270) {
                            $271 = ((($4)) + 1 | 0);
                            $272 = HEAP8[$271 >> 0] | 0;
                            $273 = ($272 << 24 >> 24) == (0);
                            if ($273) {
                                $274 = ((($4)) + 2 | 0);
                                $275 = HEAP8[$274 >> 0] | 0;
                                $276 = ($275 << 24 >> 24) == (1);
                                if ($276) {
                                    $277 = (($261) + -2) | 0;
                                    HEAP32[$268 >> 2] = $277;
                                    $$0332 = 3;
                                } else {
                                    $$0332 = 4;
                                }
                            } else {
                                $$0332 = 4;
                            }
                        } else {
                            $$0332 = 4;
                        }
                        $278 = ((($195)) + 12 | 0);
                        $279 = HEAP8[$278 >> 0] | 0;
                        $280 = ($279 << 24 >> 24) != (0);
                        $281 = (($4) + ($$0332) | 0);
                        $282 = HEAP8[$281 >> 0] | 0;
                        $283 = $282 & -32;
                        $284 = $283 & 255;
                        $$sink = $280 ? 5 : 1;
                        $285 = $$sink | $284;
                        $286 = $285 & 255;
                        HEAP8[$281 >> 0] = $286;
                        $287 = HEAP32[$258 >> 2] | 0;
                        $288 = ((($287)) + 2 | 0);
                        HEAP8[$288 >> 0] = 0;
                        $289 = HEAP32[$258 >> 2] | 0;
                        $290 = ((($289)) + 1 | 0);
                        HEAP8[$290 >> 0] = 0;
                        $291 = HEAP32[$258 >> 2] | 0;
                        HEAP8[$291 >> 0] = 0;
                        $292 = HEAP32[$258 >> 2] | 0;
                        $293 = ((($292)) + 3 | 0);
                        HEAP8[$293 >> 0] = 1;
                        $294 = HEAP8[$281 >> 0] | 0;
                        $295 = HEAP32[$258 >> 2] | 0;
                        $296 = ((($295)) + 4 | 0);
                        HEAP8[$296 >> 0] = $294;
                        $297 = HEAP32[$258 >> 2] | 0;
                        $298 = ((($297)) + 5 | 0);
                        HEAP32[$258 >> 2] = $298;
                        $299 = (($$0332) + 4) | 0;
                        $300 = (($4) + ($299) | 0);
                        $301 = (($261) - ($299)) | 0;
                        _memcpy(($298 | 0), ($300 | 0), ($301 | 0)) | 0;
                        $302 = HEAP32[$258 >> 2] | 0;
                        $303 = (($302) + ($301) | 0);
                        HEAP32[$258 >> 2] = $303;
                        $$0333 = $251; $$1337 = $252;
                        break;
                    } else {
                        label = 68;
                    }
                } else {
                    $239 = $234 & 255;
                    $$pre378 = ((($195)) + 18 | 0);
                    HEAP32[$vararg_buffer15 >> 2] = $239;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28794, $vararg_buffer15);
                    $$pre369 = HEAP8[$$pre378 >> 0] | 0;
                    $240 = ($$pre369 << 24 >> 24) == (0);
                    if (!($240)) {
                        label = 68;
                    }
                }
                if ((label | 0) == 68) {
                    HEAP32[$vararg_buffer18 >> 2] = 1;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28853, $vararg_buffer18);
                }
                __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($217);
                $241 = ($219 >>> 0) > (1);
                if ($241) {
                    $242 = (($219) + -2) | 0;
                    $243 = ((($217)) + 20 | 0);
                    HEAP32[$243 >> 2] = $242;
                    $244 = ((($0)) + 242340 | 0);
                    $245 = HEAP32[$244 >> 2] | 0;
                    $246 = ($245 | 0) == (0);
                    if ($246) {
                        $247 = ((($0)) + 317168 | 0);
                        HEAP8[$247 >> 0] = 1;
                    }
                }
                $248 = ((($0)) + 116 | 0);
                $249 = HEAP32[$248 >> 2] | 0;
                $250 = $249 | 4;
                HEAP32[$248 >> 2] = $250;
                $$1 = 0;
                STACKTOP = sp; return ($$1 | 0);
            } else {
                $304 = ((($0)) + 242344 | 0);
                $305 = HEAP8[$304 >> 0] | 0;
                $306 = ($305 << 24 >> 24) == (0);
                if (!($306)) {
                    $307 = ((($0)) + 44 | 0);
                    $308 = HEAP32[$307 >> 2] | 0;
                    $309 = ((($195)) + 3896 | 0);
                    HEAP32[$309 >> 2] = $308;
                    $$0331 = 0;
                    while (1) {
                        $310 = (($5) - ($$0331)) | 0;
                        $311 = (($310) + -1) | 0;
                        $312 = (($4) + ($311) | 0);
                        $313 = HEAP8[$312 >> 0] | 0;
                        $314 = ($313 << 24 >> 24) == (0);
                        $315 = (($$0331) + 1) | 0;
                        if ($314) {
                            $$0331 = $315;
                        } else {
                            break;
                        }
                    }
                    $316 = ((($195)) + 3900 | 0);
                    HEAP32[$316 >> 2] = $310;
                    $317 = HEAP8[$4 >> 0] | 0;
                    $318 = ($317 << 24 >> 24) == (0);
                    if ($318) {
                        $319 = ((($4)) + 1 | 0);
                        $320 = HEAP8[$319 >> 0] | 0;
                        $321 = ($320 << 24 >> 24) == (0);
                        if ($321) {
                            $322 = ((($4)) + 2 | 0);
                            $323 = HEAP8[$322 >> 0] | 0;
                            $324 = ($323 << 24 >> 24) == (1);
                            if ($324) {
                                $325 = HEAP32[$307 >> 2] | 0;
                                HEAP8[$325 >> 0] = 0;
                                $326 = HEAP32[$316 >> 2] | 0;
                                $327 = (($326) + 1) | 0;
                                HEAP32[$316 >> 2] = $327;
                                $$0 = 1;
                            } else {
                                $$0 = 0;
                            }
                        } else {
                            $$0 = 0;
                        }
                    } else {
                        $$0 = 0;
                    }
                    $328 = HEAP32[$307 >> 2] | 0;
                    $329 = (($328) + ($$0) | 0);
                    _memcpy(($329 | 0), ($4 | 0), ($310 | 0)) | 0;
                    $330 = (($$0) + ($310)) | 0;
                    $331 = HEAP32[$307 >> 2] | 0;
                    $332 = (($331) + ($330) | 0);
                    HEAP32[$307 >> 2] = $332;
                }
                $333 = ((($0)) + 237968 | 0);
                $334 = ((($0)) + 237972 | 0);
                $335 = HEAP32[$334 >> 2] | 0;
                $336 = ($335 | 0) == (14);
                if ($336) {
                    $337 = ((($0)) + 237992 | 0);
                    $338 = ((($337)) + 1063 | 0);
                    $339 = HEAP8[$338 >> 0] | 0;
                    $340 = ($339 << 24 >> 24) == (0);
                    if (!($340)) {
                        (__ZN7WelsDec26PrefetchNalHeaderExtSyntaxEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitES3_($0, $195, $333) | 0);
                    }
                }
                $341 = HEAP32[$7 >> 2] | 0;
                $342 = ($341 | 0) == (5);
                $343 = ((($195)) + 12 | 0);
                $344 = $342 & 1;
                HEAP8[$343 >> 0] = $344;
                $345 = ((($195)) + 14 | 0);
                HEAP8[$345 >> 0] = 1;
                $$0333 = $27; $$1337 = $28;
            }
        } while (0);
        $346 = HEAP32[$217 >> 2] | 0;
        $347 = (($219) + -1) | 0;
        $348 = (($346) + ($347 << 2) | 0);
        $349 = HEAP32[$348 >> 2] | 0;
        $350 = ((($349)) + 3868 | 0);
        $351 = $$1337 << 3;
        $352 = (($$0333) + ($$1337) | 0);
        $353 = ((($352)) + -1 | 0);
        $$val = HEAP8[$353 >> 0] | 0;
        $354 = $$val & 255;
        $355 = $354 & 1;
        $356 = ($355 | 0) == (0);
        if ($356) {
            $357 = $354 & 2;
            $358 = ($357 | 0) == (0);
            if ($358) {
                $359 = $354 & 4;
                $360 = ($359 | 0) == (0);
                if ($360) {
                    $361 = $354 & 8;
                    $362 = ($361 | 0) == (0);
                    if ($362) {
                        $363 = $354 & 16;
                        $364 = ($363 | 0) == (0);
                        if ($364) {
                            $365 = $354 & 32;
                            $366 = ($365 | 0) == (0);
                            if ($366) {
                                $367 = $354 & 64;
                                $368 = ($367 | 0) == (0);
                                if ($368) {
                                    $$mask$i343 = $354 & 128;
                                    $369 = ($$mask$i343 | 0) == (0);
                                    $$$i344 = $369 ? 0 : 7;
                                    $371 = $$$i344;
                                } else {
                                    $371 = 6;
                                }
                            } else {
                                $371 = 5;
                            }
                        } else {
                            $371 = 4;
                        }
                    } else {
                        $371 = 3;
                    }
                } else {
                    $371 = 2;
                }
            } else {
                $371 = 1;
            }
        } else {
            $371 = 0;
        }
        $370 = (($351) - ($371)) | 0;
        $372 = (__ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($350, $$0333, $370) | 0);
        $373 = ($372 | 0) == (0);
        if (!($373)) {
            __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($217);
            $374 = ($219 >>> 0) > (1);
            if ($374) {
                $375 = (($219) + -2) | 0;
                $376 = ((($217)) + 20 | 0);
                HEAP32[$376 >> 2] = $375;
                $377 = ((($0)) + 242340 | 0);
                $378 = HEAP32[$377 >> 2] | 0;
                $379 = ($378 | 0) == (0);
                if ($379) {
                    $380 = ((($0)) + 317168 | 0);
                    HEAP8[$380 >> 0] = 1;
                }
            }
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 28919, $vararg_buffer21);
            $381 = ((($0)) + 116 | 0);
            $382 = HEAP32[$381 >> 2] | 0;
            $383 = $382 | 4;
            HEAP32[$381 >> 2] = $383;
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        $384 = (__ZN7WelsDec23ParseSliceHeaderSyntaxsEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEb($0, $350, $$0338$off0) | 0);
        $385 = ($384 | 0) == (0);
        $386 = ($219 | 0) == (1);
        if (!($385)) {
            if ($386) {
                $387 = ((($195)) + 12 | 0);
                $388 = HEAP8[$387 >> 0] | 0;
                $389 = ($388 << 24 >> 24) == (0);
                if (!($389)) {
                    $390 = ((($0)) + 242320 | 0);
                    $391 = HEAP32[$390 >> 2] | 0;
                    $392 = ($391 | 0) == (0);
                    if ($392) {
                        $scevgep$i349 = ((($0)) + 241892 | 0);
                        ; HEAP32[$scevgep$i349 >> 2] = 0 | 0; HEAP32[$scevgep$i349 + 4 >> 2] = 0 | 0; HEAP32[$scevgep$i349 + 8 >> 2] = 0 | 0; HEAP32[$scevgep$i349 + 12 >> 2] = 0 | 0; HEAP32[$scevgep$i349 + 16 >> 2] = 0 | 0; HEAP32[$scevgep$i349 + 20 >> 2] = 0 | 0; HEAP32[$scevgep$i349 + 24 >> 2] = 0 | 0; HEAP32[$scevgep$i349 + 28 >> 2] = 0 | 0;
                    }
                }
                __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($217);
            } else {
                __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($217);
                $393 = ($219 | 0) == (0);
                if (!($393)) {
                    $394 = (($219) + -2) | 0;
                    $395 = ((($217)) + 20 | 0);
                    HEAP32[$395 >> 2] = $394;
                    $396 = ((($0)) + 242340 | 0);
                    $397 = HEAP32[$396 >> 2] | 0;
                    $398 = ($397 | 0) == (0);
                    if ($398) {
                        $399 = ((($0)) + 317168 | 0);
                        HEAP8[$399 >> 0] = 1;
                    }
                }
            }
            $400 = ((($0)) + 116 | 0);
            $401 = HEAP32[$400 >> 2] | 0;
            $402 = $401 | 4;
            HEAP32[$400 >> 2] = $402;
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        if ($386) {
            $403 = ((($195)) + 88 | 0);
            $404 = HEAP32[$403 >> 2] | 0;
            $405 = ((($195)) + 15 | 0);
            $406 = HEAP8[$405 >> 0] | 0;
            $407 = $406 & 255;
            $408 = (((($0)) + 241892 | 0) + ($407 << 2) | 0);
            $409 = HEAP32[$408 >> 2] | 0;
            $410 = ($409 | 0) == (0 | 0);
            $411 = ($409 | 0) == ($404 | 0);
            $or$cond$i346 = $410 | $411;
            if ($or$cond$i346) {
                $412 = ((($195)) + 12 | 0);
                $413 = HEAP8[$412 >> 0] | 0;
                $414 = ($413 << 24 >> 24) == (0);
                if ($414) {
                    $$1 = $$0333;
                    STACKTOP = sp; return ($$1 | 0);
                }
            }
            $415 = ((($0)) + 242320 | 0);
            $416 = HEAP32[$415 >> 2] | 0;
            $417 = ($416 | 0) == (0);
            if (!($417)) {
                $$1 = $$0333;
                STACKTOP = sp; return ($$1 | 0);
            }
            $scevgep$i = ((($0)) + 241892 | 0);
            ; HEAP32[$scevgep$i >> 2] = 0 | 0; HEAP32[$scevgep$i + 4 >> 2] = 0 | 0; HEAP32[$scevgep$i + 8 >> 2] = 0 | 0; HEAP32[$scevgep$i + 12 >> 2] = 0 | 0; HEAP32[$scevgep$i + 16 >> 2] = 0 | 0; HEAP32[$scevgep$i + 20 >> 2] = 0 | 0; HEAP32[$scevgep$i + 24 >> 2] = 0 | 0; HEAP32[$scevgep$i + 28 >> 2] = 0 | 0;
            $$1 = $$0333;
            STACKTOP = sp; return ($$1 | 0);
        }
        $418 = ($219 | 0) == (0);
        if ($418) {
            $$1 = $$0333;
            STACKTOP = sp; return ($$1 | 0);
        }
        $419 = HEAP32[$217 >> 2] | 0;
        $420 = (($419) + ($347 << 2) | 0);
        $421 = HEAP32[$420 >> 2] | 0;
        $422 = (($219) + -2) | 0;
        $423 = (($419) + ($422 << 2) | 0);
        $424 = HEAP32[$423 >> 2] | 0;
        $425 = ((($421)) + 88 | 0);
        $426 = HEAP32[$425 >> 2] | 0;
        $427 = (__ZN7WelsDec23CheckAccessUnitBoundaryEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitES3_PNS_6TagSpsE($0, $421, $424, $426) | 0);
        if (!($427)) {
            $$1 = $$0333;
            STACKTOP = sp; return ($$1 | 0);
        }
        $428 = ((($217)) + 20 | 0);
        HEAP32[$428 >> 2] = $422;
        $429 = ((($0)) + 317168 | 0);
        HEAP8[$429 >> 0] = 1;
        $430 = ((($195)) + 88 | 0);
        $431 = HEAP32[$430 >> 2] | 0;
        $432 = ((($195)) + 15 | 0);
        $433 = HEAP8[$432 >> 0] | 0;
        $434 = $433 & 255;
        $435 = (((($0)) + 241892 | 0) + ($434 << 2) | 0);
        $436 = HEAP32[$435 >> 2] | 0;
        $437 = ($436 | 0) == (0 | 0);
        $438 = ($436 | 0) == ($431 | 0);
        $or$cond$i = $437 | $438;
        if ($or$cond$i) {
            $439 = ((($195)) + 12 | 0);
            $440 = HEAP8[$439 >> 0] | 0;
            $$0$i = $440;
        } else {
            $$0$i = 1;
        }
        $441 = ((($0)) + 242335 | 0);
        HEAP8[$441 >> 0] = $$0$i;
        $$1 = $$0333;
        STACKTOP = sp; return ($$1 | 0);
    }
    function __ZN7WelsDec14ParseNonVclNalEPNS_21TagWelsDecoderContextEPhiS2_i($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$$i = 0, $$053 = 0, $$mask$i = 0, $$sink1 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
        var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $5 = sp + 4 | 0;
        $6 = sp;
        HEAP32[$5 >> 2] = 0;
        HEAP32[$6 >> 2] = 0;
        $7 = ($2 | 0) < (1);
        if ($7) {
            $$053 = 0;
            STACKTOP = sp; return ($$053 | 0);
        }
        $8 = ((($0)) + 6144 | 0);
        $9 = $2 << 3;
        $10 = (($1) + ($2) | 0);
        $11 = ((($10)) + -1 | 0);
        $$val = HEAP8[$11 >> 0] | 0;
        $12 = $$val & 255;
        $13 = $12 & 1;
        $14 = ($13 | 0) == (0);
        if ($14) {
            $15 = $12 & 2;
            $16 = ($15 | 0) == (0);
            if ($16) {
                $17 = $12 & 4;
                $18 = ($17 | 0) == (0);
                if ($18) {
                    $19 = $12 & 8;
                    $20 = ($19 | 0) == (0);
                    if ($20) {
                        $21 = $12 & 16;
                        $22 = ($21 | 0) == (0);
                        if ($22) {
                            $23 = $12 & 32;
                            $24 = ($23 | 0) == (0);
                            if ($24) {
                                $25 = $12 & 64;
                                $26 = ($25 | 0) == (0);
                                if ($26) {
                                    $$mask$i = $12 & 128;
                                    $27 = ($$mask$i | 0) == (0);
                                    $$$i = $27 ? 0 : 7;
                                    $29 = $$$i;
                                } else {
                                    $29 = 6;
                                }
                            } else {
                                $29 = 5;
                            }
                        } else {
                            $29 = 4;
                        }
                    } else {
                        $29 = 3;
                    }
                } else {
                    $29 = 2;
                }
            } else {
                $29 = 1;
            }
        } else {
            $29 = 0;
        }
        $28 = (($9) - ($29)) | 0;
        $30 = ((($0)) + 92 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        switch ($31 | 0) {
            case 15: case 7: {
                $32 = ($28 | 0) > (0);
                if ($32) {
                    $33 = (__ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($8, $1, $28) | 0);
                    $34 = ($33 | 0) == (0);
                    if (!($34)) {
                        $35 = ((($0)) + 242340 | 0);
                        $36 = HEAP32[$35 >> 2] | 0;
                        $37 = ($36 | 0) == (0);
                        $38 = ((($0)) + 116 | 0);
                        $39 = HEAP32[$38 >> 2] | 0;
                        $$sink1 = $37 ? 16 : 4;
                        $40 = $$sink1 | $39;
                        HEAP32[$38 >> 2] = $40;
                        $$053 = $33;
                        STACKTOP = sp; return ($$053 | 0);
                    }
                }
                $41 = (__ZN7WelsDec8ParseSpsEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEPiS5_Phi($0, $8, $5, $6, $3, $4) | 0);
                $42 = ($41 | 0) == (0);
                if ($42) {
                    $$053 = 0;
                    STACKTOP = sp; return ($$053 | 0);
                }
                $43 = ((($0)) + 242340 | 0);
                $44 = HEAP32[$43 >> 2] | 0;
                $45 = ($44 | 0) == (0);
                $46 = ((($0)) + 116 | 0);
                $47 = HEAP32[$46 >> 2] | 0;
                $$sink2 = $45 ? 16 : 4;
                $48 = $$sink2 | $47;
                HEAP32[$46 >> 2] = $48;
                $$053 = $41;
                STACKTOP = sp; return ($$053 | 0);
                break;
            }
            case 8: {
                $49 = ($28 | 0) > (0);
                if ($49) {
                    $50 = (__ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($8, $1, $28) | 0);
                    $51 = ($50 | 0) == (0);
                    if (!($51)) {
                        $52 = ((($0)) + 242340 | 0);
                        $53 = HEAP32[$52 >> 2] | 0;
                        $54 = ($53 | 0) == (0);
                        $55 = ((($0)) + 116 | 0);
                        $56 = HEAP32[$55 >> 2] | 0;
                        $$sink3 = $54 ? 16 : 4;
                        $57 = $$sink3 | $56;
                        HEAP32[$55 >> 2] = $57;
                        $$053 = $50;
                        STACKTOP = sp; return ($$053 | 0);
                    }
                }
                $58 = (__ZN7WelsDec8ParsePpsEPNS_21TagWelsDecoderContextEPNS_6TagPpsEPN10WelsCommon15TagBitStringAuxEPhi($0, 0, $8, $3, $4) | 0);
                $59 = ($58 | 0) == (0);
                if ($59) {
                    $66 = ((($0)) + 241956 | 0);
                    HEAP8[$66 >> 0] = 1;
                    $$053 = 0;
                    STACKTOP = sp; return ($$053 | 0);
                } else {
                    $60 = ((($0)) + 242340 | 0);
                    $61 = HEAP32[$60 >> 2] | 0;
                    $62 = ($61 | 0) == (0);
                    $63 = ((($0)) + 116 | 0);
                    $64 = HEAP32[$63 >> 2] | 0;
                    $$sink4 = $62 ? 16 : 4;
                    $65 = $$sink4 | $64;
                    HEAP32[$63 >> 2] = $65;
                    $$053 = $58;
                    STACKTOP = sp; return ($$053 | 0);
                }
                break;
            }
            default: {
                $$053 = 0;
                STACKTOP = sp; return ($$053 | 0);
            }
        }
        return (0) | 0;
    }
    function __ZN7WelsDec21CheckAndFinishLastPicEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ((($0)) + 241888 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($0)) + 92 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (((9440 + ($6 << 3) | 0)) + 4 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ($8 | 0) == (1);
        if ($9) {
            $10 = HEAP32[$4 >> 2] | 0;
            $11 = ((($4)) + 20 | 0);
            $12 = HEAP32[$11 >> 2] | 0;
            $13 = (($10) + ($12 << 2) | 0);
            $14 = HEAP32[$13 >> 2] | 0;
            $15 = ((($0)) + 242320 | 0);
            $16 = HEAP32[$15 >> 2] | 0;
            $17 = ($16 | 0) == (0);
            if ($17) {
                return 0;
            }
            $33 = ((($0)) + 317180 | 0);
            $34 = ((($0)) + 317204 | 0);
            $35 = ((($14)) + 24 | 0);
            $36 = (__ZN7WelsDec26CheckAccessUnitBoundaryExtEPN10WelsCommon19TagNalUnitHeaderExtES2_PNS_15TagSliceHeadersES4_($33, $14, $34, $35) | 0);
            if (!($36)) {
                return 0;
            }
        } else {
            switch ($6 | 0) {
                case 6: case 9: {
                    break;
                }
                case 7: {
                    $18 = ((($0)) + 242336 | 0);
                    $19 = HEAP32[$18 >> 2] | 0;
                    $20 = $19 & 2;
                    $21 = ($20 | 0) == (0);
                    if ($21) {
                        return 0;
                    }
                    break;
                }
                case 15: {
                    $22 = ((($0)) + 242336 | 0);
                    $23 = HEAP32[$22 >> 2] | 0;
                    $24 = $23 & 4;
                    $25 = ($24 | 0) == (0);
                    if ($25) {
                        return 0;
                    }
                    break;
                }
                case 8: {
                    $26 = ((($0)) + 242336 | 0);
                    $27 = HEAP32[$26 >> 2] | 0;
                    $28 = $27 & 1;
                    $29 = ($28 | 0) == (0);
                    if ($29) {
                        return 0;
                    }
                    break;
                }
                default: {
                    return 0;
                }
            }
            $30 = ((($4)) + 4 | 0);
            $31 = HEAP32[$30 >> 2] | 0;
            $32 = ($31 | 0) == (0);
            if (!($32)) {
                (__ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) | 0);
            }
        }
        $37 = ((($0)) + 242320 | 0);
        $38 = HEAP32[$37 >> 2] | 0;
        $39 = ($38 | 0) == (0);
        if ($39) {
            return 0;
        }
        $40 = (__ZN7WelsDec12NeedErrorConEPNS_21TagWelsDecoderContextE($0) | 0);
        if (!($40)) {
            return 0;
        }
        $41 = ((($0)) + 242340 | 0);
        $42 = HEAP32[$41 >> 2] | 0;
        $43 = ($42 | 0) == (0);
        do {
            if ($43) {
                $66 = ((($0)) + 242344 | 0);
                $67 = HEAP8[$66 >> 0] | 0;
                $68 = ($67 << 24 >> 24) == (0);
                if (!($68)) {
                    $69 = ((($0)) + 316848 | 0);
                    $70 = HEAP32[$69 >> 2] | 0;
                    HEAP32[$70 >> 2] = 0;
                    $71 = ((($0)) + 242346 | 0);
                    HEAP8[$71 >> 0] = 1;
                    break;
                }
                $72 = (__ZN7WelsDecL23DecodeFrameConstructionEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) | 0);
                $73 = ($72 | 0) == (0);
                if (!($73)) {
                    $74 = ((($0)) + 317181 | 0);
                    $75 = HEAP8[$74 >> 0] | 0;
                    $76 = ($75 << 24 >> 24) == (0);
                    if (!($76)) {
                        $77 = ((($0)) + 116 | 0);
                        $78 = HEAP32[$77 >> 2] | 0;
                        $79 = $78 | 16;
                        HEAP32[$77 >> 2] = $79;
                    }
                    $80 = ((($0)) + 5464 | 0);
                    HEAP32[$80 >> 2] = 0;
                    return 0;
                }
            } else {
                __ZN7WelsDec17ImplementErrorConEPNS_21TagWelsDecoderContextE($0);
                $44 = ((($0)) + 241924 | 0);
                $45 = HEAP32[$44 >> 2] | 0;
                $46 = ((($45)) + 4 | 0);
                $47 = HEAP32[$46 >> 2] | 0;
                $48 = ((($45)) + 8 | 0);
                $49 = HEAP32[$48 >> 2] | 0;
                $50 = Math_imul($49, $47) | 0;
                HEAP32[$37 >> 2] = $50;
                $51 = HEAP32[$45 >> 2] | 0;
                $52 = ((($0)) + 5464 | 0);
                $53 = HEAP32[$52 >> 2] | 0;
                $54 = ((($53)) + 84 | 0);
                HEAP32[$54 >> 2] = $51;
                $55 = ((($0)) + 241928 | 0);
                $56 = HEAP32[$55 >> 2] | 0;
                $57 = ((($56)) + 4 | 0);
                $58 = HEAP32[$57 >> 2] | 0;
                $59 = HEAP32[$52 >> 2] | 0;
                $60 = ((($59)) + 88 | 0);
                HEAP32[$60 >> 2] = $58;
                (__ZN7WelsDecL23DecodeFrameConstructionEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) | 0);
                $61 = HEAP32[$52 >> 2] | 0;
                $62 = ((($0)) + 316852 | 0);
                HEAP32[$62 >> 2] = $61;
                $63 = ((($0)) + 317181 | 0);
                $64 = HEAP8[$63 >> 0] | 0;
                $65 = ($64 << 24 >> 24) == (0);
                if (!($65)) {
                    (__ZN7WelsDec16MarkECFrameAsRefEPNS_21TagWelsDecoderContextE($0) | 0);
                }
            }
        } while (0);
        $81 = ((($0)) + 5464 | 0);
        HEAP32[$81 >> 2] = 0;
        $82 = HEAP32[$4 >> 2] | 0;
        $83 = ((($4)) + 16 | 0);
        $84 = HEAP32[$83 >> 2] | 0;
        $85 = (($82) + ($84 << 2) | 0);
        $86 = HEAP32[$85 >> 2] | 0;
        $87 = ((($86)) + 1 | 0);
        $88 = HEAP8[$87 >> 0] | 0;
        $89 = ($88 << 24 >> 24) == (0);
        if (!($89)) {
            $90 = ((($0)) + 108 | 0);
            $91 = ((($0)) + 317208 | 0);
            $92 = HEAP32[$91 >> 2] | 0;
            HEAP32[$90 >> 2] = $92;
        }
        $93 = ((($0)) + 112 | 0);
        $94 = HEAP8[$93 >> 0] | 0;
        $95 = ($94 << 24 >> 24) == (0);
        if ($95) {
            return 0;
        }
        $96 = ((($0)) + 108 | 0);
        HEAP32[$96 >> 2] = 0;
        return 0;
    }
    function __ZN7WelsDec19ConstructAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$$i = 0, $$0 = 0, $$0$i = 0, $$02630$i = 0, $$029$i = 0, $$031$i = 0, $$036$i$i = 0, $$058$i = 0, $$059$i = 0, $$060$off0$lcssa$i = 0, $$060$off072$i = 0, $$06171$i = 0, $$1$off0$i = 0, $$2$off065$i = 0, $$lcssa$i = 0, $$neg27$i = 0, $$not$i = 0, $$pre$i = 0, $10 = 0, $100 = 0;
        var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
        var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
        var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
        var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
        var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
        var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
        var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
        var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
        var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
        var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$i = 0, $brmerge82$i = 0, $exitcond$i$i = 0, $scevgep$i = 0, $storemerge$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $3 = sp + 16 | 0;
        $4 = ((($0)) + 241888 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 317168 | 0);
        HEAP8[$6 >> 0] = 0;
        $7 = ((($0)) + 112 | 0);
        HEAP8[$7 >> 0] = 0;
        ; HEAP32[$3 >> 2] = 0 | 0; HEAP32[$3 + 4 >> 2] = 0 | 0; HEAP32[$3 + 8 >> 2] = 0 | 0; HEAP32[$3 + 12 >> 2] = 0 | 0; HEAP32[$3 + 16 >> 2] = 0 | 0; HEAP32[$3 + 20 >> 2] = 0 | 0; HEAP32[$3 + 24 >> 2] = 0 | 0; HEAP32[$3 + 28 >> 2] = 0 | 0;
        $8 = ((($5)) + 16 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($5)) + 20 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ($9 >>> 0) > ($11 >>> 0);
        if ($12) {
            $$060$off0$lcssa$i = 0;
        } else {
            $13 = HEAP32[$5 >> 2] | 0;
            $$060$off072$i = 0; $$06171$i = $9;
            while (1) {
                $17 = (($13) + ($$06171$i << 2) | 0);
                $18 = HEAP32[$17 >> 2] | 0;
                $19 = ((($18)) + 15 | 0);
                $20 = HEAP8[$19 >> 0] | 0;
                $21 = $20 & 255;
                $22 = ((($18)) + 88 | 0);
                $23 = HEAP32[$22 >> 2] | 0;
                $24 = (($3) + ($21 << 2) | 0);
                HEAP32[$24 >> 2] = $23;
                $25 = ((($18)) + 4 | 0);
                $26 = HEAP32[$25 >> 2] | 0;
                $27 = ($26 | 0) == (5);
                if ($27) {
                    label = 6;
                } else {
                    $28 = ((($18)) + 12 | 0);
                    $29 = HEAP8[$28 >> 0] | 0;
                    $30 = ($29 << 24 >> 24) == (0);
                    if ($30) {
                        $$1$off0$i = $$060$off072$i;
                    } else {
                        label = 6;
                    }
                }
                if ((label | 0) == 6) {
                    label = 0;
                    $$1$off0$i = 1;
                }
                $31 = (($$06171$i) + 1) | 0;
                $32 = ($31 >>> 0) > ($11 >>> 0);
                if ($32) {
                    $$060$off0$lcssa$i = $$1$off0$i;
                    break;
                } else {
                    $$060$off072$i = $$1$off0$i; $$06171$i = $31;
                }
            }
        }
        $14 = ((($0)) + 241920 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ($15 | 0) == (0 | 0);
        if ($16) {
            $33 = ((($0)) + 241916 | 0);
            $34 = HEAP32[$33 >> 2] | 0;
            $35 = ($34 | 0) == (0 | 0);
            if ($35) {
                $104 = ((($0)) + 241912 | 0);
                $105 = HEAP32[$104 >> 2] | 0;
                $106 = ($105 | 0) == (0 | 0);
                if ($106) {
                    $107 = ((($0)) + 241908 | 0);
                    $108 = HEAP32[$107 >> 2] | 0;
                    $109 = ($108 | 0) == (0 | 0);
                    if ($109) {
                        $110 = ((($0)) + 241904 | 0);
                        $111 = HEAP32[$110 >> 2] | 0;
                        $112 = ($111 | 0) == (0 | 0);
                        if ($112) {
                            $113 = ((($0)) + 241900 | 0);
                            $114 = HEAP32[$113 >> 2] | 0;
                            $115 = ($114 | 0) == (0 | 0);
                            if ($115) {
                                $116 = ((($0)) + 241896 | 0);
                                $117 = HEAP32[$116 >> 2] | 0;
                                $118 = ($117 | 0) == (0 | 0);
                                if ($118) {
                                    $119 = ((($0)) + 241892 | 0);
                                    $120 = HEAP32[$119 >> 2] | 0;
                                    $$059$i = 0; $46 = $120;
                                } else {
                                    $$059$i = 1; $46 = $117;
                                }
                            } else {
                                $$059$i = 2; $46 = $114;
                            }
                        } else {
                            $$059$i = 3; $46 = $111;
                        }
                    } else {
                        $$059$i = 4; $46 = $108;
                    }
                } else {
                    $$059$i = 5; $46 = $105;
                }
            } else {
                $$059$i = 6; $46 = $34;
            }
        } else {
            $$059$i = 7; $46 = $15;
        }
        $36 = ((($3)) + 28 | 0);
        $37 = HEAP32[$36 >> 2] | 0;
        $38 = ($37 | 0) == (0 | 0);
        if ($38) {
            $39 = ((($3)) + 24 | 0);
            $40 = HEAP32[$39 >> 2] | 0;
            $41 = ($40 | 0) == (0 | 0);
            if ($41) {
                $89 = ((($3)) + 20 | 0);
                $90 = HEAP32[$89 >> 2] | 0;
                $91 = ($90 | 0) == (0 | 0);
                if ($91) {
                    $92 = ((($3)) + 16 | 0);
                    $93 = HEAP32[$92 >> 2] | 0;
                    $94 = ($93 | 0) == (0 | 0);
                    if ($94) {
                        $95 = ((($3)) + 12 | 0);
                        $96 = HEAP32[$95 >> 2] | 0;
                        $97 = ($96 | 0) == (0 | 0);
                        if ($97) {
                            $98 = ((($3)) + 8 | 0);
                            $99 = HEAP32[$98 >> 2] | 0;
                            $100 = ($99 | 0) == (0 | 0);
                            if ($100) {
                                $101 = ((($3)) + 4 | 0);
                                $102 = HEAP32[$101 >> 2] | 0;
                                $103 = ($102 | 0) != (0 | 0);
                                $$$i = $103 & 1;
                                $$058$i = $$$i;
                            } else {
                                $$058$i = 2;
                            }
                        } else {
                            $$058$i = 3;
                        }
                    } else {
                        $$058$i = 4;
                    }
                } else {
                    $$058$i = 5;
                }
            } else {
                $$058$i = 6;
            }
        } else {
            $$058$i = 7;
        }
        $42 = ($$058$i | 0) == ($$059$i | 0);
        if ($42) {
            $43 = (($3) + ($$059$i << 2) | 0);
            $44 = HEAP32[$43 >> 2] | 0;
            $45 = ($44 | 0) != ($46 | 0);
            $brmerge$i = $$060$off0$lcssa$i | $45;
            if ($brmerge$i) {
                label = 17;
            } else {
                $47 = ((($0)) + 241892 | 0);
                $48 = HEAP32[$47 >> 2] | 0;
                $49 = ($48 | 0) == (0 | 0);
                if ($49) {
                    $50 = HEAP32[$3 >> 2] | 0;
                    $51 = ($50 | 0) == (0 | 0);
                    if (!($51)) {
                        HEAP32[$47 >> 2] = $50;
                    }
                }
                $52 = ((($0)) + 241896 | 0);
                $53 = HEAP32[$52 >> 2] | 0;
                $54 = ($53 | 0) == (0 | 0);
                if ($54) {
                    $56 = ((($3)) + 4 | 0);
                    $57 = HEAP32[$56 >> 2] | 0;
                    $58 = ($57 | 0) == (0 | 0);
                    if (!($58)) {
                        HEAP32[$52 >> 2] = $57;
                    }
                }
                $59 = ((($0)) + 241900 | 0);
                $60 = HEAP32[$59 >> 2] | 0;
                $61 = ($60 | 0) == (0 | 0);
                if ($61) {
                    $62 = ((($3)) + 8 | 0);
                    $63 = HEAP32[$62 >> 2] | 0;
                    $64 = ($63 | 0) == (0 | 0);
                    if (!($64)) {
                        HEAP32[$59 >> 2] = $63;
                    }
                }
                $65 = ((($0)) + 241904 | 0);
                $66 = HEAP32[$65 >> 2] | 0;
                $67 = ($66 | 0) == (0 | 0);
                if ($67) {
                    $68 = ((($3)) + 12 | 0);
                    $69 = HEAP32[$68 >> 2] | 0;
                    $70 = ($69 | 0) == (0 | 0);
                    if (!($70)) {
                        HEAP32[$65 >> 2] = $69;
                    }
                }
                $71 = ((($0)) + 241908 | 0);
                $72 = HEAP32[$71 >> 2] | 0;
                $73 = ($72 | 0) == (0 | 0);
                if ($73) {
                    $74 = ((($3)) + 16 | 0);
                    $75 = HEAP32[$74 >> 2] | 0;
                    $76 = ($75 | 0) == (0 | 0);
                    if (!($76)) {
                        HEAP32[$71 >> 2] = $75;
                    }
                }
                $77 = ((($0)) + 241912 | 0);
                $78 = HEAP32[$77 >> 2] | 0;
                $79 = ($78 | 0) == (0 | 0);
                if ($79) {
                    $80 = ((($3)) + 20 | 0);
                    $81 = HEAP32[$80 >> 2] | 0;
                    $82 = ($81 | 0) == (0 | 0);
                    if (!($82)) {
                        HEAP32[$77 >> 2] = $81;
                    }
                }
                $83 = ((($0)) + 241916 | 0);
                $84 = HEAP32[$83 >> 2] | 0;
                $85 = ($84 | 0) == (0 | 0);
                if ($85) {
                    $86 = ((($3)) + 24 | 0);
                    $87 = HEAP32[$86 >> 2] | 0;
                    $88 = ($87 | 0) == (0 | 0);
                    if (!($88)) {
                        HEAP32[$83 >> 2] = $87;
                    }
                }
                $$not$i = $16 ^ 1;
                $brmerge82$i = $38 | $$not$i;
                if ($brmerge82$i) {
                    $$2$off065$i = 0;
                } else {
                    HEAP32[$14 >> 2] = $37;
                    $$2$off065$i = 0;
                }
            }
        } else {
            label = 17;
        }
        if ((label | 0) == 17) {
            $55 = ((($0)) + 241892 | 0);
            ; HEAP32[$55 >> 2] = HEAP32[$3 >> 2] | 0; HEAP32[$55 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 0; HEAP32[$55 + 8 >> 2] = HEAP32[$3 + 8 >> 2] | 0; HEAP32[$55 + 12 >> 2] = HEAP32[$3 + 12 >> 2] | 0; HEAP32[$55 + 16 >> 2] = HEAP32[$3 + 16 >> 2] | 0; HEAP32[$55 + 20 >> 2] = HEAP32[$3 + 20 >> 2] | 0; HEAP32[$55 + 24 >> 2] = HEAP32[$3 + 24 >> 2] | 0; HEAP32[$55 + 28 >> 2] = HEAP32[$3 + 28 >> 2] | 0;
            $$2$off065$i = 1;
        }
        $121 = ((($0)) + 242334 | 0);
        $122 = HEAP8[$121 >> 0] | 0;
        $123 = ($122 << 24 >> 24) != (0);
        $124 = $$2$off065$i | $123;
        $125 = $124 & 1;
        HEAP8[$121 >> 0] = $125;
        $126 = (__ZN7WelsDec25WelsDecodeAccessUnitStartEPNS_21TagWelsDecoderContextE($0) | 0);
        _GetVclNalTemporalId($0);
        $127 = ($126 | 0) == (0);
        if ($127) {
            $162 = HEAP32[$5 >> 2] | 0;
            $163 = HEAP32[$8 >> 2] | 0;
            $164 = (($162) + ($163 << 2) | 0);
            $165 = HEAP32[$164 >> 2] | 0;
            $166 = ((($165)) + 88 | 0);
            $167 = HEAP32[$166 >> 2] | 0;
            $168 = ((($0)) + 241924 | 0);
            HEAP32[$168 >> 2] = $167;
            $169 = HEAP32[$5 >> 2] | 0;
            $170 = HEAP32[$8 >> 2] | 0;
            $171 = (($169) + ($170 << 2) | 0);
            $172 = HEAP32[$171 >> 2] | 0;
            $173 = ((($172)) + 92 | 0);
            $174 = HEAP32[$173 >> 2] | 0;
            $175 = ((($0)) + 241928 | 0);
            HEAP32[$175 >> 2] = $174;
            $176 = HEAP8[$121 >> 0] | 0;
            $177 = ($176 << 24 >> 24) == (0);
            if (!($177)) {
                __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($0);
                $178 = HEAP32[$168 >> 2] | 0;
                $179 = ((($178)) + 4 | 0);
                $180 = HEAP32[$179 >> 2] | 0;
                $181 = ((($178)) + 8 | 0);
                $182 = HEAP32[$181 >> 2] | 0;
                $183 = (_SyncPictureResolutionExt($0, $180, $182) | 0);
                $184 = ($183 | 0) == (0);
                if (!($184)) {
                    HEAP32[$vararg_buffer >> 2] = $183;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 22544, $vararg_buffer);
                    $$0 = $183;
                    STACKTOP = sp; return ($$0 | 0);
                }
            }
            $185 = (__ZN7WelsDec23DecodeCurrentAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) | 0);
            $186 = HEAP32[$4 >> 2] | 0;
            $187 = HEAP32[$186 >> 2] | 0;
            $188 = ((($186)) + 20 | 0);
            $189 = HEAP32[$188 >> 2] | 0;
            $190 = (($187) + ($189 << 2) | 0);
            $191 = HEAP32[$190 >> 2] | 0;
            $192 = ((($0)) + 317180 | 0);
            ; HEAP32[$192 >> 2] = HEAP32[$191 >> 2] | 0; HEAP32[$192 + 4 >> 2] = HEAP32[$191 + 4 >> 2] | 0; HEAP32[$192 + 8 >> 2] = HEAP32[$191 + 8 >> 2] | 0; HEAP32[$192 + 12 >> 2] = HEAP32[$191 + 12 >> 2] | 0; HEAP32[$192 + 16 >> 2] = HEAP32[$191 + 16 >> 2] | 0; HEAP32[$192 + 20 >> 2] = HEAP32[$191 + 20 >> 2] | 0;
            $193 = ((($0)) + 317204 | 0);
            $194 = ((($191)) + 24 | 0);
            _memcpy(($193 | 0), ($194 | 0), 2744) | 0;
            $195 = ((($186)) + 16 | 0);
            HEAP32[$195 >> 2] = 0;
            HEAP32[$188 >> 2] = 0;
            $196 = ((($186)) + 24 | 0);
            HEAP8[$196 >> 0] = 0;
            $197 = ((($186)) + 8 | 0);
            $198 = HEAP32[$197 >> 2] | 0;
            $199 = ($198 | 0) == (0);
            if (!($199)) {
                $200 = ((($186)) + 4 | 0);
                $201 = HEAP32[$200 >> 2] | 0;
                $202 = (($201) - ($198)) | 0;
                $203 = ($202 | 0) == (0);
                if (!($203)) {
                    $$036$i$i = 0;
                    while (1) {
                        $204 = HEAP32[$186 >> 2] | 0;
                        $205 = (($$036$i$i) + ($198)) | 0;
                        $206 = (($204) + ($205 << 2) | 0);
                        $207 = HEAP32[$206 >> 2] | 0;
                        $208 = (($204) + ($$036$i$i << 2) | 0);
                        $209 = HEAP32[$208 >> 2] | 0;
                        HEAP32[$206 >> 2] = $209;
                        $210 = HEAP32[$186 >> 2] | 0;
                        $211 = (($210) + ($$036$i$i << 2) | 0);
                        HEAP32[$211 >> 2] = $207;
                        $212 = (($$036$i$i) + 1) | 0;
                        $exitcond$i$i = ($212 | 0) == ($202 | 0);
                        if ($exitcond$i$i) {
                            break;
                        } else {
                            $$036$i$i = $212;
                        }
                    }
                }
                HEAP32[$200 >> 2] = $202;
                HEAP32[$197 >> 2] = $202;
            }
            $213 = ($185 | 0) == (0);
            if ($213) {
                $$0 = 0;
                STACKTOP = sp; return ($$0 | 0);
            }
            HEAP32[$vararg_buffer1 >> 2] = $185;
            __Z7WelsLogP13TagLogContextiPKcz($0, 8, 22597, $vararg_buffer1);
            $$0 = $185;
            STACKTOP = sp; return ($$0 | 0);
        }
        $128 = HEAP32[$4 >> 2] | 0;
        $129 = ((($128)) + 20 | 0);
        $130 = HEAP32[$129 >> 2] | 0;
        $$029$i = (($130) + 1) | 0;
        $131 = ((($128)) + 4 | 0);
        $132 = HEAP32[$131 >> 2] | 0;
        $133 = ($$029$i >>> 0) < ($132 >>> 0);
        if ($133) {
            $$02630$i = 0; $$031$i = $$029$i;
            while (1) {
                $134 = HEAP32[$128 >> 2] | 0;
                $135 = (($134) + ($$031$i << 2) | 0);
                $136 = HEAP32[$135 >> 2] | 0;
                $137 = (($134) + ($$02630$i << 2) | 0);
                $138 = HEAP32[$137 >> 2] | 0;
                HEAP32[$135 >> 2] = $138;
                $139 = HEAP32[$128 >> 2] | 0;
                $140 = (($139) + ($$02630$i << 2) | 0);
                HEAP32[$140 >> 2] = $136;
                $141 = (($$02630$i) + 1) | 0;
                $$0$i = (($$031$i) + 1) | 0;
                $142 = HEAP32[$131 >> 2] | 0;
                $143 = ($$0$i >>> 0) < ($142 >>> 0);
                if ($143) {
                    $$02630$i = $141; $$031$i = $$0$i;
                } else {
                    break;
                }
            }
            $$pre$i = HEAP32[$129 >> 2] | 0;
            $$lcssa$i = $142; $145 = $$pre$i;
        } else {
            $$lcssa$i = $132; $145 = $130;
        }
        $144 = ($$lcssa$i >>> 0) > ($145 >>> 0);
        $$neg27$i = $145 ^ -1;
        $146 = (($$lcssa$i) + ($$neg27$i)) | 0;
        $storemerge$i = $144 ? $146 : 0;
        HEAP32[$131 >> 2] = $storemerge$i;
        $147 = ((($128)) + 8 | 0);
        HEAP32[$147 >> 2] = 0;
        $148 = ((($128)) + 16 | 0);
        HEAP32[$148 >> 2] = 0;
        HEAP32[$129 >> 2] = 0;
        $149 = ((($128)) + 24 | 0);
        HEAP8[$149 >> 0] = 0;
        $150 = ((($0)) + 242344 | 0);
        $151 = HEAP8[$150 >> 0] | 0;
        $152 = ($151 << 24 >> 24) == (0);
        if ($152) {
            HEAP32[$2 >> 2] = 0;
        }
        $153 = HEAP8[$121 >> 0] | 0;
        $154 = ($153 << 24 >> 24) == (0);
        if ($154) {
            $156 = ((($0)) + 242335 | 0);
            $157 = HEAP8[$156 >> 0] | 0;
            HEAP8[$121 >> 0] = $157;
            HEAP8[$156 >> 0] = 0;
            $158 = ($157 << 24 >> 24) == (0);
            if ($158) {
                $$0 = $126;
                STACKTOP = sp; return ($$0 | 0);
            }
        } else {
            HEAP8[$121 >> 0] = 1;
            $155 = ((($0)) + 242335 | 0);
            HEAP8[$155 >> 0] = 0;
        }
        $159 = ((($0)) + 242320 | 0);
        $160 = HEAP32[$159 >> 2] | 0;
        $161 = ($160 | 0) == (0);
        if (!($161)) {
            $$0 = $126;
            STACKTOP = sp; return ($$0 | 0);
        }
        $scevgep$i = ((($0)) + 241892 | 0);
        ; HEAP32[$scevgep$i >> 2] = 0 | 0; HEAP32[$scevgep$i + 4 >> 2] = 0 | 0; HEAP32[$scevgep$i + 8 >> 2] = 0 | 0; HEAP32[$scevgep$i + 12 >> 2] = 0 | 0; HEAP32[$scevgep$i + 16 >> 2] = 0 | 0; HEAP32[$scevgep$i + 20 >> 2] = 0 | 0; HEAP32[$scevgep$i + 24 >> 2] = 0 | 0; HEAP32[$scevgep$i + 28 >> 2] = 0 | 0;
        $$0 = $126;
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec18DecodeFinishUpdateEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$pr = 0, $$pre$i = 0, $$pre15$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 242334 | 0);
        HEAP8[$1 >> 0] = 0;
        $2 = ((($0)) + 242336 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = $3 & 1;
        $5 = ($4 | 0) == (0);
        if ($5) {
            $11 = $3;
        } else {
            $6 = ((($0)) + 208752 | 0);
            $7 = ((($0)) + 208756 | 0);
            $8 = HEAP32[$7 >> 2] | 0;
            $9 = (((($0)) + 33648 | 0) + (($8 * 684) | 0) | 0);
            _memcpy(($9 | 0), ($6 | 0), 684) | 0;
            $$pre$i = HEAP32[$2 >> 2] | 0;
            $11 = $$pre$i;
        }
        $10 = $11 & 2;
        $12 = ($10 | 0) == (0);
        if ($12) {
            $17 = $11;
        } else {
            $13 = ((($0)) + 32816 | 0);
            $14 = HEAP32[$13 >> 2] | 0;
            $15 = (((($0)) + 6192 | 0) + (($14 * 832) | 0) | 0);
            _memcpy(($15 | 0), ($13 | 0), 832) | 0;
            HEAP8[$1 >> 0] = 1;
            $$pre15$i = HEAP32[$2 >> 2] | 0;
            $17 = $$pre15$i;
        }
        $16 = $17 & 4;
        $18 = ($16 | 0) == (0);
        if ($18) {
            $$pr = HEAP8[$1 >> 0] | 0;
            HEAP32[$2 >> 2] = 0;
            $22 = ($$pr << 24 >> 24) == (0);
            if ($22) {
                $24 = ((($0)) + 242335 | 0);
                $25 = HEAP8[$24 >> 0] | 0;
                HEAP8[$1 >> 0] = $25;
                HEAP8[$24 >> 0] = 0;
                $26 = ($25 << 24 >> 24) == (0);
                if ($26) {
                    return;
                }
            } else {
                label = 8;
            }
        } else {
            $19 = ((($0)) + 237100 | 0);
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = (((($0)) + 209452 | 0) + (($20 * 864) | 0) | 0);
            _memcpy(($21 | 0), ($19 | 0), 864) | 0;
            HEAP8[$1 >> 0] = 1;
            HEAP32[$2 >> 2] = 0;
            label = 8;
        }
        if ((label | 0) == 8) {
            HEAP8[$1 >> 0] = 1;
            $23 = ((($0)) + 242335 | 0);
            HEAP8[$23 >> 0] = 0;
        }
        $27 = ((($0)) + 242320 | 0);
        $28 = HEAP32[$27 >> 2] | 0;
        $29 = ($28 | 0) == (0);
        if (!($29)) {
            return;
        }
        $scevgep$i = ((($0)) + 241892 | 0);
        ; HEAP32[$scevgep$i >> 2] = 0 | 0; HEAP32[$scevgep$i + 4 >> 2] = 0 | 0; HEAP32[$scevgep$i + 8 >> 2] = 0 | 0; HEAP32[$scevgep$i + 12 >> 2] = 0 | 0; HEAP32[$scevgep$i + 16 >> 2] = 0 | 0; HEAP32[$scevgep$i + 20 >> 2] = 0 | 0; HEAP32[$scevgep$i + 24 >> 2] = 0 | 0; HEAP32[$scevgep$i + 28 >> 2] = 0 | 0;
        return;
    }
    function __ZN7WelsDec25WelsDecodeAccessUnitStartEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$$035$i = 0, $$0 = 0, $$0$i = 0, $$0$in$i = 0, $$035$i = 0, $$2$i = 0, $$pr = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
        var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
        var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
        var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $or$cond$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $1 = ((($0)) + 241888 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 20 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = HEAP32[$2 >> 2] | 0;
        $6 = (($5) + ($4 << 2) | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($7)) + 22 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ((($0)) + 241948 | 0);
        HEAP8[$10 >> 0] = $9;
        $11 = (($4) + 1) | 0;
        $12 = ((($2)) + 8 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = ((($2)) + 24 | 0);
        HEAP8[$13 >> 0] = 1;
        $14 = ((($0)) + 242324 | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = ($15 << 24 >> 24) == (0);
        if ($16) {
            $17 = ((($0)) + 242334 | 0);
            $18 = HEAP8[$17 >> 0] | 0;
            $19 = ($18 << 24 >> 24) == (0);
            if (!($19)) {
                $$035$i = 0;
                label = 3;
            }
        } else {
            $$035$i = 0;
            label = 3;
        }
        if ((label | 0) == 3) {
            while (1) {
                label = 0;
                $20 = ($$035$i >>> 0) < ($11 >>> 0);
                if (!($20)) {
                    $$2$i = $$035$i;
                    break;
                }
                $21 = HEAP32[$2 >> 2] | 0;
                $22 = (($21) + ($$035$i << 2) | 0);
                $23 = HEAP32[$22 >> 2] | 0;
                $24 = ((($23)) + 4 | 0);
                $25 = HEAP32[$24 >> 2] | 0;
                $26 = ($25 | 0) == (5);
                if ($26) {
                    $$2$i = $$035$i;
                    break;
                }
                $27 = ((($23)) + 12 | 0);
                $28 = HEAP8[$27 >> 0] | 0;
                $29 = ($28 << 24 >> 24) == (0);
                $30 = $28 ^ 1;
                $31 = $30 & 255;
                $$$035$i = (($$035$i) + ($31)) | 0;
                if ($29) {
                    $$035$i = $$$035$i;
                    label = 3;
                } else {
                    $$2$i = $$$035$i;
                    break;
                }
            }
            $32 = ($$2$i | 0) == ($11 | 0);
            if ($32) {
                $33 = ((($0)) + 512292 | 0);
                $34 = HEAP32[$33 >> 2] | 0;
                $35 = (($34) + 1) | 0;
                HEAP32[$33 >> 2] = $35;
                __Z7WelsLogP13TagLogContextiPKcz($0, 2, 26497, $vararg_buffer);
                $36 = ((($0)) + 116 | 0);
                $37 = HEAP32[$36 >> 2] | 0;
                $38 = $37 | 2;
                HEAP32[$36 >> 2] = $38;
                $39 = ((($0)) + 242340 | 0);
                $40 = HEAP32[$39 >> 2] | 0;
                $41 = ($40 | 0) == (0);
                if ($41) {
                    $42 = $37 | 18;
                    HEAP32[$36 >> 2] = $42;
                    $$0 = 16;
                    STACKTOP = sp; return ($$0 | 0);
                }
            }
        }
        $43 = HEAP32[$1 >> 2] | 0;
        $44 = ((($43)) + 16 | 0);
        HEAP32[$44 >> 2] = 0;
        $45 = ((($0)) + 241949 | 0);
        $46 = HEAP8[$45 >> 0] | 0;
        $47 = ($46 << 24 >> 24) == (0);
        if (!($47)) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $48 = (__ZN7WelsDec26CheckIntegrityNalUnitsListEPNS_21TagWelsDecoderContextE($0) | 0);
        if (!($48)) {
            $49 = ((($0)) + 116 | 0);
            $50 = HEAP32[$49 >> 2] | 0;
            $51 = $50 | 4;
            HEAP32[$49 >> 2] = $51;
            $$0 = 4;
            STACKTOP = sp; return ($$0 | 0);
        }
        $$pr = HEAP8[$45 >> 0] | 0;
        $52 = ($$pr << 24 >> 24) == (0);
        if (!($52)) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $53 = HEAP32[$1 >> 2] | 0;
        $54 = ((($53)) + 20 | 0);
        $55 = HEAP32[$54 >> 2] | 0;
        $56 = ((($53)) + 16 | 0);
        $57 = HEAP32[$56 >> 2] | 0;
        $58 = HEAP32[$53 >> 2] | 0;
        $59 = (($58) + ($57 << 2) | 0);
        $60 = HEAP32[$59 >> 2] | 0;
        $61 = ((($60)) + 15 | 0);
        $62 = HEAP8[$61 >> 0] | 0;
        $63 = ((($60)) + 16 | 0);
        $64 = HEAP8[$63 >> 0] | 0;
        $65 = ((($60)) + 17 | 0);
        $66 = HEAP8[$65 >> 0] | 0;
        $67 = ((($0)) + 241953 | 0);
        HEAP8[$67 >> 0] = 1;
        $68 = ($55 | 0) == ($57 | 0);
        if ($68) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        } else {
            $$0$in$i = $57;
        }
        while (1) {
            $$0$i = (($$0$in$i) + 1) | 0;
            $69 = ($$0$in$i | 0) < ($55 | 0);
            if (!($69)) {
                $$0 = 0;
                label = 18;
                break;
            }
            $70 = HEAP32[$53 >> 2] | 0;
            $71 = (($70) + ($$0$i << 2) | 0);
            $72 = HEAP32[$71 >> 2] | 0;
            $73 = ((($72)) + 15 | 0);
            $74 = HEAP8[$73 >> 0] | 0;
            $75 = ($62 << 24 >> 24) == ($74 << 24 >> 24);
            if (!($75)) {
                break;
            }
            $76 = ((($72)) + 17 | 0);
            $77 = HEAP8[$76 >> 0] | 0;
            $78 = ((($72)) + 16 | 0);
            $79 = HEAP8[$78 >> 0] | 0;
            $80 = ($64 << 24 >> 24) == ($79 << 24 >> 24);
            $81 = ($66 << 24 >> 24) == ($77 << 24 >> 24);
            $or$cond$i = $81 & $80;
            if ($or$cond$i) {
                $$0$in$i = $$0$i;
            } else {
                break;
            }
        }
        if ((label | 0) == 18) {
            STACKTOP = sp; return ($$0 | 0);
        }
        HEAP8[$67 >> 0] = 0;
        $$0 = 0;
        STACKTOP = sp; return ($$0 | 0);
    }
    function _GetVclNalTemporalId($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 241888 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 16 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($0)) + 317160 | 0);
        HEAP32[$5 >> 2] = 1;
        $6 = HEAP32[$2 >> 2] | 0;
        $7 = (($6) + ($4 << 2) | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($8)) + 17 | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = $10 & 255;
        $12 = ((($0)) + 317164 | 0);
        HEAP32[$12 >> 2] = $11;
        return;
    }
    function _SyncPictureResolutionExt($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $vararg_buffer3 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $3 = (_WelsRequestMem($0, $1, $2) | 0);
        $4 = ($3 | 0) == (0);
        if (!($4)) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25871, $vararg_buffer);
            $5 = ((($0)) + 116 | 0);
            HEAP32[$5 >> 2] = 16384;
            $$0 = $3;
            STACKTOP = sp; return ($$0 | 0);
        }
        $6 = $2 << 4;
        $7 = $1 << 4;
        $8 = (__ZN7WelsDec22InitialDqLayersContextEPNS_21TagWelsDecoderContextEii($0, $7, $6) | 0);
        $9 = ($8 | 0) == (0);
        if (!($9)) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25941, $vararg_buffer1);
            $10 = ((($0)) + 116 | 0);
            HEAP32[$10 >> 2] = 16384;
        }
        $11 = ((($0)) + 562528 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = (__ZNK10WelsCommon12CMemoryAlign18WelsGetMemoryUsageEv($12) | 0);
        $14 = (($13) + 562536) | 0;
        $15 = $vararg_buffer3;
        $16 = $15;
        HEAP32[$16 >> 2] = $14;
        $17 = (($15) + 4) | 0;
        $18 = $17;
        HEAP32[$18 >> 2] = 0;
        __Z7WelsLogP13TagLogContextiPKcz($0, 4, 26019, $vararg_buffer3);
        $$0 = $8;
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec23DecodeCurrentAccessUnitEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0$i = 0, $$0249420 = 0, $$0259 = 0, $$0261419 = 0, $$0266418 = 0, $$0270417 = 0, $$0275416 = 0, $$0280$off0415 = 0, $$1250 = 0, $$1260 = 0, $$1262 = 0, $$1267 = 0, $$1271 = 0, $$1276 = 0, $$1281$off0 = 0, $$2268 = 0, $$3264 = 0, $$3273 = 0, $$3278 = 0, $$355 = 0;
        var $$4253 = 0, $$4284$off0 = 0, $$5285$off0 = 0, $$6286$off0 = 0, $$7$ph = 0, $$7287$off0 = 0, $$8 = 0, $$9$off0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre435 = 0, $$pre436 = 0, $$sink2$in = 0, $$sink2$in$in = 0, $$sroa$0 = 0, $$sroa$0$24$$sroa_idx = 0, $$sroa$0$24$sroa_idx = 0, $$sroa$10$0$$sroa_idx = 0, $$sroa$12$0$$sroa_idx = 0, $$sroa$6$0$$sroa_idx = 0;
        var $$sroa$7$0$$sroa_idx = 0, $$sroa$7328$0$$sroa_idx = 0, $$sroa$8$0$$sroa_idx = 0, $$sroa$9 = 0, $$sroa$9$0$$sroa_idx = 0, $$sroa$9332$0$$sroa_idx = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
        var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
        var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
        var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
        var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
        var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
        var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
        var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
        var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
        var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
        var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
        var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
        var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
        var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
        var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
        var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
        var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
        var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
        var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
        var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
        var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
        var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
        var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
        var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
        var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $not$ = 0, $or$cond = 0, $switch$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 3936 | 0;
        $vararg_buffer11 = sp + 32 | 0;
        $vararg_buffer8 = sp + 24 | 0;
        $vararg_buffer4 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $$sroa$0 = sp + 48 | 0;
        $$sroa$9 = sp + 3916 | 0;
        $3 = ((($0)) + 241888 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($4)) + 16 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($4)) + 20 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($0)) + 241948 | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = ((($0)) + 48 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ($12 | 0) == (0 | 0);
        if ($13) {
            $16 = -1;
        } else {
            $14 = ((($12)) + 12 | 0);
            $15 = HEAP8[$14 >> 0] | 0;
            $16 = $15;
        }
        $17 = ($16 & 255) > ($10 & 255);
        $18 = $17 ? $10 : $16;
        $19 = $18 & 255;
        $20 = $19 >>> 4;
        $21 = $20 & 7;
        $22 = ((($0)) + 241952 | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = ($23 << 24 >> 24) == (0);
        $$phi$trans$insert = ((($0)) + 241932 | 0);
        if ($24) {
            $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
            $28 = $$pre;
        } else {
            $25 = ((($0)) + 241936 | 0);
            $26 = HEAP32[$25 >> 2] | 0;
            HEAP32[$$phi$trans$insert >> 2] = $26;
            $27 = $26;
            $28 = $27;
        }
        $29 = ($28 | 0) == (0 | 0);
        if (!($29)) {
            $30 = ((($0)) + 5344 | 0);
            $31 = HEAP32[$30 >> 2] | 0;
            $32 = ((($28)) + 3908 | 0);
            HEAP32[$32 >> 2] = $31;
            $33 = ((($0)) + 5436 | 0);
            $34 = HEAP32[$33 >> 2] | 0;
            $35 = ((($28)) + 3912 | 0);
            HEAP32[$35 >> 2] = $34;
            $36 = ((($0)) + 5348 | 0);
            $37 = HEAP32[$36 >> 2] | 0;
            $38 = ((($28)) + 3916 | 0);
            HEAP32[$38 >> 2] = $37;
            $39 = ((($0)) + 5356 | 0);
            $40 = HEAP32[$39 >> 2] | 0;
            $41 = ((($28)) + 3932 | 0);
            HEAP32[$41 >> 2] = $40;
            $42 = ((($0)) + 5364 | 0);
            $43 = HEAP32[$42 >> 2] | 0;
            $44 = ((($28)) + 3940 | 0);
            HEAP32[$44 >> 2] = $43;
            $45 = ((($0)) + 5368 | 0);
            $46 = HEAP32[$45 >> 2] | 0;
            $47 = ((($28)) + 3944 | 0);
            HEAP32[$47 >> 2] = $46;
            $48 = ((($0)) + 5372 | 0);
            $49 = HEAP32[$48 >> 2] | 0;
            $50 = ((($28)) + 3948 | 0);
            HEAP32[$50 >> 2] = $49;
            $51 = ((($0)) + 5376 | 0);
            $52 = HEAP32[$51 >> 2] | 0;
            $53 = ((($28)) + 3952 | 0);
            HEAP32[$53 >> 2] = $52;
            $54 = ((($0)) + 5380 | 0);
            $55 = HEAP32[$54 >> 2] | 0;
            $56 = ((($28)) + 3924 | 0);
            HEAP32[$56 >> 2] = $55;
            $57 = ((($0)) + 5388 | 0);
            $58 = HEAP32[$57 >> 2] | 0;
            $59 = ((($28)) + 3960 | 0);
            HEAP32[$59 >> 2] = $58;
            $60 = ((($0)) + 5392 | 0);
            $61 = HEAP32[$60 >> 2] | 0;
            $62 = ((($28)) + 3964 | 0);
            HEAP32[$62 >> 2] = $61;
            $63 = ((($0)) + 5396 | 0);
            $64 = HEAP32[$63 >> 2] | 0;
            $65 = ((($28)) + 3968 | 0);
            HEAP32[$65 >> 2] = $64;
            $66 = ((($0)) + 5400 | 0);
            $67 = HEAP32[$66 >> 2] | 0;
            $68 = ((($28)) + 3988 | 0);
            HEAP32[$68 >> 2] = $67;
            $69 = ((($0)) + 5404 | 0);
            $70 = HEAP32[$69 >> 2] | 0;
            $71 = ((($28)) + 3992 | 0);
            HEAP32[$71 >> 2] = $70;
            $72 = ((($0)) + 5408 | 0);
            $73 = HEAP32[$72 >> 2] | 0;
            $74 = ((($28)) + 3996 | 0);
            HEAP32[$74 >> 2] = $73;
            $75 = ((($0)) + 5412 | 0);
            $76 = HEAP32[$75 >> 2] | 0;
            $77 = ((($28)) + 4000 | 0);
            HEAP32[$77 >> 2] = $76;
            $78 = ((($0)) + 5416 | 0);
            $79 = HEAP32[$78 >> 2] | 0;
            $80 = ((($28)) + 4004 | 0);
            HEAP32[$80 >> 2] = $79;
            $81 = ((($0)) + 5420 | 0);
            $82 = HEAP32[$81 >> 2] | 0;
            $83 = ((($28)) + 3956 | 0);
            HEAP32[$83 >> 2] = $82;
            $84 = ((($0)) + 5432 | 0);
            $85 = HEAP32[$84 >> 2] | 0;
            $86 = ((($28)) + 4008 | 0);
            HEAP32[$86 >> 2] = $85;
            $87 = ((($0)) + 5444 | 0);
            $88 = HEAP32[$87 >> 2] | 0;
            $89 = ((($28)) + 3976 | 0);
            HEAP32[$89 >> 2] = $88;
            $90 = ((($0)) + 5440 | 0);
            $91 = HEAP32[$90 >> 2] | 0;
            $92 = ((($28)) + 3972 | 0);
            HEAP32[$92 >> 2] = $91;
            $93 = ((($0)) + 5448 | 0);
            $94 = HEAP32[$93 >> 2] | 0;
            $95 = ((($28)) + 3980 | 0);
            HEAP32[$95 >> 2] = $94;
            $96 = ((($0)) + 5452 | 0);
            $97 = HEAP32[$96 >> 2] | 0;
            $98 = ((($28)) + 3984 | 0);
            HEAP32[$98 >> 2] = $97;
        }
        $99 = ($6 | 0) > ($8 | 0);
        if ($99) {
            $$8 = 0;
            STACKTOP = sp; return ($$8 | 0);
        }
        $100 = HEAP32[$4 >> 2] | 0;
        $101 = (($100) + ($6 << 2) | 0);
        $102 = HEAP32[$101 >> 2] | 0;
        $103 = ((($0)) + 5464 | 0);
        $104 = ((($0)) + 209440 | 0);
        $105 = ((($0)) + 242320 | 0);
        $$sink2$in$in = ((($0)) + 242334 | 0);
        $106 = ((($0)) + 512345 | 0);
        $107 = ((($0)) + 5248 | 0);
        $$sroa$0$24$sroa_idx = ((($$sroa$0)) + 24 | 0);
        $108 = ((($0)) + 5240 | 0);
        $109 = ((($0)) + 5244 | 0);
        $110 = ((($0)) + 562528 | 0);
        $111 = ((($0)) + 100 | 0);
        $112 = ((($0)) + 209436 | 0);
        $113 = ((($0)) + 104 | 0);
        $114 = ((($0)) + 108 | 0);
        $115 = ((($0)) + 116 | 0);
        $116 = ((($0)) + 242340 | 0);
        $117 = ((($0)) + 5852 | 0);
        $118 = ((($0)) + 242316 | 0);
        $119 = ((($0)) + 241951 | 0);
        $120 = ((($0)) + 242344 | 0);
        $121 = ((($0)) + 241924 | 0);
        $122 = ((($0)) + 241928 | 0);
        $123 = ((($0)) + 316852 | 0);
        $124 = ((($0)) + 317112 | 0);
        $125 = ((($0)) + 317116 | 0);
        $126 = ((($0)) + 112 | 0);
        $127 = ((($0)) + 5456 | 0);
        $128 = ((($0)) + 5460 | 0);
        $$pre435 = HEAP32[$103 >> 2] | 0;
        $129 = ((($0)) + 5436 | 0);
        $$0249420 = $102; $$0261419 = $6; $$0266418 = 0; $$0270417 = -1; $$0275416 = -1; $$0280$off0415 = 1; $131 = $$pre435;
        L14: while (1) {
            $130 = HEAP32[$$phi$trans$insert >> 2] | 0;
            $132 = ($131 | 0) == (0 | 0);
            if ($132) {
                $133 = HEAP32[$104 >> 2] | 0;
                $134 = (__ZN7WelsDec11PrefetchPicEPNS_10TagPicBuffE($133) | 0);
                HEAP32[$103 >> 2] = $134;
                $135 = HEAP32[$105 >> 2] | 0;
                $136 = ($135 | 0) == (0);
                if (!($136)) {
                    HEAP32[$105 >> 2] = 0;
                }
                $137 = ($134 | 0) == (0 | 0);
                if ($137) {
                    label = 14;
                    break;
                } else {
                    $146 = $134;
                    label = 16;
                }
            } else {
                $143 = HEAP32[$105 >> 2] | 0;
                $144 = ($143 | 0) == (0);
                if ($144) {
                    $146 = $131;
                    label = 16;
                } else {
                    $155 = $131;
                }
            }
            if ((label | 0) == 16) {
                label = 0;
                $$sink2$in = HEAP8[$$sink2$in$in >> 0] | 0;
                $145 = ((($146)) + 104 | 0);
                HEAP8[$145 >> 0] = $$sink2$in;
                $$pre436 = HEAP32[$103 >> 2] | 0;
                $155 = $$pre436;
            }
            $147 = ((($$0249420)) + 3912 | 0);
            $148 = $147;
            $149 = $148;
            $150 = HEAP32[$149 >> 2] | 0;
            $151 = (($148) + 4) | 0;
            $152 = $151;
            $153 = HEAP32[$152 >> 2] | 0;
            $154 = ((($155)) + 96 | 0);
            $156 = $154;
            $157 = $156;
            HEAP32[$157 >> 2] = $150;
            $158 = (($156) + 4) | 0;
            $159 = $158;
            HEAP32[$159 >> 2] = $153;
            $160 = HEAP32[$105 >> 2] | 0;
            $161 = ($160 | 0) == (0);
            if ($161) {
                $162 = HEAP32[$129 >> 2] | 0;
                $163 = HEAP32[$127 >> 2] | 0;
                $164 = HEAP32[$128 >> 2] | 0;
                $165 = $163 << 2;
                $166 = Math_imul($165, $164) | 0;
                _memset(($162 | 0), -1, ($166 | 0)) | 0;
                $167 = HEAP32[$$phi$trans$insert >> 2] | 0;
                $168 = ((($167)) + 3980 | 0);
                $169 = HEAP32[$168 >> 2] | 0;
                $170 = HEAP32[$121 >> 2] | 0;
                $171 = ((($170)) + 4 | 0);
                $172 = HEAP32[$171 >> 2] | 0;
                $173 = ((($170)) + 8 | 0);
                $174 = HEAP32[$173 >> 2] | 0;
                $175 = Math_imul($174, $172) | 0;
                _memset(($169 | 0), 0, ($175 | 0)) | 0;
                $176 = HEAP32[$$phi$trans$insert >> 2] | 0;
                $177 = ((($176)) + 3984 | 0);
                $178 = HEAP32[$177 >> 2] | 0;
                $179 = HEAP32[$121 >> 2] | 0;
                $180 = ((($179)) + 4 | 0);
                $181 = HEAP32[$180 >> 2] | 0;
                $182 = ((($179)) + 8 | 0);
                $183 = HEAP32[$182 >> 2] | 0;
                $184 = Math_imul($183, $181) | 0;
                _memset(($178 | 0), 0, ($184 | 0)) | 0;
                $185 = HEAP32[$121 >> 2] | 0;
                $186 = ((($185)) + 4 | 0);
                $187 = HEAP32[$186 >> 2] | 0;
                $188 = ((($185)) + 8 | 0);
                $189 = HEAP32[$188 >> 2] | 0;
                $190 = Math_imul($189, $187) | 0;
                $191 = HEAP32[$103 >> 2] | 0;
                $192 = ((($191)) + 116 | 0);
                HEAP32[$192 >> 2] = $190;
                $193 = HEAP32[$103 >> 2] | 0;
                $194 = ((($193)) + 108 | 0);
                HEAP32[$194 >> 2] = 0;
                $195 = HEAP32[$103 >> 2] | 0;
                $196 = ((($195)) + 112 | 0);
                HEAP32[$196 >> 2] = 0;
            }
            HEAP8[$106 >> 0] = 0;
            $197 = HEAP32[$103 >> 2] | 0;
            $198 = ((($197)) + 32 | 0);
            $199 = HEAP32[$198 >> 2] | 0;
            $200 = ((($197)) + 36 | 0);
            $201 = HEAP32[$200 >> 2] | 0;
            __ZN7WelsDec25GetI4LumaIChromaAddrTableEPiii($107, $199, $201);
            $202 = ((($$0249420)) + 22 | 0);
            $203 = HEAP8[$202 >> 0] | 0;
            $204 = ($203 & 255) > ($18 & 255);
            if ($204) {
                label = 20;
                break;
            }
            _memset(($$sroa$0 | 0), 0, 3868) | 0;
            ; HEAP16[$$sroa$9 >> 1] = 0 | 0; HEAP16[$$sroa$9 + 2 >> 1] = 0 | 0; HEAP16[$$sroa$9 + 4 >> 1] = 0 | 0;
            $205 = ((($130)) + 3900 | 0);
            $$sroa$6$0$$sroa_idx = ((($130)) + 3868 | 0);
            $$sroa$7$0$$sroa_idx = ((($130)) + 3872 | 0);
            $$sroa$7328$0$$sroa_idx = ((($130)) + 3880 | 0);
            $$sroa$8$0$$sroa_idx = ((($130)) + 3881 | 0);
            $$sroa$9$0$$sroa_idx = ((($130)) + 3882 | 0);
            $$sroa$9332$0$$sroa_idx = ((($130)) + 3888 | 0);
            $$sroa$10$0$$sroa_idx = ((($130)) + 3892 | 0);
            $$sroa$12$0$$sroa_idx = ((($130)) + 3896 | 0);
            $206 = ((($130)) + 4100 | 0);
            $207 = ((($130)) + 4044 | 0);
            $208 = ((($130)) + 4048 | 0);
            $209 = ((($130)) + 4052 | 0);
            $210 = ((($130)) + 4060 | 0);
            $211 = ((($130)) + 4064 | 0);
            $212 = ((($130)) + 4068 | 0);
            $213 = ((($130)) + 4072 | 0);
            $214 = ((($130)) + 4076 | 0);
            $215 = ((($130)) + 4105 | 0);
            $216 = ((($130)) + 4106 | 0);
            $217 = ((($130)) + 4107 | 0);
            $218 = ((($130)) + 4108 | 0);
            $219 = ((($130)) + 4109 | 0);
            $220 = ((($130)) + 4110 | 0);
            $221 = ((($130)) + 4080 | 0);
            $222 = ((($130)) + 4088 | 0);
            $223 = ((($130)) + 4104 | 0);
            $224 = ((($130)) + 4092 | 0);
            $225 = ((($130)) + 4084 | 0);
            $226 = ((($130)) + 4111 | 0);
            $227 = ((($130)) + 4112 | 0);
            $228 = ((($130)) + 12 | 0);
            $229 = ((($130)) + 4 | 0);
            $$0259 = 0; $$1250 = $$0249420; $$1262 = $$0261419; $$1267 = $$0266418; $$1271 = $$0270417; $$1276 = $$0275416; $$1281$off0 = $$0280$off0415;
            while (1) {
                $230 = ($$1262 | 0) > ($8 | 0);
                if ($230) {
                    $$1260 = $$0259; $$2268 = $$1267; $$3264 = $$1262; $$3273 = $$1271; $$3278 = $$1276; $$4253 = $$1250; $$9$off0 = $$1281$off0;
                    break;
                }
                $231 = ((($$1250)) + 16 | 0);
                $232 = HEAP8[$231 >> 0] | 0;
                $233 = $232 & 255;
                $234 = ((($$1250)) + 15 | 0);
                $235 = HEAP8[$234 >> 0] | 0;
                $236 = $235 & 255;
                $237 = ((($$1250)) + 24 | 0);
                HEAP8[$106 >> 0] = 0;
                $238 = ((($$1250)) + 22 | 0);
                $239 = HEAP8[$238 >> 0] | 0;
                $240 = ($239 << 24 >> 24) == ($18 << 24 >> 24);
                ; HEAP32[$$sroa$0 >> 2] = HEAP32[$$1250 >> 2] | 0; HEAP32[$$sroa$0 + 4 >> 2] = HEAP32[$$1250 + 4 >> 2] | 0; HEAP32[$$sroa$0 + 8 >> 2] = HEAP32[$$1250 + 8 >> 2] | 0; HEAP32[$$sroa$0 + 12 >> 2] = HEAP32[$$1250 + 12 >> 2] | 0; HEAP32[$$sroa$0 + 16 >> 2] = HEAP32[$$1250 + 16 >> 2] | 0; HEAP32[$$sroa$0 + 20 >> 2] = HEAP32[$$1250 + 20 >> 2] | 0;
                $241 = ((($$1250)) + 28 | 0);
                $242 = HEAP32[$241 >> 2] | 0;
                $243 = HEAP32[$103 >> 2] | 0;
                $244 = ((($243)) + 76 | 0);
                HEAP32[$244 >> 2] = $242;
                $245 = ((($$1250)) + 32 | 0);
                $246 = HEAP32[$245 >> 2] | 0;
                $247 = HEAP32[$103 >> 2] | 0;
                $248 = ((($247)) + 64 | 0);
                HEAP32[$248 >> 2] = $246;
                $249 = ((($$1250)) + 12 | 0);
                $250 = HEAP8[$249 >> 0] | 0;
                $251 = HEAP32[$103 >> 2] | 0;
                $252 = ((($251)) + 52 | 0);
                HEAP8[$252 >> 0] = $250;
                $$sroa$0$24$$sroa_idx = ((($$1250)) + 24 | 0);
                _memcpy(($$sroa$0$24$sroa_idx | 0), ($$sroa$0$24$$sroa_idx | 0), 3844) | 0;
                $253 = ((($$1250)) + 3904 | 0);
                $254 = HEAP8[$253 >> 0] | 0;
                $255 = ((($$1250)) + 2756 | 0);
                $256 = HEAP32[$255 >> 2] | 0;
                $257 = $256 & 255;
                $258 = ((($$1250)) + 64 | 0);
                $259 = HEAP32[$258 >> 2] | 0;
                $260 = ((($$1250)) + 3868 | 0);
                HEAP32[$205 >> 2] = $260;
                $261 = ((($$1250)) + 1 | 0);
                $262 = HEAP8[$261 >> 0] | 0;
                $263 = ((($$1250)) + 100 | 0);
                $264 = HEAP32[$263 >> 2] | 0;
                $265 = ((($$1250)) + 92 | 0);
                $266 = HEAP32[$265 >> 2] | 0;
                $267 = ((($$1250)) + 88 | 0);
                $268 = HEAP32[$267 >> 2] | 0;
                $269 = ((($$1250)) + 2768 | 0);
                $270 = HEAP32[$269 >> 2] | 0;
                $271 = (((($0)) + 120 | 0) + (($264 * 20) | 0) | 0);
                HEAP32[$108 >> 2] = $271;
                $272 = $268;
                $273 = $266;
                $274 = HEAP32[$110 >> 2] | 0;
                $275 = (__ZN7WelsDec14FmoParamUpdateEPNS_6TagFmoEPNS_6TagSpsEPNS_6TagPpsEPiPN10WelsCommon12CMemoryAlignE($271, $272, $273, $109, $274) | 0);
                if (!($275)) {
                    label = 24;
                    break L14;
                }
                $279 = $235 & 255;
                $280 = $$1276 << 16 >> 16;
                $281 = ($279 | 0) == ($280 | 0);
                $282 = $232 & 255;
                $283 = $$1271 << 16 >> 16;
                $284 = ($282 | 0) != ($283 | 0);
                $not$ = $281 ^ 1;
                $$355 = $284 | $not$;
                $285 = HEAP32[$255 >> 2] | 0;
                HEAP32[$111 >> 2] = $285;
                HEAP32[$112 >> 2] = $237;
                $286 = HEAP32[$241 >> 2] | 0;
                HEAP32[$113 >> 2] = $286;
                $287 = ($232 << 24 >> 24) != (0);
                $288 = ($$1276 << 16 >> 16) < (0);
                $or$cond = $288 | $281;
                do {
                    if ($or$cond) {
                        $289 = HEAP32[$103 >> 2] | 0;
                        $290 = HEAP8[$231 >> 0] | 0;
                        _memcpy(($130 | 0), ($$sroa$0 | 0), 3868) | 0;
                        HEAP32[$$sroa$6$0$$sroa_idx >> 2] = $259;
                        $291 = $$sroa$7$0$$sroa_idx;
                        $292 = $291;
                        HEAP32[$292 >> 2] = 0;
                        $293 = (($291) + 4) | 0;
                        $294 = $293;
                        HEAP32[$294 >> 2] = 0;
                        HEAP8[$$sroa$7328$0$$sroa_idx >> 0] = $254;
                        HEAP8[$$sroa$8$0$$sroa_idx >> 0] = $257;
                        ; HEAP16[$$sroa$9$0$$sroa_idx >> 1] = HEAP16[$$sroa$9 >> 1] | 0; HEAP16[$$sroa$9$0$$sroa_idx + 2 >> 1] = HEAP16[$$sroa$9 + 2 >> 1] | 0; HEAP16[$$sroa$9$0$$sroa_idx + 4 >> 1] = HEAP16[$$sroa$9 + 4 >> 1] | 0;
                        HEAP32[$$sroa$9332$0$$sroa_idx >> 2] = $270;
                        HEAP32[$$sroa$10$0$$sroa_idx >> 2] = $268;
                        HEAP32[$$sroa$12$0$$sroa_idx >> 2] = $266;
                        HEAP32[$206 >> 2] = $289;
                        $295 = ((($$1250)) + 1156 | 0);
                        $296 = HEAP32[$295 >> 2] | 0;
                        HEAP32[$207 >> 2] = $296;
                        $297 = ((($$1250)) + 1160 | 0);
                        $298 = HEAP32[$297 >> 2] | 0;
                        HEAP32[$208 >> 2] = $298;
                        $299 = ((($$1250)) + 24 | 0);
                        $300 = HEAP32[$299 >> 2] | 0;
                        $301 = $300 << 7;
                        $302 = HEAP8[$234 >> 0] | 0;
                        $303 = $302 & 255;
                        $304 = $303 << 4;
                        $305 = $304 | $301;
                        $306 = HEAP8[$231 >> 0] | 0;
                        $307 = $306 & 255;
                        $308 = $305 | $307;
                        HEAP32[$209 >> 2] = $308;
                        $309 = ((($273)) + 4 | 0);
                        $310 = HEAP32[$309 >> 2] | 0;
                        HEAP32[$210 >> 2] = $310;
                        $311 = ((($$1250)) + 2772 | 0);
                        $312 = HEAP32[$311 >> 2] | 0;
                        HEAP32[$211 >> 2] = $312;
                        $313 = ((($$1250)) + 2776 | 0);
                        $314 = HEAP32[$313 >> 2] | 0;
                        HEAP32[$212 >> 2] = $314;
                        $315 = ((($$1250)) + 2780 | 0);
                        $316 = HEAP32[$315 >> 2] | 0;
                        HEAP32[$213 >> 2] = $316;
                        $317 = ((($$1250)) + 84 | 0);
                        $318 = HEAP32[$317 >> 2] | 0;
                        HEAP32[$214 >> 2] = $318;
                        $319 = ((($$1250)) + 3853 | 0);
                        $320 = HEAP8[$319 >> 0] | 0;
                        HEAP8[$215 >> 0] = $320;
                        $321 = ((($$1250)) + 3862 | 0);
                        $322 = HEAP8[$321 >> 0] | 0;
                        HEAP8[$216 >> 0] = $322;
                        $323 = ((($$1250)) + 3854 | 0);
                        $324 = HEAP8[$323 >> 0] | 0;
                        HEAP8[$217 >> 0] = $324;
                        $325 = ((($$1250)) + 3865 | 0);
                        $326 = HEAP8[$325 >> 0] | 0;
                        HEAP8[$218 >> 0] = $326;
                        $327 = ((($$1250)) + 3863 | 0);
                        $328 = HEAP8[$327 >> 0] | 0;
                        HEAP8[$219 >> 0] = $328;
                        $329 = ((($$1250)) + 3864 | 0);
                        $330 = HEAP8[$329 >> 0] | 0;
                        HEAP8[$220 >> 0] = $330;
                        $331 = ($290 << 24 >> 24) == (0);
                        if ($331) {
                            $332 = ((($$1250)) + 108 | 0);
                            HEAP32[$221 >> 2] = $332;
                            $333 = ((($$1250)) + 1164 | 0);
                            HEAP32[$222 >> 2] = $333;
                            $334 = HEAP32[$265 >> 2] | 0;
                            $335 = ((($334)) + 182 | 0);
                            $336 = HEAP8[$335 >> 0] | 0;
                            $337 = ($336 << 24 >> 24) == (0);
                            if ($337) {
                                HEAP8[$223 >> 0] = 0;
                            } else {
                                HEAP8[$223 >> 0] = 1;
                                $338 = ((($$1250)) + 368 | 0);
                                HEAP32[$225 >> 2] = $338;
                            }
                            $339 = ((($$1250)) + 2792 | 0);
                            HEAP32[$224 >> 2] = $339;
                        }
                        $340 = HEAP8[$238 >> 0] | 0;
                        HEAP8[$226 >> 0] = $340;
                        $341 = ((($$1250)) + 18 | 0);
                        $342 = HEAP8[$341 >> 0] | 0;
                        HEAP8[$227 >> 0] = $342;
                        $343 = ((($272)) + 323 | 0);
                        $344 = HEAP8[$343 >> 0] | 0;
                        $345 = ($344 << 24 >> 24) == (0);
                        if ($345) {
                            $346 = HEAP8[$228 >> 0] | 0;
                            $347 = ($346 << 24 >> 24) == (0);
                            if ($347) {
                                $348 = HEAP32[$229 >> 2] | 0;
                                $349 = ($348 | 0) == (5);
                                if ($349) {
                                    $$4284$off0 = $$1281$off0;
                                } else {
                                    $350 = HEAP32[$241 >> 2] | 0;
                                    $351 = HEAP32[$114 >> 2] | 0;
                                    $352 = ($350 | 0) == ($351 | 0);
                                    if ($352) {
                                        $$4284$off0 = $$1281$off0;
                                    } else {
                                        $353 = (($351) + 1) | 0;
                                        $354 = ((($272)) + 16 | 0);
                                        $355 = HEAP32[$354 >> 2] | 0;
                                        $356 = 1 << $355;
                                        $357 = (($356) + -1) | 0;
                                        $358 = $357 & $353;
                                        $359 = ($350 | 0) == ($358 | 0);
                                        if ($359) {
                                            $$4284$off0 = $$1281$off0;
                                        } else {
                                            HEAP32[$vararg_buffer4 >> 2] = $351;
                                            $vararg_ptr7 = ((($vararg_buffer4)) + 4 | 0);
                                            HEAP32[$vararg_ptr7 >> 2] = $350;
                                            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 22773, $vararg_buffer4);
                                            $360 = HEAP32[$115 >> 2] | 0;
                                            $361 = $360 | 2;
                                            HEAP32[$115 >> 2] = $361;
                                            $362 = HEAP32[$116 >> 2] | 0;
                                            $363 = ($362 | 0) == (0);
                                            if ($363) {
                                                label = 37;
                                                break L14;
                                            } else {
                                                $$4284$off0 = 0;
                                            }
                                        }
                                    }
                                }
                            } else {
                                $$4284$off0 = $$1281$off0;
                            }
                        } else {
                            $$4284$off0 = $$1281$off0;
                        }
                        $365 = ($21 | 0) != ($279 | 0);
                        $brmerge = $287 | $365;
                        if ($brmerge) {
                            $$5285$off0 = $$4284$off0;
                        } else {
                            $366 = HEAP32[$245 >> 2] | 0;
                            $367 = (__ZN7WelsDec15WelsInitRefListEPNS_21TagWelsDecoderContextEi($0, $366) | 0);
                            $368 = HEAP32[$111 >> 2] | 0;
                            switch ($368 | 0) {
                                case 4: case 2: {
                                    $$0$i = $367;
                                    break;
                                }
                                default: {
                                    $369 = (__ZN7WelsDec18WelsReorderRefListEPNS_21TagWelsDecoderContextE($0) | 0);
                                    $$0$i = $369;
                                }
                            }
                            $370 = ($$0$i | 0) == (0);
                            if ($370) {
                                $$5285$off0 = $$4284$off0;
                            } else {
                                HEAP8[$106 >> 0] = 1;
                                $371 = ((($$1250)) + 17 | 0);
                                $372 = HEAP8[$371 >> 0] | 0;
                                $switch$i = ($372 & 255) < (2);
                                if ($switch$i) {
                                    HEAP8[$118 >> 0] = 1;
                                }
                                $373 = HEAP32[$115 >> 2] | 0;
                                $374 = $373 | 2;
                                HEAP32[$115 >> 2] = $374;
                                $375 = HEAP8[$371 >> 0] | 0;
                                $376 = $375 & 255;
                                HEAP32[$vararg_buffer8 >> 2] = $376;
                                __Z7WelsLogP13TagLogContextiPKcz($0, 8, 22860, $vararg_buffer8);
                                $377 = HEAP32[$116 >> 2] | 0;
                                $378 = ($377 | 0) == (0);
                                if ($378) {
                                    label = 45;
                                    break L14;
                                } else {
                                    $$5285$off0 = 0;
                                }
                            }
                        }
                        $381 = (__ZN7WelsDec15WelsDecodeSliceEPNS_21TagWelsDecoderContextEbPNS_10TagNalUnitE($0, $$355, $$1250) | 0);
                        $382 = ($381 | 0) == (0);
                        if ($382) {
                            $$6286$off0 = $$5285$off0;
                        } else {
                            $383 = HEAP32[$241 >> 2] | 0;
                            HEAP32[$vararg_buffer11 >> 2] = $381;
                            $vararg_ptr14 = ((($vararg_buffer11)) + 4 | 0);
                            HEAP32[$vararg_ptr14 >> 2] = $383;
                            $vararg_ptr15 = ((($vararg_buffer11)) + 8 | 0);
                            HEAP32[$vararg_ptr15 >> 2] = $279;
                            $vararg_ptr16 = ((($vararg_buffer11)) + 12 | 0);
                            HEAP32[$vararg_ptr16 >> 2] = $282;
                            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 22942, $vararg_buffer11);
                            $384 = ((($$1250)) + 17 | 0);
                            $385 = HEAP8[$384 >> 0] | 0;
                            $386 = ($385 << 24 >> 24) == (0);
                            if ($386) {
                                HEAP8[$118 >> 0] = 1;
                            }
                            $387 = HEAP32[$115 >> 2] | 0;
                            $388 = $387 | 4;
                            HEAP32[$115 >> 2] = $388;
                            $389 = HEAP32[$116 >> 2] | 0;
                            $390 = ($389 | 0) == (0);
                            if ($390) {
                                label = 51;
                                break L14;
                            } else {
                                $$6286$off0 = 0;
                            }
                        }
                        if ($240) {
                            $393 = (__ZN7WelsDec27WelsTargetSliceConstructionEPNS_21TagWelsDecoderContextE($0) | 0);
                            $394 = ($393 | 0) == (0);
                            if (!($394)) {
                                label = 55;
                                break L14;
                            }
                        }
                        if ($$6286$off0) {
                            $402 = HEAP32[$111 >> 2] | 0;
                            $403 = ($402 | 0) == (2);
                            if ($403) {
                                $$7287$off0 = 1;
                            } else {
                                $404 = HEAP8[$117 >> 0] | 0;
                                $405 = ($404 << 24 >> 24) == (0);
                                if ($405) {
                                    $$7287$off0 = 0;
                                    break;
                                }
                                $406 = (__ZN7WelsDec24CheckRefPicturesCompleteEPNS_21TagWelsDecoderContextE($0) | 0);
                                $$7287$off0 = $406;
                            }
                        } else {
                            $$7287$off0 = 0;
                        }
                    } else {
                        $$7287$off0 = $$1281$off0;
                    }
                } while (0);
                $407 = (($$1262) + 1) | 0;
                $408 = ($$1262 | 0) < ($8 | 0);
                if (!($408)) {
                    $$1260 = $237; $$2268 = $262; $$3264 = $407; $$3273 = $233; $$3278 = $236; $$4253 = 0; $$9$off0 = $$7287$off0;
                    break;
                }
                $409 = HEAP32[$4 >> 2] | 0;
                $410 = (($409) + ($407 << 2) | 0);
                $411 = HEAP32[$410 >> 2] | 0;
                $412 = ($411 | 0) == (0 | 0);
                if ($412) {
                    $$1260 = $237; $$2268 = $262; $$3264 = $407; $$3273 = $233; $$3278 = $236; $$4253 = 0; $$9$off0 = $$7287$off0;
                    break;
                }
                $413 = ((($411)) + 15 | 0);
                $414 = HEAP8[$413 >> 0] | 0;
                $415 = ($235 << 24 >> 24) == ($414 << 24 >> 24);
                if (!($415)) {
                    $$1260 = $237; $$2268 = $262; $$3264 = $407; $$3273 = $233; $$3278 = $236; $$4253 = $411; $$9$off0 = $$7287$off0;
                    break;
                }
                $416 = ((($411)) + 16 | 0);
                $417 = HEAP8[$416 >> 0] | 0;
                $418 = ($232 << 24 >> 24) == ($417 << 24 >> 24);
                if ($418) {
                    $$0259 = $237; $$1250 = $411; $$1262 = $407; $$1267 = $262; $$1271 = $233; $$1276 = $236; $$1281$off0 = $$7287$off0;
                } else {
                    $$1260 = $237; $$2268 = $262; $$3264 = $407; $$3273 = $233; $$3278 = $236; $$4253 = $411; $$9$off0 = $$7287$off0;
                    break;
                }
            }
            $419 = HEAP32[$103 >> 2] | 0;
            $420 = ((($419)) + 72 | 0);
            $421 = $$9$off0 & 1;
            HEAP8[$420 >> 0] = $421;
            $422 = HEAP32[$103 >> 2] | 0;
            $423 = ((($422)) + 72 | 0);
            $424 = HEAP8[$423 >> 0] | 0;
            $425 = ($424 << 24 >> 24) == (0);
            if ($425) {
                $426 = HEAP32[$115 >> 2] | 0;
                $427 = $426 | 32;
                HEAP32[$115 >> 2] = $427;
            }
            $428 = HEAP8[$226 >> 0] | 0;
            $429 = ($428 << 24 >> 24) == ($18 << 24 >> 24);
            if ($429) {
                $430 = HEAP8[$119 >> 0] | 0;
                $431 = ($430 << 24 >> 24) == (0);
                if ($431) {
                    $432 = HEAP8[$120 >> 0] | 0;
                    $433 = ($432 << 24 >> 24) == (0);
                    if ($433) {
                        $434 = (__ZN7WelsDec12NeedErrorConEPNS_21TagWelsDecoderContextE($0) | 0);
                        if ($434) {
                            $435 = HEAP32[$116 >> 2] | 0;
                            $436 = ($435 | 0) == (0);
                            if (!($436)) {
                                __ZN7WelsDec17ImplementErrorConEPNS_21TagWelsDecoderContextE($0);
                                $437 = HEAP32[$121 >> 2] | 0;
                                $438 = ((($437)) + 4 | 0);
                                $439 = HEAP32[$438 >> 2] | 0;
                                $440 = ((($437)) + 8 | 0);
                                $441 = HEAP32[$440 >> 2] | 0;
                                $442 = Math_imul($441, $439) | 0;
                                HEAP32[$105 >> 2] = $442;
                                $443 = HEAP32[$437 >> 2] | 0;
                                $444 = HEAP32[$103 >> 2] | 0;
                                $445 = ((($444)) + 84 | 0);
                                HEAP32[$445 >> 2] = $443;
                                $446 = HEAP32[$122 >> 2] | 0;
                                $447 = ((($446)) + 4 | 0);
                                $448 = HEAP32[$447 >> 2] | 0;
                                $449 = HEAP32[$103 >> 2] | 0;
                                $450 = ((($449)) + 88 | 0);
                                HEAP32[$450 >> 2] = $448;
                            }
                        }
                    }
                }
                $451 = (__ZN7WelsDecL23DecodeFrameConstructionEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) | 0);
                $452 = ($451 | 0) == (0);
                if (!($452)) {
                    $$7$ph = $451;
                    break;
                }
                $453 = HEAP32[$103 >> 2] | 0;
                HEAP32[$123 >> 2] = $453;
                $454 = ($$2268 << 24 >> 24) == (0);
                if (!($454)) {
                    $455 = (__ZN7WelsDec13WelsMarkAsRefEPNS_21TagWelsDecoderContextE($0) | 0);
                    $456 = ($455 | 0) == (0);
                    if (!($456)) {
                        $457 = HEAP32[$116 >> 2] | 0;
                        $458 = ($457 | 0) == (0);
                        if ($458) {
                            label = 78;
                            break;
                        }
                    }
                    $459 = HEAP8[$120 >> 0] | 0;
                    $460 = ($459 << 24 >> 24) == (0);
                    if ($460) {
                        $461 = HEAP32[$103 >> 2] | 0;
                        $462 = ((($461)) + 16 | 0);
                        $463 = ((($461)) + 56 | 0);
                        $464 = HEAP32[$463 >> 2] | 0;
                        $465 = ((($461)) + 60 | 0);
                        $466 = HEAP32[$465 >> 2] | 0;
                        $467 = ((($461)) + 32 | 0);
                        $468 = HEAP32[$124 >> 2] | 0;
                        _ExpandReferencingPicture($462, $464, $466, $467, $468, $125);
                    }
                }
                HEAP32[$103 >> 2] = 0;
                $481 = 0;
            } else {
                $481 = $422;
            }
            $469 = HEAP32[$4 >> 2] | 0;
            $470 = HEAP32[$5 >> 2] | 0;
            $471 = (($469) + ($470 << 2) | 0);
            $472 = HEAP32[$471 >> 2] | 0;
            $473 = ((($472)) + 1 | 0);
            $474 = HEAP8[$473 >> 0] | 0;
            $475 = ($474 << 24 >> 24) == (0);
            if (!($475)) {
                $476 = ((($$1260)) + 4 | 0);
                $477 = HEAP32[$476 >> 2] | 0;
                HEAP32[$114 >> 2] = $477;
            }
            $478 = HEAP8[$126 >> 0] | 0;
            $479 = ($478 << 24 >> 24) == (0);
            if (!($479)) {
                HEAP32[$114 >> 2] = 0;
            }
            $480 = ($$3264 | 0) > ($8 | 0);
            if ($480) {
                $$8 = 0;
                label = 88;
                break;
            } else {
                $$0249420 = $$4253; $$0261419 = $$3264; $$0266418 = $$2268; $$0270417 = $$3273; $$0275416 = $$3278; $$0280$off0415 = $$9$off0; $131 = $481;
            }
        }
        if ((label | 0) == 14) {
            $138 = HEAP32[$121 >> 2] | 0;
            $139 = ((($138)) + 296 | 0);
            $140 = HEAP32[$139 >> 2] | 0;
            HEAP32[$vararg_buffer >> 2] = $140;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 22633, $vararg_buffer);
            $141 = HEAP32[$115 >> 2] | 0;
            $142 = $141 | 16384;
            HEAP32[$115 >> 2] = $142;
            $$7$ph = 1010;
        }
        else if ((label | 0) == 20) {
            $$8 = 0;
            STACKTOP = sp; return ($$8 | 0);
        }
        else if ((label | 0) == 24) {
            $276 = HEAP32[$115 >> 2] | 0;
            $277 = $276 | 4;
            HEAP32[$115 >> 2] = $277;
            $278 = HEAP32[$255 >> 2] | 0;
            HEAP32[$vararg_buffer1 >> 2] = $278;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 22707, $vararg_buffer1);
            $$7$ph = 328704;
        }
        else if ((label | 0) == 37) {
            $364 = ((($0)) + 242324 | 0);
            HEAP8[$364 >> 0] = 1;
            $$7$ph = 1072;
        }
        else if ((label | 0) == 45) {
            $379 = HEAP32[$105 >> 2] | 0;
            $380 = ($379 | 0) == (0);
            if ($380) {
                HEAP32[$103 >> 2] = 0;
                $$7$ph = $$0$i;
            } else {
                $$7$ph = $$0$i;
            }
        }
        else if ((label | 0) == 51) {
            $391 = HEAP32[$105 >> 2] | 0;
            $392 = ($391 | 0) == (0);
            if ($392) {
                HEAP32[$103 >> 2] = 0;
                $$7$ph = $381;
            } else {
                $$7$ph = $381;
            }
        }
        else if ((label | 0) == 55) {
            $395 = ((($$1250)) + 17 | 0);
            $396 = HEAP8[$395 >> 0] | 0;
            $397 = ($396 << 24 >> 24) == (0);
            if ($397) {
                HEAP8[$118 >> 0] = 1;
            }
            $398 = HEAP32[$115 >> 2] | 0;
            $399 = $398 | 4;
            HEAP32[$115 >> 2] = $399;
            $400 = HEAP32[$103 >> 2] | 0;
            $401 = ((($400)) + 72 | 0);
            HEAP8[$401 >> 0] = 0;
            $$7$ph = -1;
        }
        else if ((label | 0) == 78) {
            HEAP32[$103 >> 2] = 0;
            $$7$ph = $455;
        }
        else if ((label | 0) == 88) {
            STACKTOP = sp; return ($$8 | 0);
        }
        $$8 = $$7$ph;
        STACKTOP = sp; return ($$8 | 0);
    }
    function __ZN7WelsDec11PrefetchPicEPNS_10TagPicBuffE($0) {
        $0 = $0 | 0;
        var $$034 = 0, $$03444 = 0, $$03445 = 0, $$036 = 0, $$036$ph = 0, $$135$sink = 0, $$13540 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 4 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ($2 | 0) == (0);
        if ($3) {
            $$036 = 0;
            return ($$036 | 0);
        }
        $4 = ((($0)) + 8 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $$03444 = (($5) + 1) | 0;
        $6 = ($$03444 | 0) < ($2 | 0);
        L4: do {
            if ($6) {
                $7 = HEAP32[$0 >> 2] | 0;
                $$03445 = $$03444;
                while (1) {
                    $10 = (($7) + ($$03445 << 2) | 0);
                    $11 = HEAP32[$10 >> 2] | 0;
                    $12 = ($11 | 0) == (0 | 0);
                    if (!($12)) {
                        $13 = ((($11)) + 71 | 0);
                        $14 = HEAP8[$13 >> 0] | 0;
                        $15 = ($14 << 24 >> 24) == (0);
                        if (!($15)) {
                            $16 = ((($11)) + 68 | 0);
                            $17 = HEAP8[$16 >> 0] | 0;
                            $18 = ($17 << 24 >> 24) == (0);
                            if ($18) {
                                $$036$ph = $11; $$135$sink = $$03445;
                                break L4;
                            }
                        }
                    }
                    $$034 = (($$03445) + 1) | 0;
                    $19 = ($$034 | 0) < ($2 | 0);
                    if ($19) {
                        $$03445 = $$034;
                    } else {
                        label = 4;
                        break;
                    }
                }
            } else {
                label = 4;
            }
        } while (0);
        L12: do {
            if ((label | 0) == 4) {
                $8 = ($5 | 0) < (0);
                if ($8) {
                    $$036$ph = 0; $$135$sink = 0;
                } else {
                    $9 = HEAP32[$0 >> 2] | 0;
                    $$13540 = 0;
                    while (1) {
                        $20 = (($9) + ($$13540 << 2) | 0);
                        $21 = HEAP32[$20 >> 2] | 0;
                        $22 = ($21 | 0) == (0 | 0);
                        if (!($22)) {
                            $23 = ((($21)) + 71 | 0);
                            $24 = HEAP8[$23 >> 0] | 0;
                            $25 = ($24 << 24 >> 24) == (0);
                            if (!($25)) {
                                $26 = ((($21)) + 68 | 0);
                                $27 = HEAP8[$26 >> 0] | 0;
                                $28 = ($27 << 24 >> 24) == (0);
                                if ($28) {
                                    $$036$ph = $21; $$135$sink = $$13540;
                                    break L12;
                                }
                            }
                        }
                        $29 = (($$13540) + 1) | 0;
                        $30 = ($$13540 | 0) < ($5 | 0);
                        if ($30) {
                            $$13540 = $29;
                        } else {
                            $$036$ph = 0; $$135$sink = $29;
                            break;
                        }
                    }
                }
            }
        } while (0);
        HEAP32[$4 >> 2] = $$135$sink;
        $$036 = $$036$ph;
        return ($$036 | 0);
    }
    function __ZN7WelsDec25GetI4LumaIChromaAddrTableEPiii($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = HEAP8[15458] | 0;
        $4 = $3 & 255;
        HEAP32[$0 >> 2] = 0;
        $5 = HEAP8[(15459) >> 0] | 0;
        $6 = $5 & 255;
        $7 = (($6) - ($4)) | 0;
        $8 = $7 & 7;
        $9 = $7 >>> 3;
        $10 = Math_imul($9, $1) | 0;
        $11 = (($10) + ($8)) | 0;
        $12 = $11 << 2;
        $13 = ((($0)) + 4 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = HEAP8[(15460) >> 0] | 0;
        $15 = $14 & 255;
        $16 = (($15) - ($4)) | 0;
        $17 = $16 & 7;
        $18 = $16 >>> 3;
        $19 = Math_imul($18, $1) | 0;
        $20 = (($19) + ($17)) | 0;
        $21 = $20 << 2;
        $22 = ((($0)) + 8 | 0);
        HEAP32[$22 >> 2] = $21;
        $23 = HEAP8[(15461) >> 0] | 0;
        $24 = $23 & 255;
        $25 = (($24) - ($4)) | 0;
        $26 = $25 & 7;
        $27 = $25 >>> 3;
        $28 = Math_imul($27, $1) | 0;
        $29 = (($28) + ($26)) | 0;
        $30 = $29 << 2;
        $31 = ((($0)) + 12 | 0);
        HEAP32[$31 >> 2] = $30;
        $32 = HEAP8[(15462) >> 0] | 0;
        $33 = $32 & 255;
        $34 = (($33) - ($4)) | 0;
        $35 = $34 & 7;
        $36 = $34 >>> 3;
        $37 = Math_imul($36, $1) | 0;
        $38 = (($37) + ($35)) | 0;
        $39 = $38 << 2;
        $40 = ((($0)) + 16 | 0);
        HEAP32[$40 >> 2] = $39;
        $41 = HEAP8[(15463) >> 0] | 0;
        $42 = $41 & 255;
        $43 = (($42) - ($4)) | 0;
        $44 = $43 & 7;
        $45 = $43 >>> 3;
        $46 = Math_imul($45, $1) | 0;
        $47 = (($46) + ($44)) | 0;
        $48 = $47 << 2;
        $49 = ((($0)) + 20 | 0);
        HEAP32[$49 >> 2] = $48;
        $50 = HEAP8[(15464) >> 0] | 0;
        $51 = $50 & 255;
        $52 = (($51) - ($4)) | 0;
        $53 = $52 & 7;
        $54 = $52 >>> 3;
        $55 = Math_imul($54, $1) | 0;
        $56 = (($55) + ($53)) | 0;
        $57 = $56 << 2;
        $58 = ((($0)) + 24 | 0);
        HEAP32[$58 >> 2] = $57;
        $59 = HEAP8[(15465) >> 0] | 0;
        $60 = $59 & 255;
        $61 = (($60) - ($4)) | 0;
        $62 = $61 & 7;
        $63 = $61 >>> 3;
        $64 = Math_imul($63, $1) | 0;
        $65 = (($64) + ($62)) | 0;
        $66 = $65 << 2;
        $67 = ((($0)) + 28 | 0);
        HEAP32[$67 >> 2] = $66;
        $68 = HEAP8[(15466) >> 0] | 0;
        $69 = $68 & 255;
        $70 = (($69) - ($4)) | 0;
        $71 = $70 & 7;
        $72 = $70 >>> 3;
        $73 = Math_imul($72, $1) | 0;
        $74 = (($73) + ($71)) | 0;
        $75 = $74 << 2;
        $76 = ((($0)) + 32 | 0);
        HEAP32[$76 >> 2] = $75;
        $77 = HEAP8[(15467) >> 0] | 0;
        $78 = $77 & 255;
        $79 = (($78) - ($4)) | 0;
        $80 = $79 & 7;
        $81 = $79 >>> 3;
        $82 = Math_imul($81, $1) | 0;
        $83 = (($82) + ($80)) | 0;
        $84 = $83 << 2;
        $85 = ((($0)) + 36 | 0);
        HEAP32[$85 >> 2] = $84;
        $86 = HEAP8[(15468) >> 0] | 0;
        $87 = $86 & 255;
        $88 = (($87) - ($4)) | 0;
        $89 = $88 & 7;
        $90 = $88 >>> 3;
        $91 = Math_imul($90, $1) | 0;
        $92 = (($91) + ($89)) | 0;
        $93 = $92 << 2;
        $94 = ((($0)) + 40 | 0);
        HEAP32[$94 >> 2] = $93;
        $95 = HEAP8[(15469) >> 0] | 0;
        $96 = $95 & 255;
        $97 = (($96) - ($4)) | 0;
        $98 = $97 & 7;
        $99 = $97 >>> 3;
        $100 = Math_imul($99, $1) | 0;
        $101 = (($100) + ($98)) | 0;
        $102 = $101 << 2;
        $103 = ((($0)) + 44 | 0);
        HEAP32[$103 >> 2] = $102;
        $104 = HEAP8[(15470) >> 0] | 0;
        $105 = $104 & 255;
        $106 = (($105) - ($4)) | 0;
        $107 = $106 & 7;
        $108 = $106 >>> 3;
        $109 = Math_imul($108, $1) | 0;
        $110 = (($109) + ($107)) | 0;
        $111 = $110 << 2;
        $112 = ((($0)) + 48 | 0);
        HEAP32[$112 >> 2] = $111;
        $113 = HEAP8[(15471) >> 0] | 0;
        $114 = $113 & 255;
        $115 = (($114) - ($4)) | 0;
        $116 = $115 & 7;
        $117 = $115 >>> 3;
        $118 = Math_imul($117, $1) | 0;
        $119 = (($118) + ($116)) | 0;
        $120 = $119 << 2;
        $121 = ((($0)) + 52 | 0);
        HEAP32[$121 >> 2] = $120;
        $122 = HEAP8[(15472) >> 0] | 0;
        $123 = $122 & 255;
        $124 = (($123) - ($4)) | 0;
        $125 = $124 & 7;
        $126 = $124 >>> 3;
        $127 = Math_imul($126, $1) | 0;
        $128 = (($127) + ($125)) | 0;
        $129 = $128 << 2;
        $130 = ((($0)) + 56 | 0);
        HEAP32[$130 >> 2] = $129;
        $131 = HEAP8[(15473) >> 0] | 0;
        $132 = $131 & 255;
        $133 = (($132) - ($4)) | 0;
        $134 = $133 & 7;
        $135 = $133 >>> 3;
        $136 = Math_imul($135, $1) | 0;
        $137 = (($136) + ($134)) | 0;
        $138 = $137 << 2;
        $139 = ((($0)) + 60 | 0);
        HEAP32[$139 >> 2] = $138;
        $140 = HEAP8[15458] | 0;
        $141 = $140 & 255;
        $142 = (($141) - ($4)) | 0;
        $143 = $142 & 7;
        $144 = $142 >>> 3;
        $145 = Math_imul($144, $2) | 0;
        $146 = (($145) + ($143)) | 0;
        $147 = $146 << 2;
        $148 = ((($0)) + 80 | 0);
        HEAP32[$148 >> 2] = $147;
        $149 = ((($0)) + 64 | 0);
        HEAP32[$149 >> 2] = $147;
        $150 = HEAP8[(15459) >> 0] | 0;
        $151 = $150 & 255;
        $152 = (($151) - ($4)) | 0;
        $153 = $152 & 7;
        $154 = $152 >>> 3;
        $155 = Math_imul($154, $2) | 0;
        $156 = (($155) + ($153)) | 0;
        $157 = $156 << 2;
        $158 = ((($0)) + 84 | 0);
        HEAP32[$158 >> 2] = $157;
        $159 = ((($0)) + 68 | 0);
        HEAP32[$159 >> 2] = $157;
        $160 = HEAP8[(15460) >> 0] | 0;
        $161 = $160 & 255;
        $162 = (($161) - ($4)) | 0;
        $163 = $162 & 7;
        $164 = $162 >>> 3;
        $165 = Math_imul($164, $2) | 0;
        $166 = (($165) + ($163)) | 0;
        $167 = $166 << 2;
        $168 = ((($0)) + 88 | 0);
        HEAP32[$168 >> 2] = $167;
        $169 = ((($0)) + 72 | 0);
        HEAP32[$169 >> 2] = $167;
        $170 = HEAP8[(15461) >> 0] | 0;
        $171 = $170 & 255;
        $172 = (($171) - ($4)) | 0;
        $173 = $172 & 7;
        $174 = $172 >>> 3;
        $175 = Math_imul($174, $2) | 0;
        $176 = (($175) + ($173)) | 0;
        $177 = $176 << 2;
        $178 = ((($0)) + 92 | 0);
        HEAP32[$178 >> 2] = $177;
        $179 = ((($0)) + 76 | 0);
        HEAP32[$179 >> 2] = $177;
        return;
    }
    function __ZN7WelsDec14FmoParamUpdateEPNS_6TagFmoEPNS_6TagSpsEPNS_6TagPpsEPiPN10WelsCommon12CMemoryAlignE($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ((($1)) + 4 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($1)) + 8 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = Math_imul($8, $6) | 0;
        $10 = ((($2)) + 12 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($2)) + 8 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ($0 | 0) == (0 | 0);
        if ($14) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $15 = ((($0)) + 16 | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = ($16 << 24 >> 24) == (0);
        if (!($17)) {
            $18 = ((($0)) + 4 | 0);
            $19 = HEAP32[$18 >> 2] | 0;
            $20 = ($19 | 0) == ($9 | 0);
            if ($20) {
                $21 = ((($0)) + 12 | 0);
                $22 = HEAP32[$21 >> 2] | 0;
                $23 = ($22 | 0) == ($11 | 0);
                if ($23) {
                    $24 = ((($0)) + 8 | 0);
                    $25 = HEAP32[$24 >> 2] | 0;
                    $26 = ($25 | 0) == ($13 | 0);
                    if ($26) {
                        $$0 = 1;
                        return ($$0 | 0);
                    }
                }
            }
        }
        $27 = (__ZN7WelsDec7InitFmoEPNS_6TagFmoEPNS_6TagPpsEiiPN10WelsCommon12CMemoryAlignE($0, $2, $6, $8, $4) | 0);
        $28 = ($27 | 0) == (0);
        if (!($28)) {
            $$0 = 0;
            return ($$0 | 0);
        }
        $29 = HEAP8[$15 >> 0] | 0;
        $30 = ($29 << 24 >> 24) == (0);
        if (!($30)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $31 = HEAP32[$3 >> 2] | 0;
        $32 = ($31 | 0) < (256);
        if (!($32)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $33 = (($31) + 1) | 0;
        HEAP32[$3 >> 2] = $33;
        HEAP8[$15 >> 0] = 1;
        $$0 = 1;
        return ($$0 | 0);
    }
    function __ZN7WelsDec15WelsInitRefListEPNS_21TagWelsDecoderContextEi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$08897 = 0, $$091$lcssa = 0, $$1 = 0, $$18995 = 0, $$192$lcssa = 0, $$19294 = 0, $$off = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi103Z2D = 0, $$pre$phi104Z2D = 0, $$pre$phi105Z2D = 0, $$pre$phiZ2D = 0, $$pre1$i = 0, $$pre102$pre$phiZZ2D = 0, $$pre106 = 0, $10 = 0, $100 = 0;
        var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
        var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
        var $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
        var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
        var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i = 0, $switch = 0, $vararg_buffer = 0, dest = 0;
        var label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $2 = ((($0)) + 5468 | 0);
        $3 = ((($0)) + 5854 | 0);
        $4 = HEAP8[$3 >> 0] | 0;
        $5 = $4 & 255;
        $6 = ((($0)) + 5856 | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = $7 & 255;
        $9 = (0 - ($8)) | 0;
        $10 = ($5 | 0) == ($9 | 0);
        L1: do {
            if ($10) {
                $11 = ((($0)) + 100 | 0);
                $12 = HEAP32[$11 >> 2] | 0;
                switch ($12 | 0) {
                    case 4: case 2: {
                        $118 = $4;
                        break L1;
                        break;
                    }
                    default: {
                    }
                }
                $13 = ((($0)) + 242340 | 0);
                $14 = HEAP32[$13 >> 2] | 0;
                $15 = ($14 | 0) == (0);
                if ($15) {
                    $118 = $4;
                } else {
                    $16 = ((($0)) + 209440 | 0);
                    $17 = HEAP32[$16 >> 2] | 0;
                    $18 = (__ZN7WelsDec11PrefetchPicEPNS_10TagPicBuffE($17) | 0);
                    $19 = ($18 | 0) == (0 | 0);
                    if ($19) {
                        __Z7WelsLogP13TagLogContextiPKcz($0, 1, 25807, $vararg_buffer);
                        $115 = ((($0)) + 116 | 0);
                        $116 = HEAP32[$115 >> 2] | 0;
                        $117 = $116 | 16384;
                        HEAP32[$115 >> 2] = $117;
                        $$1 = 1010;
                        STACKTOP = sp; return ($$1 | 0);
                    }
                    $20 = ((($18)) + 72 | 0);
                    HEAP8[$20 >> 0] = 0;
                    $21 = ((($0)) + 241924 | 0);
                    $22 = HEAP32[$21 >> 2] | 0;
                    $23 = HEAP32[$22 >> 2] | 0;
                    $24 = ((($18)) + 84 | 0);
                    HEAP32[$24 >> 2] = $23;
                    $25 = ((($0)) + 241928 | 0);
                    $26 = HEAP32[$25 >> 2] | 0;
                    $27 = ((($26)) + 4 | 0);
                    $28 = HEAP32[$27 >> 2] | 0;
                    $29 = ((($18)) + 88 | 0);
                    HEAP32[$29 >> 2] = $28;
                    $30 = ((($0)) + 116 | 0);
                    $31 = HEAP32[$30 >> 2] | 0;
                    $32 = $31 | 32;
                    HEAP32[$30 >> 2] = $32;
                    $33 = HEAP32[$13 >> 2] | 0;
                    $$off = (($33) + -3) | 0;
                    $switch = ($$off >>> 0) < (5);
                    if ($switch) {
                        $34 = ((($0)) + 316852 | 0);
                        $35 = HEAP32[$34 >> 2] | 0;
                        $36 = ($35 | 0) == (0 | 0);
                        if ($36) {
                            label = 8;
                        } else {
                            $37 = ((($18)) + 56 | 0);
                            $38 = HEAP32[$37 >> 2] | 0;
                            $39 = ((($35)) + 56 | 0);
                            $40 = HEAP32[$39 >> 2] | 0;
                            $41 = ($38 | 0) == ($40 | 0);
                            if ($41) {
                                $44 = ((($18)) + 60 | 0);
                                $45 = HEAP32[$44 >> 2] | 0;
                                $46 = ((($35)) + 60 | 0);
                                $47 = HEAP32[$46 >> 2] | 0;
                                $48 = ($45 | 0) == ($47 | 0);
                                $49 = ((($18)) + 16 | 0);
                                $50 = HEAP32[$49 >> 2] | 0;
                                if ($48) {
                                    $51 = ((($35)) + 16 | 0);
                                    $52 = HEAP32[$51 >> 2] | 0;
                                    $53 = ((($18)) + 32 | 0);
                                    $54 = HEAP32[$53 >> 2] | 0;
                                    $55 = Math_imul($45, $54) | 0;
                                    _memcpy(($50 | 0), ($52 | 0), ($55 | 0)) | 0;
                                    $56 = ((($18)) + 20 | 0);
                                    $57 = HEAP32[$56 >> 2] | 0;
                                    $58 = HEAP32[$34 >> 2] | 0;
                                    $59 = ((($58)) + 20 | 0);
                                    $60 = HEAP32[$59 >> 2] | 0;
                                    $61 = ((($18)) + 36 | 0);
                                    $62 = HEAP32[$61 >> 2] | 0;
                                    $63 = HEAP32[$44 >> 2] | 0;
                                    $64 = Math_imul($63, $62) | 0;
                                    $65 = (($64 | 0) / 2) & -1;
                                    _memcpy(($57 | 0), ($60 | 0), ($65 | 0)) | 0;
                                    $66 = ((($18)) + 24 | 0);
                                    $67 = HEAP32[$66 >> 2] | 0;
                                    $68 = HEAP32[$34 >> 2] | 0;
                                    $69 = ((($68)) + 24 | 0);
                                    $70 = HEAP32[$69 >> 2] | 0;
                                    $71 = ((($18)) + 40 | 0);
                                    $72 = HEAP32[$71 >> 2] | 0;
                                    $73 = HEAP32[$44 >> 2] | 0;
                                    $74 = Math_imul($73, $72) | 0;
                                    $75 = (($74 | 0) / 2) & -1;
                                    _memcpy(($67 | 0), ($70 | 0), ($75 | 0)) | 0;
                                    $$pre$phi103Z2D = $37; $$pre$phi104Z2D = $44; $$pre$phi105Z2D = $53; $104 = $49;
                                } else {
                                    $$pre$phiZ2D = $44; $$pre102$pre$phiZZ2D = $37; $139 = $49; $79 = $45; $80 = $50;
                                    label = 11;
                                }
                            } else {
                                label = 8;
                            }
                        }
                    } else {
                        label = 8;
                    }
                    if ((label | 0) == 8) {
                        $42 = ((($18)) + 16 | 0);
                        $43 = HEAP32[$42 >> 2] | 0;
                        $$phi$trans$insert = ((($18)) + 60 | 0);
                        $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
                        $$pre106 = ((($18)) + 56 | 0);
                        $$pre$phiZ2D = $$phi$trans$insert; $$pre102$pre$phiZZ2D = $$pre106; $139 = $42; $79 = $$pre; $80 = $43;
                        label = 11;
                    }
                    if ((label | 0) == 11) {
                        $76 = ((($18)) + 32 | 0);
                        $77 = HEAP32[$76 >> 2] | 0;
                        $78 = Math_imul($79, $77) | 0;
                        _memset(($80 | 0), -128, ($78 | 0)) | 0;
                        $81 = ((($18)) + 20 | 0);
                        $82 = HEAP32[$81 >> 2] | 0;
                        $83 = ((($18)) + 36 | 0);
                        $84 = HEAP32[$83 >> 2] | 0;
                        $85 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                        $86 = Math_imul($85, $84) | 0;
                        $87 = (($86 | 0) / 2) & -1;
                        _memset(($82 | 0), -128, ($87 | 0)) | 0;
                        $88 = ((($18)) + 24 | 0);
                        $89 = HEAP32[$88 >> 2] | 0;
                        $90 = ((($18)) + 40 | 0);
                        $91 = HEAP32[$90 >> 2] | 0;
                        $92 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                        $93 = Math_imul($92, $91) | 0;
                        $94 = (($93 | 0) / 2) & -1;
                        _memset(($89 | 0), -128, ($94 | 0)) | 0;
                        $$pre$phi103Z2D = $$pre102$pre$phiZZ2D; $$pre$phi104Z2D = $$pre$phiZ2D; $$pre$phi105Z2D = $76; $104 = $139;
                    }
                    $95 = ((($18)) + 76 | 0);
                    HEAP32[$95 >> 2] = 0;
                    $96 = ((($18)) + 64 | 0);
                    HEAP32[$96 >> 2] = 0;
                    $97 = ((($18)) + 75 | 0);
                    HEAP8[$97 >> 0] = 0;
                    $98 = ((($18)) + 73 | 0);
                    HEAP8[$98 >> 0] = 0;
                    $99 = HEAP32[$$pre$phi103Z2D >> 2] | 0;
                    $100 = HEAP32[$$pre$phi104Z2D >> 2] | 0;
                    $101 = ((($0)) + 317112 | 0);
                    $102 = HEAP32[$101 >> 2] | 0;
                    $103 = ((($0)) + 317116 | 0);
                    _ExpandReferencingPicture($104, $99, $100, $$pre$phi105Z2D, $102, $103);
                    $105 = ((($18)) + 68 | 0);
                    HEAP8[$105 >> 0] = 1;
                    $106 = ((($18)) + 69 | 0);
                    HEAP8[$106 >> 0] = 0;
                    $107 = ((($18)) + 80 | 0);
                    HEAP32[$107 >> 2] = -1;
                    $108 = HEAP8[$3 >> 0] | 0;
                    $109 = ($108 << 24 >> 24) == (0);
                    if ($109) {
                        $$pre1$i = ((($0)) + 5596 | 0);
                        $$pre$phi$iZ2D = $$pre1$i; $114 = 1;
                    } else {
                        $110 = $108 & 255;
                        $111 = $110 << 2;
                        $112 = ((($0)) + 5596 | 0);
                        $113 = ((($0)) + 5600 | 0);
                        _memmove(($113 | 0), ($112 | 0), ($111 | 0)) | 0;
                        $$pre$i = HEAP8[$3 >> 0] | 0;
                        $phitmp$i = (($$pre$i) + 1) << 24 >> 24;
                        $$pre$phi$iZ2D = $112; $114 = $phitmp$i;
                    }
                    HEAP32[$$pre$phi$iZ2D >> 2] = $18;
                    HEAP8[$3 >> 0] = $114;
                    $118 = $114;
                }
            } else {
                $118 = $4;
            }
        } while (0);
        dest = $2; stop = dest + 64 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $119 = ($118 << 24 >> 24) == (0);
        if ($119) {
            $$091$lcssa = 0;
        } else {
            $$08897 = 0;
            while (1) {
                $122 = (((($0)) + 5596 | 0) + ($$08897 << 2) | 0);
                $123 = HEAP32[$122 >> 2] | 0;
                $124 = (($$08897) + 1) | 0;
                $125 = (((($0)) + 5468 | 0) + ($$08897 << 2) | 0);
                HEAP32[$125 >> 2] = $123;
                $126 = HEAP8[$3 >> 0] | 0;
                $127 = $126 & 255;
                $128 = ($124 | 0) < ($127 | 0);
                if ($128) {
                    $$08897 = $124;
                } else {
                    $$091$lcssa = $124;
                    break;
                }
            }
        }
        $120 = HEAP8[$6 >> 0] | 0;
        $121 = ($120 << 24 >> 24) == (0);
        if ($121) {
            $$192$lcssa = $$091$lcssa;
        } else {
            $$18995 = 0; $$19294 = $$091$lcssa;
            while (1) {
                $129 = (((($0)) + 5724 | 0) + ($$18995 << 2) | 0);
                $130 = HEAP32[$129 >> 2] | 0;
                $131 = (($$19294) + 1) | 0;
                $132 = (((($0)) + 5468 | 0) + ($$19294 << 2) | 0);
                HEAP32[$132 >> 2] = $130;
                $133 = (($$18995) + 1) | 0;
                $134 = HEAP8[$6 >> 0] | 0;
                $135 = $134 & 255;
                $136 = ($133 | 0) < ($135 | 0);
                if ($136) {
                    $$18995 = $133; $$19294 = $131;
                } else {
                    $$192$lcssa = $131;
                    break;
                }
            }
        }
        $137 = $$192$lcssa & 255;
        $138 = ((($0)) + 5852 | 0);
        HEAP8[$138 >> 0] = $137;
        $$1 = 0;
        STACKTOP = sp; return ($$1 | 0);
    }
    function __ZN7WelsDec18WelsReorderRefListEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0105135 = 0, $$0108131 = 0, $$0110130 = 0, $$1106 = 0, $$1106126 = 0, $$1106127 = 0, $$1111 = 0, $$1111$p = 0, $$2 = 0, $$2107 = 0, $$2107125 = 0, $$2112 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
        var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
        var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
        var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
        var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
        var $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer2 = sp + 8 | 0;
        $vararg_buffer = sp;
        $1 = ((($0)) + 241932 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 4080 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($0)) + 5852 | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = $6 & 255;
        $8 = ((($2)) + 28 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($2)) + 88 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($11)) + 16 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = 1 << $13;
        $15 = ((($0)) + 100 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        switch ($16 | 0) {
            case 4: case 2: {
                $$2 = 0;
                STACKTOP = sp; return ($$2 | 0);
                break;
            }
            default: {
            }
        }
        $17 = ($6 << 24 >> 24) == (0);
        if ($17) {
            $18 = ((($0)) + 116 | 0);
            HEAP32[$18 >> 2] = 16;
            $$2 = 1072;
            STACKTOP = sp; return ($$2 | 0);
        }
        $19 = ((($4)) + 256 | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = ($20 << 24 >> 24) == (0);
        if ($21) {
            $$2 = 0;
            STACKTOP = sp; return ($$2 | 0);
        }
        $22 = ((($4)) + 6 | 0);
        $23 = HEAP16[$22 >> 1] | 0;
        $24 = ($23 << 16 >> 16) == (3);
        if ($24) {
            $$2 = 0;
            STACKTOP = sp; return ($$2 | 0);
        }
        $25 = (($14) + -1) | 0;
        $$1106126 = (($7) + -1) | 0;
        $26 = ((($2)) + 16 | 0);
        $27 = ((($2)) + 96 | 0);
        $$0105135 = 0; $$0108131 = 0; $$0110130 = $9; $28 = $23;
        L14: while (1) {
            $29 = ($28 & 65535) < (2);
            L16: do {
                if ($29) {
                    $30 = (($4) + ($$0108131 << 3) | 0);
                    $31 = HEAP32[$30 >> 2] | 0;
                    $32 = (($31) + 1) | 0;
                    $33 = ($28 << 16 >> 16) == (0);
                    $34 = $31 ^ -1;
                    $$1111$p = $33 ? $34 : $32;
                    $$1111 = (($$1111$p) + ($$0110130)) | 0;
                    $35 = $$1111 & $25;
                    $36 = ($$0108131 | 0) < ($7 | 0);
                    if ($36) {
                        $$1106127 = $$1106126;
                        while (1) {
                            $37 = (((($0)) + 5468 | 0) + ($$1106127 << 2) | 0);
                            $38 = HEAP32[$37 >> 2] | 0;
                            $39 = ((($38)) + 76 | 0);
                            $40 = HEAP32[$39 >> 2] | 0;
                            $41 = ($40 | 0) == ($35 | 0);
                            if ($41) {
                                $42 = ((($38)) + 69 | 0);
                                $43 = HEAP8[$42 >> 0] | 0;
                                $44 = ($43 << 24 >> 24) == (0);
                                if ($44) {
                                    break;
                                }
                            }
                            $$1106 = (($$1106127) + -1) | 0;
                            $45 = ($$1106127 | 0) > ($$0108131 | 0);
                            if ($45) {
                                $$1106127 = $$1106;
                            } else {
                                $$2112 = $35; $$3 = $$1106;
                                break L16;
                            }
                        }
                        $46 = HEAP8[$26 >> 0] | 0;
                        $47 = ((($38)) + 75 | 0);
                        $48 = HEAP8[$47 >> 0] | 0;
                        $49 = ($46 << 24 >> 24) == ($48 << 24 >> 24);
                        if ($49) {
                            $50 = HEAP32[$27 >> 2] | 0;
                            $51 = ((($38)) + 84 | 0);
                            $52 = HEAP32[$51 >> 2] | 0;
                            $53 = ($50 | 0) == ($52 | 0);
                            if ($53) {
                                $$2112 = $35; $$3 = $$1106127;
                            } else {
                                label = 14;
                                break L14;
                            }
                        } else {
                            $$2112 = $35; $$3 = $$1106127;
                        }
                    } else {
                        $$2112 = $35; $$3 = $$1106126;
                    }
                } else {
                    $55 = ($28 << 16 >> 16) == (2);
                    if ($55) {
                        $56 = ($$0108131 | 0) < ($7 | 0);
                        if ($56) {
                            $57 = (((($4) + ($$0108131 << 3) | 0)) + 4 | 0);
                            $$2107125 = $$1106126;
                            while (1) {
                                $58 = (((($0)) + 5468 | 0) + ($$2107125 << 2) | 0);
                                $59 = HEAP32[$58 >> 2] | 0;
                                $60 = ((($59)) + 69 | 0);
                                $61 = HEAP8[$60 >> 0] | 0;
                                $62 = ($61 << 24 >> 24) == (0);
                                if (!($62)) {
                                    $64 = ((($59)) + 80 | 0);
                                    $65 = HEAP32[$64 >> 2] | 0;
                                    $66 = HEAP16[$57 >> 1] | 0;
                                    $67 = $66 & 65535;
                                    $68 = ($65 | 0) == ($67 | 0);
                                    if ($68) {
                                        break;
                                    }
                                }
                                $$2107 = (($$2107125) + -1) | 0;
                                $63 = ($$2107125 | 0) > ($$0108131 | 0);
                                if ($63) {
                                    $$2107125 = $$2107;
                                } else {
                                    $$2112 = $$0110130; $$3 = $$2107;
                                    break L16;
                                }
                            }
                            $69 = HEAP8[$26 >> 0] | 0;
                            $70 = ((($59)) + 75 | 0);
                            $71 = HEAP8[$70 >> 0] | 0;
                            $72 = ($69 << 24 >> 24) == ($71 << 24 >> 24);
                            if ($72) {
                                $73 = HEAP32[$27 >> 2] | 0;
                                $74 = ((($59)) + 84 | 0);
                                $75 = HEAP32[$74 >> 2] | 0;
                                $76 = ($73 | 0) == ($75 | 0);
                                if ($76) {
                                    $$2112 = $$0110130; $$3 = $$2107125;
                                } else {
                                    label = 23;
                                    break L14;
                                }
                            } else {
                                $$2112 = $$0110130; $$3 = $$2107125;
                            }
                        } else {
                            $$2112 = $$0110130; $$3 = $$1106126;
                        }
                    } else {
                        $$2112 = $$0110130; $$3 = $$0105135;
                    }
                }
            } while (0);
            $78 = ($$3 | 0) < ($$0108131 | 0);
            $79 = (($$0108131) + 1) | 0;
            $80 = (((($0)) + 5468 | 0) + ($$0108131 << 2) | 0);
            if ($78) {
                $$2 = 1072;
                label = 26;
                break;
            }
            $81 = (($$3) - ($$0108131)) | 0;
            $82 = $81 << 2;
            $83 = (((($0)) + 5468 | 0) + ($79 << 2) | 0);
            $84 = (((($0)) + 5468 | 0) + ($$3 << 2) | 0);
            $85 = HEAP32[$84 >> 2] | 0;
            _memmove(($83 | 0), ($80 | 0), ($82 | 0)) | 0;
            HEAP32[$80 >> 2] = $85;
            $86 = (((($4) + ($79 << 3) | 0)) + 6 | 0);
            $87 = HEAP16[$86 >> 1] | 0;
            $88 = ($87 << 16 >> 16) == (3);
            if ($88) {
                $$2 = 0;
                label = 26;
                break;
            } else {
                $$0105135 = $$3; $$0108131 = $79; $$0110130 = $$2112; $28 = $87;
            }
        }
        if ((label | 0) == 14) {
            HEAP32[$vararg_buffer >> 2] = $50;
            $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
            HEAP32[$vararg_ptr1 >> 2] = $52;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25744, $vararg_buffer);
            $54 = ((($0)) + 116 | 0);
            HEAP32[$54 >> 2] = 16;
            $$2 = 1072;
            STACKTOP = sp; return ($$2 | 0);
        }
        else if ((label | 0) == 23) {
            HEAP32[$vararg_buffer2 >> 2] = $73;
            $vararg_ptr5 = ((($vararg_buffer2)) + 4 | 0);
            HEAP32[$vararg_ptr5 >> 2] = $75;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25744, $vararg_buffer2);
            $77 = ((($0)) + 116 | 0);
            HEAP32[$77 >> 2] = 16;
            $$2 = 1072;
            STACKTOP = sp; return ($$2 | 0);
        }
        else if ((label | 0) == 26) {
            STACKTOP = sp; return ($$2 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec15WelsDecodeSliceEPNS_21TagWelsDecoderContextEbPNS_10TagNalUnitE($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0115122 = 0, $$0119 = 0, $$1 = 0, $$1116 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
        var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
        var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
        var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
        var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj = 0, $_ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj = 0, $_ZN7WelsDec29WelsMapNxNNeighToSampleNormalEPNS_16TagNeighborAvailEPi$sink = 0, $_ZN7WelsDec31WelsFillCacheConstrain0IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE$sink = 0, $_ZN7WelsDec31WelsMap16x16NeighToSampleNormalEPNS_16TagNeighborAvailEPh$sink = 0, $or$cond = 0, $or$cond121 = 0, $vararg_buffer = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $3 = sp + 4 | 0;
        $4 = ((($0)) + 241932 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 5240 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($5)) + 88 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($9)) + 12 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        HEAP32[$3 >> 2] = 0;
        $12 = ((($5)) + 3876 | 0);
        HEAP32[$12 >> 2] = 0;
        $13 = ((($0)) + 241928 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ((($14)) + 176 | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = ($16 << 24 >> 24) == (0);
        do {
            if ($17) {
                $33 = ((($5)) + 2756 | 0);
                $34 = HEAP32[$33 >> 2] | 0;
                $35 = ($34 | 0) == (0);
                $_ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj = $35 ? 10 : 9;
                $$0119 = $_ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj; $$pre$phiZ2D = $33;
            } else {
                $18 = ((($5)) + 3858 | 0);
                $19 = HEAP8[$18 >> 0] | 0;
                $20 = ($19 << 24 >> 24) == (0);
                if ($20) {
                    $21 = ((($5)) + 3856 | 0);
                    $22 = HEAP8[$21 >> 0] | 0;
                    $23 = ($22 << 24 >> 24) == (0);
                    if ($23) {
                        $24 = ((($5)) + 3860 | 0);
                        $25 = HEAP8[$24 >> 0] | 0;
                        $26 = ($25 << 24 >> 24) == (0);
                        if ($26) {
                            $30 = ((($5)) + 2756 | 0);
                            $31 = HEAP32[$30 >> 2] | 0;
                            $32 = ($31 | 0) == (0);
                            $_ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj = $32 ? 8 : 7;
                            $$0119 = $_ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj$_ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj; $$pre$phiZ2D = $30;
                            break;
                        }
                    }
                }
                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 24554, $vararg_buffer);
                $27 = ((($0)) + 116 | 0);
                $28 = HEAP32[$27 >> 2] | 0;
                $29 = $28 | 4;
                HEAP32[$27 >> 2] = $29;
                $$1 = 4;
                STACKTOP = sp; return ($$1 | 0);
            }
        } while (0);
        $36 = ((($5)) + 92 | 0);
        $37 = HEAP32[$36 >> 2] | 0;
        $38 = ((($37)) + 180 | 0);
        $39 = HEAP8[$38 >> 0] | 0;
        $40 = ($39 << 24 >> 24) == (0);
        $41 = ((($0)) + 317148 | 0);
        $_ZN7WelsDec31WelsFillCacheConstrain0IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE$sink = $40 ? 8 : 7;
        $_ZN7WelsDec29WelsMapNxNNeighToSampleNormalEPNS_16TagNeighborAvailEPi$sink = $40 ? 2 : 1;
        $_ZN7WelsDec31WelsMap16x16NeighToSampleNormalEPNS_16TagNeighborAvailEPh$sink = $40 ? 4 : 3;
        HEAP32[$41 >> 2] = $_ZN7WelsDec31WelsFillCacheConstrain0IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE$sink;
        $42 = ((($0)) + 317152 | 0);
        HEAP32[$42 >> 2] = $_ZN7WelsDec29WelsMapNxNNeighToSampleNormalEPNS_16TagNeighborAvailEPi$sink;
        $43 = ((($0)) + 317156 | 0);
        HEAP32[$43 >> 2] = $_ZN7WelsDec31WelsMap16x16NeighToSampleNormalEPNS_16TagNeighborAvailEPh$sink;
        $44 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $45 = ((($0)) + 100 | 0);
        HEAP32[$45 >> 2] = $44;
        $46 = ((($5)) + 3896 | 0);
        $47 = HEAP32[$46 >> 2] | 0;
        $48 = ((($47)) + 176 | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = ($49 << 24 >> 24) == (0);
        if (!($50)) {
            $51 = ((($5)) + 64 | 0);
            $52 = HEAP32[$51 >> 2] | 0;
            $53 = ((($5)) + 1152 | 0);
            $54 = HEAP32[$53 >> 2] | 0;
            $55 = ((($5)) + 3881 | 0);
            $56 = HEAP8[$55 >> 0] | 0;
            __ZN7WelsDec20WelsCabacContextInitEPNS_21TagWelsDecoderContextEhii($0, $56, $54, $52);
            $57 = ((($5)) + 3884 | 0);
            HEAP32[$57 >> 2] = 0;
            $58 = ((($0)) + 512232 | 0);
            $59 = HEAP32[$58 >> 2] | 0;
            $60 = HEAP32[$4 >> 2] | 0;
            $61 = ((($60)) + 3900 | 0);
            $62 = HEAP32[$61 >> 2] | 0;
            $63 = (__ZN7WelsDec24InitCabacDecEngineFromBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($59, $62) | 0);
            $64 = ($63 | 0) == (0);
            if (!($64)) {
                $$1 = $63;
                STACKTOP = sp; return ($$1 | 0);
            }
        }
        (__ZN7WelsDec27WelsCalcDeqCoeffScalingListEPNS_21TagWelsDecoderContextE($0) | 0);
        $65 = ((($5)) + 24 | 0);
        $66 = HEAP32[$65 >> 2] | 0;
        $67 = ((($5)) + 4044 | 0);
        $68 = HEAP32[$67 >> 2] | 0;
        $69 = (($66 | 0) % ($68 | 0)) & -1;
        $70 = (($66 | 0) / ($68 | 0)) & -1;
        $71 = ((($5)) + 3872 | 0);
        HEAP32[$71 >> 2] = -1;
        $72 = $66 << 7;
        $73 = ((($5)) + 4111 | 0);
        $74 = HEAP8[$73 >> 0] | 0;
        $75 = $74 & 255;
        $76 = (($72) + ($75)) | 0;
        $77 = ((($5)) + 4032 | 0);
        HEAP32[$77 >> 2] = $69;
        $78 = ((($5)) + 4036 | 0);
        $79 = ((($5)) + 3912 | 0);
        HEAP32[$78 >> 2] = $70;
        $80 = ((($5)) + 4040 | 0);
        HEAP32[$80 >> 2] = $66;
        $81 = ($66 | 0) != (-1);
        $82 = ($66 | 0) < ($11 | 0);
        $or$cond121 = $81 & $82;
        if (!($or$cond121)) {
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        $83 = ((($0)) + 512344 | 0);
        $84 = ((($5)) + 3984 | 0);
        $$0115122 = $66;
        while (1) {
            $85 = HEAP32[$79 >> 2] | 0;
            $86 = (($85) + ($$0115122 << 2) | 0);
            HEAP32[$86 >> 2] = $76;
            HEAP8[$83 >> 0] = 0;
            $87 = (FUNCTION_TABLE_iiii[$$0119 & 15]($0, $2, $3) | 0);
            $88 = HEAP8[$83 >> 0] | 0;
            $89 = HEAP32[$84 >> 2] | 0;
            $90 = (($89) + ($$0115122) | 0);
            HEAP8[$90 >> 0] = $88;
            $91 = ($87 | 0) == (0);
            if (!($91)) {
                $$1 = $87;
                label = 18;
                break;
            }
            $92 = HEAP32[$12 >> 2] | 0;
            $93 = (($92) + 1) | 0;
            HEAP32[$12 >> 2] = $93;
            $94 = HEAP32[$3 >> 2] | 0;
            $95 = ($94 | 0) == (0);
            if (!($95)) {
                $$1 = 0;
                label = 18;
                break;
            }
            $96 = HEAP32[$36 >> 2] | 0;
            $97 = ((($96)) + 8 | 0);
            $98 = HEAP32[$97 >> 2] | 0;
            $99 = ($98 >>> 0) > (1);
            if ($99) {
                $100 = $$0115122 & 65535;
                $101 = (__ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($7, $100) | 0);
                $102 = $101 << 16 >> 16;
                $$1116 = $102;
            } else {
                $103 = (($$0115122) + 1) | 0;
                $$1116 = $103;
            }
            $104 = HEAP32[$67 >> 2] | 0;
            $105 = (($$1116 | 0) % ($104 | 0)) & -1;
            $106 = (($$1116 | 0) / ($104 | 0)) & -1;
            HEAP32[$77 >> 2] = $105;
            HEAP32[$78 >> 2] = $106;
            HEAP32[$80 >> 2] = $$1116;
            $107 = ($$1116 | 0) != (-1);
            $108 = ($$1116 | 0) < ($11 | 0);
            $or$cond = $107 & $108;
            if ($or$cond) {
                $$0115122 = $$1116;
            } else {
                $$1 = 0;
                label = 18;
                break;
            }
        }
        if ((label | 0) == 18) {
            STACKTOP = sp; return ($$1 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec27WelsTargetSliceConstructionEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0 = 0, $$09699 = 0, $$097$ph = 0, $$09798 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre103 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
        var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0;
        var $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $vararg_buffer3 = sp + 16 | 0;
        $vararg_buffer = sp;
        $1 = ((($0)) + 241932 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 88 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($4)) + 12 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($2)) + 4044 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = $8 << 4;
        $10 = ((($2)) + 4048 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = $11 << 4;
        $13 = ((($0)) + 5240 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ((($2)) + 3876 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = ((($0)) + 241949 | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = ($18 << 24 >> 24) == (0);
        if ($19) {
            $20 = ((($0)) + 317140 | 0);
            $21 = HEAP32[$20 >> 2] | 0;
            $22 = ($9 | 0) == ($21 | 0);
            if (!($22)) {
                $$0 = -1;
                STACKTOP = sp; return ($$0 | 0);
            }
        }
        $23 = ((($2)) + 24 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = (($24 | 0) % ($8 | 0)) & -1;
        $26 = ((($2)) + 4032 | 0);
        HEAP32[$26 >> 2] = $25;
        $27 = (($24 | 0) / ($8 | 0)) & -1;
        $28 = ((($2)) + 4036 | 0);
        HEAP32[$28 >> 2] = $27;
        $29 = ((($2)) + 4040 | 0);
        HEAP32[$29 >> 2] = $24;
        $30 = ($24 | 0) == (0);
        if ($30) {
            $31 = ((($0)) + 241924 | 0);
            $32 = HEAP32[$31 >> 2] | 0;
            $33 = HEAP32[$32 >> 2] | 0;
            $34 = ((($2)) + 4100 | 0);
            $35 = HEAP32[$34 >> 2] | 0;
            $36 = ((($35)) + 84 | 0);
            HEAP32[$36 >> 2] = $33;
            $37 = ((($0)) + 241928 | 0);
            $38 = HEAP32[$37 >> 2] | 0;
            $39 = ((($38)) + 4 | 0);
            $40 = HEAP32[$39 >> 2] | 0;
            $41 = HEAP32[$34 >> 2] | 0;
            $42 = ((($41)) + 88 | 0);
            HEAP32[$42 >> 2] = $40;
            $43 = ((($2)) + 16 | 0);
            $44 = HEAP8[$43 >> 0] | 0;
            $45 = HEAP32[$34 >> 2] | 0;
            $46 = ((($45)) + 75 | 0);
            HEAP8[$46 >> 0] = $44;
            $$097$ph = 0;
        } else {
            $$097$ph = $24;
        }
        $47 = ($16 | 0) > (0);
        L8: do {
            if ($47) {
                $48 = ((($0)) + 242344 | 0);
                $49 = ((($2)) + 3980 | 0);
                $50 = ((($2)) + 3984 | 0);
                $51 = ((($0)) + 5464 | 0);
                $52 = ((($0)) + 242320 | 0);
                $53 = ((($2)) + 92 | 0);
                $$09699 = 0; $$09798 = $$097$ph;
                while (1) {
                    $54 = HEAP8[$48 >> 0] | 0;
                    $55 = ($54 << 24 >> 24) == (0);
                    if ($55) {
                        $56 = (__ZN7WelsDec24WelsTargetMbConstructionEPNS_21TagWelsDecoderContextE($0) | 0);
                        $57 = ($56 | 0) == (0);
                        if (!($57)) {
                            label = 10;
                            break;
                        }
                    }
                    $63 = (($$09699) + 1) | 0;
                    $64 = HEAP32[$49 >> 2] | 0;
                    $65 = (($64) + ($$09798) | 0);
                    $66 = HEAP8[$65 >> 0] | 0;
                    $67 = ($66 << 24 >> 24) == (0);
                    if ($67) {
                        HEAP8[$65 >> 0] = 1;
                        $68 = HEAP32[$50 >> 2] | 0;
                        $69 = (($68) + ($$09798) | 0);
                        $70 = HEAP8[$69 >> 0] | 0;
                        $71 = $70 & 255;
                        $72 = HEAP32[$51 >> 2] | 0;
                        $73 = ((($72)) + 112 | 0);
                        $74 = HEAP32[$73 >> 2] | 0;
                        $75 = (($74) + ($71)) | 0;
                        HEAP32[$73 >> 2] = $75;
                        $76 = HEAP32[$52 >> 2] | 0;
                        $77 = (($76) + 1) | 0;
                        HEAP32[$52 >> 2] = $77;
                        $78 = $77;
                    } else {
                        $$pre = HEAP32[$52 >> 2] | 0;
                        $78 = $$pre;
                    }
                    $79 = ($78 | 0) > ($6 | 0);
                    if ($79) {
                        label = 15;
                        break;
                    }
                    $80 = HEAP32[$53 >> 2] | 0;
                    $81 = ((($80)) + 8 | 0);
                    $82 = HEAP32[$81 >> 2] | 0;
                    $83 = ($82 >>> 0) > (1);
                    if ($83) {
                        $84 = $$09798 & 65535;
                        $85 = (__ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($14, $84) | 0);
                        $86 = $85 << 16 >> 16;
                        $$1 = $86;
                    } else {
                        $87 = (($$09798) + 1) | 0;
                        $$1 = $87;
                    }
                    $88 = ($$1 | 0) != (-1);
                    $89 = ($$1 | 0) < ($6 | 0);
                    $or$cond = $88 & $89;
                    if (!($or$cond)) {
                        $$pre$phiZ2D = $51;
                        break L8;
                    }
                    $90 = HEAP32[$7 >> 2] | 0;
                    $91 = (($$1 | 0) % ($90 | 0)) & -1;
                    HEAP32[$26 >> 2] = $91;
                    $92 = (($$1 | 0) / ($90 | 0)) & -1;
                    HEAP32[$28 >> 2] = $92;
                    HEAP32[$29 >> 2] = $$1;
                    $93 = ($63 | 0) < ($16 | 0);
                    if ($93) {
                        $$09699 = $63; $$09798 = $$1;
                    } else {
                        $$pre$phiZ2D = $51;
                        break L8;
                    }
                }
                if ((label | 0) == 10) {
                    $58 = HEAP32[$26 >> 2] | 0;
                    $59 = HEAP32[$28 >> 2] | 0;
                    $60 = ((($2)) + 3881 | 0);
                    $61 = HEAP8[$60 >> 0] | 0;
                    $62 = $61 & 255;
                    HEAP32[$vararg_buffer >> 2] = $58;
                    $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
                    HEAP32[$vararg_ptr1 >> 2] = $59;
                    $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
                    HEAP32[$vararg_ptr2 >> 2] = $62;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 23838, $vararg_buffer);
                    $$0 = -1;
                    STACKTOP = sp; return ($$0 | 0);
                }
                else if ((label | 0) == 15) {
                    HEAP32[$vararg_buffer3 >> 2] = $78;
                    $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
                    HEAP32[$vararg_ptr6 >> 2] = $6;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 23919, $vararg_buffer3);
                    $$0 = -1;
                    STACKTOP = sp; return ($$0 | 0);
                }
            } else {
                $$pre103 = ((($0)) + 5464 | 0);
                $$pre$phiZ2D = $$pre103;
            }
        } while (0);
        $94 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $95 = ((($94)) + 56 | 0);
        HEAP32[$95 >> 2] = $9;
        $96 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $97 = ((($96)) + 60 | 0);
        HEAP32[$97 >> 2] = $12;
        $98 = ((($2)) + 3881 | 0);
        $99 = HEAP8[$98 >> 0] | 0;
        switch ($99 << 24 >> 24) {
            case 0: case 2: {
                break;
            }
            default: {
                $$0 = 0;
                STACKTOP = sp; return ($$0 | 0);
            }
        }
        $100 = ((($0)) + 242344 | 0);
        $101 = HEAP8[$100 >> 0] | 0;
        $102 = ($101 << 24 >> 24) == (0);
        if (!($102)) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $103 = ((($2)) + 72 | 0);
        $104 = HEAP32[$103 >> 2] | 0;
        $105 = ($104 | 0) == (1);
        if ($105) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $106 = HEAP32[$1 >> 2] | 0;
        $107 = ((($106)) + 3876 | 0);
        $108 = HEAP32[$107 >> 2] | 0;
        $109 = ($108 | 0) < (1);
        if ($109) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        __ZN7WelsDec25WelsDeblockingFilterSliceEPNS_21TagWelsDecoderContextEPFvPNS_10TagDqLayerEPNS_19tagDeblockingFilterEiE($0, 2);
        $$0 = 0;
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec24CheckRefPicturesCompleteEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$047$off0$lcssa = 0, $$054$be = 0, $$05455 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 241932 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 3876 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($2)) + 24 | 0);
        $6 = ((($2)) + 3908 | 0);
        $7 = ((($2)) + 3932 | 0);
        $8 = ($4 | 0) > (0);
        if (!($8)) {
            $$047$off0$lcssa = 1;
            return ($$047$off0$lcssa | 0);
        }
        $9 = HEAP32[$5 >> 2] | 0;
        $10 = HEAP32[$6 >> 2] | 0;
        $$05455 = 0;
        L4: while (1) {
            $11 = (($9) + ($$05455)) | 0;
            $12 = (($10) + ($11 << 1) | 0);
            $13 = HEAP16[$12 >> 1] | 0;
            $14 = $13 << 16 >> 16;
            switch ($14 | 0) {
                case 8: case 256: {
                    $83 = HEAP32[$7 >> 2] | 0;
                    $84 = (($83) + ($11 << 4) | 0);
                    $85 = HEAP8[$84 >> 0] | 0;
                    $86 = $85 << 24 >> 24;
                    $87 = (((($0)) + 5468 | 0) + ($86 << 2) | 0);
                    $88 = HEAP32[$87 >> 2] | 0;
                    $89 = ((($88)) + 72 | 0);
                    $90 = HEAP8[$89 >> 0] | 0;
                    $91 = ($90 << 24 >> 24) == (0);
                    if ($91) {
                        $$047$off0$lcssa = 0;
                        label = 3;
                        break L4;
                    }
                    break;
                }
                case 16: {
                    $16 = HEAP32[$7 >> 2] | 0;
                    $17 = (($16) + ($11 << 4) | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 << 24 >> 24;
                    $20 = (((($0)) + 5468 | 0) + ($19 << 2) | 0);
                    $21 = HEAP32[$20 >> 2] | 0;
                    $22 = ((($21)) + 72 | 0);
                    $23 = HEAP8[$22 >> 0] | 0;
                    $24 = (((($16) + ($11 << 4) | 0)) + 8 | 0);
                    $25 = HEAP8[$24 >> 0] | 0;
                    $26 = $25 << 24 >> 24;
                    $27 = (((($0)) + 5468 | 0) + ($26 << 2) | 0);
                    $28 = HEAP32[$27 >> 2] | 0;
                    $29 = ((($28)) + 72 | 0);
                    $30 = HEAP8[$29 >> 0] | 0;
                    $31 = $30 & $23;
                    $32 = ($31 << 24 >> 24) == (0);
                    if ($32) {
                        $$047$off0$lcssa = 0;
                        label = 3;
                        break L4;
                    }
                    break;
                }
                case 32: {
                    $33 = HEAP32[$7 >> 2] | 0;
                    $34 = (($33) + ($11 << 4) | 0);
                    $35 = HEAP8[$34 >> 0] | 0;
                    $36 = $35 << 24 >> 24;
                    $37 = (((($0)) + 5468 | 0) + ($36 << 2) | 0);
                    $38 = HEAP32[$37 >> 2] | 0;
                    $39 = ((($38)) + 72 | 0);
                    $40 = HEAP8[$39 >> 0] | 0;
                    $41 = (((($33) + ($11 << 4) | 0)) + 2 | 0);
                    $42 = HEAP8[$41 >> 0] | 0;
                    $43 = $42 << 24 >> 24;
                    $44 = (((($0)) + 5468 | 0) + ($43 << 2) | 0);
                    $45 = HEAP32[$44 >> 2] | 0;
                    $46 = ((($45)) + 72 | 0);
                    $47 = HEAP8[$46 >> 0] | 0;
                    $48 = $47 & $40;
                    $49 = ($48 << 24 >> 24) == (0);
                    if ($49) {
                        $$047$off0$lcssa = 0;
                        label = 3;
                        break L4;
                    }
                    break;
                }
                case 128: case 64: {
                    $50 = HEAP32[$7 >> 2] | 0;
                    $51 = (($50) + ($11 << 4) | 0);
                    $52 = HEAP8[$51 >> 0] | 0;
                    $53 = $52 << 24 >> 24;
                    $54 = (((($0)) + 5468 | 0) + ($53 << 2) | 0);
                    $55 = HEAP32[$54 >> 2] | 0;
                    $56 = ((($55)) + 72 | 0);
                    $57 = HEAP8[$56 >> 0] | 0;
                    $58 = (((($50) + ($11 << 4) | 0)) + 2 | 0);
                    $59 = HEAP8[$58 >> 0] | 0;
                    $60 = $59 << 24 >> 24;
                    $61 = (((($0)) + 5468 | 0) + ($60 << 2) | 0);
                    $62 = HEAP32[$61 >> 2] | 0;
                    $63 = ((($62)) + 72 | 0);
                    $64 = HEAP8[$63 >> 0] | 0;
                    $65 = $64 & $57;
                    $66 = (((($50) + ($11 << 4) | 0)) + 8 | 0);
                    $67 = HEAP8[$66 >> 0] | 0;
                    $68 = $67 << 24 >> 24;
                    $69 = (((($0)) + 5468 | 0) + ($68 << 2) | 0);
                    $70 = HEAP32[$69 >> 2] | 0;
                    $71 = ((($70)) + 72 | 0);
                    $72 = HEAP8[$71 >> 0] | 0;
                    $73 = $65 & $72;
                    $74 = (((($50) + ($11 << 4) | 0)) + 10 | 0);
                    $75 = HEAP8[$74 >> 0] | 0;
                    $76 = $75 << 24 >> 24;
                    $77 = (((($0)) + 5468 | 0) + ($76 << 2) | 0);
                    $78 = HEAP32[$77 >> 2] | 0;
                    $79 = ((($78)) + 72 | 0);
                    $80 = HEAP8[$79 >> 0] | 0;
                    $81 = $73 & $80;
                    $82 = ($81 << 24 >> 24) == (0);
                    if ($82) {
                        $$047$off0$lcssa = 0;
                        label = 3;
                        break L4;
                    }
                    break;
                }
                default: {
                }
            }
            $$054$be = (($$05455) + 1) | 0;
            $15 = ($$054$be | 0) < ($4 | 0);
            if ($15) {
                $$05455 = $$054$be;
            } else {
                $$047$off0$lcssa = 1;
                label = 3;
                break;
            }
        }
        if ((label | 0) == 3) {
            return ($$047$off0$lcssa | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec12NeedErrorConEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$010$off0 = 0, $$011 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 241924 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($2)) + 8 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = Math_imul($6, $4) | 0;
        $8 = ($7 | 0) > (0);
        if (!($8)) {
            $$010$off0 = 0;
            return ($$010$off0 | 0);
        }
        $9 = ((($0)) + 241932 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($10)) + 3980 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $$011 = 0;
        while (1) {
            $15 = (($12) + ($$011) | 0);
            $16 = HEAP8[$15 >> 0] | 0;
            $17 = ($16 << 24 >> 24) == (0);
            $13 = (($$011) + 1) | 0;
            if ($17) {
                $$010$off0 = 1;
                label = 5;
                break;
            }
            $14 = ($13 | 0) < ($7 | 0);
            if ($14) {
                $$011 = $13;
            } else {
                $$010$off0 = 0;
                label = 5;
                break;
            }
        }
        if ((label | 0) == 5) {
            return ($$010$off0 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec17ImplementErrorConEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 242340 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        L1: do {
            switch ($2 | 0) {
                case 0: {
                    $3 = ((($0)) + 116 | 0);
                    $4 = HEAP32[$3 >> 2] | 0;
                    $5 = $4 | 4;
                    HEAP32[$3 >> 2] = $5;
                    return;
                    break;
                }
                case 3: case 1: {
                    $6 = ((($0)) + 5464 | 0);
                    $7 = HEAP32[$6 >> 2] | 0;
                    $8 = ((($0)) + 316852 | 0);
                    $9 = HEAP32[$8 >> 2] | 0;
                    $10 = ((($0)) + 241924 | 0);
                    $11 = HEAP32[$10 >> 2] | 0;
                    $12 = ((($11)) + 8 | 0);
                    $13 = HEAP32[$12 >> 2] | 0;
                    $14 = $13 << 4;
                    $15 = ((($7)) + 32 | 0);
                    $16 = HEAP32[$15 >> 2] | 0;
                    $17 = ((($7)) + 36 | 0);
                    $18 = HEAP32[$17 >> 2] | 0;
                    $19 = ((($11)) + 4 | 0);
                    $20 = HEAP32[$19 >> 2] | 0;
                    $21 = Math_imul($20, $13) | 0;
                    $22 = ((($7)) + 108 | 0);
                    HEAP32[$22 >> 2] = $21;
                    $23 = HEAP32[$1 >> 2] | 0;
                    $24 = ($23 | 0) == (1);
                    if ($24) {
                        $25 = ((($0)) + 241932 | 0);
                        $26 = HEAP32[$25 >> 2] | 0;
                        $27 = ((($26)) + 12 | 0);
                        $28 = HEAP8[$27 >> 0] | 0;
                        $29 = ($28 << 24 >> 24) == (0);
                        if ($29) {
                            label = 6;
                        } else {
                            $30 = ((($7)) + 16 | 0);
                            $31 = HEAP32[$30 >> 2] | 0;
                            $36 = $31;
                        }
                    } else {
                        label = 6;
                    }
                    if ((label | 0) == 6) {
                        $32 = ($9 | 0) == (0 | 0);
                        $33 = ((($7)) + 16 | 0);
                        $34 = HEAP32[$33 >> 2] | 0;
                        if ($32) {
                            $36 = $34;
                        } else {
                            $44 = ((($9)) + 16 | 0);
                            $45 = HEAP32[$44 >> 2] | 0;
                            $46 = Math_imul($14, $16) | 0;
                            _memcpy(($34 | 0), ($45 | 0), ($46 | 0)) | 0;
                            $47 = ((($7)) + 20 | 0);
                            $48 = HEAP32[$47 >> 2] | 0;
                            $49 = ((($9)) + 20 | 0);
                            $50 = HEAP32[$49 >> 2] | 0;
                            $51 = $13 << 3;
                            $52 = $51 & 2147483640;
                            $53 = Math_imul($52, $18) | 0;
                            _memcpy(($48 | 0), ($50 | 0), ($53 | 0)) | 0;
                            $54 = ((($7)) + 24 | 0);
                            $55 = HEAP32[$54 >> 2] | 0;
                            $56 = ((($9)) + 24 | 0);
                            $57 = HEAP32[$56 >> 2] | 0;
                            _memcpy(($55 | 0), ($57 | 0), ($53 | 0)) | 0;
                            break L1;
                        }
                    }
                    $35 = Math_imul($14, $16) | 0;
                    _memset(($36 | 0), -128, ($35 | 0)) | 0;
                    $37 = ((($7)) + 20 | 0);
                    $38 = HEAP32[$37 >> 2] | 0;
                    $39 = $13 << 3;
                    $40 = $39 & 2147483640;
                    $41 = Math_imul($40, $18) | 0;
                    _memset(($38 | 0), -128, ($41 | 0)) | 0;
                    $42 = ((($7)) + 24 | 0);
                    $43 = HEAP32[$42 >> 2] | 0;
                    _memset(($43 | 0), -128, ($41 | 0)) | 0;
                    break;
                }
                case 5: case 4: case 2: {
                    __ZN7WelsDec19DoErrorConSliceCopyEPNS_21TagWelsDecoderContextE($0);
                    break;
                }
                case 7: case 6: {
                    __ZN7WelsDec24GetAvilInfoFromCorrectMbEPNS_21TagWelsDecoderContextE($0);
                    __ZN7WelsDec21DoErrorConSliceMVCopyEPNS_21TagWelsDecoderContextE($0);
                    break;
                }
                default: {
                }
            }
        } while (0);
        $58 = ((($0)) + 116 | 0);
        $59 = HEAP32[$58 >> 2] | 0;
        $60 = $59 | 32;
        HEAP32[$58 >> 2] = $60;
        $61 = ((($0)) + 5464 | 0);
        $62 = HEAP32[$61 >> 2] | 0;
        $63 = ((($62)) + 72 | 0);
        HEAP8[$63 >> 0] = 0;
        return;
    }
    function __ZN7WelsDecL23DecodeFrameConstructionEPNS_21TagWelsDecoderContextEPPhP13TagBufferInfo($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0226$off0 = 0, $$0227$lcssa = 0, $$0227235 = 0, $$0228233 = 0, $$0229$ph = 0, $$0229232 = 0, $$0230234 = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
        var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
        var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
        var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
        var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
        var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
        var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
        var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
        var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
        var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
        var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
        var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
        var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
        var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
        var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
        var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 64 | 0;
        $vararg_buffer13 = sp + 48 | 0;
        $vararg_buffer7 = sp + 32 | 0;
        $vararg_buffer = sp;
        $3 = ((($0)) + 241932 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($0)) + 5464 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($4)) + 4044 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = $8 << 4;
        $10 = ((($4)) + 4048 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = $11 << 4;
        $13 = Math_imul($11, $8) | 0;
        $14 = ((($6)) + 104 | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = ($15 << 24 >> 24) == (0);
        if (!($16)) {
            $17 = ((($0)) + 6176 | 0);
            $18 = ((($4)) + 88 | 0);
            $19 = HEAP32[$18 >> 2] | 0;
            $20 = ((($19)) + 300 | 0);
            ; HEAP32[$17 >> 2] = HEAP32[$20 >> 2] | 0; HEAP32[$17 + 4 >> 2] = HEAP32[$20 + 4 >> 2] | 0; HEAP32[$17 + 8 >> 2] = HEAP32[$20 + 8 >> 2] | 0; HEAP32[$17 + 12 >> 2] = HEAP32[$20 + 12 >> 2] | 0;
            $21 = ((($0)) + 242324 | 0);
            HEAP8[$21 >> 0] = 0;
            $22 = ((($0)) + 242320 | 0);
            $23 = HEAP32[$22 >> 2] | 0;
            $24 = ($23 | 0) == ($13 | 0);
            if ($24) {
                $25 = ((($0)) + 317169 | 0);
                HEAP8[$25 >> 0] = 1;
                $26 = HEAP32[$17 >> 2] | 0;
                $27 = ((($0)) + 6184 | 0);
                $28 = HEAP32[$27 >> 2] | 0;
                $29 = ((($0)) + 6180 | 0);
                $30 = HEAP32[$29 >> 2] | 0;
                $31 = ((($0)) + 6188 | 0);
                $32 = HEAP32[$31 >> 2] | 0;
                $33 = ((($0)) + 317172 | 0);
                $34 = HEAP32[$33 >> 2] | 0;
                HEAP32[$vararg_buffer >> 2] = $9;
                $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
                HEAP32[$vararg_ptr1 >> 2] = $12;
                $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
                HEAP32[$vararg_ptr2 >> 2] = $26;
                $vararg_ptr3 = ((($vararg_buffer)) + 12 | 0);
                HEAP32[$vararg_ptr3 >> 2] = $28;
                $vararg_ptr4 = ((($vararg_buffer)) + 16 | 0);
                HEAP32[$vararg_ptr4 >> 2] = $30;
                $vararg_ptr5 = ((($vararg_buffer)) + 20 | 0);
                HEAP32[$vararg_ptr5 >> 2] = $32;
                $vararg_ptr6 = ((($vararg_buffer)) + 24 | 0);
                HEAP32[$vararg_ptr6 >> 2] = $34;
                __Z7WelsLogP13TagLogContextiPKcz($0, 4, 23429, $vararg_buffer);
                HEAP32[$33 >> 2] = 0;
            }
        }
        $35 = ((($0)) + 242344 | 0);
        $36 = HEAP8[$35 >> 0] | 0;
        $37 = ($36 << 24 >> 24) == (0);
        if (!($37)) {
            $38 = ((($0)) + 241888 | 0);
            $39 = HEAP32[$38 >> 2] | 0;
            $40 = ((($0)) + 116 | 0);
            $41 = HEAP32[$40 >> 2] | 0;
            $42 = ($41 | 0) == (0);
            $43 = ((($0)) + 316848 | 0);
            $44 = HEAP32[$43 >> 2] | 0;
            if (!($42)) {
                $166 = ((($44)) + 536 | 0);
                $167 = $166;
                $168 = $167;
                HEAP32[$168 >> 2] = 0;
                $169 = (($167) + 4) | 0;
                $170 = $169;
                HEAP32[$170 >> 2] = 0;
                $171 = HEAP32[$43 >> 2] | 0;
                HEAP32[$171 >> 2] = 0;
                $172 = HEAP32[$43 >> 2] | 0;
                $173 = ((($172)) + 520 | 0);
                HEAP32[$173 >> 2] = 0;
                $174 = HEAP32[$43 >> 2] | 0;
                $175 = ((($174)) + 524 | 0);
                HEAP32[$175 >> 2] = 0;
                $165 = -1;
                STACKTOP = sp; return ($165 | 0);
            }
            $45 = HEAP32[$44 >> 2] | 0;
            $46 = ($45 | 0) > (0);
            if ($46) {
                $$0227235 = 0; $$0230234 = 0;
                while (1) {
                    $47 = (($$0230234) + 1) | 0;
                    $48 = (((($44)) + 4 | 0) + ($$0230234 << 2) | 0);
                    $49 = HEAP32[$48 >> 2] | 0;
                    $50 = (($49) + ($$0227235)) | 0;
                    $51 = ($47 | 0) < ($45 | 0);
                    if ($51) {
                        $$0227235 = $50; $$0230234 = $47;
                    } else {
                        $$0227$lcssa = $50;
                        break;
                    }
                }
            } else {
                $$0227$lcssa = 0;
            }
            $52 = ((($44)) + 516 | 0);
            $53 = HEAP32[$52 >> 2] | 0;
            $54 = (($53) + ($$0227$lcssa) | 0);
            $55 = ((($39)) + 16 | 0);
            $56 = HEAP32[$55 >> 2] | 0;
            $57 = ((($39)) + 20 | 0);
            $58 = HEAP32[$57 >> 2] | 0;
            $59 = HEAP32[$39 >> 2] | 0;
            $60 = (($59) + ($56 << 2) | 0);
            $61 = HEAP32[$60 >> 2] | 0;
            $62 = ($61 | 0) == (0 | 0);
            if ($62) {
                $73 = 0; $76 = 0;
            } else {
                $63 = ((($61)) + 3912 | 0);
                $64 = $63;
                $65 = $64;
                $66 = HEAP32[$65 >> 2] | 0;
                $67 = (($64) + 4) | 0;
                $68 = $67;
                $69 = HEAP32[$68 >> 2] | 0;
                $73 = $66; $76 = $69;
            }
            $70 = ((($44)) + 536 | 0);
            $71 = $70;
            $72 = $71;
            HEAP32[$72 >> 2] = $73;
            $74 = (($71) + 4) | 0;
            $75 = $74;
            HEAP32[$75 >> 2] = $76;
            $77 = ((($0)) + 241924 | 0);
            $78 = HEAP32[$77 >> 2] | 0;
            $79 = ((($78)) + 4 | 0);
            $80 = HEAP32[$79 >> 2] | 0;
            $81 = $80 << 4;
            $82 = ((($44)) + 520 | 0);
            HEAP32[$82 >> 2] = $81;
            $83 = HEAP32[$77 >> 2] | 0;
            $84 = ((($83)) + 8 | 0);
            $85 = HEAP32[$84 >> 2] | 0;
            $86 = $85 << 4;
            $87 = ((($44)) + 524 | 0);
            HEAP32[$87 >> 2] = $86;
            $88 = HEAP32[$39 >> 2] | 0;
            $89 = (($88) + ($56 << 2) | 0);
            $90 = HEAP32[$89 >> 2] | 0;
            $91 = ((($90)) + 12 | 0);
            $92 = HEAP8[$91 >> 0] | 0;
            $93 = ($92 << 24 >> 24) == (0);
            if ($93) {
                $$0229$ph = $54;
            } else {
                $94 = ((($0)) + 242346 | 0);
                $95 = HEAP8[$94 >> 0] | 0;
                $96 = ($95 << 24 >> 24) == (0);
                if ($96) {
                    $$0229$ph = $54;
                } else {
                    $97 = ((($90)) + 4 | 0);
                    $98 = HEAP32[$97 >> 2] | 0;
                    $99 = ($98 | 0) == (20);
                    $100 = HEAP32[$77 >> 2] | 0;
                    $101 = HEAP32[$100 >> 2] | 0;
                    $102 = ((($0)) + 241928 | 0);
                    $103 = HEAP32[$102 >> 2] | 0;
                    $104 = ((($103)) + 4 | 0);
                    $105 = HEAP32[$104 >> 2] | 0;
                    $106 = ((($0)) + 242324 | 0);
                    HEAP8[$106 >> 0] = 0;
                    $107 = (((($0)) + 247216 | 0) + (($101 * 136) | 0) | 0);
                    $108 = (((($0)) + 242864 | 0) + (($101 * 136) | 0) | 0);
                    $109 = $99 ? $107 : $108;
                    $110 = ((($109)) + 132 | 0);
                    $111 = HEAP16[$110 >> 1] | 0;
                    $112 = $111 & 65535;
                    _memcpy(($54 | 0), ($109 | 0), ($112 | 0)) | 0;
                    $113 = HEAP16[$110 >> 1] | 0;
                    $114 = $113 & 65535;
                    $115 = HEAP32[$44 >> 2] | 0;
                    $116 = (($115) + 1) | 0;
                    HEAP32[$44 >> 2] = $116;
                    $117 = (((($44)) + 4 | 0) + ($115 << 2) | 0);
                    HEAP32[$117 >> 2] = $114;
                    $118 = HEAP16[$110 >> 1] | 0;
                    $119 = $118 & 65535;
                    $120 = ((($0)) + 242348 | 0);
                    $121 = HEAP32[$120 >> 2] | 0;
                    $122 = (($121) + 1) | 0;
                    HEAP32[$120 >> 2] = $122;
                    $123 = (((($0)) + 242352 | 0) + ($121 << 2) | 0);
                    HEAP32[$123 >> 2] = $119;
                    $124 = HEAP16[$110 >> 1] | 0;
                    $125 = $124 & 65535;
                    $126 = (($54) + ($125) | 0);
                    $127 = (((($0)) + 282032 | 0) + (($105 * 136) | 0) | 0);
                    $128 = (((((($0)) + 282032 | 0) + (($105 * 136) | 0) | 0)) + 132 | 0);
                    $129 = HEAP16[$128 >> 1] | 0;
                    $130 = $129 & 65535;
                    _memcpy(($126 | 0), ($127 | 0), ($130 | 0)) | 0;
                    $131 = HEAP16[$128 >> 1] | 0;
                    $132 = $131 & 65535;
                    $133 = HEAP32[$44 >> 2] | 0;
                    $134 = (($133) + 1) | 0;
                    HEAP32[$44 >> 2] = $134;
                    $135 = (((($44)) + 4 | 0) + ($133 << 2) | 0);
                    HEAP32[$135 >> 2] = $132;
                    $136 = HEAP16[$128 >> 1] | 0;
                    $137 = $136 & 65535;
                    $138 = (($126) + ($137) | 0);
                    HEAP8[$94 >> 0] = 0;
                    $$0229$ph = $138;
                }
            }
            $139 = ($56 | 0) > ($58 | 0);
            if (!($139)) {
                $$0228233 = $56; $$0229232 = $$0229$ph;
                while (1) {
                    $140 = HEAP32[$39 >> 2] | 0;
                    $141 = (($$0228233) + 1) | 0;
                    $142 = (($140) + ($$0228233 << 2) | 0);
                    $143 = HEAP32[$142 >> 2] | 0;
                    $144 = ((($143)) + 3900 | 0);
                    $145 = HEAP32[$144 >> 2] | 0;
                    $146 = ((($143)) + 3896 | 0);
                    $147 = HEAP32[$146 >> 2] | 0;
                    $148 = HEAP32[$44 >> 2] | 0;
                    $149 = (($148) + 1) | 0;
                    HEAP32[$44 >> 2] = $149;
                    $150 = (((($44)) + 4 | 0) + ($148 << 2) | 0);
                    HEAP32[$150 >> 2] = $145;
                    _memcpy(($$0229232 | 0), ($147 | 0), ($145 | 0)) | 0;
                    $151 = (($$0229232) + ($145) | 0);
                    $152 = ($$0228233 | 0) < ($58 | 0);
                    if ($152) {
                        $$0228233 = $141; $$0229232 = $151;
                    } else {
                        break;
                    }
                }
            }
            $153 = ((($0)) + 242320 | 0);
            $154 = HEAP32[$153 >> 2] | 0;
            $155 = ($154 | 0) == ($13 | 0);
            if ($155) {
                HEAP32[$153 >> 2] = 0;
                $156 = ((($0)) + 242345 | 0);
                HEAP8[$156 >> 0] = 0;
                $157 = ((($0)) + 242346 | 0);
                HEAP8[$157 >> 0] = 1;
                $165 = 0;
                STACKTOP = sp; return ($165 | 0);
            }
            $158 = ($154 | 0) == (0);
            if ($158) {
                $165 = 0;
                STACKTOP = sp; return ($165 | 0);
            }
            $159 = ((($0)) + 242345 | 0);
            HEAP8[$159 >> 0] = 1;
            $160 = HEAP32[$5 >> 2] | 0;
            $161 = ((($160)) + 72 | 0);
            HEAP8[$161 >> 0] = 0;
            $162 = ((($0)) + 242346 | 0);
            HEAP8[$162 >> 0] = 0;
            $163 = HEAP32[$40 >> 2] | 0;
            $164 = $163 | 1;
            HEAP32[$40 >> 2] = $164;
            $165 = -1;
            STACKTOP = sp; return ($165 | 0);
        }
        $176 = ((($0)) + 242320 | 0);
        $177 = HEAP32[$176 >> 2] | 0;
        $178 = ($177 | 0) == ($13 | 0);
        if ($178) {
            $184 = ((($4)) + 12 | 0);
            $185 = HEAP8[$184 >> 0] | 0;
            $186 = ($185 << 24 >> 24) == (0);
            if ($186) {
                $$0226$off0 = 1;
            } else {
                $187 = ((($0)) + 116 | 0);
                $188 = HEAP32[$187 >> 2] | 0;
                $189 = ($188 | 0) == (0);
                if ($189) {
                    $190 = HEAP32[$5 >> 2] | 0;
                    $191 = ((($190)) + 72 | 0);
                    HEAP8[$191 >> 0] = 1;
                    $192 = ((($0)) + 84 | 0);
                    HEAP8[$192 >> 0] = 0;
                    $$0226$off0 = 1;
                } else {
                    $$0226$off0 = 1;
                }
            }
        } else {
            $179 = HEAP32[$7 >> 2] | 0;
            $180 = HEAP32[$10 >> 2] | 0;
            HEAP32[$vararg_buffer7 >> 2] = $177;
            $vararg_ptr10 = ((($vararg_buffer7)) + 4 | 0);
            HEAP32[$vararg_ptr10 >> 2] = $13;
            $vararg_ptr11 = ((($vararg_buffer7)) + 8 | 0);
            HEAP32[$vararg_ptr11 >> 2] = $179;
            $vararg_ptr12 = ((($vararg_buffer7)) + 12 | 0);
            HEAP32[$vararg_ptr12 >> 2] = $180;
            __Z7WelsLogP13TagLogContextiPKcz($0, 8, 23589, $vararg_buffer7);
            $181 = ((($0)) + 241951 | 0);
            $182 = HEAP8[$181 >> 0] | 0;
            $183 = ($182 << 24 >> 24) == (0);
            if ($183) {
                $$0226$off0 = 0;
            } else {
                $165 = -1;
                STACKTOP = sp; return ($165 | 0);
            }
        }
        HEAP32[$176 >> 2] = 0;
        $193 = ((($6)) + 96 | 0);
        $194 = $193;
        $195 = $194;
        $196 = HEAP32[$195 >> 2] | 0;
        $197 = (($194) + 4) | 0;
        $198 = $197;
        $199 = HEAP32[$198 >> 2] | 0;
        $200 = ((($2)) + 16 | 0);
        $201 = $200;
        $202 = $201;
        HEAP32[$202 >> 2] = $196;
        $203 = (($201) + 4) | 0;
        $204 = $203;
        HEAP32[$204 >> 2] = $199;
        $205 = ((($6)) + 16 | 0);
        $206 = HEAP32[$205 >> 2] | 0;
        HEAP32[$1 >> 2] = $206;
        $207 = ((($6)) + 20 | 0);
        $208 = HEAP32[$207 >> 2] | 0;
        $209 = ((($1)) + 4 | 0);
        HEAP32[$209 >> 2] = $208;
        $210 = ((($6)) + 24 | 0);
        $211 = HEAP32[$210 >> 2] | 0;
        $212 = ((($1)) + 8 | 0);
        HEAP32[$212 >> 2] = $211;
        $213 = ((($2)) + 32 | 0);
        HEAP32[$213 >> 2] = 23;
        $214 = ((($0)) + 6176 | 0);
        $215 = HEAP32[$214 >> 2] | 0;
        $216 = ((($0)) + 6184 | 0);
        $217 = HEAP32[$216 >> 2] | 0;
        $218 = (($217) + ($215)) | 0;
        $219 = $218 << 1;
        $220 = (($9) - ($219)) | 0;
        $221 = ((($2)) + 24 | 0);
        HEAP32[$221 >> 2] = $220;
        $222 = ((($0)) + 6180 | 0);
        $223 = HEAP32[$222 >> 2] | 0;
        $224 = ((($0)) + 6188 | 0);
        $225 = HEAP32[$224 >> 2] | 0;
        $226 = (($225) + ($223)) | 0;
        $227 = $226 << 1;
        $228 = (($12) - ($227)) | 0;
        $229 = ((($2)) + 28 | 0);
        HEAP32[$229 >> 2] = $228;
        $230 = ((($6)) + 32 | 0);
        $231 = HEAP32[$230 >> 2] | 0;
        $232 = ((($2)) + 36 | 0);
        HEAP32[$232 >> 2] = $231;
        $233 = ((($6)) + 36 | 0);
        $234 = HEAP32[$233 >> 2] | 0;
        $235 = ((($2)) + 40 | 0);
        HEAP32[$235 >> 2] = $234;
        $236 = HEAP32[$1 >> 2] | 0;
        $237 = HEAP32[$222 >> 2] | 0;
        $238 = $237 << 1;
        $239 = HEAP32[$230 >> 2] | 0;
        $240 = Math_imul($238, $239) | 0;
        $241 = (($236) + ($240) | 0);
        $242 = HEAP32[$214 >> 2] | 0;
        $243 = $242 << 1;
        $244 = (($241) + ($243) | 0);
        HEAP32[$1 >> 2] = $244;
        $245 = HEAP32[$209 >> 2] | 0;
        $246 = HEAP32[$222 >> 2] | 0;
        $247 = HEAP32[$233 >> 2] | 0;
        $248 = Math_imul($247, $246) | 0;
        $249 = (($245) + ($248) | 0);
        $250 = HEAP32[$214 >> 2] | 0;
        $251 = (($249) + ($250) | 0);
        HEAP32[$209 >> 2] = $251;
        $252 = HEAP32[$212 >> 2] | 0;
        $253 = HEAP32[$222 >> 2] | 0;
        $254 = HEAP32[$233 >> 2] | 0;
        $255 = Math_imul($254, $253) | 0;
        $256 = (($252) + ($255) | 0);
        $257 = HEAP32[$214 >> 2] | 0;
        $258 = (($256) + ($257) | 0);
        HEAP32[$212 >> 2] = $258;
        HEAP32[$2 >> 2] = 1;
        $259 = ((($0)) + 76 | 0);
        $260 = HEAP32[$259 >> 2] | 0;
        $261 = HEAP32[$221 >> 2] | 0;
        $262 = ($260 | 0) == ($261 | 0);
        $263 = ((($0)) + 80 | 0);
        if ($262) {
            $264 = HEAP32[$263 >> 2] | 0;
            $265 = HEAP32[$229 >> 2] | 0;
            $266 = ($264 | 0) == ($265 | 0);
            $277 = $266;
        } else {
            $277 = 0;
        }
        HEAP32[$259 >> 2] = $261;
        $267 = HEAP32[$229 >> 2] | 0;
        HEAP32[$263 >> 2] = $267;
        $268 = ((($0)) + 242340 | 0);
        $269 = HEAP32[$268 >> 2] | 0;
        switch ($269 | 0) {
            case 0: {
                if ($$0226$off0) {
                    $270 = ((($6)) + 72 | 0);
                    $271 = HEAP8[$270 >> 0] | 0;
                    $272 = $271 & 255;
                    $273 = $272;
                } else {
                    $273 = 0;
                }
                HEAP32[$2 >> 2] = $273;
                $279 = $273;
                break;
            }
            case 7: case 5: {
                $274 = ((($0)) + 116 | 0);
                $275 = HEAP32[$274 >> 2] | 0;
                $276 = ($275 | 0) == (0);
                $brmerge = $277 | $276;
                if ($brmerge) {
                    label = 34;
                } else {
                    $278 = ((($0)) + 84 | 0);
                    HEAP8[$278 >> 0] = 1;
                    label = 34;
                }
                break;
            }
            default: {
                label = 34;
            }
        }
        if ((label | 0) == 34) {
            $$pr = HEAP32[$2 >> 2] | 0;
            $279 = $$pr;
        }
        $280 = ($279 | 0) == (0);
        if ($280) {
            if ($$0226$off0) {
                $165 = -1;
                STACKTOP = sp; return ($165 | 0);
            }
            $281 = ((($0)) + 116 | 0);
            $282 = HEAP32[$281 >> 2] | 0;
            $283 = $282 | 4;
            HEAP32[$281 >> 2] = $283;
            $165 = -1;
            STACKTOP = sp; return ($165 | 0);
        }
        $284 = ((($0)) + 84 | 0);
        $285 = HEAP8[$284 >> 0] | 0;
        $286 = ($285 << 24 >> 24) == (0);
        if (!($286)) {
            HEAP32[$2 >> 2] = 0;
            $287 = HEAP8[$14 >> 0] | 0;
            $288 = ($287 << 24 >> 24) == (0);
            if (!($288)) {
                __Z7WelsLogP13TagLogContextiPKcz($0, 4, 23703, $vararg_buffer13);
            }
        }
        $289 = ((($6)) + 108 | 0);
        $290 = HEAP32[$289 >> 2] | 0;
        $291 = ((($0)) + 512332 | 0);
        HEAP32[$291 >> 2] = $290;
        $292 = ((($6)) + 116 | 0);
        $293 = HEAP32[$292 >> 2] | 0;
        $294 = ((($0)) + 512340 | 0);
        HEAP32[$294 >> 2] = $293;
        $295 = ((($6)) + 112 | 0);
        $296 = HEAP32[$295 >> 2] | 0;
        $297 = ((($0)) + 512336 | 0);
        HEAP32[$297 >> 2] = $296;
        $298 = HEAP32[$2 >> 2] | 0;
        $299 = ($298 | 0) != (0);
        _UpdateDecStat($0, $299);
        $165 = 0;
        STACKTOP = sp; return ($165 | 0);
    }
    function __ZN7WelsDec13WelsMarkAsRefEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$ = 0, $$$i$i = 0, $$0 = 0, $$0$i$ph = 0, $$0$lcssa$ph$i = 0, $$0$lcssa$ph$i$i$i = 0, $$0$lcssa$ph$i$i$i$i = 0, $$01$i = 0, $$01$i$i$i = 0, $$01$i$i$i$i = 0, $$0187$i$i$i = 0, $$02633$i$i$i$i = 0, $$02633$i$i$i$i$i = 0, $$02633$i$i68$i$i = 0, $$02633$i$i73$i$i = 0, $$02633$i$i81$i$i = 0, $$02835$i$i = 0, $$02835$i$i$i = 0, $$02835$i$i$i$i = 0, $$04285$i = 0;
        var $$056107 = 0, $$058 = 0, $$063126$i$i = 0, $$1 = 0, $$2 = 0, $$2$i$ph = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$pre1$i = 0, $$pre151 = 0, $$pre165$i$i = 0, $$pre166$i$i = 0, $$sink1$i = 0, $$sink1$i$i$i = 0, $$sink1$i$i$i$i = 0, $1 = 0, $10 = 0;
        var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
        var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
        var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
        var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
        var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
        var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
        var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
        var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
        var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
        var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
        var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
        var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
        var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
        var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
        var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
        var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
        var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
        var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
        var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
        var $443 = 0, $444 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $98 = 0, $99 = 0, $phitmp$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $vararg_buffer10 = sp + 40 | 0;
        $vararg_buffer7 = sp + 32 | 0;
        $vararg_buffer5 = sp + 24 | 0;
        $vararg_buffer3 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $1 = ((($0)) + 241932 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 4088 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($0)) + 241888 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($2)) + 16 | 0);
        $8 = HEAP8[$7 >> 0] | 0;
        $9 = ((($0)) + 5464 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($10)) + 75 | 0);
        HEAP8[$11 >> 0] = $8;
        $12 = HEAP32[$1 >> 2] | 0;
        $13 = ((($12)) + 17 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = HEAP32[$9 >> 2] | 0;
        $16 = ((($15)) + 73 | 0);
        HEAP8[$16 >> 0] = $14;
        $17 = ((($0)) + 241924 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = HEAP32[$9 >> 2] | 0;
        $21 = ((($20)) + 84 | 0);
        HEAP32[$21 >> 2] = $19;
        $22 = ((($0)) + 241928 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = ((($23)) + 4 | 0);
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = HEAP32[$9 >> 2] | 0;
        $27 = ((($26)) + 88 | 0);
        HEAP32[$27 >> 2] = $25;
        $28 = ((($6)) + 16 | 0);
        $29 = HEAP32[$28 >> 2] | 0;
        $30 = ((($6)) + 20 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = ($29 >>> 0) > ($31 >>> 0);
        L1: do {
            if ($32) {
                label = 15;
            } else {
                $33 = HEAP32[$6 >> 2] | 0;
                $$056107 = $29;
                while (1) {
                    $36 = (($33) + ($$056107 << 2) | 0);
                    $37 = HEAP32[$36 >> 2] | 0;
                    $38 = ((($37)) + 4 | 0);
                    $39 = HEAP32[$38 >> 2] | 0;
                    $40 = ($39 | 0) == (5);
                    if ($40) {
                        break;
                    }
                    $41 = ((($37)) + 12 | 0);
                    $42 = HEAP8[$41 >> 0] | 0;
                    $43 = ($42 << 24 >> 24) == (0);
                    $34 = (($$056107) + 1) | 0;
                    if (!($43)) {
                        break;
                    }
                    $35 = ($34 >>> 0) > ($31 >>> 0);
                    if ($35) {
                        label = 15;
                        break L1;
                    } else {
                        $$056107 = $34;
                    }
                }
                $44 = ((($4)) + 1585 | 0);
                $45 = HEAP8[$44 >> 0] | 0;
                $46 = ($45 << 24 >> 24) == (0);
                $47 = ((($0)) + 5860 | 0);
                if ($46) {
                    HEAP32[$47 >> 2] = -1;
                    $$1 = 0;
                    break;
                }
                HEAP32[$47 >> 2] = 0;
                $48 = HEAP32[$9 >> 2] | 0;
                $49 = ((($48)) + 68 | 0);
                HEAP8[$49 >> 0] = 1;
                $50 = ((($48)) + 69 | 0);
                HEAP8[$50 >> 0] = 1;
                $51 = ((($48)) + 80 | 0);
                HEAP32[$51 >> 2] = 0;
                $52 = ((($0)) + 5856 | 0);
                $53 = HEAP8[$52 >> 0] | 0;
                $54 = ($53 << 24 >> 24) == (0);
                if ($54) {
                    $56 = ((($0)) + 5724 | 0);
                    $$sink1$i = $56;
                } else {
                    $55 = $53 & 255;
                    $$01$i = 0;
                    while (1) {
                        $57 = (((($0)) + 5724 | 0) + ($$01$i << 2) | 0);
                        $58 = HEAP32[$57 >> 2] | 0;
                        $59 = ((($58)) + 80 | 0);
                        $60 = HEAP32[$59 >> 2] | 0;
                        $61 = ($60 | 0) > (0);
                        if ($61) {
                            $$0$lcssa$ph$i = $$01$i;
                            break;
                        }
                        $62 = (($$01$i) + 1) | 0;
                        $63 = ($62 | 0) < ($55 | 0);
                        if ($63) {
                            $$01$i = $62;
                        } else {
                            $$0$lcssa$ph$i = $62;
                            break;
                        }
                    }
                    $64 = (($$0$lcssa$ph$i) + 1) | 0;
                    $65 = (((($0)) + 5724 | 0) + ($64 << 2) | 0);
                    $66 = (((($0)) + 5724 | 0) + ($$0$lcssa$ph$i << 2) | 0);
                    $67 = (($55) - ($$0$lcssa$ph$i)) | 0;
                    $68 = $67 << 2;
                    _memmove(($65 | 0), ($66 | 0), ($68 | 0)) | 0;
                    $$sink1$i = $66;
                }
                HEAP32[$$sink1$i >> 2] = $48;
                $69 = HEAP8[$52 >> 0] | 0;
                $70 = (($69) + 1) << 24 >> 24;
                HEAP8[$52 >> 0] = $70;
                $$1 = 0;
            }
        } while (0);
        L19: do {
            if ((label | 0) == 15) {
                $71 = ((($4)) + 1586 | 0);
                $72 = HEAP8[$71 >> 0] | 0;
                $73 = ($72 << 24 >> 24) == (0);
                if ($73) {
                    $369 = ((($0)) + 5854 | 0);
                    $370 = HEAP8[$369 >> 0] | 0;
                    $371 = $370 & 255;
                    $372 = ((($0)) + 5856 | 0);
                    $373 = HEAP8[$372 >> 0] | 0;
                    $374 = $373 & 255;
                    $375 = (($374) + ($371)) | 0;
                    $376 = HEAP32[$17 >> 2] | 0;
                    $377 = ((($376)) + 296 | 0);
                    $378 = HEAP32[$377 >> 2] | 0;
                    $379 = ($375 | 0) < ($378 | 0);
                    if ($379) {
                        $$1 = 0;
                        break;
                    }
                    $380 = ($370 << 24 >> 24) == (0);
                    L24: do {
                        if ($380) {
                            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 23311, $vararg_buffer10);
                            $$0$i$ph = 10010;
                        } else {
                            $381 = (($371) + -1) | 0;
                            $382 = (((($0)) + 5596 | 0) + ($381 << 2) | 0);
                            $383 = HEAP32[$382 >> 2] | 0;
                            $384 = ((($383)) + 76 | 0);
                            $385 = HEAP32[$384 >> 2] | 0;
                            $$02835$i$i = 0;
                            while (1) {
                                $386 = (((($0)) + 5596 | 0) + ($$02835$i$i << 2) | 0);
                                $387 = HEAP32[$386 >> 2] | 0;
                                $388 = ((($387)) + 76 | 0);
                                $389 = HEAP32[$388 >> 2] | 0;
                                $390 = ($389 | 0) == ($385 | 0);
                                if ($390) {
                                    break;
                                }
                                $399 = (($$02835$i$i) + 1) | 0;
                                $400 = ($399 | 0) < ($371 | 0);
                                if ($400) {
                                    $$02835$i$i = $399;
                                } else {
                                    $$0$i$ph = 10009;
                                    break L24;
                                }
                            }
                            $391 = (($371) - ($$02835$i$i)) | 0;
                            $392 = ((($387)) + 68 | 0);
                            HEAP8[$392 >> 0] = 0;
                            $393 = HEAP32[$386 >> 2] | 0;
                            HEAP32[$386 >> 2] = 0;
                            $394 = ($391 | 0) > (1);
                            if ($394) {
                                $395 = $391 << 2;
                                $396 = (($395) + -4) | 0;
                                $397 = (($$02835$i$i) + 1) | 0;
                                $398 = (((($0)) + 5596 | 0) + ($397 << 2) | 0);
                                _memmove(($386 | 0), ($398 | 0), ($396 | 0)) | 0;
                            }
                            $401 = HEAP8[$369 >> 0] | 0;
                            $402 = (($401) + -1) << 24 >> 24;
                            HEAP8[$369 >> 0] = $402;
                            $403 = $402 & 255;
                            $404 = (((($0)) + 5596 | 0) + ($403 << 2) | 0);
                            HEAP32[$404 >> 2] = 0;
                            $405 = ($393 | 0) == (0 | 0);
                            if ($405) {
                                $$0$i$ph = 10009;
                            } else {
                                $406 = ((($393)) + 68 | 0);
                                HEAP8[$406 >> 0] = 0;
                                $407 = ((($393)) + 69 | 0);
                                HEAP8[$407 >> 0] = 0;
                                $408 = ((($393)) + 73 | 0);
                                $409 = ((($393)) + 72 | 0);
                                dest = $408; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                HEAP8[$409 >> 0] = 0;
                                $$1 = 0;
                                break L19;
                            }
                        }
                    } while (0);
                    $410 = ((($0)) + 242340 | 0);
                    $411 = HEAP32[$410 >> 2] | 0;
                    $412 = ($411 | 0) == (0);
                    if ($412) {
                        $$058 = $$0$i$ph;
                        STACKTOP = sp; return ($$058 | 0);
                    } else {
                        $413 = (__ZN7WelsDecL25RemainOneBufferInDpbForECEPNS_21TagWelsDecoderContextE($0) | 0);
                        $$1 = $413;
                        break;
                    }
                }
                $74 = ((($0)) + 5860 | 0);
                $75 = HEAP32[$4 >> 2] | 0;
                $76 = ($75 | 0) == (0);
                L40: do {
                    if ($76) {
                        $$pre151 = ((($0)) + 112 | 0);
                        $$0 = 0; $$pre$phiZ2D = $$pre151;
                    } else {
                        $77 = HEAP32[$1 >> 2] | 0;
                        $78 = ((($77)) + 3892 | 0);
                        $79 = HEAP32[$78 >> 2] | 0;
                        $80 = ((($0)) + 104 | 0);
                        $81 = ((($79)) + 16 | 0);
                        $82 = ((($0)) + 5854 | 0);
                        $83 = ((($0)) + 5856 | 0);
                        $84 = ((($0)) + 242325 | 0);
                        $85 = ((($0)) + 242328 | 0);
                        $86 = ((($0)) + 5852 | 0);
                        $87 = ((($0)) + 5724 | 0);
                        $88 = ((($0)) + 112 | 0);
                        $$04285$i = 0; $89 = $75;
                        L43: while (1) {
                            $90 = ($89 >>> 0) > (6);
                            if ($90) {
                                $$2$i$ph = 10005;
                                break;
                            }
                            $91 = (((($4) + (($$04285$i * 24) | 0) | 0)) + 20 | 0);
                            $92 = HEAP32[$91 >> 2] | 0;
                            $93 = (((($4) + (($$04285$i * 24) | 0) | 0)) + 16 | 0);
                            $94 = HEAP32[$93 >> 2] | 0;
                            $95 = (((($4) + (($$04285$i * 24) | 0) | 0)) + 12 | 0);
                            $96 = HEAP32[$95 >> 2] | 0;
                            $97 = HEAP32[$80 >> 2] | 0;
                            $98 = (((($4) + (($$04285$i * 24) | 0) | 0)) + 8 | 0);
                            $99 = HEAP32[$98 >> 2] | 0;
                            $100 = (($97) - ($99)) | 0;
                            $101 = HEAP32[$81 >> 2] | 0;
                            $102 = 1 << $101;
                            $103 = (($102) + -1) | 0;
                            $104 = $103 & $100;
                            L46: do {
                                switch ($89 | 0) {
                                    case 1: {
                                        $105 = HEAP8[$82 >> 0] | 0;
                                        $106 = $105 & 255;
                                        $107 = ($105 << 24 >> 24) == (0);
                                        L48: do {
                                            if (!($107)) {
                                                $$02835$i$i$i$i = 0;
                                                while (1) {
                                                    $108 = (((($0)) + 5596 | 0) + ($$02835$i$i$i$i << 2) | 0);
                                                    $109 = HEAP32[$108 >> 2] | 0;
                                                    $110 = ((($109)) + 76 | 0);
                                                    $111 = HEAP32[$110 >> 2] | 0;
                                                    $112 = ($111 | 0) == ($104 | 0);
                                                    if ($112) {
                                                        break;
                                                    }
                                                    $121 = (($$02835$i$i$i$i) + 1) | 0;
                                                    $122 = ($121 | 0) < ($106 | 0);
                                                    if ($122) {
                                                        $$02835$i$i$i$i = $121;
                                                    } else {
                                                        break L48;
                                                    }
                                                }
                                                $113 = (($106) - ($$02835$i$i$i$i)) | 0;
                                                $114 = ((($109)) + 68 | 0);
                                                HEAP8[$114 >> 0] = 0;
                                                $115 = HEAP32[$108 >> 2] | 0;
                                                HEAP32[$108 >> 2] = 0;
                                                $116 = ($113 | 0) > (1);
                                                if ($116) {
                                                    $117 = $113 << 2;
                                                    $118 = (($117) + -4) | 0;
                                                    $119 = (($$02835$i$i$i$i) + 1) | 0;
                                                    $120 = (((($0)) + 5596 | 0) + ($119 << 2) | 0);
                                                    _memmove(($108 | 0), ($120 | 0), ($118 | 0)) | 0;
                                                }
                                                $123 = HEAP8[$82 >> 0] | 0;
                                                $124 = (($123) + -1) << 24 >> 24;
                                                HEAP8[$82 >> 0] = $124;
                                                $125 = $124 & 255;
                                                $126 = (((($0)) + 5596 | 0) + ($125 << 2) | 0);
                                                HEAP32[$126 >> 2] = 0;
                                                $127 = ($115 | 0) == (0 | 0);
                                                if (!($127)) {
                                                    $128 = ((($115)) + 68 | 0);
                                                    HEAP8[$128 >> 0] = 0;
                                                    $129 = ((($115)) + 69 | 0);
                                                    HEAP8[$129 >> 0] = 0;
                                                    $130 = ((($115)) + 73 | 0);
                                                    $131 = ((($115)) + 72 | 0);
                                                    dest = $130; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                                    HEAP8[$131 >> 0] = 0;
                                                    break L46;
                                                }
                                            }
                                        } while (0);
                                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 23013, $vararg_buffer);
                                        break;
                                    }
                                    case 2: {
                                        $132 = HEAP8[$83 >> 0] | 0;
                                        $133 = $132 & 255;
                                        $134 = ($132 << 24 >> 24) == (0);
                                        L59: do {
                                            if (!($134)) {
                                                $$02633$i$i68$i$i = 0;
                                                while (1) {
                                                    $135 = (((($0)) + 5724 | 0) + ($$02633$i$i68$i$i << 2) | 0);
                                                    $136 = HEAP32[$135 >> 2] | 0;
                                                    $137 = ((($136)) + 80 | 0);
                                                    $138 = HEAP32[$137 >> 2] | 0;
                                                    $139 = ($138 | 0) == ($96 | 0);
                                                    if ($139) {
                                                        break;
                                                    }
                                                    $148 = (($$02633$i$i68$i$i) + 1) | 0;
                                                    $149 = ($148 | 0) < ($133 | 0);
                                                    if ($149) {
                                                        $$02633$i$i68$i$i = $148;
                                                    } else {
                                                        break L59;
                                                    }
                                                }
                                                $140 = (($133) - ($$02633$i$i68$i$i)) | 0;
                                                $141 = ((($136)) + 68 | 0);
                                                HEAP8[$141 >> 0] = 0;
                                                $142 = ((($136)) + 69 | 0);
                                                HEAP8[$142 >> 0] = 0;
                                                $143 = ($140 | 0) > (1);
                                                if ($143) {
                                                    $144 = $140 << 2;
                                                    $145 = (($144) + -4) | 0;
                                                    $146 = (($$02633$i$i68$i$i) + 1) | 0;
                                                    $147 = (((($0)) + 5724 | 0) + ($146 << 2) | 0);
                                                    _memmove(($135 | 0), ($147 | 0), ($145 | 0)) | 0;
                                                }
                                                $150 = HEAP8[$83 >> 0] | 0;
                                                $151 = (($150) + -1) << 24 >> 24;
                                                HEAP8[$83 >> 0] = $151;
                                                $152 = $151 & 255;
                                                $153 = (((($0)) + 5724 | 0) + ($152 << 2) | 0);
                                                HEAP32[$153 >> 2] = 0;
                                                HEAP8[$141 >> 0] = 0;
                                                HEAP8[$142 >> 0] = 0;
                                                $154 = ((($136)) + 73 | 0);
                                                $155 = ((($136)) + 72 | 0);
                                                dest = $154; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                                HEAP8[$155 >> 0] = 0;
                                                break L46;
                                            }
                                        } while (0);
                                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 23074, $vararg_buffer1);
                                        break;
                                    }
                                    case 3: {
                                        $156 = HEAP32[$74 >> 2] | 0;
                                        $157 = ($156 | 0) < ($94 | 0);
                                        if ($157) {
                                            $$2$i$ph = 10011;
                                            break L43;
                                        }
                                        $158 = HEAP8[$82 >> 0] | 0;
                                        $159 = $158 & 255;
                                        $160 = ($158 << 24 >> 24) == (0);
                                        L70: do {
                                            if (!($160)) {
                                                $$02835$i$i$i = 0;
                                                while (1) {
                                                    $161 = (((($0)) + 5596 | 0) + ($$02835$i$i$i << 2) | 0);
                                                    $162 = HEAP32[$161 >> 2] | 0;
                                                    $163 = ((($162)) + 76 | 0);
                                                    $164 = HEAP32[$163 >> 2] | 0;
                                                    $165 = ($164 | 0) == ($104 | 0);
                                                    if ($165) {
                                                        break;
                                                    }
                                                    $174 = (($$02835$i$i$i) + 1) | 0;
                                                    $175 = ($174 | 0) < ($159 | 0);
                                                    if ($175) {
                                                        $$02835$i$i$i = $174;
                                                    } else {
                                                        break L70;
                                                    }
                                                }
                                                $166 = (($159) - ($$02835$i$i$i)) | 0;
                                                $167 = ((($162)) + 68 | 0);
                                                HEAP8[$167 >> 0] = 0;
                                                $168 = HEAP32[$161 >> 2] | 0;
                                                HEAP32[$161 >> 2] = 0;
                                                $169 = ($166 | 0) > (1);
                                                if ($169) {
                                                    $170 = (($$02835$i$i$i) + 1) | 0;
                                                    $171 = (((($0)) + 5596 | 0) + ($170 << 2) | 0);
                                                    $172 = $166 << 2;
                                                    $173 = (($172) + -4) | 0;
                                                    _memmove(($161 | 0), ($171 | 0), ($173 | 0)) | 0;
                                                }
                                                $176 = HEAP8[$82 >> 0] | 0;
                                                $177 = (($176) + -1) << 24 >> 24;
                                                HEAP8[$82 >> 0] = $177;
                                                $178 = $177 & 255;
                                                $179 = (((($0)) + 5596 | 0) + ($178 << 2) | 0);
                                                HEAP32[$179 >> 2] = 0;
                                                $180 = ($168 | 0) == (0 | 0);
                                                if (!($180)) {
                                                    $181 = HEAP8[$83 >> 0] | 0;
                                                    $182 = $181 & 255;
                                                    $183 = ($181 << 24 >> 24) == (0);
                                                    L79: do {
                                                        if (!($183)) {
                                                            $$02633$i$i81$i$i = 0;
                                                            while (1) {
                                                                $184 = (((($0)) + 5724 | 0) + ($$02633$i$i81$i$i << 2) | 0);
                                                                $185 = HEAP32[$184 >> 2] | 0;
                                                                $186 = ((($185)) + 80 | 0);
                                                                $187 = HEAP32[$186 >> 2] | 0;
                                                                $188 = ($187 | 0) == ($94 | 0);
                                                                if ($188) {
                                                                    break;
                                                                }
                                                                $197 = (($$02633$i$i81$i$i) + 1) | 0;
                                                                $198 = ($197 | 0) < ($182 | 0);
                                                                if ($198) {
                                                                    $$02633$i$i81$i$i = $197;
                                                                } else {
                                                                    break L79;
                                                                }
                                                            }
                                                            $189 = (($182) - ($$02633$i$i81$i$i)) | 0;
                                                            $190 = ((($185)) + 68 | 0);
                                                            HEAP8[$190 >> 0] = 0;
                                                            $191 = ((($185)) + 69 | 0);
                                                            HEAP8[$191 >> 0] = 0;
                                                            $192 = ($189 | 0) > (1);
                                                            if ($192) {
                                                                $193 = $189 << 2;
                                                                $194 = (($193) + -4) | 0;
                                                                $195 = (($$02633$i$i81$i$i) + 1) | 0;
                                                                $196 = (((($0)) + 5724 | 0) + ($195 << 2) | 0);
                                                                _memmove(($184 | 0), ($196 | 0), ($194 | 0)) | 0;
                                                            }
                                                            $199 = HEAP8[$83 >> 0] | 0;
                                                            $200 = (($199) + -1) << 24 >> 24;
                                                            HEAP8[$83 >> 0] = $200;
                                                            $201 = $200 & 255;
                                                            $202 = (((($0)) + 5724 | 0) + ($201 << 2) | 0);
                                                            HEAP32[$202 >> 2] = 0;
                                                            HEAP8[$190 >> 0] = 0;
                                                            HEAP8[$191 >> 0] = 0;
                                                            $203 = ((($185)) + 73 | 0);
                                                            $204 = ((($185)) + 72 | 0);
                                                            dest = $203; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                                            HEAP8[$204 >> 0] = 0;
                                                        }
                                                    } while (0);
                                                    HEAP8[$84 >> 0] = 1;
                                                    HEAP32[$85 >> 2] = $104;
                                                    HEAP32[$vararg_buffer5 >> 2] = $104;
                                                    __Z7WelsLogP13TagLogContextiPKcz($0, 4, 23191, $vararg_buffer5);
                                                    $205 = HEAP8[$83 >> 0] | 0;
                                                    $206 = $205 & 255;
                                                    $207 = ($205 << 24 >> 24) == (0);
                                                    L88: do {
                                                        if (!($207)) {
                                                            $$02633$i$i$i$i$i = 0;
                                                            while (1) {
                                                                $208 = (((($0)) + 5724 | 0) + ($$02633$i$i$i$i$i << 2) | 0);
                                                                $209 = HEAP32[$208 >> 2] | 0;
                                                                $210 = ((($209)) + 80 | 0);
                                                                $211 = HEAP32[$210 >> 2] | 0;
                                                                $212 = ($211 | 0) == ($94 | 0);
                                                                if ($212) {
                                                                    break;
                                                                }
                                                                $221 = (($$02633$i$i$i$i$i) + 1) | 0;
                                                                $222 = ($221 | 0) < ($206 | 0);
                                                                if ($222) {
                                                                    $$02633$i$i$i$i$i = $221;
                                                                } else {
                                                                    break L88;
                                                                }
                                                            }
                                                            $213 = (($206) - ($$02633$i$i$i$i$i)) | 0;
                                                            $214 = ((($209)) + 68 | 0);
                                                            HEAP8[$214 >> 0] = 0;
                                                            $215 = ((($209)) + 69 | 0);
                                                            HEAP8[$215 >> 0] = 0;
                                                            $216 = ($213 | 0) > (1);
                                                            if ($216) {
                                                                $217 = (($$02633$i$i$i$i$i) + 1) | 0;
                                                                $218 = (((($0)) + 5724 | 0) + ($217 << 2) | 0);
                                                                $219 = $213 << 2;
                                                                $220 = (($219) + -4) | 0;
                                                                _memmove(($208 | 0), ($218 | 0), ($220 | 0)) | 0;
                                                            }
                                                            $223 = HEAP8[$83 >> 0] | 0;
                                                            $224 = (($223) + -1) << 24 >> 24;
                                                            HEAP8[$83 >> 0] = $224;
                                                            $225 = $224 & 255;
                                                            $226 = (((($0)) + 5724 | 0) + ($225 << 2) | 0);
                                                            HEAP32[$226 >> 2] = 0;
                                                            HEAP8[$214 >> 0] = 0;
                                                            HEAP8[$215 >> 0] = 0;
                                                            $227 = ((($209)) + 73 | 0);
                                                            $228 = ((($209)) + 72 | 0);
                                                            dest = $227; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                                            HEAP8[$228 >> 0] = 0;
                                                        }
                                                    } while (0);
                                                    $229 = HEAP8[$86 >> 0] | 0;
                                                    $230 = ($229 << 24 >> 24) == (0);
                                                    if ($230) {
                                                        break L46;
                                                    }
                                                    $231 = $229 & 255;
                                                    $$0187$i$i$i = 0;
                                                    while (1) {
                                                        $232 = (((($0)) + 5468 | 0) + ($$0187$i$i$i << 2) | 0);
                                                        $233 = HEAP32[$232 >> 2] | 0;
                                                        $234 = ((($233)) + 76 | 0);
                                                        $235 = HEAP32[$234 >> 2] | 0;
                                                        $236 = ($235 | 0) == ($104 | 0);
                                                        if ($236) {
                                                            $237 = ((($233)) + 69 | 0);
                                                            $238 = HEAP8[$237 >> 0] | 0;
                                                            $239 = ($238 << 24 >> 24) == (0);
                                                            if ($239) {
                                                                break;
                                                            }
                                                        }
                                                        $259 = (($$0187$i$i$i) + 1) | 0;
                                                        $260 = ($259 | 0) < ($231 | 0);
                                                        if ($260) {
                                                            $$0187$i$i$i = $259;
                                                        } else {
                                                            break L46;
                                                        }
                                                    }
                                                    $240 = ((($233)) + 68 | 0);
                                                    HEAP8[$240 >> 0] = 1;
                                                    HEAP8[$237 >> 0] = 1;
                                                    $241 = ((($233)) + 80 | 0);
                                                    HEAP32[$241 >> 2] = $94;
                                                    $242 = HEAP8[$83 >> 0] | 0;
                                                    $243 = ($242 << 24 >> 24) == (0);
                                                    if ($243) {
                                                        $$sink1$i$i$i$i = $87;
                                                    } else {
                                                        $244 = $242 & 255;
                                                        $$01$i$i$i$i = 0;
                                                        while (1) {
                                                            $245 = (((($0)) + 5724 | 0) + ($$01$i$i$i$i << 2) | 0);
                                                            $246 = HEAP32[$245 >> 2] | 0;
                                                            $247 = ((($246)) + 80 | 0);
                                                            $248 = HEAP32[$247 >> 2] | 0;
                                                            $249 = ($248 | 0) > ($94 | 0);
                                                            if ($249) {
                                                                $$0$lcssa$ph$i$i$i$i = $$01$i$i$i$i;
                                                                break;
                                                            }
                                                            $250 = (($$01$i$i$i$i) + 1) | 0;
                                                            $251 = ($250 | 0) < ($244 | 0);
                                                            if ($251) {
                                                                $$01$i$i$i$i = $250;
                                                            } else {
                                                                $$0$lcssa$ph$i$i$i$i = $250;
                                                                break;
                                                            }
                                                        }
                                                        $252 = (($$0$lcssa$ph$i$i$i$i) + 1) | 0;
                                                        $253 = (((($0)) + 5724 | 0) + ($252 << 2) | 0);
                                                        $254 = (((($0)) + 5724 | 0) + ($$0$lcssa$ph$i$i$i$i << 2) | 0);
                                                        $255 = (($244) - ($$0$lcssa$ph$i$i$i$i)) | 0;
                                                        $256 = $255 << 2;
                                                        _memmove(($253 | 0), ($254 | 0), ($256 | 0)) | 0;
                                                        $$sink1$i$i$i$i = $254;
                                                    }
                                                    HEAP32[$$sink1$i$i$i$i >> 2] = $233;
                                                    $257 = HEAP8[$83 >> 0] | 0;
                                                    $258 = (($257) + 1) << 24 >> 24;
                                                    HEAP8[$83 >> 0] = $258;
                                                    break L46;
                                                }
                                            }
                                        } while (0);
                                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 23133, $vararg_buffer3);
                                        break;
                                    }
                                    case 4: {
                                        HEAP32[$74 >> 2] = $92;
                                        $261 = HEAP8[$83 >> 0] | 0;
                                        $262 = ($261 << 24 >> 24) == (0);
                                        if (!($262)) {
                                            $$063126$i$i = 0; $268 = $92; $270 = $261;
                                            while (1) {
                                                $263 = (((($0)) + 5724 | 0) + ($$063126$i$i << 2) | 0);
                                                $264 = HEAP32[$263 >> 2] | 0;
                                                $265 = ((($264)) + 80 | 0);
                                                $266 = HEAP32[$265 >> 2] | 0;
                                                $267 = ($266 | 0) > ($268 | 0);
                                                L115: do {
                                                    if ($267) {
                                                        $269 = $270 & 255;
                                                        $271 = ($270 << 24 >> 24) == (0);
                                                        if ($271) {
                                                            $295 = 0;
                                                        } else {
                                                            $$02633$i$i73$i$i = 0;
                                                            while (1) {
                                                                $272 = (((($0)) + 5724 | 0) + ($$02633$i$i73$i$i << 2) | 0);
                                                                $273 = HEAP32[$272 >> 2] | 0;
                                                                $274 = ((($273)) + 80 | 0);
                                                                $275 = HEAP32[$274 >> 2] | 0;
                                                                $276 = ($275 | 0) == ($266 | 0);
                                                                if ($276) {
                                                                    break;
                                                                }
                                                                $285 = (($$02633$i$i73$i$i) + 1) | 0;
                                                                $286 = ($285 | 0) < ($269 | 0);
                                                                if ($286) {
                                                                    $$02633$i$i73$i$i = $285;
                                                                } else {
                                                                    $295 = $270;
                                                                    break L115;
                                                                }
                                                            }
                                                            $277 = (($269) - ($$02633$i$i73$i$i)) | 0;
                                                            $278 = ((($273)) + 68 | 0);
                                                            HEAP8[$278 >> 0] = 0;
                                                            $279 = ((($273)) + 69 | 0);
                                                            HEAP8[$279 >> 0] = 0;
                                                            $280 = ($277 | 0) > (1);
                                                            if ($280) {
                                                                $281 = $277 << 2;
                                                                $282 = (($281) + -4) | 0;
                                                                $283 = (($$02633$i$i73$i$i) + 1) | 0;
                                                                $284 = (((($0)) + 5724 | 0) + ($283 << 2) | 0);
                                                                _memmove(($272 | 0), ($284 | 0), ($282 | 0)) | 0;
                                                            }
                                                            $287 = HEAP8[$83 >> 0] | 0;
                                                            $288 = (($287) + -1) << 24 >> 24;
                                                            HEAP8[$83 >> 0] = $288;
                                                            $289 = $288 & 255;
                                                            $290 = (((($0)) + 5724 | 0) + ($289 << 2) | 0);
                                                            HEAP32[$290 >> 2] = 0;
                                                            HEAP8[$278 >> 0] = 0;
                                                            HEAP8[$279 >> 0] = 0;
                                                            $291 = ((($273)) + 73 | 0);
                                                            $292 = ((($273)) + 72 | 0);
                                                            dest = $291; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                                            HEAP8[$292 >> 0] = 0;
                                                            $$pre166$i$i = HEAP8[$83 >> 0] | 0;
                                                            $295 = $$pre166$i$i;
                                                        }
                                                    } else {
                                                        $295 = $270;
                                                    }
                                                } while (0);
                                                $293 = (($$063126$i$i) + 1) | 0;
                                                $294 = $295 & 255;
                                                $296 = ($293 | 0) < ($294 | 0);
                                                if (!($296)) {
                                                    break L46;
                                                }
                                                $$pre165$i$i = HEAP32[$74 >> 2] | 0;
                                                $$063126$i$i = $293; $268 = $$pre165$i$i; $270 = $295;
                                            }
                                        }
                                        break;
                                    }
                                    case 5: {
                                        __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($0);
                                        HEAP8[$88 >> 0] = 1;
                                        break;
                                    }
                                    case 6: {
                                        $297 = HEAP32[$74 >> 2] | 0;
                                        $298 = ($297 | 0) < ($94 | 0);
                                        if ($298) {
                                            $$2$i$ph = 10011;
                                            break L43;
                                        }
                                        $299 = HEAP8[$83 >> 0] | 0;
                                        $300 = $299 & 255;
                                        $301 = ($299 << 24 >> 24) == (0);
                                        L129: do {
                                            if ($301) {
                                                $324 = 0;
                                            } else {
                                                $$02633$i$i$i$i = 0;
                                                while (1) {
                                                    $302 = (((($0)) + 5724 | 0) + ($$02633$i$i$i$i << 2) | 0);
                                                    $303 = HEAP32[$302 >> 2] | 0;
                                                    $304 = ((($303)) + 80 | 0);
                                                    $305 = HEAP32[$304 >> 2] | 0;
                                                    $306 = ($305 | 0) == ($94 | 0);
                                                    if ($306) {
                                                        break;
                                                    }
                                                    $315 = (($$02633$i$i$i$i) + 1) | 0;
                                                    $316 = ($315 | 0) < ($300 | 0);
                                                    if ($316) {
                                                        $$02633$i$i$i$i = $315;
                                                    } else {
                                                        $324 = $299;
                                                        break L129;
                                                    }
                                                }
                                                $307 = (($300) - ($$02633$i$i$i$i)) | 0;
                                                $308 = ((($303)) + 68 | 0);
                                                HEAP8[$308 >> 0] = 0;
                                                $309 = ((($303)) + 69 | 0);
                                                HEAP8[$309 >> 0] = 0;
                                                $310 = ($307 | 0) > (1);
                                                if ($310) {
                                                    $311 = $307 << 2;
                                                    $312 = (($311) + -4) | 0;
                                                    $313 = (($$02633$i$i$i$i) + 1) | 0;
                                                    $314 = (((($0)) + 5724 | 0) + ($313 << 2) | 0);
                                                    _memmove(($302 | 0), ($314 | 0), ($312 | 0)) | 0;
                                                }
                                                $317 = HEAP8[$83 >> 0] | 0;
                                                $318 = (($317) + -1) << 24 >> 24;
                                                HEAP8[$83 >> 0] = $318;
                                                $319 = $318 & 255;
                                                $320 = (((($0)) + 5724 | 0) + ($319 << 2) | 0);
                                                HEAP32[$320 >> 2] = 0;
                                                HEAP8[$308 >> 0] = 0;
                                                HEAP8[$309 >> 0] = 0;
                                                $321 = ((($303)) + 73 | 0);
                                                $322 = ((($303)) + 72 | 0);
                                                dest = $321; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                                HEAP8[$322 >> 0] = 0;
                                                $$pre$i$i = HEAP8[$83 >> 0] | 0;
                                                $324 = $$pre$i$i;
                                            }
                                        } while (0);
                                        $323 = $324 & 255;
                                        $325 = HEAP8[$82 >> 0] | 0;
                                        $326 = $325 & 255;
                                        $327 = (($326) + ($323)) | 0;
                                        $328 = HEAP32[$17 >> 2] | 0;
                                        $329 = ((($328)) + 296 | 0);
                                        $330 = HEAP32[$329 >> 2] | 0;
                                        $331 = ($330 | 0) > (1);
                                        $$$i$i = $331 ? $330 : 1;
                                        $332 = ($327 | 0) < ($$$i$i | 0);
                                        if (!($332)) {
                                            $$2$i$ph = 10009;
                                            break L43;
                                        }
                                        HEAP8[$84 >> 0] = 1;
                                        $333 = HEAP32[$80 >> 2] | 0;
                                        HEAP32[$85 >> 2] = $333;
                                        HEAP32[$vararg_buffer7 >> 2] = $333;
                                        __Z7WelsLogP13TagLogContextiPKcz($0, 4, 23254, $vararg_buffer7);
                                        $334 = HEAP32[$9 >> 2] | 0;
                                        $335 = ((($334)) + 68 | 0);
                                        HEAP8[$335 >> 0] = 1;
                                        $336 = ((($334)) + 69 | 0);
                                        HEAP8[$336 >> 0] = 1;
                                        $337 = ((($334)) + 80 | 0);
                                        HEAP32[$337 >> 2] = $94;
                                        $338 = HEAP8[$83 >> 0] | 0;
                                        $339 = ($338 << 24 >> 24) == (0);
                                        if ($339) {
                                            $$sink1$i$i$i = $87;
                                        } else {
                                            $340 = $338 & 255;
                                            $$01$i$i$i = 0;
                                            while (1) {
                                                $341 = (((($0)) + 5724 | 0) + ($$01$i$i$i << 2) | 0);
                                                $342 = HEAP32[$341 >> 2] | 0;
                                                $343 = ((($342)) + 80 | 0);
                                                $344 = HEAP32[$343 >> 2] | 0;
                                                $345 = ($344 | 0) > ($94 | 0);
                                                if ($345) {
                                                    $$0$lcssa$ph$i$i$i = $$01$i$i$i;
                                                    break;
                                                }
                                                $346 = (($$01$i$i$i) + 1) | 0;
                                                $347 = ($346 | 0) < ($340 | 0);
                                                if ($347) {
                                                    $$01$i$i$i = $346;
                                                } else {
                                                    $$0$lcssa$ph$i$i$i = $346;
                                                    break;
                                                }
                                            }
                                            $348 = (($$0$lcssa$ph$i$i$i) + 1) | 0;
                                            $349 = (((($0)) + 5724 | 0) + ($348 << 2) | 0);
                                            $350 = (((($0)) + 5724 | 0) + ($$0$lcssa$ph$i$i$i << 2) | 0);
                                            $351 = (($340) - ($$0$lcssa$ph$i$i$i)) | 0;
                                            $352 = $351 << 2;
                                            _memmove(($349 | 0), ($350 | 0), ($352 | 0)) | 0;
                                            $$sink1$i$i$i = $350;
                                        }
                                        HEAP32[$$sink1$i$i$i >> 2] = $334;
                                        $353 = HEAP8[$83 >> 0] | 0;
                                        $354 = (($353) + 1) << 24 >> 24;
                                        HEAP8[$83 >> 0] = $354;
                                        break;
                                    }
                                    default: {
                                    }
                                }
                            } while (0);
                            $355 = (($$04285$i) + 1) | 0;
                            $356 = (($4) + (($355 * 24) | 0) | 0);
                            $357 = HEAP32[$356 >> 2] | 0;
                            $358 = ($357 | 0) == (0);
                            if ($358) {
                                $$0 = 0; $$pre$phiZ2D = $88;
                                break L40;
                            } else {
                                $$04285$i = $355; $89 = $357;
                            }
                        }
                        $359 = ((($0)) + 242340 | 0);
                        $360 = HEAP32[$359 >> 2] | 0;
                        $361 = ($360 | 0) == (0);
                        if ($361) {
                            $$058 = $$2$i$ph;
                            STACKTOP = sp; return ($$058 | 0);
                        } else {
                            $362 = (__ZN7WelsDecL25RemainOneBufferInDpbForECEPNS_21TagWelsDecoderContextE($0) | 0);
                            $$0 = $362; $$pre$phiZ2D = $88;
                            break;
                        }
                    }
                } while (0);
                $363 = HEAP8[$$pre$phiZ2D >> 0] | 0;
                $364 = ($363 << 24 >> 24) == (0);
                if ($364) {
                    $$1 = $$0;
                } else {
                    $365 = HEAP32[$9 >> 2] | 0;
                    $366 = ((($365)) + 76 | 0);
                    HEAP32[$366 >> 2] = 0;
                    $367 = HEAP32[$9 >> 2] | 0;
                    $368 = ((($367)) + 64 | 0);
                    HEAP32[$368 >> 2] = 0;
                    $$1 = $$0;
                }
            }
        } while (0);
        $414 = HEAP32[$9 >> 2] | 0;
        $415 = ((($414)) + 69 | 0);
        $416 = HEAP8[$415 >> 0] | 0;
        $417 = ($416 << 24 >> 24) == (0);
        if (!($417)) {
            $$058 = $$1;
            STACKTOP = sp; return ($$058 | 0);
        }
        $418 = ((($0)) + 5856 | 0);
        $419 = HEAP8[$418 >> 0] | 0;
        $420 = $419 & 255;
        $421 = ((($0)) + 5854 | 0);
        $422 = HEAP8[$421 >> 0] | 0;
        $423 = $422 & 255;
        $424 = (($423) + ($420)) | 0;
        $425 = HEAP32[$17 >> 2] | 0;
        $426 = ((($425)) + 296 | 0);
        $427 = HEAP32[$426 >> 2] | 0;
        $428 = ($427 | 0) > (1);
        $$ = $428 ? $427 : 1;
        $429 = ($424 | 0) < ($$ | 0);
        do {
            if ($429) {
                $$2 = $$1; $435 = $414;
            } else {
                $430 = ((($0)) + 242340 | 0);
                $431 = HEAP32[$430 >> 2] | 0;
                $432 = ($431 | 0) == (0);
                if ($432) {
                    $$058 = 10009;
                    STACKTOP = sp; return ($$058 | 0);
                } else {
                    $433 = (__ZN7WelsDecL25RemainOneBufferInDpbForECEPNS_21TagWelsDecoderContextE($0) | 0);
                    $$pre = HEAP32[$9 >> 2] | 0;
                    $$2 = $433; $435 = $$pre;
                    break;
                }
            }
        } while (0);
        $434 = ((($435)) + 68 | 0);
        HEAP8[$434 >> 0] = 1;
        $436 = ((($435)) + 69 | 0);
        HEAP8[$436 >> 0] = 0;
        $437 = ((($435)) + 80 | 0);
        HEAP32[$437 >> 2] = -1;
        $438 = HEAP8[$421 >> 0] | 0;
        $439 = ($438 << 24 >> 24) == (0);
        if ($439) {
            $$pre1$i = ((($0)) + 5596 | 0);
            $$pre$phi$iZ2D = $$pre1$i; $444 = 1;
        } else {
            $440 = $438 & 255;
            $441 = $440 << 2;
            $442 = ((($0)) + 5596 | 0);
            $443 = ((($0)) + 5600 | 0);
            _memmove(($443 | 0), ($442 | 0), ($441 | 0)) | 0;
            $$pre$i = HEAP8[$421 >> 0] | 0;
            $phitmp$i = (($$pre$i) + 1) << 24 >> 24;
            $$pre$phi$iZ2D = $442; $444 = $phitmp$i;
        }
        HEAP32[$$pre$phi$iZ2D >> 2] = $435;
        HEAP8[$421 >> 0] = $444;
        $$058 = $$2;
        STACKTOP = sp; return ($$058 | 0);
    }
    function __ZN7WelsDecL25RemainOneBufferInDpbForECEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0 = 0, $$01517$i = 0, $$02633$i$i = 0, $$02835$i$i = 0, $$034 = 0, $$03551 = 0, $$pre = 0, $$pre65 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
        var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond50 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $1 = ((($0)) + 5854 | 0);
        $2 = HEAP8[$1 >> 0] | 0;
        $3 = $2 & 255;
        $4 = ((($0)) + 5856 | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = (($6) + ($3)) | 0;
        $8 = ((($0)) + 241924 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($9)) + 296 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ($7 | 0) < ($11 | 0);
        if ($12) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $13 = ($2 << 24 >> 24) == (0);
        L4: do {
            if ($13) {
                $43 = ((($0)) + 5860 | 0);
                $44 = HEAP32[$43 >> 2] | 0;
                $45 = ((($0)) + 242328 | 0);
                $46 = HEAP32[$45 >> 2] | 0;
                $47 = ($5 << 24 >> 24) == (0);
                L6: do {
                    if ($47) {
                        $60 = -1;
                    } else {
                        $$01517$i = 0;
                        while (1) {
                            $50 = (((($0)) + 5724 | 0) + ($$01517$i << 2) | 0);
                            $51 = HEAP32[$50 >> 2] | 0;
                            $52 = ((($51)) + 76 | 0);
                            $53 = HEAP32[$52 >> 2] | 0;
                            $54 = ($53 | 0) == ($46 | 0);
                            $48 = (($$01517$i) + 1) | 0;
                            if ($54) {
                                break;
                            }
                            $49 = ($48 | 0) < ($6 | 0);
                            if ($49) {
                                $$01517$i = $48;
                            } else {
                                $60 = -1;
                                break L6;
                            }
                        }
                        $55 = ((($51)) + 80 | 0);
                        $56 = HEAP32[$55 >> 2] | 0;
                        $60 = $56;
                    }
                } while (0);
                $57 = ($11 | 0) > ($6 | 0);
                $58 = ($44 | 0) < (0);
                $or$cond50 = $58 | $57;
                if ($or$cond50) {
                    $$034 = 0;
                } else {
                    $$03551 = 0; $102 = $9; $70 = $5;
                    while (1) {
                        $59 = ($$03551 | 0) == ($60 | 0);
                        L14: do {
                            if ($59) {
                                $63 = $70; $65 = $102;
                            } else {
                                $69 = $70 & 255;
                                $71 = ($70 << 24 >> 24) == (0);
                                if ($71) {
                                    $63 = 0; $65 = $102;
                                } else {
                                    $$02633$i$i = 0;
                                    while (1) {
                                        $72 = (((($0)) + 5724 | 0) + ($$02633$i$i << 2) | 0);
                                        $73 = HEAP32[$72 >> 2] | 0;
                                        $74 = ((($73)) + 80 | 0);
                                        $75 = HEAP32[$74 >> 2] | 0;
                                        $76 = ($75 | 0) == ($$03551 | 0);
                                        if ($76) {
                                            break;
                                        }
                                        $85 = (($$02633$i$i) + 1) | 0;
                                        $86 = ($85 | 0) < ($69 | 0);
                                        if ($86) {
                                            $$02633$i$i = $85;
                                        } else {
                                            $63 = $70; $65 = $102;
                                            break L14;
                                        }
                                    }
                                    $77 = (($69) - ($$02633$i$i)) | 0;
                                    $78 = ((($73)) + 68 | 0);
                                    HEAP8[$78 >> 0] = 0;
                                    $79 = ((($73)) + 69 | 0);
                                    HEAP8[$79 >> 0] = 0;
                                    $80 = ($77 | 0) > (1);
                                    if ($80) {
                                        $81 = $77 << 2;
                                        $82 = (($81) + -4) | 0;
                                        $83 = (($$02633$i$i) + 1) | 0;
                                        $84 = (((($0)) + 5724 | 0) + ($83 << 2) | 0);
                                        _memmove(($72 | 0), ($84 | 0), ($82 | 0)) | 0;
                                    }
                                    $87 = HEAP8[$4 >> 0] | 0;
                                    $88 = (($87) + -1) << 24 >> 24;
                                    HEAP8[$4 >> 0] = $88;
                                    $89 = $88 & 255;
                                    $90 = (((($0)) + 5724 | 0) + ($89 << 2) | 0);
                                    HEAP32[$90 >> 2] = 0;
                                    HEAP8[$78 >> 0] = 0;
                                    HEAP8[$79 >> 0] = 0;
                                    $91 = ((($73)) + 73 | 0);
                                    $92 = ((($73)) + 72 | 0);
                                    dest = $91; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                    HEAP8[$92 >> 0] = 0;
                                    $$pre = HEAP8[$4 >> 0] | 0;
                                    $$pre65 = HEAP32[$8 >> 2] | 0;
                                    $63 = $$pre; $65 = $$pre65;
                                }
                            }
                        } while (0);
                        $61 = (($$03551) + 1) | 0;
                        $62 = $63 & 255;
                        $64 = ((($65)) + 296 | 0);
                        $66 = HEAP32[$64 >> 2] | 0;
                        $67 = ($66 | 0) > ($62 | 0);
                        $68 = ($$03551 | 0) >= ($44 | 0);
                        $or$cond = $68 | $67;
                        if ($or$cond) {
                            $$034 = 0;
                            break;
                        } else {
                            $$03551 = $61; $102 = $65; $70 = $63;
                        }
                    }
                }
            } else {
                $14 = (($3) + -1) | 0;
                $15 = (((($0)) + 5596 | 0) + ($14 << 2) | 0);
                $16 = HEAP32[$15 >> 2] | 0;
                $17 = ((($16)) + 76 | 0);
                $18 = HEAP32[$17 >> 2] | 0;
                $$02835$i$i = 0;
                while (1) {
                    $19 = (((($0)) + 5596 | 0) + ($$02835$i$i << 2) | 0);
                    $20 = HEAP32[$19 >> 2] | 0;
                    $21 = ((($20)) + 76 | 0);
                    $22 = HEAP32[$21 >> 2] | 0;
                    $23 = ($22 | 0) == ($18 | 0);
                    if ($23) {
                        break;
                    }
                    $32 = (($$02835$i$i) + 1) | 0;
                    $33 = ($32 | 0) < ($3 | 0);
                    if ($33) {
                        $$02835$i$i = $32;
                    } else {
                        $$034 = 10009;
                        break L4;
                    }
                }
                $24 = (($3) - ($$02835$i$i)) | 0;
                $25 = ((($20)) + 68 | 0);
                HEAP8[$25 >> 0] = 0;
                $26 = HEAP32[$19 >> 2] | 0;
                HEAP32[$19 >> 2] = 0;
                $27 = ($24 | 0) > (1);
                if ($27) {
                    $28 = $24 << 2;
                    $29 = (($28) + -4) | 0;
                    $30 = (($$02835$i$i) + 1) | 0;
                    $31 = (((($0)) + 5596 | 0) + ($30 << 2) | 0);
                    _memmove(($19 | 0), ($31 | 0), ($29 | 0)) | 0;
                }
                $34 = HEAP8[$1 >> 0] | 0;
                $35 = (($34) + -1) << 24 >> 24;
                HEAP8[$1 >> 0] = $35;
                $36 = $35 & 255;
                $37 = (((($0)) + 5596 | 0) + ($36 << 2) | 0);
                HEAP32[$37 >> 2] = 0;
                $38 = ($26 | 0) == (0 | 0);
                if ($38) {
                    $$034 = 10009;
                } else {
                    $39 = ((($26)) + 68 | 0);
                    HEAP8[$39 >> 0] = 0;
                    $40 = ((($26)) + 69 | 0);
                    HEAP8[$40 >> 0] = 0;
                    $41 = ((($26)) + 73 | 0);
                    $42 = ((($26)) + 72 | 0);
                    dest = $41; stop = dest + 15 | 0; do { HEAP8[dest >> 0] = 255 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                    HEAP8[$42 >> 0] = 0;
                    $$034 = 0;
                }
            }
        } while (0);
        $93 = HEAP8[$1 >> 0] | 0;
        $94 = $93 & 255;
        $95 = HEAP8[$4 >> 0] | 0;
        $96 = $95 & 255;
        $97 = (($96) + ($94)) | 0;
        $98 = HEAP32[$8 >> 2] | 0;
        $99 = ((($98)) + 296 | 0);
        $100 = HEAP32[$99 >> 2] | 0;
        $101 = ($97 | 0) < ($100 | 0);
        if ($101) {
            $$0 = $$034;
            STACKTOP = sp; return ($$0 | 0);
        }
        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 23371, $vararg_buffer);
        $$0 = 1010;
        STACKTOP = sp; return ($$0 | 0);
    }
    function _UpdateDecStat($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$042$lcssa$i = 0, $$04243$i = 0, $$044$i = 0, $$sink$i = 0, $$sink$i4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $div$i = 0, $exitcond$i = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 84 | 0);
        $3 = HEAP8[$2 >> 0] | 0;
        $4 = ($3 << 24 >> 24) == (0);
        if (!($4)) {
            $5 = ((($0)) + 241932 | 0);
            $6 = HEAP32[$5 >> 2] | 0;
            $7 = ((($6)) + 12 | 0);
            $8 = HEAP8[$7 >> 0] | 0;
            $9 = ($8 << 24 >> 24) != (0);
            $10 = ((($0)) + 512300 | 0);
            $11 = ((($0)) + 512296 | 0);
            $$sink$i = $9 ? $11 : $10;
            $12 = HEAP32[$$sink$i >> 2] | 0;
            $13 = (($12) + 1) | 0;
            HEAP32[$$sink$i >> 2] = $13;
            return;
        }
        if (!($1)) {
            return;
        }
        $14 = ((($0)) + 241932 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ((($0)) + 5464 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ((($0)) + 512304 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ($19 | 0) == (-1);
        if ($20) {
            HEAP32[$18 >> 2] = 0;
            $47 = 0;
        } else {
            $47 = $19;
        }
        $21 = ((($15)) + 4044 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = ((($15)) + 4048 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = Math_imul($24, $22) | 0;
        $26 = ($25 | 0) > (0);
        if ($26) {
            $27 = ((($15)) + 3948 | 0);
            $28 = HEAP32[$27 >> 2] | 0;
            $29 = ((($15)) + 3980 | 0);
            $30 = HEAP32[$29 >> 2] | 0;
            $$04243$i = 0; $$044$i = 0;
            while (1) {
                $36 = (($28) + ($$044$i) | 0);
                $37 = HEAP8[$36 >> 0] | 0;
                $38 = $37 << 24 >> 24;
                $39 = (($30) + ($$044$i) | 0);
                $40 = HEAP8[$39 >> 0] | 0;
                $41 = $40 & 255;
                $42 = (0 - ($41)) | 0;
                $43 = $42 & $38;
                $44 = (($43) + ($$04243$i)) | 0;
                $45 = (($$044$i) + 1) | 0;
                $exitcond$i = ($45 | 0) == ($25 | 0);
                if ($exitcond$i) {
                    $$042$lcssa$i = $44;
                    break;
                } else {
                    $$04243$i = $44; $$044$i = $45;
                }
            }
        } else {
            $$042$lcssa$i = 0;
        }
        $31 = (($$042$lcssa$i | 0) / ($25 | 0)) & -1;
        $32 = ((($0)) + 512264 | 0);
        $33 = HEAP32[$32 >> 2] | 0;
        $34 = (($33) + 1) | 0;
        $35 = ($34 | 0) == (0);
        if ($35) {
            $46 = ((($0)) + 512256 | 0);
            dest = $46; stop = dest + 76 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
            HEAP32[$18 >> 2] = $47;
            $$sink$i4 = $31;
        } else {
            $48 = Math_imul($33, $47) | 0;
            $49 = (($48) + ($31)) | 0;
            $div$i = (($49 >>> 0) / ($34 >>> 0)) & -1;
            $$sink$i4 = $div$i;
        }
        HEAP32[$18 >> 2] = $$sink$i4;
        $50 = ((($15)) + 12 | 0);
        $51 = HEAP8[$50 >> 0] | 0;
        $52 = ($51 << 24 >> 24) == (0);
        if ($52) {
            return;
        }
        $53 = ((($17)) + 72 | 0);
        $54 = HEAP8[$53 >> 0] | 0;
        $55 = $54 & 255;
        $56 = ((($0)) + 512272 | 0);
        $57 = HEAP32[$56 >> 2] | 0;
        $58 = (($57) + ($55)) | 0;
        HEAP32[$56 >> 2] = $58;
        $59 = HEAP8[$53 >> 0] | 0;
        $60 = $59 ^ 1;
        $61 = $60 & 255;
        $62 = ((($0)) + 512284 | 0);
        $63 = HEAP32[$62 >> 2] | 0;
        $64 = (($63) + ($61)) | 0;
        HEAP32[$62 >> 2] = $64;
        return;
    }
    function __ZN7WelsDec19DoErrorConSliceCopyEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$ = 0, $$0118128 = 0, $$0118128$us = 0, $$0119130 = 0, $$0120 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
        var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
        var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
        var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
        var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
        var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $98 = 0, $99 = 0, $exitcond = 0, $exitcond137 = 0, $exitcond138 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 241924 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($2)) + 8 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($0)) + 5464 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($0)) + 316852 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($0)) + 242340 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ($12 | 0) == (2);
        $14 = ((($0)) + 241932 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        if ($13) {
            $16 = ((($15)) + 12 | 0);
            $17 = HEAP8[$16 >> 0] | 0;
            $18 = ($17 << 24 >> 24) == (0);
            $$ = $18 ? $10 : 0;
            $$0120 = $$;
        } else {
            $$0120 = $10;
        }
        $19 = ((($15)) + 3980 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = ((($8)) + 32 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = ($6 | 0) > (0);
        if (!($23)) {
            return;
        }
        $24 = ($4 | 0) > (0);
        $25 = ($$0120 | 0) == (0 | 0);
        $26 = ((($8)) + 16 | 0);
        $27 = $22 << 4;
        $28 = ((($8)) + 20 | 0);
        $29 = $22 << 3;
        $30 = $22 >>> 1;
        $31 = ((($8)) + 24 | 0);
        $32 = ((($$0120)) + 32 | 0);
        $33 = ((($$0120)) + 16 | 0);
        $34 = ((($0)) + 317056 | 0);
        $35 = ((($$0120)) + 20 | 0);
        $36 = ((($0)) + 317060 | 0);
        $37 = ((($$0120)) + 24 | 0);
        $$0119130 = 0;
        while (1) {
            if ($24) {
                $38 = Math_imul($$0119130, $4) | 0;
                $39 = Math_imul($27, $$0119130) | 0;
                $40 = Math_imul($29, $$0119130) | 0;
                $41 = $40 >>> 1;
                $42 = $$0119130 << 4;
                $43 = Math_imul($42, $22) | 0;
                $44 = $$0119130 << 3;
                $45 = Math_imul($44, $22) | 0;
                $46 = $45 >>> 1;
                if ($25) {
                    $$0118128$us = 0;
                    while (1) {
                        $47 = (($$0118128$us) + ($38)) | 0;
                        $48 = (($20) + ($47) | 0);
                        $49 = HEAP8[$48 >> 0] | 0;
                        $50 = ($49 << 24 >> 24) == (0);
                        if ($50) {
                            $51 = HEAP32[$7 >> 2] | 0;
                            $52 = ((($51)) + 108 | 0);
                            $53 = HEAP32[$52 >> 2] | 0;
                            $54 = (($53) + 1) | 0;
                            HEAP32[$52 >> 2] = $54;
                            $55 = HEAP32[$26 >> 2] | 0;
                            $56 = (($55) + ($39) | 0);
                            $57 = $$0118128$us << 4;
                            $58 = (($56) + ($57) | 0);
                            dest = $58; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $59 = (($58) + ($22) | 0);
                            dest = $59; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $60 = (($59) + ($22) | 0);
                            dest = $60; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $61 = (($60) + ($22) | 0);
                            dest = $61; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $62 = (($61) + ($22) | 0);
                            dest = $62; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $63 = (($62) + ($22) | 0);
                            dest = $63; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $64 = (($63) + ($22) | 0);
                            dest = $64; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $65 = (($64) + ($22) | 0);
                            dest = $65; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $66 = (($65) + ($22) | 0);
                            dest = $66; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $67 = (($66) + ($22) | 0);
                            dest = $67; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $68 = (($67) + ($22) | 0);
                            dest = $68; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $69 = (($68) + ($22) | 0);
                            dest = $69; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $70 = (($69) + ($22) | 0);
                            dest = $70; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $71 = (($70) + ($22) | 0);
                            dest = $71; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $72 = (($71) + ($22) | 0);
                            dest = $72; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $73 = (($72) + ($22) | 0);
                            dest = $73; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                            $74 = HEAP32[$28 >> 2] | 0;
                            $75 = (($74) + ($41) | 0);
                            $76 = $$0118128$us << 3;
                            $77 = (($75) + ($76) | 0);
                            $78 = $77;
                            $79 = $78;
                            HEAP8[$79 >> 0] = -2139062144 & 255; HEAP8[$79 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$79 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$79 + 3 >> 0] = -2139062144 >> 24;
                            $80 = (($78) + 4) | 0;
                            $81 = $80;
                            HEAP8[$81 >> 0] = -2139062144 & 255; HEAP8[$81 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$81 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$81 + 3 >> 0] = -2139062144 >> 24;
                            $82 = (($77) + ($30) | 0);
                            $83 = $82;
                            $84 = $83;
                            HEAP8[$84 >> 0] = -2139062144 & 255; HEAP8[$84 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$84 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$84 + 3 >> 0] = -2139062144 >> 24;
                            $85 = (($83) + 4) | 0;
                            $86 = $85;
                            HEAP8[$86 >> 0] = -2139062144 & 255; HEAP8[$86 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$86 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$86 + 3 >> 0] = -2139062144 >> 24;
                            $87 = (($82) + ($30) | 0);
                            $88 = $87;
                            $89 = $88;
                            HEAP8[$89 >> 0] = -2139062144 & 255; HEAP8[$89 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$89 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$89 + 3 >> 0] = -2139062144 >> 24;
                            $90 = (($88) + 4) | 0;
                            $91 = $90;
                            HEAP8[$91 >> 0] = -2139062144 & 255; HEAP8[$91 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$91 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$91 + 3 >> 0] = -2139062144 >> 24;
                            $92 = (($87) + ($30) | 0);
                            $93 = $92;
                            $94 = $93;
                            HEAP8[$94 >> 0] = -2139062144 & 255; HEAP8[$94 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$94 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$94 + 3 >> 0] = -2139062144 >> 24;
                            $95 = (($93) + 4) | 0;
                            $96 = $95;
                            HEAP8[$96 >> 0] = -2139062144 & 255; HEAP8[$96 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$96 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$96 + 3 >> 0] = -2139062144 >> 24;
                            $97 = (($92) + ($30) | 0);
                            $98 = $97;
                            $99 = $98;
                            HEAP8[$99 >> 0] = -2139062144 & 255; HEAP8[$99 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$99 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$99 + 3 >> 0] = -2139062144 >> 24;
                            $100 = (($98) + 4) | 0;
                            $101 = $100;
                            HEAP8[$101 >> 0] = -2139062144 & 255; HEAP8[$101 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$101 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$101 + 3 >> 0] = -2139062144 >> 24;
                            $102 = (($97) + ($30) | 0);
                            $103 = $102;
                            $104 = $103;
                            HEAP8[$104 >> 0] = -2139062144 & 255; HEAP8[$104 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$104 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$104 + 3 >> 0] = -2139062144 >> 24;
                            $105 = (($103) + 4) | 0;
                            $106 = $105;
                            HEAP8[$106 >> 0] = -2139062144 & 255; HEAP8[$106 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$106 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$106 + 3 >> 0] = -2139062144 >> 24;
                            $107 = (($102) + ($30) | 0);
                            $108 = $107;
                            $109 = $108;
                            HEAP8[$109 >> 0] = -2139062144 & 255; HEAP8[$109 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$109 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$109 + 3 >> 0] = -2139062144 >> 24;
                            $110 = (($108) + 4) | 0;
                            $111 = $110;
                            HEAP8[$111 >> 0] = -2139062144 & 255; HEAP8[$111 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$111 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$111 + 3 >> 0] = -2139062144 >> 24;
                            $112 = (($107) + ($30) | 0);
                            $113 = $112;
                            $114 = $113;
                            HEAP8[$114 >> 0] = -2139062144 & 255; HEAP8[$114 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$114 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$114 + 3 >> 0] = -2139062144 >> 24;
                            $115 = (($113) + 4) | 0;
                            $116 = $115;
                            HEAP8[$116 >> 0] = -2139062144 & 255; HEAP8[$116 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$116 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$116 + 3 >> 0] = -2139062144 >> 24;
                            $117 = HEAP32[$31 >> 2] | 0;
                            $118 = (($117) + ($41) | 0);
                            $119 = (($118) + ($76) | 0);
                            $120 = $119;
                            $121 = $120;
                            HEAP8[$121 >> 0] = -2139062144 & 255; HEAP8[$121 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$121 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$121 + 3 >> 0] = -2139062144 >> 24;
                            $122 = (($120) + 4) | 0;
                            $123 = $122;
                            HEAP8[$123 >> 0] = -2139062144 & 255; HEAP8[$123 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$123 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$123 + 3 >> 0] = -2139062144 >> 24;
                            $124 = (($119) + ($30) | 0);
                            $125 = $124;
                            $126 = $125;
                            HEAP8[$126 >> 0] = -2139062144 & 255; HEAP8[$126 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$126 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$126 + 3 >> 0] = -2139062144 >> 24;
                            $127 = (($125) + 4) | 0;
                            $128 = $127;
                            HEAP8[$128 >> 0] = -2139062144 & 255; HEAP8[$128 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$128 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$128 + 3 >> 0] = -2139062144 >> 24;
                            $129 = (($124) + ($30) | 0);
                            $130 = $129;
                            $131 = $130;
                            HEAP8[$131 >> 0] = -2139062144 & 255; HEAP8[$131 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$131 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$131 + 3 >> 0] = -2139062144 >> 24;
                            $132 = (($130) + 4) | 0;
                            $133 = $132;
                            HEAP8[$133 >> 0] = -2139062144 & 255; HEAP8[$133 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$133 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$133 + 3 >> 0] = -2139062144 >> 24;
                            $134 = (($129) + ($30) | 0);
                            $135 = $134;
                            $136 = $135;
                            HEAP8[$136 >> 0] = -2139062144 & 255; HEAP8[$136 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$136 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$136 + 3 >> 0] = -2139062144 >> 24;
                            $137 = (($135) + 4) | 0;
                            $138 = $137;
                            HEAP8[$138 >> 0] = -2139062144 & 255; HEAP8[$138 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$138 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$138 + 3 >> 0] = -2139062144 >> 24;
                            $139 = (($134) + ($30) | 0);
                            $140 = $139;
                            $141 = $140;
                            HEAP8[$141 >> 0] = -2139062144 & 255; HEAP8[$141 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$141 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$141 + 3 >> 0] = -2139062144 >> 24;
                            $142 = (($140) + 4) | 0;
                            $143 = $142;
                            HEAP8[$143 >> 0] = -2139062144 & 255; HEAP8[$143 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$143 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$143 + 3 >> 0] = -2139062144 >> 24;
                            $144 = (($139) + ($30) | 0);
                            $145 = $144;
                            $146 = $145;
                            HEAP8[$146 >> 0] = -2139062144 & 255; HEAP8[$146 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$146 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$146 + 3 >> 0] = -2139062144 >> 24;
                            $147 = (($145) + 4) | 0;
                            $148 = $147;
                            HEAP8[$148 >> 0] = -2139062144 & 255; HEAP8[$148 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$148 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$148 + 3 >> 0] = -2139062144 >> 24;
                            $149 = (($144) + ($30) | 0);
                            $150 = $149;
                            $151 = $150;
                            HEAP8[$151 >> 0] = -2139062144 & 255; HEAP8[$151 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$151 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$151 + 3 >> 0] = -2139062144 >> 24;
                            $152 = (($150) + 4) | 0;
                            $153 = $152;
                            HEAP8[$153 >> 0] = -2139062144 & 255; HEAP8[$153 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$153 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$153 + 3 >> 0] = -2139062144 >> 24;
                            $154 = (($149) + ($30) | 0);
                            $155 = $154;
                            $156 = $155;
                            HEAP8[$156 >> 0] = -2139062144 & 255; HEAP8[$156 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$156 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$156 + 3 >> 0] = -2139062144 >> 24;
                            $157 = (($155) + 4) | 0;
                            $158 = $157;
                            HEAP8[$158 >> 0] = -2139062144 & 255; HEAP8[$158 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$158 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$158 + 3 >> 0] = -2139062144 >> 24;
                        }
                        $159 = (($$0118128$us) + 1) | 0;
                        $exitcond137 = ($159 | 0) == ($4 | 0);
                        if ($exitcond137) {
                            break;
                        } else {
                            $$0118128$us = $159;
                        }
                    }
                } else {
                    $$0118128 = 0;
                    while (1) {
                        $161 = (($$0118128) + ($38)) | 0;
                        $162 = (($20) + ($161) | 0);
                        $163 = HEAP8[$162 >> 0] | 0;
                        $164 = ($163 << 24 >> 24) == (0);
                        if ($164) {
                            $165 = HEAP32[$7 >> 2] | 0;
                            $166 = ((($165)) + 108 | 0);
                            $167 = HEAP32[$166 >> 2] | 0;
                            $168 = (($167) + 1) | 0;
                            HEAP32[$166 >> 2] = $168;
                            $169 = HEAP32[$32 >> 2] | 0;
                            $170 = HEAP32[$26 >> 2] | 0;
                            $171 = (($170) + ($43) | 0);
                            $172 = $$0118128 << 4;
                            $173 = (($171) + ($172) | 0);
                            $174 = HEAP32[$33 >> 2] | 0;
                            $175 = Math_imul($169, $42) | 0;
                            $176 = (($174) + ($175) | 0);
                            $177 = (($176) + ($172) | 0);
                            $178 = HEAP32[$34 >> 2] | 0;
                            FUNCTION_TABLE_viiii[$178 & 31]($173, $22, $177, $169);
                            $179 = HEAP32[$28 >> 2] | 0;
                            $180 = (($179) + ($46) | 0);
                            $181 = $$0118128 << 3;
                            $182 = (($180) + ($181) | 0);
                            $183 = HEAP32[$35 >> 2] | 0;
                            $184 = Math_imul($169, $44) | 0;
                            $185 = $184 >>> 1;
                            $186 = (($183) + ($185) | 0);
                            $187 = (($186) + ($181) | 0);
                            $188 = HEAP32[$36 >> 2] | 0;
                            $189 = $169 >>> 1;
                            FUNCTION_TABLE_viiii[$188 & 31]($182, $30, $187, $189);
                            $190 = HEAP32[$31 >> 2] | 0;
                            $191 = (($190) + ($46) | 0);
                            $192 = (($191) + ($181) | 0);
                            $193 = HEAP32[$37 >> 2] | 0;
                            $194 = (($193) + ($185) | 0);
                            $195 = (($194) + ($181) | 0);
                            $196 = HEAP32[$36 >> 2] | 0;
                            FUNCTION_TABLE_viiii[$196 & 31]($192, $30, $195, $189);
                        }
                        $197 = (($$0118128) + 1) | 0;
                        $exitcond = ($197 | 0) == ($4 | 0);
                        if ($exitcond) {
                            break;
                        } else {
                            $$0118128 = $197;
                        }
                    }
                }
            }
            $160 = (($$0119130) + 1) | 0;
            $exitcond138 = ($160 | 0) == ($6 | 0);
            if ($exitcond138) {
                break;
            } else {
                $$0119130 = $160;
            }
        }
        return;
    }
    function __ZN7WelsDec24GetAvilInfoFromCorrectMbEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0225239 = 0, $$0227237 = 0, $$0228238 = 0, $$0235 = 0, $$pre = 0, $$sink = 0, $$sink231 = 0, $$sink245 = 0, $$sink246 = 0, $$sink3 = 0, $$sink3$ph = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
        var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
        var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
        var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
        var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
        var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
        var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
        var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
        var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
        var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
        var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
        var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
        var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
        var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
        var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
        var $99 = 0, $exitcond = 0, $exitcond242 = 0, $exitcond243 = 0, $exitcond244 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 64 | 0;
        $1 = sp;
        $2 = ((($0)) + 241924 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($3)) + 4 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($3)) + 8 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($0)) + 241932 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($9)) + 3980 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($0)) + 512348 | 0);
        _memset(($12 | 0), 0, 192) | 0;
        dest = $1; stop = dest + 64 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $13 = ($7 | 0) > (0);
        if ($13) {
            $14 = ($5 | 0) > (0);
            $15 = ((($9)) + 3908 | 0);
            $16 = ((($9)) + 3932 | 0);
            $17 = ((($9)) + 3916 | 0);
            $18 = ((($9)) + 4008 | 0);
            $$0225239 = 0;
            while (1) {
                if ($14) {
                    $19 = Math_imul($$0225239, $5) | 0;
                    $$0228238 = 0;
                    while (1) {
                        $21 = (($$0228238) + ($19)) | 0;
                        $22 = (($11) + ($21) | 0);
                        $23 = HEAP8[$22 >> 0] | 0;
                        $24 = ($23 << 24 >> 24) == (0);
                        L9: do {
                            if (!($24)) {
                                $25 = HEAP32[$15 >> 2] | 0;
                                $26 = (($25) + ($21 << 1) | 0);
                                $27 = HEAP16[$26 >> 1] | 0;
                                $28 = $27 << 16 >> 16;
                                $29 = $28 & 504;
                                $30 = ($29 | 0) == (0);
                                if (!($30)) {
                                    switch ($28 | 0) {
                                        case 8: case 256: {
                                            $31 = HEAP32[$16 >> 2] | 0;
                                            $32 = (($31) + ($21 << 4) | 0);
                                            $33 = HEAP8[$32 >> 0] | 0;
                                            $34 = HEAP32[$17 >> 2] | 0;
                                            $35 = (($34) + ($21 << 6) | 0);
                                            $36 = HEAP16[$35 >> 1] | 0;
                                            $37 = $36 << 16 >> 16;
                                            $38 = $33 << 24 >> 24;
                                            $39 = (((($0)) + 512348 | 0) + ($38 << 3) | 0);
                                            $40 = HEAP32[$39 >> 2] | 0;
                                            $41 = (($40) + ($37)) | 0;
                                            HEAP32[$39 >> 2] = $41;
                                            $42 = HEAP32[$17 >> 2] | 0;
                                            $43 = (((($42) + ($21 << 6) | 0)) + 2 | 0);
                                            $44 = HEAP16[$43 >> 1] | 0;
                                            $45 = $44 << 16 >> 16;
                                            $46 = (((((($0)) + 512348 | 0) + ($38 << 3) | 0)) + 4 | 0);
                                            $47 = HEAP32[$46 >> 2] | 0;
                                            $48 = (($47) + ($45)) | 0;
                                            HEAP32[$46 >> 2] = $48;
                                            $49 = (((($0)) + 5468 | 0) + ($38 << 2) | 0);
                                            $50 = HEAP32[$49 >> 2] | 0;
                                            $51 = (((($0)) + 512476 | 0) + ($38 << 2) | 0);
                                            HEAP32[$51 >> 2] = $50;
                                            $52 = (($1) + ($38 << 2) | 0);
                                            $53 = HEAP32[$52 >> 2] | 0;
                                            $54 = (($53) + 1) | 0;
                                            HEAP32[$52 >> 2] = $54;
                                            break L9;
                                            break;
                                        }
                                        case 16: {
                                            $55 = HEAP32[$16 >> 2] | 0;
                                            $56 = (($55) + ($21 << 4) | 0);
                                            $57 = HEAP8[$56 >> 0] | 0;
                                            $58 = HEAP32[$17 >> 2] | 0;
                                            $59 = (($58) + ($21 << 6) | 0);
                                            $60 = HEAP16[$59 >> 1] | 0;
                                            $61 = $60 << 16 >> 16;
                                            $62 = $57 << 24 >> 24;
                                            $63 = (((($0)) + 512348 | 0) + ($62 << 3) | 0);
                                            $64 = HEAP32[$63 >> 2] | 0;
                                            $65 = (($64) + ($61)) | 0;
                                            HEAP32[$63 >> 2] = $65;
                                            $66 = HEAP32[$17 >> 2] | 0;
                                            $67 = (((($66) + ($21 << 6) | 0)) + 2 | 0);
                                            $68 = HEAP16[$67 >> 1] | 0;
                                            $69 = $68 << 16 >> 16;
                                            $70 = (((((($0)) + 512348 | 0) + ($62 << 3) | 0)) + 4 | 0);
                                            $71 = HEAP32[$70 >> 2] | 0;
                                            $72 = (($71) + ($69)) | 0;
                                            HEAP32[$70 >> 2] = $72;
                                            $73 = (((($0)) + 5468 | 0) + ($62 << 2) | 0);
                                            $74 = HEAP32[$73 >> 2] | 0;
                                            $75 = (((($0)) + 512476 | 0) + ($62 << 2) | 0);
                                            HEAP32[$75 >> 2] = $74;
                                            $76 = (($1) + ($62 << 2) | 0);
                                            $77 = HEAP32[$76 >> 2] | 0;
                                            $78 = (($77) + 1) | 0;
                                            HEAP32[$76 >> 2] = $78;
                                            $79 = HEAP32[$16 >> 2] | 0;
                                            $80 = (((($79) + ($21 << 4) | 0)) + 8 | 0);
                                            $81 = HEAP8[$80 >> 0] | 0;
                                            $82 = HEAP32[$17 >> 2] | 0;
                                            $83 = (((($82) + ($21 << 6) | 0)) + 32 | 0);
                                            $84 = HEAP16[$83 >> 1] | 0;
                                            $85 = $84 << 16 >> 16;
                                            $86 = $81 << 24 >> 24;
                                            $87 = (((($0)) + 512348 | 0) + ($86 << 3) | 0);
                                            $88 = HEAP32[$87 >> 2] | 0;
                                            $89 = (($88) + ($85)) | 0;
                                            HEAP32[$87 >> 2] = $89;
                                            $90 = HEAP32[$17 >> 2] | 0;
                                            $91 = (((($90) + ($21 << 6) | 0)) + 34 | 0);
                                            $92 = HEAP16[$91 >> 1] | 0;
                                            $93 = $92 << 16 >> 16;
                                            $94 = (((((($0)) + 512348 | 0) + ($86 << 3) | 0)) + 4 | 0);
                                            $95 = HEAP32[$94 >> 2] | 0;
                                            $96 = (($95) + ($93)) | 0;
                                            HEAP32[$94 >> 2] = $96;
                                            $97 = (((($0)) + 5468 | 0) + ($86 << 2) | 0);
                                            $98 = HEAP32[$97 >> 2] | 0;
                                            $99 = (((($0)) + 512476 | 0) + ($86 << 2) | 0);
                                            HEAP32[$99 >> 2] = $98;
                                            $100 = (($1) + ($86 << 2) | 0);
                                            $101 = HEAP32[$100 >> 2] | 0;
                                            $102 = (($101) + 1) | 0;
                                            HEAP32[$100 >> 2] = $102;
                                            break L9;
                                            break;
                                        }
                                        case 32: {
                                            $103 = HEAP32[$16 >> 2] | 0;
                                            $104 = (($103) + ($21 << 4) | 0);
                                            $105 = HEAP8[$104 >> 0] | 0;
                                            $106 = HEAP32[$17 >> 2] | 0;
                                            $107 = (($106) + ($21 << 6) | 0);
                                            $108 = HEAP16[$107 >> 1] | 0;
                                            $109 = $108 << 16 >> 16;
                                            $110 = $105 << 24 >> 24;
                                            $111 = (((($0)) + 512348 | 0) + ($110 << 3) | 0);
                                            $112 = HEAP32[$111 >> 2] | 0;
                                            $113 = (($112) + ($109)) | 0;
                                            HEAP32[$111 >> 2] = $113;
                                            $114 = HEAP32[$17 >> 2] | 0;
                                            $115 = (((($114) + ($21 << 6) | 0)) + 2 | 0);
                                            $116 = HEAP16[$115 >> 1] | 0;
                                            $117 = $116 << 16 >> 16;
                                            $118 = (((((($0)) + 512348 | 0) + ($110 << 3) | 0)) + 4 | 0);
                                            $119 = HEAP32[$118 >> 2] | 0;
                                            $120 = (($119) + ($117)) | 0;
                                            HEAP32[$118 >> 2] = $120;
                                            $121 = (((($0)) + 5468 | 0) + ($110 << 2) | 0);
                                            $122 = HEAP32[$121 >> 2] | 0;
                                            $123 = (((($0)) + 512476 | 0) + ($110 << 2) | 0);
                                            HEAP32[$123 >> 2] = $122;
                                            $124 = (($1) + ($110 << 2) | 0);
                                            $125 = HEAP32[$124 >> 2] | 0;
                                            $126 = (($125) + 1) | 0;
                                            HEAP32[$124 >> 2] = $126;
                                            $127 = HEAP32[$16 >> 2] | 0;
                                            $128 = (((($127) + ($21 << 4) | 0)) + 2 | 0);
                                            $129 = HEAP8[$128 >> 0] | 0;
                                            $130 = HEAP32[$17 >> 2] | 0;
                                            $131 = (((($130) + ($21 << 6) | 0)) + 8 | 0);
                                            $132 = HEAP16[$131 >> 1] | 0;
                                            $133 = $132 << 16 >> 16;
                                            $134 = $129 << 24 >> 24;
                                            $135 = (((($0)) + 512348 | 0) + ($134 << 3) | 0);
                                            $136 = HEAP32[$135 >> 2] | 0;
                                            $137 = (($136) + ($133)) | 0;
                                            HEAP32[$135 >> 2] = $137;
                                            $138 = HEAP32[$17 >> 2] | 0;
                                            $139 = (((($138) + ($21 << 6) | 0)) + 10 | 0);
                                            $140 = HEAP16[$139 >> 1] | 0;
                                            $141 = $140 << 16 >> 16;
                                            $142 = (((((($0)) + 512348 | 0) + ($134 << 3) | 0)) + 4 | 0);
                                            $143 = HEAP32[$142 >> 2] | 0;
                                            $144 = (($143) + ($141)) | 0;
                                            HEAP32[$142 >> 2] = $144;
                                            $145 = (((($0)) + 5468 | 0) + ($134 << 2) | 0);
                                            $146 = HEAP32[$145 >> 2] | 0;
                                            $147 = (((($0)) + 512476 | 0) + ($134 << 2) | 0);
                                            HEAP32[$147 >> 2] = $146;
                                            $148 = (($1) + ($134 << 2) | 0);
                                            $149 = HEAP32[$148 >> 2] | 0;
                                            $150 = (($149) + 1) | 0;
                                            HEAP32[$148 >> 2] = $150;
                                            break L9;
                                            break;
                                        }
                                        case 128: case 64: {
                                            $$0227237 = 0;
                                            while (1) {
                                                $151 = HEAP32[$18 >> 2] | 0;
                                                $152 = ((($151) + ($21 << 2) | 0) + ($$0227237) | 0);
                                                $153 = HEAP8[$152 >> 0] | 0;
                                                $154 = $153 << 24 >> 24;
                                                $155 = $$0227237 >>> 1;
                                                $156 = $155 << 3;
                                                $157 = $$0227237 << 1;
                                                $158 = $157 & 2;
                                                $159 = $156 | $158;
                                                $160 = HEAP32[$16 >> 2] | 0;
                                                $161 = ((($160) + ($21 << 4) | 0) + ($159) | 0);
                                                $162 = HEAP8[$161 >> 0] | 0;
                                                $163 = $162 << 24 >> 24;
                                                $164 = (((($0)) + 5468 | 0) + ($163 << 2) | 0);
                                                $165 = HEAP32[$164 >> 2] | 0;
                                                $166 = (((($0)) + 512476 | 0) + ($163 << 2) | 0);
                                                HEAP32[$166 >> 2] = $165;
                                                switch ($154 | 0) {
                                                    case 1: {
                                                        $214 = HEAP32[$17 >> 2] | 0;
                                                        $215 = ((($214) + ($21 << 6) | 0) + ($159 << 2) | 0);
                                                        $216 = HEAP16[$215 >> 1] | 0;
                                                        $217 = $216 << 16 >> 16;
                                                        $218 = (((($0)) + 512348 | 0) + ($163 << 3) | 0);
                                                        $219 = HEAP32[$218 >> 2] | 0;
                                                        $220 = (($219) + ($217)) | 0;
                                                        HEAP32[$218 >> 2] = $220;
                                                        $221 = HEAP32[$17 >> 2] | 0;
                                                        $222 = ((((($221) + ($21 << 6) | 0) + ($159 << 2) | 0)) + 2 | 0);
                                                        $223 = HEAP16[$222 >> 1] | 0;
                                                        $224 = $223 << 16 >> 16;
                                                        $225 = (((((($0)) + 512348 | 0) + ($163 << 3) | 0)) + 4 | 0);
                                                        $$pre = HEAP32[$225 >> 2] | 0;
                                                        $$sink = $225; $$sink231 = $224; $$sink3$ph = 1; $275 = $$pre;
                                                        label = 17;
                                                        break;
                                                    }
                                                    case 2: {
                                                        $226 = HEAP32[$17 >> 2] | 0;
                                                        $227 = ((($226) + ($21 << 6) | 0) + ($159 << 2) | 0);
                                                        $228 = HEAP16[$227 >> 1] | 0;
                                                        $229 = $228 << 16 >> 16;
                                                        $230 = (((($0)) + 512348 | 0) + ($163 << 3) | 0);
                                                        $231 = HEAP32[$230 >> 2] | 0;
                                                        $232 = (($231) + ($229)) | 0;
                                                        HEAP32[$230 >> 2] = $232;
                                                        $233 = HEAP32[$17 >> 2] | 0;
                                                        $234 = ((((($233) + ($21 << 6) | 0) + ($159 << 2) | 0)) + 2 | 0);
                                                        $235 = HEAP16[$234 >> 1] | 0;
                                                        $236 = $235 << 16 >> 16;
                                                        $237 = (((((($0)) + 512348 | 0) + ($163 << 3) | 0)) + 4 | 0);
                                                        $238 = HEAP32[$237 >> 2] | 0;
                                                        $239 = (($238) + ($236)) | 0;
                                                        HEAP32[$237 >> 2] = $239;
                                                        $240 = HEAP32[$17 >> 2] | 0;
                                                        $241 = $159 | 4;
                                                        $242 = ((($240) + ($21 << 6) | 0) + ($241 << 2) | 0);
                                                        $243 = HEAP16[$242 >> 1] | 0;
                                                        $244 = $243 << 16 >> 16;
                                                        $245 = (($232) + ($244)) | 0;
                                                        HEAP32[$230 >> 2] = $245;
                                                        $246 = HEAP32[$17 >> 2] | 0;
                                                        $247 = ((((($246) + ($21 << 6) | 0) + ($241 << 2) | 0)) + 2 | 0);
                                                        $248 = HEAP16[$247 >> 1] | 0;
                                                        $249 = $248 << 16 >> 16;
                                                        $$sink = $237; $$sink231 = $249; $$sink3$ph = 2; $275 = $239;
                                                        label = 17;
                                                        break;
                                                    }
                                                    case 4: {
                                                        $250 = HEAP32[$17 >> 2] | 0;
                                                        $251 = ((($250) + ($21 << 6) | 0) + ($159 << 2) | 0);
                                                        $252 = HEAP16[$251 >> 1] | 0;
                                                        $253 = $252 << 16 >> 16;
                                                        $254 = (((($0)) + 512348 | 0) + ($163 << 3) | 0);
                                                        $255 = HEAP32[$254 >> 2] | 0;
                                                        $256 = (($255) + ($253)) | 0;
                                                        HEAP32[$254 >> 2] = $256;
                                                        $257 = HEAP32[$17 >> 2] | 0;
                                                        $258 = ((((($257) + ($21 << 6) | 0) + ($159 << 2) | 0)) + 2 | 0);
                                                        $259 = HEAP16[$258 >> 1] | 0;
                                                        $260 = $259 << 16 >> 16;
                                                        $261 = (((((($0)) + 512348 | 0) + ($163 << 3) | 0)) + 4 | 0);
                                                        $262 = HEAP32[$261 >> 2] | 0;
                                                        $263 = (($262) + ($260)) | 0;
                                                        HEAP32[$261 >> 2] = $263;
                                                        $264 = HEAP32[$17 >> 2] | 0;
                                                        $265 = $159 | 1;
                                                        $266 = ((($264) + ($21 << 6) | 0) + ($265 << 2) | 0);
                                                        $267 = HEAP16[$266 >> 1] | 0;
                                                        $268 = $267 << 16 >> 16;
                                                        $269 = (($256) + ($268)) | 0;
                                                        HEAP32[$254 >> 2] = $269;
                                                        $270 = HEAP32[$17 >> 2] | 0;
                                                        $271 = ((((($270) + ($21 << 6) | 0) + ($265 << 2) | 0)) + 2 | 0);
                                                        $272 = HEAP16[$271 >> 1] | 0;
                                                        $273 = $272 << 16 >> 16;
                                                        $$sink = $261; $$sink231 = $273; $$sink3$ph = 2; $275 = $263;
                                                        label = 17;
                                                        break;
                                                    }
                                                    case 8: {
                                                        $167 = (((($0)) + 512348 | 0) + ($163 << 3) | 0);
                                                        $168 = (((((($0)) + 512348 | 0) + ($163 << 3) | 0)) + 4 | 0);
                                                        $169 = HEAP32[$17 >> 2] | 0;
                                                        $170 = ((($169) + ($21 << 6) | 0) + ($159 << 2) | 0);
                                                        $171 = HEAP16[$170 >> 1] | 0;
                                                        $172 = $171 << 16 >> 16;
                                                        $173 = HEAP32[$167 >> 2] | 0;
                                                        $174 = (($173) + ($172)) | 0;
                                                        HEAP32[$167 >> 2] = $174;
                                                        $175 = HEAP32[$17 >> 2] | 0;
                                                        $176 = ((((($175) + ($21 << 6) | 0) + ($159 << 2) | 0)) + 2 | 0);
                                                        $177 = HEAP16[$176 >> 1] | 0;
                                                        $178 = $177 << 16 >> 16;
                                                        $179 = HEAP32[$168 >> 2] | 0;
                                                        $180 = (($179) + ($178)) | 0;
                                                        HEAP32[$168 >> 2] = $180;
                                                        $181 = HEAP32[$17 >> 2] | 0;
                                                        $182 = $159 | 1;
                                                        $183 = ((($181) + ($21 << 6) | 0) + ($182 << 2) | 0);
                                                        $184 = HEAP16[$183 >> 1] | 0;
                                                        $185 = $184 << 16 >> 16;
                                                        $186 = (($174) + ($185)) | 0;
                                                        HEAP32[$167 >> 2] = $186;
                                                        $187 = HEAP32[$17 >> 2] | 0;
                                                        $188 = ((((($187) + ($21 << 6) | 0) + ($182 << 2) | 0)) + 2 | 0);
                                                        $189 = HEAP16[$188 >> 1] | 0;
                                                        $190 = $189 << 16 >> 16;
                                                        $191 = (($180) + ($190)) | 0;
                                                        HEAP32[$168 >> 2] = $191;
                                                        $192 = HEAP32[$17 >> 2] | 0;
                                                        $193 = $159 | 4;
                                                        $194 = ((($192) + ($21 << 6) | 0) + ($193 << 2) | 0);
                                                        $195 = HEAP16[$194 >> 1] | 0;
                                                        $196 = $195 << 16 >> 16;
                                                        $197 = (($186) + ($196)) | 0;
                                                        HEAP32[$167 >> 2] = $197;
                                                        $198 = HEAP32[$17 >> 2] | 0;
                                                        $199 = ((((($198) + ($21 << 6) | 0) + ($193 << 2) | 0)) + 2 | 0);
                                                        $200 = HEAP16[$199 >> 1] | 0;
                                                        $201 = $200 << 16 >> 16;
                                                        $202 = (($191) + ($201)) | 0;
                                                        HEAP32[$168 >> 2] = $202;
                                                        $203 = HEAP32[$17 >> 2] | 0;
                                                        $204 = $159 | 5;
                                                        $205 = ((($203) + ($21 << 6) | 0) + ($204 << 2) | 0);
                                                        $206 = HEAP16[$205 >> 1] | 0;
                                                        $207 = $206 << 16 >> 16;
                                                        $208 = (($197) + ($207)) | 0;
                                                        HEAP32[$167 >> 2] = $208;
                                                        $209 = HEAP32[$17 >> 2] | 0;
                                                        $210 = ((((($209) + ($21 << 6) | 0) + ($204 << 2) | 0)) + 2 | 0);
                                                        $211 = HEAP16[$210 >> 1] | 0;
                                                        $212 = $211 << 16 >> 16;
                                                        $213 = (($202) + ($212)) | 0;
                                                        $$sink245 = $213; $$sink246 = $168; $$sink3 = 4;
                                                        label = 18;
                                                        break;
                                                    }
                                                    default: {
                                                    }
                                                }
                                                if ((label | 0) == 17) {
                                                    label = 0;
                                                    $274 = (($275) + ($$sink231)) | 0;
                                                    $$sink245 = $274; $$sink246 = $$sink; $$sink3 = $$sink3$ph;
                                                    label = 18;
                                                }
                                                if ((label | 0) == 18) {
                                                    label = 0;
                                                    HEAP32[$$sink246 >> 2] = $$sink245;
                                                    $276 = (($1) + ($163 << 2) | 0);
                                                    $277 = HEAP32[$276 >> 2] | 0;
                                                    $278 = (($277) + ($$sink3)) | 0;
                                                    HEAP32[$276 >> 2] = $278;
                                                }
                                                $279 = (($$0227237) + 1) | 0;
                                                $exitcond242 = ($279 | 0) == (4);
                                                if ($exitcond242) {
                                                    break L9;
                                                } else {
                                                    $$0227237 = $279;
                                                }
                                            }
                                            break;
                                        }
                                        default: {
                                            break L9;
                                        }
                                    }
                                }
                            }
                        } while (0);
                        $280 = (($$0228238) + 1) | 0;
                        $exitcond243 = ($280 | 0) == ($5 | 0);
                        if ($exitcond243) {
                            break;
                        } else {
                            $$0228238 = $280;
                        }
                    }
                }
                $20 = (($$0225239) + 1) | 0;
                $exitcond244 = ($20 | 0) == ($7 | 0);
                if ($exitcond244) {
                    $$0235 = 0;
                    break;
                } else {
                    $$0225239 = $20;
                }
            }
        } else {
            $$0235 = 0;
        }
        while (1) {
            $281 = (($1) + ($$0235 << 2) | 0);
            $282 = HEAP32[$281 >> 2] | 0;
            $283 = ($282 | 0) == (0);
            if (!($283)) {
                $284 = (((($0)) + 512348 | 0) + ($$0235 << 3) | 0);
                $285 = HEAP32[$284 >> 2] | 0;
                $286 = (($285 | 0) / ($282 | 0)) & -1;
                HEAP32[$284 >> 2] = $286;
                $287 = (((((($0)) + 512348 | 0) + ($$0235 << 3) | 0)) + 4 | 0);
                $288 = HEAP32[$287 >> 2] | 0;
                $289 = (($288 | 0) / ($282 | 0)) & -1;
                HEAP32[$287 >> 2] = $289;
            }
            $290 = (($$0235) + 1) | 0;
            $exitcond = ($290 | 0) == (16);
            if ($exitcond) {
                break;
            } else {
                $$0235 = $290;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec21DoErrorConSliceMVCopyEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$091101$us$us = 0, $$091101$us107 = 0, $$092103$us = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
        var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
        var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
        var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
        var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $98 = 0, $99 = 0, $exitcond = 0, $exitcond121 = 0, $exitcond122 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 64 | 0;
        $vararg_buffer = sp;
        $1 = sp + 8 | 0;
        $2 = ((($0)) + 241924 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($3)) + 4 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($3)) + 8 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($0)) + 5464 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($0)) + 316852 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($0)) + 241932 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ((($13)) + 3980 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ((($9)) + 32 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ($11 | 0) != (0 | 0);
        if ($18) {
            $19 = ((($11)) + 32 | 0);
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = ((($1)) + 24 | 0);
            HEAP32[$21 >> 2] = $20;
            $22 = ((($11)) + 36 | 0);
            $23 = HEAP32[$22 >> 2] | 0;
            $24 = ((($1)) + 28 | 0);
            HEAP32[$24 >> 2] = $23;
            $25 = ((($11)) + 16 | 0);
            $26 = HEAP32[$25 >> 2] | 0;
            $27 = ((($1)) + 12 | 0);
            HEAP32[$27 >> 2] = $26;
            $28 = ((($11)) + 20 | 0);
            $29 = HEAP32[$28 >> 2] | 0;
            $30 = ((($1)) + 16 | 0);
            HEAP32[$30 >> 2] = $29;
            $31 = ((($11)) + 24 | 0);
            $32 = HEAP32[$31 >> 2] | 0;
            $33 = ((($1)) + 20 | 0);
            HEAP32[$33 >> 2] = $32;
            $34 = ((($1)) + 32 | 0);
            HEAP32[$34 >> 2] = $17;
            $35 = ((($9)) + 36 | 0);
            $36 = HEAP32[$35 >> 2] | 0;
            $37 = ((($1)) + 36 | 0);
            HEAP32[$37 >> 2] = $36;
            $38 = ((($9)) + 56 | 0);
            $39 = HEAP32[$38 >> 2] | 0;
            $40 = ((($1)) + 40 | 0);
            HEAP32[$40 >> 2] = $39;
            $41 = ((($9)) + 60 | 0);
            $42 = HEAP32[$41 >> 2] | 0;
            $43 = ((($1)) + 44 | 0);
            HEAP32[$43 >> 2] = $42;
            $44 = ($9 | 0) == ($11 | 0);
            if ($44) {
                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 23765, $vararg_buffer);
            }
        }
        $45 = ($7 | 0) > (0);
        if (!($45)) {
            STACKTOP = sp; return;
        }
        $46 = ($5 | 0) > (0);
        $47 = ((($9)) + 16 | 0);
        $48 = $17 << 4;
        $49 = ((($9)) + 20 | 0);
        $50 = $17 << 3;
        $51 = $17 >>> 1;
        $52 = ((($9)) + 24 | 0);
        if ($46) {
            $$092103$us = 0;
        } else {
            STACKTOP = sp; return;
        }
        while (1) {
            $53 = Math_imul($$092103$us, $5) | 0;
            $54 = Math_imul($48, $$092103$us) | 0;
            $55 = Math_imul($50, $$092103$us) | 0;
            $56 = $55 >>> 1;
            if ($18) {
                $$091101$us$us = 0;
                while (1) {
                    $171 = (($$091101$us$us) + ($53)) | 0;
                    $172 = (($15) + ($171) | 0);
                    $173 = HEAP8[$172 >> 0] | 0;
                    $174 = ($173 << 24 >> 24) == (0);
                    if ($174) {
                        $175 = HEAP32[$8 >> 2] | 0;
                        $176 = ((($175)) + 108 | 0);
                        $177 = HEAP32[$176 >> 2] | 0;
                        $178 = (($177) + 1) | 0;
                        HEAP32[$176 >> 2] = $178;
                        __ZN7WelsDec12DoMbECMvCopyEPNS_21TagWelsDecoderContextEPNS_10TagPictureES3_iiiPNS_14TagMCRefMemberE($0, $9, $11, 0, $$091101$us$us, $$092103$us, $1);
                    }
                    $179 = (($$091101$us$us) + 1) | 0;
                    $exitcond121 = ($179 | 0) == ($5 | 0);
                    if ($exitcond121) {
                        break;
                    } else {
                        $$091101$us$us = $179;
                    }
                }
            } else {
                $$091101$us107 = 0;
                while (1) {
                    $57 = (($$091101$us107) + ($53)) | 0;
                    $58 = (($15) + ($57) | 0);
                    $59 = HEAP8[$58 >> 0] | 0;
                    $60 = ($59 << 24 >> 24) == (0);
                    if ($60) {
                        $61 = HEAP32[$8 >> 2] | 0;
                        $62 = ((($61)) + 108 | 0);
                        $63 = HEAP32[$62 >> 2] | 0;
                        $64 = (($63) + 1) | 0;
                        HEAP32[$62 >> 2] = $64;
                        $65 = HEAP32[$47 >> 2] | 0;
                        $66 = (($65) + ($54) | 0);
                        $67 = $$091101$us107 << 4;
                        $68 = (($66) + ($67) | 0);
                        dest = $68; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $69 = (($68) + ($17) | 0);
                        dest = $69; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $70 = (($69) + ($17) | 0);
                        dest = $70; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $71 = (($70) + ($17) | 0);
                        dest = $71; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $72 = (($71) + ($17) | 0);
                        dest = $72; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $73 = (($72) + ($17) | 0);
                        dest = $73; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $74 = (($73) + ($17) | 0);
                        dest = $74; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $75 = (($74) + ($17) | 0);
                        dest = $75; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $76 = (($75) + ($17) | 0);
                        dest = $76; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $77 = (($76) + ($17) | 0);
                        dest = $77; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $78 = (($77) + ($17) | 0);
                        dest = $78; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $79 = (($78) + ($17) | 0);
                        dest = $79; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $80 = (($79) + ($17) | 0);
                        dest = $80; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $81 = (($80) + ($17) | 0);
                        dest = $81; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $82 = (($81) + ($17) | 0);
                        dest = $82; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $83 = (($82) + ($17) | 0);
                        dest = $83; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 128 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                        $84 = HEAP32[$49 >> 2] | 0;
                        $85 = (($84) + ($56) | 0);
                        $86 = $$091101$us107 << 3;
                        $87 = (($85) + ($86) | 0);
                        $88 = $87;
                        $89 = $88;
                        HEAP8[$89 >> 0] = -2139062144 & 255; HEAP8[$89 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$89 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$89 + 3 >> 0] = -2139062144 >> 24;
                        $90 = (($88) + 4) | 0;
                        $91 = $90;
                        HEAP8[$91 >> 0] = -2139062144 & 255; HEAP8[$91 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$91 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$91 + 3 >> 0] = -2139062144 >> 24;
                        $92 = (($87) + ($51) | 0);
                        $93 = $92;
                        $94 = $93;
                        HEAP8[$94 >> 0] = -2139062144 & 255; HEAP8[$94 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$94 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$94 + 3 >> 0] = -2139062144 >> 24;
                        $95 = (($93) + 4) | 0;
                        $96 = $95;
                        HEAP8[$96 >> 0] = -2139062144 & 255; HEAP8[$96 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$96 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$96 + 3 >> 0] = -2139062144 >> 24;
                        $97 = (($92) + ($51) | 0);
                        $98 = $97;
                        $99 = $98;
                        HEAP8[$99 >> 0] = -2139062144 & 255; HEAP8[$99 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$99 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$99 + 3 >> 0] = -2139062144 >> 24;
                        $100 = (($98) + 4) | 0;
                        $101 = $100;
                        HEAP8[$101 >> 0] = -2139062144 & 255; HEAP8[$101 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$101 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$101 + 3 >> 0] = -2139062144 >> 24;
                        $102 = (($97) + ($51) | 0);
                        $103 = $102;
                        $104 = $103;
                        HEAP8[$104 >> 0] = -2139062144 & 255; HEAP8[$104 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$104 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$104 + 3 >> 0] = -2139062144 >> 24;
                        $105 = (($103) + 4) | 0;
                        $106 = $105;
                        HEAP8[$106 >> 0] = -2139062144 & 255; HEAP8[$106 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$106 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$106 + 3 >> 0] = -2139062144 >> 24;
                        $107 = (($102) + ($51) | 0);
                        $108 = $107;
                        $109 = $108;
                        HEAP8[$109 >> 0] = -2139062144 & 255; HEAP8[$109 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$109 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$109 + 3 >> 0] = -2139062144 >> 24;
                        $110 = (($108) + 4) | 0;
                        $111 = $110;
                        HEAP8[$111 >> 0] = -2139062144 & 255; HEAP8[$111 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$111 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$111 + 3 >> 0] = -2139062144 >> 24;
                        $112 = (($107) + ($51) | 0);
                        $113 = $112;
                        $114 = $113;
                        HEAP8[$114 >> 0] = -2139062144 & 255; HEAP8[$114 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$114 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$114 + 3 >> 0] = -2139062144 >> 24;
                        $115 = (($113) + 4) | 0;
                        $116 = $115;
                        HEAP8[$116 >> 0] = -2139062144 & 255; HEAP8[$116 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$116 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$116 + 3 >> 0] = -2139062144 >> 24;
                        $117 = (($112) + ($51) | 0);
                        $118 = $117;
                        $119 = $118;
                        HEAP8[$119 >> 0] = -2139062144 & 255; HEAP8[$119 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$119 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$119 + 3 >> 0] = -2139062144 >> 24;
                        $120 = (($118) + 4) | 0;
                        $121 = $120;
                        HEAP8[$121 >> 0] = -2139062144 & 255; HEAP8[$121 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$121 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$121 + 3 >> 0] = -2139062144 >> 24;
                        $122 = (($117) + ($51) | 0);
                        $123 = $122;
                        $124 = $123;
                        HEAP8[$124 >> 0] = -2139062144 & 255; HEAP8[$124 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$124 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$124 + 3 >> 0] = -2139062144 >> 24;
                        $125 = (($123) + 4) | 0;
                        $126 = $125;
                        HEAP8[$126 >> 0] = -2139062144 & 255; HEAP8[$126 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$126 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$126 + 3 >> 0] = -2139062144 >> 24;
                        $127 = HEAP32[$52 >> 2] | 0;
                        $128 = (($127) + ($56) | 0);
                        $129 = (($128) + ($86) | 0);
                        $130 = $129;
                        $131 = $130;
                        HEAP8[$131 >> 0] = -2139062144 & 255; HEAP8[$131 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$131 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$131 + 3 >> 0] = -2139062144 >> 24;
                        $132 = (($130) + 4) | 0;
                        $133 = $132;
                        HEAP8[$133 >> 0] = -2139062144 & 255; HEAP8[$133 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$133 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$133 + 3 >> 0] = -2139062144 >> 24;
                        $134 = (($129) + ($51) | 0);
                        $135 = $134;
                        $136 = $135;
                        HEAP8[$136 >> 0] = -2139062144 & 255; HEAP8[$136 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$136 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$136 + 3 >> 0] = -2139062144 >> 24;
                        $137 = (($135) + 4) | 0;
                        $138 = $137;
                        HEAP8[$138 >> 0] = -2139062144 & 255; HEAP8[$138 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$138 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$138 + 3 >> 0] = -2139062144 >> 24;
                        $139 = (($134) + ($51) | 0);
                        $140 = $139;
                        $141 = $140;
                        HEAP8[$141 >> 0] = -2139062144 & 255; HEAP8[$141 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$141 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$141 + 3 >> 0] = -2139062144 >> 24;
                        $142 = (($140) + 4) | 0;
                        $143 = $142;
                        HEAP8[$143 >> 0] = -2139062144 & 255; HEAP8[$143 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$143 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$143 + 3 >> 0] = -2139062144 >> 24;
                        $144 = (($139) + ($51) | 0);
                        $145 = $144;
                        $146 = $145;
                        HEAP8[$146 >> 0] = -2139062144 & 255; HEAP8[$146 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$146 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$146 + 3 >> 0] = -2139062144 >> 24;
                        $147 = (($145) + 4) | 0;
                        $148 = $147;
                        HEAP8[$148 >> 0] = -2139062144 & 255; HEAP8[$148 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$148 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$148 + 3 >> 0] = -2139062144 >> 24;
                        $149 = (($144) + ($51) | 0);
                        $150 = $149;
                        $151 = $150;
                        HEAP8[$151 >> 0] = -2139062144 & 255; HEAP8[$151 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$151 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$151 + 3 >> 0] = -2139062144 >> 24;
                        $152 = (($150) + 4) | 0;
                        $153 = $152;
                        HEAP8[$153 >> 0] = -2139062144 & 255; HEAP8[$153 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$153 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$153 + 3 >> 0] = -2139062144 >> 24;
                        $154 = (($149) + ($51) | 0);
                        $155 = $154;
                        $156 = $155;
                        HEAP8[$156 >> 0] = -2139062144 & 255; HEAP8[$156 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$156 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$156 + 3 >> 0] = -2139062144 >> 24;
                        $157 = (($155) + 4) | 0;
                        $158 = $157;
                        HEAP8[$158 >> 0] = -2139062144 & 255; HEAP8[$158 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$158 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$158 + 3 >> 0] = -2139062144 >> 24;
                        $159 = (($154) + ($51) | 0);
                        $160 = $159;
                        $161 = $160;
                        HEAP8[$161 >> 0] = -2139062144 & 255; HEAP8[$161 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$161 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$161 + 3 >> 0] = -2139062144 >> 24;
                        $162 = (($160) + 4) | 0;
                        $163 = $162;
                        HEAP8[$163 >> 0] = -2139062144 & 255; HEAP8[$163 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$163 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$163 + 3 >> 0] = -2139062144 >> 24;
                        $164 = (($159) + ($51) | 0);
                        $165 = $164;
                        $166 = $165;
                        HEAP8[$166 >> 0] = -2139062144 & 255; HEAP8[$166 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$166 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$166 + 3 >> 0] = -2139062144 >> 24;
                        $167 = (($165) + 4) | 0;
                        $168 = $167;
                        HEAP8[$168 >> 0] = -2139062144 & 255; HEAP8[$168 + 1 >> 0] = (-2139062144 >> 8) & 255; HEAP8[$168 + 2 >> 0] = (-2139062144 >> 16) & 255; HEAP8[$168 + 3 >> 0] = -2139062144 >> 24;
                    }
                    $169 = (($$091101$us107) + 1) | 0;
                    $exitcond = ($169 | 0) == ($5 | 0);
                    if ($exitcond) {
                        break;
                    } else {
                        $$091101$us107 = $169;
                    }
                }
            }
            $170 = (($$092103$us) + 1) | 0;
            $exitcond122 = ($170 | 0) == ($7 | 0);
            if ($exitcond122) {
                break;
            } else {
                $$092103$us = $170;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec12DoMbECMvCopyEPNS_21TagWelsDecoderContextEPNS_10TagPictureES3_iiiPNS_14TagMCRefMemberE($0, $1, $2, $3, $4, $5, $6) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        var $$ = 0, $$$ = 0, $$0 = 0, $$0149 = 0, $$0150 = 0, $$0151 = 0, $$0152 = 0, $$0153 = 0, $$154 = 0, $$154$ = 0, $$pre$phiZ2D = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
        var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
        var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
        var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
        var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
        var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $sext = 0, $sext155 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $7 = sp;
        $8 = ($1 | 0) == ($2 | 0);
        if ($8) {
            STACKTOP = sp; return;
        }
        $9 = $4 << 4;
        $10 = $5 << 4;
        $11 = ((($1)) + 64 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($1)) + 16 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = (($14) + ($9) | 0);
        $16 = ((($6)) + 32 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = Math_imul($17, $10) | 0;
        $19 = (($15) + ($18) | 0);
        $20 = ((($1)) + 20 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = $9 >> 1;
        $23 = (($21) + ($22) | 0);
        $24 = $10 >> 1;
        $25 = ((($6)) + 36 | 0);
        $26 = HEAP32[$25 >> 2] | 0;
        $27 = Math_imul($26, $24) | 0;
        $28 = (($23) + ($27) | 0);
        $29 = ((($1)) + 24 | 0);
        $30 = HEAP32[$29 >> 2] | 0;
        $31 = (($30) + ($22) | 0);
        $32 = (($31) + ($27) | 0);
        $33 = ((($1)) + 52 | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = ($34 << 24 >> 24) == (0);
        if ($35) {
            $36 = ((($0)) + 512476 | 0);
            $37 = HEAP32[$36 >> 2] | 0;
            $38 = ($37 | 0) == (0 | 0);
            if ($38) {
                label = 4;
            } else {
                $68 = ($37 | 0) == ($2 | 0);
                do {
                    if ($68) {
                        $69 = ((($0)) + 512348 | 0);
                        $70 = HEAP32[$69 >> 2] | 0;
                        $71 = $70 & 65535;
                        HEAP16[$7 >> 1] = $71;
                        $72 = ((($0)) + 512352 | 0);
                        $73 = HEAP32[$72 >> 2] | 0;
                        $$pre$phiZ2D = $7; $$sink2 = $73; $94 = $70;
                    } else {
                        $74 = ((($37)) + 64 | 0);
                        $75 = HEAP32[$74 >> 2] | 0;
                        $76 = (($75) - ($12)) | 0;
                        $77 = ((($2)) + 64 | 0);
                        $78 = HEAP32[$77 >> 2] | 0;
                        $79 = (($78) - ($12)) | 0;
                        $80 = ($76 | 0) == (0);
                        if ($80) {
                            HEAP16[$7 >> 1] = 0;
                            $$pre$phiZ2D = $7; $$sink2 = 0; $94 = 0;
                            break;
                        } else {
                            $81 = ((($0)) + 512348 | 0);
                            $82 = HEAP32[$81 >> 2] | 0;
                            $83 = Math_imul($82, $79) | 0;
                            $84 = (($83 | 0) / ($76 | 0)) & -1;
                            $phitmp = $84 & 65535;
                            HEAP16[$7 >> 1] = $phitmp;
                            $85 = ((($0)) + 512352 | 0);
                            $86 = HEAP32[$85 >> 2] | 0;
                            $87 = Math_imul($86, $79) | 0;
                            $88 = (($87 | 0) / ($76 | 0)) & -1;
                            $$pre$phiZ2D = $7; $$sink2 = $88; $94 = $84;
                            break;
                        }
                    }
                } while (0);
                $89 = $$sink2 & 65535;
                $90 = ((($7)) + 2 | 0);
                HEAP16[$90 >> 1] = $89;
                HEAP32[$6 >> 2] = $19;
                $91 = ((($6)) + 4 | 0);
                HEAP32[$91 >> 2] = $28;
                $92 = ((($6)) + 8 | 0);
                HEAP32[$92 >> 2] = $32;
                $93 = $4 << 6;
                $sext = $94 << 16;
                $95 = $sext >> 16;
                $96 = (($93) + ($95)) | 0;
                $97 = $5 << 6;
                $sext155 = $$sink2 << 16;
                $98 = $sext155 >> 16;
                $99 = (($97) + ($98)) | 0;
                $100 = ((($6)) + 40 | 0);
                $101 = HEAP32[$100 >> 2] | 0;
                $102 = ((($6)) + 44 | 0);
                $103 = HEAP32[$102 >> 2] | 0;
                $104 = ((($0)) + 241924 | 0);
                $105 = HEAP32[$104 >> 2] | 0;
                $106 = ((($105)) + 327 | 0);
                $107 = HEAP8[$106 >> 0] | 0;
                $108 = ($107 << 24 >> 24) == (0);
                if ($108) {
                    $$0150 = 0; $$0151 = $103; $$0152 = $101; $$0153 = 0;
                } else {
                    $109 = ((($0)) + 6176 | 0);
                    $110 = HEAP32[$109 >> 2] | 0;
                    $111 = $110 << 1;
                    $112 = ((($0)) + 6184 | 0);
                    $113 = HEAP32[$112 >> 2] | 0;
                    $114 = $113 << 1;
                    $115 = (($101) - ($114)) | 0;
                    $116 = ((($0)) + 6180 | 0);
                    $117 = HEAP32[$116 >> 2] | 0;
                    $118 = $117 << 1;
                    $119 = (($103) - ($118)) | 0;
                    $$0150 = $111; $$0151 = $119; $$0152 = $115; $$0153 = $118;
                }
                $120 = $$0150 << 2;
                $121 = (($120) + 8) | 0;
                $122 = $$0153 << 2;
                $123 = (($122) + 8) | 0;
                $124 = $$0151 << 2;
                $125 = (($124) + -76) | 0;
                $126 = ($96 | 0) < ($121 | 0);
                if ($126) {
                    $127 = $96 & -4;
                    $128 = ($$0150 | 0) > ($127 | 0);
                    $129 = $128 ? $$0150 : $127;
                    $$0 = $129;
                } else {
                    $130 = $$0152 << 2;
                    $131 = (($130) + -76) | 0;
                    $132 = ($96 | 0) > ($131 | 0);
                    $133 = $96 & -4;
                    $134 = (($130) + -68) | 0;
                    $135 = ($134 | 0) < ($133 | 0);
                    $$ = $135 ? $134 : $133;
                    $$$ = $132 ? $$ : $96;
                    $$0 = $$$;
                }
                $136 = ($99 | 0) < ($123 | 0);
                if ($136) {
                    $137 = $99 & -4;
                    $138 = ($$0153 | 0) > ($137 | 0);
                    $139 = $138 ? $$0153 : $137;
                    $$0149 = $139;
                } else {
                    $140 = ($99 | 0) > ($125 | 0);
                    $141 = $99 & -4;
                    $142 = (($124) + -68) | 0;
                    $143 = ($142 | 0) < ($141 | 0);
                    $$154 = $143 ? $142 : $141;
                    $$154$ = $140 ? $$154 : $99;
                    $$0149 = $$154$;
                }
                $144 = (($$0) - ($93)) | 0;
                $145 = $144 & 65535;
                HEAP16[$$pre$phiZ2D >> 1] = $145;
                $146 = (($$0149) - ($97)) | 0;
                $147 = $146 & 65535;
                HEAP16[$90 >> 1] = $147;
                $148 = ((($0)) + 316972 | 0);
                __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($6, $9, $10, $148, 16, 16, $$pre$phiZ2D);
            }
        } else {
            label = 4;
        }
        if ((label | 0) == 4) {
            $39 = ((($6)) + 12 | 0);
            $40 = HEAP32[$39 >> 2] | 0;
            $41 = ((($6)) + 24 | 0);
            $42 = HEAP32[$41 >> 2] | 0;
            $43 = Math_imul($42, $10) | 0;
            $44 = (($40) + ($43) | 0);
            $45 = (($44) + ($9) | 0);
            $46 = ((($0)) + 317056 | 0);
            $47 = HEAP32[$46 >> 2] | 0;
            FUNCTION_TABLE_viiii[$47 & 31]($19, $17, $45, $42);
            $48 = ((($6)) + 16 | 0);
            $49 = HEAP32[$48 >> 2] | 0;
            $50 = $5 << 3;
            $51 = ((($6)) + 28 | 0);
            $52 = HEAP32[$51 >> 2] | 0;
            $53 = Math_imul($52, $50) | 0;
            $54 = (($49) + ($53) | 0);
            $55 = $4 << 3;
            $56 = (($54) + ($55) | 0);
            $57 = ((($0)) + 317060 | 0);
            $58 = HEAP32[$57 >> 2] | 0;
            $59 = HEAP32[$25 >> 2] | 0;
            FUNCTION_TABLE_viiii[$58 & 31]($28, $59, $56, $52);
            $60 = ((($6)) + 20 | 0);
            $61 = HEAP32[$60 >> 2] | 0;
            $62 = HEAP32[$51 >> 2] | 0;
            $63 = Math_imul($62, $50) | 0;
            $64 = (($61) + ($63) | 0);
            $65 = (($64) + ($55) | 0);
            $66 = HEAP32[$57 >> 2] | 0;
            $67 = HEAP32[$25 >> 2] | 0;
            FUNCTION_TABLE_viiii[$66 & 31]($32, $67, $65, $62);
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec6BaseMCEPNS_14TagMCRefMemberEiiP9TagMcFunciiPs($0, $1, $2, $3, $4, $5, $6) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        var $$ = 0, $$80 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $7 = $1 << 2;
        $8 = HEAP16[$6 >> 1] | 0;
        $9 = $8 << 16 >> 16;
        $10 = (($7) + ($9)) | 0;
        $11 = $2 << 2;
        $12 = ((($6)) + 2 | 0);
        $13 = HEAP16[$12 >> 1] | 0;
        $14 = $13 << 16 >> 16;
        $15 = (($11) + ($14)) | 0;
        $16 = ($10 | 0) < (-120);
        if ($16) {
            $29 = -120;
        } else {
            $17 = ((($0)) + 40 | 0);
            $18 = HEAP32[$17 >> 2] | 0;
            $19 = $18 << 2;
            $20 = (($19) + 52) | 0;
            $21 = ($10 | 0) > ($20 | 0);
            $$ = $21 ? $20 : $10;
            $29 = $$;
        }
        $22 = ($15 | 0) < (-120);
        if ($22) {
            $31 = -120;
        } else {
            $23 = ((($0)) + 44 | 0);
            $24 = HEAP32[$23 >> 2] | 0;
            $25 = $24 << 2;
            $26 = (($25) + 52) | 0;
            $27 = ($15 | 0) > ($26 | 0);
            $$80 = $27 ? $26 : $15;
            $31 = $$80;
        }
        $28 = $29 >> 2;
        $30 = $31 >> 2;
        $32 = ((($0)) + 24 | 0);
        $33 = HEAP32[$32 >> 2] | 0;
        $34 = Math_imul($30, $33) | 0;
        $35 = (($34) + ($28)) | 0;
        $36 = $29 >> 3;
        $37 = $31 >> 3;
        $38 = ((($0)) + 28 | 0);
        $39 = HEAP32[$38 >> 2] | 0;
        $40 = Math_imul($39, $37) | 0;
        $41 = (($40) + ($36)) | 0;
        $42 = $4 >> 1;
        $43 = $5 >> 1;
        $44 = ((($0)) + 12 | 0);
        $45 = HEAP32[$44 >> 2] | 0;
        $46 = (($45) + ($35) | 0);
        $47 = ((($0)) + 16 | 0);
        $48 = HEAP32[$47 >> 2] | 0;
        $49 = (($48) + ($41) | 0);
        $50 = ((($0)) + 20 | 0);
        $51 = HEAP32[$50 >> 2] | 0;
        $52 = (($51) + ($41) | 0);
        $53 = HEAP32[$0 >> 2] | 0;
        $54 = ((($0)) + 4 | 0);
        $55 = HEAP32[$54 >> 2] | 0;
        $56 = ((($0)) + 8 | 0);
        $57 = HEAP32[$56 >> 2] | 0;
        $58 = ((($3)) + 16 | 0);
        $59 = HEAP32[$58 >> 2] | 0;
        $60 = ((($0)) + 32 | 0);
        $61 = HEAP32[$60 >> 2] | 0;
        $62 = $29 & 65535;
        $63 = $31 & 65535;
        FUNCTION_TABLE_viiiiiiii[$59 & 3]($46, $33, $53, $61, $62, $63, $4, $5);
        $64 = ((($3)) + 12 | 0);
        $65 = HEAP32[$64 >> 2] | 0;
        $66 = HEAP32[$38 >> 2] | 0;
        $67 = ((($0)) + 36 | 0);
        $68 = HEAP32[$67 >> 2] | 0;
        FUNCTION_TABLE_viiiiiiii[$65 & 3]($49, $66, $55, $68, $62, $63, $42, $43);
        $69 = HEAP32[$64 >> 2] | 0;
        $70 = HEAP32[$38 >> 2] | 0;
        $71 = HEAP32[$67 >> 2] | 0;
        FUNCTION_TABLE_viiiiiiii[$69 & 3]($52, $70, $57, $71, $62, $63, $42, $43);
        return;
    }
    function __ZN7WelsDec24WelsTargetMbConstructionEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $1 = ((($0)) + 241932 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 3908 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($2)) + 4040 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (($4) + ($6 << 1) | 0);
        $8 = HEAP16[$7 >> 1] | 0;
        $9 = $8 << 16 >> 16;
        $10 = ($8 << 16 >> 16) == (512);
        if ($10) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $11 = $9 & 519;
        $12 = ($11 | 0) == (0);
        if (!($12)) {
            (__ZN7WelsDec33WelsMbIntraPredictionConstructionEPNS_21TagWelsDecoderContextEPNS_10TagDqLayerEb($0, $2, 1) | 0);
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $13 = $9 & 504;
        $14 = ($13 | 0) == (0);
        if ($14) {
            HEAP32[$vararg_buffer >> 2] = $9;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 24503, $vararg_buffer);
            $$0 = -1;
            STACKTOP = sp; return ($$0 | 0);
        }
        $15 = ((($2)) + 3956 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = (($16) + ($6) | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = ($18 << 24 >> 24) == (0);
        $20 = ((($2)) + 4032 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ((($2)) + 4036 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = ((($0)) + 5464 | 0);
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = ((($25)) + 32 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = ((($25)) + 36 | 0);
        $29 = HEAP32[$28 >> 2] | 0;
        $30 = ((($2)) + 4100 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = ((($31)) + 16 | 0);
        $33 = HEAP32[$32 >> 2] | 0;
        $34 = Math_imul($27, $23) | 0;
        $35 = (($34) + ($21)) | 0;
        $36 = $35 << 4;
        $37 = (($33) + ($36) | 0);
        $38 = ((($31)) + 20 | 0);
        $39 = HEAP32[$38 >> 2] | 0;
        $40 = Math_imul($29, $23) | 0;
        $41 = (($40) + ($21)) | 0;
        $42 = $41 << 3;
        $43 = (($39) + ($42) | 0);
        $44 = ((($31)) + 24 | 0);
        $45 = HEAP32[$44 >> 2] | 0;
        $46 = (($45) + ($42) | 0);
        __ZN7WelsDec12GetInterPredEPhS0_S0_PNS_21TagWelsDecoderContextE($37, $43, $46, $0);
        if ($19) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        (__ZN7WelsDec29WelsMbInterSampleConstructionEPNS_21TagWelsDecoderContextEPNS_10TagDqLayerEPhS4_S4_ii($0, $2, $37, $43, $46, $27, $29) | 0);
        $47 = ((($0)) + 317124 | 0);
        $48 = HEAP32[$47 >> 2] | 0;
        $49 = ((($2)) + 3964 | 0);
        $50 = HEAP32[$49 >> 2] | 0;
        $51 = HEAP32[$5 >> 2] | 0;
        $52 = (($50) + (($51 * 24) | 0) | 0);
        FUNCTION_TABLE_vi[$48 & 15]($52);
        $$0 = 0;
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 4 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = HEAP32[$0 >> 2] | 0;
        $5 = $1 << 16 >> 16;
        $6 = ($1 << 16 >> 16) < (0);
        if ($6) {
            $$0 = -1;
            return ($$0 | 0);
        }
        $7 = ($3 | 0) <= ($5 | 0);
        $8 = ($4 | 0) == (0 | 0);
        $or$cond$i = $7 | $8;
        if ($or$cond$i) {
            $$0 = -1;
            return ($$0 | 0);
        }
        $9 = (($4) + ($5) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = ($10 << 24 >> 24) == (-1);
        if ($11) {
            $$0 = -1;
            return ($$0 | 0);
        } else {
            $$018 = $1;
        }
        while (1) {
            $12 = (($$018) + 1) << 16 >> 16;
            $13 = $12 << 16 >> 16;
            $14 = ($3 | 0) > ($13 | 0);
            if (!($14)) {
                $$0 = -1;
                label = 6;
                break;
            }
            $15 = (($4) + ($13) | 0);
            $16 = HEAP8[$15 >> 0] | 0;
            $17 = ($16 << 24 >> 24) == ($10 << 24 >> 24);
            if ($17) {
                $$0 = $12;
                label = 6;
                break;
            } else {
                $$018 = $12;
            }
        }
        if ((label | 0) == 6) {
            return ($$0 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec16WelsDeblockingMbEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$sink = 0, $$sink$i = 0, $$sink5 = 0, $$sink5$i = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
        var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
        var $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0;
        var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0;
        var $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
        var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
        var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0;
        var $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0;
        var $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0;
        var $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0;
        var $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0;
        var $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0;
        var $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0;
        var $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0;
        var $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0;
        var $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0;
        var $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0;
        var $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0;
        var $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0;
        var $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0;
        var $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0;
        var $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0;
        var $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0;
        var $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0;
        var $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
        var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
        var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
        var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
        var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
        var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
        var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
        var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
        var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
        var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
        var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
        var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
        var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
        var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
        var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
        var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
        var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
        var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
        var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
        var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
        var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
        var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
        var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
        var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
        var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
        var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
        var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
        var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
        var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
        var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
        var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
        var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
        var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
        var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
        var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
        var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
        var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
        var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
        var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
        var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
        var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
        var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
        var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
        var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
        var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
        var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
        var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
        var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $phitmp$i = 0, $phitmp901$i = 0, $phitmp902$i = 0, $phitmp903$i = 0, $phitmp904$i = 0, $phitmp905$i = 0, $phitmp906$i = 0, $phitmp907$i = 0;
        var $phitmp908$i = 0, $phitmp909$i = 0, $phitmp910$i = 0, $phitmp911$i = 0, $phitmp912$i = 0, $phitmp913$i = 0, $phitmp914$i = 0, $phitmp915$i = 0, $phitmp916$i = 0, $phitmp917$i = 0, $phitmp918$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $3 = sp + 32 | 0;
        $4 = sp;
        ; HEAP32[$4 >> 2] = 0 | 0; HEAP32[$4 + 4 >> 2] = 0 | 0; HEAP32[$4 + 8 >> 2] = 0 | 0; HEAP32[$4 + 12 >> 2] = 0 | 0; HEAP32[$4 + 16 >> 2] = 0 | 0; HEAP32[$4 + 20 >> 2] = 0 | 0; HEAP32[$4 + 24 >> 2] = 0 | 0; HEAP32[$4 + 28 >> 2] = 0 | 0;
        $5 = ((($0)) + 4040 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($0)) + 3908 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = (($8) + ($6 << 1) | 0);
        $10 = HEAP16[$9 >> 1] | 0;
        $11 = $10 << 16 >> 16;
        switch ($11 | 0) {
            case 512: case 2: case 4: case 1: {
                __ZN7WelsDec19FilteringEdgeLumaHVEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($0, $1, $2);
                __ZN7WelsDec21FilteringEdgeChromaHVEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($0, $1, $2);
                STACKTOP = sp; return;
                break;
            }
            default: {
            }
        }
        $12 = $2 & 1;
        $13 = ($12 | 0) == (0);
        if ($13) {
            $$sink = 0;
        } else {
            $14 = (($6) + -1) | 0;
            $15 = (($8) + ($14 << 1) | 0);
            $16 = HEAP16[$15 >> 1] | 0;
            $17 = $16 & 519;
            $18 = ($17 << 16 >> 16) == (0);
            if ($18) {
                $19 = (__ZN7WelsDec29DeblockingBsMarginalMBAvcbaseEPNS_10TagDqLayerEiii($0, 0, $14, $6) | 0);
                $$sink = $19;
            } else {
                $$sink = 67372036;
            }
        }
        HEAP32[$4 >> 2] = $$sink;
        $20 = $2 & 2;
        $21 = ($20 | 0) == (0);
        if ($21) {
            $$sink5 = 0;
        } else {
            $22 = ((($0)) + 4044 | 0);
            $23 = HEAP32[$22 >> 2] | 0;
            $24 = (($6) - ($23)) | 0;
            $25 = (($8) + ($24 << 1) | 0);
            $26 = HEAP16[$25 >> 1] | 0;
            $27 = $26 & 519;
            $28 = ($27 << 16 >> 16) == (0);
            if ($28) {
                $29 = (__ZN7WelsDec29DeblockingBsMarginalMBAvcbaseEPNS_10TagDqLayerEiii($0, 1, $24, $6) | 0);
                $$sink5 = $29;
            } else {
                $$sink5 = 67372036;
            }
        }
        $30 = ((($4)) + 16 | 0);
        HEAP32[$30 >> 2] = $$sink5;
        L13: do {
            switch ($10 << 16 >> 16) {
                case 256: {
                    $1425 = ((($4)) + 28 | 0);
                    HEAP32[$1425 >> 2] = 0;
                    $1426 = ((($4)) + 24 | 0);
                    HEAP32[$1426 >> 2] = 0;
                    $1427 = ((($4)) + 20 | 0);
                    HEAP32[$1427 >> 2] = 0;
                    $1428 = ((($4)) + 12 | 0);
                    HEAP32[$1428 >> 2] = 0;
                    $1429 = ((($4)) + 8 | 0);
                    HEAP32[$1429 >> 2] = 0;
                    $1430 = ((($4)) + 4 | 0);
                    HEAP32[$1430 >> 2] = 0;
                    break;
                }
                case 8: {
                    $31 = ((($0)) + 3944 | 0);
                    $32 = HEAP32[$31 >> 2] | 0;
                    $33 = (($32) + ($6) | 0);
                    $34 = HEAP8[$33 >> 0] | 0;
                    $35 = ($34 << 24 >> 24) == (0);
                    $36 = ((($0)) + 3964 | 0);
                    $37 = HEAP32[$36 >> 2] | 0;
                    if ($35) {
                        $38 = (($37) + (($6 * 24) | 0) | 0);
                        $39 = HEAP32[$38 >> 2] | 0;
                        $40 = (((($37) + (($6 * 24) | 0) | 0)) + 4 | 0);
                        $41 = HEAP32[$40 >> 2] | 0;
                        $42 = (((($37) + (($6 * 24) | 0) | 0)) + 8 | 0);
                        $43 = HEAP32[$42 >> 2] | 0;
                        $44 = (((($37) + (($6 * 24) | 0) | 0)) + 12 | 0);
                        $45 = HEAP32[$44 >> 2] | 0;
                        $46 = $39 & 255;
                        $47 = (((($37) + (($6 * 24) | 0) | 0)) + 1 | 0);
                        $48 = HEAP8[$47 >> 0] | 0;
                        $49 = $48 | $46;
                        $50 = $49 << 24 >> 24;
                        $51 = $50 << 1;
                        $52 = $51 & 255;
                        $53 = ((($4)) + 4 | 0);
                        HEAP8[$53 >> 0] = $52;
                        $54 = HEAP8[$47 >> 0] | 0;
                        $55 = (((($37) + (($6 * 24) | 0) | 0)) + 2 | 0);
                        $56 = HEAP8[$55 >> 0] | 0;
                        $57 = $56 | $54;
                        $58 = $57 << 24 >> 24;
                        $59 = $58 << 1;
                        $60 = $59 & 255;
                        $61 = ((($4)) + 8 | 0);
                        HEAP8[$61 >> 0] = $60;
                        $62 = HEAP8[$55 >> 0] | 0;
                        $63 = (((($37) + (($6 * 24) | 0) | 0)) + 3 | 0);
                        $64 = HEAP8[$63 >> 0] | 0;
                        $65 = $64 | $62;
                        $66 = $65 << 24 >> 24;
                        $67 = $66 << 1;
                        $68 = $67 & 255;
                        $69 = ((($4)) + 12 | 0);
                        HEAP8[$69 >> 0] = $68;
                        $70 = HEAP8[$40 >> 0] | 0;
                        $71 = (((($37) + (($6 * 24) | 0) | 0)) + 5 | 0);
                        $72 = HEAP8[$71 >> 0] | 0;
                        $73 = $72 | $70;
                        $74 = $73 << 24 >> 24;
                        $75 = $74 << 1;
                        $76 = $75 & 255;
                        $77 = ((($4)) + 5 | 0);
                        HEAP8[$77 >> 0] = $76;
                        $78 = HEAP8[$71 >> 0] | 0;
                        $79 = (((($37) + (($6 * 24) | 0) | 0)) + 6 | 0);
                        $80 = HEAP8[$79 >> 0] | 0;
                        $81 = $80 | $78;
                        $82 = $81 << 24 >> 24;
                        $83 = $82 << 1;
                        $84 = $83 & 255;
                        $85 = ((($4)) + 9 | 0);
                        HEAP8[$85 >> 0] = $84;
                        $86 = HEAP8[$79 >> 0] | 0;
                        $87 = (((($37) + (($6 * 24) | 0) | 0)) + 7 | 0);
                        $88 = HEAP8[$87 >> 0] | 0;
                        $89 = $88 | $86;
                        $90 = $89 << 24 >> 24;
                        $91 = $90 << 1;
                        $92 = $91 & 255;
                        $93 = ((($4)) + 13 | 0);
                        HEAP8[$93 >> 0] = $92;
                        $94 = $41 | $39;
                        $95 = $94 << 1;
                        $96 = ((($4)) + 20 | 0);
                        HEAP32[$96 >> 2] = $95;
                        $97 = HEAP8[$42 >> 0] | 0;
                        $98 = (((($37) + (($6 * 24) | 0) | 0)) + 9 | 0);
                        $99 = HEAP8[$98 >> 0] | 0;
                        $100 = $99 | $97;
                        $101 = $100 << 24 >> 24;
                        $102 = $101 << 1;
                        $103 = $102 & 255;
                        $104 = ((($4)) + 6 | 0);
                        HEAP8[$104 >> 0] = $103;
                        $105 = HEAP8[$98 >> 0] | 0;
                        $106 = (((($37) + (($6 * 24) | 0) | 0)) + 10 | 0);
                        $107 = HEAP8[$106 >> 0] | 0;
                        $108 = $107 | $105;
                        $109 = $108 << 24 >> 24;
                        $110 = $109 << 1;
                        $111 = $110 & 255;
                        $112 = ((($4)) + 10 | 0);
                        HEAP8[$112 >> 0] = $111;
                        $113 = HEAP8[$106 >> 0] | 0;
                        $114 = (((($37) + (($6 * 24) | 0) | 0)) + 11 | 0);
                        $115 = HEAP8[$114 >> 0] | 0;
                        $116 = $115 | $113;
                        $117 = $116 << 24 >> 24;
                        $118 = $117 << 1;
                        $119 = $118 & 255;
                        $120 = ((($4)) + 14 | 0);
                        HEAP8[$120 >> 0] = $119;
                        $121 = $43 | $41;
                        $122 = $121 << 1;
                        $123 = ((($4)) + 24 | 0);
                        HEAP32[$123 >> 2] = $122;
                        $124 = HEAP8[$44 >> 0] | 0;
                        $125 = (((($37) + (($6 * 24) | 0) | 0)) + 13 | 0);
                        $126 = HEAP8[$125 >> 0] | 0;
                        $127 = $126 | $124;
                        $128 = $127 << 24 >> 24;
                        $129 = $128 << 1;
                        $130 = $129 & 255;
                        $131 = ((($4)) + 7 | 0);
                        HEAP8[$131 >> 0] = $130;
                        $132 = HEAP8[$125 >> 0] | 0;
                        $133 = (((($37) + (($6 * 24) | 0) | 0)) + 14 | 0);
                        $134 = HEAP8[$133 >> 0] | 0;
                        $135 = $134 | $132;
                        $136 = $135 << 24 >> 24;
                        $137 = $136 << 1;
                        $138 = $137 & 255;
                        $139 = ((($4)) + 11 | 0);
                        HEAP8[$139 >> 0] = $138;
                        $140 = HEAP8[$133 >> 0] | 0;
                        $141 = (((($37) + (($6 * 24) | 0) | 0)) + 15 | 0);
                        $142 = HEAP8[$141 >> 0] | 0;
                        $143 = $142 | $140;
                        $144 = $143 << 24 >> 24;
                        $145 = $144 << 1;
                        $146 = $145 & 255;
                        $147 = ((($4)) + 15 | 0);
                        HEAP8[$147 >> 0] = $146;
                        $148 = $45 | $43;
                        $149 = $148 << 1;
                        $150 = ((($4)) + 28 | 0);
                        HEAP32[$150 >> 2] = $149;
                        break L13;
                    } else {
                        $151 = HEAP8[10951] | 0;
                        $152 = $151 & 255;
                        $153 = ((($37) + (($6 * 24) | 0) | 0) + ($152) | 0);
                        $154 = HEAP8[$153 >> 0] | 0;
                        $155 = HEAP8[(10952) >> 0] | 0;
                        $156 = $155 & 255;
                        $157 = ((($37) + (($6 * 24) | 0) | 0) + ($156) | 0);
                        $158 = HEAP8[$157 >> 0] | 0;
                        $159 = $158 | $154;
                        $160 = HEAP8[(10953) >> 0] | 0;
                        $161 = $160 & 255;
                        $162 = ((($37) + (($6 * 24) | 0) | 0) + ($161) | 0);
                        $163 = HEAP8[$162 >> 0] | 0;
                        $164 = $159 | $163;
                        $165 = HEAP8[(10954) >> 0] | 0;
                        $166 = $165 & 255;
                        $167 = ((($37) + (($6 * 24) | 0) | 0) + ($166) | 0);
                        $168 = HEAP8[$167 >> 0] | 0;
                        $169 = $164 | $168;
                        $170 = HEAP8[(10955) >> 0] | 0;
                        $171 = $170 & 255;
                        $172 = ((($37) + (($6 * 24) | 0) | 0) + ($171) | 0);
                        $173 = HEAP8[$172 >> 0] | 0;
                        $174 = HEAP8[(10956) >> 0] | 0;
                        $175 = $174 & 255;
                        $176 = ((($37) + (($6 * 24) | 0) | 0) + ($175) | 0);
                        $177 = HEAP8[$176 >> 0] | 0;
                        $178 = $177 | $173;
                        $179 = HEAP8[(10957) >> 0] | 0;
                        $180 = $179 & 255;
                        $181 = ((($37) + (($6 * 24) | 0) | 0) + ($180) | 0);
                        $182 = HEAP8[$181 >> 0] | 0;
                        $183 = $178 | $182;
                        $184 = HEAP8[(10958) >> 0] | 0;
                        $185 = $184 & 255;
                        $186 = ((($37) + (($6 * 24) | 0) | 0) + ($185) | 0);
                        $187 = HEAP8[$186 >> 0] | 0;
                        $188 = $183 | $187;
                        $189 = HEAP8[(10959) >> 0] | 0;
                        $190 = $189 & 255;
                        $191 = ((($37) + (($6 * 24) | 0) | 0) + ($190) | 0);
                        $192 = HEAP8[$191 >> 0] | 0;
                        $193 = HEAP8[(10960) >> 0] | 0;
                        $194 = $193 & 255;
                        $195 = ((($37) + (($6 * 24) | 0) | 0) + ($194) | 0);
                        $196 = HEAP8[$195 >> 0] | 0;
                        $197 = $196 | $192;
                        $198 = HEAP8[(10961) >> 0] | 0;
                        $199 = $198 & 255;
                        $200 = ((($37) + (($6 * 24) | 0) | 0) + ($199) | 0);
                        $201 = HEAP8[$200 >> 0] | 0;
                        $202 = $197 | $201;
                        $203 = HEAP8[(10962) >> 0] | 0;
                        $204 = $203 & 255;
                        $205 = ((($37) + (($6 * 24) | 0) | 0) + ($204) | 0);
                        $206 = HEAP8[$205 >> 0] | 0;
                        $207 = $202 | $206;
                        $208 = HEAP8[(10963) >> 0] | 0;
                        $209 = $208 & 255;
                        $210 = ((($37) + (($6 * 24) | 0) | 0) + ($209) | 0);
                        $211 = HEAP8[$210 >> 0] | 0;
                        $212 = HEAP8[(10964) >> 0] | 0;
                        $213 = $212 & 255;
                        $214 = ((($37) + (($6 * 24) | 0) | 0) + ($213) | 0);
                        $215 = HEAP8[$214 >> 0] | 0;
                        $216 = $215 | $211;
                        $217 = HEAP8[(10965) >> 0] | 0;
                        $218 = $217 & 255;
                        $219 = ((($37) + (($6 * 24) | 0) | 0) + ($218) | 0);
                        $220 = HEAP8[$219 >> 0] | 0;
                        $221 = $216 | $220;
                        $222 = HEAP8[(10966) >> 0] | 0;
                        $223 = $222 & 255;
                        $224 = ((($37) + (($6 * 24) | 0) | 0) + ($223) | 0);
                        $225 = HEAP8[$224 >> 0] | 0;
                        $226 = $221 | $225;
                        $227 = $188 | $169;
                        $228 = $227 << 24 >> 24;
                        $229 = $228 << 1;
                        $230 = $229 & 255;
                        $231 = ((($4)) + 9 | 0);
                        HEAP8[$231 >> 0] = $230;
                        $232 = ((($4)) + 8 | 0);
                        HEAP8[$232 >> 0] = $230;
                        $233 = $226 | $207;
                        $234 = $233 << 24 >> 24;
                        $235 = $234 << 1;
                        $236 = $235 & 255;
                        $237 = ((($4)) + 11 | 0);
                        HEAP8[$237 >> 0] = $236;
                        $238 = ((($4)) + 10 | 0);
                        HEAP8[$238 >> 0] = $236;
                        $239 = $207 | $169;
                        $240 = $239 << 24 >> 24;
                        $241 = $240 << 1;
                        $242 = $241 & 255;
                        $243 = ((($4)) + 25 | 0);
                        HEAP8[$243 >> 0] = $242;
                        $244 = ((($4)) + 24 | 0);
                        HEAP8[$244 >> 0] = $242;
                        $245 = $226 | $188;
                        $246 = $245 << 24 >> 24;
                        $247 = $246 << 1;
                        $248 = $247 & 255;
                        $249 = ((($4)) + 27 | 0);
                        HEAP8[$249 >> 0] = $248;
                        $250 = ((($4)) + 26 | 0);
                        HEAP8[$250 >> 0] = $248;
                        break L13;
                    }
                    break;
                }
                default: {
                    $251 = ((($0)) + 3964 | 0);
                    $252 = HEAP32[$251 >> 2] | 0;
                    $253 = ((($0)) + 3932 | 0);
                    $254 = HEAP32[$253 >> 2] | 0;
                    $255 = (($254) + ($6 << 4) | 0);
                    $256 = ((($3)) + 3 | 0);
                    $257 = $256;
                    $258 = $257 & 3;
                    $259 = (0 - ($258)) | 0;
                    $260 = (($256) + ($259) | 0);
                    $261 = ((($0)) + 3944 | 0);
                    $262 = HEAP32[$261 >> 2] | 0;
                    $263 = (($262) + ($6) | 0);
                    $264 = HEAP8[$263 >> 0] | 0;
                    $265 = ($264 << 24 >> 24) == (0);
                    if ($265) {
                        $493 = (($252) + (($6 * 24) | 0) | 0);
                        $494 = HEAP32[$493 >> 2] | 0;
                        $495 = (((($252) + (($6 * 24) | 0) | 0)) + 4 | 0);
                        $496 = HEAP32[$495 >> 2] | 0;
                        $497 = (((($252) + (($6 * 24) | 0) | 0)) + 8 | 0);
                        $498 = HEAP32[$497 >> 2] | 0;
                        $499 = (((($252) + (($6 * 24) | 0) | 0)) + 12 | 0);
                        $500 = HEAP32[$499 >> 2] | 0;
                        $501 = $494 & 255;
                        $502 = (((($252) + (($6 * 24) | 0) | 0)) + 1 | 0);
                        $503 = HEAP8[$502 >> 0] | 0;
                        $504 = $503 | $501;
                        HEAP8[$260 >> 0] = $504;
                        $505 = (((($252) + (($6 * 24) | 0) | 0)) + 2 | 0);
                        $506 = HEAP8[$505 >> 0] | 0;
                        $507 = $506 | $503;
                        $508 = ((($260)) + 1 | 0);
                        HEAP8[$508 >> 0] = $507;
                        $509 = (((($252) + (($6 * 24) | 0) | 0)) + 3 | 0);
                        $510 = HEAP8[$509 >> 0] | 0;
                        $511 = $510 | $506;
                        $512 = ((($260)) + 2 | 0);
                        HEAP8[$512 >> 0] = $511;
                        $513 = $504 & 255;
                        $514 = (((($254) + ($6 << 4) | 0)) + 1 | 0);
                        $515 = HEAP8[$514 >> 0] | 0;
                        $516 = HEAP8[$255 >> 0] | 0;
                        $517 = ($515 << 24 >> 24) == ($516 << 24 >> 24);
                        if ($517) {
                            $518 = ((($0)) + 3916 | 0);
                            $519 = HEAP32[$518 >> 2] | 0;
                            $520 = (((($519) + ($6 << 6) | 0)) + 4 | 0);
                            $521 = HEAP16[$520 >> 1] | 0;
                            $522 = $521 << 16 >> 16;
                            $523 = (($519) + ($6 << 6) | 0);
                            $524 = HEAP16[$523 >> 1] | 0;
                            $525 = $524 << 16 >> 16;
                            $526 = (($522) - ($525)) | 0;
                            $527 = $526 >> 31;
                            $528 = $527 ^ $526;
                            $529 = (($528) - ($527)) | 0;
                            $530 = (((($519) + ($6 << 6) | 0)) + 6 | 0);
                            $531 = HEAP16[$530 >> 1] | 0;
                            $532 = $531 << 16 >> 16;
                            $533 = (((($519) + ($6 << 6) | 0)) + 2 | 0);
                            $534 = HEAP16[$533 >> 1] | 0;
                            $535 = $534 << 16 >> 16;
                            $536 = (($532) - ($535)) | 0;
                            $537 = $536 >> 31;
                            $538 = $537 ^ $536;
                            $539 = (($538) - ($537)) | 0;
                            $540 = $539 | $529;
                            $541 = ($540 >>> 0) > (3);
                            $543 = $541;
                        } else {
                            $543 = 1;
                        }
                        $542 = $543 & 1;
                        $544 = $542 | $513;
                        $545 = ($504 << 24 >> 24) != (0);
                        $546 = $545 & 1;
                        $547 = $544 << $546;
                        $548 = $547 & 255;
                        $549 = ((($4)) + 4 | 0);
                        HEAP8[$549 >> 0] = $548;
                        $550 = $507 & 255;
                        $551 = (((($254) + ($6 << 4) | 0)) + 2 | 0);
                        $552 = HEAP8[$551 >> 0] | 0;
                        $553 = HEAP8[$514 >> 0] | 0;
                        $554 = ($552 << 24 >> 24) == ($553 << 24 >> 24);
                        if ($554) {
                            $555 = ((($0)) + 3916 | 0);
                            $556 = HEAP32[$555 >> 2] | 0;
                            $557 = (((($556) + ($6 << 6) | 0)) + 8 | 0);
                            $558 = HEAP16[$557 >> 1] | 0;
                            $559 = $558 << 16 >> 16;
                            $560 = (((($556) + ($6 << 6) | 0)) + 4 | 0);
                            $561 = HEAP16[$560 >> 1] | 0;
                            $562 = $561 << 16 >> 16;
                            $563 = (($559) - ($562)) | 0;
                            $564 = $563 >> 31;
                            $565 = $564 ^ $563;
                            $566 = (($565) - ($564)) | 0;
                            $567 = (((($556) + ($6 << 6) | 0)) + 10 | 0);
                            $568 = HEAP16[$567 >> 1] | 0;
                            $569 = $568 << 16 >> 16;
                            $570 = (((($556) + ($6 << 6) | 0)) + 6 | 0);
                            $571 = HEAP16[$570 >> 1] | 0;
                            $572 = $571 << 16 >> 16;
                            $573 = (($569) - ($572)) | 0;
                            $574 = $573 >> 31;
                            $575 = $574 ^ $573;
                            $576 = (($575) - ($574)) | 0;
                            $577 = $576 | $566;
                            $578 = ($577 >>> 0) > (3);
                            $580 = $578;
                        } else {
                            $580 = 1;
                        }
                        $579 = $580 & 1;
                        $581 = $579 | $550;
                        $582 = ($507 << 24 >> 24) != (0);
                        $583 = $582 & 1;
                        $584 = $581 << $583;
                        $585 = $584 & 255;
                        $586 = ((($4)) + 8 | 0);
                        HEAP8[$586 >> 0] = $585;
                        $587 = $511 & 255;
                        $588 = (((($254) + ($6 << 4) | 0)) + 3 | 0);
                        $589 = HEAP8[$588 >> 0] | 0;
                        $590 = HEAP8[$551 >> 0] | 0;
                        $591 = ($589 << 24 >> 24) == ($590 << 24 >> 24);
                        if ($591) {
                            $592 = ((($0)) + 3916 | 0);
                            $593 = HEAP32[$592 >> 2] | 0;
                            $594 = (((($593) + ($6 << 6) | 0)) + 12 | 0);
                            $595 = HEAP16[$594 >> 1] | 0;
                            $596 = $595 << 16 >> 16;
                            $597 = (((($593) + ($6 << 6) | 0)) + 8 | 0);
                            $598 = HEAP16[$597 >> 1] | 0;
                            $599 = $598 << 16 >> 16;
                            $600 = (($596) - ($599)) | 0;
                            $601 = $600 >> 31;
                            $602 = $601 ^ $600;
                            $603 = (($602) - ($601)) | 0;
                            $604 = (((($593) + ($6 << 6) | 0)) + 14 | 0);
                            $605 = HEAP16[$604 >> 1] | 0;
                            $606 = $605 << 16 >> 16;
                            $607 = (((($593) + ($6 << 6) | 0)) + 10 | 0);
                            $608 = HEAP16[$607 >> 1] | 0;
                            $609 = $608 << 16 >> 16;
                            $610 = (($606) - ($609)) | 0;
                            $611 = $610 >> 31;
                            $612 = $611 ^ $610;
                            $613 = (($612) - ($611)) | 0;
                            $614 = $613 | $603;
                            $615 = ($614 >>> 0) > (3);
                            $617 = $615;
                        } else {
                            $617 = 1;
                        }
                        $616 = $617 & 1;
                        $618 = $616 | $587;
                        $619 = ($511 << 24 >> 24) != (0);
                        $620 = $619 & 1;
                        $621 = $618 << $620;
                        $622 = $621 & 255;
                        $623 = ((($4)) + 12 | 0);
                        HEAP8[$623 >> 0] = $622;
                        $624 = HEAP8[$495 >> 0] | 0;
                        $625 = (((($252) + (($6 * 24) | 0) | 0)) + 5 | 0);
                        $626 = HEAP8[$625 >> 0] | 0;
                        $627 = $626 | $624;
                        HEAP8[$260 >> 0] = $627;
                        $628 = (((($252) + (($6 * 24) | 0) | 0)) + 6 | 0);
                        $629 = HEAP8[$628 >> 0] | 0;
                        $630 = $629 | $626;
                        HEAP8[$508 >> 0] = $630;
                        $631 = (((($252) + (($6 * 24) | 0) | 0)) + 7 | 0);
                        $632 = HEAP8[$631 >> 0] | 0;
                        $633 = $632 | $629;
                        HEAP8[$512 >> 0] = $633;
                        $634 = $627 & 255;
                        $635 = (((($254) + ($6 << 4) | 0)) + 5 | 0);
                        $636 = HEAP8[$635 >> 0] | 0;
                        $637 = (((($254) + ($6 << 4) | 0)) + 4 | 0);
                        $638 = HEAP8[$637 >> 0] | 0;
                        $639 = ($636 << 24 >> 24) == ($638 << 24 >> 24);
                        if ($639) {
                            $640 = ((($0)) + 3916 | 0);
                            $641 = HEAP32[$640 >> 2] | 0;
                            $642 = (((($641) + ($6 << 6) | 0)) + 20 | 0);
                            $643 = HEAP16[$642 >> 1] | 0;
                            $644 = $643 << 16 >> 16;
                            $645 = (((($641) + ($6 << 6) | 0)) + 16 | 0);
                            $646 = HEAP16[$645 >> 1] | 0;
                            $647 = $646 << 16 >> 16;
                            $648 = (($644) - ($647)) | 0;
                            $649 = $648 >> 31;
                            $650 = $649 ^ $648;
                            $651 = (($650) - ($649)) | 0;
                            $652 = (((($641) + ($6 << 6) | 0)) + 22 | 0);
                            $653 = HEAP16[$652 >> 1] | 0;
                            $654 = $653 << 16 >> 16;
                            $655 = (((($641) + ($6 << 6) | 0)) + 18 | 0);
                            $656 = HEAP16[$655 >> 1] | 0;
                            $657 = $656 << 16 >> 16;
                            $658 = (($654) - ($657)) | 0;
                            $659 = $658 >> 31;
                            $660 = $659 ^ $658;
                            $661 = (($660) - ($659)) | 0;
                            $662 = $661 | $651;
                            $663 = ($662 >>> 0) > (3);
                            $665 = $663;
                        } else {
                            $665 = 1;
                        }
                        $664 = $665 & 1;
                        $666 = $664 | $634;
                        $667 = ($627 << 24 >> 24) != (0);
                        $668 = $667 & 1;
                        $669 = $666 << $668;
                        $670 = $669 & 255;
                        $671 = ((($4)) + 5 | 0);
                        HEAP8[$671 >> 0] = $670;
                        $672 = $630 & 255;
                        $673 = (((($254) + ($6 << 4) | 0)) + 6 | 0);
                        $674 = HEAP8[$673 >> 0] | 0;
                        $675 = HEAP8[$635 >> 0] | 0;
                        $676 = ($674 << 24 >> 24) == ($675 << 24 >> 24);
                        if ($676) {
                            $677 = ((($0)) + 3916 | 0);
                            $678 = HEAP32[$677 >> 2] | 0;
                            $679 = (((($678) + ($6 << 6) | 0)) + 24 | 0);
                            $680 = HEAP16[$679 >> 1] | 0;
                            $681 = $680 << 16 >> 16;
                            $682 = (((($678) + ($6 << 6) | 0)) + 20 | 0);
                            $683 = HEAP16[$682 >> 1] | 0;
                            $684 = $683 << 16 >> 16;
                            $685 = (($681) - ($684)) | 0;
                            $686 = $685 >> 31;
                            $687 = $686 ^ $685;
                            $688 = (($687) - ($686)) | 0;
                            $689 = (((($678) + ($6 << 6) | 0)) + 26 | 0);
                            $690 = HEAP16[$689 >> 1] | 0;
                            $691 = $690 << 16 >> 16;
                            $692 = (((($678) + ($6 << 6) | 0)) + 22 | 0);
                            $693 = HEAP16[$692 >> 1] | 0;
                            $694 = $693 << 16 >> 16;
                            $695 = (($691) - ($694)) | 0;
                            $696 = $695 >> 31;
                            $697 = $696 ^ $695;
                            $698 = (($697) - ($696)) | 0;
                            $699 = $698 | $688;
                            $700 = ($699 >>> 0) > (3);
                            $702 = $700;
                        } else {
                            $702 = 1;
                        }
                        $701 = $702 & 1;
                        $703 = $701 | $672;
                        $704 = ($630 << 24 >> 24) != (0);
                        $705 = $704 & 1;
                        $706 = $703 << $705;
                        $707 = $706 & 255;
                        $708 = ((($4)) + 9 | 0);
                        HEAP8[$708 >> 0] = $707;
                        $709 = $633 & 255;
                        $710 = (((($254) + ($6 << 4) | 0)) + 7 | 0);
                        $711 = HEAP8[$710 >> 0] | 0;
                        $712 = HEAP8[$673 >> 0] | 0;
                        $713 = ($711 << 24 >> 24) == ($712 << 24 >> 24);
                        if ($713) {
                            $714 = ((($0)) + 3916 | 0);
                            $715 = HEAP32[$714 >> 2] | 0;
                            $716 = (((($715) + ($6 << 6) | 0)) + 28 | 0);
                            $717 = HEAP16[$716 >> 1] | 0;
                            $718 = $717 << 16 >> 16;
                            $719 = (((($715) + ($6 << 6) | 0)) + 24 | 0);
                            $720 = HEAP16[$719 >> 1] | 0;
                            $721 = $720 << 16 >> 16;
                            $722 = (($718) - ($721)) | 0;
                            $723 = $722 >> 31;
                            $724 = $723 ^ $722;
                            $725 = (($724) - ($723)) | 0;
                            $726 = (((($715) + ($6 << 6) | 0)) + 30 | 0);
                            $727 = HEAP16[$726 >> 1] | 0;
                            $728 = $727 << 16 >> 16;
                            $729 = (((($715) + ($6 << 6) | 0)) + 26 | 0);
                            $730 = HEAP16[$729 >> 1] | 0;
                            $731 = $730 << 16 >> 16;
                            $732 = (($728) - ($731)) | 0;
                            $733 = $732 >> 31;
                            $734 = $733 ^ $732;
                            $735 = (($734) - ($733)) | 0;
                            $736 = $735 | $725;
                            $737 = ($736 >>> 0) > (3);
                            $739 = $737;
                        } else {
                            $739 = 1;
                        }
                        $738 = $739 & 1;
                        $740 = $738 | $709;
                        $741 = ($633 << 24 >> 24) != (0);
                        $742 = $741 & 1;
                        $743 = $740 << $742;
                        $744 = $743 & 255;
                        $745 = ((($4)) + 13 | 0);
                        HEAP8[$745 >> 0] = $744;
                        $746 = HEAP8[$497 >> 0] | 0;
                        $747 = (((($252) + (($6 * 24) | 0) | 0)) + 9 | 0);
                        $748 = HEAP8[$747 >> 0] | 0;
                        $749 = $748 | $746;
                        HEAP8[$260 >> 0] = $749;
                        $750 = (((($252) + (($6 * 24) | 0) | 0)) + 10 | 0);
                        $751 = HEAP8[$750 >> 0] | 0;
                        $752 = $751 | $748;
                        HEAP8[$508 >> 0] = $752;
                        $753 = (((($252) + (($6 * 24) | 0) | 0)) + 11 | 0);
                        $754 = HEAP8[$753 >> 0] | 0;
                        $755 = $754 | $751;
                        HEAP8[$512 >> 0] = $755;
                        $756 = $749 & 255;
                        $757 = (((($254) + ($6 << 4) | 0)) + 9 | 0);
                        $758 = HEAP8[$757 >> 0] | 0;
                        $759 = (((($254) + ($6 << 4) | 0)) + 8 | 0);
                        $760 = HEAP8[$759 >> 0] | 0;
                        $761 = ($758 << 24 >> 24) == ($760 << 24 >> 24);
                        if ($761) {
                            $762 = ((($0)) + 3916 | 0);
                            $763 = HEAP32[$762 >> 2] | 0;
                            $764 = (((($763) + ($6 << 6) | 0)) + 36 | 0);
                            $765 = HEAP16[$764 >> 1] | 0;
                            $766 = $765 << 16 >> 16;
                            $767 = (((($763) + ($6 << 6) | 0)) + 32 | 0);
                            $768 = HEAP16[$767 >> 1] | 0;
                            $769 = $768 << 16 >> 16;
                            $770 = (($766) - ($769)) | 0;
                            $771 = $770 >> 31;
                            $772 = $771 ^ $770;
                            $773 = (($772) - ($771)) | 0;
                            $774 = (((($763) + ($6 << 6) | 0)) + 38 | 0);
                            $775 = HEAP16[$774 >> 1] | 0;
                            $776 = $775 << 16 >> 16;
                            $777 = (((($763) + ($6 << 6) | 0)) + 34 | 0);
                            $778 = HEAP16[$777 >> 1] | 0;
                            $779 = $778 << 16 >> 16;
                            $780 = (($776) - ($779)) | 0;
                            $781 = $780 >> 31;
                            $782 = $781 ^ $780;
                            $783 = (($782) - ($781)) | 0;
                            $784 = $783 | $773;
                            $785 = ($784 >>> 0) > (3);
                            $787 = $785;
                        } else {
                            $787 = 1;
                        }
                        $786 = $787 & 1;
                        $788 = $786 | $756;
                        $789 = ($749 << 24 >> 24) != (0);
                        $790 = $789 & 1;
                        $791 = $788 << $790;
                        $792 = $791 & 255;
                        $793 = ((($4)) + 6 | 0);
                        HEAP8[$793 >> 0] = $792;
                        $794 = $752 & 255;
                        $795 = (((($254) + ($6 << 4) | 0)) + 10 | 0);
                        $796 = HEAP8[$795 >> 0] | 0;
                        $797 = HEAP8[$757 >> 0] | 0;
                        $798 = ($796 << 24 >> 24) == ($797 << 24 >> 24);
                        if ($798) {
                            $799 = ((($0)) + 3916 | 0);
                            $800 = HEAP32[$799 >> 2] | 0;
                            $801 = (((($800) + ($6 << 6) | 0)) + 40 | 0);
                            $802 = HEAP16[$801 >> 1] | 0;
                            $803 = $802 << 16 >> 16;
                            $804 = (((($800) + ($6 << 6) | 0)) + 36 | 0);
                            $805 = HEAP16[$804 >> 1] | 0;
                            $806 = $805 << 16 >> 16;
                            $807 = (($803) - ($806)) | 0;
                            $808 = $807 >> 31;
                            $809 = $808 ^ $807;
                            $810 = (($809) - ($808)) | 0;
                            $811 = (((($800) + ($6 << 6) | 0)) + 42 | 0);
                            $812 = HEAP16[$811 >> 1] | 0;
                            $813 = $812 << 16 >> 16;
                            $814 = (((($800) + ($6 << 6) | 0)) + 38 | 0);
                            $815 = HEAP16[$814 >> 1] | 0;
                            $816 = $815 << 16 >> 16;
                            $817 = (($813) - ($816)) | 0;
                            $818 = $817 >> 31;
                            $819 = $818 ^ $817;
                            $820 = (($819) - ($818)) | 0;
                            $821 = $820 | $810;
                            $822 = ($821 >>> 0) > (3);
                            $824 = $822;
                        } else {
                            $824 = 1;
                        }
                        $823 = $824 & 1;
                        $825 = $823 | $794;
                        $826 = ($752 << 24 >> 24) != (0);
                        $827 = $826 & 1;
                        $828 = $825 << $827;
                        $829 = $828 & 255;
                        $830 = ((($4)) + 10 | 0);
                        HEAP8[$830 >> 0] = $829;
                        $831 = $755 & 255;
                        $832 = (((($254) + ($6 << 4) | 0)) + 11 | 0);
                        $833 = HEAP8[$832 >> 0] | 0;
                        $834 = HEAP8[$795 >> 0] | 0;
                        $835 = ($833 << 24 >> 24) == ($834 << 24 >> 24);
                        if ($835) {
                            $836 = ((($0)) + 3916 | 0);
                            $837 = HEAP32[$836 >> 2] | 0;
                            $838 = (((($837) + ($6 << 6) | 0)) + 44 | 0);
                            $839 = HEAP16[$838 >> 1] | 0;
                            $840 = $839 << 16 >> 16;
                            $841 = (((($837) + ($6 << 6) | 0)) + 40 | 0);
                            $842 = HEAP16[$841 >> 1] | 0;
                            $843 = $842 << 16 >> 16;
                            $844 = (($840) - ($843)) | 0;
                            $845 = $844 >> 31;
                            $846 = $845 ^ $844;
                            $847 = (($846) - ($845)) | 0;
                            $848 = (((($837) + ($6 << 6) | 0)) + 46 | 0);
                            $849 = HEAP16[$848 >> 1] | 0;
                            $850 = $849 << 16 >> 16;
                            $851 = (((($837) + ($6 << 6) | 0)) + 42 | 0);
                            $852 = HEAP16[$851 >> 1] | 0;
                            $853 = $852 << 16 >> 16;
                            $854 = (($850) - ($853)) | 0;
                            $855 = $854 >> 31;
                            $856 = $855 ^ $854;
                            $857 = (($856) - ($855)) | 0;
                            $858 = $857 | $847;
                            $859 = ($858 >>> 0) > (3);
                            $861 = $859;
                        } else {
                            $861 = 1;
                        }
                        $860 = $861 & 1;
                        $862 = $860 | $831;
                        $863 = ($755 << 24 >> 24) != (0);
                        $864 = $863 & 1;
                        $865 = $862 << $864;
                        $866 = $865 & 255;
                        $867 = ((($4)) + 14 | 0);
                        HEAP8[$867 >> 0] = $866;
                        $868 = HEAP8[$499 >> 0] | 0;
                        $869 = (((($252) + (($6 * 24) | 0) | 0)) + 13 | 0);
                        $870 = HEAP8[$869 >> 0] | 0;
                        $871 = $870 | $868;
                        HEAP8[$260 >> 0] = $871;
                        $872 = (((($252) + (($6 * 24) | 0) | 0)) + 14 | 0);
                        $873 = HEAP8[$872 >> 0] | 0;
                        $874 = $873 | $870;
                        HEAP8[$508 >> 0] = $874;
                        $875 = (((($252) + (($6 * 24) | 0) | 0)) + 15 | 0);
                        $876 = HEAP8[$875 >> 0] | 0;
                        $877 = $876 | $873;
                        HEAP8[$512 >> 0] = $877;
                        $878 = $871 & 255;
                        $879 = (((($254) + ($6 << 4) | 0)) + 13 | 0);
                        $880 = HEAP8[$879 >> 0] | 0;
                        $881 = (((($254) + ($6 << 4) | 0)) + 12 | 0);
                        $882 = HEAP8[$881 >> 0] | 0;
                        $883 = ($880 << 24 >> 24) == ($882 << 24 >> 24);
                        if ($883) {
                            $884 = ((($0)) + 3916 | 0);
                            $885 = HEAP32[$884 >> 2] | 0;
                            $886 = (((($885) + ($6 << 6) | 0)) + 52 | 0);
                            $887 = HEAP16[$886 >> 1] | 0;
                            $888 = $887 << 16 >> 16;
                            $889 = (((($885) + ($6 << 6) | 0)) + 48 | 0);
                            $890 = HEAP16[$889 >> 1] | 0;
                            $891 = $890 << 16 >> 16;
                            $892 = (($888) - ($891)) | 0;
                            $893 = $892 >> 31;
                            $894 = $893 ^ $892;
                            $895 = (($894) - ($893)) | 0;
                            $896 = (((($885) + ($6 << 6) | 0)) + 54 | 0);
                            $897 = HEAP16[$896 >> 1] | 0;
                            $898 = $897 << 16 >> 16;
                            $899 = (((($885) + ($6 << 6) | 0)) + 50 | 0);
                            $900 = HEAP16[$899 >> 1] | 0;
                            $901 = $900 << 16 >> 16;
                            $902 = (($898) - ($901)) | 0;
                            $903 = $902 >> 31;
                            $904 = $903 ^ $902;
                            $905 = (($904) - ($903)) | 0;
                            $906 = $905 | $895;
                            $907 = ($906 >>> 0) > (3);
                            $phitmp$i = $907 & 1;
                            $909 = $phitmp$i;
                        } else {
                            $909 = 1;
                        }
                        $908 = $909 | $878;
                        $910 = ($871 << 24 >> 24) != (0);
                        $911 = $910 & 1;
                        $912 = $908 << $911;
                        $913 = $912 & 255;
                        $914 = ((($4)) + 7 | 0);
                        HEAP8[$914 >> 0] = $913;
                        $915 = $874 & 255;
                        $916 = (((($254) + ($6 << 4) | 0)) + 14 | 0);
                        $917 = HEAP8[$916 >> 0] | 0;
                        $918 = HEAP8[$879 >> 0] | 0;
                        $919 = ($917 << 24 >> 24) == ($918 << 24 >> 24);
                        if ($919) {
                            $920 = ((($0)) + 3916 | 0);
                            $921 = HEAP32[$920 >> 2] | 0;
                            $922 = (((($921) + ($6 << 6) | 0)) + 56 | 0);
                            $923 = HEAP16[$922 >> 1] | 0;
                            $924 = $923 << 16 >> 16;
                            $925 = (((($921) + ($6 << 6) | 0)) + 52 | 0);
                            $926 = HEAP16[$925 >> 1] | 0;
                            $927 = $926 << 16 >> 16;
                            $928 = (($924) - ($927)) | 0;
                            $929 = $928 >> 31;
                            $930 = $929 ^ $928;
                            $931 = (($930) - ($929)) | 0;
                            $932 = (((($921) + ($6 << 6) | 0)) + 58 | 0);
                            $933 = HEAP16[$932 >> 1] | 0;
                            $934 = $933 << 16 >> 16;
                            $935 = (((($921) + ($6 << 6) | 0)) + 54 | 0);
                            $936 = HEAP16[$935 >> 1] | 0;
                            $937 = $936 << 16 >> 16;
                            $938 = (($934) - ($937)) | 0;
                            $939 = $938 >> 31;
                            $940 = $939 ^ $938;
                            $941 = (($940) - ($939)) | 0;
                            $942 = $941 | $931;
                            $943 = ($942 >>> 0) > (3);
                            $phitmp901$i = $943 & 1;
                            $945 = $phitmp901$i;
                        } else {
                            $945 = 1;
                        }
                        $944 = $945 | $915;
                        $946 = ($874 << 24 >> 24) != (0);
                        $947 = $946 & 1;
                        $948 = $944 << $947;
                        $949 = $948 & 255;
                        $950 = ((($4)) + 11 | 0);
                        HEAP8[$950 >> 0] = $949;
                        $951 = $877 & 255;
                        $952 = (((($254) + ($6 << 4) | 0)) + 15 | 0);
                        $953 = HEAP8[$952 >> 0] | 0;
                        $954 = HEAP8[$916 >> 0] | 0;
                        $955 = ($953 << 24 >> 24) == ($954 << 24 >> 24);
                        if ($955) {
                            $956 = ((($0)) + 3916 | 0);
                            $957 = HEAP32[$956 >> 2] | 0;
                            $958 = (((($957) + ($6 << 6) | 0)) + 60 | 0);
                            $959 = HEAP16[$958 >> 1] | 0;
                            $960 = $959 << 16 >> 16;
                            $961 = (((($957) + ($6 << 6) | 0)) + 56 | 0);
                            $962 = HEAP16[$961 >> 1] | 0;
                            $963 = $962 << 16 >> 16;
                            $964 = (($960) - ($963)) | 0;
                            $965 = $964 >> 31;
                            $966 = $965 ^ $964;
                            $967 = (($966) - ($965)) | 0;
                            $968 = (((($957) + ($6 << 6) | 0)) + 62 | 0);
                            $969 = HEAP16[$968 >> 1] | 0;
                            $970 = $969 << 16 >> 16;
                            $971 = (((($957) + ($6 << 6) | 0)) + 58 | 0);
                            $972 = HEAP16[$971 >> 1] | 0;
                            $973 = $972 << 16 >> 16;
                            $974 = (($970) - ($973)) | 0;
                            $975 = $974 >> 31;
                            $976 = $975 ^ $974;
                            $977 = (($976) - ($975)) | 0;
                            $978 = $977 | $967;
                            $979 = ($978 >>> 0) > (3);
                            $phitmp902$i = $979 & 1;
                            $981 = $phitmp902$i;
                        } else {
                            $981 = 1;
                        }
                        $980 = $981 | $951;
                        $982 = ($877 << 24 >> 24) != (0);
                        $983 = $982 & 1;
                        $984 = $980 << $983;
                        $985 = $984 & 255;
                        $986 = ((($4)) + 15 | 0);
                        HEAP8[$986 >> 0] = $985;
                        $987 = $496 | $494;
                        HEAP32[$260 >> 2] = $987;
                        $988 = $987 & 255;
                        $989 = $987 & 255;
                        $990 = HEAP8[$637 >> 0] | 0;
                        $991 = HEAP8[$255 >> 0] | 0;
                        $992 = ($990 << 24 >> 24) == ($991 << 24 >> 24);
                        $993 = $987 >>> 8;
                        $994 = $993 & 255;
                        $995 = $987 >>> 16;
                        $996 = $995 & 255;
                        $997 = $987 >>> 24;
                        if ($992) {
                            $998 = ((($0)) + 3916 | 0);
                            $999 = HEAP32[$998 >> 2] | 0;
                            $1000 = (((($999) + ($6 << 6) | 0)) + 16 | 0);
                            $1001 = HEAP16[$1000 >> 1] | 0;
                            $1002 = $1001 << 16 >> 16;
                            $1003 = (($999) + ($6 << 6) | 0);
                            $1004 = HEAP16[$1003 >> 1] | 0;
                            $1005 = $1004 << 16 >> 16;
                            $1006 = (($1002) - ($1005)) | 0;
                            $1007 = $1006 >> 31;
                            $1008 = $1007 ^ $1006;
                            $1009 = (($1008) - ($1007)) | 0;
                            $1010 = (((($999) + ($6 << 6) | 0)) + 18 | 0);
                            $1011 = HEAP16[$1010 >> 1] | 0;
                            $1012 = $1011 << 16 >> 16;
                            $1013 = (((($999) + ($6 << 6) | 0)) + 2 | 0);
                            $1014 = HEAP16[$1013 >> 1] | 0;
                            $1015 = $1014 << 16 >> 16;
                            $1016 = (($1012) - ($1015)) | 0;
                            $1017 = $1016 >> 31;
                            $1018 = $1017 ^ $1016;
                            $1019 = (($1018) - ($1017)) | 0;
                            $1020 = $1019 | $1009;
                            $1021 = ($1020 >>> 0) > (3);
                            $phitmp903$i = $1021 & 1;
                            $1023 = $phitmp903$i;
                        } else {
                            $1023 = 1;
                        }
                        $1022 = $1023 | $989;
                        $1024 = ($988 << 24 >> 24) != (0);
                        $1025 = $1024 & 1;
                        $1026 = $1022 << $1025;
                        $1027 = $1026 & 255;
                        $1028 = ((($4)) + 20 | 0);
                        HEAP8[$1028 >> 0] = $1027;
                        $1029 = $993 & 255;
                        $1030 = HEAP8[$635 >> 0] | 0;
                        $1031 = HEAP8[$514 >> 0] | 0;
                        $1032 = ($1030 << 24 >> 24) == ($1031 << 24 >> 24);
                        if ($1032) {
                            $1033 = ((($0)) + 3916 | 0);
                            $1034 = HEAP32[$1033 >> 2] | 0;
                            $1035 = (((($1034) + ($6 << 6) | 0)) + 20 | 0);
                            $1036 = HEAP16[$1035 >> 1] | 0;
                            $1037 = $1036 << 16 >> 16;
                            $1038 = (((($1034) + ($6 << 6) | 0)) + 4 | 0);
                            $1039 = HEAP16[$1038 >> 1] | 0;
                            $1040 = $1039 << 16 >> 16;
                            $1041 = (($1037) - ($1040)) | 0;
                            $1042 = $1041 >> 31;
                            $1043 = $1042 ^ $1041;
                            $1044 = (($1043) - ($1042)) | 0;
                            $1045 = (((($1034) + ($6 << 6) | 0)) + 22 | 0);
                            $1046 = HEAP16[$1045 >> 1] | 0;
                            $1047 = $1046 << 16 >> 16;
                            $1048 = (((($1034) + ($6 << 6) | 0)) + 6 | 0);
                            $1049 = HEAP16[$1048 >> 1] | 0;
                            $1050 = $1049 << 16 >> 16;
                            $1051 = (($1047) - ($1050)) | 0;
                            $1052 = $1051 >> 31;
                            $1053 = $1052 ^ $1051;
                            $1054 = (($1053) - ($1052)) | 0;
                            $1055 = $1054 | $1044;
                            $1056 = ($1055 >>> 0) > (3);
                            $phitmp904$i = $1056 & 1;
                            $1058 = $phitmp904$i;
                        } else {
                            $1058 = 1;
                        }
                        $1057 = $1058 | $1029;
                        $1059 = ($994 << 24 >> 24) != (0);
                        $1060 = $1059 & 1;
                        $1061 = $1057 << $1060;
                        $1062 = $1061 & 255;
                        $1063 = ((($4)) + 21 | 0);
                        HEAP8[$1063 >> 0] = $1062;
                        $1064 = $995 & 255;
                        $1065 = HEAP8[$673 >> 0] | 0;
                        $1066 = HEAP8[$551 >> 0] | 0;
                        $1067 = ($1065 << 24 >> 24) == ($1066 << 24 >> 24);
                        if ($1067) {
                            $1068 = ((($0)) + 3916 | 0);
                            $1069 = HEAP32[$1068 >> 2] | 0;
                            $1070 = (((($1069) + ($6 << 6) | 0)) + 24 | 0);
                            $1071 = HEAP16[$1070 >> 1] | 0;
                            $1072 = $1071 << 16 >> 16;
                            $1073 = (((($1069) + ($6 << 6) | 0)) + 8 | 0);
                            $1074 = HEAP16[$1073 >> 1] | 0;
                            $1075 = $1074 << 16 >> 16;
                            $1076 = (($1072) - ($1075)) | 0;
                            $1077 = $1076 >> 31;
                            $1078 = $1077 ^ $1076;
                            $1079 = (($1078) - ($1077)) | 0;
                            $1080 = (((($1069) + ($6 << 6) | 0)) + 26 | 0);
                            $1081 = HEAP16[$1080 >> 1] | 0;
                            $1082 = $1081 << 16 >> 16;
                            $1083 = (((($1069) + ($6 << 6) | 0)) + 10 | 0);
                            $1084 = HEAP16[$1083 >> 1] | 0;
                            $1085 = $1084 << 16 >> 16;
                            $1086 = (($1082) - ($1085)) | 0;
                            $1087 = $1086 >> 31;
                            $1088 = $1087 ^ $1086;
                            $1089 = (($1088) - ($1087)) | 0;
                            $1090 = $1089 | $1079;
                            $1091 = ($1090 >>> 0) > (3);
                            $phitmp905$i = $1091 & 1;
                            $1093 = $phitmp905$i;
                        } else {
                            $1093 = 1;
                        }
                        $1092 = $1093 | $1064;
                        $1094 = ($996 << 24 >> 24) != (0);
                        $1095 = $1094 & 1;
                        $1096 = $1092 << $1095;
                        $1097 = $1096 & 255;
                        $1098 = ((($4)) + 22 | 0);
                        HEAP8[$1098 >> 0] = $1097;
                        $1099 = HEAP8[$710 >> 0] | 0;
                        $1100 = HEAP8[$588 >> 0] | 0;
                        $1101 = ($1099 << 24 >> 24) == ($1100 << 24 >> 24);
                        if ($1101) {
                            $1102 = ((($0)) + 3916 | 0);
                            $1103 = HEAP32[$1102 >> 2] | 0;
                            $1104 = (((($1103) + ($6 << 6) | 0)) + 28 | 0);
                            $1105 = HEAP16[$1104 >> 1] | 0;
                            $1106 = $1105 << 16 >> 16;
                            $1107 = (((($1103) + ($6 << 6) | 0)) + 12 | 0);
                            $1108 = HEAP16[$1107 >> 1] | 0;
                            $1109 = $1108 << 16 >> 16;
                            $1110 = (($1106) - ($1109)) | 0;
                            $1111 = $1110 >> 31;
                            $1112 = $1111 ^ $1110;
                            $1113 = (($1112) - ($1111)) | 0;
                            $1114 = (((($1103) + ($6 << 6) | 0)) + 30 | 0);
                            $1115 = HEAP16[$1114 >> 1] | 0;
                            $1116 = $1115 << 16 >> 16;
                            $1117 = (((($1103) + ($6 << 6) | 0)) + 14 | 0);
                            $1118 = HEAP16[$1117 >> 1] | 0;
                            $1119 = $1118 << 16 >> 16;
                            $1120 = (($1116) - ($1119)) | 0;
                            $1121 = $1120 >> 31;
                            $1122 = $1121 ^ $1120;
                            $1123 = (($1122) - ($1121)) | 0;
                            $1124 = $1123 | $1113;
                            $1125 = ($1124 >>> 0) > (3);
                            $phitmp906$i = $1125 & 1;
                            $1127 = $phitmp906$i;
                        } else {
                            $1127 = 1;
                        }
                        $1126 = $1127 | $997;
                        $1128 = ($997 | 0) != (0);
                        $1129 = $1128 & 1;
                        $1130 = $1126 << $1129;
                        $1131 = $1130 & 255;
                        $1132 = ((($4)) + 23 | 0);
                        HEAP8[$1132 >> 0] = $1131;
                        $1133 = $498 | $496;
                        HEAP32[$260 >> 2] = $1133;
                        $1134 = $1133 & 255;
                        $1135 = $1133 & 255;
                        $1136 = HEAP8[$759 >> 0] | 0;
                        $1137 = HEAP8[$637 >> 0] | 0;
                        $1138 = ($1136 << 24 >> 24) == ($1137 << 24 >> 24);
                        $1139 = $1133 >>> 8;
                        $1140 = $1139 & 255;
                        $1141 = $1133 >>> 16;
                        $1142 = $1141 & 255;
                        $1143 = $1133 >>> 24;
                        if ($1138) {
                            $1144 = ((($0)) + 3916 | 0);
                            $1145 = HEAP32[$1144 >> 2] | 0;
                            $1146 = (((($1145) + ($6 << 6) | 0)) + 32 | 0);
                            $1147 = HEAP16[$1146 >> 1] | 0;
                            $1148 = $1147 << 16 >> 16;
                            $1149 = (((($1145) + ($6 << 6) | 0)) + 16 | 0);
                            $1150 = HEAP16[$1149 >> 1] | 0;
                            $1151 = $1150 << 16 >> 16;
                            $1152 = (($1148) - ($1151)) | 0;
                            $1153 = $1152 >> 31;
                            $1154 = $1153 ^ $1152;
                            $1155 = (($1154) - ($1153)) | 0;
                            $1156 = (((($1145) + ($6 << 6) | 0)) + 34 | 0);
                            $1157 = HEAP16[$1156 >> 1] | 0;
                            $1158 = $1157 << 16 >> 16;
                            $1159 = (((($1145) + ($6 << 6) | 0)) + 18 | 0);
                            $1160 = HEAP16[$1159 >> 1] | 0;
                            $1161 = $1160 << 16 >> 16;
                            $1162 = (($1158) - ($1161)) | 0;
                            $1163 = $1162 >> 31;
                            $1164 = $1163 ^ $1162;
                            $1165 = (($1164) - ($1163)) | 0;
                            $1166 = $1165 | $1155;
                            $1167 = ($1166 >>> 0) > (3);
                            $phitmp907$i = $1167 & 1;
                            $1169 = $phitmp907$i;
                        } else {
                            $1169 = 1;
                        }
                        $1168 = $1169 | $1135;
                        $1170 = ($1134 << 24 >> 24) != (0);
                        $1171 = $1170 & 1;
                        $1172 = $1168 << $1171;
                        $1173 = $1172 & 255;
                        $1174 = ((($4)) + 24 | 0);
                        HEAP8[$1174 >> 0] = $1173;
                        $1175 = $1139 & 255;
                        $1176 = HEAP8[$757 >> 0] | 0;
                        $1177 = HEAP8[$635 >> 0] | 0;
                        $1178 = ($1176 << 24 >> 24) == ($1177 << 24 >> 24);
                        if ($1178) {
                            $1179 = ((($0)) + 3916 | 0);
                            $1180 = HEAP32[$1179 >> 2] | 0;
                            $1181 = (((($1180) + ($6 << 6) | 0)) + 36 | 0);
                            $1182 = HEAP16[$1181 >> 1] | 0;
                            $1183 = $1182 << 16 >> 16;
                            $1184 = (((($1180) + ($6 << 6) | 0)) + 20 | 0);
                            $1185 = HEAP16[$1184 >> 1] | 0;
                            $1186 = $1185 << 16 >> 16;
                            $1187 = (($1183) - ($1186)) | 0;
                            $1188 = $1187 >> 31;
                            $1189 = $1188 ^ $1187;
                            $1190 = (($1189) - ($1188)) | 0;
                            $1191 = (((($1180) + ($6 << 6) | 0)) + 38 | 0);
                            $1192 = HEAP16[$1191 >> 1] | 0;
                            $1193 = $1192 << 16 >> 16;
                            $1194 = (((($1180) + ($6 << 6) | 0)) + 22 | 0);
                            $1195 = HEAP16[$1194 >> 1] | 0;
                            $1196 = $1195 << 16 >> 16;
                            $1197 = (($1193) - ($1196)) | 0;
                            $1198 = $1197 >> 31;
                            $1199 = $1198 ^ $1197;
                            $1200 = (($1199) - ($1198)) | 0;
                            $1201 = $1200 | $1190;
                            $1202 = ($1201 >>> 0) > (3);
                            $phitmp908$i = $1202 & 1;
                            $1204 = $phitmp908$i;
                        } else {
                            $1204 = 1;
                        }
                        $1203 = $1204 | $1175;
                        $1205 = ($1140 << 24 >> 24) != (0);
                        $1206 = $1205 & 1;
                        $1207 = $1203 << $1206;
                        $1208 = $1207 & 255;
                        $1209 = ((($4)) + 25 | 0);
                        HEAP8[$1209 >> 0] = $1208;
                        $1210 = $1141 & 255;
                        $1211 = HEAP8[$795 >> 0] | 0;
                        $1212 = HEAP8[$673 >> 0] | 0;
                        $1213 = ($1211 << 24 >> 24) == ($1212 << 24 >> 24);
                        if ($1213) {
                            $1214 = ((($0)) + 3916 | 0);
                            $1215 = HEAP32[$1214 >> 2] | 0;
                            $1216 = (((($1215) + ($6 << 6) | 0)) + 40 | 0);
                            $1217 = HEAP16[$1216 >> 1] | 0;
                            $1218 = $1217 << 16 >> 16;
                            $1219 = (((($1215) + ($6 << 6) | 0)) + 24 | 0);
                            $1220 = HEAP16[$1219 >> 1] | 0;
                            $1221 = $1220 << 16 >> 16;
                            $1222 = (($1218) - ($1221)) | 0;
                            $1223 = $1222 >> 31;
                            $1224 = $1223 ^ $1222;
                            $1225 = (($1224) - ($1223)) | 0;
                            $1226 = (((($1215) + ($6 << 6) | 0)) + 42 | 0);
                            $1227 = HEAP16[$1226 >> 1] | 0;
                            $1228 = $1227 << 16 >> 16;
                            $1229 = (((($1215) + ($6 << 6) | 0)) + 26 | 0);
                            $1230 = HEAP16[$1229 >> 1] | 0;
                            $1231 = $1230 << 16 >> 16;
                            $1232 = (($1228) - ($1231)) | 0;
                            $1233 = $1232 >> 31;
                            $1234 = $1233 ^ $1232;
                            $1235 = (($1234) - ($1233)) | 0;
                            $1236 = $1235 | $1225;
                            $1237 = ($1236 >>> 0) > (3);
                            $phitmp909$i = $1237 & 1;
                            $1239 = $phitmp909$i;
                        } else {
                            $1239 = 1;
                        }
                        $1238 = $1239 | $1210;
                        $1240 = ($1142 << 24 >> 24) != (0);
                        $1241 = $1240 & 1;
                        $1242 = $1238 << $1241;
                        $1243 = $1242 & 255;
                        $1244 = ((($4)) + 26 | 0);
                        HEAP8[$1244 >> 0] = $1243;
                        $1245 = HEAP8[$832 >> 0] | 0;
                        $1246 = HEAP8[$710 >> 0] | 0;
                        $1247 = ($1245 << 24 >> 24) == ($1246 << 24 >> 24);
                        if ($1247) {
                            $1248 = ((($0)) + 3916 | 0);
                            $1249 = HEAP32[$1248 >> 2] | 0;
                            $1250 = (((($1249) + ($6 << 6) | 0)) + 44 | 0);
                            $1251 = HEAP16[$1250 >> 1] | 0;
                            $1252 = $1251 << 16 >> 16;
                            $1253 = (((($1249) + ($6 << 6) | 0)) + 28 | 0);
                            $1254 = HEAP16[$1253 >> 1] | 0;
                            $1255 = $1254 << 16 >> 16;
                            $1256 = (($1252) - ($1255)) | 0;
                            $1257 = $1256 >> 31;
                            $1258 = $1257 ^ $1256;
                            $1259 = (($1258) - ($1257)) | 0;
                            $1260 = (((($1249) + ($6 << 6) | 0)) + 46 | 0);
                            $1261 = HEAP16[$1260 >> 1] | 0;
                            $1262 = $1261 << 16 >> 16;
                            $1263 = (((($1249) + ($6 << 6) | 0)) + 30 | 0);
                            $1264 = HEAP16[$1263 >> 1] | 0;
                            $1265 = $1264 << 16 >> 16;
                            $1266 = (($1262) - ($1265)) | 0;
                            $1267 = $1266 >> 31;
                            $1268 = $1267 ^ $1266;
                            $1269 = (($1268) - ($1267)) | 0;
                            $1270 = $1269 | $1259;
                            $1271 = ($1270 >>> 0) > (3);
                            $phitmp910$i = $1271 & 1;
                            $1273 = $phitmp910$i;
                        } else {
                            $1273 = 1;
                        }
                        $1272 = $1273 | $1143;
                        $1274 = ($1143 | 0) != (0);
                        $1275 = $1274 & 1;
                        $1276 = $1272 << $1275;
                        $1277 = $1276 & 255;
                        $1278 = ((($4)) + 27 | 0);
                        HEAP8[$1278 >> 0] = $1277;
                        $1279 = $500 | $498;
                        HEAP32[$260 >> 2] = $1279;
                        $1280 = $1279 & 255;
                        $1281 = $1279 & 255;
                        $1282 = HEAP8[$881 >> 0] | 0;
                        $1283 = HEAP8[$759 >> 0] | 0;
                        $1284 = ($1282 << 24 >> 24) == ($1283 << 24 >> 24);
                        $1285 = $1279 >>> 8;
                        $1286 = $1285 & 255;
                        $1287 = $1279 >>> 16;
                        $1288 = $1287 & 255;
                        $1289 = $1279 >>> 24;
                        if ($1284) {
                            $1290 = ((($0)) + 3916 | 0);
                            $1291 = HEAP32[$1290 >> 2] | 0;
                            $1292 = (((($1291) + ($6 << 6) | 0)) + 48 | 0);
                            $1293 = HEAP16[$1292 >> 1] | 0;
                            $1294 = $1293 << 16 >> 16;
                            $1295 = (((($1291) + ($6 << 6) | 0)) + 32 | 0);
                            $1296 = HEAP16[$1295 >> 1] | 0;
                            $1297 = $1296 << 16 >> 16;
                            $1298 = (($1294) - ($1297)) | 0;
                            $1299 = $1298 >> 31;
                            $1300 = $1299 ^ $1298;
                            $1301 = (($1300) - ($1299)) | 0;
                            $1302 = (((($1291) + ($6 << 6) | 0)) + 50 | 0);
                            $1303 = HEAP16[$1302 >> 1] | 0;
                            $1304 = $1303 << 16 >> 16;
                            $1305 = (((($1291) + ($6 << 6) | 0)) + 34 | 0);
                            $1306 = HEAP16[$1305 >> 1] | 0;
                            $1307 = $1306 << 16 >> 16;
                            $1308 = (($1304) - ($1307)) | 0;
                            $1309 = $1308 >> 31;
                            $1310 = $1309 ^ $1308;
                            $1311 = (($1310) - ($1309)) | 0;
                            $1312 = $1311 | $1301;
                            $1313 = ($1312 >>> 0) > (3);
                            $phitmp911$i = $1313 & 1;
                            $1315 = $phitmp911$i;
                        } else {
                            $1315 = 1;
                        }
                        $1314 = $1315 | $1281;
                        $1316 = ($1280 << 24 >> 24) != (0);
                        $1317 = $1316 & 1;
                        $1318 = $1314 << $1317;
                        $1319 = $1318 & 255;
                        $1320 = ((($4)) + 28 | 0);
                        HEAP8[$1320 >> 0] = $1319;
                        $1321 = $1285 & 255;
                        $1322 = HEAP8[$879 >> 0] | 0;
                        $1323 = HEAP8[$757 >> 0] | 0;
                        $1324 = ($1322 << 24 >> 24) == ($1323 << 24 >> 24);
                        if ($1324) {
                            $1325 = ((($0)) + 3916 | 0);
                            $1326 = HEAP32[$1325 >> 2] | 0;
                            $1327 = (((($1326) + ($6 << 6) | 0)) + 52 | 0);
                            $1328 = HEAP16[$1327 >> 1] | 0;
                            $1329 = $1328 << 16 >> 16;
                            $1330 = (((($1326) + ($6 << 6) | 0)) + 36 | 0);
                            $1331 = HEAP16[$1330 >> 1] | 0;
                            $1332 = $1331 << 16 >> 16;
                            $1333 = (($1329) - ($1332)) | 0;
                            $1334 = $1333 >> 31;
                            $1335 = $1334 ^ $1333;
                            $1336 = (($1335) - ($1334)) | 0;
                            $1337 = (((($1326) + ($6 << 6) | 0)) + 54 | 0);
                            $1338 = HEAP16[$1337 >> 1] | 0;
                            $1339 = $1338 << 16 >> 16;
                            $1340 = (((($1326) + ($6 << 6) | 0)) + 38 | 0);
                            $1341 = HEAP16[$1340 >> 1] | 0;
                            $1342 = $1341 << 16 >> 16;
                            $1343 = (($1339) - ($1342)) | 0;
                            $1344 = $1343 >> 31;
                            $1345 = $1344 ^ $1343;
                            $1346 = (($1345) - ($1344)) | 0;
                            $1347 = $1346 | $1336;
                            $1348 = ($1347 >>> 0) > (3);
                            $phitmp912$i = $1348 & 1;
                            $1350 = $phitmp912$i;
                        } else {
                            $1350 = 1;
                        }
                        $1349 = $1350 | $1321;
                        $1351 = ($1286 << 24 >> 24) != (0);
                        $1352 = $1351 & 1;
                        $1353 = $1349 << $1352;
                        $1354 = $1353 & 255;
                        $1355 = ((($4)) + 29 | 0);
                        HEAP8[$1355 >> 0] = $1354;
                        $1356 = $1287 & 255;
                        $1357 = HEAP8[$916 >> 0] | 0;
                        $1358 = HEAP8[$795 >> 0] | 0;
                        $1359 = ($1357 << 24 >> 24) == ($1358 << 24 >> 24);
                        if ($1359) {
                            $1360 = ((($0)) + 3916 | 0);
                            $1361 = HEAP32[$1360 >> 2] | 0;
                            $1362 = (((($1361) + ($6 << 6) | 0)) + 56 | 0);
                            $1363 = HEAP16[$1362 >> 1] | 0;
                            $1364 = $1363 << 16 >> 16;
                            $1365 = (((($1361) + ($6 << 6) | 0)) + 40 | 0);
                            $1366 = HEAP16[$1365 >> 1] | 0;
                            $1367 = $1366 << 16 >> 16;
                            $1368 = (($1364) - ($1367)) | 0;
                            $1369 = $1368 >> 31;
                            $1370 = $1369 ^ $1368;
                            $1371 = (($1370) - ($1369)) | 0;
                            $1372 = (((($1361) + ($6 << 6) | 0)) + 58 | 0);
                            $1373 = HEAP16[$1372 >> 1] | 0;
                            $1374 = $1373 << 16 >> 16;
                            $1375 = (((($1361) + ($6 << 6) | 0)) + 42 | 0);
                            $1376 = HEAP16[$1375 >> 1] | 0;
                            $1377 = $1376 << 16 >> 16;
                            $1378 = (($1374) - ($1377)) | 0;
                            $1379 = $1378 >> 31;
                            $1380 = $1379 ^ $1378;
                            $1381 = (($1380) - ($1379)) | 0;
                            $1382 = $1381 | $1371;
                            $1383 = ($1382 >>> 0) > (3);
                            $phitmp913$i = $1383 & 1;
                            $1385 = $phitmp913$i;
                        } else {
                            $1385 = 1;
                        }
                        $1384 = $1385 | $1356;
                        $1386 = ($1288 << 24 >> 24) != (0);
                        $1387 = $1386 & 1;
                        $1388 = $1384 << $1387;
                        $1389 = $1388 & 255;
                        $1390 = ((($4)) + 30 | 0);
                        HEAP8[$1390 >> 0] = $1389;
                        $1391 = HEAP8[$952 >> 0] | 0;
                        $1392 = HEAP8[$832 >> 0] | 0;
                        $1393 = ($1391 << 24 >> 24) == ($1392 << 24 >> 24);
                        if ($1393) {
                            $1394 = ((($0)) + 3916 | 0);
                            $1395 = HEAP32[$1394 >> 2] | 0;
                            $1396 = (((($1395) + ($6 << 6) | 0)) + 60 | 0);
                            $1397 = HEAP16[$1396 >> 1] | 0;
                            $1398 = $1397 << 16 >> 16;
                            $1399 = (((($1395) + ($6 << 6) | 0)) + 44 | 0);
                            $1400 = HEAP16[$1399 >> 1] | 0;
                            $1401 = $1400 << 16 >> 16;
                            $1402 = (($1398) - ($1401)) | 0;
                            $1403 = $1402 >> 31;
                            $1404 = $1403 ^ $1402;
                            $1405 = (($1404) - ($1403)) | 0;
                            $1406 = (((($1395) + ($6 << 6) | 0)) + 62 | 0);
                            $1407 = HEAP16[$1406 >> 1] | 0;
                            $1408 = $1407 << 16 >> 16;
                            $1409 = (((($1395) + ($6 << 6) | 0)) + 46 | 0);
                            $1410 = HEAP16[$1409 >> 1] | 0;
                            $1411 = $1410 << 16 >> 16;
                            $1412 = (($1408) - ($1411)) | 0;
                            $1413 = $1412 >> 31;
                            $1414 = $1413 ^ $1412;
                            $1415 = (($1414) - ($1413)) | 0;
                            $1416 = $1415 | $1405;
                            $1417 = ($1416 >>> 0) > (3);
                            $phitmp914$i = $1417 & 1;
                            $1419 = $phitmp914$i;
                        } else {
                            $1419 = 1;
                        }
                        $1418 = $1419 | $1289;
                        $1420 = ($1289 | 0) != (0);
                        $1421 = $1420 & 1;
                        $1422 = $1418 << $1421;
                        $1423 = $1422 & 255;
                        $$sink$i = $1423; $$sink5$i = 3;
                    } else {
                        $266 = HEAP8[10951] | 0;
                        $267 = $266 & 255;
                        $268 = ((($252) + (($6 * 24) | 0) | 0) + ($267) | 0);
                        $269 = HEAP8[$268 >> 0] | 0;
                        $270 = HEAP8[(10952) >> 0] | 0;
                        $271 = $270 & 255;
                        $272 = ((($252) + (($6 * 24) | 0) | 0) + ($271) | 0);
                        $273 = HEAP8[$272 >> 0] | 0;
                        $274 = $273 | $269;
                        $275 = HEAP8[(10953) >> 0] | 0;
                        $276 = $275 & 255;
                        $277 = ((($252) + (($6 * 24) | 0) | 0) + ($276) | 0);
                        $278 = HEAP8[$277 >> 0] | 0;
                        $279 = $274 | $278;
                        $280 = HEAP8[(10954) >> 0] | 0;
                        $281 = $280 & 255;
                        $282 = ((($252) + (($6 * 24) | 0) | 0) + ($281) | 0);
                        $283 = HEAP8[$282 >> 0] | 0;
                        $284 = $279 | $283;
                        $285 = HEAP8[(10955) >> 0] | 0;
                        $286 = $285 & 255;
                        $287 = ((($252) + (($6 * 24) | 0) | 0) + ($286) | 0);
                        $288 = HEAP8[$287 >> 0] | 0;
                        $289 = HEAP8[(10956) >> 0] | 0;
                        $290 = $289 & 255;
                        $291 = ((($252) + (($6 * 24) | 0) | 0) + ($290) | 0);
                        $292 = HEAP8[$291 >> 0] | 0;
                        $293 = $292 | $288;
                        $294 = HEAP8[(10957) >> 0] | 0;
                        $295 = $294 & 255;
                        $296 = ((($252) + (($6 * 24) | 0) | 0) + ($295) | 0);
                        $297 = HEAP8[$296 >> 0] | 0;
                        $298 = $293 | $297;
                        $299 = HEAP8[(10958) >> 0] | 0;
                        $300 = $299 & 255;
                        $301 = ((($252) + (($6 * 24) | 0) | 0) + ($300) | 0);
                        $302 = HEAP8[$301 >> 0] | 0;
                        $303 = $298 | $302;
                        $304 = HEAP8[(10959) >> 0] | 0;
                        $305 = $304 & 255;
                        $306 = ((($252) + (($6 * 24) | 0) | 0) + ($305) | 0);
                        $307 = HEAP8[$306 >> 0] | 0;
                        $308 = HEAP8[(10960) >> 0] | 0;
                        $309 = $308 & 255;
                        $310 = ((($252) + (($6 * 24) | 0) | 0) + ($309) | 0);
                        $311 = HEAP8[$310 >> 0] | 0;
                        $312 = $311 | $307;
                        $313 = HEAP8[(10961) >> 0] | 0;
                        $314 = $313 & 255;
                        $315 = ((($252) + (($6 * 24) | 0) | 0) + ($314) | 0);
                        $316 = HEAP8[$315 >> 0] | 0;
                        $317 = $312 | $316;
                        $318 = HEAP8[(10962) >> 0] | 0;
                        $319 = $318 & 255;
                        $320 = ((($252) + (($6 * 24) | 0) | 0) + ($319) | 0);
                        $321 = HEAP8[$320 >> 0] | 0;
                        $322 = $317 | $321;
                        $323 = HEAP8[(10963) >> 0] | 0;
                        $324 = $323 & 255;
                        $325 = ((($252) + (($6 * 24) | 0) | 0) + ($324) | 0);
                        $326 = HEAP8[$325 >> 0] | 0;
                        $327 = HEAP8[(10964) >> 0] | 0;
                        $328 = $327 & 255;
                        $329 = ((($252) + (($6 * 24) | 0) | 0) + ($328) | 0);
                        $330 = HEAP8[$329 >> 0] | 0;
                        $331 = $330 | $326;
                        $332 = HEAP8[(10965) >> 0] | 0;
                        $333 = $332 & 255;
                        $334 = ((($252) + (($6 * 24) | 0) | 0) + ($333) | 0);
                        $335 = HEAP8[$334 >> 0] | 0;
                        $336 = $331 | $335;
                        $337 = HEAP8[(10966) >> 0] | 0;
                        $338 = $337 & 255;
                        $339 = ((($252) + (($6 * 24) | 0) | 0) + ($338) | 0);
                        $340 = HEAP8[$339 >> 0] | 0;
                        $341 = $336 | $340;
                        $342 = $303 | $284;
                        $343 = $342 << 24 >> 24;
                        $344 = ((($254) + ($6 << 4) | 0) + ($286) | 0);
                        $345 = HEAP8[$344 >> 0] | 0;
                        $346 = ((($254) + ($6 << 4) | 0) + ($267) | 0);
                        $347 = HEAP8[$346 >> 0] | 0;
                        $348 = ($345 << 24 >> 24) == ($347 << 24 >> 24);
                        if ($348) {
                            $349 = ((($0)) + 3916 | 0);
                            $350 = HEAP32[$349 >> 2] | 0;
                            $351 = ((($350) + ($6 << 6) | 0) + ($286 << 2) | 0);
                            $352 = HEAP16[$351 >> 1] | 0;
                            $353 = $352 << 16 >> 16;
                            $354 = ((($350) + ($6 << 6) | 0) + ($267 << 2) | 0);
                            $355 = HEAP16[$354 >> 1] | 0;
                            $356 = $355 << 16 >> 16;
                            $357 = (($353) - ($356)) | 0;
                            $358 = $357 >> 31;
                            $359 = $358 ^ $357;
                            $360 = (($359) - ($358)) | 0;
                            $361 = ((((($350) + ($6 << 6) | 0) + ($286 << 2) | 0)) + 2 | 0);
                            $362 = HEAP16[$361 >> 1] | 0;
                            $363 = $362 << 16 >> 16;
                            $364 = ((((($350) + ($6 << 6) | 0) + ($267 << 2) | 0)) + 2 | 0);
                            $365 = HEAP16[$364 >> 1] | 0;
                            $366 = $365 << 16 >> 16;
                            $367 = (($363) - ($366)) | 0;
                            $368 = $367 >> 31;
                            $369 = $368 ^ $367;
                            $370 = (($369) - ($368)) | 0;
                            $371 = $370 | $360;
                            $372 = ($371 >>> 0) > (3);
                            $phitmp915$i = $372 & 1;
                            $374 = $phitmp915$i;
                        } else {
                            $374 = 1;
                        }
                        $373 = $374 | $343;
                        $375 = ($342 << 24 >> 24) != (0);
                        $376 = $375 & 1;
                        $377 = $373 << $376;
                        $378 = $377 & 255;
                        $379 = ((($4)) + 9 | 0);
                        HEAP8[$379 >> 0] = $378;
                        $380 = ((($4)) + 8 | 0);
                        HEAP8[$380 >> 0] = $378;
                        $381 = $341 | $322;
                        $382 = $381 << 24 >> 24;
                        $383 = ((($254) + ($6 << 4) | 0) + ($324) | 0);
                        $384 = HEAP8[$383 >> 0] | 0;
                        $385 = ((($254) + ($6 << 4) | 0) + ($305) | 0);
                        $386 = HEAP8[$385 >> 0] | 0;
                        $387 = ($384 << 24 >> 24) == ($386 << 24 >> 24);
                        if ($387) {
                            $388 = ((($0)) + 3916 | 0);
                            $389 = HEAP32[$388 >> 2] | 0;
                            $390 = ((($389) + ($6 << 6) | 0) + ($324 << 2) | 0);
                            $391 = HEAP16[$390 >> 1] | 0;
                            $392 = $391 << 16 >> 16;
                            $393 = ((($389) + ($6 << 6) | 0) + ($305 << 2) | 0);
                            $394 = HEAP16[$393 >> 1] | 0;
                            $395 = $394 << 16 >> 16;
                            $396 = (($392) - ($395)) | 0;
                            $397 = $396 >> 31;
                            $398 = $397 ^ $396;
                            $399 = (($398) - ($397)) | 0;
                            $400 = ((((($389) + ($6 << 6) | 0) + ($324 << 2) | 0)) + 2 | 0);
                            $401 = HEAP16[$400 >> 1] | 0;
                            $402 = $401 << 16 >> 16;
                            $403 = ((((($389) + ($6 << 6) | 0) + ($305 << 2) | 0)) + 2 | 0);
                            $404 = HEAP16[$403 >> 1] | 0;
                            $405 = $404 << 16 >> 16;
                            $406 = (($402) - ($405)) | 0;
                            $407 = $406 >> 31;
                            $408 = $407 ^ $406;
                            $409 = (($408) - ($407)) | 0;
                            $410 = $409 | $399;
                            $411 = ($410 >>> 0) > (3);
                            $phitmp916$i = $411 & 1;
                            $413 = $phitmp916$i;
                        } else {
                            $413 = 1;
                        }
                        $412 = $413 | $382;
                        $414 = ($381 << 24 >> 24) != (0);
                        $415 = $414 & 1;
                        $416 = $412 << $415;
                        $417 = $416 & 255;
                        $418 = ((($4)) + 11 | 0);
                        HEAP8[$418 >> 0] = $417;
                        $419 = ((($4)) + 10 | 0);
                        HEAP8[$419 >> 0] = $417;
                        $420 = $322 | $284;
                        $421 = $420 << 24 >> 24;
                        $422 = HEAP8[$385 >> 0] | 0;
                        $423 = HEAP8[$346 >> 0] | 0;
                        $424 = ($422 << 24 >> 24) == ($423 << 24 >> 24);
                        if ($424) {
                            $425 = ((($0)) + 3916 | 0);
                            $426 = HEAP32[$425 >> 2] | 0;
                            $427 = ((($426) + ($6 << 6) | 0) + ($305 << 2) | 0);
                            $428 = HEAP16[$427 >> 1] | 0;
                            $429 = $428 << 16 >> 16;
                            $430 = ((($426) + ($6 << 6) | 0) + ($267 << 2) | 0);
                            $431 = HEAP16[$430 >> 1] | 0;
                            $432 = $431 << 16 >> 16;
                            $433 = (($429) - ($432)) | 0;
                            $434 = $433 >> 31;
                            $435 = $434 ^ $433;
                            $436 = (($435) - ($434)) | 0;
                            $437 = ((((($426) + ($6 << 6) | 0) + ($305 << 2) | 0)) + 2 | 0);
                            $438 = HEAP16[$437 >> 1] | 0;
                            $439 = $438 << 16 >> 16;
                            $440 = ((((($426) + ($6 << 6) | 0) + ($267 << 2) | 0)) + 2 | 0);
                            $441 = HEAP16[$440 >> 1] | 0;
                            $442 = $441 << 16 >> 16;
                            $443 = (($439) - ($442)) | 0;
                            $444 = $443 >> 31;
                            $445 = $444 ^ $443;
                            $446 = (($445) - ($444)) | 0;
                            $447 = $446 | $436;
                            $448 = ($447 >>> 0) > (3);
                            $phitmp917$i = $448 & 1;
                            $450 = $phitmp917$i;
                        } else {
                            $450 = 1;
                        }
                        $449 = $450 | $421;
                        $451 = ($420 << 24 >> 24) != (0);
                        $452 = $451 & 1;
                        $453 = $449 << $452;
                        $454 = $453 & 255;
                        $455 = ((($4)) + 25 | 0);
                        HEAP8[$455 >> 0] = $454;
                        $456 = ((($4)) + 24 | 0);
                        HEAP8[$456 >> 0] = $454;
                        $457 = $341 | $303;
                        $458 = $457 << 24 >> 24;
                        $459 = HEAP8[$383 >> 0] | 0;
                        $460 = HEAP8[$344 >> 0] | 0;
                        $461 = ($459 << 24 >> 24) == ($460 << 24 >> 24);
                        if ($461) {
                            $462 = ((($0)) + 3916 | 0);
                            $463 = HEAP32[$462 >> 2] | 0;
                            $464 = ((($463) + ($6 << 6) | 0) + ($324 << 2) | 0);
                            $465 = HEAP16[$464 >> 1] | 0;
                            $466 = $465 << 16 >> 16;
                            $467 = ((($463) + ($6 << 6) | 0) + ($286 << 2) | 0);
                            $468 = HEAP16[$467 >> 1] | 0;
                            $469 = $468 << 16 >> 16;
                            $470 = (($466) - ($469)) | 0;
                            $471 = $470 >> 31;
                            $472 = $471 ^ $470;
                            $473 = (($472) - ($471)) | 0;
                            $474 = ((((($463) + ($6 << 6) | 0) + ($324 << 2) | 0)) + 2 | 0);
                            $475 = HEAP16[$474 >> 1] | 0;
                            $476 = $475 << 16 >> 16;
                            $477 = ((((($463) + ($6 << 6) | 0) + ($286 << 2) | 0)) + 2 | 0);
                            $478 = HEAP16[$477 >> 1] | 0;
                            $479 = $478 << 16 >> 16;
                            $480 = (($476) - ($479)) | 0;
                            $481 = $480 >> 31;
                            $482 = $481 ^ $480;
                            $483 = (($482) - ($481)) | 0;
                            $484 = $483 | $473;
                            $485 = ($484 >>> 0) > (3);
                            $phitmp918$i = $485 & 1;
                            $487 = $phitmp918$i;
                        } else {
                            $487 = 1;
                        }
                        $486 = $487 | $458;
                        $488 = ($457 << 24 >> 24) != (0);
                        $489 = $488 & 1;
                        $490 = $486 << $489;
                        $491 = $490 & 255;
                        $492 = ((($4)) + 27 | 0);
                        HEAP8[$492 >> 0] = $491;
                        $$sink$i = $491; $$sink5$i = 2;
                    }
                    $1424 = ((((($4)) + 16 | 0) + ($$sink5$i << 2) | 0) + ($$sink5$i) | 0);
                    HEAP8[$1424 >> 0] = $$sink$i;
                }
            }
        } while (0);
        __ZN7WelsDec17DeblockingInterMbEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEPA4_A4_hi($0, $1, $4, $2);
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec25WelsDeblockingFilterSliceEPNS_21TagWelsDecoderContextEPFvPNS_10TagDqLayerEPNS_19tagDeblockingFilterEiE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0$in$i$us = 0, $$071 = 0, $$071$us = 0, $$1 = 0, $$1$us = 0, $$pn = 0, $$pn$us = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
        var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
        var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
        var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
        var $or$cond = 0, $or$cond$us = 0, $storemerge = 0, $storemerge$us = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $2 = sp;
        $3 = ((($0)) + 241932 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($4)) + 4044 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($4)) + 88 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($8)) + 12 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($2)) + 16 | 0);
        ; HEAP32[$11 >> 2] = 0 | 0; HEAP32[$11 + 4 >> 2] = 0 | 0; HEAP32[$11 + 8 >> 2] = 0 | 0; HEAP32[$11 + 12 >> 2] = 0 | 0; HEAP32[$11 + 16 >> 2] = 0 | 0;
        $12 = ((($0)) + 5240 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ((($4)) + 3876 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ((($4)) + 72 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ((($0)) + 5464 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ((($19)) + 16 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        HEAP32[$2 >> 2] = $21;
        $22 = ((($19)) + 20 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = ((($2)) + 4 | 0);
        HEAP32[$24 >> 2] = $23;
        $25 = ((($19)) + 24 | 0);
        $26 = HEAP32[$25 >> 2] | 0;
        $27 = ((($2)) + 8 | 0);
        HEAP32[$27 >> 2] = $26;
        $28 = ((($19)) + 32 | 0);
        $29 = HEAP32[$28 >> 2] | 0;
        $30 = ((($2)) + 12 | 0);
        HEAP32[$30 >> 2] = $29;
        $31 = ((($19)) + 36 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = ((($2)) + 16 | 0);
        HEAP32[$33 >> 2] = $32;
        $34 = ((($4)) + 3881 | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = ((($2)) + 20 | 0);
        HEAP32[$37 >> 2] = $36;
        $38 = ((($4)) + 76 | 0);
        $39 = HEAP32[$38 >> 2] | 0;
        $40 = $39 & 255;
        $41 = ((($2)) + 24 | 0);
        HEAP8[$41 >> 0] = $40;
        $42 = ((($4)) + 80 | 0);
        $43 = HEAP32[$42 >> 2] | 0;
        $44 = $43 & 255;
        $45 = ((($2)) + 25 | 0);
        HEAP8[$45 >> 0] = $44;
        $46 = ((($0)) + 317064 | 0);
        $47 = ((($2)) + 32 | 0);
        HEAP32[$47 >> 2] = $46;
        $48 = $17 | 2;
        $49 = ($48 | 0) == (2);
        if (!($49)) {
            STACKTOP = sp; return;
        }
        $50 = ((($4)) + 24 | 0);
        $51 = HEAP32[$50 >> 2] | 0;
        $52 = (($51 | 0) % ($6 | 0)) & -1;
        $53 = ((($4)) + 4032 | 0);
        HEAP32[$53 >> 2] = $52;
        $54 = ((($4)) + 4036 | 0);
        $55 = ((($4)) + 4040 | 0);
        $56 = ($17 | 0) == (2);
        $57 = ((($4)) + 3912 | 0);
        $58 = ((($4)) + 92 | 0);
        if ($56) {
            $$071$us = 0; $$pn$us = $51; $59 = $52;
        } else {
            $$071 = 0; $$pn = $51; $95 = $52;
            while (1) {
                $storemerge = (($$pn | 0) / ($6 | 0)) & -1;
                HEAP32[$54 >> 2] = $storemerge;
                HEAP32[$55 >> 2] = $$pn;
                $96 = ($95 | 0) > (0);
                $97 = ($storemerge | 0) > (0);
                $98 = $96 & 1;
                $99 = $97 & 1;
                $100 = $99 << 1;
                $101 = $100 | $98;
                FUNCTION_TABLE_viii[$1 & 7]($4, $2, $101);
                $102 = (($$071) + 1) | 0;
                $103 = ($102 | 0) < ($15 | 0);
                if (!($103)) {
                    label = 19;
                    break;
                }
                $104 = HEAP32[$58 >> 2] | 0;
                $105 = ((($104)) + 8 | 0);
                $106 = HEAP32[$105 >> 2] | 0;
                $107 = ($106 >>> 0) > (1);
                if ($107) {
                    $108 = $$pn & 65535;
                    $109 = (__ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($13, $108) | 0);
                    $110 = $109 << 16 >> 16;
                    $$1 = $110;
                } else {
                    $111 = (($$pn) + 1) | 0;
                    $$1 = $111;
                }
                $112 = ($$1 | 0) != (-1);
                $113 = ($$1 | 0) < ($10 | 0);
                $or$cond = $112 & $113;
                if (!($or$cond)) {
                    label = 19;
                    break;
                }
                $114 = (($$1 | 0) % ($6 | 0)) & -1;
                HEAP32[$53 >> 2] = $114;
                $$071 = $102; $$pn = $$1; $95 = $114;
            }
            if ((label | 0) == 19) {
                STACKTOP = sp; return;
            }
        }
        while (1) {
            $storemerge$us = (($$pn$us | 0) / ($6 | 0)) & -1;
            HEAP32[$54 >> 2] = $storemerge$us;
            HEAP32[$55 >> 2] = $$pn$us;
            $60 = ($59 | 0) > (0);
            if ($60) {
                $61 = HEAP32[$57 >> 2] | 0;
                $62 = (($61) + ($$pn$us << 2) | 0);
                $63 = HEAP32[$62 >> 2] | 0;
                $64 = (($$pn$us) + -1) | 0;
                $65 = (($61) + ($64 << 2) | 0);
                $66 = HEAP32[$65 >> 2] | 0;
                $67 = ($63 | 0) == ($66 | 0);
                $78 = $67;
            } else {
                $78 = 0;
            }
            $68 = ($storemerge$us | 0) > (0);
            if ($68) {
                $69 = HEAP32[$57 >> 2] | 0;
                $70 = (($69) + ($$pn$us << 2) | 0);
                $71 = HEAP32[$70 >> 2] | 0;
                $72 = HEAP32[$5 >> 2] | 0;
                $73 = (($$pn$us) - ($72)) | 0;
                $74 = (($69) + ($73 << 2) | 0);
                $75 = HEAP32[$74 >> 2] | 0;
                $76 = ($71 | 0) == ($75 | 0);
                $$0$in$i$us = $76;
            } else {
                $$0$in$i$us = 0;
            }
            $77 = $78 & 1;
            $79 = $$0$in$i$us & 1;
            $80 = $79 << 1;
            $81 = $80 | $77;
            FUNCTION_TABLE_viii[$1 & 7]($4, $2, $81);
            $82 = (($$071$us) + 1) | 0;
            $83 = ($82 | 0) < ($15 | 0);
            if (!($83)) {
                label = 19;
                break;
            }
            $84 = HEAP32[$58 >> 2] | 0;
            $85 = ((($84)) + 8 | 0);
            $86 = HEAP32[$85 >> 2] | 0;
            $87 = ($86 >>> 0) > (1);
            if ($87) {
                $89 = $$pn$us & 65535;
                $90 = (__ZN7WelsDec9FmoNextMbEPNS_6TagFmoEs($13, $89) | 0);
                $91 = $90 << 16 >> 16;
                $$1$us = $91;
            } else {
                $88 = (($$pn$us) + 1) | 0;
                $$1$us = $88;
            }
            $92 = ($$1$us | 0) != (-1);
            $93 = ($$1$us | 0) < ($10 | 0);
            $or$cond$us = $92 & $93;
            if (!($or$cond$us)) {
                label = 19;
                break;
            }
            $94 = (($$1$us | 0) % ($6 | 0)) & -1;
            HEAP32[$53 >> 2] = $94;
            $$071$us = $82; $$pn$us = $$1$us; $59 = $94;
        }
        if ((label | 0) == 19) {
            STACKTOP = sp; return;
        }
    }
    function __ZN7WelsDec19FilteringEdgeLumaHVEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$pre = 0, $$pre$phi126Z2D = 0, $$pre$phi128Z2D = 0, $$pre$phi132Z2D = 0, $$pre$phiZ2D = 0, $$pre125 = 0, $$pre127 = 0, $$pre131 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
        var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
        var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
        var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
        var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
        var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
        var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
        var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
        var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
        var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $sext123 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $3 = sp + 7 | 0;
        $4 = sp;
        $5 = ((($0)) + 4040 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($0)) + 4032 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($0)) + 4036 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($0)) + 4044 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($1)) + 12 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ((($3)) + 15 | 0);
        $16 = $15;
        $17 = $16 & 15;
        $18 = (0 - ($17)) | 0;
        $19 = (($15) + ($18) | 0);
        $20 = ((($4)) + 3 | 0);
        $21 = $20;
        $22 = $21 & 3;
        $23 = (0 - ($22)) | 0;
        $24 = (($20) + ($23) | 0);
        $25 = HEAP32[$1 >> 2] | 0;
        $26 = Math_imul($14, $10) | 0;
        $27 = (($26) + ($8)) | 0;
        $28 = $27 << 4;
        $29 = (($25) + ($28) | 0);
        $30 = ((($0)) + 3948 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = (($31) + ($6) | 0);
        $33 = HEAP8[$32 >> 0] | 0;
        $34 = $33 << 24 >> 24;
        HEAP32[$24 >> 2] = 50529027;
        $35 = $2 & 1;
        $36 = ($35 | 0) == (0);
        if ($36) {
            $$pre = ((($1)) + 28 | 0);
            $$pre125 = ((($1)) + 24 | 0);
            $$pre127 = ((($1)) + 25 | 0);
            $$pre$phi126Z2D = $$pre125; $$pre$phi128Z2D = $$pre127; $$pre$phiZ2D = $$pre;
        } else {
            $37 = (($6) + -1) | 0;
            $38 = (($31) + ($37) | 0);
            $39 = HEAP8[$38 >> 0] | 0;
            $40 = $39 << 24 >> 24;
            $41 = (($34) + 1) | 0;
            $42 = (($41) + ($40)) | 0;
            $43 = $42 >>> 1;
            $44 = $43 & 255;
            $45 = ((($1)) + 28 | 0);
            HEAP8[$45 >> 0] = $44;
            $sext = $43 << 24;
            $46 = $sext >> 24;
            $47 = ((($1)) + 24 | 0);
            $48 = HEAP8[$47 >> 0] | 0;
            $49 = $48 << 24 >> 24;
            $50 = (($46) + 12) | 0;
            $51 = (($50) + ($49)) | 0;
            $52 = (23999 + ($51) | 0);
            $53 = HEAP8[$52 >> 0] | 0;
            $54 = $53 & 255;
            $55 = ((($1)) + 25 | 0);
            $56 = HEAP8[$55 >> 0] | 0;
            $57 = $56 << 24 >> 24;
            $58 = (($50) + ($57)) | 0;
            $59 = (24075 + ($58) | 0);
            $60 = HEAP8[$59 >> 0] | 0;
            $61 = $60 << 24 >> 24;
            $62 = $61 | $54;
            $63 = ($62 | 0) == (0);
            if ($63) {
                $$pre$phi126Z2D = $47; $$pre$phi128Z2D = $55; $$pre$phiZ2D = $45;
            } else {
                $64 = ((($1)) + 32 | 0);
                $65 = HEAP32[$64 >> 2] | 0;
                $66 = ((($65)) + 12 | 0);
                $67 = HEAP32[$66 >> 2] | 0;
                FUNCTION_TABLE_viiii[$67 & 31]($29, $14, $54, $61);
                $$pre$phi126Z2D = $47; $$pre$phi128Z2D = $55; $$pre$phiZ2D = $45;
            }
        }
        HEAP8[$$pre$phiZ2D >> 0] = $33;
        $68 = HEAP8[$$pre$phi126Z2D >> 0] | 0;
        $69 = $68 << 24 >> 24;
        $70 = (($34) + 12) | 0;
        $71 = (($70) + ($69)) | 0;
        $72 = (23999 + ($71) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = HEAP8[$$pre$phi128Z2D >> 0] | 0;
        $76 = $75 << 24 >> 24;
        $77 = (($70) + ($76)) | 0;
        $78 = (24075 + ($77) | 0);
        $79 = HEAP8[$78 >> 0] | 0;
        $80 = $79 << 24 >> 24;
        $81 = $80 | $74;
        $82 = ($81 | 0) != (0);
        if ($82) {
            $83 = HEAP8[$24 >> 0] | 0;
            $84 = $83 & 255;
            $85 = ((24151 + ($71 << 2) | 0) + ($84) | 0);
            $86 = HEAP8[$85 >> 0] | 0;
            HEAP8[$19 >> 0] = $86;
            $87 = ((($24)) + 1 | 0);
            $88 = HEAP8[$87 >> 0] | 0;
            $89 = $88 & 255;
            $90 = ((24151 + ($71 << 2) | 0) + ($89) | 0);
            $91 = HEAP8[$90 >> 0] | 0;
            $92 = ((($19)) + 1 | 0);
            HEAP8[$92 >> 0] = $91;
            $93 = ((($24)) + 2 | 0);
            $94 = HEAP8[$93 >> 0] | 0;
            $95 = $94 & 255;
            $96 = ((24151 + ($71 << 2) | 0) + ($95) | 0);
            $97 = HEAP8[$96 >> 0] | 0;
            $98 = ((($19)) + 2 | 0);
            HEAP8[$98 >> 0] = $97;
            $99 = ((($24)) + 3 | 0);
            $100 = HEAP8[$99 >> 0] | 0;
            $101 = $100 & 255;
            $102 = ((24151 + ($71 << 2) | 0) + ($101) | 0);
            $103 = HEAP8[$102 >> 0] | 0;
            $104 = ((($19)) + 3 | 0);
            HEAP8[$104 >> 0] = $103;
            $105 = ((($0)) + 3944 | 0);
            $106 = HEAP32[$105 >> 2] | 0;
            $107 = (($106) + ($6) | 0);
            $108 = HEAP8[$107 >> 0] | 0;
            $109 = ($108 << 24 >> 24) == (0);
            $110 = ((($1)) + 32 | 0);
            if ($109) {
                $111 = HEAP32[$110 >> 2] | 0;
                $112 = ((($111)) + 8 | 0);
                $113 = HEAP32[$112 >> 2] | 0;
                $114 = ((($29)) + 4 | 0);
                FUNCTION_TABLE_viiiii[$113 & 15]($114, $14, $74, $80, $19);
            }
            $115 = HEAP32[$110 >> 2] | 0;
            $116 = ((($115)) + 8 | 0);
            $117 = HEAP32[$116 >> 2] | 0;
            $118 = ((($29)) + 8 | 0);
            FUNCTION_TABLE_viiiii[$117 & 15]($118, $14, $74, $80, $19);
            $119 = HEAP32[$105 >> 2] | 0;
            $120 = (($119) + ($6) | 0);
            $121 = HEAP8[$120 >> 0] | 0;
            $122 = ($121 << 24 >> 24) == (0);
            if ($122) {
                $123 = HEAP32[$110 >> 2] | 0;
                $124 = ((($123)) + 8 | 0);
                $125 = HEAP32[$124 >> 2] | 0;
                $126 = ((($29)) + 12 | 0);
                FUNCTION_TABLE_viiiii[$125 & 15]($126, $14, $74, $80, $19);
            }
        }
        $127 = $2 & 2;
        $128 = ($127 | 0) == (0);
        if (!($128)) {
            $129 = HEAP32[$30 >> 2] | 0;
            $130 = (($6) - ($12)) | 0;
            $131 = (($129) + ($130) | 0);
            $132 = HEAP8[$131 >> 0] | 0;
            $133 = $132 << 24 >> 24;
            $134 = (($34) + 1) | 0;
            $135 = (($134) + ($133)) | 0;
            $136 = $135 >>> 1;
            $137 = $136 & 255;
            HEAP8[$$pre$phiZ2D >> 0] = $137;
            $sext123 = $136 << 24;
            $138 = $sext123 >> 24;
            $139 = HEAP8[$$pre$phi126Z2D >> 0] | 0;
            $140 = $139 << 24 >> 24;
            $141 = (($138) + 12) | 0;
            $142 = (($141) + ($140)) | 0;
            $143 = (23999 + ($142) | 0);
            $144 = HEAP8[$143 >> 0] | 0;
            $145 = $144 & 255;
            $146 = HEAP8[$$pre$phi128Z2D >> 0] | 0;
            $147 = $146 << 24 >> 24;
            $148 = (($141) + ($147)) | 0;
            $149 = (24075 + ($148) | 0);
            $150 = HEAP8[$149 >> 0] | 0;
            $151 = $150 << 24 >> 24;
            $152 = $151 | $145;
            $153 = ($152 | 0) == (0);
            if (!($153)) {
                $154 = ((($1)) + 32 | 0);
                $155 = HEAP32[$154 >> 2] | 0;
                $156 = ((($155)) + 4 | 0);
                $157 = HEAP32[$156 >> 2] | 0;
                FUNCTION_TABLE_viiii[$157 & 31]($29, $14, $145, $151);
            }
        }
        HEAP8[$$pre$phiZ2D >> 0] = $33;
        if (!($82)) {
            STACKTOP = sp; return;
        }
        $158 = ((($0)) + 3944 | 0);
        $159 = HEAP32[$158 >> 2] | 0;
        $160 = (($159) + ($6) | 0);
        $161 = HEAP8[$160 >> 0] | 0;
        $162 = ($161 << 24 >> 24) == (0);
        if ($162) {
            $163 = $14 << 2;
            $164 = (($29) + ($163) | 0);
            $165 = ((($1)) + 32 | 0);
            $166 = HEAP32[$165 >> 2] | 0;
            $167 = HEAP32[$166 >> 2] | 0;
            FUNCTION_TABLE_viiiii[$167 & 15]($164, $14, $74, $80, $19);
            $$pre$phi132Z2D = $165;
        } else {
            $$pre131 = ((($1)) + 32 | 0);
            $$pre$phi132Z2D = $$pre131;
        }
        $168 = HEAP32[$$pre$phi132Z2D >> 2] | 0;
        $169 = HEAP32[$168 >> 2] | 0;
        $170 = $14 << 3;
        $171 = (($29) + ($170) | 0);
        FUNCTION_TABLE_viiiii[$169 & 15]($171, $14, $74, $80, $19);
        $172 = HEAP32[$158 >> 2] | 0;
        $173 = (($172) + ($6) | 0);
        $174 = HEAP8[$173 >> 0] | 0;
        $175 = ($174 << 24 >> 24) == (0);
        if (!($175)) {
            STACKTOP = sp; return;
        }
        $176 = ($14 * 12) | 0;
        $177 = (($29) + ($176) | 0);
        $178 = HEAP32[$$pre$phi132Z2D >> 2] | 0;
        $179 = HEAP32[$178 >> 2] | 0;
        FUNCTION_TABLE_viiiii[$179 & 15]($177, $14, $74, $80, $19);
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec21FilteringEdgeChromaHVEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$pre = 0, $$pre$phi212Z2D = 0, $$pre$phi214Z2D = 0, $$pre$phiZ2D = 0, $$pre205 = 0, $$pre206 = 0, $$pre207 = 0, $$pre208 = 0, $$pre209 = 0, $$pre210 = 0, $$pre211 = 0, $$pre213 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
        var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
        var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
        var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
        var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
        var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
        var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
        var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
        var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
        var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
        var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
        var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
        var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
        var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
        var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
        var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $3 = sp + 7 | 0;
        $4 = sp;
        $5 = ((($0)) + 4040 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($0)) + 4032 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($0)) + 4036 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($0)) + 4044 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($1)) + 16 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ((($3)) + 15 | 0);
        $16 = $15;
        $17 = $16 & 15;
        $18 = (0 - ($17)) | 0;
        $19 = (($15) + ($18) | 0);
        $20 = ((($4)) + 3 | 0);
        $21 = $20;
        $22 = $21 & 3;
        $23 = (0 - ($22)) | 0;
        $24 = (($20) + ($23) | 0);
        $25 = ((($1)) + 4 | 0);
        $26 = HEAP32[$25 >> 2] | 0;
        $27 = Math_imul($14, $10) | 0;
        $28 = (($27) + ($8)) | 0;
        $29 = $28 << 3;
        $30 = (($26) + ($29) | 0);
        $31 = ((($1)) + 8 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = (($32) + ($29) | 0);
        $34 = ((($0)) + 3952 | 0);
        $35 = HEAP32[$34 >> 2] | 0;
        $36 = (($35) + ($6 << 1) | 0);
        HEAP32[$24 >> 2] = 50529027;
        $37 = $2 & 1;
        $38 = ($37 | 0) == (0);
        if ($38) {
            $$pre210 = ((($1)) + 26 | 0);
            $$pre211 = (((($35) + ($6 << 1) | 0)) + 1 | 0);
            $$pre213 = ((($1)) + 27 | 0);
            $$pre$phi212Z2D = $$pre211; $$pre$phi214Z2D = $$pre213; $$pre$phiZ2D = $$pre210;
        } else {
            $39 = (($6) + -1) | 0;
            $40 = HEAP8[$36 >> 0] | 0;
            $41 = $40 << 24 >> 24;
            $42 = (($35) + ($39 << 1) | 0);
            $43 = HEAP8[$42 >> 0] | 0;
            $44 = $43 << 24 >> 24;
            $45 = (($41) + 1) | 0;
            $46 = (($45) + ($44)) | 0;
            $47 = $46 >>> 1;
            $48 = $47 & 255;
            $49 = ((($1)) + 26 | 0);
            HEAP8[$49 >> 0] = $48;
            $50 = (((($35) + ($6 << 1) | 0)) + 1 | 0);
            $51 = HEAP8[$50 >> 0] | 0;
            $52 = $51 << 24 >> 24;
            $53 = HEAP32[$34 >> 2] | 0;
            $54 = (((($53) + ($39 << 1) | 0)) + 1 | 0);
            $55 = HEAP8[$54 >> 0] | 0;
            $56 = $55 << 24 >> 24;
            $57 = (($52) + 1) | 0;
            $58 = (($57) + ($56)) | 0;
            $59 = $58 >>> 1;
            $60 = $59 & 255;
            $61 = ((($1)) + 27 | 0);
            HEAP8[$61 >> 0] = $60;
            __ZN7WelsDec25FilteringEdgeChromaIntraVEPNS_19tagDeblockingFilterEPhS2_iS2_($1, $30, $33, $14, 0);
            $$pre$phi212Z2D = $50; $$pre$phi214Z2D = $61; $$pre$phiZ2D = $49;
        }
        $62 = HEAP8[$36 >> 0] | 0;
        HEAP8[$$pre$phiZ2D >> 0] = $62;
        $63 = HEAP8[$$pre$phi212Z2D >> 0] | 0;
        HEAP8[$$pre$phi214Z2D >> 0] = $63;
        $64 = $62 << 24 >> 24;
        $65 = ($62 << 24 >> 24) == ($63 << 24 >> 24);
        $66 = ((($1)) + 24 | 0);
        if ($65) {
            $90 = HEAP8[$66 >> 0] | 0;
            $91 = $90 << 24 >> 24;
            $92 = (($64) + 12) | 0;
            $93 = (($92) + ($91)) | 0;
            $94 = (23999 + ($93) | 0);
            $95 = HEAP8[$94 >> 0] | 0;
            $96 = $95 & 255;
            $97 = ((($1)) + 25 | 0);
            $98 = HEAP8[$97 >> 0] | 0;
            $99 = $98 << 24 >> 24;
            $100 = (($92) + ($99)) | 0;
            $101 = (24075 + ($100) | 0);
            $102 = HEAP8[$101 >> 0] | 0;
            $103 = $102 << 24 >> 24;
            $104 = $103 | $96;
            $105 = ($104 | 0) == (0);
            if (!($105)) {
                $106 = HEAP8[$24 >> 0] | 0;
                $107 = $106 & 255;
                $108 = ((24151 + ($93 << 2) | 0) + ($107) | 0);
                $109 = HEAP8[$108 >> 0] | 0;
                $110 = $109 & 255;
                $111 = (($110) + 1) | 0;
                $112 = $111 & 255;
                HEAP8[$19 >> 0] = $112;
                $113 = ((($24)) + 1 | 0);
                $114 = HEAP8[$113 >> 0] | 0;
                $115 = $114 & 255;
                $116 = ((24151 + ($93 << 2) | 0) + ($115) | 0);
                $117 = HEAP8[$116 >> 0] | 0;
                $118 = $117 & 255;
                $119 = (($118) + 1) | 0;
                $120 = $119 & 255;
                $121 = ((($19)) + 1 | 0);
                HEAP8[$121 >> 0] = $120;
                $122 = ((($24)) + 2 | 0);
                $123 = HEAP8[$122 >> 0] | 0;
                $124 = $123 & 255;
                $125 = ((24151 + ($93 << 2) | 0) + ($124) | 0);
                $126 = HEAP8[$125 >> 0] | 0;
                $127 = $126 & 255;
                $128 = (($127) + 1) | 0;
                $129 = $128 & 255;
                $130 = ((($19)) + 2 | 0);
                HEAP8[$130 >> 0] = $129;
                $131 = ((($24)) + 3 | 0);
                $132 = HEAP8[$131 >> 0] | 0;
                $133 = $132 & 255;
                $134 = ((24151 + ($93 << 2) | 0) + ($133) | 0);
                $135 = HEAP8[$134 >> 0] | 0;
                $136 = $135 & 255;
                $137 = (($136) + 1) | 0;
                $138 = $137 & 255;
                $139 = ((($19)) + 3 | 0);
                HEAP8[$139 >> 0] = $138;
                $140 = ((($1)) + 32 | 0);
                $141 = HEAP32[$140 >> 2] | 0;
                $142 = ((($141)) + 24 | 0);
                $143 = HEAP32[$142 >> 2] | 0;
                $144 = ((($30)) + 4 | 0);
                $145 = ((($33)) + 4 | 0);
                FUNCTION_TABLE_viiiiii[$143 & 31]($144, $145, $14, $96, $103, $19);
            }
        } else {
            $67 = ((($1)) + 25 | 0);
            $68 = ((($24)) + 1 | 0);
            $69 = ((($19)) + 1 | 0);
            $70 = ((($24)) + 2 | 0);
            $71 = ((($19)) + 2 | 0);
            $72 = ((($24)) + 3 | 0);
            $73 = ((($19)) + 3 | 0);
            $74 = ((($1)) + 32 | 0);
            $75 = HEAP8[$66 >> 0] | 0;
            $76 = $75 << 24 >> 24;
            $77 = (($64) + 12) | 0;
            $78 = (($77) + ($76)) | 0;
            $79 = (23999 + ($78) | 0);
            $80 = HEAP8[$79 >> 0] | 0;
            $81 = $80 & 255;
            $82 = HEAP8[$67 >> 0] | 0;
            $83 = $82 << 24 >> 24;
            $84 = (($77) + ($83)) | 0;
            $85 = (24075 + ($84) | 0);
            $86 = HEAP8[$85 >> 0] | 0;
            $87 = $86 << 24 >> 24;
            $88 = $87 | $81;
            $89 = ($88 | 0) == (0);
            if ($89) {
                $179 = $63; $181 = $75; $188 = $82;
            } else {
                $146 = ((($30)) + 4 | 0);
                $147 = HEAP8[$24 >> 0] | 0;
                $148 = $147 & 255;
                $149 = ((24151 + ($78 << 2) | 0) + ($148) | 0);
                $150 = HEAP8[$149 >> 0] | 0;
                $151 = $150 & 255;
                $152 = (($151) + 1) | 0;
                $153 = $152 & 255;
                HEAP8[$19 >> 0] = $153;
                $154 = HEAP8[$68 >> 0] | 0;
                $155 = $154 & 255;
                $156 = ((24151 + ($78 << 2) | 0) + ($155) | 0);
                $157 = HEAP8[$156 >> 0] | 0;
                $158 = $157 & 255;
                $159 = (($158) + 1) | 0;
                $160 = $159 & 255;
                HEAP8[$69 >> 0] = $160;
                $161 = HEAP8[$70 >> 0] | 0;
                $162 = $161 & 255;
                $163 = ((24151 + ($78 << 2) | 0) + ($162) | 0);
                $164 = HEAP8[$163 >> 0] | 0;
                $165 = $164 & 255;
                $166 = (($165) + 1) | 0;
                $167 = $166 & 255;
                HEAP8[$71 >> 0] = $167;
                $168 = HEAP8[$72 >> 0] | 0;
                $169 = $168 & 255;
                $170 = ((24151 + ($78 << 2) | 0) + ($169) | 0);
                $171 = HEAP8[$170 >> 0] | 0;
                $172 = $171 & 255;
                $173 = (($172) + 1) | 0;
                $174 = $173 & 255;
                HEAP8[$73 >> 0] = $174;
                $175 = HEAP32[$74 >> 2] | 0;
                $176 = ((($175)) + 40 | 0);
                $177 = HEAP32[$176 >> 2] | 0;
                FUNCTION_TABLE_viiiii[$177 & 15]($146, $14, $81, $87, $19);
                $$pre = HEAP8[$$pre$phi214Z2D >> 0] | 0;
                $$pre205 = HEAP8[$66 >> 0] | 0;
                $$pre206 = HEAP8[$67 >> 0] | 0;
                $179 = $$pre; $181 = $$pre205; $188 = $$pre206;
            }
            $178 = $179 << 24 >> 24;
            $180 = $181 << 24 >> 24;
            $182 = (($178) + 12) | 0;
            $183 = (($182) + ($180)) | 0;
            $184 = (23999 + ($183) | 0);
            $185 = HEAP8[$184 >> 0] | 0;
            $186 = $185 & 255;
            $187 = $188 << 24 >> 24;
            $189 = (($182) + ($187)) | 0;
            $190 = (24075 + ($189) | 0);
            $191 = HEAP8[$190 >> 0] | 0;
            $192 = $191 << 24 >> 24;
            $193 = $192 | $186;
            $194 = ($193 | 0) == (0);
            if (!($194)) {
                $288 = ((($33)) + 4 | 0);
                $289 = HEAP8[$24 >> 0] | 0;
                $290 = $289 & 255;
                $291 = ((24151 + ($183 << 2) | 0) + ($290) | 0);
                $292 = HEAP8[$291 >> 0] | 0;
                $293 = $292 & 255;
                $294 = (($293) + 1) | 0;
                $295 = $294 & 255;
                HEAP8[$19 >> 0] = $295;
                $296 = HEAP8[$68 >> 0] | 0;
                $297 = $296 & 255;
                $298 = ((24151 + ($183 << 2) | 0) + ($297) | 0);
                $299 = HEAP8[$298 >> 0] | 0;
                $300 = $299 & 255;
                $301 = (($300) + 1) | 0;
                $302 = $301 & 255;
                HEAP8[$69 >> 0] = $302;
                $303 = HEAP8[$70 >> 0] | 0;
                $304 = $303 & 255;
                $305 = ((24151 + ($183 << 2) | 0) + ($304) | 0);
                $306 = HEAP8[$305 >> 0] | 0;
                $307 = $306 & 255;
                $308 = (($307) + 1) | 0;
                $309 = $308 & 255;
                HEAP8[$71 >> 0] = $309;
                $310 = HEAP8[$72 >> 0] | 0;
                $311 = $310 & 255;
                $312 = ((24151 + ($183 << 2) | 0) + ($311) | 0);
                $313 = HEAP8[$312 >> 0] | 0;
                $314 = $313 & 255;
                $315 = (($314) + 1) | 0;
                $316 = $315 & 255;
                HEAP8[$73 >> 0] = $316;
                $317 = HEAP32[$74 >> 2] | 0;
                $318 = ((($317)) + 40 | 0);
                $319 = HEAP32[$318 >> 2] | 0;
                FUNCTION_TABLE_viiiii[$319 & 15]($288, $14, $186, $192, $19);
            }
        }
        $195 = $2 & 2;
        $196 = ($195 | 0) == (0);
        if (!($196)) {
            $197 = (($6) - ($12)) | 0;
            $198 = HEAP8[$36 >> 0] | 0;
            $199 = $198 << 24 >> 24;
            $200 = HEAP32[$34 >> 2] | 0;
            $201 = (($200) + ($197 << 1) | 0);
            $202 = HEAP8[$201 >> 0] | 0;
            $203 = $202 << 24 >> 24;
            $204 = (($199) + 1) | 0;
            $205 = (($204) + ($203)) | 0;
            $206 = $205 >>> 1;
            $207 = $206 & 255;
            HEAP8[$$pre$phiZ2D >> 0] = $207;
            $208 = HEAP8[$$pre$phi212Z2D >> 0] | 0;
            $209 = $208 << 24 >> 24;
            $210 = HEAP32[$34 >> 2] | 0;
            $211 = (((($210) + ($197 << 1) | 0)) + 1 | 0);
            $212 = HEAP8[$211 >> 0] | 0;
            $213 = $212 << 24 >> 24;
            $214 = (($209) + 1) | 0;
            $215 = (($214) + ($213)) | 0;
            $216 = $215 >>> 1;
            $217 = $216 & 255;
            HEAP8[$$pre$phi214Z2D >> 0] = $217;
            __ZN7WelsDec25FilteringEdgeChromaIntraHEPNS_19tagDeblockingFilterEPhS2_iS2_($1, $30, $33, $14, 0);
        }
        $218 = HEAP8[$36 >> 0] | 0;
        HEAP8[$$pre$phiZ2D >> 0] = $218;
        $219 = HEAP8[$$pre$phi212Z2D >> 0] | 0;
        HEAP8[$$pre$phi214Z2D >> 0] = $219;
        $220 = $218 << 24 >> 24;
        $221 = ($218 << 24 >> 24) == ($219 << 24 >> 24);
        if ($221) {
            $240 = HEAP8[$66 >> 0] | 0;
            $241 = $240 << 24 >> 24;
            $242 = (($220) + 12) | 0;
            $243 = (($242) + ($241)) | 0;
            $244 = (23999 + ($243) | 0);
            $245 = HEAP8[$244 >> 0] | 0;
            $246 = $245 & 255;
            $247 = ((($1)) + 25 | 0);
            $248 = HEAP8[$247 >> 0] | 0;
            $249 = $248 << 24 >> 24;
            $250 = (($242) + ($249)) | 0;
            $251 = (24075 + ($250) | 0);
            $252 = HEAP8[$251 >> 0] | 0;
            $253 = $252 << 24 >> 24;
            $254 = $253 | $246;
            $255 = ($254 | 0) == (0);
            $256 = $14 << 2;
            if ($255) {
                STACKTOP = sp; return;
            }
            $257 = (($33) + ($256) | 0);
            $258 = (($30) + ($256) | 0);
            $259 = ((($1)) + 32 | 0);
            $260 = HEAP32[$259 >> 2] | 0;
            $261 = ((($260)) + 16 | 0);
            $262 = HEAP32[$261 >> 2] | 0;
            FUNCTION_TABLE_viiiiii[$262 & 31]($258, $257, $14, $246, $253, $19);
            STACKTOP = sp; return;
        }
        $222 = ((($1)) + 25 | 0);
        $223 = ((($1)) + 32 | 0);
        $224 = $14 << 2;
        $225 = HEAP8[$66 >> 0] | 0;
        $226 = $225 << 24 >> 24;
        $227 = (($220) + 12) | 0;
        $228 = (($227) + ($226)) | 0;
        $229 = (23999 + ($228) | 0);
        $230 = HEAP8[$229 >> 0] | 0;
        $231 = $230 & 255;
        $232 = HEAP8[$222 >> 0] | 0;
        $233 = $232 << 24 >> 24;
        $234 = (($227) + ($233)) | 0;
        $235 = (24075 + ($234) | 0);
        $236 = HEAP8[$235 >> 0] | 0;
        $237 = $236 << 24 >> 24;
        $238 = $237 | $231;
        $239 = ($238 | 0) == (0);
        if ($239) {
            $268 = $219; $270 = $225; $277 = $232;
        } else {
            $263 = (($30) + ($224) | 0);
            $264 = HEAP32[$223 >> 2] | 0;
            $265 = ((($264)) + 32 | 0);
            $266 = HEAP32[$265 >> 2] | 0;
            FUNCTION_TABLE_viiiii[$266 & 15]($263, $14, $231, $237, $19);
            $$pre207 = HEAP8[$$pre$phi214Z2D >> 0] | 0;
            $$pre208 = HEAP8[$66 >> 0] | 0;
            $$pre209 = HEAP8[$222 >> 0] | 0;
            $268 = $$pre207; $270 = $$pre208; $277 = $$pre209;
        }
        $267 = $268 << 24 >> 24;
        $269 = $270 << 24 >> 24;
        $271 = (($267) + 12) | 0;
        $272 = (($271) + ($269)) | 0;
        $273 = (23999 + ($272) | 0);
        $274 = HEAP8[$273 >> 0] | 0;
        $275 = $274 & 255;
        $276 = $277 << 24 >> 24;
        $278 = (($271) + ($276)) | 0;
        $279 = (24075 + ($278) | 0);
        $280 = HEAP8[$279 >> 0] | 0;
        $281 = $280 << 24 >> 24;
        $282 = $281 | $275;
        $283 = ($282 | 0) == (0);
        if ($283) {
            STACKTOP = sp; return;
        }
        $284 = (($33) + ($224) | 0);
        $285 = HEAP32[$223 >> 2] | 0;
        $286 = ((($285)) + 32 | 0);
        $287 = HEAP32[$286 >> 2] | 0;
        FUNCTION_TABLE_viiiii[$287 & 15]($284, $14, $275, $281, $19);
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec29DeblockingBsMarginalMBAvcbaseEPNS_10TagDqLayerEiii($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0312348 = 0, $$0312348$1 = 0, $$1313342 = 0, $$1313342$1 = 0, $$3315336 = 0, $$3315336$1 = 0, $$sink12 = 0, $$sink12$1 = 0, $$sink12$1$1 = 0, $$sink12$1361 = 0, $$sink19 = 0, $$sink19$1 = 0, $$sink19$2 = 0, $$sink19$3 = 0, $$sink20$1 = 0, $$sink20$2 = 0, $$sink20$3 = 0, $$sink316 = 0, $$sink316$1 = 0, $$sink5 = 0;
        var $$sink5$1 = 0, $$sink5$1$1 = 0, $$sink5$1365 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
        var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
        var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
        var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
        var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
        var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
        var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
        var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
        var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
        var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
        var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
        var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
        var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
        var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
        var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
        var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
        var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
        var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
        var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
        var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
        var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
        var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
        var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
        var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
        var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
        var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
        var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
        var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
        var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
        var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
        var $64 = 0, $640 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
        var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
        var $phitmp = 0, $phitmp370 = 0, $phitmp371 = 0, $phitmp372 = 0, $phitmp373 = 0, $phitmp374 = 0, $phitmp375 = 0, $phitmp376 = 0, $phitmp377 = 0, $phitmp378 = 0, $phitmp379 = 0, $phitmp380 = 0, $phitmp381 = 0, $phitmp382 = 0, $scevgep = 0, $scevgep364 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $4 = sp;
        $5 = (24455 + ($1 << 3) | 0);
        $6 = (((24455 + ($1 << 3) | 0)) + 4 | 0);
        $7 = (24471 + ($1 << 4) | 0);
        $8 = (((24471 + ($1 << 4) | 0)) + 8 | 0);
        $9 = ((($0)) + 3944 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = (($10) + ($3) | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = ($12 << 24 >> 24) == (0);
        $14 = (($10) + ($2) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = ($15 << 24 >> 24) == (0);
        $17 = ((($0)) + 3964 | 0);
        $18 = ((($0)) + 3932 | 0);
        $19 = ((($0)) + 3916 | 0);
        $20 = HEAP32[$17 >> 2] | 0;
        if (!($13)) {
            if ($16) {
                $$1313342 = 0;
            } else {
                $$0312348 = 0;
                while (1) {
                    $21 = ((24471 + ($1 << 4) | 0) + ($$0312348) | 0);
                    $22 = HEAP8[$21 >> 0] | 0;
                    $23 = $22 & 255;
                    $24 = ((($20) + (($3 * 24) | 0) | 0) + ($23) | 0);
                    $25 = HEAP8[$24 >> 0] | 0;
                    $26 = (($8) + ($$0312348) | 0);
                    $27 = HEAP8[$26 >> 0] | 0;
                    $28 = $27 & 255;
                    $29 = ((($20) + (($2 * 24) | 0) | 0) + ($28) | 0);
                    $30 = HEAP8[$29 >> 0] | 0;
                    $31 = $25 | $30;
                    $32 = (($$0312348) + 1) | 0;
                    $33 = ($31 << 24 >> 24) == (0);
                    $34 = ($$0312348 | 0) < (3);
                    $35 = $34 & $33;
                    if ($35) {
                        $$0312348 = $32;
                    } else {
                        break;
                    }
                }
                if ($33) {
                    $36 = HEAP32[$18 >> 2] | 0;
                    $37 = HEAP8[$7 >> 0] | 0;
                    $38 = $37 & 255;
                    $39 = ((($36) + ($3 << 4) | 0) + ($38) | 0);
                    $40 = HEAP8[$39 >> 0] | 0;
                    $41 = HEAP8[$8 >> 0] | 0;
                    $42 = $41 & 255;
                    $43 = ((($36) + ($2 << 4) | 0) + ($42) | 0);
                    $44 = HEAP8[$43 >> 0] | 0;
                    $45 = ($40 << 24 >> 24) == ($44 << 24 >> 24);
                    if ($45) {
                        $46 = HEAP32[$19 >> 2] | 0;
                        $47 = ((($46) + ($3 << 6) | 0) + ($38 << 2) | 0);
                        $48 = HEAP16[$47 >> 1] | 0;
                        $49 = $48 << 16 >> 16;
                        $50 = ((($46) + ($2 << 6) | 0) + ($42 << 2) | 0);
                        $51 = HEAP16[$50 >> 1] | 0;
                        $52 = $51 << 16 >> 16;
                        $53 = (($49) - ($52)) | 0;
                        $54 = $53 >> 31;
                        $55 = $54 ^ $53;
                        $56 = (($55) - ($54)) | 0;
                        $57 = ($56 | 0) > (3);
                        if ($57) {
                            $$sink316 = 1;
                        } else {
                            $58 = ((((($46) + ($3 << 6) | 0) + ($38 << 2) | 0)) + 2 | 0);
                            $59 = HEAP16[$58 >> 1] | 0;
                            $60 = $59 << 16 >> 16;
                            $61 = ((((($46) + ($2 << 6) | 0) + ($42 << 2) | 0)) + 2 | 0);
                            $62 = HEAP16[$61 >> 1] | 0;
                            $63 = $62 << 16 >> 16;
                            $64 = (($60) - ($63)) | 0;
                            $65 = $64 >> 31;
                            $66 = $65 ^ $64;
                            $67 = (($66) - ($65)) | 0;
                            $68 = ($67 | 0) > (3);
                            $phitmp370 = $68 & 1;
                            $$sink316 = $phitmp370;
                        }
                    } else {
                        $$sink316 = 1;
                    }
                } else {
                    $$sink316 = 2;
                }
                $69 = ((($4)) + 1 | 0);
                HEAP8[$69 >> 0] = $$sink316;
                HEAP8[$4 >> 0] = $$sink316;
                $70 = (((24471 + ($1 << 4) | 0)) + 4 | 0);
                $71 = (((24471 + ($1 << 4) | 0)) + 12 | 0);
                $$0312348$1 = 0;
                while (1) {
                    $591 = (($70) + ($$0312348$1) | 0);
                    $592 = HEAP8[$591 >> 0] | 0;
                    $593 = $592 & 255;
                    $594 = ((($20) + (($3 * 24) | 0) | 0) + ($593) | 0);
                    $595 = HEAP8[$594 >> 0] | 0;
                    $596 = (($71) + ($$0312348$1) | 0);
                    $597 = HEAP8[$596 >> 0] | 0;
                    $598 = $597 & 255;
                    $599 = ((($20) + (($2 * 24) | 0) | 0) + ($598) | 0);
                    $600 = HEAP8[$599 >> 0] | 0;
                    $601 = $595 | $600;
                    $602 = (($$0312348$1) + 1) | 0;
                    $603 = ($601 << 24 >> 24) == (0);
                    $604 = ($$0312348$1 | 0) < (3);
                    $605 = $604 & $603;
                    if ($605) {
                        $$0312348$1 = $602;
                    } else {
                        break;
                    }
                }
                if ($603) {
                    $606 = HEAP32[$18 >> 2] | 0;
                    $607 = HEAP8[$70 >> 0] | 0;
                    $608 = $607 & 255;
                    $609 = ((($606) + ($3 << 4) | 0) + ($608) | 0);
                    $610 = HEAP8[$609 >> 0] | 0;
                    $611 = HEAP8[$71 >> 0] | 0;
                    $612 = $611 & 255;
                    $613 = ((($606) + ($2 << 4) | 0) + ($612) | 0);
                    $614 = HEAP8[$613 >> 0] | 0;
                    $615 = ($610 << 24 >> 24) == ($614 << 24 >> 24);
                    if ($615) {
                        $616 = HEAP32[$19 >> 2] | 0;
                        $617 = ((($616) + ($3 << 6) | 0) + ($608 << 2) | 0);
                        $618 = HEAP16[$617 >> 1] | 0;
                        $619 = $618 << 16 >> 16;
                        $620 = ((($616) + ($2 << 6) | 0) + ($612 << 2) | 0);
                        $621 = HEAP16[$620 >> 1] | 0;
                        $622 = $621 << 16 >> 16;
                        $623 = (($619) - ($622)) | 0;
                        $624 = $623 >> 31;
                        $625 = $624 ^ $623;
                        $626 = (($625) - ($624)) | 0;
                        $627 = ($626 | 0) > (3);
                        if ($627) {
                            $$sink316$1 = 1;
                        } else {
                            $628 = ((((($616) + ($3 << 6) | 0) + ($608 << 2) | 0)) + 2 | 0);
                            $629 = HEAP16[$628 >> 1] | 0;
                            $630 = $629 << 16 >> 16;
                            $631 = ((((($616) + ($2 << 6) | 0) + ($612 << 2) | 0)) + 2 | 0);
                            $632 = HEAP16[$631 >> 1] | 0;
                            $633 = $632 << 16 >> 16;
                            $634 = (($630) - ($633)) | 0;
                            $635 = $634 >> 31;
                            $636 = $635 ^ $634;
                            $637 = (($636) - ($635)) | 0;
                            $638 = ($637 | 0) > (3);
                            $phitmp = $638 & 1;
                            $$sink316$1 = $phitmp;
                        }
                    } else {
                        $$sink316$1 = 1;
                    }
                } else {
                    $$sink316$1 = 2;
                }
                $639 = ((($4)) + 3 | 0);
                HEAP8[$639 >> 0] = $$sink316$1;
                $640 = ((($4)) + 2 | 0);
                HEAP8[$640 >> 0] = $$sink316$1;
                $235 = HEAP32[$4 >> 2] | 0;
                STACKTOP = sp; return ($235 | 0);
            }
            while (1) {
                $81 = ((24471 + ($1 << 4) | 0) + ($$1313342) | 0);
                $82 = HEAP8[$81 >> 0] | 0;
                $83 = $82 & 255;
                $84 = ((($20) + (($3 * 24) | 0) | 0) + ($83) | 0);
                $73 = HEAP8[$84 >> 0] | 0;
                $85 = (($$1313342) + 1) | 0;
                $86 = ($73 << 24 >> 24) == (0);
                $87 = ($$1313342 | 0) < (3);
                $88 = $87 & $86;
                if ($88) {
                    $$1313342 = $85;
                } else {
                    break;
                }
            }
            $72 = $73 & 255;
            $74 = HEAP8[$6 >> 0] | 0;
            $75 = $74 & 255;
            $76 = ((($20) + (($2 * 24) | 0) | 0) + ($75) | 0);
            $77 = HEAP8[$76 >> 0] | 0;
            $78 = $77 << 24 >> 24;
            $79 = $72 | $78;
            $80 = ($79 | 0) == (0);
            if ($80) {
                $89 = HEAP32[$18 >> 2] | 0;
                $90 = HEAP8[$7 >> 0] | 0;
                $91 = $90 & 255;
                $92 = ((($89) + ($3 << 4) | 0) + ($91) | 0);
                $93 = HEAP8[$92 >> 0] | 0;
                $94 = ((($89) + ($2 << 4) | 0) + ($75) | 0);
                $95 = HEAP8[$94 >> 0] | 0;
                $96 = ($93 << 24 >> 24) == ($95 << 24 >> 24);
                if ($96) {
                    $97 = HEAP32[$19 >> 2] | 0;
                    $98 = ((($97) + ($3 << 6) | 0) + ($91 << 2) | 0);
                    $99 = HEAP16[$98 >> 1] | 0;
                    $100 = $99 << 16 >> 16;
                    $101 = ((($97) + ($2 << 6) | 0) + ($75 << 2) | 0);
                    $102 = HEAP16[$101 >> 1] | 0;
                    $103 = $102 << 16 >> 16;
                    $104 = (($100) - ($103)) | 0;
                    $105 = $104 >> 31;
                    $106 = $105 ^ $104;
                    $107 = (($106) - ($105)) | 0;
                    $108 = ($107 | 0) > (3);
                    if ($108) {
                        $$sink5 = 1;
                    } else {
                        $109 = ((((($97) + ($3 << 6) | 0) + ($91 << 2) | 0)) + 2 | 0);
                        $110 = HEAP16[$109 >> 1] | 0;
                        $111 = $110 << 16 >> 16;
                        $112 = ((((($97) + ($2 << 6) | 0) + ($75 << 2) | 0)) + 2 | 0);
                        $113 = HEAP16[$112 >> 1] | 0;
                        $114 = $113 << 16 >> 16;
                        $115 = (($111) - ($114)) | 0;
                        $116 = $115 >> 31;
                        $117 = $116 ^ $115;
                        $118 = (($117) - ($116)) | 0;
                        $119 = ($118 | 0) > (3);
                        $phitmp374 = $119 & 1;
                        $$sink5 = $phitmp374;
                    }
                } else {
                    $$sink5 = 1;
                }
            } else {
                $$sink5 = 2;
            }
            HEAP8[$4 >> 0] = $$sink5;
            $120 = (((24455 + ($1 << 3) | 0)) + 5 | 0);
            $121 = HEAP8[$120 >> 0] | 0;
            $122 = $121 & 255;
            $123 = ((($20) + (($2 * 24) | 0) | 0) + ($122) | 0);
            $124 = HEAP8[$123 >> 0] | 0;
            $125 = $124 << 24 >> 24;
            $126 = $72 | $125;
            $127 = ($126 | 0) == (0);
            if ($127) {
                $469 = HEAP32[$18 >> 2] | 0;
                $470 = HEAP8[$7 >> 0] | 0;
                $471 = $470 & 255;
                $472 = ((($469) + ($3 << 4) | 0) + ($471) | 0);
                $473 = HEAP8[$472 >> 0] | 0;
                $474 = ((($469) + ($2 << 4) | 0) + ($122) | 0);
                $475 = HEAP8[$474 >> 0] | 0;
                $476 = ($473 << 24 >> 24) == ($475 << 24 >> 24);
                if ($476) {
                    $477 = HEAP32[$19 >> 2] | 0;
                    $478 = ((($477) + ($3 << 6) | 0) + ($471 << 2) | 0);
                    $479 = HEAP16[$478 >> 1] | 0;
                    $480 = $479 << 16 >> 16;
                    $481 = ((($477) + ($2 << 6) | 0) + ($122 << 2) | 0);
                    $482 = HEAP16[$481 >> 1] | 0;
                    $483 = $482 << 16 >> 16;
                    $484 = (($480) - ($483)) | 0;
                    $485 = $484 >> 31;
                    $486 = $485 ^ $484;
                    $487 = (($486) - ($485)) | 0;
                    $488 = ($487 | 0) > (3);
                    if ($488) {
                        $$sink5$1 = 1;
                    } else {
                        $489 = ((((($477) + ($3 << 6) | 0) + ($471 << 2) | 0)) + 2 | 0);
                        $490 = HEAP16[$489 >> 1] | 0;
                        $491 = $490 << 16 >> 16;
                        $492 = ((((($477) + ($2 << 6) | 0) + ($122 << 2) | 0)) + 2 | 0);
                        $493 = HEAP16[$492 >> 1] | 0;
                        $494 = $493 << 16 >> 16;
                        $495 = (($491) - ($494)) | 0;
                        $496 = $495 >> 31;
                        $497 = $496 ^ $495;
                        $498 = (($497) - ($496)) | 0;
                        $499 = ($498 | 0) > (3);
                        $phitmp373 = $499 & 1;
                        $$sink5$1 = $phitmp373;
                    }
                } else {
                    $$sink5$1 = 1;
                }
            } else {
                $$sink5$1 = 2;
            }
            $500 = ((($4)) + 1 | 0);
            HEAP8[$500 >> 0] = $$sink5$1;
            $scevgep364 = (((24455 + ($1 << 3) | 0)) + 6 | 0);
            $501 = (((24471 + ($1 << 4) | 0)) + 4 | 0);
            $$1313342$1 = 0;
            while (1) {
                $502 = (($501) + ($$1313342$1) | 0);
                $503 = HEAP8[$502 >> 0] | 0;
                $504 = $503 & 255;
                $505 = ((($20) + (($3 * 24) | 0) | 0) + ($504) | 0);
                $506 = HEAP8[$505 >> 0] | 0;
                $507 = (($$1313342$1) + 1) | 0;
                $508 = ($506 << 24 >> 24) == (0);
                $509 = ($$1313342$1 | 0) < (3);
                $510 = $509 & $508;
                if ($510) {
                    $$1313342$1 = $507;
                } else {
                    break;
                }
            }
            $511 = $506 & 255;
            $512 = HEAP8[$scevgep364 >> 0] | 0;
            $513 = $512 & 255;
            $514 = ((($20) + (($2 * 24) | 0) | 0) + ($513) | 0);
            $515 = HEAP8[$514 >> 0] | 0;
            $516 = $515 << 24 >> 24;
            $517 = $511 | $516;
            $518 = ($517 | 0) == (0);
            if ($518) {
                $519 = HEAP32[$18 >> 2] | 0;
                $520 = HEAP8[$501 >> 0] | 0;
                $521 = $520 & 255;
                $522 = ((($519) + ($3 << 4) | 0) + ($521) | 0);
                $523 = HEAP8[$522 >> 0] | 0;
                $524 = ((($519) + ($2 << 4) | 0) + ($513) | 0);
                $525 = HEAP8[$524 >> 0] | 0;
                $526 = ($523 << 24 >> 24) == ($525 << 24 >> 24);
                if ($526) {
                    $527 = HEAP32[$19 >> 2] | 0;
                    $528 = ((($527) + ($3 << 6) | 0) + ($521 << 2) | 0);
                    $529 = HEAP16[$528 >> 1] | 0;
                    $530 = $529 << 16 >> 16;
                    $531 = ((($527) + ($2 << 6) | 0) + ($513 << 2) | 0);
                    $532 = HEAP16[$531 >> 1] | 0;
                    $533 = $532 << 16 >> 16;
                    $534 = (($530) - ($533)) | 0;
                    $535 = $534 >> 31;
                    $536 = $535 ^ $534;
                    $537 = (($536) - ($535)) | 0;
                    $538 = ($537 | 0) > (3);
                    if ($538) {
                        $$sink5$1365 = 1;
                    } else {
                        $539 = ((((($527) + ($3 << 6) | 0) + ($521 << 2) | 0)) + 2 | 0);
                        $540 = HEAP16[$539 >> 1] | 0;
                        $541 = $540 << 16 >> 16;
                        $542 = ((((($527) + ($2 << 6) | 0) + ($513 << 2) | 0)) + 2 | 0);
                        $543 = HEAP16[$542 >> 1] | 0;
                        $544 = $543 << 16 >> 16;
                        $545 = (($541) - ($544)) | 0;
                        $546 = $545 >> 31;
                        $547 = $546 ^ $545;
                        $548 = (($547) - ($546)) | 0;
                        $549 = ($548 | 0) > (3);
                        $phitmp372 = $549 & 1;
                        $$sink5$1365 = $phitmp372;
                    }
                } else {
                    $$sink5$1365 = 1;
                }
            } else {
                $$sink5$1365 = 2;
            }
            $550 = ((($4)) + 2 | 0);
            HEAP8[$550 >> 0] = $$sink5$1365;
            $551 = (((24455 + ($1 << 3) | 0)) + 7 | 0);
            $552 = HEAP8[$551 >> 0] | 0;
            $553 = $552 & 255;
            $554 = ((($20) + (($2 * 24) | 0) | 0) + ($553) | 0);
            $555 = HEAP8[$554 >> 0] | 0;
            $556 = $555 << 24 >> 24;
            $557 = $511 | $556;
            $558 = ($557 | 0) == (0);
            if ($558) {
                $559 = HEAP32[$18 >> 2] | 0;
                $560 = HEAP8[$501 >> 0] | 0;
                $561 = $560 & 255;
                $562 = ((($559) + ($3 << 4) | 0) + ($561) | 0);
                $563 = HEAP8[$562 >> 0] | 0;
                $564 = ((($559) + ($2 << 4) | 0) + ($553) | 0);
                $565 = HEAP8[$564 >> 0] | 0;
                $566 = ($563 << 24 >> 24) == ($565 << 24 >> 24);
                if ($566) {
                    $567 = HEAP32[$19 >> 2] | 0;
                    $568 = ((($567) + ($3 << 6) | 0) + ($561 << 2) | 0);
                    $569 = HEAP16[$568 >> 1] | 0;
                    $570 = $569 << 16 >> 16;
                    $571 = ((($567) + ($2 << 6) | 0) + ($553 << 2) | 0);
                    $572 = HEAP16[$571 >> 1] | 0;
                    $573 = $572 << 16 >> 16;
                    $574 = (($570) - ($573)) | 0;
                    $575 = $574 >> 31;
                    $576 = $575 ^ $574;
                    $577 = (($576) - ($575)) | 0;
                    $578 = ($577 | 0) > (3);
                    if ($578) {
                        $$sink5$1$1 = 1;
                    } else {
                        $579 = ((((($567) + ($3 << 6) | 0) + ($561 << 2) | 0)) + 2 | 0);
                        $580 = HEAP16[$579 >> 1] | 0;
                        $581 = $580 << 16 >> 16;
                        $582 = ((((($567) + ($2 << 6) | 0) + ($553 << 2) | 0)) + 2 | 0);
                        $583 = HEAP16[$582 >> 1] | 0;
                        $584 = $583 << 16 >> 16;
                        $585 = (($581) - ($584)) | 0;
                        $586 = $585 >> 31;
                        $587 = $586 ^ $585;
                        $588 = (($587) - ($586)) | 0;
                        $589 = ($588 | 0) > (3);
                        $phitmp371 = $589 & 1;
                        $$sink5$1$1 = $phitmp371;
                    }
                } else {
                    $$sink5$1$1 = 1;
                }
            } else {
                $$sink5$1$1 = 2;
            }
            $590 = ((($4)) + 3 | 0);
            HEAP8[$590 >> 0] = $$sink5$1$1;
            $235 = HEAP32[$4 >> 2] | 0;
            STACKTOP = sp; return ($235 | 0);
        }
        if ($16) {
            $128 = HEAP8[$5 >> 0] | 0;
            $129 = $128 & 255;
            $130 = ((($20) + (($3 * 24) | 0) | 0) + ($129) | 0);
            $131 = HEAP8[$130 >> 0] | 0;
            $132 = HEAP8[$6 >> 0] | 0;
            $133 = $132 & 255;
            $134 = ((($20) + (($2 * 24) | 0) | 0) + ($133) | 0);
            $135 = HEAP8[$134 >> 0] | 0;
            $136 = $135 | $131;
            $137 = ($136 << 24 >> 24) == (0);
            if ($137) {
                $194 = HEAP32[$18 >> 2] | 0;
                $195 = ((($194) + ($3 << 4) | 0) + ($129) | 0);
                $196 = HEAP8[$195 >> 0] | 0;
                $197 = ((($194) + ($2 << 4) | 0) + ($133) | 0);
                $198 = HEAP8[$197 >> 0] | 0;
                $199 = ($196 << 24 >> 24) == ($198 << 24 >> 24);
                if ($199) {
                    $200 = HEAP32[$19 >> 2] | 0;
                    $201 = ((($200) + ($3 << 6) | 0) + ($129 << 2) | 0);
                    $202 = HEAP16[$201 >> 1] | 0;
                    $203 = $202 << 16 >> 16;
                    $204 = ((($200) + ($2 << 6) | 0) + ($133 << 2) | 0);
                    $205 = HEAP16[$204 >> 1] | 0;
                    $206 = $205 << 16 >> 16;
                    $207 = (($203) - ($206)) | 0;
                    $208 = $207 >> 31;
                    $209 = $208 ^ $207;
                    $210 = (($209) - ($208)) | 0;
                    $211 = ($210 | 0) > (3);
                    if ($211) {
                        $$sink19 = 1;
                    } else {
                        $212 = ((((($200) + ($3 << 6) | 0) + ($129 << 2) | 0)) + 2 | 0);
                        $213 = HEAP16[$212 >> 1] | 0;
                        $214 = $213 << 16 >> 16;
                        $215 = ((((($200) + ($2 << 6) | 0) + ($133 << 2) | 0)) + 2 | 0);
                        $216 = HEAP16[$215 >> 1] | 0;
                        $217 = $216 << 16 >> 16;
                        $218 = (($214) - ($217)) | 0;
                        $219 = $218 >> 31;
                        $220 = $219 ^ $218;
                        $221 = (($220) - ($219)) | 0;
                        $222 = ($221 | 0) > (3);
                        $phitmp382 = $222 & 1;
                        $$sink19 = $phitmp382;
                    }
                } else {
                    $$sink19 = 1;
                }
            } else {
                $$sink19 = 2;
            }
            HEAP8[$4 >> 0] = $$sink19;
            $223 = (((24455 + ($1 << 3) | 0)) + 1 | 0);
            $224 = (((24455 + ($1 << 3) | 0)) + 5 | 0);
            $225 = HEAP8[$223 >> 0] | 0;
            $226 = $225 & 255;
            $227 = ((($20) + (($3 * 24) | 0) | 0) + ($226) | 0);
            $228 = HEAP8[$227 >> 0] | 0;
            $229 = HEAP8[$224 >> 0] | 0;
            $230 = $229 & 255;
            $231 = ((($20) + (($2 * 24) | 0) | 0) + ($230) | 0);
            $232 = HEAP8[$231 >> 0] | 0;
            $233 = $232 | $228;
            $234 = ($233 << 24 >> 24) == (0);
            if ($234) {
                $236 = HEAP32[$18 >> 2] | 0;
                $237 = ((($236) + ($3 << 4) | 0) + ($226) | 0);
                $238 = HEAP8[$237 >> 0] | 0;
                $239 = ((($236) + ($2 << 4) | 0) + ($230) | 0);
                $240 = HEAP8[$239 >> 0] | 0;
                $241 = ($238 << 24 >> 24) == ($240 << 24 >> 24);
                if ($241) {
                    $242 = HEAP32[$19 >> 2] | 0;
                    $243 = ((($242) + ($3 << 6) | 0) + ($226 << 2) | 0);
                    $244 = HEAP16[$243 >> 1] | 0;
                    $245 = $244 << 16 >> 16;
                    $246 = ((($242) + ($2 << 6) | 0) + ($230 << 2) | 0);
                    $247 = HEAP16[$246 >> 1] | 0;
                    $248 = $247 << 16 >> 16;
                    $249 = (($245) - ($248)) | 0;
                    $250 = $249 >> 31;
                    $251 = $250 ^ $249;
                    $252 = (($251) - ($250)) | 0;
                    $253 = ($252 | 0) > (3);
                    if ($253) {
                        $$sink19$1 = 1;
                    } else {
                        $254 = ((((($242) + ($3 << 6) | 0) + ($226 << 2) | 0)) + 2 | 0);
                        $255 = HEAP16[$254 >> 1] | 0;
                        $256 = $255 << 16 >> 16;
                        $257 = ((((($242) + ($2 << 6) | 0) + ($230 << 2) | 0)) + 2 | 0);
                        $258 = HEAP16[$257 >> 1] | 0;
                        $259 = $258 << 16 >> 16;
                        $260 = (($256) - ($259)) | 0;
                        $261 = $260 >> 31;
                        $262 = $261 ^ $260;
                        $263 = (($262) - ($261)) | 0;
                        $264 = ($263 | 0) > (3);
                        $phitmp381 = $264 & 1;
                        $$sink19$1 = $phitmp381;
                    }
                } else {
                    $$sink19$1 = 1;
                }
            } else {
                $$sink19$1 = 2;
            }
            $$sink20$1 = ((($4)) + 1 | 0);
            HEAP8[$$sink20$1 >> 0] = $$sink19$1;
            $265 = (((24455 + ($1 << 3) | 0)) + 2 | 0);
            $266 = (((24455 + ($1 << 3) | 0)) + 6 | 0);
            $267 = HEAP8[$265 >> 0] | 0;
            $268 = $267 & 255;
            $269 = ((($20) + (($3 * 24) | 0) | 0) + ($268) | 0);
            $270 = HEAP8[$269 >> 0] | 0;
            $271 = HEAP8[$266 >> 0] | 0;
            $272 = $271 & 255;
            $273 = ((($20) + (($2 * 24) | 0) | 0) + ($272) | 0);
            $274 = HEAP8[$273 >> 0] | 0;
            $275 = $274 | $270;
            $276 = ($275 << 24 >> 24) == (0);
            if ($276) {
                $277 = HEAP32[$18 >> 2] | 0;
                $278 = ((($277) + ($3 << 4) | 0) + ($268) | 0);
                $279 = HEAP8[$278 >> 0] | 0;
                $280 = ((($277) + ($2 << 4) | 0) + ($272) | 0);
                $281 = HEAP8[$280 >> 0] | 0;
                $282 = ($279 << 24 >> 24) == ($281 << 24 >> 24);
                if ($282) {
                    $283 = HEAP32[$19 >> 2] | 0;
                    $284 = ((($283) + ($3 << 6) | 0) + ($268 << 2) | 0);
                    $285 = HEAP16[$284 >> 1] | 0;
                    $286 = $285 << 16 >> 16;
                    $287 = ((($283) + ($2 << 6) | 0) + ($272 << 2) | 0);
                    $288 = HEAP16[$287 >> 1] | 0;
                    $289 = $288 << 16 >> 16;
                    $290 = (($286) - ($289)) | 0;
                    $291 = $290 >> 31;
                    $292 = $291 ^ $290;
                    $293 = (($292) - ($291)) | 0;
                    $294 = ($293 | 0) > (3);
                    if ($294) {
                        $$sink19$2 = 1;
                    } else {
                        $295 = ((((($283) + ($3 << 6) | 0) + ($268 << 2) | 0)) + 2 | 0);
                        $296 = HEAP16[$295 >> 1] | 0;
                        $297 = $296 << 16 >> 16;
                        $298 = ((((($283) + ($2 << 6) | 0) + ($272 << 2) | 0)) + 2 | 0);
                        $299 = HEAP16[$298 >> 1] | 0;
                        $300 = $299 << 16 >> 16;
                        $301 = (($297) - ($300)) | 0;
                        $302 = $301 >> 31;
                        $303 = $302 ^ $301;
                        $304 = (($303) - ($302)) | 0;
                        $305 = ($304 | 0) > (3);
                        $phitmp380 = $305 & 1;
                        $$sink19$2 = $phitmp380;
                    }
                } else {
                    $$sink19$2 = 1;
                }
            } else {
                $$sink19$2 = 2;
            }
            $$sink20$2 = ((($4)) + 2 | 0);
            HEAP8[$$sink20$2 >> 0] = $$sink19$2;
            $306 = (((24455 + ($1 << 3) | 0)) + 3 | 0);
            $307 = (((24455 + ($1 << 3) | 0)) + 7 | 0);
            $308 = HEAP8[$306 >> 0] | 0;
            $309 = $308 & 255;
            $310 = ((($20) + (($3 * 24) | 0) | 0) + ($309) | 0);
            $311 = HEAP8[$310 >> 0] | 0;
            $312 = HEAP8[$307 >> 0] | 0;
            $313 = $312 & 255;
            $314 = ((($20) + (($2 * 24) | 0) | 0) + ($313) | 0);
            $315 = HEAP8[$314 >> 0] | 0;
            $316 = $315 | $311;
            $317 = ($316 << 24 >> 24) == (0);
            if ($317) {
                $318 = HEAP32[$18 >> 2] | 0;
                $319 = ((($318) + ($3 << 4) | 0) + ($309) | 0);
                $320 = HEAP8[$319 >> 0] | 0;
                $321 = ((($318) + ($2 << 4) | 0) + ($313) | 0);
                $322 = HEAP8[$321 >> 0] | 0;
                $323 = ($320 << 24 >> 24) == ($322 << 24 >> 24);
                if ($323) {
                    $324 = HEAP32[$19 >> 2] | 0;
                    $325 = ((($324) + ($3 << 6) | 0) + ($309 << 2) | 0);
                    $326 = HEAP16[$325 >> 1] | 0;
                    $327 = $326 << 16 >> 16;
                    $328 = ((($324) + ($2 << 6) | 0) + ($313 << 2) | 0);
                    $329 = HEAP16[$328 >> 1] | 0;
                    $330 = $329 << 16 >> 16;
                    $331 = (($327) - ($330)) | 0;
                    $332 = $331 >> 31;
                    $333 = $332 ^ $331;
                    $334 = (($333) - ($332)) | 0;
                    $335 = ($334 | 0) > (3);
                    if ($335) {
                        $$sink19$3 = 1;
                    } else {
                        $336 = ((((($324) + ($3 << 6) | 0) + ($309 << 2) | 0)) + 2 | 0);
                        $337 = HEAP16[$336 >> 1] | 0;
                        $338 = $337 << 16 >> 16;
                        $339 = ((((($324) + ($2 << 6) | 0) + ($313 << 2) | 0)) + 2 | 0);
                        $340 = HEAP16[$339 >> 1] | 0;
                        $341 = $340 << 16 >> 16;
                        $342 = (($338) - ($341)) | 0;
                        $343 = $342 >> 31;
                        $344 = $343 ^ $342;
                        $345 = (($344) - ($343)) | 0;
                        $346 = ($345 | 0) > (3);
                        $phitmp379 = $346 & 1;
                        $$sink19$3 = $phitmp379;
                    }
                } else {
                    $$sink19$3 = 1;
                }
            } else {
                $$sink19$3 = 2;
            }
            $$sink20$3 = ((($4)) + 3 | 0);
            HEAP8[$$sink20$3 >> 0] = $$sink19$3;
            $235 = HEAP32[$4 >> 2] | 0;
            STACKTOP = sp; return ($235 | 0);
        } else {
            $$3315336 = 0;
        }
        while (1) {
            $147 = (($8) + ($$3315336) | 0);
            $148 = HEAP8[$147 >> 0] | 0;
            $149 = $148 & 255;
            $150 = ((($20) + (($2 * 24) | 0) | 0) + ($149) | 0);
            $139 = HEAP8[$150 >> 0] | 0;
            $151 = (($$3315336) + 1) | 0;
            $152 = ($139 << 24 >> 24) == (0);
            $153 = ($$3315336 | 0) < (3);
            $154 = $153 & $152;
            if ($154) {
                $$3315336 = $151;
            } else {
                break;
            }
        }
        $138 = $139 & 255;
        $140 = HEAP8[$5 >> 0] | 0;
        $141 = $140 & 255;
        $142 = ((($20) + (($3 * 24) | 0) | 0) + ($141) | 0);
        $143 = HEAP8[$142 >> 0] | 0;
        $144 = $143 << 24 >> 24;
        $145 = $138 | $144;
        $146 = ($145 | 0) == (0);
        if ($146) {
            $155 = HEAP32[$18 >> 2] | 0;
            $156 = ((($155) + ($3 << 4) | 0) + ($141) | 0);
            $157 = HEAP8[$156 >> 0] | 0;
            $158 = HEAP8[$8 >> 0] | 0;
            $159 = $158 & 255;
            $160 = ((($155) + ($2 << 4) | 0) + ($159) | 0);
            $161 = HEAP8[$160 >> 0] | 0;
            $162 = ($157 << 24 >> 24) == ($161 << 24 >> 24);
            if ($162) {
                $163 = HEAP32[$19 >> 2] | 0;
                $164 = ((($163) + ($3 << 6) | 0) + ($141 << 2) | 0);
                $165 = HEAP16[$164 >> 1] | 0;
                $166 = $165 << 16 >> 16;
                $167 = ((($163) + ($2 << 6) | 0) + ($159 << 2) | 0);
                $168 = HEAP16[$167 >> 1] | 0;
                $169 = $168 << 16 >> 16;
                $170 = (($166) - ($169)) | 0;
                $171 = $170 >> 31;
                $172 = $171 ^ $170;
                $173 = (($172) - ($171)) | 0;
                $174 = ($173 | 0) > (3);
                if ($174) {
                    $$sink12 = 1;
                } else {
                    $175 = ((((($163) + ($3 << 6) | 0) + ($141 << 2) | 0)) + 2 | 0);
                    $176 = HEAP16[$175 >> 1] | 0;
                    $177 = $176 << 16 >> 16;
                    $178 = ((((($163) + ($2 << 6) | 0) + ($159 << 2) | 0)) + 2 | 0);
                    $179 = HEAP16[$178 >> 1] | 0;
                    $180 = $179 << 16 >> 16;
                    $181 = (($177) - ($180)) | 0;
                    $182 = $181 >> 31;
                    $183 = $182 ^ $181;
                    $184 = (($183) - ($182)) | 0;
                    $185 = ($184 | 0) > (3);
                    $phitmp378 = $185 & 1;
                    $$sink12 = $phitmp378;
                }
            } else {
                $$sink12 = 1;
            }
        } else {
            $$sink12 = 2;
        }
        HEAP8[$4 >> 0] = $$sink12;
        $186 = (((24455 + ($1 << 3) | 0)) + 1 | 0);
        $187 = HEAP8[$186 >> 0] | 0;
        $188 = $187 & 255;
        $189 = ((($20) + (($3 * 24) | 0) | 0) + ($188) | 0);
        $190 = HEAP8[$189 >> 0] | 0;
        $191 = $190 << 24 >> 24;
        $192 = $138 | $191;
        $193 = ($192 | 0) == (0);
        if ($193) {
            $347 = HEAP32[$18 >> 2] | 0;
            $348 = ((($347) + ($3 << 4) | 0) + ($188) | 0);
            $349 = HEAP8[$348 >> 0] | 0;
            $350 = HEAP8[$8 >> 0] | 0;
            $351 = $350 & 255;
            $352 = ((($347) + ($2 << 4) | 0) + ($351) | 0);
            $353 = HEAP8[$352 >> 0] | 0;
            $354 = ($349 << 24 >> 24) == ($353 << 24 >> 24);
            if ($354) {
                $355 = HEAP32[$19 >> 2] | 0;
                $356 = ((($355) + ($3 << 6) | 0) + ($188 << 2) | 0);
                $357 = HEAP16[$356 >> 1] | 0;
                $358 = $357 << 16 >> 16;
                $359 = ((($355) + ($2 << 6) | 0) + ($351 << 2) | 0);
                $360 = HEAP16[$359 >> 1] | 0;
                $361 = $360 << 16 >> 16;
                $362 = (($358) - ($361)) | 0;
                $363 = $362 >> 31;
                $364 = $363 ^ $362;
                $365 = (($364) - ($363)) | 0;
                $366 = ($365 | 0) > (3);
                if ($366) {
                    $$sink12$1 = 1;
                } else {
                    $367 = ((((($355) + ($3 << 6) | 0) + ($188 << 2) | 0)) + 2 | 0);
                    $368 = HEAP16[$367 >> 1] | 0;
                    $369 = $368 << 16 >> 16;
                    $370 = ((((($355) + ($2 << 6) | 0) + ($351 << 2) | 0)) + 2 | 0);
                    $371 = HEAP16[$370 >> 1] | 0;
                    $372 = $371 << 16 >> 16;
                    $373 = (($369) - ($372)) | 0;
                    $374 = $373 >> 31;
                    $375 = $374 ^ $373;
                    $376 = (($375) - ($374)) | 0;
                    $377 = ($376 | 0) > (3);
                    $phitmp377 = $377 & 1;
                    $$sink12$1 = $phitmp377;
                }
            } else {
                $$sink12$1 = 1;
            }
        } else {
            $$sink12$1 = 2;
        }
        $378 = ((($4)) + 1 | 0);
        HEAP8[$378 >> 0] = $$sink12$1;
        $scevgep = (((24455 + ($1 << 3) | 0)) + 2 | 0);
        $379 = (((24471 + ($1 << 4) | 0)) + 12 | 0);
        $$3315336$1 = 0;
        while (1) {
            $380 = (($379) + ($$3315336$1) | 0);
            $381 = HEAP8[$380 >> 0] | 0;
            $382 = $381 & 255;
            $383 = ((($20) + (($2 * 24) | 0) | 0) + ($382) | 0);
            $384 = HEAP8[$383 >> 0] | 0;
            $385 = (($$3315336$1) + 1) | 0;
            $386 = ($384 << 24 >> 24) == (0);
            $387 = ($$3315336$1 | 0) < (3);
            $388 = $387 & $386;
            if ($388) {
                $$3315336$1 = $385;
            } else {
                break;
            }
        }
        $389 = $384 & 255;
        $390 = HEAP8[$scevgep >> 0] | 0;
        $391 = $390 & 255;
        $392 = ((($20) + (($3 * 24) | 0) | 0) + ($391) | 0);
        $393 = HEAP8[$392 >> 0] | 0;
        $394 = $393 << 24 >> 24;
        $395 = $389 | $394;
        $396 = ($395 | 0) == (0);
        if ($396) {
            $397 = HEAP32[$18 >> 2] | 0;
            $398 = ((($397) + ($3 << 4) | 0) + ($391) | 0);
            $399 = HEAP8[$398 >> 0] | 0;
            $400 = HEAP8[$379 >> 0] | 0;
            $401 = $400 & 255;
            $402 = ((($397) + ($2 << 4) | 0) + ($401) | 0);
            $403 = HEAP8[$402 >> 0] | 0;
            $404 = ($399 << 24 >> 24) == ($403 << 24 >> 24);
            if ($404) {
                $405 = HEAP32[$19 >> 2] | 0;
                $406 = ((($405) + ($3 << 6) | 0) + ($391 << 2) | 0);
                $407 = HEAP16[$406 >> 1] | 0;
                $408 = $407 << 16 >> 16;
                $409 = ((($405) + ($2 << 6) | 0) + ($401 << 2) | 0);
                $410 = HEAP16[$409 >> 1] | 0;
                $411 = $410 << 16 >> 16;
                $412 = (($408) - ($411)) | 0;
                $413 = $412 >> 31;
                $414 = $413 ^ $412;
                $415 = (($414) - ($413)) | 0;
                $416 = ($415 | 0) > (3);
                if ($416) {
                    $$sink12$1361 = 1;
                } else {
                    $417 = ((((($405) + ($3 << 6) | 0) + ($391 << 2) | 0)) + 2 | 0);
                    $418 = HEAP16[$417 >> 1] | 0;
                    $419 = $418 << 16 >> 16;
                    $420 = ((((($405) + ($2 << 6) | 0) + ($401 << 2) | 0)) + 2 | 0);
                    $421 = HEAP16[$420 >> 1] | 0;
                    $422 = $421 << 16 >> 16;
                    $423 = (($419) - ($422)) | 0;
                    $424 = $423 >> 31;
                    $425 = $424 ^ $423;
                    $426 = (($425) - ($424)) | 0;
                    $427 = ($426 | 0) > (3);
                    $phitmp376 = $427 & 1;
                    $$sink12$1361 = $phitmp376;
                }
            } else {
                $$sink12$1361 = 1;
            }
        } else {
            $$sink12$1361 = 2;
        }
        $428 = ((($4)) + 2 | 0);
        HEAP8[$428 >> 0] = $$sink12$1361;
        $429 = (((24455 + ($1 << 3) | 0)) + 3 | 0);
        $430 = HEAP8[$429 >> 0] | 0;
        $431 = $430 & 255;
        $432 = ((($20) + (($3 * 24) | 0) | 0) + ($431) | 0);
        $433 = HEAP8[$432 >> 0] | 0;
        $434 = $433 << 24 >> 24;
        $435 = $389 | $434;
        $436 = ($435 | 0) == (0);
        if ($436) {
            $437 = HEAP32[$18 >> 2] | 0;
            $438 = ((($437) + ($3 << 4) | 0) + ($431) | 0);
            $439 = HEAP8[$438 >> 0] | 0;
            $440 = HEAP8[$379 >> 0] | 0;
            $441 = $440 & 255;
            $442 = ((($437) + ($2 << 4) | 0) + ($441) | 0);
            $443 = HEAP8[$442 >> 0] | 0;
            $444 = ($439 << 24 >> 24) == ($443 << 24 >> 24);
            if ($444) {
                $445 = HEAP32[$19 >> 2] | 0;
                $446 = ((($445) + ($3 << 6) | 0) + ($431 << 2) | 0);
                $447 = HEAP16[$446 >> 1] | 0;
                $448 = $447 << 16 >> 16;
                $449 = ((($445) + ($2 << 6) | 0) + ($441 << 2) | 0);
                $450 = HEAP16[$449 >> 1] | 0;
                $451 = $450 << 16 >> 16;
                $452 = (($448) - ($451)) | 0;
                $453 = $452 >> 31;
                $454 = $453 ^ $452;
                $455 = (($454) - ($453)) | 0;
                $456 = ($455 | 0) > (3);
                if ($456) {
                    $$sink12$1$1 = 1;
                } else {
                    $457 = ((((($445) + ($3 << 6) | 0) + ($431 << 2) | 0)) + 2 | 0);
                    $458 = HEAP16[$457 >> 1] | 0;
                    $459 = $458 << 16 >> 16;
                    $460 = ((((($445) + ($2 << 6) | 0) + ($441 << 2) | 0)) + 2 | 0);
                    $461 = HEAP16[$460 >> 1] | 0;
                    $462 = $461 << 16 >> 16;
                    $463 = (($459) - ($462)) | 0;
                    $464 = $463 >> 31;
                    $465 = $464 ^ $463;
                    $466 = (($465) - ($464)) | 0;
                    $467 = ($466 | 0) > (3);
                    $phitmp375 = $467 & 1;
                    $$sink12$1$1 = $phitmp375;
                }
            } else {
                $$sink12$1$1 = 1;
            }
        } else {
            $$sink12$1$1 = 2;
        }
        $468 = ((($4)) + 3 | 0);
        HEAP8[$468 >> 0] = $$sink12$1$1;
        $235 = HEAP32[$4 >> 2] | 0;
        STACKTOP = sp; return ($235 | 0);
    }
    function __ZN7WelsDec17DeblockingInterMbEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEPA4_A4_hi($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$pre = 0, $$pre$phi189Z2D = 0, $$pre$phi191Z2D = 0, $$pre$phi193Z2D = 0, $$pre$phiZ2D = 0, $$pre188 = 0, $$pre190 = 0, $$pre192 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
        var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
        var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
        var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
        var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
        var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
        var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
        var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
        var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
        var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
        var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
        var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
        var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
        var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
        var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
        var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
        var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
        var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
        var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
        var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
        var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
        var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
        var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
        var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
        var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
        var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
        var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
        var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
        var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0;
        var $sext194 = 0, $sext195 = 0, $sext196 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $4 = sp;
        $5 = ((($0)) + 4040 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($0)) + 4032 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($0)) + 4036 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($0)) + 3948 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = (($12) + ($6) | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = $14 << 24 >> 24;
        $16 = ((($0)) + 3952 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = (($17) + ($6 << 1) | 0);
        $19 = ((($1)) + 12 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = ((($1)) + 16 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = HEAP32[$1 >> 2] | 0;
        $24 = Math_imul($20, $10) | 0;
        $25 = (($24) + ($8)) | 0;
        $26 = $25 << 4;
        $27 = (($23) + ($26) | 0);
        $28 = ((($1)) + 4 | 0);
        $29 = HEAP32[$28 >> 2] | 0;
        $30 = Math_imul($22, $10) | 0;
        $31 = (($30) + ($8)) | 0;
        $32 = $31 << 3;
        $33 = (($29) + ($32) | 0);
        $34 = ((($1)) + 8 | 0);
        $35 = HEAP32[$34 >> 2] | 0;
        $36 = (($35) + ($32) | 0);
        $37 = $3 & 1;
        $38 = ($37 | 0) == (0);
        do {
            if ($38) {
                $$pre = ((($1)) + 28 | 0);
                $$pre188 = ((($1)) + 26 | 0);
                $$pre190 = (((($17) + ($6 << 1) | 0)) + 1 | 0);
                $$pre192 = ((($1)) + 27 | 0);
                $$pre$phi189Z2D = $$pre188; $$pre$phi191Z2D = $$pre190; $$pre$phi193Z2D = $$pre192; $$pre$phiZ2D = $$pre;
            } else {
                $39 = (($6) + -1) | 0;
                $40 = (($12) + ($39) | 0);
                $41 = HEAP8[$40 >> 0] | 0;
                $42 = $41 << 24 >> 24;
                $43 = (($15) + 1) | 0;
                $44 = (($43) + ($42)) | 0;
                $45 = $44 >>> 1;
                $46 = $45 & 255;
                $47 = ((($1)) + 28 | 0);
                HEAP8[$47 >> 0] = $46;
                $48 = HEAP8[$18 >> 0] | 0;
                $49 = $48 << 24 >> 24;
                $50 = HEAP32[$16 >> 2] | 0;
                $51 = (($50) + ($39 << 1) | 0);
                $52 = HEAP8[$51 >> 0] | 0;
                $53 = $52 << 24 >> 24;
                $54 = (($49) + 1) | 0;
                $55 = (($54) + ($53)) | 0;
                $56 = $55 >>> 1;
                $57 = $56 & 255;
                $58 = ((($1)) + 26 | 0);
                HEAP8[$58 >> 0] = $57;
                $59 = (((($17) + ($6 << 1) | 0)) + 1 | 0);
                $60 = HEAP8[$59 >> 0] | 0;
                $61 = $60 << 24 >> 24;
                $62 = HEAP32[$16 >> 2] | 0;
                $63 = (((($62) + ($39 << 1) | 0)) + 1 | 0);
                $64 = HEAP8[$63 >> 0] | 0;
                $65 = $64 << 24 >> 24;
                $66 = (($61) + 1) | 0;
                $67 = (($66) + ($65)) | 0;
                $68 = $67 >>> 1;
                $69 = $68 & 255;
                $70 = ((($1)) + 27 | 0);
                HEAP8[$70 >> 0] = $69;
                $71 = HEAP8[$2 >> 0] | 0;
                $72 = ($71 << 24 >> 24) == (4);
                if ($72) {
                    $sext196 = $45 << 24;
                    $73 = $sext196 >> 24;
                    $74 = ((($1)) + 24 | 0);
                    $75 = HEAP8[$74 >> 0] | 0;
                    $76 = $75 << 24 >> 24;
                    $77 = (($73) + 12) | 0;
                    $78 = (($77) + ($76)) | 0;
                    $79 = (23999 + ($78) | 0);
                    $80 = HEAP8[$79 >> 0] | 0;
                    $81 = $80 & 255;
                    $82 = ((($1)) + 25 | 0);
                    $83 = HEAP8[$82 >> 0] | 0;
                    $84 = $83 << 24 >> 24;
                    $85 = (($77) + ($84)) | 0;
                    $86 = (24075 + ($85) | 0);
                    $87 = HEAP8[$86 >> 0] | 0;
                    $88 = $87 << 24 >> 24;
                    $89 = $88 | $81;
                    $90 = ($89 | 0) == (0);
                    if (!($90)) {
                        $91 = ((($1)) + 32 | 0);
                        $92 = HEAP32[$91 >> 2] | 0;
                        $93 = ((($92)) + 12 | 0);
                        $94 = HEAP32[$93 >> 2] | 0;
                        FUNCTION_TABLE_viiii[$94 & 31]($27, $20, $81, $88);
                    }
                    __ZN7WelsDec25FilteringEdgeChromaIntraVEPNS_19tagDeblockingFilterEPhS2_iS2_($1, $33, $36, $22, 0);
                    $$pre$phi189Z2D = $58; $$pre$phi191Z2D = $59; $$pre$phi193Z2D = $70; $$pre$phiZ2D = $47;
                    break;
                }
                $95 = HEAP32[$2 >> 2] | 0;
                $96 = ($95 | 0) == (0);
                if ($96) {
                    $$pre$phi189Z2D = $58; $$pre$phi191Z2D = $59; $$pre$phi193Z2D = $70; $$pre$phiZ2D = $47;
                } else {
                    $97 = ((($4)) + 15 | 0);
                    $98 = $97;
                    $99 = $98 & 15;
                    $100 = (0 - ($99)) | 0;
                    $101 = (($97) + ($100) | 0);
                    $sext = $45 << 24;
                    $102 = $sext >> 24;
                    $103 = ((($1)) + 24 | 0);
                    $104 = HEAP8[$103 >> 0] | 0;
                    $105 = $104 << 24 >> 24;
                    $106 = (($102) + 12) | 0;
                    $107 = (($106) + ($105)) | 0;
                    $108 = (23999 + ($107) | 0);
                    $109 = HEAP8[$108 >> 0] | 0;
                    $110 = $109 & 255;
                    $111 = ((($1)) + 25 | 0);
                    $112 = HEAP8[$111 >> 0] | 0;
                    $113 = $112 << 24 >> 24;
                    $114 = (($106) + ($113)) | 0;
                    $115 = (24075 + ($114) | 0);
                    $116 = HEAP8[$115 >> 0] | 0;
                    $117 = $116 << 24 >> 24;
                    $118 = $117 | $110;
                    $119 = ($118 | 0) == (0);
                    if (!($119)) {
                        $120 = $95 & 255;
                        $121 = ((24151 + ($107 << 2) | 0) + ($120) | 0);
                        $122 = HEAP8[$121 >> 0] | 0;
                        HEAP8[$101 >> 0] = $122;
                        $123 = ((($2)) + 1 | 0);
                        $124 = HEAP8[$123 >> 0] | 0;
                        $125 = $124 & 255;
                        $126 = ((24151 + ($107 << 2) | 0) + ($125) | 0);
                        $127 = HEAP8[$126 >> 0] | 0;
                        $128 = ((($101)) + 1 | 0);
                        HEAP8[$128 >> 0] = $127;
                        $129 = ((($2)) + 2 | 0);
                        $130 = HEAP8[$129 >> 0] | 0;
                        $131 = $130 & 255;
                        $132 = ((24151 + ($107 << 2) | 0) + ($131) | 0);
                        $133 = HEAP8[$132 >> 0] | 0;
                        $134 = ((($101)) + 2 | 0);
                        HEAP8[$134 >> 0] = $133;
                        $135 = ((($2)) + 3 | 0);
                        $136 = HEAP8[$135 >> 0] | 0;
                        $137 = $136 & 255;
                        $138 = ((24151 + ($107 << 2) | 0) + ($137) | 0);
                        $139 = HEAP8[$138 >> 0] | 0;
                        $140 = ((($101)) + 3 | 0);
                        HEAP8[$140 >> 0] = $139;
                        $141 = ((($1)) + 32 | 0);
                        $142 = HEAP32[$141 >> 2] | 0;
                        $143 = ((($142)) + 8 | 0);
                        $144 = HEAP32[$143 >> 2] | 0;
                        FUNCTION_TABLE_viiiii[$144 & 15]($27, $20, $110, $117, $101);
                    }
                    __ZN7WelsDec20FilteringEdgeChromaVEPNS_19tagDeblockingFilterEPhS2_iS2_($1, $33, $36, $22, $2);
                    $$pre$phi189Z2D = $58; $$pre$phi191Z2D = $59; $$pre$phi193Z2D = $70; $$pre$phiZ2D = $47;
                }
            }
        } while (0);
        HEAP8[$$pre$phiZ2D >> 0] = $14;
        $145 = HEAP8[$18 >> 0] | 0;
        HEAP8[$$pre$phi189Z2D >> 0] = $145;
        $146 = HEAP8[$$pre$phi191Z2D >> 0] | 0;
        HEAP8[$$pre$phi193Z2D >> 0] = $146;
        $147 = ((($2)) + 4 | 0);
        $148 = HEAP32[$147 >> 2] | 0;
        $149 = ($148 | 0) == (0);
        if (!($149)) {
            $150 = ((($0)) + 3944 | 0);
            $151 = HEAP32[$150 >> 2] | 0;
            $152 = (($151) + ($6) | 0);
            $153 = HEAP8[$152 >> 0] | 0;
            $154 = ($153 << 24 >> 24) == (0);
            if ($154) {
                $155 = ((($4)) + 15 | 0);
                $156 = $155;
                $157 = $156 & 15;
                $158 = (0 - ($157)) | 0;
                $159 = (($155) + ($158) | 0);
                $160 = ((($1)) + 24 | 0);
                $161 = HEAP8[$160 >> 0] | 0;
                $162 = $161 << 24 >> 24;
                $163 = (($15) + 12) | 0;
                $164 = (($163) + ($162)) | 0;
                $165 = (23999 + ($164) | 0);
                $166 = HEAP8[$165 >> 0] | 0;
                $167 = $166 & 255;
                $168 = ((($1)) + 25 | 0);
                $169 = HEAP8[$168 >> 0] | 0;
                $170 = $169 << 24 >> 24;
                $171 = (($163) + ($170)) | 0;
                $172 = (24075 + ($171) | 0);
                $173 = HEAP8[$172 >> 0] | 0;
                $174 = $173 << 24 >> 24;
                $175 = $174 | $167;
                $176 = ($175 | 0) == (0);
                if (!($176)) {
                    $177 = ((($27)) + 4 | 0);
                    $178 = $148 & 255;
                    $179 = ((24151 + ($164 << 2) | 0) + ($178) | 0);
                    $180 = HEAP8[$179 >> 0] | 0;
                    HEAP8[$159 >> 0] = $180;
                    $181 = ((($2)) + 5 | 0);
                    $182 = HEAP8[$181 >> 0] | 0;
                    $183 = $182 & 255;
                    $184 = ((24151 + ($164 << 2) | 0) + ($183) | 0);
                    $185 = HEAP8[$184 >> 0] | 0;
                    $186 = ((($159)) + 1 | 0);
                    HEAP8[$186 >> 0] = $185;
                    $187 = ((($2)) + 6 | 0);
                    $188 = HEAP8[$187 >> 0] | 0;
                    $189 = $188 & 255;
                    $190 = ((24151 + ($164 << 2) | 0) + ($189) | 0);
                    $191 = HEAP8[$190 >> 0] | 0;
                    $192 = ((($159)) + 2 | 0);
                    HEAP8[$192 >> 0] = $191;
                    $193 = ((($2)) + 7 | 0);
                    $194 = HEAP8[$193 >> 0] | 0;
                    $195 = $194 & 255;
                    $196 = ((24151 + ($164 << 2) | 0) + ($195) | 0);
                    $197 = HEAP8[$196 >> 0] | 0;
                    $198 = ((($159)) + 3 | 0);
                    HEAP8[$198 >> 0] = $197;
                    $199 = ((($1)) + 32 | 0);
                    $200 = HEAP32[$199 >> 2] | 0;
                    $201 = ((($200)) + 8 | 0);
                    $202 = HEAP32[$201 >> 2] | 0;
                    FUNCTION_TABLE_viiiii[$202 & 15]($177, $20, $167, $174, $159);
                }
            }
        }
        $203 = ((($2)) + 8 | 0);
        $204 = HEAP32[$203 >> 2] | 0;
        $205 = ($204 | 0) == (0);
        if (!($205)) {
            $206 = ((($4)) + 15 | 0);
            $207 = $206;
            $208 = $207 & 15;
            $209 = (0 - ($208)) | 0;
            $210 = (($206) + ($209) | 0);
            $211 = HEAP8[$$pre$phiZ2D >> 0] | 0;
            $212 = $211 << 24 >> 24;
            $213 = ((($1)) + 24 | 0);
            $214 = HEAP8[$213 >> 0] | 0;
            $215 = $214 << 24 >> 24;
            $216 = (($212) + 12) | 0;
            $217 = (($216) + ($215)) | 0;
            $218 = (23999 + ($217) | 0);
            $219 = HEAP8[$218 >> 0] | 0;
            $220 = $219 & 255;
            $221 = ((($1)) + 25 | 0);
            $222 = HEAP8[$221 >> 0] | 0;
            $223 = $222 << 24 >> 24;
            $224 = (($216) + ($223)) | 0;
            $225 = (24075 + ($224) | 0);
            $226 = HEAP8[$225 >> 0] | 0;
            $227 = $226 << 24 >> 24;
            $228 = $227 | $220;
            $229 = ($228 | 0) == (0);
            if (!($229)) {
                $230 = ((($27)) + 8 | 0);
                $231 = $204 & 255;
                $232 = ((24151 + ($217 << 2) | 0) + ($231) | 0);
                $233 = HEAP8[$232 >> 0] | 0;
                HEAP8[$210 >> 0] = $233;
                $234 = ((($2)) + 9 | 0);
                $235 = HEAP8[$234 >> 0] | 0;
                $236 = $235 & 255;
                $237 = ((24151 + ($217 << 2) | 0) + ($236) | 0);
                $238 = HEAP8[$237 >> 0] | 0;
                $239 = ((($210)) + 1 | 0);
                HEAP8[$239 >> 0] = $238;
                $240 = ((($2)) + 10 | 0);
                $241 = HEAP8[$240 >> 0] | 0;
                $242 = $241 & 255;
                $243 = ((24151 + ($217 << 2) | 0) + ($242) | 0);
                $244 = HEAP8[$243 >> 0] | 0;
                $245 = ((($210)) + 2 | 0);
                HEAP8[$245 >> 0] = $244;
                $246 = ((($2)) + 11 | 0);
                $247 = HEAP8[$246 >> 0] | 0;
                $248 = $247 & 255;
                $249 = ((24151 + ($217 << 2) | 0) + ($248) | 0);
                $250 = HEAP8[$249 >> 0] | 0;
                $251 = ((($210)) + 3 | 0);
                HEAP8[$251 >> 0] = $250;
                $252 = ((($1)) + 32 | 0);
                $253 = HEAP32[$252 >> 2] | 0;
                $254 = ((($253)) + 8 | 0);
                $255 = HEAP32[$254 >> 2] | 0;
                FUNCTION_TABLE_viiiii[$255 & 15]($230, $20, $220, $227, $210);
            }
            $256 = ((($33)) + 4 | 0);
            $257 = ((($36)) + 4 | 0);
            __ZN7WelsDec20FilteringEdgeChromaVEPNS_19tagDeblockingFilterEPhS2_iS2_($1, $256, $257, $22, $203);
        }
        $258 = ((($2)) + 12 | 0);
        $259 = HEAP32[$258 >> 2] | 0;
        $260 = ($259 | 0) == (0);
        if (!($260)) {
            $261 = ((($0)) + 3944 | 0);
            $262 = HEAP32[$261 >> 2] | 0;
            $263 = (($262) + ($6) | 0);
            $264 = HEAP8[$263 >> 0] | 0;
            $265 = ($264 << 24 >> 24) == (0);
            if ($265) {
                $266 = ((($4)) + 15 | 0);
                $267 = $266;
                $268 = $267 & 15;
                $269 = (0 - ($268)) | 0;
                $270 = (($266) + ($269) | 0);
                $271 = HEAP8[$$pre$phiZ2D >> 0] | 0;
                $272 = $271 << 24 >> 24;
                $273 = ((($1)) + 24 | 0);
                $274 = HEAP8[$273 >> 0] | 0;
                $275 = $274 << 24 >> 24;
                $276 = (($272) + 12) | 0;
                $277 = (($276) + ($275)) | 0;
                $278 = (23999 + ($277) | 0);
                $279 = HEAP8[$278 >> 0] | 0;
                $280 = $279 & 255;
                $281 = ((($1)) + 25 | 0);
                $282 = HEAP8[$281 >> 0] | 0;
                $283 = $282 << 24 >> 24;
                $284 = (($276) + ($283)) | 0;
                $285 = (24075 + ($284) | 0);
                $286 = HEAP8[$285 >> 0] | 0;
                $287 = $286 << 24 >> 24;
                $288 = $287 | $280;
                $289 = ($288 | 0) == (0);
                if (!($289)) {
                    $290 = ((($27)) + 12 | 0);
                    $291 = $259 & 255;
                    $292 = ((24151 + ($277 << 2) | 0) + ($291) | 0);
                    $293 = HEAP8[$292 >> 0] | 0;
                    HEAP8[$270 >> 0] = $293;
                    $294 = ((($2)) + 13 | 0);
                    $295 = HEAP8[$294 >> 0] | 0;
                    $296 = $295 & 255;
                    $297 = ((24151 + ($277 << 2) | 0) + ($296) | 0);
                    $298 = HEAP8[$297 >> 0] | 0;
                    $299 = ((($270)) + 1 | 0);
                    HEAP8[$299 >> 0] = $298;
                    $300 = ((($2)) + 14 | 0);
                    $301 = HEAP8[$300 >> 0] | 0;
                    $302 = $301 & 255;
                    $303 = ((24151 + ($277 << 2) | 0) + ($302) | 0);
                    $304 = HEAP8[$303 >> 0] | 0;
                    $305 = ((($270)) + 2 | 0);
                    HEAP8[$305 >> 0] = $304;
                    $306 = ((($2)) + 15 | 0);
                    $307 = HEAP8[$306 >> 0] | 0;
                    $308 = $307 & 255;
                    $309 = ((24151 + ($277 << 2) | 0) + ($308) | 0);
                    $310 = HEAP8[$309 >> 0] | 0;
                    $311 = ((($270)) + 3 | 0);
                    HEAP8[$311 >> 0] = $310;
                    $312 = ((($1)) + 32 | 0);
                    $313 = HEAP32[$312 >> 2] | 0;
                    $314 = ((($313)) + 8 | 0);
                    $315 = HEAP32[$314 >> 2] | 0;
                    FUNCTION_TABLE_viiiii[$315 & 15]($290, $20, $280, $287, $270);
                }
            }
        }
        $316 = $3 & 2;
        $317 = ($316 | 0) == (0);
        do {
            if (!($317)) {
                $318 = ((($0)) + 4044 | 0);
                $319 = HEAP32[$318 >> 2] | 0;
                $320 = (($6) - ($319)) | 0;
                $321 = HEAP32[$11 >> 2] | 0;
                $322 = (($321) + ($320) | 0);
                $323 = HEAP8[$322 >> 0] | 0;
                $324 = $323 << 24 >> 24;
                $325 = (($15) + 1) | 0;
                $326 = (($325) + ($324)) | 0;
                $327 = $326 >>> 1;
                $328 = $327 & 255;
                HEAP8[$$pre$phiZ2D >> 0] = $328;
                $329 = HEAP8[$18 >> 0] | 0;
                $330 = $329 << 24 >> 24;
                $331 = HEAP32[$16 >> 2] | 0;
                $332 = (($331) + ($320 << 1) | 0);
                $333 = HEAP8[$332 >> 0] | 0;
                $334 = $333 << 24 >> 24;
                $335 = (($330) + 1) | 0;
                $336 = (($335) + ($334)) | 0;
                $337 = $336 >>> 1;
                $338 = $337 & 255;
                HEAP8[$$pre$phi189Z2D >> 0] = $338;
                $339 = HEAP8[$$pre$phi191Z2D >> 0] | 0;
                $340 = $339 << 24 >> 24;
                $341 = HEAP32[$16 >> 2] | 0;
                $342 = (((($341) + ($320 << 1) | 0)) + 1 | 0);
                $343 = HEAP8[$342 >> 0] | 0;
                $344 = $343 << 24 >> 24;
                $345 = (($340) + 1) | 0;
                $346 = (($345) + ($344)) | 0;
                $347 = $346 >>> 1;
                $348 = $347 & 255;
                HEAP8[$$pre$phi193Z2D >> 0] = $348;
                $349 = ((($2)) + 16 | 0);
                $350 = HEAP8[$349 >> 0] | 0;
                $351 = ($350 << 24 >> 24) == (4);
                if ($351) {
                    $sext195 = $327 << 24;
                    $352 = $sext195 >> 24;
                    $353 = ((($1)) + 24 | 0);
                    $354 = HEAP8[$353 >> 0] | 0;
                    $355 = $354 << 24 >> 24;
                    $356 = (($352) + 12) | 0;
                    $357 = (($356) + ($355)) | 0;
                    $358 = (23999 + ($357) | 0);
                    $359 = HEAP8[$358 >> 0] | 0;
                    $360 = $359 & 255;
                    $361 = ((($1)) + 25 | 0);
                    $362 = HEAP8[$361 >> 0] | 0;
                    $363 = $362 << 24 >> 24;
                    $364 = (($356) + ($363)) | 0;
                    $365 = (24075 + ($364) | 0);
                    $366 = HEAP8[$365 >> 0] | 0;
                    $367 = $366 << 24 >> 24;
                    $368 = $367 | $360;
                    $369 = ($368 | 0) == (0);
                    if (!($369)) {
                        $370 = ((($1)) + 32 | 0);
                        $371 = HEAP32[$370 >> 2] | 0;
                        $372 = ((($371)) + 4 | 0);
                        $373 = HEAP32[$372 >> 2] | 0;
                        FUNCTION_TABLE_viiii[$373 & 31]($27, $20, $360, $367);
                    }
                    __ZN7WelsDec25FilteringEdgeChromaIntraHEPNS_19tagDeblockingFilterEPhS2_iS2_($1, $33, $36, $22, 0);
                    break;
                }
                $374 = HEAP32[$349 >> 2] | 0;
                $375 = ($374 | 0) == (0);
                if (!($375)) {
                    $376 = ((($4)) + 15 | 0);
                    $377 = $376;
                    $378 = $377 & 15;
                    $379 = (0 - ($378)) | 0;
                    $380 = (($376) + ($379) | 0);
                    $sext194 = $327 << 24;
                    $381 = $sext194 >> 24;
                    $382 = ((($1)) + 24 | 0);
                    $383 = HEAP8[$382 >> 0] | 0;
                    $384 = $383 << 24 >> 24;
                    $385 = (($381) + 12) | 0;
                    $386 = (($385) + ($384)) | 0;
                    $387 = (23999 + ($386) | 0);
                    $388 = HEAP8[$387 >> 0] | 0;
                    $389 = $388 & 255;
                    $390 = ((($1)) + 25 | 0);
                    $391 = HEAP8[$390 >> 0] | 0;
                    $392 = $391 << 24 >> 24;
                    $393 = (($385) + ($392)) | 0;
                    $394 = (24075 + ($393) | 0);
                    $395 = HEAP8[$394 >> 0] | 0;
                    $396 = $395 << 24 >> 24;
                    $397 = $396 | $389;
                    $398 = ($397 | 0) == (0);
                    if (!($398)) {
                        $399 = $374 & 255;
                        $400 = ((24151 + ($386 << 2) | 0) + ($399) | 0);
                        $401 = HEAP8[$400 >> 0] | 0;
                        HEAP8[$380 >> 0] = $401;
                        $402 = ((($2)) + 17 | 0);
                        $403 = HEAP8[$402 >> 0] | 0;
                        $404 = $403 & 255;
                        $405 = ((24151 + ($386 << 2) | 0) + ($404) | 0);
                        $406 = HEAP8[$405 >> 0] | 0;
                        $407 = ((($380)) + 1 | 0);
                        HEAP8[$407 >> 0] = $406;
                        $408 = ((($2)) + 18 | 0);
                        $409 = HEAP8[$408 >> 0] | 0;
                        $410 = $409 & 255;
                        $411 = ((24151 + ($386 << 2) | 0) + ($410) | 0);
                        $412 = HEAP8[$411 >> 0] | 0;
                        $413 = ((($380)) + 2 | 0);
                        HEAP8[$413 >> 0] = $412;
                        $414 = ((($2)) + 19 | 0);
                        $415 = HEAP8[$414 >> 0] | 0;
                        $416 = $415 & 255;
                        $417 = ((24151 + ($386 << 2) | 0) + ($416) | 0);
                        $418 = HEAP8[$417 >> 0] | 0;
                        $419 = ((($380)) + 3 | 0);
                        HEAP8[$419 >> 0] = $418;
                        $420 = ((($1)) + 32 | 0);
                        $421 = HEAP32[$420 >> 2] | 0;
                        $422 = HEAP32[$421 >> 2] | 0;
                        FUNCTION_TABLE_viiiii[$422 & 15]($27, $20, $389, $396, $380);
                    }
                    __ZN7WelsDec20FilteringEdgeChromaHEPNS_19tagDeblockingFilterEPhS2_iS2_($1, $33, $36, $22, $349);
                }
            }
        } while (0);
        HEAP8[$$pre$phiZ2D >> 0] = $14;
        $423 = HEAP8[$18 >> 0] | 0;
        HEAP8[$$pre$phi189Z2D >> 0] = $423;
        $424 = HEAP8[$$pre$phi191Z2D >> 0] | 0;
        HEAP8[$$pre$phi193Z2D >> 0] = $424;
        $425 = ((($2)) + 20 | 0);
        $426 = HEAP32[$425 >> 2] | 0;
        $427 = ($426 | 0) == (0);
        if (!($427)) {
            $428 = ((($0)) + 3944 | 0);
            $429 = HEAP32[$428 >> 2] | 0;
            $430 = (($429) + ($6) | 0);
            $431 = HEAP8[$430 >> 0] | 0;
            $432 = ($431 << 24 >> 24) == (0);
            if ($432) {
                $433 = ((($4)) + 15 | 0);
                $434 = $433;
                $435 = $434 & 15;
                $436 = (0 - ($435)) | 0;
                $437 = (($433) + ($436) | 0);
                $438 = ((($1)) + 24 | 0);
                $439 = HEAP8[$438 >> 0] | 0;
                $440 = $439 << 24 >> 24;
                $441 = (($15) + 12) | 0;
                $442 = (($441) + ($440)) | 0;
                $443 = (23999 + ($442) | 0);
                $444 = HEAP8[$443 >> 0] | 0;
                $445 = $444 & 255;
                $446 = ((($1)) + 25 | 0);
                $447 = HEAP8[$446 >> 0] | 0;
                $448 = $447 << 24 >> 24;
                $449 = (($441) + ($448)) | 0;
                $450 = (24075 + ($449) | 0);
                $451 = HEAP8[$450 >> 0] | 0;
                $452 = $451 << 24 >> 24;
                $453 = $452 | $445;
                $454 = ($453 | 0) == (0);
                if (!($454)) {
                    $455 = $20 << 2;
                    $456 = (($27) + ($455) | 0);
                    $457 = $426 & 255;
                    $458 = ((24151 + ($442 << 2) | 0) + ($457) | 0);
                    $459 = HEAP8[$458 >> 0] | 0;
                    HEAP8[$437 >> 0] = $459;
                    $460 = ((($2)) + 21 | 0);
                    $461 = HEAP8[$460 >> 0] | 0;
                    $462 = $461 & 255;
                    $463 = ((24151 + ($442 << 2) | 0) + ($462) | 0);
                    $464 = HEAP8[$463 >> 0] | 0;
                    $465 = ((($437)) + 1 | 0);
                    HEAP8[$465 >> 0] = $464;
                    $466 = ((($2)) + 22 | 0);
                    $467 = HEAP8[$466 >> 0] | 0;
                    $468 = $467 & 255;
                    $469 = ((24151 + ($442 << 2) | 0) + ($468) | 0);
                    $470 = HEAP8[$469 >> 0] | 0;
                    $471 = ((($437)) + 2 | 0);
                    HEAP8[$471 >> 0] = $470;
                    $472 = ((($2)) + 23 | 0);
                    $473 = HEAP8[$472 >> 0] | 0;
                    $474 = $473 & 255;
                    $475 = ((24151 + ($442 << 2) | 0) + ($474) | 0);
                    $476 = HEAP8[$475 >> 0] | 0;
                    $477 = ((($437)) + 3 | 0);
                    HEAP8[$477 >> 0] = $476;
                    $478 = ((($1)) + 32 | 0);
                    $479 = HEAP32[$478 >> 2] | 0;
                    $480 = HEAP32[$479 >> 2] | 0;
                    FUNCTION_TABLE_viiiii[$480 & 15]($456, $20, $445, $452, $437);
                }
            }
        }
        $481 = ((($2)) + 24 | 0);
        $482 = HEAP32[$481 >> 2] | 0;
        $483 = ($482 | 0) == (0);
        if (!($483)) {
            $484 = ((($4)) + 15 | 0);
            $485 = $484;
            $486 = $485 & 15;
            $487 = (0 - ($486)) | 0;
            $488 = (($484) + ($487) | 0);
            $489 = HEAP8[$$pre$phiZ2D >> 0] | 0;
            $490 = $489 << 24 >> 24;
            $491 = ((($1)) + 24 | 0);
            $492 = HEAP8[$491 >> 0] | 0;
            $493 = $492 << 24 >> 24;
            $494 = (($490) + 12) | 0;
            $495 = (($494) + ($493)) | 0;
            $496 = (23999 + ($495) | 0);
            $497 = HEAP8[$496 >> 0] | 0;
            $498 = $497 & 255;
            $499 = ((($1)) + 25 | 0);
            $500 = HEAP8[$499 >> 0] | 0;
            $501 = $500 << 24 >> 24;
            $502 = (($494) + ($501)) | 0;
            $503 = (24075 + ($502) | 0);
            $504 = HEAP8[$503 >> 0] | 0;
            $505 = $504 << 24 >> 24;
            $506 = $505 | $498;
            $507 = ($506 | 0) == (0);
            if (!($507)) {
                $508 = $20 << 3;
                $509 = (($27) + ($508) | 0);
                $510 = $482 & 255;
                $511 = ((24151 + ($495 << 2) | 0) + ($510) | 0);
                $512 = HEAP8[$511 >> 0] | 0;
                HEAP8[$488 >> 0] = $512;
                $513 = ((($2)) + 25 | 0);
                $514 = HEAP8[$513 >> 0] | 0;
                $515 = $514 & 255;
                $516 = ((24151 + ($495 << 2) | 0) + ($515) | 0);
                $517 = HEAP8[$516 >> 0] | 0;
                $518 = ((($488)) + 1 | 0);
                HEAP8[$518 >> 0] = $517;
                $519 = ((($2)) + 26 | 0);
                $520 = HEAP8[$519 >> 0] | 0;
                $521 = $520 & 255;
                $522 = ((24151 + ($495 << 2) | 0) + ($521) | 0);
                $523 = HEAP8[$522 >> 0] | 0;
                $524 = ((($488)) + 2 | 0);
                HEAP8[$524 >> 0] = $523;
                $525 = ((($2)) + 27 | 0);
                $526 = HEAP8[$525 >> 0] | 0;
                $527 = $526 & 255;
                $528 = ((24151 + ($495 << 2) | 0) + ($527) | 0);
                $529 = HEAP8[$528 >> 0] | 0;
                $530 = ((($488)) + 3 | 0);
                HEAP8[$530 >> 0] = $529;
                $531 = ((($1)) + 32 | 0);
                $532 = HEAP32[$531 >> 2] | 0;
                $533 = HEAP32[$532 >> 2] | 0;
                FUNCTION_TABLE_viiiii[$533 & 15]($509, $20, $498, $505, $488);
            }
            $534 = $22 << 2;
            $535 = (($33) + ($534) | 0);
            $536 = (($36) + ($534) | 0);
            __ZN7WelsDec20FilteringEdgeChromaHEPNS_19tagDeblockingFilterEPhS2_iS2_($1, $535, $536, $22, $481);
        }
        $537 = ((($2)) + 28 | 0);
        $538 = HEAP32[$537 >> 2] | 0;
        $539 = ($538 | 0) == (0);
        if ($539) {
            STACKTOP = sp; return;
        }
        $540 = ((($0)) + 3944 | 0);
        $541 = HEAP32[$540 >> 2] | 0;
        $542 = (($541) + ($6) | 0);
        $543 = HEAP8[$542 >> 0] | 0;
        $544 = ($543 << 24 >> 24) == (0);
        if (!($544)) {
            STACKTOP = sp; return;
        }
        $545 = ((($4)) + 15 | 0);
        $546 = $545;
        $547 = $546 & 15;
        $548 = (0 - ($547)) | 0;
        $549 = (($545) + ($548) | 0);
        $550 = HEAP8[$$pre$phiZ2D >> 0] | 0;
        $551 = $550 << 24 >> 24;
        $552 = ((($1)) + 24 | 0);
        $553 = HEAP8[$552 >> 0] | 0;
        $554 = $553 << 24 >> 24;
        $555 = (($551) + 12) | 0;
        $556 = (($555) + ($554)) | 0;
        $557 = (23999 + ($556) | 0);
        $558 = HEAP8[$557 >> 0] | 0;
        $559 = $558 & 255;
        $560 = ((($1)) + 25 | 0);
        $561 = HEAP8[$560 >> 0] | 0;
        $562 = $561 << 24 >> 24;
        $563 = (($555) + ($562)) | 0;
        $564 = (24075 + ($563) | 0);
        $565 = HEAP8[$564 >> 0] | 0;
        $566 = $565 << 24 >> 24;
        $567 = $566 | $559;
        $568 = ($567 | 0) == (0);
        if (!($568)) {
            $569 = ($20 * 12) | 0;
            $570 = (($27) + ($569) | 0);
            $571 = $538 & 255;
            $572 = ((24151 + ($556 << 2) | 0) + ($571) | 0);
            $573 = HEAP8[$572 >> 0] | 0;
            HEAP8[$549 >> 0] = $573;
            $574 = ((($2)) + 29 | 0);
            $575 = HEAP8[$574 >> 0] | 0;
            $576 = $575 & 255;
            $577 = ((24151 + ($556 << 2) | 0) + ($576) | 0);
            $578 = HEAP8[$577 >> 0] | 0;
            $579 = ((($549)) + 1 | 0);
            HEAP8[$579 >> 0] = $578;
            $580 = ((($2)) + 30 | 0);
            $581 = HEAP8[$580 >> 0] | 0;
            $582 = $581 & 255;
            $583 = ((24151 + ($556 << 2) | 0) + ($582) | 0);
            $584 = HEAP8[$583 >> 0] | 0;
            $585 = ((($549)) + 2 | 0);
            HEAP8[$585 >> 0] = $584;
            $586 = ((($2)) + 31 | 0);
            $587 = HEAP8[$586 >> 0] | 0;
            $588 = $587 & 255;
            $589 = ((24151 + ($556 << 2) | 0) + ($588) | 0);
            $590 = HEAP8[$589 >> 0] | 0;
            $591 = ((($549)) + 3 | 0);
            HEAP8[$591 >> 0] = $590;
            $592 = ((($1)) + 32 | 0);
            $593 = HEAP32[$592 >> 2] | 0;
            $594 = HEAP32[$593 >> 2] | 0;
            FUNCTION_TABLE_viiiii[$594 & 15]($570, $20, $559, $566, $549);
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec25FilteringEdgeChromaIntraVEPNS_19tagDeblockingFilterEPhS2_iS2_($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$pre = 0, $$pre44 = 0, $$pre45 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
        var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ((($0)) + 26 | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = $6 << 24 >> 24;
        $8 = ((($0)) + 27 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ($6 << 24 >> 24) == ($9 << 24 >> 24);
        $11 = ((($0)) + 24 | 0);
        if ($10) {
            $29 = HEAP8[$11 >> 0] | 0;
            $30 = $29 << 24 >> 24;
            $31 = (($7) + 12) | 0;
            $32 = (($31) + ($30)) | 0;
            $33 = (23999 + ($32) | 0);
            $34 = HEAP8[$33 >> 0] | 0;
            $35 = $34 & 255;
            $36 = ((($0)) + 25 | 0);
            $37 = HEAP8[$36 >> 0] | 0;
            $38 = $37 << 24 >> 24;
            $39 = (($31) + ($38)) | 0;
            $40 = (24075 + ($39) | 0);
            $41 = HEAP8[$40 >> 0] | 0;
            $42 = $41 << 24 >> 24;
            $43 = $42 | $35;
            $44 = ($43 | 0) == (0);
            if ($44) {
                return;
            }
            $45 = ((($0)) + 32 | 0);
            $46 = HEAP32[$45 >> 2] | 0;
            $47 = ((($46)) + 28 | 0);
            $48 = HEAP32[$47 >> 2] | 0;
            FUNCTION_TABLE_viiiii[$48 & 15]($1, $2, $3, $35, $42);
            return;
        }
        $12 = ((($0)) + 25 | 0);
        $13 = ((($0)) + 32 | 0);
        $14 = HEAP8[$11 >> 0] | 0;
        $15 = $14 << 24 >> 24;
        $16 = (($7) + 12) | 0;
        $17 = (($16) + ($15)) | 0;
        $18 = (23999 + ($17) | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = $19 & 255;
        $21 = HEAP8[$12 >> 0] | 0;
        $22 = $21 << 24 >> 24;
        $23 = (($16) + ($22)) | 0;
        $24 = (24075 + ($23) | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 << 24 >> 24;
        $27 = $26 | $20;
        $28 = ($27 | 0) == (0);
        if ($28) {
            $53 = $9; $55 = $14; $62 = $21;
        } else {
            $49 = HEAP32[$13 >> 2] | 0;
            $50 = ((($49)) + 44 | 0);
            $51 = HEAP32[$50 >> 2] | 0;
            FUNCTION_TABLE_viiii[$51 & 31]($1, $3, $20, $26);
            $$pre = HEAP8[$8 >> 0] | 0;
            $$pre44 = HEAP8[$11 >> 0] | 0;
            $$pre45 = HEAP8[$12 >> 0] | 0;
            $53 = $$pre; $55 = $$pre44; $62 = $$pre45;
        }
        $52 = $53 << 24 >> 24;
        $54 = $55 << 24 >> 24;
        $56 = (($52) + 12) | 0;
        $57 = (($56) + ($54)) | 0;
        $58 = (23999 + ($57) | 0);
        $59 = HEAP8[$58 >> 0] | 0;
        $60 = $59 & 255;
        $61 = $62 << 24 >> 24;
        $63 = (($56) + ($61)) | 0;
        $64 = (24075 + ($63) | 0);
        $65 = HEAP8[$64 >> 0] | 0;
        $66 = $65 << 24 >> 24;
        $67 = $66 | $60;
        $68 = ($67 | 0) == (0);
        if ($68) {
            return;
        }
        $69 = HEAP32[$13 >> 2] | 0;
        $70 = ((($69)) + 44 | 0);
        $71 = HEAP32[$70 >> 2] | 0;
        FUNCTION_TABLE_viiii[$71 & 31]($2, $3, $60, $66);
        return;
    }
    function __ZN7WelsDec20FilteringEdgeChromaVEPNS_19tagDeblockingFilterEPhS2_iS2_($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$pre = 0, $$pre72 = 0, $$pre73 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
        var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
        var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
        var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
        var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
        var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
        var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
        var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
        var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $5 = sp;
        $6 = ((($5)) + 15 | 0);
        $7 = $6;
        $8 = $7 & 15;
        $9 = (0 - ($8)) | 0;
        $10 = (($6) + ($9) | 0);
        $11 = ((($0)) + 26 | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = $12 << 24 >> 24;
        $14 = ((($0)) + 27 | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = ($12 << 24 >> 24) == ($15 << 24 >> 24);
        $17 = ((($0)) + 24 | 0);
        if ($16) {
            $41 = HEAP8[$17 >> 0] | 0;
            $42 = $41 << 24 >> 24;
            $43 = (($13) + 12) | 0;
            $44 = (($43) + ($42)) | 0;
            $45 = (23999 + ($44) | 0);
            $46 = HEAP8[$45 >> 0] | 0;
            $47 = $46 & 255;
            $48 = ((($0)) + 25 | 0);
            $49 = HEAP8[$48 >> 0] | 0;
            $50 = $49 << 24 >> 24;
            $51 = (($43) + ($50)) | 0;
            $52 = (24075 + ($51) | 0);
            $53 = HEAP8[$52 >> 0] | 0;
            $54 = $53 << 24 >> 24;
            $55 = $54 | $47;
            $56 = ($55 | 0) == (0);
            if ($56) {
                STACKTOP = sp; return;
            }
            $57 = HEAP8[$4 >> 0] | 0;
            $58 = $57 & 255;
            $59 = ((24151 + ($44 << 2) | 0) + ($58) | 0);
            $60 = HEAP8[$59 >> 0] | 0;
            $61 = $60 & 255;
            $62 = (($61) + 1) | 0;
            $63 = $62 & 255;
            HEAP8[$10 >> 0] = $63;
            $64 = ((($4)) + 1 | 0);
            $65 = HEAP8[$64 >> 0] | 0;
            $66 = $65 & 255;
            $67 = ((24151 + ($44 << 2) | 0) + ($66) | 0);
            $68 = HEAP8[$67 >> 0] | 0;
            $69 = $68 & 255;
            $70 = (($69) + 1) | 0;
            $71 = $70 & 255;
            $72 = ((($10)) + 1 | 0);
            HEAP8[$72 >> 0] = $71;
            $73 = ((($4)) + 2 | 0);
            $74 = HEAP8[$73 >> 0] | 0;
            $75 = $74 & 255;
            $76 = ((24151 + ($44 << 2) | 0) + ($75) | 0);
            $77 = HEAP8[$76 >> 0] | 0;
            $78 = $77 & 255;
            $79 = (($78) + 1) | 0;
            $80 = $79 & 255;
            $81 = ((($10)) + 2 | 0);
            HEAP8[$81 >> 0] = $80;
            $82 = ((($4)) + 3 | 0);
            $83 = HEAP8[$82 >> 0] | 0;
            $84 = $83 & 255;
            $85 = ((24151 + ($44 << 2) | 0) + ($84) | 0);
            $86 = HEAP8[$85 >> 0] | 0;
            $87 = $86 & 255;
            $88 = (($87) + 1) | 0;
            $89 = $88 & 255;
            $90 = ((($10)) + 3 | 0);
            HEAP8[$90 >> 0] = $89;
            $91 = ((($0)) + 32 | 0);
            $92 = HEAP32[$91 >> 2] | 0;
            $93 = ((($92)) + 24 | 0);
            $94 = HEAP32[$93 >> 2] | 0;
            FUNCTION_TABLE_viiiiii[$94 & 31]($1, $2, $3, $47, $54, $10);
            STACKTOP = sp; return;
        }
        $18 = ((($0)) + 25 | 0);
        $19 = ((($4)) + 1 | 0);
        $20 = ((($10)) + 1 | 0);
        $21 = ((($4)) + 2 | 0);
        $22 = ((($10)) + 2 | 0);
        $23 = ((($4)) + 3 | 0);
        $24 = ((($10)) + 3 | 0);
        $25 = ((($0)) + 32 | 0);
        $26 = HEAP8[$17 >> 0] | 0;
        $27 = $26 << 24 >> 24;
        $28 = (($13) + 12) | 0;
        $29 = (($28) + ($27)) | 0;
        $30 = (23999 + ($29) | 0);
        $31 = HEAP8[$30 >> 0] | 0;
        $32 = $31 & 255;
        $33 = HEAP8[$18 >> 0] | 0;
        $34 = $33 << 24 >> 24;
        $35 = (($28) + ($34)) | 0;
        $36 = (24075 + ($35) | 0);
        $37 = HEAP8[$36 >> 0] | 0;
        $38 = $37 << 24 >> 24;
        $39 = $38 | $32;
        $40 = ($39 | 0) == (0);
        if ($40) {
            $127 = $15; $129 = $26; $136 = $33;
        } else {
            $95 = HEAP8[$4 >> 0] | 0;
            $96 = $95 & 255;
            $97 = ((24151 + ($29 << 2) | 0) + ($96) | 0);
            $98 = HEAP8[$97 >> 0] | 0;
            $99 = $98 & 255;
            $100 = (($99) + 1) | 0;
            $101 = $100 & 255;
            HEAP8[$10 >> 0] = $101;
            $102 = HEAP8[$19 >> 0] | 0;
            $103 = $102 & 255;
            $104 = ((24151 + ($29 << 2) | 0) + ($103) | 0);
            $105 = HEAP8[$104 >> 0] | 0;
            $106 = $105 & 255;
            $107 = (($106) + 1) | 0;
            $108 = $107 & 255;
            HEAP8[$20 >> 0] = $108;
            $109 = HEAP8[$21 >> 0] | 0;
            $110 = $109 & 255;
            $111 = ((24151 + ($29 << 2) | 0) + ($110) | 0);
            $112 = HEAP8[$111 >> 0] | 0;
            $113 = $112 & 255;
            $114 = (($113) + 1) | 0;
            $115 = $114 & 255;
            HEAP8[$22 >> 0] = $115;
            $116 = HEAP8[$23 >> 0] | 0;
            $117 = $116 & 255;
            $118 = ((24151 + ($29 << 2) | 0) + ($117) | 0);
            $119 = HEAP8[$118 >> 0] | 0;
            $120 = $119 & 255;
            $121 = (($120) + 1) | 0;
            $122 = $121 & 255;
            HEAP8[$24 >> 0] = $122;
            $123 = HEAP32[$25 >> 2] | 0;
            $124 = ((($123)) + 40 | 0);
            $125 = HEAP32[$124 >> 2] | 0;
            FUNCTION_TABLE_viiiii[$125 & 15]($1, $3, $32, $38, $10);
            $$pre = HEAP8[$14 >> 0] | 0;
            $$pre72 = HEAP8[$17 >> 0] | 0;
            $$pre73 = HEAP8[$18 >> 0] | 0;
            $127 = $$pre; $129 = $$pre72; $136 = $$pre73;
        }
        $126 = $127 << 24 >> 24;
        $128 = $129 << 24 >> 24;
        $130 = (($126) + 12) | 0;
        $131 = (($130) + ($128)) | 0;
        $132 = (23999 + ($131) | 0);
        $133 = HEAP8[$132 >> 0] | 0;
        $134 = $133 & 255;
        $135 = $136 << 24 >> 24;
        $137 = (($130) + ($135)) | 0;
        $138 = (24075 + ($137) | 0);
        $139 = HEAP8[$138 >> 0] | 0;
        $140 = $139 << 24 >> 24;
        $141 = $140 | $134;
        $142 = ($141 | 0) == (0);
        if ($142) {
            STACKTOP = sp; return;
        }
        $143 = HEAP8[$4 >> 0] | 0;
        $144 = $143 & 255;
        $145 = ((24151 + ($131 << 2) | 0) + ($144) | 0);
        $146 = HEAP8[$145 >> 0] | 0;
        $147 = $146 & 255;
        $148 = (($147) + 1) | 0;
        $149 = $148 & 255;
        HEAP8[$10 >> 0] = $149;
        $150 = HEAP8[$19 >> 0] | 0;
        $151 = $150 & 255;
        $152 = ((24151 + ($131 << 2) | 0) + ($151) | 0);
        $153 = HEAP8[$152 >> 0] | 0;
        $154 = $153 & 255;
        $155 = (($154) + 1) | 0;
        $156 = $155 & 255;
        HEAP8[$20 >> 0] = $156;
        $157 = HEAP8[$21 >> 0] | 0;
        $158 = $157 & 255;
        $159 = ((24151 + ($131 << 2) | 0) + ($158) | 0);
        $160 = HEAP8[$159 >> 0] | 0;
        $161 = $160 & 255;
        $162 = (($161) + 1) | 0;
        $163 = $162 & 255;
        HEAP8[$22 >> 0] = $163;
        $164 = HEAP8[$23 >> 0] | 0;
        $165 = $164 & 255;
        $166 = ((24151 + ($131 << 2) | 0) + ($165) | 0);
        $167 = HEAP8[$166 >> 0] | 0;
        $168 = $167 & 255;
        $169 = (($168) + 1) | 0;
        $170 = $169 & 255;
        HEAP8[$24 >> 0] = $170;
        $171 = HEAP32[$25 >> 2] | 0;
        $172 = ((($171)) + 40 | 0);
        $173 = HEAP32[$172 >> 2] | 0;
        FUNCTION_TABLE_viiiii[$173 & 15]($2, $3, $134, $140, $10);
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec25FilteringEdgeChromaIntraHEPNS_19tagDeblockingFilterEPhS2_iS2_($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$pre = 0, $$pre44 = 0, $$pre45 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
        var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ((($0)) + 26 | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = $6 << 24 >> 24;
        $8 = ((($0)) + 27 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ($6 << 24 >> 24) == ($9 << 24 >> 24);
        $11 = ((($0)) + 24 | 0);
        if ($10) {
            $29 = HEAP8[$11 >> 0] | 0;
            $30 = $29 << 24 >> 24;
            $31 = (($7) + 12) | 0;
            $32 = (($31) + ($30)) | 0;
            $33 = (23999 + ($32) | 0);
            $34 = HEAP8[$33 >> 0] | 0;
            $35 = $34 & 255;
            $36 = ((($0)) + 25 | 0);
            $37 = HEAP8[$36 >> 0] | 0;
            $38 = $37 << 24 >> 24;
            $39 = (($31) + ($38)) | 0;
            $40 = (24075 + ($39) | 0);
            $41 = HEAP8[$40 >> 0] | 0;
            $42 = $41 << 24 >> 24;
            $43 = $42 | $35;
            $44 = ($43 | 0) == (0);
            if ($44) {
                return;
            }
            $45 = ((($0)) + 32 | 0);
            $46 = HEAP32[$45 >> 2] | 0;
            $47 = ((($46)) + 20 | 0);
            $48 = HEAP32[$47 >> 2] | 0;
            FUNCTION_TABLE_viiiii[$48 & 15]($1, $2, $3, $35, $42);
            return;
        }
        $12 = ((($0)) + 25 | 0);
        $13 = ((($0)) + 32 | 0);
        $14 = HEAP8[$11 >> 0] | 0;
        $15 = $14 << 24 >> 24;
        $16 = (($7) + 12) | 0;
        $17 = (($16) + ($15)) | 0;
        $18 = (23999 + ($17) | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = $19 & 255;
        $21 = HEAP8[$12 >> 0] | 0;
        $22 = $21 << 24 >> 24;
        $23 = (($16) + ($22)) | 0;
        $24 = (24075 + ($23) | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 << 24 >> 24;
        $27 = $26 | $20;
        $28 = ($27 | 0) == (0);
        if ($28) {
            $53 = $9; $55 = $14; $62 = $21;
        } else {
            $49 = HEAP32[$13 >> 2] | 0;
            $50 = ((($49)) + 36 | 0);
            $51 = HEAP32[$50 >> 2] | 0;
            FUNCTION_TABLE_viiii[$51 & 31]($1, $3, $20, $26);
            $$pre = HEAP8[$8 >> 0] | 0;
            $$pre44 = HEAP8[$11 >> 0] | 0;
            $$pre45 = HEAP8[$12 >> 0] | 0;
            $53 = $$pre; $55 = $$pre44; $62 = $$pre45;
        }
        $52 = $53 << 24 >> 24;
        $54 = $55 << 24 >> 24;
        $56 = (($52) + 12) | 0;
        $57 = (($56) + ($54)) | 0;
        $58 = (23999 + ($57) | 0);
        $59 = HEAP8[$58 >> 0] | 0;
        $60 = $59 & 255;
        $61 = $62 << 24 >> 24;
        $63 = (($56) + ($61)) | 0;
        $64 = (24075 + ($63) | 0);
        $65 = HEAP8[$64 >> 0] | 0;
        $66 = $65 << 24 >> 24;
        $67 = $66 | $60;
        $68 = ($67 | 0) == (0);
        if ($68) {
            return;
        }
        $69 = HEAP32[$13 >> 2] | 0;
        $70 = ((($69)) + 36 | 0);
        $71 = HEAP32[$70 >> 2] | 0;
        FUNCTION_TABLE_viiii[$71 & 31]($2, $3, $60, $66);
        return;
    }
    function __ZN7WelsDec20FilteringEdgeChromaHEPNS_19tagDeblockingFilterEPhS2_iS2_($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$pre = 0, $$pre72 = 0, $$pre73 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
        var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
        var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
        var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
        var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
        var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
        var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
        var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
        var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $5 = sp;
        $6 = ((($5)) + 15 | 0);
        $7 = $6;
        $8 = $7 & 15;
        $9 = (0 - ($8)) | 0;
        $10 = (($6) + ($9) | 0);
        $11 = ((($0)) + 26 | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = $12 << 24 >> 24;
        $14 = ((($0)) + 27 | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = ($12 << 24 >> 24) == ($15 << 24 >> 24);
        $17 = ((($0)) + 24 | 0);
        if ($16) {
            $41 = HEAP8[$17 >> 0] | 0;
            $42 = $41 << 24 >> 24;
            $43 = (($13) + 12) | 0;
            $44 = (($43) + ($42)) | 0;
            $45 = (23999 + ($44) | 0);
            $46 = HEAP8[$45 >> 0] | 0;
            $47 = $46 & 255;
            $48 = ((($0)) + 25 | 0);
            $49 = HEAP8[$48 >> 0] | 0;
            $50 = $49 << 24 >> 24;
            $51 = (($43) + ($50)) | 0;
            $52 = (24075 + ($51) | 0);
            $53 = HEAP8[$52 >> 0] | 0;
            $54 = $53 << 24 >> 24;
            $55 = $54 | $47;
            $56 = ($55 | 0) == (0);
            if ($56) {
                STACKTOP = sp; return;
            }
            $57 = HEAP8[$4 >> 0] | 0;
            $58 = $57 & 255;
            $59 = ((24151 + ($44 << 2) | 0) + ($58) | 0);
            $60 = HEAP8[$59 >> 0] | 0;
            $61 = $60 & 255;
            $62 = (($61) + 1) | 0;
            $63 = $62 & 255;
            HEAP8[$10 >> 0] = $63;
            $64 = ((($4)) + 1 | 0);
            $65 = HEAP8[$64 >> 0] | 0;
            $66 = $65 & 255;
            $67 = ((24151 + ($44 << 2) | 0) + ($66) | 0);
            $68 = HEAP8[$67 >> 0] | 0;
            $69 = $68 & 255;
            $70 = (($69) + 1) | 0;
            $71 = $70 & 255;
            $72 = ((($10)) + 1 | 0);
            HEAP8[$72 >> 0] = $71;
            $73 = ((($4)) + 2 | 0);
            $74 = HEAP8[$73 >> 0] | 0;
            $75 = $74 & 255;
            $76 = ((24151 + ($44 << 2) | 0) + ($75) | 0);
            $77 = HEAP8[$76 >> 0] | 0;
            $78 = $77 & 255;
            $79 = (($78) + 1) | 0;
            $80 = $79 & 255;
            $81 = ((($10)) + 2 | 0);
            HEAP8[$81 >> 0] = $80;
            $82 = ((($4)) + 3 | 0);
            $83 = HEAP8[$82 >> 0] | 0;
            $84 = $83 & 255;
            $85 = ((24151 + ($44 << 2) | 0) + ($84) | 0);
            $86 = HEAP8[$85 >> 0] | 0;
            $87 = $86 & 255;
            $88 = (($87) + 1) | 0;
            $89 = $88 & 255;
            $90 = ((($10)) + 3 | 0);
            HEAP8[$90 >> 0] = $89;
            $91 = ((($0)) + 32 | 0);
            $92 = HEAP32[$91 >> 2] | 0;
            $93 = ((($92)) + 16 | 0);
            $94 = HEAP32[$93 >> 2] | 0;
            FUNCTION_TABLE_viiiiii[$94 & 31]($1, $2, $3, $47, $54, $10);
            STACKTOP = sp; return;
        }
        $18 = ((($0)) + 25 | 0);
        $19 = ((($4)) + 1 | 0);
        $20 = ((($10)) + 1 | 0);
        $21 = ((($4)) + 2 | 0);
        $22 = ((($10)) + 2 | 0);
        $23 = ((($4)) + 3 | 0);
        $24 = ((($10)) + 3 | 0);
        $25 = ((($0)) + 32 | 0);
        $26 = HEAP8[$17 >> 0] | 0;
        $27 = $26 << 24 >> 24;
        $28 = (($13) + 12) | 0;
        $29 = (($28) + ($27)) | 0;
        $30 = (23999 + ($29) | 0);
        $31 = HEAP8[$30 >> 0] | 0;
        $32 = $31 & 255;
        $33 = HEAP8[$18 >> 0] | 0;
        $34 = $33 << 24 >> 24;
        $35 = (($28) + ($34)) | 0;
        $36 = (24075 + ($35) | 0);
        $37 = HEAP8[$36 >> 0] | 0;
        $38 = $37 << 24 >> 24;
        $39 = $38 | $32;
        $40 = ($39 | 0) == (0);
        if ($40) {
            $127 = $15; $129 = $26; $136 = $33;
        } else {
            $95 = HEAP8[$4 >> 0] | 0;
            $96 = $95 & 255;
            $97 = ((24151 + ($29 << 2) | 0) + ($96) | 0);
            $98 = HEAP8[$97 >> 0] | 0;
            $99 = $98 & 255;
            $100 = (($99) + 1) | 0;
            $101 = $100 & 255;
            HEAP8[$10 >> 0] = $101;
            $102 = HEAP8[$19 >> 0] | 0;
            $103 = $102 & 255;
            $104 = ((24151 + ($29 << 2) | 0) + ($103) | 0);
            $105 = HEAP8[$104 >> 0] | 0;
            $106 = $105 & 255;
            $107 = (($106) + 1) | 0;
            $108 = $107 & 255;
            HEAP8[$20 >> 0] = $108;
            $109 = HEAP8[$21 >> 0] | 0;
            $110 = $109 & 255;
            $111 = ((24151 + ($29 << 2) | 0) + ($110) | 0);
            $112 = HEAP8[$111 >> 0] | 0;
            $113 = $112 & 255;
            $114 = (($113) + 1) | 0;
            $115 = $114 & 255;
            HEAP8[$22 >> 0] = $115;
            $116 = HEAP8[$23 >> 0] | 0;
            $117 = $116 & 255;
            $118 = ((24151 + ($29 << 2) | 0) + ($117) | 0);
            $119 = HEAP8[$118 >> 0] | 0;
            $120 = $119 & 255;
            $121 = (($120) + 1) | 0;
            $122 = $121 & 255;
            HEAP8[$24 >> 0] = $122;
            $123 = HEAP32[$25 >> 2] | 0;
            $124 = ((($123)) + 32 | 0);
            $125 = HEAP32[$124 >> 2] | 0;
            FUNCTION_TABLE_viiiii[$125 & 15]($1, $3, $32, $38, $10);
            $$pre = HEAP8[$14 >> 0] | 0;
            $$pre72 = HEAP8[$17 >> 0] | 0;
            $$pre73 = HEAP8[$18 >> 0] | 0;
            $127 = $$pre; $129 = $$pre72; $136 = $$pre73;
        }
        $126 = $127 << 24 >> 24;
        $128 = $129 << 24 >> 24;
        $130 = (($126) + 12) | 0;
        $131 = (($130) + ($128)) | 0;
        $132 = (23999 + ($131) | 0);
        $133 = HEAP8[$132 >> 0] | 0;
        $134 = $133 & 255;
        $135 = $136 << 24 >> 24;
        $137 = (($130) + ($135)) | 0;
        $138 = (24075 + ($137) | 0);
        $139 = HEAP8[$138 >> 0] | 0;
        $140 = $139 << 24 >> 24;
        $141 = $140 | $134;
        $142 = ($141 | 0) == (0);
        if ($142) {
            STACKTOP = sp; return;
        }
        $143 = HEAP8[$4 >> 0] | 0;
        $144 = $143 & 255;
        $145 = ((24151 + ($131 << 2) | 0) + ($144) | 0);
        $146 = HEAP8[$145 >> 0] | 0;
        $147 = $146 & 255;
        $148 = (($147) + 1) | 0;
        $149 = $148 & 255;
        HEAP8[$10 >> 0] = $149;
        $150 = HEAP8[$19 >> 0] | 0;
        $151 = $150 & 255;
        $152 = ((24151 + ($131 << 2) | 0) + ($151) | 0);
        $153 = HEAP8[$152 >> 0] | 0;
        $154 = $153 & 255;
        $155 = (($154) + 1) | 0;
        $156 = $155 & 255;
        HEAP8[$20 >> 0] = $156;
        $157 = HEAP8[$21 >> 0] | 0;
        $158 = $157 & 255;
        $159 = ((24151 + ($131 << 2) | 0) + ($158) | 0);
        $160 = HEAP8[$159 >> 0] | 0;
        $161 = $160 & 255;
        $162 = (($161) + 1) | 0;
        $163 = $162 & 255;
        HEAP8[$22 >> 0] = $163;
        $164 = HEAP8[$23 >> 0] | 0;
        $165 = $164 & 255;
        $166 = ((24151 + ($131 << 2) | 0) + ($165) | 0);
        $167 = HEAP8[$166 >> 0] | 0;
        $168 = $167 & 255;
        $169 = (($168) + 1) | 0;
        $170 = $169 & 255;
        HEAP8[$24 >> 0] = $170;
        $171 = HEAP32[$25 >> 2] | 0;
        $172 = ((($171)) + 32 | 0);
        $173 = HEAP32[$172 >> 2] | 0;
        FUNCTION_TABLE_viiiii[$173 & 15]($2, $3, $134, $140, $10);
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec33WelsMbIntraPredictionConstructionEPNS_21TagWelsDecoderContextEPNS_10TagDqLayerEb($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$phi$trans$insert = 0, $$pre = 0, $$pre30 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ((($1)) + 4040 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        __ZN7WelsDec23WelsFillRecNeededMbInfoEPNS_21TagWelsDecoderContextEbPNS_10TagDqLayerE($0, $2, $1);
        $5 = ((($1)) + 3908 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (($6) + ($4 << 1) | 0);
        $8 = HEAP16[$7 >> 1] | 0;
        switch ($8 << 16 >> 16) {
            case 2: {
                $9 = ((($1)) + 3988 | 0);
                $10 = HEAP32[$9 >> 2] | 0;
                $11 = (($10) + (($4 * 768) | 0) | 0);
                $12 = ((($1)) + 3948 | 0);
                $13 = HEAP32[$12 >> 2] | 0;
                $14 = (($13) + ($4) | 0);
                $15 = HEAP8[$14 >> 0] | 0;
                $16 = $15 << 24 >> 24;
                __ZN7WelsDec21WelsLumaDcDequantIdctEPsiPNS_21TagWelsDecoderContextE($11, $16, $0);
                $17 = HEAP32[$9 >> 2] | 0;
                $18 = (($17) + (($4 * 768) | 0) | 0);
                (__ZN7WelsDec11RecI16x16MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($4, $0, $18, $1) | 0);
                return 0;
                break;
            }
            case 4: {
                $19 = ((($1)) + 3988 | 0);
                $20 = HEAP32[$19 >> 2] | 0;
                $21 = (($20) + (($4 * 768) | 0) | 0);
                (__ZN7WelsDec9RecI8x8MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($4, $0, $21, $1) | 0);
                $$pre = HEAP32[$5 >> 2] | 0;
                $$phi$trans$insert = (($$pre) + ($4 << 1) | 0);
                $$pre30 = HEAP16[$$phi$trans$insert >> 1] | 0;
                $22 = $$pre30;
                break;
            }
            default: {
                $22 = $8;
            }
        }
        $23 = ($22 << 16 >> 16) == (1);
        if (!($23)) {
            return 0;
        }
        $24 = ((($1)) + 3988 | 0);
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = (($25) + (($4 * 768) | 0) | 0);
        (__ZN7WelsDec9RecI4x4MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($4, $0, $26, $1) | 0);
        return 0;
    }
    function __ZN7WelsDec12GetInterPredEPhS0_S0_PNS_21TagWelsDecoderContextE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$$i = 0, $$$i281 = 0, $$$i284 = 0, $$$i287 = 0, $$$i290 = 0, $$$i293 = 0, $$$i296 = 0, $$$i299 = 0, $$$i302 = 0, $$$i305 = 0, $$$i308 = 0, $$0280335 = 0, $$0336 = 0, $$80$i = 0, $$80$i282 = 0, $$80$i285 = 0, $$80$i288 = 0, $$80$i291 = 0, $$80$i294 = 0, $$80$i297 = 0;
        var $$80$i300 = 0, $$80$i303 = 0, $$80$i306 = 0, $$80$i309 = 0, $$pre = 0, $$pre338 = 0, $$pre339 = 0, $$pre340 = 0, $$pre341 = 0, $$pre342 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
        var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
        var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
        var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
        var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
        var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
        var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
        var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
        var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
        var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
        var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
        var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0;
        var $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0;
        var $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0;
        var $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0;
        var $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0;
        var $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0;
        var $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0;
        var $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0;
        var $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0;
        var $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0;
        var $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0;
        var $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0;
        var $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0;
        var $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0;
        var $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0;
        var $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0;
        var $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0;
        var $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0;
        var $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0;
        var $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0;
        var $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0;
        var $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0;
        var $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0;
        var $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0;
        var $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0;
        var $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
        var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
        var $99 = 0, $exitcond = 0, $exitcond337 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = ((($3)) + 241932 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($6)) + 4040 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($6)) + 3908 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = (($10) + ($8 << 1) | 0);
        $12 = HEAP16[$11 >> 1] | 0;
        $13 = $12 << 16 >> 16;
        $14 = ((($6)) + 4032 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = $15 << 4;
        $17 = ((($6)) + 4036 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = $18 << 4;
        $20 = ((($3)) + 5464 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ((($21)) + 32 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = ((($21)) + 36 | 0);
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = ((($6)) + 1156 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = $27 << 4;
        $29 = ((($4)) + 40 | 0);
        HEAP32[$29 >> 2] = $28;
        $30 = ((($6)) + 1160 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = $31 << 4;
        $33 = ((($4)) + 44 | 0);
        HEAP32[$33 >> 2] = $32;
        HEAP32[$4 >> 2] = $0;
        $34 = ((($4)) + 4 | 0);
        HEAP32[$34 >> 2] = $1;
        $35 = ((($4)) + 8 | 0);
        HEAP32[$35 >> 2] = $2;
        $36 = ((($4)) + 32 | 0);
        HEAP32[$36 >> 2] = $23;
        $37 = ((($4)) + 36 | 0);
        HEAP32[$37 >> 2] = $25;
        switch ($13 | 0) {
            case 8: case 256: {
                $51 = ((($6)) + 3916 | 0);
                $52 = HEAP32[$51 >> 2] | 0;
                $53 = (($52) + ($8 << 6) | 0);
                $54 = HEAP16[$53 >> 1] | 0;
                $55 = (((($52) + ($8 << 6) | 0)) + 2 | 0);
                $56 = HEAP16[$55 >> 1] | 0;
                $57 = ((($6)) + 3932 | 0);
                $58 = HEAP32[$57 >> 2] | 0;
                $59 = (($58) + ($8 << 4) | 0);
                $60 = HEAP8[$59 >> 0] | 0;
                $61 = $60 << 24 >> 24;
                $62 = (((($3)) + 5468 | 0) + ($61 << 2) | 0);
                $63 = HEAP32[$62 >> 2] | 0;
                $64 = ((($63)) + 32 | 0);
                $65 = HEAP32[$64 >> 2] | 0;
                $66 = ((($4)) + 24 | 0);
                HEAP32[$66 >> 2] = $65;
                $67 = ((($63)) + 36 | 0);
                $68 = HEAP32[$67 >> 2] | 0;
                $69 = ((($4)) + 28 | 0);
                HEAP32[$69 >> 2] = $68;
                $70 = ((($63)) + 16 | 0);
                $71 = HEAP32[$70 >> 2] | 0;
                $72 = ((($4)) + 12 | 0);
                HEAP32[$72 >> 2] = $71;
                $73 = ((($63)) + 20 | 0);
                $74 = HEAP32[$73 >> 2] | 0;
                $75 = ((($4)) + 16 | 0);
                HEAP32[$75 >> 2] = $74;
                $76 = ((($63)) + 24 | 0);
                $77 = HEAP32[$76 >> 2] | 0;
                $78 = ((($4)) + 20 | 0);
                HEAP32[$78 >> 2] = $77;
                $79 = $15 << 6;
                $80 = $54 << 16 >> 16;
                $81 = (($79) + ($80)) | 0;
                $82 = $18 << 6;
                $83 = $56 << 16 >> 16;
                $84 = (($82) + ($83)) | 0;
                $85 = ($81 | 0) < (-120);
                $86 = $71;
                $87 = $74;
                $88 = $77;
                if ($85) {
                    $97 = -120;
                } else {
                    $89 = $27 << 6;
                    $90 = $89 | 52;
                    $91 = ($81 | 0) > ($90 | 0);
                    $$$i = $91 ? $90 : $81;
                    $97 = $$$i;
                }
                $92 = ($84 | 0) < (-120);
                if ($92) {
                    $99 = -120;
                } else {
                    $93 = $31 << 6;
                    $94 = $93 | 52;
                    $95 = ($84 | 0) > ($94 | 0);
                    $$80$i = $95 ? $94 : $84;
                    $99 = $$80$i;
                }
                $96 = $97 >> 2;
                $98 = $99 >> 2;
                $100 = Math_imul($98, $65) | 0;
                $101 = (($100) + ($96)) | 0;
                $102 = $97 >> 3;
                $103 = $99 >> 3;
                $104 = Math_imul($68, $103) | 0;
                $105 = (($104) + ($102)) | 0;
                $106 = (($86) + ($101) | 0);
                $107 = (($87) + ($105) | 0);
                $108 = (($88) + ($105) | 0);
                $109 = ((($3)) + 316988 | 0);
                $110 = HEAP32[$109 >> 2] | 0;
                $111 = $97 & 65535;
                $112 = $99 & 65535;
                FUNCTION_TABLE_viiiiiiii[$110 & 3]($106, $65, $0, $23, $111, $112, 16, 16);
                $113 = ((($3)) + 316984 | 0);
                $114 = HEAP32[$113 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$114 & 3]($107, $68, $1, $25, $111, $112, 8, 8);
                $115 = HEAP32[$113 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$115 & 3]($108, $68, $2, $25, $111, $112, 8, 8);
                $116 = ((($6)) + 4104 | 0);
                $117 = HEAP8[$116 >> 0] | 0;
                $118 = ($117 << 24 >> 24) == (0);
                if ($118) {
                    STACKTOP = sp; return;
                }
                $119 = HEAP32[$57 >> 2] | 0;
                $120 = (($119) + ($8 << 4) | 0);
                $121 = HEAP8[$120 >> 0] | 0;
                $122 = $121 << 24 >> 24;
                __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $122, 16, 16);
                STACKTOP = sp; return;
                break;
            }
            case 16: {
                $123 = ((($6)) + 3916 | 0);
                $124 = HEAP32[$123 >> 2] | 0;
                $125 = (($124) + ($8 << 6) | 0);
                $126 = HEAP16[$125 >> 1] | 0;
                $127 = (((($124) + ($8 << 6) | 0)) + 2 | 0);
                $128 = HEAP16[$127 >> 1] | 0;
                $129 = ((($6)) + 3932 | 0);
                $130 = HEAP32[$129 >> 2] | 0;
                $131 = (($130) + ($8 << 4) | 0);
                $132 = HEAP8[$131 >> 0] | 0;
                $133 = $132 << 24 >> 24;
                $134 = (((($3)) + 5468 | 0) + ($133 << 2) | 0);
                $135 = HEAP32[$134 >> 2] | 0;
                $136 = ((($135)) + 32 | 0);
                $137 = HEAP32[$136 >> 2] | 0;
                $138 = ((($4)) + 24 | 0);
                HEAP32[$138 >> 2] = $137;
                $139 = ((($135)) + 36 | 0);
                $140 = HEAP32[$139 >> 2] | 0;
                $141 = ((($4)) + 28 | 0);
                HEAP32[$141 >> 2] = $140;
                $142 = ((($135)) + 16 | 0);
                $143 = HEAP32[$142 >> 2] | 0;
                $144 = ((($4)) + 12 | 0);
                HEAP32[$144 >> 2] = $143;
                $145 = ((($135)) + 20 | 0);
                $146 = HEAP32[$145 >> 2] | 0;
                $147 = ((($4)) + 16 | 0);
                HEAP32[$147 >> 2] = $146;
                $148 = ((($135)) + 24 | 0);
                $149 = HEAP32[$148 >> 2] | 0;
                $150 = ((($4)) + 20 | 0);
                HEAP32[$150 >> 2] = $149;
                $151 = $15 << 6;
                $152 = $126 << 16 >> 16;
                $153 = (($151) + ($152)) | 0;
                $154 = $18 << 6;
                $155 = $128 << 16 >> 16;
                $156 = (($154) + ($155)) | 0;
                $157 = ($153 | 0) < (-120);
                $158 = $143;
                $159 = $146;
                $160 = $149;
                if ($157) {
                    $169 = -120;
                } else {
                    $161 = $27 << 6;
                    $162 = $161 | 52;
                    $163 = ($153 | 0) > ($162 | 0);
                    $$$i281 = $163 ? $162 : $153;
                    $169 = $$$i281;
                }
                $164 = ($156 | 0) < (-120);
                if ($164) {
                    $171 = -120;
                } else {
                    $165 = $31 << 6;
                    $166 = $165 | 52;
                    $167 = ($156 | 0) > ($166 | 0);
                    $$80$i282 = $167 ? $166 : $156;
                    $171 = $$80$i282;
                }
                $168 = $169 >> 2;
                $170 = $171 >> 2;
                $172 = Math_imul($170, $137) | 0;
                $173 = (($172) + ($168)) | 0;
                $174 = $169 >> 3;
                $175 = $171 >> 3;
                $176 = Math_imul($140, $175) | 0;
                $177 = (($176) + ($174)) | 0;
                $178 = (($158) + ($173) | 0);
                $179 = (($159) + ($177) | 0);
                $180 = (($160) + ($177) | 0);
                $181 = ((($3)) + 316988 | 0);
                $182 = HEAP32[$181 >> 2] | 0;
                $183 = $169 & 65535;
                $184 = $171 & 65535;
                FUNCTION_TABLE_viiiiiiii[$182 & 3]($178, $137, $0, $23, $183, $184, 16, 8);
                $185 = ((($3)) + 316984 | 0);
                $186 = HEAP32[$185 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$186 & 3]($179, $140, $1, $25, $183, $184, 8, 4);
                $187 = HEAP32[$185 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$187 & 3]($180, $140, $2, $25, $183, $184, 8, 4);
                $188 = ((($6)) + 4104 | 0);
                $189 = HEAP8[$188 >> 0] | 0;
                $190 = ($189 << 24 >> 24) == (0);
                if (!($190)) {
                    $191 = HEAP32[$129 >> 2] | 0;
                    $192 = (($191) + ($8 << 4) | 0);
                    $193 = HEAP8[$192 >> 0] | 0;
                    $194 = $193 << 24 >> 24;
                    __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $194, 16, 8);
                }
                $195 = HEAP32[$123 >> 2] | 0;
                $196 = (((($195) + ($8 << 6) | 0)) + 32 | 0);
                $197 = HEAP16[$196 >> 1] | 0;
                $198 = (((($195) + ($8 << 6) | 0)) + 34 | 0);
                $199 = HEAP16[$198 >> 1] | 0;
                $200 = HEAP32[$129 >> 2] | 0;
                $201 = (((($200) + ($8 << 4) | 0)) + 8 | 0);
                $202 = HEAP8[$201 >> 0] | 0;
                $203 = $202 << 24 >> 24;
                $204 = (((($3)) + 5468 | 0) + ($203 << 2) | 0);
                $205 = HEAP32[$204 >> 2] | 0;
                $206 = ((($205)) + 32 | 0);
                $207 = HEAP32[$206 >> 2] | 0;
                HEAP32[$138 >> 2] = $207;
                $208 = ((($205)) + 36 | 0);
                $209 = HEAP32[$208 >> 2] | 0;
                HEAP32[$141 >> 2] = $209;
                $210 = ((($205)) + 16 | 0);
                $211 = HEAP32[$210 >> 2] | 0;
                HEAP32[$144 >> 2] = $211;
                $212 = ((($205)) + 20 | 0);
                $213 = HEAP32[$212 >> 2] | 0;
                HEAP32[$147 >> 2] = $213;
                $214 = ((($205)) + 24 | 0);
                $215 = HEAP32[$214 >> 2] | 0;
                HEAP32[$150 >> 2] = $215;
                $216 = $23 << 3;
                $217 = (($0) + ($216) | 0);
                HEAP32[$4 >> 2] = $217;
                $218 = $25 << 2;
                $219 = (($1) + ($218) | 0);
                HEAP32[$34 >> 2] = $219;
                $220 = (($2) + ($218) | 0);
                HEAP32[$35 >> 2] = $220;
                $221 = $197 << 16 >> 16;
                $222 = (($151) + ($221)) | 0;
                $223 = $154 | 32;
                $224 = $199 << 16 >> 16;
                $225 = (($223) + ($224)) | 0;
                $226 = ($222 | 0) < (-120);
                $227 = $211;
                $228 = $213;
                $229 = $215;
                if ($226) {
                    $240 = -120;
                } else {
                    $230 = HEAP32[$29 >> 2] | 0;
                    $231 = $230 << 2;
                    $232 = (($231) + 52) | 0;
                    $233 = ($222 | 0) > ($232 | 0);
                    $$$i284 = $233 ? $232 : $222;
                    $240 = $$$i284;
                }
                $234 = ($225 | 0) < (-120);
                if ($234) {
                    $242 = -120;
                } else {
                    $235 = HEAP32[$33 >> 2] | 0;
                    $236 = $235 << 2;
                    $237 = (($236) + 52) | 0;
                    $238 = ($225 | 0) > ($237 | 0);
                    $$80$i285 = $238 ? $237 : $225;
                    $242 = $$80$i285;
                }
                $239 = $240 >> 2;
                $241 = $242 >> 2;
                $243 = Math_imul($241, $207) | 0;
                $244 = (($243) + ($239)) | 0;
                $245 = $240 >> 3;
                $246 = $242 >> 3;
                $247 = Math_imul($209, $246) | 0;
                $248 = (($247) + ($245)) | 0;
                $249 = (($227) + ($244) | 0);
                $250 = (($228) + ($248) | 0);
                $251 = (($229) + ($248) | 0);
                $252 = HEAP32[$181 >> 2] | 0;
                $253 = HEAP32[$36 >> 2] | 0;
                $254 = $240 & 65535;
                $255 = $242 & 65535;
                FUNCTION_TABLE_viiiiiiii[$252 & 3]($249, $207, $217, $253, $254, $255, 16, 8);
                $256 = HEAP32[$185 >> 2] | 0;
                $257 = HEAP32[$37 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$256 & 3]($250, $209, $219, $257, $254, $255, 8, 4);
                $258 = HEAP32[$185 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$258 & 3]($251, $209, $220, $257, $254, $255, 8, 4);
                $259 = HEAP8[$188 >> 0] | 0;
                $260 = ($259 << 24 >> 24) == (0);
                if ($260) {
                    STACKTOP = sp; return;
                }
                $261 = HEAP32[$129 >> 2] | 0;
                $262 = (((($261) + ($8 << 4) | 0)) + 8 | 0);
                $263 = HEAP8[$262 >> 0] | 0;
                $264 = $263 << 24 >> 24;
                __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $264, 16, 8);
                STACKTOP = sp; return;
                break;
            }
            case 32: {
                $265 = ((($6)) + 3916 | 0);
                $266 = HEAP32[$265 >> 2] | 0;
                $267 = (($266) + ($8 << 6) | 0);
                $268 = HEAP16[$267 >> 1] | 0;
                $269 = (((($266) + ($8 << 6) | 0)) + 2 | 0);
                $270 = HEAP16[$269 >> 1] | 0;
                $271 = ((($6)) + 3932 | 0);
                $272 = HEAP32[$271 >> 2] | 0;
                $273 = (($272) + ($8 << 4) | 0);
                $274 = HEAP8[$273 >> 0] | 0;
                $275 = $274 << 24 >> 24;
                $276 = (((($3)) + 5468 | 0) + ($275 << 2) | 0);
                $277 = HEAP32[$276 >> 2] | 0;
                $278 = ((($277)) + 32 | 0);
                $279 = HEAP32[$278 >> 2] | 0;
                $280 = ((($4)) + 24 | 0);
                HEAP32[$280 >> 2] = $279;
                $281 = ((($277)) + 36 | 0);
                $282 = HEAP32[$281 >> 2] | 0;
                $283 = ((($4)) + 28 | 0);
                HEAP32[$283 >> 2] = $282;
                $284 = ((($277)) + 16 | 0);
                $285 = HEAP32[$284 >> 2] | 0;
                $286 = ((($4)) + 12 | 0);
                HEAP32[$286 >> 2] = $285;
                $287 = ((($277)) + 20 | 0);
                $288 = HEAP32[$287 >> 2] | 0;
                $289 = ((($4)) + 16 | 0);
                HEAP32[$289 >> 2] = $288;
                $290 = ((($277)) + 24 | 0);
                $291 = HEAP32[$290 >> 2] | 0;
                $292 = ((($4)) + 20 | 0);
                HEAP32[$292 >> 2] = $291;
                $293 = $15 << 6;
                $294 = $268 << 16 >> 16;
                $295 = (($293) + ($294)) | 0;
                $296 = $18 << 6;
                $297 = $270 << 16 >> 16;
                $298 = (($296) + ($297)) | 0;
                $299 = ($295 | 0) < (-120);
                $300 = $285;
                $301 = $288;
                $302 = $291;
                if ($299) {
                    $311 = -120;
                } else {
                    $303 = $27 << 6;
                    $304 = $303 | 52;
                    $305 = ($295 | 0) > ($304 | 0);
                    $$$i287 = $305 ? $304 : $295;
                    $311 = $$$i287;
                }
                $306 = ($298 | 0) < (-120);
                if ($306) {
                    $313 = -120;
                } else {
                    $307 = $31 << 6;
                    $308 = $307 | 52;
                    $309 = ($298 | 0) > ($308 | 0);
                    $$80$i288 = $309 ? $308 : $298;
                    $313 = $$80$i288;
                }
                $310 = $311 >> 2;
                $312 = $313 >> 2;
                $314 = Math_imul($312, $279) | 0;
                $315 = (($314) + ($310)) | 0;
                $316 = $311 >> 3;
                $317 = $313 >> 3;
                $318 = Math_imul($282, $317) | 0;
                $319 = (($318) + ($316)) | 0;
                $320 = (($300) + ($315) | 0);
                $321 = (($301) + ($319) | 0);
                $322 = (($302) + ($319) | 0);
                $323 = ((($3)) + 316988 | 0);
                $324 = HEAP32[$323 >> 2] | 0;
                $325 = $311 & 65535;
                $326 = $313 & 65535;
                FUNCTION_TABLE_viiiiiiii[$324 & 3]($320, $279, $0, $23, $325, $326, 8, 16);
                $327 = ((($3)) + 316984 | 0);
                $328 = HEAP32[$327 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$328 & 3]($321, $282, $1, $25, $325, $326, 4, 8);
                $329 = HEAP32[$327 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$329 & 3]($322, $282, $2, $25, $325, $326, 4, 8);
                $330 = ((($6)) + 4104 | 0);
                $331 = HEAP8[$330 >> 0] | 0;
                $332 = ($331 << 24 >> 24) == (0);
                if (!($332)) {
                    $333 = HEAP32[$271 >> 2] | 0;
                    $334 = (($333) + ($8 << 4) | 0);
                    $335 = HEAP8[$334 >> 0] | 0;
                    $336 = $335 << 24 >> 24;
                    __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $336, 8, 16);
                }
                $337 = HEAP32[$265 >> 2] | 0;
                $338 = (((($337) + ($8 << 6) | 0)) + 8 | 0);
                $339 = HEAP16[$338 >> 1] | 0;
                $340 = (((($337) + ($8 << 6) | 0)) + 10 | 0);
                $341 = HEAP16[$340 >> 1] | 0;
                $342 = HEAP32[$271 >> 2] | 0;
                $343 = (((($342) + ($8 << 4) | 0)) + 2 | 0);
                $344 = HEAP8[$343 >> 0] | 0;
                $345 = $344 << 24 >> 24;
                $346 = (((($3)) + 5468 | 0) + ($345 << 2) | 0);
                $347 = HEAP32[$346 >> 2] | 0;
                $348 = ((($347)) + 32 | 0);
                $349 = HEAP32[$348 >> 2] | 0;
                HEAP32[$280 >> 2] = $349;
                $350 = ((($347)) + 36 | 0);
                $351 = HEAP32[$350 >> 2] | 0;
                HEAP32[$283 >> 2] = $351;
                $352 = ((($347)) + 16 | 0);
                $353 = HEAP32[$352 >> 2] | 0;
                HEAP32[$286 >> 2] = $353;
                $354 = ((($347)) + 20 | 0);
                $355 = HEAP32[$354 >> 2] | 0;
                HEAP32[$289 >> 2] = $355;
                $356 = ((($347)) + 24 | 0);
                $357 = HEAP32[$356 >> 2] | 0;
                HEAP32[$292 >> 2] = $357;
                $358 = ((($0)) + 8 | 0);
                HEAP32[$4 >> 2] = $358;
                $359 = ((($1)) + 4 | 0);
                HEAP32[$34 >> 2] = $359;
                $360 = ((($2)) + 4 | 0);
                HEAP32[$35 >> 2] = $360;
                $361 = $293 | 32;
                $362 = $339 << 16 >> 16;
                $363 = (($361) + ($362)) | 0;
                $364 = $341 << 16 >> 16;
                $365 = (($296) + ($364)) | 0;
                $366 = ($363 | 0) < (-120);
                $367 = $353;
                $368 = $355;
                $369 = $357;
                if ($366) {
                    $380 = -120;
                } else {
                    $370 = HEAP32[$29 >> 2] | 0;
                    $371 = $370 << 2;
                    $372 = (($371) + 52) | 0;
                    $373 = ($363 | 0) > ($372 | 0);
                    $$$i290 = $373 ? $372 : $363;
                    $380 = $$$i290;
                }
                $374 = ($365 | 0) < (-120);
                if ($374) {
                    $382 = -120;
                } else {
                    $375 = HEAP32[$33 >> 2] | 0;
                    $376 = $375 << 2;
                    $377 = (($376) + 52) | 0;
                    $378 = ($365 | 0) > ($377 | 0);
                    $$80$i291 = $378 ? $377 : $365;
                    $382 = $$80$i291;
                }
                $379 = $380 >> 2;
                $381 = $382 >> 2;
                $383 = Math_imul($381, $349) | 0;
                $384 = (($383) + ($379)) | 0;
                $385 = $380 >> 3;
                $386 = $382 >> 3;
                $387 = Math_imul($351, $386) | 0;
                $388 = (($387) + ($385)) | 0;
                $389 = (($367) + ($384) | 0);
                $390 = (($368) + ($388) | 0);
                $391 = (($369) + ($388) | 0);
                $392 = HEAP32[$323 >> 2] | 0;
                $393 = HEAP32[$36 >> 2] | 0;
                $394 = $380 & 65535;
                $395 = $382 & 65535;
                FUNCTION_TABLE_viiiiiiii[$392 & 3]($389, $349, $358, $393, $394, $395, 8, 16);
                $396 = HEAP32[$327 >> 2] | 0;
                $397 = HEAP32[$37 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$396 & 3]($390, $351, $359, $397, $394, $395, 4, 8);
                $398 = HEAP32[$327 >> 2] | 0;
                FUNCTION_TABLE_viiiiiiii[$398 & 3]($391, $351, $360, $397, $394, $395, 4, 8);
                $399 = HEAP8[$330 >> 0] | 0;
                $400 = ($399 << 24 >> 24) == (0);
                if ($400) {
                    STACKTOP = sp; return;
                }
                $401 = HEAP32[$271 >> 2] | 0;
                $402 = (((($401) + ($8 << 4) | 0)) + 2 | 0);
                $403 = HEAP8[$402 >> 0] | 0;
                $404 = $403 << 24 >> 24;
                __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $404, 8, 16);
                STACKTOP = sp; return;
                break;
            }
            case 128: case 64: {
                $38 = ((($6)) + 4008 | 0);
                $39 = ((($6)) + 3932 | 0);
                $40 = ((($4)) + 24 | 0);
                $41 = ((($4)) + 28 | 0);
                $42 = ((($4)) + 12 | 0);
                $43 = ((($4)) + 16 | 0);
                $44 = ((($4)) + 20 | 0);
                $45 = ((($6)) + 4104 | 0);
                $46 = ((($6)) + 3916 | 0);
                $47 = ((($3)) + 316988 | 0);
                $48 = ((($3)) + 316984 | 0);
                $49 = $23 << 2;
                $50 = $25 << 1;
                $$0336 = 0;
                while (1) {
                    $405 = HEAP32[$38 >> 2] | 0;
                    $406 = ((($405) + ($8 << 2) | 0) + ($$0336) | 0);
                    $407 = HEAP8[$406 >> 0] | 0;
                    $408 = $407 << 24 >> 24;
                    $409 = $$0336 & 1;
                    $410 = $409 << 3;
                    $411 = $$0336 >>> 1;
                    $412 = $411 << 3;
                    $413 = $410 | $16;
                    $414 = (($412) + ($19)) | 0;
                    $415 = $409 << 1;
                    $416 = $412 | $415;
                    $417 = HEAP32[$39 >> 2] | 0;
                    $418 = ((($417) + ($8 << 4) | 0) + ($416) | 0);
                    $419 = HEAP8[$418 >> 0] | 0;
                    $420 = $419 << 24 >> 24;
                    $421 = (((($3)) + 5468 | 0) + ($420 << 2) | 0);
                    $422 = HEAP32[$421 >> 2] | 0;
                    $423 = ((($422)) + 32 | 0);
                    $424 = HEAP32[$423 >> 2] | 0;
                    HEAP32[$40 >> 2] = $424;
                    $425 = ((($422)) + 36 | 0);
                    $426 = HEAP32[$425 >> 2] | 0;
                    HEAP32[$41 >> 2] = $426;
                    $427 = ((($422)) + 16 | 0);
                    $428 = HEAP32[$427 >> 2] | 0;
                    HEAP32[$42 >> 2] = $428;
                    $429 = ((($422)) + 20 | 0);
                    $430 = HEAP32[$429 >> 2] | 0;
                    HEAP32[$43 >> 2] = $430;
                    $431 = ((($422)) + 24 | 0);
                    $432 = HEAP32[$431 >> 2] | 0;
                    HEAP32[$44 >> 2] = $432;
                    $433 = HEAP8[$45 >> 0] | 0;
                    $434 = ($433 << 24 >> 24) == (0);
                    $435 = $428;
                    $436 = $430;
                    $437 = $432;
                    if ($434) {
                        $493 = 0;
                    } else {
                        $438 = HEAP8[$418 >> 0] | 0;
                        $439 = $438 << 24 >> 24;
                        $493 = $439;
                    }
                    $440 = (($0) + ($410) | 0);
                    $441 = Math_imul($412, $23) | 0;
                    $442 = (($440) + ($441) | 0);
                    $443 = $409 << 2;
                    $444 = (($1) + ($443) | 0);
                    $445 = $412 >> 1;
                    $446 = Math_imul($445, $25) | 0;
                    $447 = (($444) + ($446) | 0);
                    $448 = (($2) + ($443) | 0);
                    $449 = (($448) + ($446) | 0);
                    HEAP32[$4 >> 2] = $442;
                    HEAP32[$34 >> 2] = $447;
                    HEAP32[$35 >> 2] = $449;
                    switch ($408 | 0) {
                        case 1: {
                            $450 = HEAP32[$46 >> 2] | 0;
                            $451 = ((($450) + ($8 << 6) | 0) + ($416 << 2) | 0);
                            $452 = HEAP16[$451 >> 1] | 0;
                            $453 = ((((($450) + ($8 << 6) | 0) + ($416 << 2) | 0)) + 2 | 0);
                            $454 = HEAP16[$453 >> 1] | 0;
                            $455 = $413 << 2;
                            $456 = $452 << 16 >> 16;
                            $457 = (($455) + ($456)) | 0;
                            $458 = $414 << 2;
                            $459 = $454 << 16 >> 16;
                            $460 = (($458) + ($459)) | 0;
                            $461 = ($457 | 0) < (-120);
                            if ($461) {
                                $472 = -120;
                            } else {
                                $462 = HEAP32[$29 >> 2] | 0;
                                $463 = $462 << 2;
                                $464 = (($463) + 52) | 0;
                                $465 = ($457 | 0) > ($464 | 0);
                                $$$i293 = $465 ? $464 : $457;
                                $472 = $$$i293;
                            }
                            $466 = ($460 | 0) < (-120);
                            if ($466) {
                                $474 = -120;
                            } else {
                                $467 = HEAP32[$33 >> 2] | 0;
                                $468 = $467 << 2;
                                $469 = (($468) + 52) | 0;
                                $470 = ($460 | 0) > ($469 | 0);
                                $$80$i294 = $470 ? $469 : $460;
                                $474 = $$80$i294;
                            }
                            $471 = $472 >> 2;
                            $473 = $474 >> 2;
                            $475 = Math_imul($473, $424) | 0;
                            $476 = (($475) + ($471)) | 0;
                            $477 = $472 >> 3;
                            $478 = $474 >> 3;
                            $479 = Math_imul($426, $478) | 0;
                            $480 = (($479) + ($477)) | 0;
                            $481 = (($435) + ($476) | 0);
                            $482 = (($436) + ($480) | 0);
                            $483 = (($437) + ($480) | 0);
                            $484 = HEAP32[$47 >> 2] | 0;
                            $485 = HEAP32[$36 >> 2] | 0;
                            $486 = $472 & 65535;
                            $487 = $474 & 65535;
                            FUNCTION_TABLE_viiiiiiii[$484 & 3]($481, $424, $442, $485, $486, $487, 8, 8);
                            $488 = HEAP32[$48 >> 2] | 0;
                            $489 = HEAP32[$37 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$488 & 3]($482, $426, $447, $489, $486, $487, 4, 4);
                            $490 = HEAP32[$48 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$490 & 3]($483, $426, $449, $489, $486, $487, 4, 4);
                            $491 = HEAP8[$45 >> 0] | 0;
                            $492 = ($491 << 24 >> 24) == (0);
                            if (!($492)) {
                                __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $493, 8, 8);
                            }
                            break;
                        }
                        case 2: {
                            $494 = HEAP32[$46 >> 2] | 0;
                            $495 = ((($494) + ($8 << 6) | 0) + ($416 << 2) | 0);
                            $496 = HEAP16[$495 >> 1] | 0;
                            $497 = ((((($494) + ($8 << 6) | 0) + ($416 << 2) | 0)) + 2 | 0);
                            $498 = HEAP16[$497 >> 1] | 0;
                            $499 = $413 << 2;
                            $500 = $496 << 16 >> 16;
                            $501 = (($499) + ($500)) | 0;
                            $502 = $414 << 2;
                            $503 = $498 << 16 >> 16;
                            $504 = (($502) + ($503)) | 0;
                            $505 = ($501 | 0) < (-120);
                            if ($505) {
                                $516 = -120;
                            } else {
                                $506 = HEAP32[$29 >> 2] | 0;
                                $507 = $506 << 2;
                                $508 = (($507) + 52) | 0;
                                $509 = ($501 | 0) > ($508 | 0);
                                $$$i296 = $509 ? $508 : $501;
                                $516 = $$$i296;
                            }
                            $510 = ($504 | 0) < (-120);
                            if ($510) {
                                $518 = -120;
                            } else {
                                $511 = HEAP32[$33 >> 2] | 0;
                                $512 = $511 << 2;
                                $513 = (($512) + 52) | 0;
                                $514 = ($504 | 0) > ($513 | 0);
                                $$80$i297 = $514 ? $513 : $504;
                                $518 = $$80$i297;
                            }
                            $515 = $516 >> 2;
                            $517 = $518 >> 2;
                            $519 = Math_imul($517, $424) | 0;
                            $520 = (($519) + ($515)) | 0;
                            $521 = $516 >> 3;
                            $522 = $518 >> 3;
                            $523 = Math_imul($426, $522) | 0;
                            $524 = (($523) + ($521)) | 0;
                            $525 = (($435) + ($520) | 0);
                            $526 = (($436) + ($524) | 0);
                            $527 = (($437) + ($524) | 0);
                            $528 = HEAP32[$47 >> 2] | 0;
                            $529 = HEAP32[$36 >> 2] | 0;
                            $530 = $516 & 65535;
                            $531 = $518 & 65535;
                            FUNCTION_TABLE_viiiiiiii[$528 & 3]($525, $424, $442, $529, $530, $531, 8, 4);
                            $532 = HEAP32[$48 >> 2] | 0;
                            $533 = HEAP32[$37 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$532 & 3]($526, $426, $447, $533, $530, $531, 4, 2);
                            $534 = HEAP32[$48 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$534 & 3]($527, $426, $449, $533, $530, $531, 4, 2);
                            $535 = HEAP8[$45 >> 0] | 0;
                            $536 = ($535 << 24 >> 24) == (0);
                            if ($536) {
                                $544 = $442; $546 = $447; $548 = $449;
                            } else {
                                __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $493, 8, 4);
                                $$pre340 = HEAP32[$4 >> 2] | 0;
                                $$pre341 = HEAP32[$34 >> 2] | 0;
                                $$pre342 = HEAP32[$35 >> 2] | 0;
                                $544 = $$pre340; $546 = $$pre341; $548 = $$pre342;
                            }
                            $537 = HEAP32[$46 >> 2] | 0;
                            $538 = $416 | 4;
                            $539 = ((($537) + ($8 << 6) | 0) + ($538 << 2) | 0);
                            $540 = HEAP16[$539 >> 1] | 0;
                            $541 = ((((($537) + ($8 << 6) | 0) + ($538 << 2) | 0)) + 2 | 0);
                            $542 = HEAP16[$541 >> 1] | 0;
                            $543 = (($544) + ($49) | 0);
                            HEAP32[$4 >> 2] = $543;
                            $545 = (($546) + ($50) | 0);
                            HEAP32[$34 >> 2] = $545;
                            $547 = (($548) + ($50) | 0);
                            HEAP32[$35 >> 2] = $547;
                            $549 = $540 << 16 >> 16;
                            $550 = (($499) + ($549)) | 0;
                            $551 = $502 | 16;
                            $552 = $542 << 16 >> 16;
                            $553 = (($551) + ($552)) | 0;
                            $554 = ($550 | 0) < (-120);
                            if ($554) {
                                $565 = -120;
                            } else {
                                $555 = HEAP32[$29 >> 2] | 0;
                                $556 = $555 << 2;
                                $557 = (($556) + 52) | 0;
                                $558 = ($550 | 0) > ($557 | 0);
                                $$$i299 = $558 ? $557 : $550;
                                $565 = $$$i299;
                            }
                            $559 = ($553 | 0) < (-120);
                            if ($559) {
                                $567 = -120;
                            } else {
                                $560 = HEAP32[$33 >> 2] | 0;
                                $561 = $560 << 2;
                                $562 = (($561) + 52) | 0;
                                $563 = ($553 | 0) > ($562 | 0);
                                $$80$i300 = $563 ? $562 : $553;
                                $567 = $$80$i300;
                            }
                            $564 = $565 >> 2;
                            $566 = $567 >> 2;
                            $568 = HEAP32[$40 >> 2] | 0;
                            $569 = Math_imul($566, $568) | 0;
                            $570 = (($569) + ($564)) | 0;
                            $571 = $565 >> 3;
                            $572 = $567 >> 3;
                            $573 = HEAP32[$41 >> 2] | 0;
                            $574 = Math_imul($573, $572) | 0;
                            $575 = (($574) + ($571)) | 0;
                            $576 = HEAP32[$42 >> 2] | 0;
                            $577 = (($576) + ($570) | 0);
                            $578 = HEAP32[$43 >> 2] | 0;
                            $579 = (($578) + ($575) | 0);
                            $580 = HEAP32[$44 >> 2] | 0;
                            $581 = (($580) + ($575) | 0);
                            $582 = HEAP32[$47 >> 2] | 0;
                            $583 = HEAP32[$36 >> 2] | 0;
                            $584 = $565 & 65535;
                            $585 = $567 & 65535;
                            FUNCTION_TABLE_viiiiiiii[$582 & 3]($577, $568, $543, $583, $584, $585, 8, 4);
                            $586 = HEAP32[$48 >> 2] | 0;
                            $587 = HEAP32[$37 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$586 & 3]($579, $573, $545, $587, $584, $585, 4, 2);
                            $588 = HEAP32[$48 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$588 & 3]($581, $573, $547, $587, $584, $585, 4, 2);
                            $589 = HEAP8[$45 >> 0] | 0;
                            $590 = ($589 << 24 >> 24) == (0);
                            if (!($590)) {
                                __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $493, 8, 4);
                            }
                            break;
                        }
                        case 4: {
                            $591 = HEAP32[$46 >> 2] | 0;
                            $592 = ((($591) + ($8 << 6) | 0) + ($416 << 2) | 0);
                            $593 = HEAP16[$592 >> 1] | 0;
                            $594 = ((((($591) + ($8 << 6) | 0) + ($416 << 2) | 0)) + 2 | 0);
                            $595 = HEAP16[$594 >> 1] | 0;
                            $596 = $413 << 2;
                            $597 = $593 << 16 >> 16;
                            $598 = (($596) + ($597)) | 0;
                            $599 = $414 << 2;
                            $600 = $595 << 16 >> 16;
                            $601 = (($599) + ($600)) | 0;
                            $602 = ($598 | 0) < (-120);
                            if ($602) {
                                $613 = -120;
                            } else {
                                $603 = HEAP32[$29 >> 2] | 0;
                                $604 = $603 << 2;
                                $605 = (($604) + 52) | 0;
                                $606 = ($598 | 0) > ($605 | 0);
                                $$$i302 = $606 ? $605 : $598;
                                $613 = $$$i302;
                            }
                            $607 = ($601 | 0) < (-120);
                            if ($607) {
                                $615 = -120;
                            } else {
                                $608 = HEAP32[$33 >> 2] | 0;
                                $609 = $608 << 2;
                                $610 = (($609) + 52) | 0;
                                $611 = ($601 | 0) > ($610 | 0);
                                $$80$i303 = $611 ? $610 : $601;
                                $615 = $$80$i303;
                            }
                            $612 = $613 >> 2;
                            $614 = $615 >> 2;
                            $616 = Math_imul($614, $424) | 0;
                            $617 = (($616) + ($612)) | 0;
                            $618 = $613 >> 3;
                            $619 = $615 >> 3;
                            $620 = Math_imul($426, $619) | 0;
                            $621 = (($620) + ($618)) | 0;
                            $622 = (($435) + ($617) | 0);
                            $623 = (($436) + ($621) | 0);
                            $624 = (($437) + ($621) | 0);
                            $625 = HEAP32[$47 >> 2] | 0;
                            $626 = HEAP32[$36 >> 2] | 0;
                            $627 = $613 & 65535;
                            $628 = $615 & 65535;
                            FUNCTION_TABLE_viiiiiiii[$625 & 3]($622, $424, $442, $626, $627, $628, 4, 8);
                            $629 = HEAP32[$48 >> 2] | 0;
                            $630 = HEAP32[$37 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$629 & 3]($623, $426, $447, $630, $627, $628, 2, 4);
                            $631 = HEAP32[$48 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$631 & 3]($624, $426, $449, $630, $627, $628, 2, 4);
                            $632 = HEAP8[$45 >> 0] | 0;
                            $633 = ($632 << 24 >> 24) == (0);
                            if ($633) {
                                $641 = $442; $643 = $447; $645 = $449;
                            } else {
                                __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $493, 4, 8);
                                $$pre = HEAP32[$4 >> 2] | 0;
                                $$pre338 = HEAP32[$34 >> 2] | 0;
                                $$pre339 = HEAP32[$35 >> 2] | 0;
                                $641 = $$pre; $643 = $$pre338; $645 = $$pre339;
                            }
                            $634 = HEAP32[$46 >> 2] | 0;
                            $635 = $416 | 1;
                            $636 = ((($634) + ($8 << 6) | 0) + ($635 << 2) | 0);
                            $637 = HEAP16[$636 >> 1] | 0;
                            $638 = ((((($634) + ($8 << 6) | 0) + ($635 << 2) | 0)) + 2 | 0);
                            $639 = HEAP16[$638 >> 1] | 0;
                            $640 = ((($641)) + 4 | 0);
                            HEAP32[$4 >> 2] = $640;
                            $642 = ((($643)) + 2 | 0);
                            HEAP32[$34 >> 2] = $642;
                            $644 = ((($645)) + 2 | 0);
                            HEAP32[$35 >> 2] = $644;
                            $646 = $596 | 16;
                            $647 = $637 << 16 >> 16;
                            $648 = (($646) + ($647)) | 0;
                            $649 = $639 << 16 >> 16;
                            $650 = (($599) + ($649)) | 0;
                            $651 = ($648 | 0) < (-120);
                            if ($651) {
                                $662 = -120;
                            } else {
                                $652 = HEAP32[$29 >> 2] | 0;
                                $653 = $652 << 2;
                                $654 = (($653) + 52) | 0;
                                $655 = ($648 | 0) > ($654 | 0);
                                $$$i305 = $655 ? $654 : $648;
                                $662 = $$$i305;
                            }
                            $656 = ($650 | 0) < (-120);
                            if ($656) {
                                $664 = -120;
                            } else {
                                $657 = HEAP32[$33 >> 2] | 0;
                                $658 = $657 << 2;
                                $659 = (($658) + 52) | 0;
                                $660 = ($650 | 0) > ($659 | 0);
                                $$80$i306 = $660 ? $659 : $650;
                                $664 = $$80$i306;
                            }
                            $661 = $662 >> 2;
                            $663 = $664 >> 2;
                            $665 = HEAP32[$40 >> 2] | 0;
                            $666 = Math_imul($663, $665) | 0;
                            $667 = (($666) + ($661)) | 0;
                            $668 = $662 >> 3;
                            $669 = $664 >> 3;
                            $670 = HEAP32[$41 >> 2] | 0;
                            $671 = Math_imul($670, $669) | 0;
                            $672 = (($671) + ($668)) | 0;
                            $673 = HEAP32[$42 >> 2] | 0;
                            $674 = (($673) + ($667) | 0);
                            $675 = HEAP32[$43 >> 2] | 0;
                            $676 = (($675) + ($672) | 0);
                            $677 = HEAP32[$44 >> 2] | 0;
                            $678 = (($677) + ($672) | 0);
                            $679 = HEAP32[$47 >> 2] | 0;
                            $680 = HEAP32[$36 >> 2] | 0;
                            $681 = $662 & 65535;
                            $682 = $664 & 65535;
                            FUNCTION_TABLE_viiiiiiii[$679 & 3]($674, $665, $640, $680, $681, $682, 4, 8);
                            $683 = HEAP32[$48 >> 2] | 0;
                            $684 = HEAP32[$37 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$683 & 3]($676, $670, $642, $684, $681, $682, 2, 4);
                            $685 = HEAP32[$48 >> 2] | 0;
                            FUNCTION_TABLE_viiiiiiii[$685 & 3]($678, $670, $644, $684, $681, $682, 2, 4);
                            $686 = HEAP8[$45 >> 0] | 0;
                            $687 = ($686 << 24 >> 24) == (0);
                            if (!($687)) {
                                __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $493, 4, 8);
                            }
                            break;
                        }
                        case 8: {
                            $$0280335 = 0;
                            while (1) {
                                $688 = $$0280335 >>> 1;
                                $689 = $688 << 2;
                                $690 = $$0280335 & 1;
                                $691 = $689 | $690;
                                $692 = $690 << 2;
                                $693 = $690 << 1;
                                $694 = $689 >> 1;
                                $695 = Math_imul($694, $25) | 0;
                                $696 = (($695) + ($693)) | 0;
                                $697 = (($442) + ($692) | 0);
                                $698 = Math_imul($689, $23) | 0;
                                $699 = (($697) + ($698) | 0);
                                HEAP32[$4 >> 2] = $699;
                                $700 = (($447) + ($696) | 0);
                                HEAP32[$34 >> 2] = $700;
                                $701 = (($449) + ($696) | 0);
                                HEAP32[$35 >> 2] = $701;
                                $702 = HEAP32[$46 >> 2] | 0;
                                $703 = (($691) + ($416)) | 0;
                                $704 = ((($702) + ($8 << 6) | 0) + ($703 << 2) | 0);
                                $705 = HEAP16[$704 >> 1] | 0;
                                $706 = ((((($702) + ($8 << 6) | 0) + ($703 << 2) | 0)) + 2 | 0);
                                $707 = HEAP16[$706 >> 1] | 0;
                                $708 = $692 | $413;
                                $709 = (($689) + ($414)) | 0;
                                $710 = $708 << 2;
                                $711 = $705 << 16 >> 16;
                                $712 = (($710) + ($711)) | 0;
                                $713 = $709 << 2;
                                $714 = $707 << 16 >> 16;
                                $715 = (($713) + ($714)) | 0;
                                $716 = ($712 | 0) < (-120);
                                if ($716) {
                                    $727 = -120;
                                } else {
                                    $717 = HEAP32[$29 >> 2] | 0;
                                    $718 = $717 << 2;
                                    $719 = (($718) + 52) | 0;
                                    $720 = ($712 | 0) > ($719 | 0);
                                    $$$i308 = $720 ? $719 : $712;
                                    $727 = $$$i308;
                                }
                                $721 = ($715 | 0) < (-120);
                                if ($721) {
                                    $729 = -120;
                                } else {
                                    $722 = HEAP32[$33 >> 2] | 0;
                                    $723 = $722 << 2;
                                    $724 = (($723) + 52) | 0;
                                    $725 = ($715 | 0) > ($724 | 0);
                                    $$80$i309 = $725 ? $724 : $715;
                                    $729 = $$80$i309;
                                }
                                $726 = $727 >> 2;
                                $728 = $729 >> 2;
                                $730 = HEAP32[$40 >> 2] | 0;
                                $731 = Math_imul($728, $730) | 0;
                                $732 = (($731) + ($726)) | 0;
                                $733 = $727 >> 3;
                                $734 = $729 >> 3;
                                $735 = HEAP32[$41 >> 2] | 0;
                                $736 = Math_imul($735, $734) | 0;
                                $737 = (($736) + ($733)) | 0;
                                $738 = HEAP32[$42 >> 2] | 0;
                                $739 = (($738) + ($732) | 0);
                                $740 = HEAP32[$43 >> 2] | 0;
                                $741 = (($740) + ($737) | 0);
                                $742 = HEAP32[$44 >> 2] | 0;
                                $743 = (($742) + ($737) | 0);
                                $744 = HEAP32[$47 >> 2] | 0;
                                $745 = HEAP32[$36 >> 2] | 0;
                                $746 = $727 & 65535;
                                $747 = $729 & 65535;
                                FUNCTION_TABLE_viiiiiiii[$744 & 3]($739, $730, $699, $745, $746, $747, 4, 4);
                                $748 = HEAP32[$48 >> 2] | 0;
                                $749 = HEAP32[$37 >> 2] | 0;
                                FUNCTION_TABLE_viiiiiiii[$748 & 3]($741, $735, $700, $749, $746, $747, 2, 2);
                                $750 = HEAP32[$48 >> 2] | 0;
                                FUNCTION_TABLE_viiiiiiii[$750 & 3]($743, $735, $701, $749, $746, $747, 2, 2);
                                $751 = HEAP8[$45 >> 0] | 0;
                                $752 = ($751 << 24 >> 24) == (0);
                                if (!($752)) {
                                    __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($6, $4, $493, 4, 4);
                                }
                                $753 = (($$0280335) + 1) | 0;
                                $exitcond = ($753 | 0) == (4);
                                if ($exitcond) {
                                    break;
                                } else {
                                    $$0280335 = $753;
                                }
                            }
                            break;
                        }
                        default: {
                        }
                    }
                    $754 = (($$0336) + 1) | 0;
                    $exitcond337 = ($754 | 0) == (4);
                    if ($exitcond337) {
                        break;
                    } else {
                        $$0336 = $754;
                    }
                }
                STACKTOP = sp; return;
                break;
            }
            default: {
                STACKTOP = sp; return;
            }
        }
    }
    function __ZN7WelsDec29WelsMbInterSampleConstructionEPNS_21TagWelsDecoderContextEPNS_10TagDqLayerEPhS4_S4_ii($0, $1, $2, $3, $4, $5, $6) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        var $$194 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre100 = 0, $$pre102 = 0, $$pre104 = 0, $$pre107 = 0, $$pre110 = 0, $$pre113 = 0, $$pre116 = 0, $$pre119 = 0, $$pre122 = 0, $$pre99 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
        var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
        var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
        var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
        var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
        var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
        var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
        var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
        var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
        var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
        var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
        var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
        var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
        var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
        var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $36 = 0, $37 = 0;
        var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
        var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
        var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
        var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $7 = ((($1)) + 4040 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($1)) + 3988 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = (((($10) + (($8 * 768) | 0) | 0)) + 512 | 0);
        $12 = HEAP16[$11 >> 1] | 0;
        $13 = $12 << 16 >> 16;
        $14 = (((($10) + (($8 * 768) | 0) | 0)) + 544 | 0);
        $15 = HEAP16[$14 >> 1] | 0;
        $16 = $15 << 16 >> 16;
        $17 = (((($10) + (($8 * 768) | 0) | 0)) + 576 | 0);
        $18 = HEAP16[$17 >> 1] | 0;
        $19 = $18 << 16 >> 16;
        $20 = (((($10) + (($8 * 768) | 0) | 0)) + 608 | 0);
        $21 = HEAP16[$20 >> 1] | 0;
        $22 = $21 << 16 >> 16;
        $23 = (($13) - ($16)) | 0;
        $24 = (($16) + ($13)) | 0;
        $25 = (($19) - ($22)) | 0;
        $26 = (($22) + ($19)) | 0;
        $27 = (($26) + ($24)) | 0;
        $28 = $27 >>> 1;
        $29 = $28 & 65535;
        HEAP16[$11 >> 1] = $29;
        $30 = (($25) + ($23)) | 0;
        $31 = $30 >>> 1;
        $32 = $31 & 65535;
        HEAP16[$14 >> 1] = $32;
        $33 = (($24) - ($26)) | 0;
        $34 = $33 >>> 1;
        $35 = $34 & 65535;
        HEAP16[$17 >> 1] = $35;
        $36 = (($23) - ($25)) | 0;
        $37 = $36 >>> 1;
        $38 = $37 & 65535;
        HEAP16[$20 >> 1] = $38;
        $39 = HEAP32[$9 >> 2] | 0;
        $40 = (((($39) + (($8 * 768) | 0) | 0)) + 640 | 0);
        $41 = HEAP16[$40 >> 1] | 0;
        $42 = $41 << 16 >> 16;
        $43 = (((($39) + (($8 * 768) | 0) | 0)) + 672 | 0);
        $44 = HEAP16[$43 >> 1] | 0;
        $45 = $44 << 16 >> 16;
        $46 = (((($39) + (($8 * 768) | 0) | 0)) + 704 | 0);
        $47 = HEAP16[$46 >> 1] | 0;
        $48 = $47 << 16 >> 16;
        $49 = (((($39) + (($8 * 768) | 0) | 0)) + 736 | 0);
        $50 = HEAP16[$49 >> 1] | 0;
        $51 = $50 << 16 >> 16;
        $52 = (($42) - ($45)) | 0;
        $53 = (($45) + ($42)) | 0;
        $54 = (($48) - ($51)) | 0;
        $55 = (($51) + ($48)) | 0;
        $56 = (($55) + ($53)) | 0;
        $57 = $56 >>> 1;
        $58 = $57 & 65535;
        HEAP16[$40 >> 1] = $58;
        $59 = (($54) + ($52)) | 0;
        $60 = $59 >>> 1;
        $61 = $60 & 65535;
        HEAP16[$43 >> 1] = $61;
        $62 = (($53) - ($55)) | 0;
        $63 = $62 >>> 1;
        $64 = $63 & 65535;
        HEAP16[$46 >> 1] = $64;
        $65 = (($52) - ($54)) | 0;
        $66 = $65 >>> 1;
        $67 = $66 & 65535;
        HEAP16[$49 >> 1] = $67;
        $68 = ((($1)) + 3944 | 0);
        $69 = HEAP32[$68 >> 2] | 0;
        $70 = (($69) + ($8) | 0);
        $71 = HEAP8[$70 >> 0] | 0;
        $72 = ($71 << 24 >> 24) == (0);
        $73 = ((($1)) + 3964 | 0);
        if ($72) {
            $81 = ((($0)) + 316968 | 0);
            $$194 = 0;
            while (1) {
                $117 = (10951 + ($$194) | 0);
                $118 = HEAP8[$117 >> 0] | 0;
                $119 = $118 & 255;
                $120 = HEAP32[$73 >> 2] | 0;
                $121 = ((($120) + (($8 * 24) | 0) | 0) + ($119) | 0);
                $122 = HEAP8[$121 >> 0] | 0;
                $123 = ($122 << 24 >> 24) == (0);
                if (!($123)) {
                    $124 = $119 & 252;
                    $125 = Math_imul($124, $5) | 0;
                    $126 = ($118 << 2) & 255;
                    $127 = $126 & 12;
                    $128 = $127 & 255;
                    $129 = (($125) + ($128)) | 0;
                    $130 = HEAP32[$81 >> 2] | 0;
                    $131 = (($2) + ($129) | 0);
                    $132 = HEAP32[$9 >> 2] | 0;
                    $133 = $$194 << 4;
                    $134 = ((($132) + (($8 * 768) | 0) | 0) + ($133 << 1) | 0);
                    FUNCTION_TABLE_viii[$130 & 7]($131, $5, $134);
                }
                $135 = (($$194) + 1) | 0;
                $exitcond = ($135 | 0) == (16);
                if ($exitcond) {
                    $$pre$phiZ2D = $81;
                    break;
                } else {
                    $$194 = $135;
                }
            }
        } else {
            $74 = ((($0)) + 317052 | 0);
            $75 = HEAP8[10951] | 0;
            $76 = $75 & 255;
            $77 = HEAP32[$73 >> 2] | 0;
            $78 = ((($77) + (($8 * 24) | 0) | 0) + ($76) | 0);
            $79 = HEAP8[$78 >> 0] | 0;
            $80 = ($79 << 24 >> 24) == (0);
            if ($80) {
                $89 = (($76) + 1) | 0;
                $90 = ((($77) + (($8 * 24) | 0) | 0) + ($89) | 0);
                $91 = HEAP8[$90 >> 0] | 0;
                $92 = ($91 << 24 >> 24) == (0);
                if ($92) {
                    $93 = (($76) + 4) | 0;
                    $94 = ((($77) + (($8 * 24) | 0) | 0) + ($93) | 0);
                    $95 = HEAP8[$94 >> 0] | 0;
                    $96 = ($95 << 24 >> 24) == (0);
                    if ($96) {
                        $97 = (($76) + 5) | 0;
                        $98 = ((($77) + (($8 * 24) | 0) | 0) + ($97) | 0);
                        $99 = HEAP8[$98 >> 0] | 0;
                        $100 = ($99 << 24 >> 24) == (0);
                        if ($100) {
                            $114 = $77;
                        } else {
                            label = 8;
                        }
                    } else {
                        label = 8;
                    }
                } else {
                    label = 8;
                }
            } else {
                label = 8;
            }
            if ((label | 0) == 8) {
                $101 = $76 & 252;
                $102 = Math_imul($101, $5) | 0;
                $103 = ($75 << 2) & 255;
                $104 = $103 & 12;
                $105 = $104 & 255;
                $106 = (($102) + ($105)) | 0;
                $107 = HEAP32[$74 >> 2] | 0;
                $108 = (($2) + ($106) | 0);
                $109 = HEAP32[$9 >> 2] | 0;
                $110 = (($109) + (($8 * 768) | 0) | 0);
                FUNCTION_TABLE_viii[$107 & 7]($108, $5, $110);
                $$pre = HEAP32[$73 >> 2] | 0;
                $114 = $$pre;
            }
            $111 = HEAP8[(10955) >> 0] | 0;
            $112 = $111 & 255;
            $113 = ((($114) + (($8 * 24) | 0) | 0) + ($112) | 0);
            $115 = HEAP8[$113 >> 0] | 0;
            $116 = ($115 << 24 >> 24) == (0);
            if ($116) {
                $281 = (($112) + 1) | 0;
                $282 = ((($114) + (($8 * 24) | 0) | 0) + ($281) | 0);
                $283 = HEAP8[$282 >> 0] | 0;
                $284 = ($283 << 24 >> 24) == (0);
                if ($284) {
                    $285 = (($112) + 4) | 0;
                    $286 = ((($114) + (($8 * 24) | 0) | 0) + ($285) | 0);
                    $287 = HEAP8[$286 >> 0] | 0;
                    $288 = ($287 << 24 >> 24) == (0);
                    if ($288) {
                        $289 = (($112) + 5) | 0;
                        $290 = ((($114) + (($8 * 24) | 0) | 0) + ($289) | 0);
                        $291 = HEAP8[$290 >> 0] | 0;
                        $292 = ($291 << 24 >> 24) == (0);
                        if ($292) {
                            $306 = $114;
                        } else {
                            label = 40;
                        }
                    } else {
                        label = 40;
                    }
                } else {
                    label = 40;
                }
            } else {
                label = 40;
            }
            if ((label | 0) == 40) {
                $293 = $112 & 252;
                $294 = Math_imul($293, $5) | 0;
                $295 = ($111 << 2) & 255;
                $296 = $295 & 12;
                $297 = $296 & 255;
                $298 = (($294) + ($297)) | 0;
                $299 = HEAP32[$74 >> 2] | 0;
                $300 = (($2) + ($298) | 0);
                $301 = HEAP32[$9 >> 2] | 0;
                $302 = (((($301) + (($8 * 768) | 0) | 0)) + 128 | 0);
                FUNCTION_TABLE_viii[$299 & 7]($300, $5, $302);
                $$pre99 = HEAP32[$73 >> 2] | 0;
                $306 = $$pre99;
            }
            $303 = HEAP8[(10959) >> 0] | 0;
            $304 = $303 & 255;
            $305 = ((($306) + (($8 * 24) | 0) | 0) + ($304) | 0);
            $307 = HEAP8[$305 >> 0] | 0;
            $308 = ($307 << 24 >> 24) == (0);
            if ($308) {
                $309 = (($304) + 1) | 0;
                $310 = ((($306) + (($8 * 24) | 0) | 0) + ($309) | 0);
                $311 = HEAP8[$310 >> 0] | 0;
                $312 = ($311 << 24 >> 24) == (0);
                if ($312) {
                    $313 = (($304) + 4) | 0;
                    $314 = ((($306) + (($8 * 24) | 0) | 0) + ($313) | 0);
                    $315 = HEAP8[$314 >> 0] | 0;
                    $316 = ($315 << 24 >> 24) == (0);
                    if ($316) {
                        $317 = (($304) + 5) | 0;
                        $318 = ((($306) + (($8 * 24) | 0) | 0) + ($317) | 0);
                        $319 = HEAP8[$318 >> 0] | 0;
                        $320 = ($319 << 24 >> 24) == (0);
                        if ($320) {
                            $334 = $306;
                        } else {
                            label = 45;
                        }
                    } else {
                        label = 45;
                    }
                } else {
                    label = 45;
                }
            } else {
                label = 45;
            }
            if ((label | 0) == 45) {
                $321 = $304 & 252;
                $322 = Math_imul($321, $5) | 0;
                $323 = ($303 << 2) & 255;
                $324 = $323 & 12;
                $325 = $324 & 255;
                $326 = (($322) + ($325)) | 0;
                $327 = HEAP32[$74 >> 2] | 0;
                $328 = (($2) + ($326) | 0);
                $329 = HEAP32[$9 >> 2] | 0;
                $330 = (((($329) + (($8 * 768) | 0) | 0)) + 256 | 0);
                FUNCTION_TABLE_viii[$327 & 7]($328, $5, $330);
                $$pre100 = HEAP32[$73 >> 2] | 0;
                $334 = $$pre100;
            }
            $331 = HEAP8[(10963) >> 0] | 0;
            $332 = $331 & 255;
            $333 = ((($334) + (($8 * 24) | 0) | 0) + ($332) | 0);
            $335 = HEAP8[$333 >> 0] | 0;
            $336 = ($335 << 24 >> 24) == (0);
            if ($336) {
                $337 = (($332) + 1) | 0;
                $338 = ((($334) + (($8 * 24) | 0) | 0) + ($337) | 0);
                $339 = HEAP8[$338 >> 0] | 0;
                $340 = ($339 << 24 >> 24) == (0);
                if ($340) {
                    $341 = (($332) + 4) | 0;
                    $342 = ((($334) + (($8 * 24) | 0) | 0) + ($341) | 0);
                    $343 = HEAP8[$342 >> 0] | 0;
                    $344 = ($343 << 24 >> 24) == (0);
                    if ($344) {
                        $345 = (($332) + 5) | 0;
                        $346 = ((($334) + (($8 * 24) | 0) | 0) + ($345) | 0);
                        $347 = HEAP8[$346 >> 0] | 0;
                        $348 = ($347 << 24 >> 24) == (0);
                        if (!($348)) {
                            label = 50;
                        }
                    } else {
                        label = 50;
                    }
                } else {
                    label = 50;
                }
            } else {
                label = 50;
            }
            if ((label | 0) == 50) {
                $349 = $332 & 252;
                $350 = Math_imul($349, $5) | 0;
                $351 = ($331 << 2) & 255;
                $352 = $351 & 12;
                $353 = $352 & 255;
                $354 = (($350) + ($353)) | 0;
                $355 = HEAP32[$74 >> 2] | 0;
                $356 = (($2) + ($354) | 0);
                $357 = HEAP32[$9 >> 2] | 0;
                $358 = (((($357) + (($8 * 768) | 0) | 0)) + 384 | 0);
                FUNCTION_TABLE_viii[$355 & 7]($356, $5, $358);
            }
            $$pre122 = ((($0)) + 316968 | 0);
            $$pre$phiZ2D = $$pre122;
        }
        $82 = HEAP8[(10967) >> 0] | 0;
        $83 = $82 & 255;
        $84 = HEAP32[$73 >> 2] | 0;
        $85 = ((($84) + (($8 * 24) | 0) | 0) + ($83) | 0);
        $86 = HEAP8[$85 >> 0] | 0;
        $87 = ($86 << 24 >> 24) == (0);
        $88 = HEAP32[$9 >> 2] | 0;
        if ($87) {
            $136 = (((($88) + (($8 * 768) | 0) | 0)) + 512 | 0);
            $137 = HEAP16[$136 >> 1] | 0;
            $138 = ($137 << 16 >> 16) == (0);
            if ($138) {
                $151 = $84;
            } else {
                label = 14;
            }
        } else {
            label = 14;
        }
        if ((label | 0) == 14) {
            $139 = (($83) + -16) | 0;
            $140 = $139 & -4;
            $141 = Math_imul($140, $6) | 0;
            $142 = (($139 | 0) % 4) & -1;
            $143 = $142 << 2;
            $144 = (($141) + ($143)) | 0;
            $145 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $146 = (($3) + ($144) | 0);
            $147 = (((($88) + (($8 * 768) | 0) | 0)) + 512 | 0);
            FUNCTION_TABLE_viii[$145 & 7]($146, $6, $147);
            $$pre102 = HEAP32[$73 >> 2] | 0;
            $151 = $$pre102;
        }
        $148 = HEAP8[(10971) >> 0] | 0;
        $149 = $148 & 255;
        $150 = ((($151) + (($8 * 24) | 0) | 0) + ($149) | 0);
        $152 = HEAP8[$150 >> 0] | 0;
        $153 = ($152 << 24 >> 24) == (0);
        $154 = HEAP32[$9 >> 2] | 0;
        if ($153) {
            $155 = (((($154) + (($8 * 768) | 0) | 0)) + 640 | 0);
            $156 = HEAP16[$155 >> 1] | 0;
            $157 = ($156 << 16 >> 16) == (0);
            if ($157) {
                $170 = $151;
            } else {
                label = 17;
            }
        } else {
            label = 17;
        }
        if ((label | 0) == 17) {
            $158 = (($149) + -18) | 0;
            $159 = $158 & -4;
            $160 = Math_imul($159, $6) | 0;
            $161 = (($158 | 0) % 4) & -1;
            $162 = $161 << 2;
            $163 = (($160) + ($162)) | 0;
            $164 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $165 = (($4) + ($163) | 0);
            $166 = (((($154) + (($8 * 768) | 0) | 0)) + 640 | 0);
            FUNCTION_TABLE_viii[$164 & 7]($165, $6, $166);
            $$pre104 = HEAP32[$73 >> 2] | 0;
            $170 = $$pre104;
        }
        $167 = HEAP8[(10968) >> 0] | 0;
        $168 = $167 & 255;
        $169 = ((($170) + (($8 * 24) | 0) | 0) + ($168) | 0);
        $171 = HEAP8[$169 >> 0] | 0;
        $172 = ($171 << 24 >> 24) == (0);
        $173 = HEAP32[$9 >> 2] | 0;
        if ($172) {
            $174 = (((($173) + (($8 * 768) | 0) | 0)) + 544 | 0);
            $175 = HEAP16[$174 >> 1] | 0;
            $176 = ($175 << 16 >> 16) == (0);
            if ($176) {
                $189 = $170;
            } else {
                label = 20;
            }
        } else {
            label = 20;
        }
        if ((label | 0) == 20) {
            $177 = (($168) + -16) | 0;
            $178 = $177 & -4;
            $179 = Math_imul($178, $6) | 0;
            $180 = (($177 | 0) % 4) & -1;
            $181 = $180 << 2;
            $182 = (($179) + ($181)) | 0;
            $183 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $184 = (($3) + ($182) | 0);
            $185 = (((($173) + (($8 * 768) | 0) | 0)) + 544 | 0);
            FUNCTION_TABLE_viii[$183 & 7]($184, $6, $185);
            $$pre107 = HEAP32[$73 >> 2] | 0;
            $189 = $$pre107;
        }
        $186 = HEAP8[(10972) >> 0] | 0;
        $187 = $186 & 255;
        $188 = ((($189) + (($8 * 24) | 0) | 0) + ($187) | 0);
        $190 = HEAP8[$188 >> 0] | 0;
        $191 = ($190 << 24 >> 24) == (0);
        $192 = HEAP32[$9 >> 2] | 0;
        if ($191) {
            $193 = (((($192) + (($8 * 768) | 0) | 0)) + 672 | 0);
            $194 = HEAP16[$193 >> 1] | 0;
            $195 = ($194 << 16 >> 16) == (0);
            if ($195) {
                $208 = $189;
            } else {
                label = 23;
            }
        } else {
            label = 23;
        }
        if ((label | 0) == 23) {
            $196 = (($187) + -18) | 0;
            $197 = $196 & -4;
            $198 = Math_imul($197, $6) | 0;
            $199 = (($196 | 0) % 4) & -1;
            $200 = $199 << 2;
            $201 = (($198) + ($200)) | 0;
            $202 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $203 = (($4) + ($201) | 0);
            $204 = (((($192) + (($8 * 768) | 0) | 0)) + 672 | 0);
            FUNCTION_TABLE_viii[$202 & 7]($203, $6, $204);
            $$pre110 = HEAP32[$73 >> 2] | 0;
            $208 = $$pre110;
        }
        $205 = HEAP8[(10969) >> 0] | 0;
        $206 = $205 & 255;
        $207 = ((($208) + (($8 * 24) | 0) | 0) + ($206) | 0);
        $209 = HEAP8[$207 >> 0] | 0;
        $210 = ($209 << 24 >> 24) == (0);
        $211 = HEAP32[$9 >> 2] | 0;
        if ($210) {
            $212 = (((($211) + (($8 * 768) | 0) | 0)) + 576 | 0);
            $213 = HEAP16[$212 >> 1] | 0;
            $214 = ($213 << 16 >> 16) == (0);
            if ($214) {
                $227 = $208;
            } else {
                label = 26;
            }
        } else {
            label = 26;
        }
        if ((label | 0) == 26) {
            $215 = (($206) + -16) | 0;
            $216 = $215 & -4;
            $217 = Math_imul($216, $6) | 0;
            $218 = (($215 | 0) % 4) & -1;
            $219 = $218 << 2;
            $220 = (($217) + ($219)) | 0;
            $221 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $222 = (($3) + ($220) | 0);
            $223 = (((($211) + (($8 * 768) | 0) | 0)) + 576 | 0);
            FUNCTION_TABLE_viii[$221 & 7]($222, $6, $223);
            $$pre113 = HEAP32[$73 >> 2] | 0;
            $227 = $$pre113;
        }
        $224 = HEAP8[(10973) >> 0] | 0;
        $225 = $224 & 255;
        $226 = ((($227) + (($8 * 24) | 0) | 0) + ($225) | 0);
        $228 = HEAP8[$226 >> 0] | 0;
        $229 = ($228 << 24 >> 24) == (0);
        $230 = HEAP32[$9 >> 2] | 0;
        if ($229) {
            $231 = (((($230) + (($8 * 768) | 0) | 0)) + 704 | 0);
            $232 = HEAP16[$231 >> 1] | 0;
            $233 = ($232 << 16 >> 16) == (0);
            if ($233) {
                $246 = $227;
            } else {
                label = 29;
            }
        } else {
            label = 29;
        }
        if ((label | 0) == 29) {
            $234 = (($225) + -18) | 0;
            $235 = $234 & -4;
            $236 = Math_imul($235, $6) | 0;
            $237 = (($234 | 0) % 4) & -1;
            $238 = $237 << 2;
            $239 = (($236) + ($238)) | 0;
            $240 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $241 = (($4) + ($239) | 0);
            $242 = (((($230) + (($8 * 768) | 0) | 0)) + 704 | 0);
            FUNCTION_TABLE_viii[$240 & 7]($241, $6, $242);
            $$pre116 = HEAP32[$73 >> 2] | 0;
            $246 = $$pre116;
        }
        $243 = HEAP8[(10970) >> 0] | 0;
        $244 = $243 & 255;
        $245 = ((($246) + (($8 * 24) | 0) | 0) + ($244) | 0);
        $247 = HEAP8[$245 >> 0] | 0;
        $248 = ($247 << 24 >> 24) == (0);
        $249 = HEAP32[$9 >> 2] | 0;
        if ($248) {
            $250 = (((($249) + (($8 * 768) | 0) | 0)) + 608 | 0);
            $251 = HEAP16[$250 >> 1] | 0;
            $252 = ($251 << 16 >> 16) == (0);
            if ($252) {
                $265 = $246;
            } else {
                label = 32;
            }
        } else {
            label = 32;
        }
        if ((label | 0) == 32) {
            $253 = (($244) + -16) | 0;
            $254 = $253 & -4;
            $255 = Math_imul($254, $6) | 0;
            $256 = (($253 | 0) % 4) & -1;
            $257 = $256 << 2;
            $258 = (($255) + ($257)) | 0;
            $259 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $260 = (($3) + ($258) | 0);
            $261 = (((($249) + (($8 * 768) | 0) | 0)) + 608 | 0);
            FUNCTION_TABLE_viii[$259 & 7]($260, $6, $261);
            $$pre119 = HEAP32[$73 >> 2] | 0;
            $265 = $$pre119;
        }
        $262 = HEAP8[(10974) >> 0] | 0;
        $263 = $262 & 255;
        $264 = ((($265) + (($8 * 24) | 0) | 0) + ($263) | 0);
        $266 = HEAP8[$264 >> 0] | 0;
        $267 = ($266 << 24 >> 24) == (0);
        $268 = HEAP32[$9 >> 2] | 0;
        if ($267) {
            $269 = (((($268) + (($8 * 768) | 0) | 0)) + 736 | 0);
            $270 = HEAP16[$269 >> 1] | 0;
            $271 = ($270 << 16 >> 16) == (0);
            if ($271) {
                return 0;
            }
        }
        $272 = (($263) + -18) | 0;
        $273 = $272 & -4;
        $274 = Math_imul($273, $6) | 0;
        $275 = (($272 | 0) % 4) & -1;
        $276 = $275 << 2;
        $277 = (($274) + ($276)) | 0;
        $278 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $279 = (($4) + ($277) | 0);
        $280 = (((($268) + (($8 * 768) | 0) | 0)) + 736 | 0);
        FUNCTION_TABLE_viii[$278 & 7]($279, $6, $280);
        return 0;
    }
    function __ZN7WelsDec16WeightPredictionEPNS_10TagDqLayerEPNS_14TagMCRefMemberEiii($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0100121$us = 0, $$0100121$us$1 = 0, $$0102128$us$us = 0, $$0102128$us133 = 0, $$0103131$us = 0, $$0120$us$us = 0, $$0120$us$us$1 = 0, $$0120$us123 = 0, $$0120$us123$1 = 0, $$pre = 0, $$pre150 = 0, $$sink$us$us = 0, $$sink$us135 = 0, $$sink3$us$us = 0, $$sink3$us$us$1 = 0, $$sink3$us124 = 0, $$sink3$us124$1 = 0, $10 = 0, $100 = 0, $101 = 0;
        var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
        var $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
        var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
        var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge$demorgan = 0, $brmerge158$demorgan = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond143 = 0;
        var $exitcond143$1 = 0, $exitcond144 = 0, $exitcond144$1 = 0, $exitcond146 = 0, $exitcond147 = 0, $exitcond148 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ((($0)) + 4084 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (((($6)) + 8 | 0) + ($2 << 2) | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = (((($6)) + 72 | 0) + ($2 << 2) | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($1)) + 32 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ($4 | 0) > (0);
        if ($14) {
            $15 = ($3 | 0) > (0);
            $16 = ($7 | 0) > (0);
            $17 = (($7) + -1) | 0;
            $18 = 1 << $17;
            if ($15) {
                $$0103131$us = 0;
                while (1) {
                    $19 = Math_imul($$0103131$us, $13) | 0;
                    if ($16) {
                        $$0102128$us$us = 0;
                        while (1) {
                            $33 = (($$0102128$us$us) + ($19)) | 0;
                            $34 = HEAP32[$1 >> 2] | 0;
                            $35 = (($34) + ($33) | 0);
                            $36 = HEAP8[$35 >> 0] | 0;
                            $37 = $36 & 255;
                            $38 = Math_imul($9, $37) | 0;
                            $39 = (($38) + ($18)) | 0;
                            $40 = $39 >> $7;
                            $41 = (($40) + ($11)) | 0;
                            $42 = ($41 | 0) < (255);
                            $43 = $42 ? $41 : 255;
                            $44 = ($41 | 0) > (0);
                            $45 = $43 & 255;
                            $$sink$us$us = $44 ? $45 : 0;
                            HEAP8[$35 >> 0] = $$sink$us$us;
                            $46 = (($$0102128$us$us) + 1) | 0;
                            $exitcond147 = ($46 | 0) == ($3 | 0);
                            if ($exitcond147) {
                                break;
                            } else {
                                $$0102128$us$us = $46;
                            }
                        }
                    } else {
                        $$0102128$us133 = 0;
                        while (1) {
                            $20 = (($$0102128$us133) + ($19)) | 0;
                            $21 = HEAP32[$1 >> 2] | 0;
                            $22 = (($21) + ($20) | 0);
                            $23 = HEAP8[$22 >> 0] | 0;
                            $24 = $23 & 255;
                            $25 = Math_imul($9, $24) | 0;
                            $26 = (($25) + ($11)) | 0;
                            $27 = ($26 | 0) < (255);
                            $28 = $27 ? $26 : 255;
                            $29 = ($26 | 0) > (0);
                            $30 = $28 & 255;
                            $$sink$us135 = $29 ? $30 : 0;
                            HEAP8[$22 >> 0] = $$sink$us135;
                            $31 = (($$0102128$us133) + 1) | 0;
                            $exitcond146 = ($31 | 0) == ($3 | 0);
                            if ($exitcond146) {
                                break;
                            } else {
                                $$0102128$us133 = $31;
                            }
                        }
                    }
                    $32 = (($$0103131$us) + 1) | 0;
                    $exitcond148 = ($32 | 0) == ($4 | 0);
                    if ($exitcond148) {
                        break;
                    } else {
                        $$0103131$us = $32;
                    }
                }
                $$pre = HEAP32[$5 >> 2] | 0;
                $50 = $$pre;
            } else {
                $50 = $6;
            }
        } else {
            $50 = $6;
        }
        $47 = $3 >> 2;
        $48 = $4 >> 2;
        $49 = ((($50)) + 4 | 0);
        $51 = HEAP32[$49 >> 2] | 0;
        $52 = ((($1)) + 36 | 0);
        $53 = HEAP32[$52 >> 2] | 0;
        $54 = ((($1)) + 4 | 0);
        $55 = ((($1)) + 8 | 0);
        $56 = ($48 | 0) > (0);
        $57 = ($47 | 0) > (0);
        $58 = ($51 | 0) > (0);
        $59 = (($51) + -1) | 0;
        $60 = 1 << $59;
        $61 = (((($50)) + 136 | 0) + ($2 << 3) | 0);
        $62 = HEAP32[$61 >> 2] | 0;
        $63 = (((($50)) + 264 | 0) + ($2 << 3) | 0);
        $64 = HEAP32[$63 >> 2] | 0;
        $65 = HEAP32[$54 >> 2] | 0;
        $brmerge158$demorgan = $56 & $57;
        if ($brmerge158$demorgan) {
            $$0100121$us = 0;
        } else {
            return;
        }
        while (1) {
            $66 = Math_imul($$0100121$us, $53) | 0;
            if ($58) {
                $$0120$us$us = 0;
                while (1) {
                    $79 = (($$0120$us$us) + ($66)) | 0;
                    $80 = (($65) + ($79) | 0);
                    $81 = HEAP8[$80 >> 0] | 0;
                    $82 = $81 & 255;
                    $83 = Math_imul($62, $82) | 0;
                    $84 = (($83) + ($60)) | 0;
                    $85 = $84 >> $51;
                    $86 = (($85) + ($64)) | 0;
                    $87 = ($86 | 0) < (255);
                    $88 = $87 ? $86 : 255;
                    $89 = ($86 | 0) > (0);
                    $90 = $88 & 255;
                    $$sink3$us$us = $89 ? $90 : 0;
                    HEAP8[$80 >> 0] = $$sink3$us$us;
                    $91 = (($$0120$us$us) + 1) | 0;
                    $exitcond143 = ($91 | 0) == ($47 | 0);
                    if ($exitcond143) {
                        break;
                    } else {
                        $$0120$us$us = $91;
                    }
                }
            } else {
                $$0120$us123 = 0;
                while (1) {
                    $67 = (($$0120$us123) + ($66)) | 0;
                    $68 = (($65) + ($67) | 0);
                    $69 = HEAP8[$68 >> 0] | 0;
                    $70 = $69 & 255;
                    $71 = Math_imul($62, $70) | 0;
                    $72 = (($71) + ($64)) | 0;
                    $73 = ($72 | 0) < (255);
                    $74 = $73 ? $72 : 255;
                    $75 = ($72 | 0) > (0);
                    $76 = $74 & 255;
                    $$sink3$us124 = $75 ? $76 : 0;
                    HEAP8[$68 >> 0] = $$sink3$us124;
                    $77 = (($$0120$us123) + 1) | 0;
                    $exitcond = ($77 | 0) == ($47 | 0);
                    if ($exitcond) {
                        break;
                    } else {
                        $$0120$us123 = $77;
                    }
                }
            }
            $78 = (($$0100121$us) + 1) | 0;
            $exitcond144 = ($78 | 0) == ($48 | 0);
            if ($exitcond144) {
                break;
            } else {
                $$0100121$us = $78;
            }
        }
        $$pre150 = HEAP32[$5 >> 2] | 0;
        $92 = (((((($$pre150)) + 136 | 0) + ($2 << 3) | 0)) + 4 | 0);
        $93 = HEAP32[$92 >> 2] | 0;
        $94 = (((((($$pre150)) + 264 | 0) + ($2 << 3) | 0)) + 4 | 0);
        $95 = HEAP32[$94 >> 2] | 0;
        $96 = HEAP32[$55 >> 2] | 0;
        $brmerge$demorgan = $56 & $57;
        if ($brmerge$demorgan) {
            $$0100121$us$1 = 0;
        } else {
            return;
        }
        while (1) {
            $97 = Math_imul($$0100121$us$1, $53) | 0;
            if ($58) {
                $$0120$us$us$1 = 0;
                while (1) {
                    $109 = (($$0120$us$us$1) + ($97)) | 0;
                    $110 = (($96) + ($109) | 0);
                    $111 = HEAP8[$110 >> 0] | 0;
                    $112 = $111 & 255;
                    $113 = Math_imul($93, $112) | 0;
                    $114 = (($113) + ($60)) | 0;
                    $115 = $114 >> $51;
                    $116 = (($115) + ($95)) | 0;
                    $117 = ($116 | 0) < (255);
                    $118 = $117 ? $116 : 255;
                    $119 = ($116 | 0) > (0);
                    $120 = $118 & 255;
                    $$sink3$us$us$1 = $119 ? $120 : 0;
                    HEAP8[$110 >> 0] = $$sink3$us$us$1;
                    $121 = (($$0120$us$us$1) + 1) | 0;
                    $exitcond143$1 = ($121 | 0) == ($47 | 0);
                    if ($exitcond143$1) {
                        break;
                    } else {
                        $$0120$us$us$1 = $121;
                    }
                }
            } else {
                $$0120$us123$1 = 0;
                while (1) {
                    $98 = (($$0120$us123$1) + ($97)) | 0;
                    $99 = (($96) + ($98) | 0);
                    $100 = HEAP8[$99 >> 0] | 0;
                    $101 = $100 & 255;
                    $102 = Math_imul($93, $101) | 0;
                    $103 = (($102) + ($95)) | 0;
                    $104 = ($103 | 0) < (255);
                    $105 = $104 ? $103 : 255;
                    $106 = ($103 | 0) > (0);
                    $107 = $105 & 255;
                    $$sink3$us124$1 = $106 ? $107 : 0;
                    HEAP8[$99 >> 0] = $$sink3$us124$1;
                    $108 = (($$0120$us123$1) + 1) | 0;
                    $exitcond$1 = ($108 | 0) == ($47 | 0);
                    if ($exitcond$1) {
                        break;
                    } else {
                        $$0120$us123$1 = $108;
                    }
                }
            }
            $122 = (($$0100121$us$1) + 1) | 0;
            $exitcond144$1 = ($122 | 0) == ($48 | 0);
            if ($exitcond144$1) {
                break;
            } else {
                $$0100121$us$1 = $122;
            }
        }
        return;
    }
    function __ZN7WelsDec23WelsFillRecNeededMbInfoEPNS_21TagWelsDecoderContextEbPNS_10TagDqLayerE($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ((($0)) + 5464 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($4)) + 32 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($4)) + 36 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($2)) + 4032 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($2)) + 4036 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($2)) + 4012 | 0);
        HEAP32[$13 >> 2] = $6;
        $14 = ((($2)) + 4016 | 0);
        HEAP32[$14 >> 2] = $8;
        if (!($1)) {
            return;
        }
        $15 = ((($4)) + 16 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = Math_imul($12, $6) | 0;
        $18 = (($17) + ($10)) | 0;
        $19 = $18 << 4;
        $20 = (($16) + ($19) | 0);
        $21 = ((($2)) + 4020 | 0);
        HEAP32[$21 >> 2] = $20;
        $22 = ((($4)) + 20 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = Math_imul($12, $8) | 0;
        $25 = (($24) + ($10)) | 0;
        $26 = $25 << 3;
        $27 = (($23) + ($26) | 0);
        $28 = ((($2)) + 4024 | 0);
        HEAP32[$28 >> 2] = $27;
        $29 = ((($4)) + 24 | 0);
        $30 = HEAP32[$29 >> 2] | 0;
        $31 = (($30) + ($26) | 0);
        $32 = ((($2)) + 4028 | 0);
        HEAP32[$32 >> 2] = $31;
        return;
    }
    function __ZN7WelsDec21WelsLumaDcDequantIdctEPsiPNS_21TagWelsDecoderContextE($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
        var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
        var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 64 | 0;
        $3 = sp;
        $4 = ((($2)) + 562526 | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = ($5 << 24 >> 24) == (0);
        if ($6) {
            $13 = (16 + ($1 << 4) | 0);
            $14 = HEAP16[$13 >> 1] | 0;
            $15 = $14 & 65535;
            $116 = $15;
        } else {
            $7 = ((($2)) + 562472 | 0);
            $8 = HEAP32[$7 >> 2] | 0;
            $9 = (($8) + ($1 << 5) | 0);
            $10 = HEAP16[$9 >> 1] | 0;
            $11 = $10 & 65535;
            $12 = $11 >>> 4;
            $116 = $12;
        }
        $16 = HEAP16[$0 >> 1] | 0;
        $17 = $16 << 16 >> 16;
        $18 = ((($0)) + 128 | 0);
        $19 = HEAP16[$18 >> 1] | 0;
        $20 = $19 << 16 >> 16;
        $21 = (($20) + ($17)) | 0;
        $22 = (($17) - ($20)) | 0;
        $23 = ((($0)) + 32 | 0);
        $24 = HEAP16[$23 >> 1] | 0;
        $25 = $24 << 16 >> 16;
        $26 = ((($0)) + 160 | 0);
        $27 = HEAP16[$26 >> 1] | 0;
        $28 = $27 << 16 >> 16;
        $29 = (($25) - ($28)) | 0;
        $30 = (($28) + ($25)) | 0;
        $31 = (($30) + ($21)) | 0;
        HEAP32[$3 >> 2] = $31;
        $32 = (($29) + ($22)) | 0;
        $33 = ((($3)) + 4 | 0);
        HEAP32[$33 >> 2] = $32;
        $34 = (($22) - ($29)) | 0;
        $35 = ((($3)) + 8 | 0);
        HEAP32[$35 >> 2] = $34;
        $36 = (($21) - ($30)) | 0;
        $37 = ((($3)) + 12 | 0);
        HEAP32[$37 >> 2] = $36;
        $38 = ((($0)) + 64 | 0);
        $39 = HEAP16[$38 >> 1] | 0;
        $40 = $39 << 16 >> 16;
        $41 = ((($0)) + 192 | 0);
        $42 = HEAP16[$41 >> 1] | 0;
        $43 = $42 << 16 >> 16;
        $44 = (($43) + ($40)) | 0;
        $45 = (($40) - ($43)) | 0;
        $46 = ((($0)) + 96 | 0);
        $47 = HEAP16[$46 >> 1] | 0;
        $48 = $47 << 16 >> 16;
        $49 = ((($0)) + 224 | 0);
        $50 = HEAP16[$49 >> 1] | 0;
        $51 = $50 << 16 >> 16;
        $52 = (($48) - ($51)) | 0;
        $53 = (($51) + ($48)) | 0;
        $54 = (($53) + ($44)) | 0;
        $55 = ((($3)) + 16 | 0);
        HEAP32[$55 >> 2] = $54;
        $56 = (($52) + ($45)) | 0;
        $57 = ((($3)) + 20 | 0);
        HEAP32[$57 >> 2] = $56;
        $58 = (($45) - ($52)) | 0;
        $59 = ((($3)) + 24 | 0);
        HEAP32[$59 >> 2] = $58;
        $60 = (($44) - ($53)) | 0;
        $61 = ((($3)) + 28 | 0);
        HEAP32[$61 >> 2] = $60;
        $62 = ((($0)) + 256 | 0);
        $63 = HEAP16[$62 >> 1] | 0;
        $64 = $63 << 16 >> 16;
        $65 = ((($0)) + 384 | 0);
        $66 = HEAP16[$65 >> 1] | 0;
        $67 = $66 << 16 >> 16;
        $68 = (($67) + ($64)) | 0;
        $69 = (($64) - ($67)) | 0;
        $70 = ((($0)) + 288 | 0);
        $71 = HEAP16[$70 >> 1] | 0;
        $72 = $71 << 16 >> 16;
        $73 = ((($0)) + 416 | 0);
        $74 = HEAP16[$73 >> 1] | 0;
        $75 = $74 << 16 >> 16;
        $76 = (($72) - ($75)) | 0;
        $77 = (($75) + ($72)) | 0;
        $78 = (($77) + ($68)) | 0;
        $79 = ((($3)) + 32 | 0);
        HEAP32[$79 >> 2] = $78;
        $80 = (($76) + ($69)) | 0;
        $81 = ((($3)) + 36 | 0);
        HEAP32[$81 >> 2] = $80;
        $82 = (($69) - ($76)) | 0;
        $83 = ((($3)) + 40 | 0);
        HEAP32[$83 >> 2] = $82;
        $84 = (($68) - ($77)) | 0;
        $85 = ((($3)) + 44 | 0);
        HEAP32[$85 >> 2] = $84;
        $86 = ((($0)) + 320 | 0);
        $87 = HEAP16[$86 >> 1] | 0;
        $88 = $87 << 16 >> 16;
        $89 = ((($0)) + 448 | 0);
        $90 = HEAP16[$89 >> 1] | 0;
        $91 = $90 << 16 >> 16;
        $92 = (($91) + ($88)) | 0;
        $93 = (($88) - ($91)) | 0;
        $94 = ((($0)) + 352 | 0);
        $95 = HEAP16[$94 >> 1] | 0;
        $96 = $95 << 16 >> 16;
        $97 = ((($0)) + 480 | 0);
        $98 = HEAP16[$97 >> 1] | 0;
        $99 = $98 << 16 >> 16;
        $100 = (($96) - ($99)) | 0;
        $101 = (($99) + ($96)) | 0;
        $102 = (($101) + ($92)) | 0;
        $103 = ((($3)) + 48 | 0);
        HEAP32[$103 >> 2] = $102;
        $104 = (($100) + ($93)) | 0;
        $105 = ((($3)) + 52 | 0);
        HEAP32[$105 >> 2] = $104;
        $106 = (($93) - ($100)) | 0;
        $107 = ((($3)) + 56 | 0);
        HEAP32[$107 >> 2] = $106;
        $108 = (($92) - ($101)) | 0;
        $109 = ((($3)) + 60 | 0);
        HEAP32[$109 >> 2] = $108;
        $110 = (($78) + ($31)) | 0;
        $111 = (($31) - ($78)) | 0;
        $112 = (($54) - ($102)) | 0;
        $113 = (($102) + ($54)) | 0;
        $114 = (($113) + ($110)) | 0;
        $115 = Math_imul($114, $116) | 0;
        $117 = (($115) + 2) | 0;
        $118 = $117 >>> 2;
        $119 = $118 & 65535;
        HEAP16[$0 >> 1] = $119;
        $120 = (($112) + ($111)) | 0;
        $121 = Math_imul($120, $116) | 0;
        $122 = (($121) + 2) | 0;
        $123 = $122 >>> 2;
        $124 = $123 & 65535;
        HEAP16[$38 >> 1] = $124;
        $125 = (($111) - ($112)) | 0;
        $126 = Math_imul($125, $116) | 0;
        $127 = (($126) + 2) | 0;
        $128 = $127 >>> 2;
        $129 = $128 & 65535;
        HEAP16[$62 >> 1] = $129;
        $130 = (($110) - ($113)) | 0;
        $131 = Math_imul($130, $116) | 0;
        $132 = (($131) + 2) | 0;
        $133 = $132 >>> 2;
        $134 = $133 & 65535;
        HEAP16[$86 >> 1] = $134;
        $135 = HEAP32[$33 >> 2] | 0;
        $136 = (($80) + ($135)) | 0;
        $137 = (($135) - ($80)) | 0;
        $138 = (($56) - ($104)) | 0;
        $139 = (($104) + ($56)) | 0;
        $140 = (($139) + ($136)) | 0;
        $141 = Math_imul($140, $116) | 0;
        $142 = (($141) + 2) | 0;
        $143 = $142 >>> 2;
        $144 = $143 & 65535;
        HEAP16[$23 >> 1] = $144;
        $145 = (($138) + ($137)) | 0;
        $146 = Math_imul($145, $116) | 0;
        $147 = (($146) + 2) | 0;
        $148 = $147 >>> 2;
        $149 = $148 & 65535;
        HEAP16[$46 >> 1] = $149;
        $150 = (($137) - ($138)) | 0;
        $151 = Math_imul($150, $116) | 0;
        $152 = (($151) + 2) | 0;
        $153 = $152 >>> 2;
        $154 = $153 & 65535;
        HEAP16[$70 >> 1] = $154;
        $155 = (($136) - ($139)) | 0;
        $156 = Math_imul($155, $116) | 0;
        $157 = (($156) + 2) | 0;
        $158 = $157 >>> 2;
        $159 = $158 & 65535;
        HEAP16[$94 >> 1] = $159;
        $160 = HEAP32[$35 >> 2] | 0;
        $161 = (($82) + ($160)) | 0;
        $162 = (($160) - ($82)) | 0;
        $163 = HEAP32[$59 >> 2] | 0;
        $164 = (($163) - ($106)) | 0;
        $165 = (($106) + ($163)) | 0;
        $166 = (($165) + ($161)) | 0;
        $167 = Math_imul($166, $116) | 0;
        $168 = (($167) + 2) | 0;
        $169 = $168 >>> 2;
        $170 = $169 & 65535;
        HEAP16[$18 >> 1] = $170;
        $171 = (($164) + ($162)) | 0;
        $172 = Math_imul($171, $116) | 0;
        $173 = (($172) + 2) | 0;
        $174 = $173 >>> 2;
        $175 = $174 & 65535;
        HEAP16[$41 >> 1] = $175;
        $176 = (($162) - ($164)) | 0;
        $177 = Math_imul($176, $116) | 0;
        $178 = (($177) + 2) | 0;
        $179 = $178 >>> 2;
        $180 = $179 & 65535;
        HEAP16[$65 >> 1] = $180;
        $181 = (($161) - ($165)) | 0;
        $182 = Math_imul($181, $116) | 0;
        $183 = (($182) + 2) | 0;
        $184 = $183 >>> 2;
        $185 = $184 & 65535;
        HEAP16[$89 >> 1] = $185;
        $186 = HEAP32[$37 >> 2] | 0;
        $187 = HEAP32[$85 >> 2] | 0;
        $188 = (($187) + ($186)) | 0;
        $189 = (($186) - ($187)) | 0;
        $190 = HEAP32[$61 >> 2] | 0;
        $191 = (($190) - ($108)) | 0;
        $192 = (($108) + ($190)) | 0;
        $193 = (($192) + ($188)) | 0;
        $194 = Math_imul($193, $116) | 0;
        $195 = (($194) + 2) | 0;
        $196 = $195 >>> 2;
        $197 = $196 & 65535;
        HEAP16[$26 >> 1] = $197;
        $198 = (($191) + ($189)) | 0;
        $199 = Math_imul($198, $116) | 0;
        $200 = (($199) + 2) | 0;
        $201 = $200 >>> 2;
        $202 = $201 & 65535;
        HEAP16[$49 >> 1] = $202;
        $203 = (($189) - ($191)) | 0;
        $204 = Math_imul($203, $116) | 0;
        $205 = (($204) + 2) | 0;
        $206 = $205 >>> 2;
        $207 = $206 & 65535;
        HEAP16[$73 >> 1] = $207;
        $208 = (($188) - ($192)) | 0;
        $209 = Math_imul($208, $116) | 0;
        $210 = (($209) + 2) | 0;
        $211 = $210 >>> 2;
        $212 = $211 & 65535;
        HEAP16[$97 >> 1] = $212;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec11RecI16x16MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($3)) + 3992 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = (((($5) + ($0 << 3) | 0)) + 7 | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = ((($3)) + 4004 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = (($9) + ($0) | 0);
        $11 = HEAP8[$10 >> 0] | 0;
        $12 = ((($1)) + 241932 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ((($13)) + 4100 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ((($15)) + 36 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ((($3)) + 4012 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ((($3)) + 4020 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ((($1)) + 316968 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = $7 << 24 >> 24;
        $25 = (((($1)) + 316856 | 0) + ($24 << 2) | 0);
        $26 = HEAP32[$25 >> 2] | 0;
        FUNCTION_TABLE_vii[$26 & 63]($21, $19);
        $27 = ((($3)) + 3964 | 0);
        $indvars$iv = 0;
        while (1) {
            $28 = $indvars$iv << 4;
            $29 = (($2) + ($28 << 1) | 0);
            $30 = (((($1)) + 5248 | 0) + ($indvars$iv << 2) | 0);
            $31 = HEAP32[$30 >> 2] | 0;
            $32 = (($21) + ($31) | 0);
            $33 = HEAP32[$27 >> 2] | 0;
            $34 = (10951 + ($indvars$iv) | 0);
            $35 = HEAP8[$34 >> 0] | 0;
            $36 = $35 & 255;
            $37 = ((($33) + (($0 * 24) | 0) | 0) + ($36) | 0);
            $38 = HEAP8[$37 >> 0] | 0;
            $39 = ($38 << 24 >> 24) == (0);
            if ($39) {
                $40 = HEAP16[$29 >> 1] | 0;
                $41 = ($40 << 16 >> 16) == (0);
                if (!($41)) {
                    label = 4;
                }
            } else {
                label = 4;
            }
            if ((label | 0) == 4) {
                label = 0;
                FUNCTION_TABLE_viii[$23 & 7]($32, $19, $29);
            }
            $indvars$iv$next = (($indvars$iv) + 1) | 0;
            $exitcond = ($indvars$iv$next | 0) == (16);
            if ($exitcond) {
                break;
            } else {
                $indvars$iv = $indvars$iv$next;
            }
        }
        $42 = ((($3)) + 4024 | 0);
        $43 = HEAP32[$42 >> 2] | 0;
        $44 = $11 << 24 >> 24;
        $45 = (((($1)) + 316940 | 0) + ($44 << 2) | 0);
        $46 = HEAP32[$45 >> 2] | 0;
        FUNCTION_TABLE_vii[$46 & 63]($43, $17);
        $47 = ((($3)) + 4028 | 0);
        $48 = HEAP32[$47 >> 2] | 0;
        $49 = HEAP32[$45 >> 2] | 0;
        FUNCTION_TABLE_vii[$49 & 63]($48, $17);
        (__ZN7WelsDec9RecChromaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) | 0);
        return 0;
    }
    function __ZN7WelsDec9RecI8x8MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        (__ZN7WelsDec11RecI8x8LumaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) | 0);
        $4 = ((($1)) + 241932 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($5)) + 4100 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($7)) + 36 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($3)) + 4004 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = (($11) + ($0) | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = ((($3)) + 4024 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = $13 << 24 >> 24;
        $17 = (((($1)) + 316940 | 0) + ($16 << 2) | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        FUNCTION_TABLE_vii[$18 & 63]($15, $9);
        $19 = ((($3)) + 4028 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = HEAP32[$17 >> 2] | 0;
        FUNCTION_TABLE_vii[$21 & 63]($20, $9);
        (__ZN7WelsDec9RecChromaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) | 0);
        return 0;
    }
    function __ZN7WelsDec9RecI4x4MbEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $indvars$iv$i = 0, $indvars$iv$next$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($3)) + 4020 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($3)) + 4012 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($3)) + 3996 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($1)) + 316968 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($3)) + 3964 | 0);
        $indvars$iv$i = 0;
        while (1) {
            $13 = (((($1)) + 5248 | 0) + ($indvars$iv$i << 2) | 0);
            $14 = HEAP32[$13 >> 2] | 0;
            $15 = (($5) + ($14) | 0);
            $16 = (15415 + ($indvars$iv$i) | 0);
            $17 = HEAP8[$16 >> 0] | 0;
            $18 = $17 & 255;
            $19 = ((($9) + ($0 << 4) | 0) + ($18) | 0);
            $20 = HEAP8[$19 >> 0] | 0;
            $21 = $20 & 255;
            $22 = (((($1)) + 316884 | 0) + ($21 << 2) | 0);
            $23 = HEAP32[$22 >> 2] | 0;
            FUNCTION_TABLE_vii[$23 & 63]($15, $7);
            $24 = HEAP32[$12 >> 2] | 0;
            $25 = (10951 + ($indvars$iv$i) | 0);
            $26 = HEAP8[$25 >> 0] | 0;
            $27 = $26 & 255;
            $28 = ((($24) + (($0 * 24) | 0) | 0) + ($27) | 0);
            $29 = HEAP8[$28 >> 0] | 0;
            $30 = ($29 << 24 >> 24) == (0);
            if (!($30)) {
                $31 = $indvars$iv$i << 4;
                $32 = (($2) + ($31 << 1) | 0);
                FUNCTION_TABLE_viii[$11 & 7]($15, $7, $32);
            }
            $indvars$iv$next$i = (($indvars$iv$i) + 1) | 0;
            $exitcond$i = ($indvars$iv$next$i | 0) == (16);
            if ($exitcond$i) {
                break;
            } else {
                $indvars$iv$i = $indvars$iv$next$i;
            }
        }
        $33 = ((($1)) + 241932 | 0);
        $34 = HEAP32[$33 >> 2] | 0;
        $35 = ((($34)) + 4100 | 0);
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = ((($36)) + 36 | 0);
        $38 = HEAP32[$37 >> 2] | 0;
        $39 = ((($3)) + 4004 | 0);
        $40 = HEAP32[$39 >> 2] | 0;
        $41 = (($40) + ($0) | 0);
        $42 = HEAP8[$41 >> 0] | 0;
        $43 = ((($3)) + 4024 | 0);
        $44 = HEAP32[$43 >> 2] | 0;
        $45 = $42 << 24 >> 24;
        $46 = (((($1)) + 316940 | 0) + ($45 << 2) | 0);
        $47 = HEAP32[$46 >> 2] | 0;
        FUNCTION_TABLE_vii[$47 & 63]($44, $38);
        $48 = ((($3)) + 4028 | 0);
        $49 = HEAP32[$48 >> 2] | 0;
        $50 = HEAP32[$46 >> 2] | 0;
        FUNCTION_TABLE_vii[$50 & 63]($49, $38);
        (__ZN7WelsDec9RecChromaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) | 0);
        return 0;
    }
    function __ZN7WelsDec9RecChromaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$off = 0, $$pre = 0, $$pre48 = 0, $$pre49 = 0, $$pre50 = 0, $$pre51 = 0, $$pre52 = 0, $$pre53 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
        var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
        var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
        var $97 = 0, $98 = 0, $99 = 0, $switch = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($1)) + 241932 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($5)) + 4100 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($7)) + 36 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($1)) + 316968 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($3)) + 3956 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = (($13) + ($0) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = ($15 << 24 >> 24) >> 4;
        $$off = (($16) + -1) << 24 >> 24;
        $switch = ($$off & 255) < (2);
        if (!($switch)) {
            return 0;
        }
        $17 = ((($2)) + 512 | 0);
        __ZN7WelsDec16WelsChromaDcIdctEPs($17);
        $18 = ((($2)) + 640 | 0);
        __ZN7WelsDec16WelsChromaDcIdctEPs($18);
        $19 = ((($3)) + 3964 | 0);
        $20 = ((($3)) + 4024 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ((($1)) + 5312 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = (($21) + ($23) | 0);
        $25 = HEAP32[$19 >> 2] | 0;
        $26 = HEAP8[(10967) >> 0] | 0;
        $27 = $26 & 255;
        $28 = ((($25) + (($0 * 24) | 0) | 0) + ($27) | 0);
        $29 = HEAP8[$28 >> 0] | 0;
        $30 = ($29 << 24 >> 24) == (0);
        if ($30) {
            $31 = HEAP16[$17 >> 1] | 0;
            $32 = ($31 << 16 >> 16) == (0);
            if ($32) {
                $40 = $25;
            } else {
                label = 4;
            }
        } else {
            label = 4;
        }
        if ((label | 0) == 4) {
            FUNCTION_TABLE_viii[$11 & 7]($24, $9, $17);
            $$pre = HEAP32[$19 >> 2] | 0;
            $40 = $$pre;
        }
        $33 = ((($2)) + 544 | 0);
        $34 = ((($1)) + 5316 | 0);
        $35 = HEAP32[$34 >> 2] | 0;
        $36 = (($21) + ($35) | 0);
        $37 = HEAP8[(10968) >> 0] | 0;
        $38 = $37 & 255;
        $39 = ((($40) + (($0 * 24) | 0) | 0) + ($38) | 0);
        $41 = HEAP8[$39 >> 0] | 0;
        $42 = ($41 << 24 >> 24) == (0);
        if ($42) {
            $43 = HEAP16[$33 >> 1] | 0;
            $44 = ($43 << 16 >> 16) == (0);
            if ($44) {
                $52 = $40;
            } else {
                label = 8;
            }
        } else {
            label = 8;
        }
        if ((label | 0) == 8) {
            FUNCTION_TABLE_viii[$11 & 7]($36, $9, $33);
            $$pre48 = HEAP32[$19 >> 2] | 0;
            $52 = $$pre48;
        }
        $45 = ((($2)) + 576 | 0);
        $46 = ((($1)) + 5320 | 0);
        $47 = HEAP32[$46 >> 2] | 0;
        $48 = (($21) + ($47) | 0);
        $49 = HEAP8[(10969) >> 0] | 0;
        $50 = $49 & 255;
        $51 = ((($52) + (($0 * 24) | 0) | 0) + ($50) | 0);
        $53 = HEAP8[$51 >> 0] | 0;
        $54 = ($53 << 24 >> 24) == (0);
        if ($54) {
            $55 = HEAP16[$45 >> 1] | 0;
            $56 = ($55 << 16 >> 16) == (0);
            if ($56) {
                $64 = $52;
            } else {
                label = 11;
            }
        } else {
            label = 11;
        }
        if ((label | 0) == 11) {
            FUNCTION_TABLE_viii[$11 & 7]($48, $9, $45);
            $$pre49 = HEAP32[$19 >> 2] | 0;
            $64 = $$pre49;
        }
        $57 = ((($2)) + 608 | 0);
        $58 = ((($1)) + 5324 | 0);
        $59 = HEAP32[$58 >> 2] | 0;
        $60 = (($21) + ($59) | 0);
        $61 = HEAP8[(10970) >> 0] | 0;
        $62 = $61 & 255;
        $63 = ((($64) + (($0 * 24) | 0) | 0) + ($62) | 0);
        $65 = HEAP8[$63 >> 0] | 0;
        $66 = ($65 << 24 >> 24) == (0);
        if ($66) {
            $67 = HEAP16[$57 >> 1] | 0;
            $68 = ($67 << 16 >> 16) == (0);
            if ($68) {
                $78 = $64;
            } else {
                label = 14;
            }
        } else {
            label = 14;
        }
        if ((label | 0) == 14) {
            FUNCTION_TABLE_viii[$11 & 7]($60, $9, $57);
            $$pre50 = HEAP32[$19 >> 2] | 0;
            $78 = $$pre50;
        }
        $69 = ((($2)) + 640 | 0);
        $70 = ((($3)) + 4028 | 0);
        $71 = HEAP32[$70 >> 2] | 0;
        $72 = ((($1)) + 5328 | 0);
        $73 = HEAP32[$72 >> 2] | 0;
        $74 = (($71) + ($73) | 0);
        $75 = HEAP8[(10971) >> 0] | 0;
        $76 = $75 & 255;
        $77 = ((($78) + (($0 * 24) | 0) | 0) + ($76) | 0);
        $79 = HEAP8[$77 >> 0] | 0;
        $80 = ($79 << 24 >> 24) == (0);
        if ($80) {
            $81 = HEAP16[$69 >> 1] | 0;
            $82 = ($81 << 16 >> 16) == (0);
            if ($82) {
                $90 = $78;
            } else {
                label = 17;
            }
        } else {
            label = 17;
        }
        if ((label | 0) == 17) {
            FUNCTION_TABLE_viii[$11 & 7]($74, $9, $69);
            $$pre51 = HEAP32[$19 >> 2] | 0;
            $90 = $$pre51;
        }
        $83 = ((($2)) + 672 | 0);
        $84 = ((($1)) + 5332 | 0);
        $85 = HEAP32[$84 >> 2] | 0;
        $86 = (($71) + ($85) | 0);
        $87 = HEAP8[(10972) >> 0] | 0;
        $88 = $87 & 255;
        $89 = ((($90) + (($0 * 24) | 0) | 0) + ($88) | 0);
        $91 = HEAP8[$89 >> 0] | 0;
        $92 = ($91 << 24 >> 24) == (0);
        if ($92) {
            $93 = HEAP16[$83 >> 1] | 0;
            $94 = ($93 << 16 >> 16) == (0);
            if ($94) {
                $102 = $90;
            } else {
                label = 20;
            }
        } else {
            label = 20;
        }
        if ((label | 0) == 20) {
            FUNCTION_TABLE_viii[$11 & 7]($86, $9, $83);
            $$pre52 = HEAP32[$19 >> 2] | 0;
            $102 = $$pre52;
        }
        $95 = ((($2)) + 704 | 0);
        $96 = ((($1)) + 5336 | 0);
        $97 = HEAP32[$96 >> 2] | 0;
        $98 = (($71) + ($97) | 0);
        $99 = HEAP8[(10973) >> 0] | 0;
        $100 = $99 & 255;
        $101 = ((($102) + (($0 * 24) | 0) | 0) + ($100) | 0);
        $103 = HEAP8[$101 >> 0] | 0;
        $104 = ($103 << 24 >> 24) == (0);
        if ($104) {
            $105 = HEAP16[$95 >> 1] | 0;
            $106 = ($105 << 16 >> 16) == (0);
            if ($106) {
                $114 = $102;
            } else {
                label = 23;
            }
        } else {
            label = 23;
        }
        if ((label | 0) == 23) {
            FUNCTION_TABLE_viii[$11 & 7]($98, $9, $95);
            $$pre53 = HEAP32[$19 >> 2] | 0;
            $114 = $$pre53;
        }
        $107 = ((($2)) + 736 | 0);
        $108 = ((($1)) + 5340 | 0);
        $109 = HEAP32[$108 >> 2] | 0;
        $110 = (($71) + ($109) | 0);
        $111 = HEAP8[(10974) >> 0] | 0;
        $112 = $111 & 255;
        $113 = ((($114) + (($0 * 24) | 0) | 0) + ($112) | 0);
        $115 = HEAP8[$113 >> 0] | 0;
        $116 = ($115 << 24 >> 24) == (0);
        if ($116) {
            $117 = HEAP16[$107 >> 1] | 0;
            $118 = ($117 << 16 >> 16) == (0);
            if ($118) {
                return 0;
            }
        }
        FUNCTION_TABLE_viii[$11 & 7]($110, $9, $107);
        return 0;
    }
    function __ZN7WelsDec16WelsChromaDcIdctEPs($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = HEAP16[$0 >> 1] | 0;
        $2 = $1 << 16 >> 16;
        $3 = ((($0)) + 32 | 0);
        $4 = HEAP16[$3 >> 1] | 0;
        $5 = $4 << 16 >> 16;
        $6 = ((($0)) + 64 | 0);
        $7 = HEAP16[$6 >> 1] | 0;
        $8 = $7 << 16 >> 16;
        $9 = ((($0)) + 96 | 0);
        $10 = HEAP16[$9 >> 1] | 0;
        $11 = $10 << 16 >> 16;
        $12 = (($2) - ($5)) | 0;
        $13 = (($5) + ($2)) | 0;
        $14 = (($8) - ($11)) | 0;
        $15 = (($11) + ($8)) | 0;
        $16 = (($15) + ($13)) | 0;
        $17 = $16 >>> 1;
        $18 = $17 & 65535;
        HEAP16[$0 >> 1] = $18;
        $19 = (($14) + ($12)) | 0;
        $20 = $19 >>> 1;
        $21 = $20 & 65535;
        HEAP16[$3 >> 1] = $21;
        $22 = (($13) - ($15)) | 0;
        $23 = $22 >>> 1;
        $24 = $23 & 65535;
        HEAP16[$6 >> 1] = $24;
        $25 = (($12) - ($14)) | 0;
        $26 = $25 >>> 1;
        $27 = $26 & 65535;
        HEAP16[$9 >> 1] = $27;
        return;
    }
    function __ZN7WelsDec11RecI8x8LumaEiPNS_21TagWelsDecoderContextEPsPNS_10TagDqLayerE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$lobit = 0, $$lobit68 = 0, $$lobit69 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
        var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
        var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
        var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
        var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($3)) + 4020 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($3)) + 4012 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($3)) + 3996 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($1)) + 317052 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($3)) + 4000 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = (($13) + ($0) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $$lobit = $15 & 2;
        $16 = $15 & 1;
        $$lobit68 = $15 & 4;
        $$lobit69 = $15 & 8;
        $17 = ((($3)) + 3964 | 0);
        $18 = ((($1)) + 5248 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = (($5) + ($19) | 0);
        $21 = HEAP8[15415] | 0;
        $22 = $21 & 255;
        $23 = ((($9) + ($0 << 4) | 0) + ($22) | 0);
        $24 = HEAP8[$23 >> 0] | 0;
        $25 = $24 & 255;
        $26 = (((($1)) + 316996 | 0) + ($25 << 2) | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = ($$lobit << 24 >> 24) != (0);
        $29 = ($16 << 24 >> 24) != (0);
        FUNCTION_TABLE_viiii[$27 & 31]($20, $7, $28, $29);
        $30 = HEAP8[10951] | 0;
        $31 = $30 & 255;
        $32 = HEAP32[$17 >> 2] | 0;
        $33 = ((($32) + (($0 * 24) | 0) | 0) + ($31) | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = ($34 << 24 >> 24) == (0);
        if ($35) {
            $36 = (($31) + 1) | 0;
            $37 = ((($32) + (($0 * 24) | 0) | 0) + ($36) | 0);
            $38 = HEAP8[$37 >> 0] | 0;
            $39 = ($38 << 24 >> 24) == (0);
            if ($39) {
                $40 = (($31) + 4) | 0;
                $41 = ((($32) + (($0 * 24) | 0) | 0) + ($40) | 0);
                $42 = HEAP8[$41 >> 0] | 0;
                $43 = ($42 << 24 >> 24) == (0);
                if ($43) {
                    $44 = (($31) + 5) | 0;
                    $45 = ((($32) + (($0 * 24) | 0) | 0) + ($44) | 0);
                    $46 = HEAP8[$45 >> 0] | 0;
                    $47 = ($46 << 24 >> 24) == (0);
                    if (!($47)) {
                        label = 5;
                    }
                } else {
                    label = 5;
                }
            } else {
                label = 5;
            }
        } else {
            label = 5;
        }
        if ((label | 0) == 5) {
            FUNCTION_TABLE_viii[$11 & 7]($20, $7, $2);
        }
        $48 = ((($1)) + 5264 | 0);
        $49 = HEAP32[$48 >> 2] | 0;
        $50 = (($5) + ($49) | 0);
        $51 = HEAP8[(15419) >> 0] | 0;
        $52 = $51 & 255;
        $53 = ((($9) + ($0 << 4) | 0) + ($52) | 0);
        $54 = HEAP8[$53 >> 0] | 0;
        $55 = $54 & 255;
        $56 = (((($1)) + 316996 | 0) + ($55 << 2) | 0);
        $57 = HEAP32[$56 >> 2] | 0;
        $58 = ($$lobit69 << 24 >> 24) != (0);
        FUNCTION_TABLE_viiii[$57 & 31]($50, $7, $29, $58);
        $59 = HEAP8[(10955) >> 0] | 0;
        $60 = $59 & 255;
        $61 = HEAP32[$17 >> 2] | 0;
        $62 = ((($61) + (($0 * 24) | 0) | 0) + ($60) | 0);
        $63 = HEAP8[$62 >> 0] | 0;
        $64 = ($63 << 24 >> 24) == (0);
        if ($64) {
            $65 = (($60) + 1) | 0;
            $66 = ((($61) + (($0 * 24) | 0) | 0) + ($65) | 0);
            $67 = HEAP8[$66 >> 0] | 0;
            $68 = ($67 << 24 >> 24) == (0);
            if ($68) {
                $69 = (($60) + 4) | 0;
                $70 = ((($61) + (($0 * 24) | 0) | 0) + ($69) | 0);
                $71 = HEAP8[$70 >> 0] | 0;
                $72 = ($71 << 24 >> 24) == (0);
                if ($72) {
                    $73 = (($60) + 5) | 0;
                    $74 = ((($61) + (($0 * 24) | 0) | 0) + ($73) | 0);
                    $75 = HEAP8[$74 >> 0] | 0;
                    $76 = ($75 << 24 >> 24) == (0);
                    if (!($76)) {
                        label = 10;
                    }
                } else {
                    label = 10;
                }
            } else {
                label = 10;
            }
        } else {
            label = 10;
        }
        if ((label | 0) == 10) {
            $77 = ((($2)) + 128 | 0);
            FUNCTION_TABLE_viii[$11 & 7]($50, $7, $77);
        }
        $78 = ((($1)) + 5280 | 0);
        $79 = HEAP32[$78 >> 2] | 0;
        $80 = (($5) + ($79) | 0);
        $81 = HEAP8[(15423) >> 0] | 0;
        $82 = $81 & 255;
        $83 = ((($9) + ($0 << 4) | 0) + ($82) | 0);
        $84 = HEAP8[$83 >> 0] | 0;
        $85 = $84 & 255;
        $86 = (((($1)) + 316996 | 0) + ($85 << 2) | 0);
        $87 = HEAP32[$86 >> 2] | 0;
        $88 = ($$lobit68 << 24 >> 24) != (0);
        FUNCTION_TABLE_viiii[$87 & 31]($80, $7, $88, 1);
        $89 = HEAP8[(10959) >> 0] | 0;
        $90 = $89 & 255;
        $91 = HEAP32[$17 >> 2] | 0;
        $92 = ((($91) + (($0 * 24) | 0) | 0) + ($90) | 0);
        $93 = HEAP8[$92 >> 0] | 0;
        $94 = ($93 << 24 >> 24) == (0);
        if ($94) {
            $95 = (($90) + 1) | 0;
            $96 = ((($91) + (($0 * 24) | 0) | 0) + ($95) | 0);
            $97 = HEAP8[$96 >> 0] | 0;
            $98 = ($97 << 24 >> 24) == (0);
            if ($98) {
                $99 = (($90) + 4) | 0;
                $100 = ((($91) + (($0 * 24) | 0) | 0) + ($99) | 0);
                $101 = HEAP8[$100 >> 0] | 0;
                $102 = ($101 << 24 >> 24) == (0);
                if ($102) {
                    $103 = (($90) + 5) | 0;
                    $104 = ((($91) + (($0 * 24) | 0) | 0) + ($103) | 0);
                    $105 = HEAP8[$104 >> 0] | 0;
                    $106 = ($105 << 24 >> 24) == (0);
                    if (!($106)) {
                        label = 15;
                    }
                } else {
                    label = 15;
                }
            } else {
                label = 15;
            }
        } else {
            label = 15;
        }
        if ((label | 0) == 15) {
            $107 = ((($2)) + 256 | 0);
            FUNCTION_TABLE_viii[$11 & 7]($80, $7, $107);
        }
        $108 = ((($1)) + 5296 | 0);
        $109 = HEAP32[$108 >> 2] | 0;
        $110 = (($5) + ($109) | 0);
        $111 = HEAP8[(15427) >> 0] | 0;
        $112 = $111 & 255;
        $113 = ((($9) + ($0 << 4) | 0) + ($112) | 0);
        $114 = HEAP8[$113 >> 0] | 0;
        $115 = $114 & 255;
        $116 = (((($1)) + 316996 | 0) + ($115 << 2) | 0);
        $117 = HEAP32[$116 >> 2] | 0;
        FUNCTION_TABLE_viiii[$117 & 31]($110, $7, 1, 0);
        $118 = HEAP8[(10963) >> 0] | 0;
        $119 = $118 & 255;
        $120 = HEAP32[$17 >> 2] | 0;
        $121 = ((($120) + (($0 * 24) | 0) | 0) + ($119) | 0);
        $122 = HEAP8[$121 >> 0] | 0;
        $123 = ($122 << 24 >> 24) == (0);
        if ($123) {
            $124 = (($119) + 1) | 0;
            $125 = ((($120) + (($0 * 24) | 0) | 0) + ($124) | 0);
            $126 = HEAP8[$125 >> 0] | 0;
            $127 = ($126 << 24 >> 24) == (0);
            if ($127) {
                $128 = (($119) + 4) | 0;
                $129 = ((($120) + (($0 * 24) | 0) | 0) + ($128) | 0);
                $130 = HEAP8[$129 >> 0] | 0;
                $131 = ($130 << 24 >> 24) == (0);
                if ($131) {
                    $132 = (($119) + 5) | 0;
                    $133 = ((($120) + (($0 * 24) | 0) | 0) + ($132) | 0);
                    $134 = HEAP8[$133 >> 0] | 0;
                    $135 = ($134 << 24 >> 24) == (0);
                    if ($135) {
                        return 0;
                    }
                }
            }
        }
        $136 = ((($2)) + 384 | 0);
        FUNCTION_TABLE_viii[$11 & 7]($110, $7, $136);
        return 0;
    }
    function __ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$107 = 0, $$107$1 = 0, $$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
        var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
        var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
        var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
        var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0;
        var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
        var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
        var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
        var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
        var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $3 = sp + 40 | 0;
        $4 = sp + 4 | 0;
        $5 = sp;
        $6 = ((($0)) + 241932 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($0)) + 5468 | 0);
        $9 = ((($7)) + 4040 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($7)) + 3956 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = (($12) + ($10) | 0);
        HEAP8[$13 >> 0] = 0;
        $14 = ((($7)) + 3960 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = (($15) + ($10 << 1) | 0);
        HEAP16[$16 >> 1] = 0;
        $17 = ((($7)) + 4004 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = (($18) + ($10) | 0);
        HEAP8[$19 >> 0] = 0;
        $20 = ((($7)) + 3940 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = (($21) + ($10) | 0);
        HEAP8[$22 >> 0] = 1;
        $23 = ((($7)) + 3944 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = (($24) + ($10) | 0);
        HEAP8[$25 >> 0] = 0;
        __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($4, $7);
        $26 = (__ZN7WelsDec18ParseSkipFlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $4, $3) | 0);
        $27 = ($26 | 0) == (0);
        if (!($27)) {
            $$4 = $26;
            STACKTOP = sp; return ($$4 | 0);
        }
        $28 = HEAP32[$3 >> 2] | 0;
        $29 = ($28 | 0) == (0);
        if ($29) {
            $186 = (__ZN7WelsDec32WelsDecodeMbCabacPSliceBaseMode0EPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $4, $2) | 0);
            $$4 = $186;
            STACKTOP = sp; return ($$4 | 0);
        }
        HEAP32[$5 >> 2] = 0;
        $30 = ((($7)) + 3908 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = (($31) + ($10 << 1) | 0);
        HEAP16[$32 >> 1] = 256;
        $33 = ((($7)) + 3964 | 0);
        $34 = HEAP32[$33 >> 2] | 0;
        $35 = (($34) + (($10 * 24) | 0) | 0);
        HEAP8[$35 >> 0] = 0 & 255; HEAP8[$35 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$35 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$35 + 3 >> 0] = 0 >> 24;
        $36 = HEAP32[$33 >> 2] | 0;
        $37 = (((($36) + (($10 * 24) | 0) | 0)) + 4 | 0);
        HEAP8[$37 >> 0] = 0 & 255; HEAP8[$37 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$37 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$37 + 3 >> 0] = 0 >> 24;
        $38 = HEAP32[$33 >> 2] | 0;
        $39 = (((($38) + (($10 * 24) | 0) | 0)) + 8 | 0);
        HEAP8[$39 >> 0] = 0 & 255; HEAP8[$39 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$39 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$39 + 3 >> 0] = 0 >> 24;
        $40 = HEAP32[$33 >> 2] | 0;
        $41 = (((($40) + (($10 * 24) | 0) | 0)) + 12 | 0);
        HEAP8[$41 >> 0] = 0 & 255; HEAP8[$41 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$41 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$41 + 3 >> 0] = 0 >> 24;
        $42 = HEAP32[$33 >> 2] | 0;
        $43 = (((($42) + (($10 * 24) | 0) | 0)) + 16 | 0);
        HEAP8[$43 >> 0] = 0 & 255; HEAP8[$43 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$43 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$43 + 3 >> 0] = 0 >> 24;
        $44 = HEAP32[$33 >> 2] | 0;
        $45 = (((($44) + (($10 * 24) | 0) | 0)) + 20 | 0);
        HEAP8[$45 >> 0] = 0 & 255; HEAP8[$45 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$45 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$45 + 3 >> 0] = 0 >> 24;
        $46 = ((($7)) + 3976 | 0);
        $47 = HEAP32[$46 >> 2] | 0;
        $48 = (($47) + ($10) | 0);
        HEAP8[$48 >> 0] = 0;
        $49 = ((($7)) + 3932 | 0);
        $50 = HEAP32[$49 >> 2] | 0;
        $51 = (($50) + ($10 << 4) | 0);
        dest = $51; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 0 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
        $52 = ((($0)) + 512345 | 0);
        $53 = HEAP8[$52 >> 0] | 0;
        $54 = ($53 << 24 >> 24) == (0);
        $55 = ((($0)) + 512344 | 0);
        if ($54) {
            $56 = HEAP8[$55 >> 0] | 0;
            $57 = ($56 << 24 >> 24) == (0);
            if ($57) {
                $58 = HEAP32[$8 >> 2] | 0;
                $59 = ($58 | 0) == (0 | 0);
                if ($59) {
                    $63 = 1;
                } else {
                    $60 = ((($58)) + 72 | 0);
                    $61 = HEAP8[$60 >> 0] | 0;
                    $62 = $61 ^ 1;
                    $63 = $62;
                }
            } else {
                $63 = 1;
            }
        } else {
            $63 = 1;
        }
        HEAP8[$55 >> 0] = $63;
        __ZN7WelsDec23PredPSkipMvFromNeighborEPNS_10TagDqLayerEPs($7, $5);
        $64 = ((($7)) + 3916 | 0);
        $65 = ((($7)) + 3924 | 0);
        $66 = HEAP32[$5 >> 2] | 0;
        $67 = HEAP32[$64 >> 2] | 0;
        $68 = (($67) + ($10 << 6) | 0);
        HEAP8[$68 >> 0] = $66 & 255; HEAP8[$68 + 1 >> 0] = ($66 >> 8) & 255; HEAP8[$68 + 2 >> 0] = ($66 >> 16) & 255; HEAP8[$68 + 3 >> 0] = $66 >> 24;
        $69 = HEAP32[$65 >> 2] | 0;
        $70 = (($69) + ($10 << 6) | 0);
        HEAP8[$70 >> 0] = 0 & 255; HEAP8[$70 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$70 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$70 + 3 >> 0] = 0 >> 24;
        $71 = HEAP32[$5 >> 2] | 0;
        $72 = HEAP32[$64 >> 2] | 0;
        $73 = (((($72) + ($10 << 6) | 0)) + 4 | 0);
        HEAP8[$73 >> 0] = $71 & 255; HEAP8[$73 + 1 >> 0] = ($71 >> 8) & 255; HEAP8[$73 + 2 >> 0] = ($71 >> 16) & 255; HEAP8[$73 + 3 >> 0] = $71 >> 24;
        $74 = HEAP32[$65 >> 2] | 0;
        $75 = (((($74) + ($10 << 6) | 0)) + 4 | 0);
        HEAP8[$75 >> 0] = 0 & 255; HEAP8[$75 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$75 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$75 + 3 >> 0] = 0 >> 24;
        $76 = HEAP32[$5 >> 2] | 0;
        $77 = HEAP32[$64 >> 2] | 0;
        $78 = (((($77) + ($10 << 6) | 0)) + 8 | 0);
        HEAP8[$78 >> 0] = $76 & 255; HEAP8[$78 + 1 >> 0] = ($76 >> 8) & 255; HEAP8[$78 + 2 >> 0] = ($76 >> 16) & 255; HEAP8[$78 + 3 >> 0] = $76 >> 24;
        $79 = HEAP32[$65 >> 2] | 0;
        $80 = (((($79) + ($10 << 6) | 0)) + 8 | 0);
        HEAP8[$80 >> 0] = 0 & 255; HEAP8[$80 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$80 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$80 + 3 >> 0] = 0 >> 24;
        $81 = HEAP32[$5 >> 2] | 0;
        $82 = HEAP32[$64 >> 2] | 0;
        $83 = (((($82) + ($10 << 6) | 0)) + 12 | 0);
        HEAP8[$83 >> 0] = $81 & 255; HEAP8[$83 + 1 >> 0] = ($81 >> 8) & 255; HEAP8[$83 + 2 >> 0] = ($81 >> 16) & 255; HEAP8[$83 + 3 >> 0] = $81 >> 24;
        $84 = HEAP32[$65 >> 2] | 0;
        $85 = (((($84) + ($10 << 6) | 0)) + 12 | 0);
        HEAP8[$85 >> 0] = 0 & 255; HEAP8[$85 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$85 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$85 + 3 >> 0] = 0 >> 24;
        $86 = HEAP32[$5 >> 2] | 0;
        $87 = HEAP32[$64 >> 2] | 0;
        $88 = (((($87) + ($10 << 6) | 0)) + 16 | 0);
        HEAP8[$88 >> 0] = $86 & 255; HEAP8[$88 + 1 >> 0] = ($86 >> 8) & 255; HEAP8[$88 + 2 >> 0] = ($86 >> 16) & 255; HEAP8[$88 + 3 >> 0] = $86 >> 24;
        $89 = HEAP32[$65 >> 2] | 0;
        $90 = (((($89) + ($10 << 6) | 0)) + 16 | 0);
        HEAP8[$90 >> 0] = 0 & 255; HEAP8[$90 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$90 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$90 + 3 >> 0] = 0 >> 24;
        $91 = HEAP32[$5 >> 2] | 0;
        $92 = HEAP32[$64 >> 2] | 0;
        $93 = (((($92) + ($10 << 6) | 0)) + 20 | 0);
        HEAP8[$93 >> 0] = $91 & 255; HEAP8[$93 + 1 >> 0] = ($91 >> 8) & 255; HEAP8[$93 + 2 >> 0] = ($91 >> 16) & 255; HEAP8[$93 + 3 >> 0] = $91 >> 24;
        $94 = HEAP32[$65 >> 2] | 0;
        $95 = (((($94) + ($10 << 6) | 0)) + 20 | 0);
        HEAP8[$95 >> 0] = 0 & 255; HEAP8[$95 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$95 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$95 + 3 >> 0] = 0 >> 24;
        $96 = HEAP32[$5 >> 2] | 0;
        $97 = HEAP32[$64 >> 2] | 0;
        $98 = (((($97) + ($10 << 6) | 0)) + 24 | 0);
        HEAP8[$98 >> 0] = $96 & 255; HEAP8[$98 + 1 >> 0] = ($96 >> 8) & 255; HEAP8[$98 + 2 >> 0] = ($96 >> 16) & 255; HEAP8[$98 + 3 >> 0] = $96 >> 24;
        $99 = HEAP32[$65 >> 2] | 0;
        $100 = (((($99) + ($10 << 6) | 0)) + 24 | 0);
        HEAP8[$100 >> 0] = 0 & 255; HEAP8[$100 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$100 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$100 + 3 >> 0] = 0 >> 24;
        $101 = HEAP32[$5 >> 2] | 0;
        $102 = HEAP32[$64 >> 2] | 0;
        $103 = (((($102) + ($10 << 6) | 0)) + 28 | 0);
        HEAP8[$103 >> 0] = $101 & 255; HEAP8[$103 + 1 >> 0] = ($101 >> 8) & 255; HEAP8[$103 + 2 >> 0] = ($101 >> 16) & 255; HEAP8[$103 + 3 >> 0] = $101 >> 24;
        $104 = HEAP32[$65 >> 2] | 0;
        $105 = (((($104) + ($10 << 6) | 0)) + 28 | 0);
        HEAP8[$105 >> 0] = 0 & 255; HEAP8[$105 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$105 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$105 + 3 >> 0] = 0 >> 24;
        $106 = HEAP32[$5 >> 2] | 0;
        $107 = HEAP32[$64 >> 2] | 0;
        $108 = (((($107) + ($10 << 6) | 0)) + 32 | 0);
        HEAP8[$108 >> 0] = $106 & 255; HEAP8[$108 + 1 >> 0] = ($106 >> 8) & 255; HEAP8[$108 + 2 >> 0] = ($106 >> 16) & 255; HEAP8[$108 + 3 >> 0] = $106 >> 24;
        $109 = HEAP32[$65 >> 2] | 0;
        $110 = (((($109) + ($10 << 6) | 0)) + 32 | 0);
        HEAP8[$110 >> 0] = 0 & 255; HEAP8[$110 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$110 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$110 + 3 >> 0] = 0 >> 24;
        $111 = HEAP32[$5 >> 2] | 0;
        $112 = HEAP32[$64 >> 2] | 0;
        $113 = (((($112) + ($10 << 6) | 0)) + 36 | 0);
        HEAP8[$113 >> 0] = $111 & 255; HEAP8[$113 + 1 >> 0] = ($111 >> 8) & 255; HEAP8[$113 + 2 >> 0] = ($111 >> 16) & 255; HEAP8[$113 + 3 >> 0] = $111 >> 24;
        $114 = HEAP32[$65 >> 2] | 0;
        $115 = (((($114) + ($10 << 6) | 0)) + 36 | 0);
        HEAP8[$115 >> 0] = 0 & 255; HEAP8[$115 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$115 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$115 + 3 >> 0] = 0 >> 24;
        $116 = HEAP32[$5 >> 2] | 0;
        $117 = HEAP32[$64 >> 2] | 0;
        $118 = (((($117) + ($10 << 6) | 0)) + 40 | 0);
        HEAP8[$118 >> 0] = $116 & 255; HEAP8[$118 + 1 >> 0] = ($116 >> 8) & 255; HEAP8[$118 + 2 >> 0] = ($116 >> 16) & 255; HEAP8[$118 + 3 >> 0] = $116 >> 24;
        $119 = HEAP32[$65 >> 2] | 0;
        $120 = (((($119) + ($10 << 6) | 0)) + 40 | 0);
        HEAP8[$120 >> 0] = 0 & 255; HEAP8[$120 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$120 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$120 + 3 >> 0] = 0 >> 24;
        $121 = HEAP32[$5 >> 2] | 0;
        $122 = HEAP32[$64 >> 2] | 0;
        $123 = (((($122) + ($10 << 6) | 0)) + 44 | 0);
        HEAP8[$123 >> 0] = $121 & 255; HEAP8[$123 + 1 >> 0] = ($121 >> 8) & 255; HEAP8[$123 + 2 >> 0] = ($121 >> 16) & 255; HEAP8[$123 + 3 >> 0] = $121 >> 24;
        $124 = HEAP32[$65 >> 2] | 0;
        $125 = (((($124) + ($10 << 6) | 0)) + 44 | 0);
        HEAP8[$125 >> 0] = 0 & 255; HEAP8[$125 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$125 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$125 + 3 >> 0] = 0 >> 24;
        $126 = HEAP32[$5 >> 2] | 0;
        $127 = HEAP32[$64 >> 2] | 0;
        $128 = (((($127) + ($10 << 6) | 0)) + 48 | 0);
        HEAP8[$128 >> 0] = $126 & 255; HEAP8[$128 + 1 >> 0] = ($126 >> 8) & 255; HEAP8[$128 + 2 >> 0] = ($126 >> 16) & 255; HEAP8[$128 + 3 >> 0] = $126 >> 24;
        $129 = HEAP32[$65 >> 2] | 0;
        $130 = (((($129) + ($10 << 6) | 0)) + 48 | 0);
        HEAP8[$130 >> 0] = 0 & 255; HEAP8[$130 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$130 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$130 + 3 >> 0] = 0 >> 24;
        $131 = HEAP32[$5 >> 2] | 0;
        $132 = HEAP32[$64 >> 2] | 0;
        $133 = (((($132) + ($10 << 6) | 0)) + 52 | 0);
        HEAP8[$133 >> 0] = $131 & 255; HEAP8[$133 + 1 >> 0] = ($131 >> 8) & 255; HEAP8[$133 + 2 >> 0] = ($131 >> 16) & 255; HEAP8[$133 + 3 >> 0] = $131 >> 24;
        $134 = HEAP32[$65 >> 2] | 0;
        $135 = (((($134) + ($10 << 6) | 0)) + 52 | 0);
        HEAP8[$135 >> 0] = 0 & 255; HEAP8[$135 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$135 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$135 + 3 >> 0] = 0 >> 24;
        $136 = HEAP32[$5 >> 2] | 0;
        $137 = HEAP32[$64 >> 2] | 0;
        $138 = (((($137) + ($10 << 6) | 0)) + 56 | 0);
        HEAP8[$138 >> 0] = $136 & 255; HEAP8[$138 + 1 >> 0] = ($136 >> 8) & 255; HEAP8[$138 + 2 >> 0] = ($136 >> 16) & 255; HEAP8[$138 + 3 >> 0] = $136 >> 24;
        $139 = HEAP32[$65 >> 2] | 0;
        $140 = (((($139) + ($10 << 6) | 0)) + 56 | 0);
        HEAP8[$140 >> 0] = 0 & 255; HEAP8[$140 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$140 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$140 + 3 >> 0] = 0 >> 24;
        $141 = HEAP32[$5 >> 2] | 0;
        $142 = HEAP32[$64 >> 2] | 0;
        $143 = (((($142) + ($10 << 6) | 0)) + 60 | 0);
        HEAP8[$143 >> 0] = $141 & 255; HEAP8[$143 + 1 >> 0] = ($141 >> 8) & 255; HEAP8[$143 + 2 >> 0] = ($141 >> 16) & 255; HEAP8[$143 + 3 >> 0] = $141 >> 24;
        $144 = HEAP32[$65 >> 2] | 0;
        $145 = (((($144) + ($10 << 6) | 0)) + 60 | 0);
        HEAP8[$145 >> 0] = 0 & 255; HEAP8[$145 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$145 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$145 + 3 >> 0] = 0 >> 24;
        $146 = ((($7)) + 3868 | 0);
        $147 = HEAP32[$146 >> 2] | 0;
        $148 = $147 & 255;
        $149 = ((($7)) + 3948 | 0);
        $150 = HEAP32[$149 >> 2] | 0;
        $151 = (($150) + ($10) | 0);
        HEAP8[$151 >> 0] = $148;
        $152 = ((($7)) + 92 | 0);
        $153 = ((($7)) + 3952 | 0);
        $154 = HEAP32[$149 >> 2] | 0;
        $155 = (($154) + ($10) | 0);
        $156 = HEAP8[$155 >> 0] | 0;
        $157 = $156 << 24 >> 24;
        $158 = HEAP32[$152 >> 2] | 0;
        $159 = ((($158)) + 168 | 0);
        $160 = HEAP32[$159 >> 2] | 0;
        $161 = (($160) + ($157)) | 0;
        $162 = ($161 | 0) < (51);
        $$107 = $162 ? $161 : 51;
        $163 = ($161 | 0) > (0);
        $164 = $163 ? $$107 : 0;
        $165 = (10899 + ($164) | 0);
        $166 = HEAP8[$165 >> 0] | 0;
        $167 = HEAP32[$153 >> 2] | 0;
        $168 = (($167) + ($10 << 1) | 0);
        HEAP8[$168 >> 0] = $166;
        $169 = HEAP32[$149 >> 2] | 0;
        $170 = (($169) + ($10) | 0);
        $171 = HEAP8[$170 >> 0] | 0;
        $172 = $171 << 24 >> 24;
        $173 = HEAP32[$152 >> 2] | 0;
        $174 = ((($173)) + 172 | 0);
        $175 = HEAP32[$174 >> 2] | 0;
        $176 = (($175) + ($172)) | 0;
        $177 = ($176 | 0) < (51);
        $$107$1 = $177 ? $176 : 51;
        $178 = ($176 | 0) > (0);
        $179 = $178 ? $$107$1 : 0;
        $180 = (10899 + ($179) | 0);
        $181 = HEAP8[$180 >> 0] | 0;
        $182 = HEAP32[$153 >> 2] | 0;
        $183 = (((($182) + ($10 << 1) | 0)) + 1 | 0);
        HEAP8[$183 >> 0] = $181;
        $184 = ((($7)) + 3884 | 0);
        HEAP32[$184 >> 2] = 0;
        $185 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($0, $2) | 0);
        $$4 = $185;
        STACKTOP = sp; return ($$4 | 0);
    }
    function __ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = (__ZN7WelsDec32WelsDecodeMbCabacISliceBaseMode0EPNS_21TagWelsDecoderContextERj($0, $2) | 0);
        return ($3 | 0);
    }
    function __ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0119 = 0, $$122 = 0, $$122$1 = 0, $$3 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
        var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
        var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
        var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
        var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
        var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
        var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
        var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
        var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
        var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0;
        var stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $3 = sp + 28 | 0;
        $4 = sp + 24 | 0;
        $5 = ((($0)) + 241932 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($6)) + 3900 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($0)) + 5468 | 0);
        $10 = ((($6)) + 4040 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($6)) + 3964 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = (($13) + (($11 * 24) | 0) | 0);
        $15 = ((($6)) + 3940 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = (($16) + ($11) | 0);
        HEAP8[$17 >> 0] = 1;
        $18 = ((($6)) + 3944 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = (($19) + ($11) | 0);
        HEAP8[$20 >> 0] = 0;
        $21 = ((($6)) + 3872 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = ($22 | 0) == (-1);
        if ($23) {
            $24 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($8, $3) | 0);
            $25 = ($24 | 0) == (0);
            if (!($25)) {
                $$3 = $24;
                STACKTOP = sp; return ($$3 | 0);
            }
            $26 = HEAP32[$3 >> 2] | 0;
            HEAP32[$21 >> 2] = $26;
            $27 = ($26 | 0) == (-1);
            if ($27) {
                $$3 = -1;
                STACKTOP = sp; return ($$3 | 0);
            } else {
                $29 = $26;
            }
        } else {
            $29 = $22;
        }
        $28 = (($29) + -1) | 0;
        HEAP32[$21 >> 2] = $28;
        $30 = ($29 | 0) == (0);
        do {
            if ($30) {
                $151 = ((($6)) + 3856 | 0);
                $152 = HEAP8[$151 >> 0] | 0;
                $153 = ($152 << 24 >> 24) == (0);
                if ($153) {
                    $183 = ((($6)) + 3857 | 0);
                    $184 = HEAP8[$183 >> 0] | 0;
                    $185 = $184 & 255;
                    $$0119 = $185;
                } else {
                    $154 = ((($8)) + 20 | 0);
                    $155 = HEAP32[$154 >> 2] | 0;
                    $156 = $155 >>> 31;
                    $157 = ((($8)) + 4 | 0);
                    $158 = HEAP32[$157 >> 2] | 0;
                    $159 = HEAP32[$8 >> 2] | 0;
                    $160 = ((($8)) + 16 | 0);
                    $161 = HEAP32[$160 >> 2] | 0;
                    $162 = $155 << 1;
                    HEAP32[$154 >> 2] = $162;
                    $163 = ((($8)) + 24 | 0);
                    $164 = HEAP32[$163 >> 2] | 0;
                    $165 = (($164) + 1) | 0;
                    HEAP32[$163 >> 2] = $165;
                    $166 = ($164 | 0) > (-1);
                    $167 = $161;
                    do {
                        if ($166) {
                            $168 = (($161) - ($159)) | 0;
                            $169 = (($158) + 1) | 0;
                            $170 = (($169) - ($159)) | 0;
                            $171 = ($168 | 0) > ($170 | 0);
                            if ($171) {
                                $$3 = 11;
                                STACKTOP = sp; return ($$3 | 0);
                            } else {
                                $172 = HEAP8[$167 >> 0] | 0;
                                $173 = $172 & 255;
                                $174 = $173 << 8;
                                $175 = ((($167)) + 1 | 0);
                                $176 = HEAP8[$175 >> 0] | 0;
                                $177 = $176 & 255;
                                $178 = $174 | $177;
                                $179 = $178 << $165;
                                $180 = $179 | $162;
                                HEAP32[$154 >> 2] = $180;
                                $181 = (($164) + -15) | 0;
                                HEAP32[$163 >> 2] = $181;
                                $182 = ((($167)) + 2 | 0);
                                HEAP32[$160 >> 2] = $182;
                                break;
                            }
                        }
                    } while (0);
                    HEAP32[$3 >> 2] = $156;
                    $$0119 = $156;
                }
                $186 = ($$0119 | 0) == (0);
                if ($186) {
                    $187 = (__ZN7WelsDec29WelsActualDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextE($0) | 0);
                    $188 = ($187 | 0) == (0);
                    if ($188) {
                        break;
                    } else {
                        $$3 = $187;
                    }
                    STACKTOP = sp; return ($$3 | 0);
                } else {
                    HEAP32[$vararg_buffer >> 2] = $$0119;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25009, $vararg_buffer);
                    $$3 = 328742;
                    STACKTOP = sp; return ($$3 | 0);
                }
            } else {
                $31 = ((($6)) + 3908 | 0);
                $32 = HEAP32[$31 >> 2] | 0;
                $33 = (($32) + ($11 << 1) | 0);
                HEAP16[$33 >> 1] = 256;
                $34 = ((($6)) + 3976 | 0);
                ; HEAP32[$14 >> 2] = 0 | 0; HEAP32[$14 + 4 >> 2] = 0 | 0; HEAP32[$14 + 8 >> 2] = 0 | 0; HEAP32[$14 + 12 >> 2] = 0 | 0; HEAP32[$14 + 16 >> 2] = 0 | 0; HEAP32[$14 + 20 >> 2] = 0 | 0;
                $35 = HEAP32[$34 >> 2] | 0;
                $36 = (($35) + ($11) | 0);
                HEAP8[$36 >> 0] = 0;
                $37 = ((($6)) + 3932 | 0);
                $38 = HEAP32[$37 >> 2] | 0;
                $39 = (($38) + ($11 << 4) | 0);
                dest = $39; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 0 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                $40 = ((($0)) + 512345 | 0);
                $41 = HEAP8[$40 >> 0] | 0;
                $42 = ($41 << 24 >> 24) == (0);
                $43 = ((($0)) + 512344 | 0);
                if ($42) {
                    $44 = HEAP8[$43 >> 0] | 0;
                    $45 = ($44 << 24 >> 24) == (0);
                    if ($45) {
                        $46 = HEAP32[$9 >> 2] | 0;
                        $47 = ($46 | 0) == (0 | 0);
                        if ($47) {
                            $51 = 1;
                        } else {
                            $48 = ((($46)) + 72 | 0);
                            $49 = HEAP8[$48 >> 0] | 0;
                            $50 = $49 ^ 1;
                            $51 = $50;
                        }
                    } else {
                        $51 = 1;
                    }
                } else {
                    $51 = 1;
                }
                HEAP8[$43 >> 0] = $51;
                __ZN7WelsDec23PredPSkipMvFromNeighborEPNS_10TagDqLayerEPs($6, $4);
                $52 = ((($6)) + 3916 | 0);
                $53 = HEAP32[$4 >> 2] | 0;
                $54 = HEAP32[$52 >> 2] | 0;
                $55 = (($54) + ($11 << 6) | 0);
                HEAP32[$55 >> 2] = $53;
                $56 = HEAP32[$4 >> 2] | 0;
                $57 = HEAP32[$52 >> 2] | 0;
                $58 = (((($57) + ($11 << 6) | 0)) + 4 | 0);
                HEAP32[$58 >> 2] = $56;
                $59 = HEAP32[$4 >> 2] | 0;
                $60 = HEAP32[$52 >> 2] | 0;
                $61 = (((($60) + ($11 << 6) | 0)) + 8 | 0);
                HEAP32[$61 >> 2] = $59;
                $62 = HEAP32[$4 >> 2] | 0;
                $63 = HEAP32[$52 >> 2] | 0;
                $64 = (((($63) + ($11 << 6) | 0)) + 12 | 0);
                HEAP32[$64 >> 2] = $62;
                $65 = HEAP32[$4 >> 2] | 0;
                $66 = HEAP32[$52 >> 2] | 0;
                $67 = (((($66) + ($11 << 6) | 0)) + 16 | 0);
                HEAP32[$67 >> 2] = $65;
                $68 = HEAP32[$4 >> 2] | 0;
                $69 = HEAP32[$52 >> 2] | 0;
                $70 = (((($69) + ($11 << 6) | 0)) + 20 | 0);
                HEAP32[$70 >> 2] = $68;
                $71 = HEAP32[$4 >> 2] | 0;
                $72 = HEAP32[$52 >> 2] | 0;
                $73 = (((($72) + ($11 << 6) | 0)) + 24 | 0);
                HEAP32[$73 >> 2] = $71;
                $74 = HEAP32[$4 >> 2] | 0;
                $75 = HEAP32[$52 >> 2] | 0;
                $76 = (((($75) + ($11 << 6) | 0)) + 28 | 0);
                HEAP32[$76 >> 2] = $74;
                $77 = HEAP32[$4 >> 2] | 0;
                $78 = HEAP32[$52 >> 2] | 0;
                $79 = (((($78) + ($11 << 6) | 0)) + 32 | 0);
                HEAP32[$79 >> 2] = $77;
                $80 = HEAP32[$4 >> 2] | 0;
                $81 = HEAP32[$52 >> 2] | 0;
                $82 = (((($81) + ($11 << 6) | 0)) + 36 | 0);
                HEAP32[$82 >> 2] = $80;
                $83 = HEAP32[$4 >> 2] | 0;
                $84 = HEAP32[$52 >> 2] | 0;
                $85 = (((($84) + ($11 << 6) | 0)) + 40 | 0);
                HEAP32[$85 >> 2] = $83;
                $86 = HEAP32[$4 >> 2] | 0;
                $87 = HEAP32[$52 >> 2] | 0;
                $88 = (((($87) + ($11 << 6) | 0)) + 44 | 0);
                HEAP32[$88 >> 2] = $86;
                $89 = HEAP32[$4 >> 2] | 0;
                $90 = HEAP32[$52 >> 2] | 0;
                $91 = (((($90) + ($11 << 6) | 0)) + 48 | 0);
                HEAP32[$91 >> 2] = $89;
                $92 = HEAP32[$4 >> 2] | 0;
                $93 = HEAP32[$52 >> 2] | 0;
                $94 = (((($93) + ($11 << 6) | 0)) + 52 | 0);
                HEAP32[$94 >> 2] = $92;
                $95 = HEAP32[$4 >> 2] | 0;
                $96 = HEAP32[$52 >> 2] | 0;
                $97 = (((($96) + ($11 << 6) | 0)) + 56 | 0);
                HEAP32[$97 >> 2] = $95;
                $98 = HEAP32[$4 >> 2] | 0;
                $99 = HEAP32[$52 >> 2] | 0;
                $100 = (((($99) + ($11 << 6) | 0)) + 60 | 0);
                HEAP32[$100 >> 2] = $98;
                $101 = ((($6)) + 3861 | 0);
                $102 = HEAP8[$101 >> 0] | 0;
                $103 = ($102 << 24 >> 24) == (0);
                if ($103) {
                    label = 12;
                } else {
                    $104 = ((($1)) + 16 | 0);
                    $105 = HEAP8[$104 >> 0] | 0;
                    $106 = ($105 << 24 >> 24) == (0);
                    if ($106) {
                        $107 = ((($1)) + 15 | 0);
                        $108 = HEAP8[$107 >> 0] | 0;
                        $109 = ($108 << 24 >> 24) == (0);
                        if ($109) {
                            label = 12;
                        }
                    }
                }
                if ((label | 0) == 12) {
                    $110 = ((($6)) + 3868 | 0);
                    $111 = HEAP32[$110 >> 2] | 0;
                    $112 = $111 & 255;
                    $113 = ((($6)) + 3948 | 0);
                    $114 = HEAP32[$113 >> 2] | 0;
                    $115 = (($114) + ($11) | 0);
                    HEAP8[$115 >> 0] = $112;
                    $116 = ((($6)) + 92 | 0);
                    $117 = ((($6)) + 3952 | 0);
                    $118 = HEAP32[$113 >> 2] | 0;
                    $119 = (($118) + ($11) | 0);
                    $120 = HEAP8[$119 >> 0] | 0;
                    $121 = $120 << 24 >> 24;
                    $122 = HEAP32[$116 >> 2] | 0;
                    $123 = ((($122)) + 168 | 0);
                    $124 = HEAP32[$123 >> 2] | 0;
                    $125 = (($124) + ($121)) | 0;
                    $126 = ($125 | 0) < (51);
                    $$122 = $126 ? $125 : 51;
                    $127 = ($125 | 0) > (0);
                    $128 = $127 ? $$122 : 0;
                    $129 = (10899 + ($128) | 0);
                    $130 = HEAP8[$129 >> 0] | 0;
                    $131 = HEAP32[$117 >> 2] | 0;
                    $132 = (($131) + ($11 << 1) | 0);
                    HEAP8[$132 >> 0] = $130;
                    $133 = HEAP32[$113 >> 2] | 0;
                    $134 = (($133) + ($11) | 0);
                    $135 = HEAP8[$134 >> 0] | 0;
                    $136 = $135 << 24 >> 24;
                    $137 = HEAP32[$116 >> 2] | 0;
                    $138 = ((($137)) + 172 | 0);
                    $139 = HEAP32[$138 >> 2] | 0;
                    $140 = (($139) + ($136)) | 0;
                    $141 = ($140 | 0) < (51);
                    $$122$1 = $141 ? $140 : 51;
                    $142 = ($140 | 0) > (0);
                    $143 = $142 ? $$122$1 : 0;
                    $144 = (10899 + ($143) | 0);
                    $145 = HEAP8[$144 >> 0] | 0;
                    $146 = HEAP32[$117 >> 2] | 0;
                    $147 = (((($146) + ($11 << 1) | 0)) + 1 | 0);
                    HEAP8[$147 >> 0] = $145;
                }
                $148 = ((($6)) + 3956 | 0);
                $149 = HEAP32[$148 >> 2] | 0;
                $150 = (($149) + ($11) | 0);
                HEAP8[$150 >> 0] = 0;
            }
        } while (0);
        $189 = ((($8)) + 16 | 0);
        $190 = HEAP32[$189 >> 2] | 0;
        $191 = HEAP32[$8 >> 2] | 0;
        $192 = (($190) - ($191)) | 0;
        $193 = $192 << 3;
        $194 = ((($8)) + 24 | 0);
        $195 = HEAP32[$194 >> 2] | 0;
        $196 = (($195) + -16) | 0;
        $197 = (($196) + ($193)) | 0;
        $198 = ((($8)) + 8 | 0);
        $199 = HEAP32[$198 >> 2] | 0;
        $200 = (($199) + -1) | 0;
        $201 = ($197 | 0) == ($200 | 0);
        if ($201) {
            $202 = HEAP32[$21 >> 2] | 0;
            $203 = ($202 | 0) < (1);
            if ($203) {
                HEAP32[$2 >> 2] = 1;
                $$pre = HEAP32[$198 >> 2] | 0;
                $205 = $$pre;
            } else {
                $205 = $199;
            }
        } else {
            $205 = $199;
        }
        $204 = ($197 | 0) < ($205 | 0);
        if ($204) {
            $$3 = 0;
            STACKTOP = sp; return ($$3 | 0);
        }
        $206 = ($197 | 0) < (0);
        $207 = $206 << 31 >> 31;
        $208 = $vararg_buffer1;
        $209 = $208;
        HEAP32[$209 >> 2] = $197;
        $210 = (($208) + 4) | 0;
        $211 = $210;
        HEAP32[$211 >> 2] = $207;
        $vararg_ptr4 = ((($vararg_buffer1)) + 8 | 0);
        HEAP32[$vararg_ptr4 >> 2] = $205;
        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25072, $vararg_buffer1);
        $$3 = -1;
        STACKTOP = sp; return ($$3 | 0);
    }
    function __ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$040 = 0, $$1 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
        var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $3 = ((($0)) + 241932 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($4)) + 3900 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($4)) + 3856 | 0);
        $8 = HEAP8[$7 >> 0] | 0;
        $9 = ($8 << 24 >> 24) == (0);
        do {
            if ($9) {
                $39 = ((($4)) + 3857 | 0);
                $40 = HEAP8[$39 >> 0] | 0;
                $41 = $40 & 255;
                $$040 = $41;
            } else {
                $10 = ((($6)) + 20 | 0);
                $11 = HEAP32[$10 >> 2] | 0;
                $12 = $11 >>> 31;
                $13 = ((($6)) + 4 | 0);
                $14 = HEAP32[$13 >> 2] | 0;
                $15 = HEAP32[$6 >> 2] | 0;
                $16 = ((($6)) + 16 | 0);
                $17 = HEAP32[$16 >> 2] | 0;
                $18 = $11 << 1;
                HEAP32[$10 >> 2] = $18;
                $19 = ((($6)) + 24 | 0);
                $20 = HEAP32[$19 >> 2] | 0;
                $21 = (($20) + 1) | 0;
                HEAP32[$19 >> 2] = $21;
                $22 = ($20 | 0) > (-1);
                $23 = $17;
                if ($22) {
                    $24 = (($17) - ($15)) | 0;
                    $25 = (($14) + 1) | 0;
                    $26 = (($25) - ($15)) | 0;
                    $27 = ($24 | 0) > ($26 | 0);
                    if ($27) {
                        $$1 = 11;
                        STACKTOP = sp; return ($$1 | 0);
                    } else {
                        $28 = HEAP8[$23 >> 0] | 0;
                        $29 = $28 & 255;
                        $30 = $29 << 8;
                        $31 = ((($23)) + 1 | 0);
                        $32 = HEAP8[$31 >> 0] | 0;
                        $33 = $32 & 255;
                        $34 = $30 | $33;
                        $35 = $34 << $21;
                        $36 = $35 | $18;
                        HEAP32[$10 >> 2] = $36;
                        $37 = (($20) + -15) | 0;
                        HEAP32[$19 >> 2] = $37;
                        $38 = ((($23)) + 2 | 0);
                        HEAP32[$16 >> 2] = $38;
                        $$040 = $12;
                        break;
                    }
                } else {
                    $$040 = $12;
                }
            }
        } while (0);
        $42 = ($$040 | 0) == (0);
        if (!($42)) {
            HEAP32[$vararg_buffer >> 2] = $$040;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25009, $vararg_buffer);
            $$1 = 328742;
            STACKTOP = sp; return ($$1 | 0);
        }
        $43 = (__ZN7WelsDec29WelsActualDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextE($0) | 0);
        $44 = ($43 | 0) == (0);
        if (!($44)) {
            $$1 = $43;
            STACKTOP = sp; return ($$1 | 0);
        }
        $45 = ((($6)) + 16 | 0);
        $46 = HEAP32[$45 >> 2] | 0;
        $47 = HEAP32[$6 >> 2] | 0;
        $48 = (($46) - ($47)) | 0;
        $49 = $48 << 3;
        $50 = ((($6)) + 24 | 0);
        $51 = HEAP32[$50 >> 2] | 0;
        $52 = (($51) + -16) | 0;
        $53 = (($52) + ($49)) | 0;
        $54 = ((($6)) + 8 | 0);
        $55 = HEAP32[$54 >> 2] | 0;
        $56 = (($55) + -1) | 0;
        $57 = ($53 | 0) == ($56 | 0);
        if ($57) {
            $58 = ((($4)) + 3872 | 0);
            $59 = HEAP32[$58 >> 2] | 0;
            $60 = ($59 | 0) < (1);
            if ($60) {
                HEAP32[$2 >> 2] = 1;
                $$pre = HEAP32[$54 >> 2] | 0;
                $62 = $$pre;
            } else {
                $62 = $55;
            }
        } else {
            $62 = $55;
        }
        $61 = ($53 | 0) < ($62 | 0);
        if ($61) {
            $$1 = 0;
            STACKTOP = sp; return ($$1 | 0);
        }
        $63 = ($53 | 0) < (0);
        $64 = $63 << 31 >> 31;
        $65 = $vararg_buffer1;
        $66 = $65;
        HEAP32[$66 >> 2] = $53;
        $67 = (($65) + 4) | 0;
        $68 = $67;
        HEAP32[$68 >> 2] = $64;
        $vararg_ptr4 = ((($vararg_buffer1)) + 8 | 0);
        HEAP32[$vararg_ptr4 >> 2] = $62;
        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25072, $vararg_buffer1);
        $$1 = -1;
        STACKTOP = sp; return ($$1 | 0);
    }
    function __ZN7WelsDec31WelsFillCacheConstrain0IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0$sink = 0, $$045$sink = 0, $$49 = 0, $$51 = 0, $$52 = 0, $$sink50 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($3)) + 4040 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($0, $1, $3);
        $6 = HEAP32[$0 >> 2] | 0;
        $7 = ($6 | 0) == (0);
        $8 = ((($0)) + 4 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ($9 | 0) == (0);
        $11 = (($5) + -1) | 0;
        $$52 = $10 ? 0 : $11;
        L1: do {
            if ($7) {
                label = 4;
            } else {
                $12 = ((($0)) + 20 | 0);
                $13 = HEAP32[$12 >> 2] | 0;
                switch ($13 | 0) {
                    case 4: case 1: {
                        break;
                    }
                    default: {
                        label = 4;
                        break L1;
                    }
                }
                $14 = ((($3)) + 4044 | 0);
                $15 = HEAP32[$14 >> 2] | 0;
                $16 = (($5) - ($15)) | 0;
                $17 = ((($3)) + 3992 | 0);
                $18 = HEAP32[$17 >> 2] | 0;
                $19 = (($18) + ($16 << 3) | 0);
                $20 = HEAPU8[$19 >> 0] | (HEAPU8[$19 + 1 >> 0] << 8) | (HEAPU8[$19 + 2 >> 0] << 16) | (HEAPU8[$19 + 3 >> 0] << 24);
                $$045$sink = $20;
            }
        } while (0);
        if ((label | 0) == 4) {
            $$49 = $7 ? -1 : 33686018;
            $$045$sink = $$49;
        }
        $21 = ((($2)) + 1 | 0);
        HEAP8[$21 >> 0] = $$045$sink & 255; HEAP8[$21 + 1 >> 0] = ($$045$sink >> 8) & 255; HEAP8[$21 + 2 >> 0] = ($$045$sink >> 16) & 255; HEAP8[$21 + 3 >> 0] = $$045$sink >> 24;
        $22 = HEAP32[$8 >> 2] | 0;
        $23 = ($22 | 0) == (0);
        L7: do {
            if (!($23)) {
                $24 = ((($0)) + 16 | 0);
                $25 = HEAP32[$24 >> 2] | 0;
                switch ($25 | 0) {
                    case 4: case 1: {
                        break;
                    }
                    default: {
                        break L7;
                    }
                }
                $26 = ((($3)) + 3992 | 0);
                $27 = HEAP32[$26 >> 2] | 0;
                $28 = (((($27) + ($$52 << 3) | 0)) + 4 | 0);
                $29 = HEAP8[$28 >> 0] | 0;
                $30 = ((($2)) + 8 | 0);
                HEAP8[$30 >> 0] = $29;
                $31 = HEAP32[$26 >> 2] | 0;
                $32 = (((($31) + ($$52 << 3) | 0)) + 5 | 0);
                $33 = HEAP8[$32 >> 0] | 0;
                $34 = ((($2)) + 16 | 0);
                HEAP8[$34 >> 0] = $33;
                $35 = HEAP32[$26 >> 2] | 0;
                $36 = (((($35) + ($$52 << 3) | 0)) + 6 | 0);
                $37 = HEAP8[$36 >> 0] | 0;
                $38 = ((($2)) + 24 | 0);
                HEAP8[$38 >> 0] = $37;
                $39 = HEAP32[$26 >> 2] | 0;
                $40 = (((($39) + ($$52 << 3) | 0)) + 3 | 0);
                $41 = HEAP8[$40 >> 0] | 0;
                $$0$sink = $41; $$sink50 = 32;
                $45 = (($2) + ($$sink50) | 0);
                HEAP8[$45 >> 0] = $$0$sink;
                return;
            }
        } while (0);
        $$51 = $23 ? -1 : 2;
        $42 = ((($2)) + 32 | 0);
        HEAP8[$42 >> 0] = $$51;
        $43 = ((($2)) + 24 | 0);
        HEAP8[$43 >> 0] = $$51;
        $44 = ((($2)) + 16 | 0);
        HEAP8[$44 >> 0] = $$51;
        $$0$sink = $$51; $$sink50 = 8;
        $45 = (($2) + ($$sink50) | 0);
        HEAP8[$45 >> 0] = $$0$sink;
        return;
    }
    function __ZN7WelsDec31WelsFillCacheConstrain1IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0 = 0, $$0$sink = 0, $$045$sink = 0, $$50 = 0, $$phi$trans$insert = 0, $$pre = 0, $$sink49 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($3)) + 4040 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($0, $1, $3);
        $6 = HEAP32[$0 >> 2] | 0;
        $7 = ($6 | 0) == (0);
        $8 = ((($0)) + 4 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ($9 | 0) == (0);
        $11 = (($5) + -1) | 0;
        $$50 = $10 ? 0 : $11;
        if ($7) {
            label = 4;
        } else {
            $12 = ((($0)) + 20 | 0);
            $13 = HEAP32[$12 >> 2] | 0;
            $14 = ($13 | 0) == (1);
            if ($14) {
                $15 = ((($3)) + 4044 | 0);
                $16 = HEAP32[$15 >> 2] | 0;
                $17 = (($5) - ($16)) | 0;
                $18 = ((($3)) + 3992 | 0);
                $19 = HEAP32[$18 >> 2] | 0;
                $20 = (($19) + ($17 << 3) | 0);
                $21 = HEAPU8[$20 >> 0] | (HEAPU8[$20 + 1 >> 0] << 8) | (HEAPU8[$20 + 2 >> 0] << 16) | (HEAPU8[$20 + 3 >> 0] << 24);
                $$045$sink = $21;
            } else {
                label = 4;
            }
        }
        L4: do {
            if ((label | 0) == 4) {
                $22 = ((($0)) + 20 | 0);
                $23 = HEAP32[$22 >> 2] | 0;
                switch ($23 | 0) {
                    case 512: case 2: {
                        $$045$sink = 33686018;
                        break L4;
                        break;
                    }
                    default: {
                    }
                }
                $$045$sink = -1;
            }
        } while (0);
        $24 = ((($2)) + 1 | 0);
        HEAP8[$24 >> 0] = $$045$sink & 255; HEAP8[$24 + 1 >> 0] = ($$045$sink >> 8) & 255; HEAP8[$24 + 2 >> 0] = ($$045$sink >> 16) & 255; HEAP8[$24 + 3 >> 0] = $$045$sink >> 24;
        $25 = HEAP32[$8 >> 2] | 0;
        $26 = ($25 | 0) != (0);
        $$phi$trans$insert = ((($0)) + 16 | 0);
        $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
        $27 = ($$pre | 0) == (1);
        $or$cond = $26 & $27;
        if ($or$cond) {
            $28 = ((($3)) + 3992 | 0);
            $29 = HEAP32[$28 >> 2] | 0;
            $30 = (((($29) + ($$50 << 3) | 0)) + 4 | 0);
            $31 = HEAP8[$30 >> 0] | 0;
            $32 = ((($2)) + 8 | 0);
            HEAP8[$32 >> 0] = $31;
            $33 = HEAP32[$28 >> 2] | 0;
            $34 = (((($33) + ($$50 << 3) | 0)) + 5 | 0);
            $35 = HEAP8[$34 >> 0] | 0;
            $36 = ((($2)) + 16 | 0);
            HEAP8[$36 >> 0] = $35;
            $37 = HEAP32[$28 >> 2] | 0;
            $38 = (((($37) + ($$50 << 3) | 0)) + 6 | 0);
            $39 = HEAP8[$38 >> 0] | 0;
            $40 = ((($2)) + 24 | 0);
            HEAP8[$40 >> 0] = $39;
            $41 = HEAP32[$28 >> 2] | 0;
            $42 = (((($41) + ($$50 << 3) | 0)) + 3 | 0);
            $43 = HEAP8[$42 >> 0] | 0;
            $$0$sink = $43; $$sink49 = 32;
            $47 = (($2) + ($$sink49) | 0);
            HEAP8[$47 >> 0] = $$0$sink;
            return;
        }
        switch ($$pre | 0) {
            case 512: case 2: {
                $$0 = 2;
                break;
            }
            default: {
                $$0 = -1;
            }
        }
        $44 = ((($2)) + 32 | 0);
        HEAP8[$44 >> 0] = $$0;
        $45 = ((($2)) + 24 | 0);
        HEAP8[$45 >> 0] = $$0;
        $46 = ((($2)) + 16 | 0);
        HEAP8[$46 >> 0] = $$0;
        $$0$sink = $$0; $$sink49 = 8;
        $47 = (($2) + ($$sink49) | 0);
        HEAP8[$47 >> 0] = $$0$sink;
        return;
    }
    function __ZN7WelsDec29WelsMapNxNNeighToSampleNormalEPNS_16TagNeighborAvailEPi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 4 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ($3 | 0) == (0);
        if (!($4)) {
            $5 = ((($1)) + 96 | 0);
            HEAP32[$5 >> 2] = 1;
            $6 = ((($1)) + 72 | 0);
            HEAP32[$6 >> 2] = 1;
            $7 = ((($1)) + 48 | 0);
            HEAP32[$7 >> 2] = 1;
            $8 = ((($1)) + 24 | 0);
            HEAP32[$8 >> 2] = 1;
        }
        $9 = ((($0)) + 12 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ($10 | 0) == (0);
        if (!($11)) {
            HEAP32[$1 >> 2] = 1;
        }
        $12 = HEAP32[$0 >> 2] | 0;
        $13 = ($12 | 0) == (0);
        if (!($13)) {
            $14 = ((($1)) + 16 | 0);
            HEAP32[$14 >> 2] = 1;
            $15 = ((($1)) + 12 | 0);
            HEAP32[$15 >> 2] = 1;
            $16 = ((($1)) + 8 | 0);
            HEAP32[$16 >> 2] = 1;
            $17 = ((($1)) + 4 | 0);
            HEAP32[$17 >> 2] = 1;
        }
        $18 = ((($0)) + 8 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ($19 | 0) == (0);
        if ($20) {
            return;
        }
        $21 = ((($1)) + 20 | 0);
        HEAP32[$21 >> 2] = 1;
        return;
    }
    function __ZN7WelsDec33WelsMapNxNNeighToSampleConstrain1EPNS_16TagNeighborAvailEPi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 4 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ($3 | 0) == (0);
        if (!($4)) {
            $5 = ((($0)) + 16 | 0);
            $6 = HEAP32[$5 >> 2] | 0;
            $7 = $6 & 519;
            $8 = ($7 | 0) == (0);
            if (!($8)) {
                $9 = ((($1)) + 96 | 0);
                HEAP32[$9 >> 2] = 1;
                $10 = ((($1)) + 72 | 0);
                HEAP32[$10 >> 2] = 1;
                $11 = ((($1)) + 48 | 0);
                HEAP32[$11 >> 2] = 1;
                $12 = ((($1)) + 24 | 0);
                HEAP32[$12 >> 2] = 1;
            }
        }
        $13 = ((($0)) + 12 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ($14 | 0) == (0);
        if (!($15)) {
            $16 = ((($0)) + 24 | 0);
            $17 = HEAP32[$16 >> 2] | 0;
            $18 = $17 & 519;
            $19 = ($18 | 0) == (0);
            if (!($19)) {
                HEAP32[$1 >> 2] = 1;
            }
        }
        $20 = HEAP32[$0 >> 2] | 0;
        $21 = ($20 | 0) == (0);
        if (!($21)) {
            $22 = ((($0)) + 20 | 0);
            $23 = HEAP32[$22 >> 2] | 0;
            $24 = $23 & 519;
            $25 = ($24 | 0) == (0);
            if (!($25)) {
                $26 = ((($1)) + 16 | 0);
                HEAP32[$26 >> 2] = 1;
                $27 = ((($1)) + 12 | 0);
                HEAP32[$27 >> 2] = 1;
                $28 = ((($1)) + 8 | 0);
                HEAP32[$28 >> 2] = 1;
                $29 = ((($1)) + 4 | 0);
                HEAP32[$29 >> 2] = 1;
            }
        }
        $30 = ((($0)) + 8 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = ($31 | 0) == (0);
        if ($32) {
            return;
        }
        $33 = ((($0)) + 28 | 0);
        $34 = HEAP32[$33 >> 2] | 0;
        $35 = $34 & 519;
        $36 = ($35 | 0) == (0);
        if ($36) {
            return;
        }
        $37 = ((($1)) + 20 | 0);
        HEAP32[$37 >> 2] = 1;
        return;
    }
    function __ZN7WelsDec31WelsMap16x16NeighToSampleNormalEPNS_16TagNeighborAvailEPh($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 4 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ($3 | 0) == (0);
        if (!($4)) {
            HEAP8[$1 >> 0] = 4;
        }
        $5 = ((($0)) + 12 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ($6 | 0) == (0);
        if (!($7)) {
            $8 = HEAP8[$1 >> 0] | 0;
            $9 = $8 | 2;
            HEAP8[$1 >> 0] = $9;
        }
        $10 = HEAP32[$0 >> 2] | 0;
        $11 = ($10 | 0) == (0);
        if ($11) {
            return;
        }
        $12 = HEAP8[$1 >> 0] | 0;
        $13 = $12 | 1;
        HEAP8[$1 >> 0] = $13;
        return;
    }
    function __ZN7WelsDec35WelsMap16x16NeighToSampleConstrain1EPNS_16TagNeighborAvailEPh($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
        var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 4 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ($3 | 0) == (0);
        if (!($4)) {
            $5 = ((($0)) + 16 | 0);
            $6 = HEAP32[$5 >> 2] | 0;
            $7 = $6 & 519;
            $8 = ($7 | 0) == (0);
            if (!($8)) {
                HEAP8[$1 >> 0] = 4;
            }
        }
        $9 = ((($0)) + 12 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ($10 | 0) == (0);
        if (!($11)) {
            $12 = ((($0)) + 24 | 0);
            $13 = HEAP32[$12 >> 2] | 0;
            $14 = $13 & 519;
            $15 = ($14 | 0) == (0);
            if (!($15)) {
                $16 = HEAP8[$1 >> 0] | 0;
                $17 = $16 | 2;
                HEAP8[$1 >> 0] = $17;
            }
        }
        $18 = HEAP32[$0 >> 2] | 0;
        $19 = ($18 | 0) == (0);
        if ($19) {
            return;
        }
        $20 = ((($0)) + 20 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = $21 & 519;
        $23 = ($22 | 0) == (0);
        if ($23) {
            return;
        }
        $24 = HEAP8[$1 >> 0] | 0;
        $25 = $24 | 1;
        HEAP8[$1 >> 0] = $25;
        return;
    }
    function __ZN7WelsDec20WelsCabacContextInitEPNS_21TagWelsDecoderContextEhii($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($0)) + 100 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ($5 | 0) == (2);
        $7 = (($2) + 1) | 0;
        $8 = $6 ? 0 : $7;
        $9 = ((($0)) + 511308 | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = ($10 << 24 >> 24) == (0);
        if ($11) {
            __ZN7WelsDec19WelsCabacGlobalInitEPNS_21TagWelsDecoderContextE($0);
        }
        $12 = ((($0)) + 511309 | 0);
        $13 = ((((($0)) + 319948 | 0) + (($8 * 47840) | 0) | 0) + (($3 * 920) | 0) | 0);
        _memcpy(($12 | 0), ($13 | 0), 920) | 0;
        return;
    }
    function __ZN7WelsDec24InitCabacDecEngineFromBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($1)) + 24 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = (0 - ($3)) | 0;
        $5 = $4 >> 3;
        $6 = ((($1)) + 16 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (-2 - ($5)) | 0;
        $9 = (($7) + ($8) | 0);
        $10 = ((($1)) + 4 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($11)) + -1 | 0);
        $13 = ($9 >>> 0) < ($12 >>> 0);
        if (!($13)) {
            $$0 = 2;
            return ($$0 | 0);
        }
        $14 = HEAP8[$9 >> 0] | 0;
        $15 = $14 & 255;
        $16 = $15 << 16;
        $17 = ((($9)) + 1 | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = $18 & 255;
        $20 = $19 << 8;
        $21 = $20 | $16;
        $22 = ((($9)) + 2 | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = $23 & 255;
        $25 = $21 | $24;
        $26 = ((($0)) + 8 | 0);
        $27 = (_bitshift64Shl(($25 | 0), 0, 16) | 0);
        $28 = tempRet0;
        $29 = $26;
        $30 = $29;
        HEAP32[$30 >> 2] = $27;
        $31 = (($29) + 4) | 0;
        $32 = $31;
        HEAP32[$32 >> 2] = $28;
        $33 = ((($9)) + 3 | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = $34 & 255;
        $36 = $35 << 8;
        $37 = ((($9)) + 4 | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = $38 & 255;
        $40 = $36 | $39;
        $41 = $27 | $40;
        $42 = $26;
        $43 = $42;
        HEAP32[$43 >> 2] = $41;
        $44 = (($42) + 4) | 0;
        $45 = $44;
        HEAP32[$45 >> 2] = $28;
        $46 = ((($0)) + 16 | 0);
        HEAP32[$46 >> 2] = 31;
        $47 = ((($9)) + 5 | 0);
        $48 = ((($0)) + 24 | 0);
        HEAP32[$48 >> 2] = $47;
        $49 = $0;
        $50 = $49;
        HEAP32[$50 >> 2] = 510;
        $51 = (($49) + 4) | 0;
        $52 = $51;
        HEAP32[$52 >> 2] = 0;
        $53 = HEAP32[$1 >> 2] | 0;
        $54 = ((($0)) + 20 | 0);
        HEAP32[$54 >> 2] = $53;
        $55 = HEAP32[$10 >> 2] | 0;
        $56 = ((($0)) + 28 | 0);
        HEAP32[$56 >> 2] = $55;
        HEAP32[$2 >> 2] = 0;
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec27WelsCalcDeqCoeffScalingListEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0108 = 0, $$096107 = 0, $$097109 = 0, $$098111 = 0, $$1110 = 0, $$pre = 0, $$sink = 0, $$sink103 = 0, $$udiv = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
        var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
        var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
        var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
        var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
        var $exitcond = 0, $exitcond113 = 0, $exitcond114 = 0, $exitcond115 = 0, $exitcond116 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 241924 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 335 | 0);
        $4 = HEAP8[$3 >> 0] | 0;
        $5 = ($4 << 24 >> 24) == (0);
        if ($5) {
            $6 = ((($0)) + 241928 | 0);
            $7 = HEAP32[$6 >> 2] | 0;
            $8 = ((($7)) + 185 | 0);
            $9 = HEAP8[$8 >> 0] | 0;
            $10 = ($9 << 24 >> 24) == (0);
            if ($10) {
                $91 = ((($0)) + 562526 | 0);
                HEAP8[$91 >> 0] = 0;
                return 0;
            }
        }
        $11 = ((($0)) + 562526 | 0);
        HEAP8[$11 >> 0] = 1;
        $12 = ((($0)) + 562524 | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = ($13 << 24 >> 24) == (0);
        if (!($14)) {
            $15 = ((($0)) + 562520 | 0);
            $16 = HEAP32[$15 >> 2] | 0;
            $17 = ((($0)) + 241928 | 0);
            $18 = HEAP32[$17 >> 2] | 0;
            $19 = ((($18)) + 4 | 0);
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = ($16 | 0) == ($20 | 0);
            if ($21) {
                return 0;
            }
        }
        $22 = ((($0)) + 562525 | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = ($23 << 24 >> 24) == (0);
        $$pre = ((($0)) + 241928 | 0);
        if ($24) {
            $$1110 = 0;
        } else {
            $$098111 = 0;
            while (1) {
                $25 = HEAP32[$$pre >> 2] | 0;
                $26 = (((($25)) + 186 | 0) + ($$098111) | 0);
                $27 = HEAP8[$26 >> 0] | 0;
                $28 = ($27 << 24 >> 24) == (0);
                L13: do {
                    if ($28) {
                        $29 = ($$098111 | 0) < (6);
                        if ($29) {
                            $30 = (((($25)) + 198 | 0) + ($$098111 << 4) | 0);
                            switch ($$098111 | 0) {
                                case 0: case 3: {
                                    $31 = HEAP32[$1 >> 2] | 0;
                                    $32 = (((($31)) + 348 | 0) + ($$098111 << 4) | 0);
                                    ; HEAP16[$30 >> 1] = HEAP16[$32 >> 1] | 0; HEAP16[$30 + 2 >> 1] = HEAP16[$32 + 2 >> 1] | 0; HEAP16[$30 + 4 >> 1] = HEAP16[$32 + 4 >> 1] | 0; HEAP16[$30 + 6 >> 1] = HEAP16[$32 + 6 >> 1] | 0; HEAP16[$30 + 8 >> 1] = HEAP16[$32 + 8 >> 1] | 0; HEAP16[$30 + 10 >> 1] = HEAP16[$32 + 10 >> 1] | 0; HEAP16[$30 + 12 >> 1] = HEAP16[$32 + 12 >> 1] | 0; HEAP16[$30 + 14 >> 1] = HEAP16[$32 + 14 >> 1] | 0;
                                    break L13;
                                    break;
                                }
                                default: {
                                    $33 = (($$098111) + -1) | 0;
                                    $34 = (((($25)) + 198 | 0) + ($33 << 4) | 0);
                                    ; HEAP16[$30 >> 1] = HEAP16[$34 >> 1] | 0; HEAP16[$30 + 2 >> 1] = HEAP16[$34 + 2 >> 1] | 0; HEAP16[$30 + 4 >> 1] = HEAP16[$34 + 4 >> 1] | 0; HEAP16[$30 + 6 >> 1] = HEAP16[$34 + 6 >> 1] | 0; HEAP16[$30 + 8 >> 1] = HEAP16[$34 + 8 >> 1] | 0; HEAP16[$30 + 10 >> 1] = HEAP16[$34 + 10 >> 1] | 0; HEAP16[$30 + 12 >> 1] = HEAP16[$34 + 12 >> 1] | 0; HEAP16[$30 + 14 >> 1] = HEAP16[$34 + 14 >> 1] | 0;
                                    break L13;
                                }
                            }
                        } else {
                            $35 = $$098111 | 1;
                            $36 = ($35 | 0) == (7);
                            $37 = (($$098111) + -6) | 0;
                            $38 = (((($25)) + 294 | 0) + ($37 << 6) | 0);
                            if ($36) {
                                $39 = HEAP32[$1 >> 2] | 0;
                                $40 = (((($39)) + 444 | 0) + ($37 << 6) | 0);
                                dest = $38; src = $40; stop = dest + 64 | 0; do { HEAP16[dest >> 1] = HEAP16[src >> 1] | 0; dest = dest + 2 | 0; src = src + 2 | 0; } while ((dest | 0) < (stop | 0));
                                break;
                            } else {
                                $41 = (($$098111) + -8) | 0;
                                $42 = (((($25)) + 294 | 0) + ($41 << 6) | 0);
                                dest = $38; src = $42; stop = dest + 64 | 0; do { HEAP16[dest >> 1] = HEAP16[src >> 1] | 0; dest = dest + 2 | 0; src = src + 2 | 0; } while ((dest | 0) < (stop | 0));
                                break;
                            }
                        }
                    }
                } while (0);
                $43 = (($$098111) + 1) | 0;
                $exitcond116 = ($43 | 0) == (12);
                if ($exitcond116) {
                    $$1110 = 0;
                    break;
                } else {
                    $$098111 = $43;
                }
            }
        }
        while (1) {
            $44 = (((($0)) + 512552 | 0) + (($$1110 * 1664) | 0) | 0);
            $45 = (((($0)) + 562472 | 0) + ($$1110 << 2) | 0);
            HEAP32[$45 >> 2] = $44;
            $46 = (((($0)) + 522536 | 0) + (($$1110 * 6656) | 0) | 0);
            $47 = (((($0)) + 562496 | 0) + ($$1110 << 2) | 0);
            HEAP32[$47 >> 2] = $46;
            $$097109 = 0;
            while (1) {
                $$096107 = 0;
                while (1) {
                    $49 = HEAP32[$$pre >> 2] | 0;
                    $50 = ((($49)) + 185 | 0);
                    $51 = HEAP8[$50 >> 0] | 0;
                    $52 = ($51 << 24 >> 24) == (0);
                    if ($52) {
                        $54 = HEAP32[$1 >> 2] | 0;
                        $55 = ((((($54)) + 348 | 0) + ($$1110 << 4) | 0) + ($$096107) | 0);
                        $$sink = $55;
                    } else {
                        $53 = ((((($49)) + 198 | 0) + ($$1110 << 4) | 0) + ($$096107) | 0);
                        $$sink = $53;
                    }
                    $56 = HEAP8[$$sink >> 0] | 0;
                    $57 = $56 & 255;
                    $58 = $$096107 & 7;
                    $59 = ((16 + ($$097109 << 4) | 0) + ($58 << 1) | 0);
                    $60 = HEAP16[$59 >> 1] | 0;
                    $61 = $60 & 65535;
                    $62 = Math_imul($61, $57) | 0;
                    $63 = $62 & 65535;
                    $64 = HEAP32[$45 >> 2] | 0;
                    $65 = ((($64) + ($$097109 << 5) | 0) + ($$096107 << 1) | 0);
                    HEAP16[$65 >> 1] = $63;
                    $66 = (($$096107) + 1) | 0;
                    $exitcond = ($66 | 0) == (16);
                    if ($exitcond) {
                        break;
                    } else {
                        $$096107 = $66;
                    }
                }
                $48 = (($$097109 | 0) % 6) & -1;
                $$0108 = 0;
                while (1) {
                    $67 = HEAP32[$$pre >> 2] | 0;
                    $68 = ((($67)) + 185 | 0);
                    $69 = HEAP8[$68 >> 0] | 0;
                    $70 = ($69 << 24 >> 24) == (0);
                    if ($70) {
                        $72 = HEAP32[$1 >> 2] | 0;
                        $73 = ((((($72)) + 444 | 0) + ($$1110 << 6) | 0) + ($$0108) | 0);
                        $$sink103 = $73;
                    } else {
                        $71 = ((((($67)) + 294 | 0) + ($$1110 << 6) | 0) + ($$0108) | 0);
                        $$sink103 = $71;
                    }
                    $74 = HEAP8[$$sink103 >> 0] | 0;
                    $75 = $74 & 255;
                    $$udiv = $$0108 >>> 3;
                    $76 = (($$0108 | 0) % 8) & -1;
                    $77 = (((24625 + ($48 << 6) | 0) + ($$udiv << 3) | 0) + ($76) | 0);
                    $78 = HEAP8[$77 >> 0] | 0;
                    $79 = $78 & 255;
                    $80 = Math_imul($79, $75) | 0;
                    $81 = $80 & 65535;
                    $82 = HEAP32[$47 >> 2] | 0;
                    $83 = ((($82) + ($$097109 << 7) | 0) + ($$0108 << 1) | 0);
                    HEAP16[$83 >> 1] = $81;
                    $84 = (($$0108) + 1) | 0;
                    $exitcond113 = ($84 | 0) == (64);
                    if ($exitcond113) {
                        break;
                    } else {
                        $$0108 = $84;
                    }
                }
                $85 = (($$097109) + 1) | 0;
                $exitcond114 = ($85 | 0) == (51);
                if ($exitcond114) {
                    break;
                } else {
                    $$097109 = $85;
                }
            }
            $86 = (($$1110) + 1) | 0;
            $exitcond115 = ($86 | 0) == (6);
            if ($exitcond115) {
                break;
            } else {
                $$1110 = $86;
            }
        }
        HEAP8[$12 >> 0] = 1;
        $87 = HEAP32[$$pre >> 2] | 0;
        $88 = ((($87)) + 4 | 0);
        $89 = HEAP32[$88 >> 2] | 0;
        $90 = ((($0)) + 562520 | 0);
        HEAP32[$90 >> 2] = $89;
        return 0;
    }
    function __ZN7WelsDec19WelsCabacGlobalInitEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$ = 0, $$$1 = 0, $$$2 = 0, $$$3 = 0, $$0 = 0, $$0$1 = 0, $$0$2 = 0, $$0$3 = 0, $$0$in = 0, $$0$in$1 = 0, $$0$in$2 = 0, $$0$in$3 = 0, $$042 = 0, $$042$1 = 0, $$042$2 = 0, $$042$3 = 0, $$04448 = 0, $$04448$1 = 0, $$04448$2 = 0, $$04448$3 = 0;
        var $$04547 = 0, $$04547$1 = 0, $$04547$2 = 0, $$04547$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0;
        var $9 = 0, $exitcond = 0, $exitcond$1 = 0, $exitcond$2 = 0, $exitcond$3 = 0, $exitcond50 = 0, $exitcond50$1 = 0, $exitcond50$2 = 0, $exitcond50$3 = 0, $not$ = 0, $not$$1 = 0, $not$$2 = 0, $not$$3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $$04448 = 0;
        while (1) {
            $$04547 = 0;
            while (1) {
                $2 = (10991 + ($$04547 << 3) | 0);
                $3 = HEAP8[$2 >> 0] | 0;
                $4 = $3 << 24 >> 24;
                $5 = (((10991 + ($$04547 << 3) | 0)) + 1 | 0);
                $6 = HEAP8[$5 >> 0] | 0;
                $7 = $6 << 24 >> 24;
                $8 = Math_imul($$04448, $4) | 0;
                $9 = $8 >> 4;
                $10 = (($9) + ($7)) | 0;
                $11 = ($10 | 0) < (126);
                $$ = $11 ? $10 : 126;
                $12 = ($$ | 0) > (1);
                $13 = $12 ? $$ : 1;
                $14 = ($13 | 0) < (64);
                $15 = (63 - ($13)) | 0;
                $16 = (($13) + 192) | 0;
                $not$ = $14 ^ 1;
                $$042 = $not$ & 1;
                $$0$in = $14 ? $15 : $16;
                $$0 = $$0$in & 255;
                $17 = ((((($0)) + 319948 | 0) + (($$04448 * 920) | 0) | 0) + ($$04547 << 1) | 0);
                HEAP8[$17 >> 0] = $$0;
                $18 = ((((((($0)) + 319948 | 0) + (($$04448 * 920) | 0) | 0) + ($$04547 << 1) | 0)) + 1 | 0);
                HEAP8[$18 >> 0] = $$042;
                $19 = (($$04547) + 1) | 0;
                $exitcond = ($19 | 0) == (460);
                if ($exitcond) {
                    break;
                } else {
                    $$04547 = $19;
                }
            }
            $1 = (($$04448) + 1) | 0;
            $exitcond50 = ($1 | 0) == (52);
            if ($exitcond50) {
                $$04448$1 = 0;
                break;
            } else {
                $$04448 = $1;
            }
        }
        while (1) {
            $$04547$1 = 0;
            while (1) {
                $20 = (((10991 + ($$04547$1 << 3) | 0)) + 2 | 0);
                $21 = HEAP8[$20 >> 0] | 0;
                $22 = $21 << 24 >> 24;
                $23 = (((10991 + ($$04547$1 << 3) | 0)) + 3 | 0);
                $24 = HEAP8[$23 >> 0] | 0;
                $25 = $24 << 24 >> 24;
                $26 = Math_imul($$04448$1, $22) | 0;
                $27 = $26 >> 4;
                $28 = (($27) + ($25)) | 0;
                $29 = ($28 | 0) < (126);
                $$$1 = $29 ? $28 : 126;
                $30 = ($$$1 | 0) > (1);
                $31 = $30 ? $$$1 : 1;
                $32 = ($31 | 0) < (64);
                $33 = (63 - ($31)) | 0;
                $34 = (($31) + 192) | 0;
                $not$$1 = $32 ^ 1;
                $$042$1 = $not$$1 & 1;
                $$0$in$1 = $32 ? $33 : $34;
                $$0$1 = $$0$in$1 & 255;
                $35 = ((((($0)) + 367788 | 0) + (($$04448$1 * 920) | 0) | 0) + ($$04547$1 << 1) | 0);
                HEAP8[$35 >> 0] = $$0$1;
                $36 = ((((((($0)) + 367788 | 0) + (($$04448$1 * 920) | 0) | 0) + ($$04547$1 << 1) | 0)) + 1 | 0);
                HEAP8[$36 >> 0] = $$042$1;
                $37 = (($$04547$1) + 1) | 0;
                $exitcond$1 = ($37 | 0) == (460);
                if ($exitcond$1) {
                    break;
                } else {
                    $$04547$1 = $37;
                }
            }
            $38 = (($$04448$1) + 1) | 0;
            $exitcond50$1 = ($38 | 0) == (52);
            if ($exitcond50$1) {
                $$04448$2 = 0;
                break;
            } else {
                $$04448$1 = $38;
            }
        }
        while (1) {
            $$04547$2 = 0;
            while (1) {
                $39 = (((10991 + ($$04547$2 << 3) | 0)) + 4 | 0);
                $40 = HEAP8[$39 >> 0] | 0;
                $41 = $40 << 24 >> 24;
                $42 = (((10991 + ($$04547$2 << 3) | 0)) + 5 | 0);
                $43 = HEAP8[$42 >> 0] | 0;
                $44 = $43 << 24 >> 24;
                $45 = Math_imul($$04448$2, $41) | 0;
                $46 = $45 >> 4;
                $47 = (($46) + ($44)) | 0;
                $48 = ($47 | 0) < (126);
                $$$2 = $48 ? $47 : 126;
                $49 = ($$$2 | 0) > (1);
                $50 = $49 ? $$$2 : 1;
                $51 = ($50 | 0) < (64);
                $52 = (63 - ($50)) | 0;
                $53 = (($50) + 192) | 0;
                $not$$2 = $51 ^ 1;
                $$042$2 = $not$$2 & 1;
                $$0$in$2 = $51 ? $52 : $53;
                $$0$2 = $$0$in$2 & 255;
                $54 = ((((($0)) + 415628 | 0) + (($$04448$2 * 920) | 0) | 0) + ($$04547$2 << 1) | 0);
                HEAP8[$54 >> 0] = $$0$2;
                $55 = ((((((($0)) + 415628 | 0) + (($$04448$2 * 920) | 0) | 0) + ($$04547$2 << 1) | 0)) + 1 | 0);
                HEAP8[$55 >> 0] = $$042$2;
                $56 = (($$04547$2) + 1) | 0;
                $exitcond$2 = ($56 | 0) == (460);
                if ($exitcond$2) {
                    break;
                } else {
                    $$04547$2 = $56;
                }
            }
            $57 = (($$04448$2) + 1) | 0;
            $exitcond50$2 = ($57 | 0) == (52);
            if ($exitcond50$2) {
                $$04448$3 = 0;
                break;
            } else {
                $$04448$2 = $57;
            }
        }
        while (1) {
            $$04547$3 = 0;
            while (1) {
                $58 = (((10991 + ($$04547$3 << 3) | 0)) + 6 | 0);
                $59 = HEAP8[$58 >> 0] | 0;
                $60 = $59 << 24 >> 24;
                $61 = (((10991 + ($$04547$3 << 3) | 0)) + 7 | 0);
                $62 = HEAP8[$61 >> 0] | 0;
                $63 = $62 << 24 >> 24;
                $64 = Math_imul($$04448$3, $60) | 0;
                $65 = $64 >> 4;
                $66 = (($65) + ($63)) | 0;
                $67 = ($66 | 0) < (126);
                $$$3 = $67 ? $66 : 126;
                $68 = ($$$3 | 0) > (1);
                $69 = $68 ? $$$3 : 1;
                $70 = ($69 | 0) < (64);
                $71 = (63 - ($69)) | 0;
                $72 = (($69) + 192) | 0;
                $not$$3 = $70 ^ 1;
                $$042$3 = $not$$3 & 1;
                $$0$in$3 = $70 ? $71 : $72;
                $$0$3 = $$0$in$3 & 255;
                $73 = ((((($0)) + 463468 | 0) + (($$04448$3 * 920) | 0) | 0) + ($$04547$3 << 1) | 0);
                HEAP8[$73 >> 0] = $$0$3;
                $74 = ((((((($0)) + 463468 | 0) + (($$04448$3 * 920) | 0) | 0) + ($$04547$3 << 1) | 0)) + 1 | 0);
                HEAP8[$74 >> 0] = $$042$3;
                $75 = (($$04547$3) + 1) | 0;
                $exitcond$3 = ($75 | 0) == (460);
                if ($exitcond$3) {
                    break;
                } else {
                    $$04547$3 = $75;
                }
            }
            $76 = (($$04448$3) + 1) | 0;
            $exitcond50$3 = ($76 | 0) == (52);
            if ($exitcond50$3) {
                break;
            } else {
                $$04448$3 = $76;
            }
        }
        $77 = ((($0)) + 511308 | 0);
        HEAP8[$77 >> 0] = 1;
        return;
    }
    function __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$ = 0, $$70 = 0, $$71 = 0, $$sink = 0, $$sink5 = 0, $$sink69 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
        var $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ((($2)) + 4040 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = HEAP32[$0 >> 2] | 0;
        $6 = ($5 | 0) == (0);
        if ($6) {
            $28 = ((($0)) + 4 | 0);
            $29 = HEAP32[$28 >> 2] | 0;
            $30 = ($29 | 0) == (0);
            $31 = (($4) + -1) | 0;
            $$70 = $30 ? 0 : $31;
            $32 = ((($1)) + 29 | 0);
            HEAP8[$32 >> 0] = -1;
            $33 = $1;
            $34 = $33;
            HEAP8[$34 >> 0] = -1 & 255; HEAP8[$34 + 1 >> 0] = (-1 >> 8) & 255; HEAP8[$34 + 2 >> 0] = (-1 >> 16) & 255; HEAP8[$34 + 3 >> 0] = -1 >> 24;
            $35 = (($33) + 4) | 0;
            $36 = $35;
            HEAP8[$36 >> 0] = -1 & 255; HEAP8[$36 + 1 >> 0] = (-1 >> 8) & 255; HEAP8[$36 + 2 >> 0] = (-1 >> 16) & 255; HEAP8[$36 + 3 >> 0] = -1 >> 24;
            $$71 = $$70; $$sink = -1; $39 = $28;
        } else {
            $7 = ((($2)) + 4044 | 0);
            $8 = HEAP32[$7 >> 2] | 0;
            $9 = (($4) - ($8)) | 0;
            $10 = ((($0)) + 4 | 0);
            $11 = HEAP32[$10 >> 2] | 0;
            $12 = ($11 | 0) == (0);
            $13 = (($4) + -1) | 0;
            $$ = $12 ? 0 : $13;
            $14 = ((($2)) + 3964 | 0);
            $15 = HEAP32[$14 >> 2] | 0;
            $16 = (((($15) + (($9 * 24) | 0) | 0)) + 12 | 0);
            $17 = HEAPU8[$16 >> 0] | (HEAPU8[$16 + 1 >> 0] << 8) | (HEAPU8[$16 + 2 >> 0] << 16) | (HEAPU8[$16 + 3 >> 0] << 24);
            $18 = ((($1)) + 1 | 0);
            HEAP8[$18 >> 0] = $17 & 255; HEAP8[$18 + 1 >> 0] = ($17 >> 8) & 255; HEAP8[$18 + 2 >> 0] = ($17 >> 16) & 255; HEAP8[$18 + 3 >> 0] = $17 >> 24;
            $19 = ((($1)) + 29 | 0);
            HEAP8[$19 >> 0] = 0;
            $20 = ((($1)) + 5 | 0);
            HEAP8[$20 >> 0] = 0;
            HEAP8[$1 >> 0] = 0;
            $21 = HEAP32[$14 >> 2] | 0;
            $22 = (((($21) + (($9 * 24) | 0) | 0)) + 20 | 0);
            $23 = HEAPU8[$22 >> 0] | (HEAPU8[$22 + 1 >> 0] << 8);
            $24 = ((($1)) + 6 | 0);
            HEAP8[$24 >> 0] = $23 & 255; HEAP8[$24 + 1 >> 0] = $23 >> 8;
            $25 = HEAP32[$14 >> 2] | 0;
            $26 = (((($25) + (($9 * 24) | 0) | 0)) + 22 | 0);
            $27 = HEAPU8[$26 >> 0] | (HEAPU8[$26 + 1 >> 0] << 8);
            $$71 = $$; $$sink = $27; $39 = $10;
        }
        $37 = ((($1)) + 30 | 0);
        HEAP8[$37 >> 0] = $$sink & 255; HEAP8[$37 + 1 >> 0] = $$sink >> 8;
        $38 = HEAP32[$39 >> 2] | 0;
        $40 = ($38 | 0) == (0);
        if ($40) {
            $73 = ((($1)) + 32 | 0);
            HEAP8[$73 >> 0] = -1;
            $74 = ((($1)) + 24 | 0);
            HEAP8[$74 >> 0] = -1;
            $75 = ((($1)) + 16 | 0);
            HEAP8[$75 >> 0] = -1;
            $76 = ((($1)) + 8 | 0);
            HEAP8[$76 >> 0] = -1;
            $77 = ((($1)) + 21 | 0);
            HEAP8[$77 >> 0] = -1;
            $78 = ((($1)) + 13 | 0);
            HEAP8[$78 >> 0] = -1;
            $79 = ((($1)) + 45 | 0);
            HEAP8[$79 >> 0] = -1;
            $$sink5 = -1; $$sink69 = 37;
            $80 = (($1) + ($$sink69) | 0);
            HEAP8[$80 >> 0] = $$sink5;
            return;
        } else {
            $41 = ((($2)) + 3964 | 0);
            $42 = HEAP32[$41 >> 2] | 0;
            $43 = (((($42) + (($$71 * 24) | 0) | 0)) + 3 | 0);
            $44 = HEAP8[$43 >> 0] | 0;
            $45 = ((($1)) + 8 | 0);
            HEAP8[$45 >> 0] = $44;
            $46 = HEAP32[$41 >> 2] | 0;
            $47 = (((($46) + (($$71 * 24) | 0) | 0)) + 7 | 0);
            $48 = HEAP8[$47 >> 0] | 0;
            $49 = ((($1)) + 16 | 0);
            HEAP8[$49 >> 0] = $48;
            $50 = HEAP32[$41 >> 2] | 0;
            $51 = (((($50) + (($$71 * 24) | 0) | 0)) + 11 | 0);
            $52 = HEAP8[$51 >> 0] | 0;
            $53 = ((($1)) + 24 | 0);
            HEAP8[$53 >> 0] = $52;
            $54 = HEAP32[$41 >> 2] | 0;
            $55 = (((($54) + (($$71 * 24) | 0) | 0)) + 15 | 0);
            $56 = HEAP8[$55 >> 0] | 0;
            $57 = ((($1)) + 32 | 0);
            HEAP8[$57 >> 0] = $56;
            $58 = HEAP32[$41 >> 2] | 0;
            $59 = (((($58) + (($$71 * 24) | 0) | 0)) + 17 | 0);
            $60 = HEAP8[$59 >> 0] | 0;
            $61 = ((($1)) + 13 | 0);
            HEAP8[$61 >> 0] = $60;
            $62 = HEAP32[$41 >> 2] | 0;
            $63 = (((($62) + (($$71 * 24) | 0) | 0)) + 21 | 0);
            $64 = HEAP8[$63 >> 0] | 0;
            $65 = ((($1)) + 21 | 0);
            HEAP8[$65 >> 0] = $64;
            $66 = HEAP32[$41 >> 2] | 0;
            $67 = (((($66) + (($$71 * 24) | 0) | 0)) + 19 | 0);
            $68 = HEAP8[$67 >> 0] | 0;
            $69 = ((($1)) + 37 | 0);
            HEAP8[$69 >> 0] = $68;
            $70 = HEAP32[$41 >> 2] | 0;
            $71 = (((($70) + (($$71 * 24) | 0) | 0)) + 23 | 0);
            $72 = HEAP8[$71 >> 0] | 0;
            $$sink5 = $72; $$sink69 = 45;
            $80 = (($1) + ($$sink69) | 0);
            HEAP8[$80 >> 0] = $$sink5;
            return;
        }
    }
    function __ZN7WelsDec29WelsActualDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0516623 = 0, $$1517620 = 0, $$1525 = 0, $$1527 = 0, $$25 = 0, $$2520617 = 0, $$564 = 0, $$564$1 = 0, $$566 = 0, $$566$1 = 0, $$9 = 0, $$9$ph = 0, $$off551 = 0, $$phi$trans$insert = 0, $$phi$trans$insert653 = 0, $$phi$trans$insert656 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre651 = 0, $$pre652 = 0;
        var $$pre654 = 0, $$pre655 = 0, $$pre657 = 0, $$sink26 = 0, $$sink26$in$in = 0, $$sink561 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
        var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
        var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
        var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
        var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
        var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
        var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
        var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
        var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
        var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
        var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
        var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
        var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
        var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
        var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
        var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
        var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
        var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
        var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
        var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
        var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
        var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
        var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
        var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
        var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
        var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
        var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
        var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
        var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
        var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
        var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
        var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
        var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
        var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
        var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
        var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
        var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
        var $760 = 0, $761 = 0, $762 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
        var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond17 = 0, $or$cond19 = 0, $scevgep = 0, $scevgep649 = 0, $storemerge$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 176 | 0;
        $1 = sp + 40 | 0;
        $2 = sp + 4 | 0;
        $3 = sp;
        $4 = sp + 103 | 0;
        $5 = ((($0)) + 5864 | 0);
        $6 = ((($0)) + 241932 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($7)) + 3900 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($7)) + 3866 | 0);
        $11 = HEAP8[$10 >> 0] | 0;
        $12 = $11 & 255;
        $13 = ((($7)) + 3867 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = $14 & 255;
        $16 = ((($7)) + 4032 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ((($7)) + 4036 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ((($7)) + 4040 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ((($7)) + 3964 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = (($23) + (($21 * 24) | 0) | 0);
        $25 = ((($4)) + 15 | 0);
        $26 = $25;
        $27 = $26 & 15;
        $28 = (0 - ($27)) | 0;
        $29 = (($25) + ($28) | 0);
        __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($2, $7);
        $30 = ((($7)) + 3976 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = (($31) + ($21) | 0);
        HEAP8[$32 >> 0] = 0;
        $33 = ((($7)) + 3861 | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = ((($7)) + 3972 | 0);
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = (($36) + ($21) | 0);
        HEAP8[$37 >> 0] = $34;
        $38 = ((($7)) + 3940 | 0);
        $39 = HEAP32[$38 >> 2] | 0;
        $40 = (($39) + ($21) | 0);
        HEAP8[$40 >> 0] = 1;
        $41 = ((($7)) + 3944 | 0);
        $42 = HEAP32[$41 >> 2] | 0;
        $43 = (($42) + ($21) | 0);
        HEAP8[$43 >> 0] = 0;
        $44 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($9, $3) | 0);
        $45 = ($44 | 0) == (0);
        if (!($45)) {
            $$25 = $44;
            STACKTOP = sp; return ($$25 | 0);
        }
        $46 = HEAP32[$3 >> 2] | 0;
        $47 = ($46 >>> 0) > (25);
        if ($47) {
            $$25 = 1035;
            STACKTOP = sp; return ($$25 | 0);
        }
        $48 = ((($0)) + 241924 | 0);
        $49 = HEAP32[$48 >> 2] | 0;
        $50 = ((($49)) + 318 | 0);
        $51 = HEAP8[$50 >> 0] | 0;
        $52 = ($51 << 24 >> 24) == (0);
        L7: do {
            if ($52) {
                switch ($46 | 0) {
                    case 25: {
                        label = 6;
                        break L7;
                        break;
                    }
                    case 0: {
                        label = 7;
                        break L7;
                        break;
                    }
                    case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: {
                        $$25 = 1035;
                        break;
                    }
                    default: {
                        label = 22;
                        break L7;
                    }
                }
                STACKTOP = sp; return ($$25 | 0);
            } else {
                switch ($46 | 0) {
                    case 25: {
                        label = 6;
                        break;
                    }
                    case 0: {
                        label = 7;
                        break;
                    }
                    default: {
                        label = 22;
                    }
                }
            }
        } while (0);
        L11: do {
            if ((label | 0) == 6) {
                $53 = ((($7)) + 4100 | 0);
                $54 = HEAP32[$53 >> 2] | 0;
                $55 = ((($54)) + 32 | 0);
                $56 = HEAP32[$55 >> 2] | 0;
                $57 = ((($54)) + 36 | 0);
                $58 = HEAP32[$57 >> 2] | 0;
                $59 = Math_imul($56, $19) | 0;
                $60 = (($59) + ($17)) | 0;
                $61 = $60 << 4;
                $62 = Math_imul($58, $19) | 0;
                $63 = (($62) + ($17)) | 0;
                $64 = ((($54)) + 16 | 0);
                $65 = HEAP32[$64 >> 2] | 0;
                $66 = (($65) + ($61) | 0);
                $67 = ((($54)) + 20 | 0);
                $68 = HEAP32[$67 >> 2] | 0;
                $69 = ((($54)) + 24 | 0);
                $70 = HEAP32[$69 >> 2] | 0;
                $71 = ((($9)) + 24 | 0);
                $72 = HEAP32[$71 >> 2] | 0;
                $73 = (0 - ($72)) | 0;
                $74 = $73 >> 3;
                $75 = ((($7)) + 3908 | 0);
                $76 = HEAP32[$75 >> 2] | 0;
                $77 = (($76) + ($21 << 1) | 0);
                HEAP16[$77 >> 1] = 512;
                $78 = ((($9)) + 16 | 0);
                $79 = HEAP32[$78 >> 2] | 0;
                $80 = (-2 - ($74)) | 0;
                $81 = (($79) + ($80) | 0);
                HEAP32[$78 >> 2] = $81;
                $82 = (254 - ($74)) | 0;
                dest = $66; src = $81; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $83 = (($66) + ($56) | 0);
                $84 = ((($81)) + 16 | 0);
                dest = $83; src = $84; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $85 = (($83) + ($56) | 0);
                $86 = ((($84)) + 16 | 0);
                dest = $85; src = $86; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $87 = (($85) + ($56) | 0);
                $88 = ((($86)) + 16 | 0);
                dest = $87; src = $88; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $89 = (($87) + ($56) | 0);
                $90 = ((($88)) + 16 | 0);
                dest = $89; src = $90; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $91 = (($89) + ($56) | 0);
                $92 = ((($90)) + 16 | 0);
                dest = $91; src = $92; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $93 = (($91) + ($56) | 0);
                $94 = ((($92)) + 16 | 0);
                dest = $93; src = $94; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $95 = (($93) + ($56) | 0);
                $96 = ((($94)) + 16 | 0);
                dest = $95; src = $96; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $97 = (($95) + ($56) | 0);
                $98 = ((($96)) + 16 | 0);
                dest = $97; src = $98; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $99 = (($97) + ($56) | 0);
                $100 = ((($98)) + 16 | 0);
                dest = $99; src = $100; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $101 = (($99) + ($56) | 0);
                $102 = ((($100)) + 16 | 0);
                dest = $101; src = $102; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $103 = (($101) + ($56) | 0);
                $104 = ((($102)) + 16 | 0);
                dest = $103; src = $104; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $105 = (($103) + ($56) | 0);
                $106 = ((($104)) + 16 | 0);
                dest = $105; src = $106; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $107 = (($105) + ($56) | 0);
                $108 = ((($106)) + 16 | 0);
                dest = $107; src = $108; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $109 = (($107) + ($56) | 0);
                $110 = ((($108)) + 16 | 0);
                dest = $109; src = $110; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $111 = (($109) + ($56) | 0);
                $112 = ((($110)) + 16 | 0);
                dest = $111; src = $112; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                $113 = $63 << 3;
                $114 = (($68) + ($113) | 0);
                $115 = (($70) + ($113) | 0);
                $scevgep649 = (($79) + ($82) | 0);
                $116 = $scevgep649;
                $117 = $116;
                $118 = HEAPU8[$117 >> 0] | (HEAPU8[$117 + 1 >> 0] << 8) | (HEAPU8[$117 + 2 >> 0] << 16) | (HEAPU8[$117 + 3 >> 0] << 24);
                $119 = (($116) + 4) | 0;
                $120 = $119;
                $121 = HEAPU8[$120 >> 0] | (HEAPU8[$120 + 1 >> 0] << 8) | (HEAPU8[$120 + 2 >> 0] << 16) | (HEAPU8[$120 + 3 >> 0] << 24);
                $122 = $114;
                $123 = $122;
                HEAP8[$123 >> 0] = $118 & 255; HEAP8[$123 + 1 >> 0] = ($118 >> 8) & 255; HEAP8[$123 + 2 >> 0] = ($118 >> 16) & 255; HEAP8[$123 + 3 >> 0] = $118 >> 24;
                $124 = (($122) + 4) | 0;
                $125 = $124;
                HEAP8[$125 >> 0] = $121 & 255; HEAP8[$125 + 1 >> 0] = ($121 >> 8) & 255; HEAP8[$125 + 2 >> 0] = ($121 >> 16) & 255; HEAP8[$125 + 3 >> 0] = $121 >> 24;
                $126 = (($114) + ($58) | 0);
                $127 = ((($scevgep649)) + 8 | 0);
                $128 = $127;
                $129 = $128;
                $130 = HEAPU8[$129 >> 0] | (HEAPU8[$129 + 1 >> 0] << 8) | (HEAPU8[$129 + 2 >> 0] << 16) | (HEAPU8[$129 + 3 >> 0] << 24);
                $131 = (($128) + 4) | 0;
                $132 = $131;
                $133 = HEAPU8[$132 >> 0] | (HEAPU8[$132 + 1 >> 0] << 8) | (HEAPU8[$132 + 2 >> 0] << 16) | (HEAPU8[$132 + 3 >> 0] << 24);
                $134 = $126;
                $135 = $134;
                HEAP8[$135 >> 0] = $130 & 255; HEAP8[$135 + 1 >> 0] = ($130 >> 8) & 255; HEAP8[$135 + 2 >> 0] = ($130 >> 16) & 255; HEAP8[$135 + 3 >> 0] = $130 >> 24;
                $136 = (($134) + 4) | 0;
                $137 = $136;
                HEAP8[$137 >> 0] = $133 & 255; HEAP8[$137 + 1 >> 0] = ($133 >> 8) & 255; HEAP8[$137 + 2 >> 0] = ($133 >> 16) & 255; HEAP8[$137 + 3 >> 0] = $133 >> 24;
                $138 = (($126) + ($58) | 0);
                $139 = ((($127)) + 8 | 0);
                $140 = $139;
                $141 = $140;
                $142 = HEAPU8[$141 >> 0] | (HEAPU8[$141 + 1 >> 0] << 8) | (HEAPU8[$141 + 2 >> 0] << 16) | (HEAPU8[$141 + 3 >> 0] << 24);
                $143 = (($140) + 4) | 0;
                $144 = $143;
                $145 = HEAPU8[$144 >> 0] | (HEAPU8[$144 + 1 >> 0] << 8) | (HEAPU8[$144 + 2 >> 0] << 16) | (HEAPU8[$144 + 3 >> 0] << 24);
                $146 = $138;
                $147 = $146;
                HEAP8[$147 >> 0] = $142 & 255; HEAP8[$147 + 1 >> 0] = ($142 >> 8) & 255; HEAP8[$147 + 2 >> 0] = ($142 >> 16) & 255; HEAP8[$147 + 3 >> 0] = $142 >> 24;
                $148 = (($146) + 4) | 0;
                $149 = $148;
                HEAP8[$149 >> 0] = $145 & 255; HEAP8[$149 + 1 >> 0] = ($145 >> 8) & 255; HEAP8[$149 + 2 >> 0] = ($145 >> 16) & 255; HEAP8[$149 + 3 >> 0] = $145 >> 24;
                $150 = (($138) + ($58) | 0);
                $151 = ((($139)) + 8 | 0);
                $152 = $151;
                $153 = $152;
                $154 = HEAPU8[$153 >> 0] | (HEAPU8[$153 + 1 >> 0] << 8) | (HEAPU8[$153 + 2 >> 0] << 16) | (HEAPU8[$153 + 3 >> 0] << 24);
                $155 = (($152) + 4) | 0;
                $156 = $155;
                $157 = HEAPU8[$156 >> 0] | (HEAPU8[$156 + 1 >> 0] << 8) | (HEAPU8[$156 + 2 >> 0] << 16) | (HEAPU8[$156 + 3 >> 0] << 24);
                $158 = $150;
                $159 = $158;
                HEAP8[$159 >> 0] = $154 & 255; HEAP8[$159 + 1 >> 0] = ($154 >> 8) & 255; HEAP8[$159 + 2 >> 0] = ($154 >> 16) & 255; HEAP8[$159 + 3 >> 0] = $154 >> 24;
                $160 = (($158) + 4) | 0;
                $161 = $160;
                HEAP8[$161 >> 0] = $157 & 255; HEAP8[$161 + 1 >> 0] = ($157 >> 8) & 255; HEAP8[$161 + 2 >> 0] = ($157 >> 16) & 255; HEAP8[$161 + 3 >> 0] = $157 >> 24;
                $162 = (($150) + ($58) | 0);
                $163 = ((($151)) + 8 | 0);
                $164 = $163;
                $165 = $164;
                $166 = HEAPU8[$165 >> 0] | (HEAPU8[$165 + 1 >> 0] << 8) | (HEAPU8[$165 + 2 >> 0] << 16) | (HEAPU8[$165 + 3 >> 0] << 24);
                $167 = (($164) + 4) | 0;
                $168 = $167;
                $169 = HEAPU8[$168 >> 0] | (HEAPU8[$168 + 1 >> 0] << 8) | (HEAPU8[$168 + 2 >> 0] << 16) | (HEAPU8[$168 + 3 >> 0] << 24);
                $170 = $162;
                $171 = $170;
                HEAP8[$171 >> 0] = $166 & 255; HEAP8[$171 + 1 >> 0] = ($166 >> 8) & 255; HEAP8[$171 + 2 >> 0] = ($166 >> 16) & 255; HEAP8[$171 + 3 >> 0] = $166 >> 24;
                $172 = (($170) + 4) | 0;
                $173 = $172;
                HEAP8[$173 >> 0] = $169 & 255; HEAP8[$173 + 1 >> 0] = ($169 >> 8) & 255; HEAP8[$173 + 2 >> 0] = ($169 >> 16) & 255; HEAP8[$173 + 3 >> 0] = $169 >> 24;
                $174 = (($162) + ($58) | 0);
                $175 = ((($163)) + 8 | 0);
                $176 = $175;
                $177 = $176;
                $178 = HEAPU8[$177 >> 0] | (HEAPU8[$177 + 1 >> 0] << 8) | (HEAPU8[$177 + 2 >> 0] << 16) | (HEAPU8[$177 + 3 >> 0] << 24);
                $179 = (($176) + 4) | 0;
                $180 = $179;
                $181 = HEAPU8[$180 >> 0] | (HEAPU8[$180 + 1 >> 0] << 8) | (HEAPU8[$180 + 2 >> 0] << 16) | (HEAPU8[$180 + 3 >> 0] << 24);
                $182 = $174;
                $183 = $182;
                HEAP8[$183 >> 0] = $178 & 255; HEAP8[$183 + 1 >> 0] = ($178 >> 8) & 255; HEAP8[$183 + 2 >> 0] = ($178 >> 16) & 255; HEAP8[$183 + 3 >> 0] = $178 >> 24;
                $184 = (($182) + 4) | 0;
                $185 = $184;
                HEAP8[$185 >> 0] = $181 & 255; HEAP8[$185 + 1 >> 0] = ($181 >> 8) & 255; HEAP8[$185 + 2 >> 0] = ($181 >> 16) & 255; HEAP8[$185 + 3 >> 0] = $181 >> 24;
                $186 = (($174) + ($58) | 0);
                $187 = ((($175)) + 8 | 0);
                $188 = $187;
                $189 = $188;
                $190 = HEAPU8[$189 >> 0] | (HEAPU8[$189 + 1 >> 0] << 8) | (HEAPU8[$189 + 2 >> 0] << 16) | (HEAPU8[$189 + 3 >> 0] << 24);
                $191 = (($188) + 4) | 0;
                $192 = $191;
                $193 = HEAPU8[$192 >> 0] | (HEAPU8[$192 + 1 >> 0] << 8) | (HEAPU8[$192 + 2 >> 0] << 16) | (HEAPU8[$192 + 3 >> 0] << 24);
                $194 = $186;
                $195 = $194;
                HEAP8[$195 >> 0] = $190 & 255; HEAP8[$195 + 1 >> 0] = ($190 >> 8) & 255; HEAP8[$195 + 2 >> 0] = ($190 >> 16) & 255; HEAP8[$195 + 3 >> 0] = $190 >> 24;
                $196 = (($194) + 4) | 0;
                $197 = $196;
                HEAP8[$197 >> 0] = $193 & 255; HEAP8[$197 + 1 >> 0] = ($193 >> 8) & 255; HEAP8[$197 + 2 >> 0] = ($193 >> 16) & 255; HEAP8[$197 + 3 >> 0] = $193 >> 24;
                $198 = (($186) + ($58) | 0);
                $199 = ((($187)) + 8 | 0);
                $200 = $199;
                $201 = $200;
                $202 = HEAPU8[$201 >> 0] | (HEAPU8[$201 + 1 >> 0] << 8) | (HEAPU8[$201 + 2 >> 0] << 16) | (HEAPU8[$201 + 3 >> 0] << 24);
                $203 = (($200) + 4) | 0;
                $204 = $203;
                $205 = HEAPU8[$204 >> 0] | (HEAPU8[$204 + 1 >> 0] << 8) | (HEAPU8[$204 + 2 >> 0] << 16) | (HEAPU8[$204 + 3 >> 0] << 24);
                $206 = $198;
                $207 = $206;
                HEAP8[$207 >> 0] = $202 & 255; HEAP8[$207 + 1 >> 0] = ($202 >> 8) & 255; HEAP8[$207 + 2 >> 0] = ($202 >> 16) & 255; HEAP8[$207 + 3 >> 0] = $202 >> 24;
                $208 = (($206) + 4) | 0;
                $209 = $208;
                HEAP8[$209 >> 0] = $205 & 255; HEAP8[$209 + 1 >> 0] = ($205 >> 8) & 255; HEAP8[$209 + 2 >> 0] = ($205 >> 16) & 255; HEAP8[$209 + 3 >> 0] = $205 >> 24;
                $scevgep = ((($scevgep649)) + 64 | 0);
                $210 = $scevgep;
                $211 = $210;
                $212 = HEAPU8[$211 >> 0] | (HEAPU8[$211 + 1 >> 0] << 8) | (HEAPU8[$211 + 2 >> 0] << 16) | (HEAPU8[$211 + 3 >> 0] << 24);
                $213 = (($210) + 4) | 0;
                $214 = $213;
                $215 = HEAPU8[$214 >> 0] | (HEAPU8[$214 + 1 >> 0] << 8) | (HEAPU8[$214 + 2 >> 0] << 16) | (HEAPU8[$214 + 3 >> 0] << 24);
                $216 = $115;
                $217 = $216;
                HEAP8[$217 >> 0] = $212 & 255; HEAP8[$217 + 1 >> 0] = ($212 >> 8) & 255; HEAP8[$217 + 2 >> 0] = ($212 >> 16) & 255; HEAP8[$217 + 3 >> 0] = $212 >> 24;
                $218 = (($216) + 4) | 0;
                $219 = $218;
                HEAP8[$219 >> 0] = $215 & 255; HEAP8[$219 + 1 >> 0] = ($215 >> 8) & 255; HEAP8[$219 + 2 >> 0] = ($215 >> 16) & 255; HEAP8[$219 + 3 >> 0] = $215 >> 24;
                $220 = (($115) + ($58) | 0);
                $221 = ((($scevgep)) + 8 | 0);
                $222 = $221;
                $223 = $222;
                $224 = HEAPU8[$223 >> 0] | (HEAPU8[$223 + 1 >> 0] << 8) | (HEAPU8[$223 + 2 >> 0] << 16) | (HEAPU8[$223 + 3 >> 0] << 24);
                $225 = (($222) + 4) | 0;
                $226 = $225;
                $227 = HEAPU8[$226 >> 0] | (HEAPU8[$226 + 1 >> 0] << 8) | (HEAPU8[$226 + 2 >> 0] << 16) | (HEAPU8[$226 + 3 >> 0] << 24);
                $228 = $220;
                $229 = $228;
                HEAP8[$229 >> 0] = $224 & 255; HEAP8[$229 + 1 >> 0] = ($224 >> 8) & 255; HEAP8[$229 + 2 >> 0] = ($224 >> 16) & 255; HEAP8[$229 + 3 >> 0] = $224 >> 24;
                $230 = (($228) + 4) | 0;
                $231 = $230;
                HEAP8[$231 >> 0] = $227 & 255; HEAP8[$231 + 1 >> 0] = ($227 >> 8) & 255; HEAP8[$231 + 2 >> 0] = ($227 >> 16) & 255; HEAP8[$231 + 3 >> 0] = $227 >> 24;
                $232 = (($220) + ($58) | 0);
                $233 = ((($221)) + 8 | 0);
                $234 = $233;
                $235 = $234;
                $236 = HEAPU8[$235 >> 0] | (HEAPU8[$235 + 1 >> 0] << 8) | (HEAPU8[$235 + 2 >> 0] << 16) | (HEAPU8[$235 + 3 >> 0] << 24);
                $237 = (($234) + 4) | 0;
                $238 = $237;
                $239 = HEAPU8[$238 >> 0] | (HEAPU8[$238 + 1 >> 0] << 8) | (HEAPU8[$238 + 2 >> 0] << 16) | (HEAPU8[$238 + 3 >> 0] << 24);
                $240 = $232;
                $241 = $240;
                HEAP8[$241 >> 0] = $236 & 255; HEAP8[$241 + 1 >> 0] = ($236 >> 8) & 255; HEAP8[$241 + 2 >> 0] = ($236 >> 16) & 255; HEAP8[$241 + 3 >> 0] = $236 >> 24;
                $242 = (($240) + 4) | 0;
                $243 = $242;
                HEAP8[$243 >> 0] = $239 & 255; HEAP8[$243 + 1 >> 0] = ($239 >> 8) & 255; HEAP8[$243 + 2 >> 0] = ($239 >> 16) & 255; HEAP8[$243 + 3 >> 0] = $239 >> 24;
                $244 = (($232) + ($58) | 0);
                $245 = ((($233)) + 8 | 0);
                $246 = $245;
                $247 = $246;
                $248 = HEAPU8[$247 >> 0] | (HEAPU8[$247 + 1 >> 0] << 8) | (HEAPU8[$247 + 2 >> 0] << 16) | (HEAPU8[$247 + 3 >> 0] << 24);
                $249 = (($246) + 4) | 0;
                $250 = $249;
                $251 = HEAPU8[$250 >> 0] | (HEAPU8[$250 + 1 >> 0] << 8) | (HEAPU8[$250 + 2 >> 0] << 16) | (HEAPU8[$250 + 3 >> 0] << 24);
                $252 = $244;
                $253 = $252;
                HEAP8[$253 >> 0] = $248 & 255; HEAP8[$253 + 1 >> 0] = ($248 >> 8) & 255; HEAP8[$253 + 2 >> 0] = ($248 >> 16) & 255; HEAP8[$253 + 3 >> 0] = $248 >> 24;
                $254 = (($252) + 4) | 0;
                $255 = $254;
                HEAP8[$255 >> 0] = $251 & 255; HEAP8[$255 + 1 >> 0] = ($251 >> 8) & 255; HEAP8[$255 + 2 >> 0] = ($251 >> 16) & 255; HEAP8[$255 + 3 >> 0] = $251 >> 24;
                $256 = (($244) + ($58) | 0);
                $257 = ((($245)) + 8 | 0);
                $258 = $257;
                $259 = $258;
                $260 = HEAPU8[$259 >> 0] | (HEAPU8[$259 + 1 >> 0] << 8) | (HEAPU8[$259 + 2 >> 0] << 16) | (HEAPU8[$259 + 3 >> 0] << 24);
                $261 = (($258) + 4) | 0;
                $262 = $261;
                $263 = HEAPU8[$262 >> 0] | (HEAPU8[$262 + 1 >> 0] << 8) | (HEAPU8[$262 + 2 >> 0] << 16) | (HEAPU8[$262 + 3 >> 0] << 24);
                $264 = $256;
                $265 = $264;
                HEAP8[$265 >> 0] = $260 & 255; HEAP8[$265 + 1 >> 0] = ($260 >> 8) & 255; HEAP8[$265 + 2 >> 0] = ($260 >> 16) & 255; HEAP8[$265 + 3 >> 0] = $260 >> 24;
                $266 = (($264) + 4) | 0;
                $267 = $266;
                HEAP8[$267 >> 0] = $263 & 255; HEAP8[$267 + 1 >> 0] = ($263 >> 8) & 255; HEAP8[$267 + 2 >> 0] = ($263 >> 16) & 255; HEAP8[$267 + 3 >> 0] = $263 >> 24;
                $268 = (($256) + ($58) | 0);
                $269 = ((($257)) + 8 | 0);
                $270 = $269;
                $271 = $270;
                $272 = HEAPU8[$271 >> 0] | (HEAPU8[$271 + 1 >> 0] << 8) | (HEAPU8[$271 + 2 >> 0] << 16) | (HEAPU8[$271 + 3 >> 0] << 24);
                $273 = (($270) + 4) | 0;
                $274 = $273;
                $275 = HEAPU8[$274 >> 0] | (HEAPU8[$274 + 1 >> 0] << 8) | (HEAPU8[$274 + 2 >> 0] << 16) | (HEAPU8[$274 + 3 >> 0] << 24);
                $276 = $268;
                $277 = $276;
                HEAP8[$277 >> 0] = $272 & 255; HEAP8[$277 + 1 >> 0] = ($272 >> 8) & 255; HEAP8[$277 + 2 >> 0] = ($272 >> 16) & 255; HEAP8[$277 + 3 >> 0] = $272 >> 24;
                $278 = (($276) + 4) | 0;
                $279 = $278;
                HEAP8[$279 >> 0] = $275 & 255; HEAP8[$279 + 1 >> 0] = ($275 >> 8) & 255; HEAP8[$279 + 2 >> 0] = ($275 >> 16) & 255; HEAP8[$279 + 3 >> 0] = $275 >> 24;
                $280 = (($268) + ($58) | 0);
                $281 = ((($269)) + 8 | 0);
                $282 = $281;
                $283 = $282;
                $284 = HEAPU8[$283 >> 0] | (HEAPU8[$283 + 1 >> 0] << 8) | (HEAPU8[$283 + 2 >> 0] << 16) | (HEAPU8[$283 + 3 >> 0] << 24);
                $285 = (($282) + 4) | 0;
                $286 = $285;
                $287 = HEAPU8[$286 >> 0] | (HEAPU8[$286 + 1 >> 0] << 8) | (HEAPU8[$286 + 2 >> 0] << 16) | (HEAPU8[$286 + 3 >> 0] << 24);
                $288 = $280;
                $289 = $288;
                HEAP8[$289 >> 0] = $284 & 255; HEAP8[$289 + 1 >> 0] = ($284 >> 8) & 255; HEAP8[$289 + 2 >> 0] = ($284 >> 16) & 255; HEAP8[$289 + 3 >> 0] = $284 >> 24;
                $290 = (($288) + 4) | 0;
                $291 = $290;
                HEAP8[$291 >> 0] = $287 & 255; HEAP8[$291 + 1 >> 0] = ($287 >> 8) & 255; HEAP8[$291 + 2 >> 0] = ($287 >> 16) & 255; HEAP8[$291 + 3 >> 0] = $287 >> 24;
                $292 = (($280) + ($58) | 0);
                $293 = ((($281)) + 8 | 0);
                $294 = $293;
                $295 = $294;
                $296 = HEAPU8[$295 >> 0] | (HEAPU8[$295 + 1 >> 0] << 8) | (HEAPU8[$295 + 2 >> 0] << 16) | (HEAPU8[$295 + 3 >> 0] << 24);
                $297 = (($294) + 4) | 0;
                $298 = $297;
                $299 = HEAPU8[$298 >> 0] | (HEAPU8[$298 + 1 >> 0] << 8) | (HEAPU8[$298 + 2 >> 0] << 16) | (HEAPU8[$298 + 3 >> 0] << 24);
                $300 = $292;
                $301 = $300;
                HEAP8[$301 >> 0] = $296 & 255; HEAP8[$301 + 1 >> 0] = ($296 >> 8) & 255; HEAP8[$301 + 2 >> 0] = ($296 >> 16) & 255; HEAP8[$301 + 3 >> 0] = $296 >> 24;
                $302 = (($300) + 4) | 0;
                $303 = $302;
                HEAP8[$303 >> 0] = $299 & 255; HEAP8[$303 + 1 >> 0] = ($299 >> 8) & 255; HEAP8[$303 + 2 >> 0] = ($299 >> 16) & 255; HEAP8[$303 + 3 >> 0] = $299 >> 24;
                $304 = HEAP32[$78 >> 2] | 0;
                $305 = ((($304)) + 384 | 0);
                HEAP32[$78 >> 2] = $305;
                $306 = ((($7)) + 3948 | 0);
                $307 = HEAP32[$306 >> 2] | 0;
                $308 = (($307) + ($21) | 0);
                HEAP8[$308 >> 0] = 0;
                $309 = ((($7)) + 3952 | 0);
                $310 = HEAP32[$309 >> 2] | 0;
                $311 = (($310) + ($21 << 1) | 0);
                HEAP8[$311 >> 0] = 0 & 255; HEAP8[$311 + 1 >> 0] = 0 >> 8;
                dest = $24; stop = dest + 24 | 0; do { HEAP8[dest >> 0] = 16 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                $312 = (__ZN7WelsDec12InitReadBitsEPN10WelsCommon15TagBitStringAuxEi($9, 0) | 0);
                $$25 = $312;
                STACKTOP = sp; return ($$25 | 0);
            }
            else if ((label | 0) == 7) {
                $313 = ((($1)) + 15 | 0);
                $314 = $313;
                $315 = $314 & 15;
                $316 = (0 - ($315)) | 0;
                $317 = (($313) + ($316) | 0);
                $318 = ((($7)) + 3908 | 0);
                $319 = HEAP32[$318 >> 2] | 0;
                $320 = (($319) + ($21 << 1) | 0);
                HEAP16[$320 >> 1] = 1;
                $321 = ((($0)) + 241928 | 0);
                $322 = HEAP32[$321 >> 2] | 0;
                $323 = ((($322)) + 184 | 0);
                $324 = HEAP8[$323 >> 0] | 0;
                $325 = ($324 << 24 >> 24) == (0);
                do {
                    if ($325) {
                        label = 13;
                    } else {
                        $326 = ((($9)) + 20 | 0);
                        $327 = HEAP32[$326 >> 2] | 0;
                        $328 = $327 >>> 31;
                        $329 = ((($9)) + 4 | 0);
                        $330 = HEAP32[$329 >> 2] | 0;
                        $331 = HEAP32[$9 >> 2] | 0;
                        $332 = ((($9)) + 16 | 0);
                        $333 = HEAP32[$332 >> 2] | 0;
                        $334 = $327 << 1;
                        HEAP32[$326 >> 2] = $334;
                        $335 = ((($9)) + 24 | 0);
                        $336 = HEAP32[$335 >> 2] | 0;
                        $337 = (($336) + 1) | 0;
                        HEAP32[$335 >> 2] = $337;
                        $338 = ($336 | 0) > (-1);
                        $339 = $333;
                        if ($338) {
                            $340 = (($333) - ($331)) | 0;
                            $341 = (($330) + 1) | 0;
                            $342 = (($341) - ($331)) | 0;
                            $343 = ($340 | 0) > ($342 | 0);
                            if ($343) {
                                $$9$ph = 11;
                                break;
                            }
                            $344 = HEAP8[$339 >> 0] | 0;
                            $345 = $344 & 255;
                            $346 = $345 << 8;
                            $347 = ((($339)) + 1 | 0);
                            $348 = HEAP8[$347 >> 0] | 0;
                            $349 = $348 & 255;
                            $350 = $346 | $349;
                            $351 = $350 << $337;
                            $352 = $351 | $334;
                            HEAP32[$326 >> 2] = $352;
                            $353 = (($336) + -15) | 0;
                            HEAP32[$335 >> 2] = $353;
                            $354 = ((($339)) + 2 | 0);
                            HEAP32[$332 >> 2] = $354;
                        }
                        HEAP32[$3 >> 2] = $328;
                        $355 = HEAP32[$41 >> 2] | 0;
                        $356 = (($355) + ($21) | 0);
                        $357 = $328 & 255;
                        HEAP8[$356 >> 0] = $357;
                        $358 = HEAP32[$41 >> 2] | 0;
                        $359 = (($358) + ($21) | 0);
                        $360 = HEAP8[$359 >> 0] | 0;
                        $361 = ($360 << 24 >> 24) == (0);
                        if ($361) {
                            label = 13;
                        } else {
                            $362 = HEAP32[$318 >> 2] | 0;
                            $363 = (($362) + ($21 << 1) | 0);
                            HEAP16[$363 >> 1] = 4;
                            label = 13;
                        }
                    }
                } while (0);
                do {
                    if ((label | 0) == 13) {
                        $364 = HEAP32[$41 >> 2] | 0;
                        $365 = (($364) + ($21) | 0);
                        $366 = HEAP8[$365 >> 0] | 0;
                        $367 = ($366 << 24 >> 24) == (0);
                        $368 = ((($0)) + 317148 | 0);
                        $369 = HEAP32[$368 >> 2] | 0;
                        FUNCTION_TABLE_viiii[$369 & 31]($2, $29, $317, $7);
                        if ($367) {
                            $370 = (__ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $317, $9, $7) | 0);
                            $371 = ($370 | 0) == (0);
                            if ($371) {
                                label = 16;
                            } else {
                                $$9 = $370;
                            }
                        } else {
                            $372 = (__ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $317, $9, $7) | 0);
                            $373 = ($372 | 0) == (0);
                            if ($373) {
                                label = 16;
                            } else {
                                $$9 = $372;
                            }
                        }
                        if ((label | 0) == 16) {
                            $374 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($9, $3) | 0);
                            $375 = ($374 | 0) == (0);
                            if ($375) {
                                $376 = HEAP32[$3 >> 2] | 0;
                                $377 = HEAP32[$48 >> 2] | 0;
                                $378 = ((($377)) + 318 | 0);
                                $379 = HEAP8[$378 >> 0] | 0;
                                $380 = ($379 << 24 >> 24) != (0);
                                $381 = ($376 >>> 0) > (47);
                                $or$cond17 = $381 & $380;
                                if ($or$cond17) {
                                    $$9$ph = 1042;
                                    break;
                                }
                                $382 = ($379 << 24 >> 24) == (0);
                                $383 = ($376 >>> 0) > (15);
                                $or$cond19 = $383 & $382;
                                if ($or$cond19) {
                                    $$9$ph = 1042;
                                    break;
                                }
                                $384 = (15550 + ($376) | 0);
                                $385 = (15502 + ($376) | 0);
                                $$sink561 = $380 ? $385 : $384;
                                $386 = HEAP8[$$sink561 >> 0] | 0;
                                $387 = $386 & 255;
                                $388 = ((($7)) + 3956 | 0);
                                $389 = HEAP32[$388 >> 2] | 0;
                                $390 = (($389) + ($21) | 0);
                                HEAP8[$390 >> 0] = $386;
                                $391 = $387 >>> 4;
                                $392 = $387 & 15;
                                $$1525 = $392; $$1527 = $391; $$pre$phiZ2D = $388;
                                break L11;
                            } else {
                                $$9 = $374;
                            }
                        }
                        $$25 = $$9;
                        STACKTOP = sp; return ($$25 | 0);
                    }
                } while (0);
                $$25 = $$9$ph;
                STACKTOP = sp; return ($$25 | 0);
            }
            else if ((label | 0) == 22) {
                $393 = ((($7)) + 3908 | 0);
                $394 = HEAP32[$393 >> 2] | 0;
                $395 = (($394) + ($21 << 1) | 0);
                HEAP16[$395 >> 1] = 2;
                $396 = HEAP32[$41 >> 2] | 0;
                $397 = (($396) + ($21) | 0);
                HEAP8[$397 >> 0] = 0;
                $398 = HEAP32[$38 >> 2] | 0;
                $399 = (($398) + ($21) | 0);
                HEAP8[$399 >> 0] = 1;
                $400 = (($46) + -1) | 0;
                $401 = $400 & 3;
                $402 = $401 & 255;
                $403 = ((($7)) + 3992 | 0);
                $404 = HEAP32[$403 >> 2] | 0;
                $405 = (((($404) + ($21 << 3) | 0)) + 7 | 0);
                HEAP8[$405 >> 0] = $402;
                $406 = $400 >>> 2;
                $407 = (25169 + ($406) | 0);
                $408 = HEAP8[$407 >> 0] | 0;
                $409 = ((($7)) + 3956 | 0);
                $410 = HEAP32[$409 >> 2] | 0;
                $411 = (($410) + ($21) | 0);
                HEAP8[$411 >> 0] = $408;
                $412 = HEAP32[$48 >> 2] | 0;
                $413 = ((($412)) + 318 | 0);
                $414 = HEAP8[$413 >> 0] | 0;
                $415 = ($414 << 24 >> 24) == (0);
                $$pre = HEAP32[$409 >> 2] | 0;
                $$phi$trans$insert = (($$pre) + ($21) | 0);
                $$pre651 = HEAP8[$$phi$trans$insert >> 0] | 0;
                $416 = $$pre651 << 24 >> 24;
                $417 = $416 >> 4;
                $418 = $415 ? 0 : $417;
                $419 = $$pre651 & 15;
                $420 = $419 & 255;
                __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($2, $29, $7);
                $421 = (__ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $9, $7) | 0);
                $422 = ($421 | 0) == (0);
                if ($422) {
                    $$1525 = $420; $$1527 = $418; $$pre$phiZ2D = $409;
                } else {
                    $$25 = $421;
                    STACKTOP = sp; return ($$25 | 0);
                }
            }
        } while (0);
        $423 = (((($23) + (($21 * 24) | 0) | 0)) + 4 | 0);
        $424 = (((($23) + (($21 * 24) | 0) | 0)) + 8 | 0);
        $425 = (((($23) + (($21 * 24) | 0) | 0)) + 12 | 0);
        $426 = (((($23) + (($21 * 24) | 0) | 0)) + 16 | 0);
        $427 = (((($23) + (($21 * 24) | 0) | 0)) + 20 | 0);
        ; HEAP32[$24 >> 2] = 0 | 0; HEAP32[$24 + 4 >> 2] = 0 | 0; HEAP32[$24 + 8 >> 2] = 0 | 0; HEAP32[$24 + 12 >> 2] = 0 | 0; HEAP32[$24 + 16 >> 2] = 0 | 0; HEAP32[$24 + 20 >> 2] = 0 | 0;
        $428 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $429 = (($428) + ($21) | 0);
        $430 = HEAP8[$429 >> 0] | 0;
        $431 = ($430 << 24 >> 24) == (0);
        do {
            if ($431) {
                $432 = ((($7)) + 3908 | 0);
                $433 = HEAP32[$432 >> 2] | 0;
                $434 = (($433) + ($21 << 1) | 0);
                $435 = HEAP16[$434 >> 1] | 0;
                $436 = ($435 << 16 >> 16) == (1);
                if ($436) {
                    $437 = ((($7)) + 3868 | 0);
                    $438 = HEAP32[$437 >> 2] | 0;
                    $439 = $438 & 255;
                    $440 = ((($7)) + 3948 | 0);
                    $441 = HEAP32[$440 >> 2] | 0;
                    $442 = (($441) + ($21) | 0);
                    HEAP8[$442 >> 0] = $439;
                    $443 = ((($7)) + 92 | 0);
                    $444 = ((($7)) + 3952 | 0);
                    $445 = HEAP32[$440 >> 2] | 0;
                    $446 = (($445) + ($21) | 0);
                    $447 = HEAP8[$446 >> 0] | 0;
                    $448 = $447 << 24 >> 24;
                    $449 = HEAP32[$443 >> 2] | 0;
                    $450 = ((($449)) + 168 | 0);
                    $451 = HEAP32[$450 >> 2] | 0;
                    $452 = (($451) + ($448)) | 0;
                    $453 = ($452 | 0) < (51);
                    $$564 = $453 ? $452 : 51;
                    $454 = ($452 | 0) > (0);
                    $455 = $454 ? $$564 : 0;
                    $456 = (10899 + ($455) | 0);
                    $457 = HEAP8[$456 >> 0] | 0;
                    $458 = HEAP32[$444 >> 2] | 0;
                    $459 = (($458) + ($21 << 1) | 0);
                    HEAP8[$459 >> 0] = $457;
                    $460 = HEAP32[$440 >> 2] | 0;
                    $461 = (($460) + ($21) | 0);
                    $462 = HEAP8[$461 >> 0] | 0;
                    $463 = $462 << 24 >> 24;
                    $464 = HEAP32[$443 >> 2] | 0;
                    $465 = ((($464)) + 172 | 0);
                    $466 = HEAP32[$465 >> 2] | 0;
                    $467 = (($466) + ($463)) | 0;
                    $468 = ($467 | 0) < (51);
                    $$564$1 = $468 ? $467 : 51;
                    $469 = ($467 | 0) > (0);
                    $470 = $469 ? $$564$1 : 0;
                    $471 = (10899 + ($470) | 0);
                    $472 = HEAP8[$471 >> 0] | 0;
                    $473 = HEAP32[$444 >> 2] | 0;
                    $474 = (((($473) + ($21 << 1) | 0)) + 1 | 0);
                    HEAP8[$474 >> 0] = $472;
                    $$pre652 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                    $$phi$trans$insert653 = (($$pre652) + ($21) | 0);
                    $$pre654 = HEAP8[$$phi$trans$insert653 >> 0] | 0;
                    $475 = ($$pre654 << 24 >> 24) == (0);
                    if (!($475)) {
                        break;
                    }
                }
                $476 = ((($7)) + 3908 | 0);
                $477 = HEAP32[$476 >> 2] | 0;
                $478 = (($477) + ($21 << 1) | 0);
                $479 = HEAP16[$478 >> 1] | 0;
                $480 = ($479 << 16 >> 16) == (2);
                if (!($480)) {
                    $$25 = 0;
                    STACKTOP = sp; return ($$25 | 0);
                }
            }
        } while (0);
        $481 = ((($7)) + 3988 | 0);
        $482 = HEAP32[$481 >> 2] | 0;
        $483 = (($482) + (($21 * 768) | 0) | 0);
        _memset(($483 | 0), 0, 768) | 0;
        $484 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($9, $1) | 0);
        $485 = ($484 | 0) == (0);
        if (!($485)) {
            $$25 = $484;
            STACKTOP = sp; return ($$25 | 0);
        }
        $486 = HEAP32[$1 >> 2] | 0;
        $487 = $486 & 1;
        $488 = ($487 | 0) == (0);
        $489 = $486 >>> 1;
        $490 = (0 - ($489)) | 0;
        $491 = (($486) + 1) | 0;
        $492 = $491 >>> 1;
        $storemerge$i = $488 ? $490 : $492;
        $$off551 = (($storemerge$i) + 26) | 0;
        $493 = ($$off551 >>> 0) > (51);
        if ($493) {
            $$25 = 1027;
            STACKTOP = sp; return ($$25 | 0);
        }
        $494 = ((($7)) + 3868 | 0);
        $495 = HEAP32[$494 >> 2] | 0;
        $496 = (($storemerge$i) + 52) | 0;
        $497 = (($496) + ($495)) | 0;
        $498 = (($497 | 0) % 52) & -1;
        $499 = $498 & 255;
        $500 = ((($7)) + 3948 | 0);
        $501 = HEAP32[$500 >> 2] | 0;
        $502 = (($501) + ($21) | 0);
        HEAP8[$502 >> 0] = $499;
        $503 = HEAP32[$500 >> 2] | 0;
        $504 = (($503) + ($21) | 0);
        $505 = HEAP8[$504 >> 0] | 0;
        $506 = $505 << 24 >> 24;
        HEAP32[$494 >> 2] = $506;
        $507 = ((($7)) + 92 | 0);
        $508 = ((($7)) + 3952 | 0);
        $509 = HEAP32[$507 >> 2] | 0;
        $510 = ((($509)) + 168 | 0);
        $511 = HEAP32[$510 >> 2] | 0;
        $512 = (($511) + ($506)) | 0;
        $513 = ($512 | 0) < (51);
        $$566 = $513 ? $512 : 51;
        $514 = ($512 | 0) > (0);
        $515 = $514 ? $$566 : 0;
        $516 = (10899 + ($515) | 0);
        $517 = HEAP8[$516 >> 0] | 0;
        $518 = HEAP32[$508 >> 2] | 0;
        $519 = (($518) + ($21 << 1) | 0);
        HEAP8[$519 >> 0] = $517;
        $520 = HEAP32[$494 >> 2] | 0;
        $521 = HEAP32[$507 >> 2] | 0;
        $522 = ((($521)) + 172 | 0);
        $523 = HEAP32[$522 >> 2] | 0;
        $524 = (($523) + ($520)) | 0;
        $525 = ($524 | 0) < (51);
        $$566$1 = $525 ? $524 : 51;
        $526 = ($524 | 0) > (0);
        $527 = $526 ? $$566$1 : 0;
        $528 = (10899 + ($527) | 0);
        $529 = HEAP8[$528 >> 0] | 0;
        $530 = HEAP32[$508 >> 2] | 0;
        $531 = (((($530) + ($21 << 1) | 0)) + 1 | 0);
        HEAP8[$531 >> 0] = $529;
        __ZN7WelsDec12BsStartCavlcEPN10WelsCommon15TagBitStringAuxE($9);
        $532 = ((($7)) + 3908 | 0);
        $533 = HEAP32[$532 >> 2] | 0;
        $534 = (($533) + ($21 << 1) | 0);
        $535 = HEAP16[$534 >> 1] | 0;
        $536 = ($535 << 16 >> 16) == (2);
        L53: do {
            if ($536) {
                $537 = HEAP32[$481 >> 2] | 0;
                $538 = (($537) + (($21 * 768) | 0) | 0);
                $539 = HEAP32[$500 >> 2] | 0;
                $540 = (($539) + ($21) | 0);
                $541 = HEAP8[$540 >> 0] | 0;
                $542 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 0, 16, 15482, 1, $538, $541, $0) | 0);
                $543 = ($542 | 0) == (0);
                if (!($543)) {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $544 = ($$1525 | 0) == (0);
                if (!($544)) {
                    $545 = ($12 >>> 0) > (1);
                    $546 = $545 ? $12 : 1;
                    $547 = (($15) + 1) | 0;
                    $548 = (($547) - ($546)) | 0;
                    $549 = (26970 + ($546) | 0);
                    $$2520617 = 0;
                    while (1) {
                        $552 = HEAP32[$481 >> 2] | 0;
                        $553 = $$2520617 << 4;
                        $554 = ((($552) + (($21 * 768) | 0) | 0) + ($553 << 1) | 0);
                        $555 = HEAP32[$500 >> 2] | 0;
                        $556 = (($555) + ($21) | 0);
                        $557 = HEAP8[$556 >> 0] | 0;
                        $558 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, $$2520617, $548, $549, 2, $554, $557, $0) | 0);
                        $559 = ($558 | 0) == (0);
                        if (!($559)) {
                            $$25 = -1;
                            break;
                        }
                        $550 = (($$2520617) + 1) | 0;
                        $551 = ($$2520617 | 0) < (15);
                        if ($551) {
                            $$2520617 = $550;
                        } else {
                            label = 50;
                            break L53;
                        }
                    }
                    STACKTOP = sp; return ($$25 | 0);
                }
            } else {
                $560 = HEAP32[$41 >> 2] | 0;
                $561 = (($560) + ($21) | 0);
                $562 = HEAP8[$561 >> 0] | 0;
                $563 = ($562 << 24 >> 24) == (0);
                $564 = (1 - ($12)) | 0;
                $565 = (($564) + ($15)) | 0;
                if ($563) {
                    $567 = (26970 + ($12) | 0);
                    $$1517620 = 0;
                    while (1) {
                        $603 = 1 << $$1517620;
                        $604 = $603 & $$1525;
                        $605 = ($604 | 0) == (0);
                        $606 = $$1517620 << 2;
                        if ($605) {
                            $624 = (15458 + ($606) | 0);
                            $625 = HEAP8[$624 >> 0] | 0;
                            $626 = $625 & 255;
                            $627 = (($29) + ($626) | 0);
                            HEAP8[$627 >> 0] = 0 & 255; HEAP8[$627 + 1 >> 0] = 0 >> 8;
                            $628 = $606 | 2;
                            $629 = (15458 + ($628) | 0);
                            $630 = HEAP8[$629 >> 0] | 0;
                            $631 = $630 & 255;
                            $632 = (($29) + ($631) | 0);
                            HEAP8[$632 >> 0] = 0 & 255; HEAP8[$632 + 1 >> 0] = 0 >> 8;
                        } else {
                            $607 = HEAP32[$481 >> 2] | 0;
                            $608 = $$1517620 << 6;
                            $609 = ((($607) + (($21 * 768) | 0) | 0) + ($608 << 1) | 0);
                            $610 = HEAP32[$500 >> 2] | 0;
                            $611 = (($610) + ($21) | 0);
                            $612 = HEAP8[$611 >> 0] | 0;
                            $613 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, $606, $565, $567, 11, $609, $612, $0) | 0);
                            $614 = ($613 | 0) == (0);
                            if (!($614)) {
                                $$25 = -1;
                                label = 58;
                                break;
                            }
                            $615 = $606 | 1;
                            $616 = HEAP32[$481 >> 2] | 0;
                            $617 = $615 << 4;
                            $618 = ((($616) + (($21 * 768) | 0) | 0) + ($617 << 1) | 0);
                            $619 = HEAP32[$500 >> 2] | 0;
                            $620 = (($619) + ($21) | 0);
                            $621 = HEAP8[$620 >> 0] | 0;
                            $622 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, $615, $565, $567, 11, $618, $621, $0) | 0);
                            $623 = ($622 | 0) == (0);
                            if (!($623)) {
                                $$25 = -1;
                                label = 58;
                                break;
                            }
                            $729 = (($615) + 1) | 0;
                            $730 = HEAP32[$481 >> 2] | 0;
                            $731 = $729 << 4;
                            $732 = ((($730) + (($21 * 768) | 0) | 0) + ($731 << 1) | 0);
                            $733 = HEAP32[$500 >> 2] | 0;
                            $734 = (($733) + ($21) | 0);
                            $735 = HEAP8[$734 >> 0] | 0;
                            $736 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, $729, $565, $567, 11, $732, $735, $0) | 0);
                            $737 = ($736 | 0) == (0);
                            if (!($737)) {
                                $$25 = -1;
                                label = 58;
                                break;
                            }
                            $738 = $606 | 3;
                            $739 = HEAP32[$481 >> 2] | 0;
                            $740 = $738 << 4;
                            $741 = ((($739) + (($21 * 768) | 0) | 0) + ($740 << 1) | 0);
                            $742 = HEAP32[$500 >> 2] | 0;
                            $743 = (($742) + ($21) | 0);
                            $744 = HEAP8[$743 >> 0] | 0;
                            $745 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, $738, $565, $567, 11, $741, $744, $0) | 0);
                            $746 = ($745 | 0) == (0);
                            if (!($746)) {
                                $$25 = -1;
                                label = 58;
                                break;
                            }
                        }
                        $633 = (($$1517620) + 1) | 0;
                        $634 = ($$1517620 | 0) < (3);
                        if ($634) {
                            $$1517620 = $633;
                        } else {
                            label = 50;
                            break L53;
                        }
                    }
                    if ((label | 0) == 58) {
                        STACKTOP = sp; return ($$25 | 0);
                    }
                }
                $566 = (26986 + ($12) | 0);
                $$0516623 = 0; $569 = $535;
                while (1) {
                    $568 = $569 & 519;
                    $570 = ($568 << 16 >> 16) != (0);
                    $571 = $570 ? 11 : 12;
                    $572 = 1 << $$0516623;
                    $573 = $572 & $$1525;
                    $574 = ($573 | 0) == (0);
                    $575 = $$0516623 << 2;
                    if ($574) {
                        $592 = (15458 + ($575) | 0);
                        $593 = HEAP8[$592 >> 0] | 0;
                        $594 = $593 & 255;
                        $595 = (($29) + ($594) | 0);
                        HEAP8[$595 >> 0] = 0 & 255; HEAP8[$595 + 1 >> 0] = 0 >> 8;
                        $596 = $575 | 2;
                        $597 = (15458 + ($596) | 0);
                        $598 = HEAP8[$597 >> 0] | 0;
                        $599 = $598 & 255;
                        $600 = (($29) + ($599) | 0);
                        HEAP8[$600 >> 0] = 0 & 255; HEAP8[$600 + 1 >> 0] = 0 >> 8;
                    } else {
                        $576 = $$0516623 << 6;
                        $577 = HEAP32[$481 >> 2] | 0;
                        $578 = ((($577) + (($21 * 768) | 0) | 0) + ($576 << 1) | 0);
                        $579 = HEAP32[$500 >> 2] | 0;
                        $580 = (($579) + ($21) | 0);
                        $581 = HEAP8[$580 >> 0] | 0;
                        $582 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($5, $29, $9, $575, $565, $566, $571, $578, 0, $581, $0) | 0);
                        $583 = ($582 | 0) == (0);
                        if (!($583)) {
                            $$25 = -1;
                            label = 58;
                            break;
                        }
                        $584 = $575 | 1;
                        $585 = HEAP32[$481 >> 2] | 0;
                        $586 = ((($585) + (($21 * 768) | 0) | 0) + ($576 << 1) | 0);
                        $587 = HEAP32[$500 >> 2] | 0;
                        $588 = (($587) + ($21) | 0);
                        $589 = HEAP8[$588 >> 0] | 0;
                        $590 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($5, $29, $9, $584, $565, $566, $571, $586, 1, $589, $0) | 0);
                        $591 = ($590 | 0) == (0);
                        if (!($591)) {
                            $$25 = -1;
                            label = 58;
                            break;
                        }
                        $747 = (($584) + 1) | 0;
                        $748 = HEAP32[$481 >> 2] | 0;
                        $749 = ((($748) + (($21 * 768) | 0) | 0) + ($576 << 1) | 0);
                        $750 = HEAP32[$500 >> 2] | 0;
                        $751 = (($750) + ($21) | 0);
                        $752 = HEAP8[$751 >> 0] | 0;
                        $753 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($5, $29, $9, $747, $565, $566, $571, $749, 2, $752, $0) | 0);
                        $754 = ($753 | 0) == (0);
                        if (!($754)) {
                            $$25 = -1;
                            label = 58;
                            break;
                        }
                        $755 = $575 | 3;
                        $756 = HEAP32[$481 >> 2] | 0;
                        $757 = ((($756) + (($21 * 768) | 0) | 0) + ($576 << 1) | 0);
                        $758 = HEAP32[$500 >> 2] | 0;
                        $759 = (($758) + ($21) | 0);
                        $760 = HEAP8[$759 >> 0] | 0;
                        $761 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($5, $29, $9, $755, $565, $566, $571, $757, 3, $760, $0) | 0);
                        $762 = ($761 | 0) == (0);
                        if (!($762)) {
                            $$25 = -1;
                            label = 58;
                            break;
                        }
                    }
                    $601 = ($$0516623 | 0) < (3);
                    if (!($601)) {
                        label = 50;
                        break L53;
                    }
                    $602 = (($$0516623) + 1) | 0;
                    $$pre655 = HEAP32[$532 >> 2] | 0;
                    $$phi$trans$insert656 = (($$pre655) + ($21 << 1) | 0);
                    $$pre657 = HEAP16[$$phi$trans$insert656 >> 1] | 0;
                    $$0516623 = $602; $569 = $$pre657;
                }
                if ((label | 0) == 58) {
                    STACKTOP = sp; return ($$25 | 0);
                }
            }
        } while (0);
        if ((label | 0) == 50) {
            $635 = ((($29)) + 9 | 0);
            $636 = HEAPU8[$635 >> 0] | (HEAPU8[$635 + 1 >> 0] << 8) | (HEAPU8[$635 + 2 >> 0] << 16) | (HEAPU8[$635 + 3 >> 0] << 24);
            HEAP32[$24 >> 2] = $636;
            $637 = ((($29)) + 17 | 0);
            $638 = HEAPU8[$637 >> 0] | (HEAPU8[$637 + 1 >> 0] << 8) | (HEAPU8[$637 + 2 >> 0] << 16) | (HEAPU8[$637 + 3 >> 0] << 24);
            HEAP32[$423 >> 2] = $638;
            $639 = ((($29)) + 25 | 0);
            $640 = HEAPU8[$639 >> 0] | (HEAPU8[$639 + 1 >> 0] << 8) | (HEAPU8[$639 + 2 >> 0] << 16) | (HEAPU8[$639 + 3 >> 0] << 24);
            HEAP32[$424 >> 2] = $640;
            $$sink26$in$in = ((($29)) + 33 | 0);
            $$sink26 = HEAPU8[$$sink26$in$in >> 0] | (HEAPU8[$$sink26$in$in + 1 >> 0] << 8) | (HEAPU8[$$sink26$in$in + 2 >> 0] << 16) | (HEAPU8[$$sink26$in$in + 3 >> 0] << 24);
            HEAP32[$425 >> 2] = $$sink26;
        }
        $641 = ($$1527 | 0) == (2);
        $642 = (($$1527) + -1) | 0;
        $643 = ($642 >>> 0) < (2);
        if ($643) {
            $644 = HEAP32[$481 >> 2] | 0;
            $645 = (((($644) + (($21 * 768) | 0) | 0)) + 512 | 0);
            $646 = HEAP32[$508 >> 2] | 0;
            $647 = (($646) + ($21 << 1) | 0);
            $648 = HEAP8[$647 >> 0] | 0;
            $649 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 16, 4, 15498, 7, $645, $648, $0) | 0);
            $650 = ($649 | 0) == (0);
            if (!($650)) {
                $$25 = -1;
                STACKTOP = sp; return ($$25 | 0);
            }
            $651 = HEAP32[$481 >> 2] | 0;
            $652 = (((($651) + (($21 * 768) | 0) | 0)) + 640 | 0);
            $653 = HEAP32[$508 >> 2] | 0;
            $654 = (((($653) + ($21 << 1) | 0)) + 1 | 0);
            $655 = HEAP8[$654 >> 0] | 0;
            $656 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 20, 4, 15498, 8, $652, $655, $0) | 0);
            $657 = ($656 | 0) == (0);
            if (!($657)) {
                $$25 = -1;
                STACKTOP = sp; return ($$25 | 0);
            }
        }
        do {
            if ($641) {
                $658 = ($12 >>> 0) > (1);
                $659 = $658 ? $12 : 1;
                $660 = (($15) + 1) | 0;
                $661 = (($660) - ($659)) | 0;
                $662 = (26970 + ($659) | 0);
                $663 = HEAP32[$481 >> 2] | 0;
                $664 = (((($663) + (($21 * 768) | 0) | 0)) + 512 | 0);
                $665 = HEAP32[$508 >> 2] | 0;
                $666 = (($665) + ($21 << 1) | 0);
                $667 = HEAP8[$666 >> 0] | 0;
                $668 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 16, $661, $662, 9, $664, $667, $0) | 0);
                $669 = ($668 | 0) == (0);
                if (!($669)) {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $670 = HEAP32[$481 >> 2] | 0;
                $671 = (((($670) + (($21 * 768) | 0) | 0)) + 544 | 0);
                $672 = HEAP32[$508 >> 2] | 0;
                $673 = (($672) + ($21 << 1) | 0);
                $674 = HEAP8[$673 >> 0] | 0;
                $675 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 17, $661, $662, 9, $671, $674, $0) | 0);
                $676 = ($675 | 0) == (0);
                if (!($676)) {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $677 = HEAP32[$481 >> 2] | 0;
                $678 = (((($677) + (($21 * 768) | 0) | 0)) + 576 | 0);
                $679 = HEAP32[$508 >> 2] | 0;
                $680 = (($679) + ($21 << 1) | 0);
                $681 = HEAP8[$680 >> 0] | 0;
                $682 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 18, $661, $662, 9, $678, $681, $0) | 0);
                $683 = ($682 | 0) == (0);
                if (!($683)) {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $684 = HEAP32[$481 >> 2] | 0;
                $685 = (((($684) + (($21 * 768) | 0) | 0)) + 608 | 0);
                $686 = HEAP32[$508 >> 2] | 0;
                $687 = (($686) + ($21 << 1) | 0);
                $688 = HEAP8[$687 >> 0] | 0;
                $689 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 19, $661, $662, 9, $685, $688, $0) | 0);
                $690 = ($689 | 0) == (0);
                if (!($690)) {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $691 = HEAP32[$481 >> 2] | 0;
                $692 = (((($691) + (($21 * 768) | 0) | 0)) + 640 | 0);
                $693 = HEAP32[$508 >> 2] | 0;
                $694 = (((($693) + ($21 << 1) | 0)) + 1 | 0);
                $695 = HEAP8[$694 >> 0] | 0;
                $696 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 20, $661, $662, 10, $692, $695, $0) | 0);
                $697 = ($696 | 0) == (0);
                if (!($697)) {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $698 = HEAP32[$481 >> 2] | 0;
                $699 = (((($698) + (($21 * 768) | 0) | 0)) + 672 | 0);
                $700 = HEAP32[$508 >> 2] | 0;
                $701 = (((($700) + ($21 << 1) | 0)) + 1 | 0);
                $702 = HEAP8[$701 >> 0] | 0;
                $703 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 21, $661, $662, 10, $699, $702, $0) | 0);
                $704 = ($703 | 0) == (0);
                if (!($704)) {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $705 = HEAP32[$481 >> 2] | 0;
                $706 = (((($705) + (($21 * 768) | 0) | 0)) + 704 | 0);
                $707 = HEAP32[$508 >> 2] | 0;
                $708 = (((($707) + ($21 << 1) | 0)) + 1 | 0);
                $709 = HEAP8[$708 >> 0] | 0;
                $710 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 22, $661, $662, 10, $706, $709, $0) | 0);
                $711 = ($710 | 0) == (0);
                if (!($711)) {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $712 = HEAP32[$481 >> 2] | 0;
                $713 = (((($712) + (($21 * 768) | 0) | 0)) + 736 | 0);
                $714 = HEAP32[$508 >> 2] | 0;
                $715 = (((($714) + ($21 << 1) | 0)) + 1 | 0);
                $716 = HEAP8[$715 >> 0] | 0;
                $717 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($5, $29, $9, 23, $661, $662, 10, $713, $716, $0) | 0);
                $718 = ($717 | 0) == (0);
                if ($718) {
                    $719 = ((($29)) + 14 | 0);
                    $720 = HEAP16[$719 >> 1] | 0;
                    HEAP16[$426 >> 1] = $720;
                    $721 = ((($29)) + 22 | 0);
                    $722 = HEAP16[$721 >> 1] | 0;
                    HEAP16[$427 >> 1] = $722;
                    $723 = ((($29)) + 38 | 0);
                    $724 = HEAP16[$723 >> 1] | 0;
                    $725 = (((($23) + (($21 * 24) | 0) | 0)) + 18 | 0);
                    HEAP16[$725 >> 1] = $724;
                    $726 = ((($29)) + 46 | 0);
                    $727 = HEAP16[$726 >> 1] | 0;
                    $728 = (((($23) + (($21 * 24) | 0) | 0)) + 22 | 0);
                    HEAP16[$728 >> 1] = $727;
                    break;
                } else {
                    $$25 = -1;
                    STACKTOP = sp; return ($$25 | 0);
                }
            }
        } while (0);
        __ZN7WelsDec10BsEndCavlcEPN10WelsCommon15TagBitStringAuxE($9);
        $$25 = 0;
        STACKTOP = sp; return ($$25 | 0);
    }
    function __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $$0100 = 0, $$098 = 0, $$099 = 0, $$1 = 0, $$1101 = 0, $$sink = 0, $$sink3 = 0, $$sink6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
        var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
        var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
        var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
        var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
        var $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($1)) + 4040 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($1)) + 4032 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($1)) + 4036 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($1)) + 3912 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = (($9) + ($3 << 2) | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ($5 | 0) != (0);
        if ($12) {
            $13 = (($3) + -1) | 0;
            $14 = (($9) + ($13 << 2) | 0);
            $15 = HEAP32[$14 >> 2] | 0;
            $16 = ($15 | 0) == ($11 | 0);
            $17 = $16 & 1;
            $18 = ((($0)) + 4 | 0);
            HEAP32[$18 >> 2] = $17;
            if ($16) {
                $19 = ((($1)) + 3956 | 0);
                $20 = HEAP32[$19 >> 2] | 0;
                $21 = (($20) + ($13) | 0);
                $22 = HEAP8[$21 >> 0] | 0;
                $$098 = $13; $$sink = $22; $61 = $17;
            } else {
                $$098 = $13; $$sink = 0; $61 = $17;
            }
        } else {
            $23 = ((($0)) + 4 | 0);
            HEAP32[$23 >> 2] = 0;
            $24 = ((($0)) + 12 | 0);
            HEAP32[$24 >> 2] = 0;
            $$098 = 0; $$sink = 0; $61 = 0;
        }
        $25 = ((($0)) + 33 | 0);
        HEAP8[$25 >> 0] = $$sink;
        $26 = ($7 | 0) == (0);
        if ($26) {
            HEAP32[$0 >> 2] = 0;
            $58 = ((($0)) + 12 | 0);
            HEAP32[$58 >> 2] = 0;
            $59 = ((($0)) + 8 | 0);
            HEAP32[$59 >> 2] = 0;
            $60 = ((($0)) + 32 | 0);
            HEAP8[$60 >> 0] = 0;
            $$0 = 0; $$1 = 0; $$1101 = 0; $70 = 0; $79 = 0; $88 = 0;
        } else {
            $27 = ((($1)) + 4044 | 0);
            $28 = HEAP32[$27 >> 2] | 0;
            $29 = (($3) - ($28)) | 0;
            $30 = HEAP32[$8 >> 2] | 0;
            $31 = (($30) + ($29 << 2) | 0);
            $32 = HEAP32[$31 >> 2] | 0;
            $33 = ($32 | 0) == ($11 | 0);
            $34 = $33 & 1;
            HEAP32[$0 >> 2] = $34;
            if ($33) {
                $35 = ((($1)) + 3956 | 0);
                $36 = HEAP32[$35 >> 2] | 0;
                $37 = (($36) + ($29) | 0);
                $38 = HEAP8[$37 >> 0] | 0;
                $40 = $38;
            } else {
                $40 = 0;
            }
            $39 = ((($0)) + 32 | 0);
            HEAP8[$39 >> 0] = $40;
            if ($12) {
                $41 = (($29) + -1) | 0;
                $42 = HEAP32[$8 >> 2] | 0;
                $43 = (($42) + ($41 << 2) | 0);
                $44 = HEAP32[$43 >> 2] | 0;
                $45 = ($44 | 0) == ($11 | 0);
                $46 = $45 & 1;
                $$0100 = $41; $$sink3 = $46;
            } else {
                $$0100 = 0; $$sink3 = 0;
            }
            $47 = ((($0)) + 12 | 0);
            HEAP32[$47 >> 2] = $$sink3;
            $48 = HEAP32[$27 >> 2] | 0;
            $49 = (($48) + -1) | 0;
            $50 = ($5 | 0) == ($49 | 0);
            if ($50) {
                $$099 = 0; $$sink6 = 0;
            } else {
                $51 = (($29) + 1) | 0;
                $52 = HEAP32[$8 >> 2] | 0;
                $53 = (($52) + ($51 << 2) | 0);
                $54 = HEAP32[$53 >> 2] | 0;
                $55 = ($54 | 0) == ($11 | 0);
                $56 = $55 & 1;
                $$099 = $51; $$sink6 = $56;
            }
            $57 = ((($0)) + 8 | 0);
            HEAP32[$57 >> 2] = $$sink6;
            $$0 = $29; $$1 = $$099; $$1101 = $$0100; $70 = $34; $79 = $$sink3; $88 = $$sink6;
        }
        $62 = ($61 | 0) == (0);
        if ($62) {
            $69 = 0;
        } else {
            $63 = ((($1)) + 3908 | 0);
            $64 = HEAP32[$63 >> 2] | 0;
            $65 = (($64) + ($$098 << 1) | 0);
            $66 = HEAP16[$65 >> 1] | 0;
            $67 = $66 << 16 >> 16;
            $69 = $67;
        }
        $68 = ((($0)) + 16 | 0);
        HEAP32[$68 >> 2] = $69;
        $71 = ($70 | 0) == (0);
        if ($71) {
            $78 = 0;
        } else {
            $72 = ((($1)) + 3908 | 0);
            $73 = HEAP32[$72 >> 2] | 0;
            $74 = (($73) + ($$0 << 1) | 0);
            $75 = HEAP16[$74 >> 1] | 0;
            $76 = $75 << 16 >> 16;
            $78 = $76;
        }
        $77 = ((($0)) + 20 | 0);
        HEAP32[$77 >> 2] = $78;
        $80 = ($79 | 0) == (0);
        if ($80) {
            $87 = 0;
        } else {
            $81 = ((($1)) + 3908 | 0);
            $82 = HEAP32[$81 >> 2] | 0;
            $83 = (($82) + ($$1101 << 1) | 0);
            $84 = HEAP16[$83 >> 1] | 0;
            $85 = $84 << 16 >> 16;
            $87 = $85;
        }
        $86 = ((($0)) + 24 | 0);
        HEAP32[$86 >> 2] = $87;
        $89 = ($88 | 0) == (0);
        if ($89) {
            $96 = 0;
            $95 = ((($0)) + 28 | 0);
            HEAP32[$95 >> 2] = $96;
            return;
        }
        $90 = ((($1)) + 3908 | 0);
        $91 = HEAP32[$90 >> 2] | 0;
        $92 = (($91) + ($$1 << 1) | 0);
        $93 = HEAP16[$92 >> 1] | 0;
        $94 = $93 << 16 >> 16;
        $96 = $94;
        $95 = ((($0)) + 28 | 0);
        HEAP32[$95 >> 2] = $96;
        return;
    }
    function __ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $$0$i$ph = 0, $$0$i7678 = 0, $$074 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
        var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 20 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = $3 >>> 24;
        $5 = ($4 | 0) == (0);
        do {
            if ($5) {
                $9 = $3 >>> 16;
                $10 = ($9 | 0) == (0);
                if (!($10)) {
                    $11 = (15630 + ($9) | 0);
                    $12 = HEAP8[$11 >> 0] | 0;
                    $13 = $12 & 255;
                    $14 = (($13) + 8) | 0;
                    $$0$i$ph = $14;
                    break;
                }
                $15 = $3 >>> 8;
                $16 = ($15 | 0) == (0);
                if (!($16)) {
                    $17 = (15630 + ($15) | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    $20 = (($19) + 16) | 0;
                    $$0$i$ph = $20;
                    break;
                }
                $21 = ($3 | 0) == (0);
                if ($21) {
                    $$0 = 12;
                    return ($$0 | 0);
                } else {
                    $22 = (15630 + ($3) | 0);
                    $23 = HEAP8[$22 >> 0] | 0;
                    $24 = $23 & 255;
                    $25 = (($24) + 24) | 0;
                    $$0$i$ph = $25;
                    break;
                }
            } else {
                $6 = (15630 + ($4) | 0);
                $7 = HEAP8[$6 >> 0] | 0;
                $8 = $7 & 255;
                $$0$i$ph = $8;
            }
        } while (0);
        $26 = ((($0)) + 4 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = HEAP32[$0 >> 2] | 0;
        $29 = (($27) - ($28)) | 0;
        $30 = ($$0$i$ph | 0) > (16);
        $31 = ((($0)) + 16 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = (($32) - ($28)) | 0;
        $34 = $32;
        do {
            if ($30) {
                $35 = $3 << 16;
                HEAP32[$2 >> 2] = $35;
                $36 = ((($0)) + 24 | 0);
                $37 = HEAP32[$36 >> 2] | 0;
                $38 = (($37) + 16) | 0;
                HEAP32[$36 >> 2] = $38;
                $39 = ($37 | 0) > (-16);
                do {
                    if ($39) {
                        $40 = (($29) + 1) | 0;
                        $41 = ($33 | 0) > ($40 | 0);
                        if ($41) {
                            $$0 = 11;
                            return ($$0 | 0);
                        } else {
                            $42 = HEAP8[$34 >> 0] | 0;
                            $43 = $42 & 255;
                            $44 = $43 << 8;
                            $45 = ((($34)) + 1 | 0);
                            $46 = HEAP8[$45 >> 0] | 0;
                            $47 = $46 & 255;
                            $48 = $44 | $47;
                            $49 = $48 << $38;
                            $50 = $49 | $35;
                            HEAP32[$2 >> 2] = $50;
                            HEAP32[$36 >> 2] = $37;
                            $51 = ((($34)) + 2 | 0);
                            HEAP32[$31 >> 2] = $51;
                            $52 = $51;
                            $55 = $50; $57 = $37; $60 = $52; $64 = $51;
                            break;
                        }
                    } else {
                        $55 = $35; $57 = $38; $60 = $32; $64 = $34;
                    }
                } while (0);
                $53 = (($$0$i$ph) + -15) | 0;
                $54 = $55 << $53;
                HEAP32[$2 >> 2] = $54;
                $56 = (($57) + ($53)) | 0;
                HEAP32[$36 >> 2] = $56;
                $58 = ($56 | 0) > (0);
                if ($58) {
                    $59 = (($60) - ($28)) | 0;
                    $61 = (($29) + 1) | 0;
                    $62 = ($59 | 0) > ($61 | 0);
                    if ($62) {
                        $$0 = 11;
                        return ($$0 | 0);
                    } else {
                        $63 = HEAP8[$64 >> 0] | 0;
                        $65 = $63 & 255;
                        $66 = $65 << 8;
                        $67 = ((($64)) + 1 | 0);
                        $68 = HEAP8[$67 >> 0] | 0;
                        $69 = $68 & 255;
                        $70 = $66 | $69;
                        $71 = $70 << $56;
                        $72 = $71 | $54;
                        HEAP32[$2 >> 2] = $72;
                        $73 = (($56) + -16) | 0;
                        HEAP32[$36 >> 2] = $73;
                        $74 = ((($64)) + 2 | 0);
                        HEAP32[$31 >> 2] = $74;
                        $75 = $74;
                        $$pre$phiZ2D = $36; $102 = $73; $105 = $75; $109 = $74; $99 = $72;
                        label = 20;
                        break;
                    }
                } else {
                    $$pre$phiZ2D = $36; $102 = $56; $105 = $60; $109 = $64; $99 = $54;
                    label = 20;
                }
            } else {
                $76 = (($$0$i$ph) + 1) | 0;
                $77 = $3 << $76;
                HEAP32[$2 >> 2] = $77;
                $78 = ((($0)) + 24 | 0);
                $79 = HEAP32[$78 >> 2] | 0;
                $80 = (($79) + ($76)) | 0;
                HEAP32[$78 >> 2] = $80;
                $81 = ($80 | 0) > (0);
                do {
                    if ($81) {
                        $82 = (($29) + 1) | 0;
                        $83 = ($33 | 0) > ($82 | 0);
                        if ($83) {
                            $$0 = 11;
                            return ($$0 | 0);
                        } else {
                            $84 = HEAP8[$34 >> 0] | 0;
                            $85 = $84 & 255;
                            $86 = $85 << 8;
                            $87 = ((($34)) + 1 | 0);
                            $88 = HEAP8[$87 >> 0] | 0;
                            $89 = $88 & 255;
                            $90 = $86 | $89;
                            $91 = $90 << $80;
                            $92 = $91 | $77;
                            HEAP32[$2 >> 2] = $92;
                            $93 = (($80) + -16) | 0;
                            HEAP32[$78 >> 2] = $93;
                            $94 = ((($34)) + 2 | 0);
                            HEAP32[$31 >> 2] = $94;
                            $95 = $94;
                            $123 = $94; $124 = $93; $125 = $95; $126 = $92;
                            break;
                        }
                    } else {
                        $123 = $34; $124 = $80; $125 = $32; $126 = $77;
                    }
                } while (0);
                $96 = ($$0$i$ph | 0) == (0);
                if ($96) {
                    $$0$i7678 = 0; $$074 = 0;
                } else {
                    $$pre$phiZ2D = $78; $102 = $124; $105 = $125; $109 = $123; $99 = $126;
                    label = 20;
                }
            }
        } while (0);
        do {
            if ((label | 0) == 20) {
                $97 = (32 - ($$0$i$ph)) | 0;
                $98 = $99 >>> $97;
                $100 = $99 << $$0$i$ph;
                HEAP32[$2 >> 2] = $100;
                $101 = (($102) + ($$0$i$ph)) | 0;
                HEAP32[$$pre$phiZ2D >> 2] = $101;
                $103 = ($101 | 0) > (0);
                if ($103) {
                    $104 = (($105) - ($28)) | 0;
                    $106 = (($29) + 1) | 0;
                    $107 = ($104 | 0) > ($106 | 0);
                    if ($107) {
                        $$0 = 11;
                        return ($$0 | 0);
                    } else {
                        $108 = HEAP8[$109 >> 0] | 0;
                        $110 = $108 & 255;
                        $111 = $110 << 8;
                        $112 = ((($109)) + 1 | 0);
                        $113 = HEAP8[$112 >> 0] | 0;
                        $114 = $113 & 255;
                        $115 = $111 | $114;
                        $116 = $115 << $101;
                        $117 = $116 | $100;
                        HEAP32[$2 >> 2] = $117;
                        $118 = (($101) + -16) | 0;
                        HEAP32[$$pre$phiZ2D >> 2] = $118;
                        $119 = ((($109)) + 2 | 0);
                        HEAP32[$31 >> 2] = $119;
                        $$0$i7678 = $$0$i$ph; $$074 = $98;
                        break;
                    }
                } else {
                    $$0$i7678 = $$0$i$ph; $$074 = $98;
                }
            }
        } while (0);
        $120 = 1 << $$0$i7678;
        $121 = (($120) + -1) | 0;
        $122 = (($121) + ($$074)) | 0;
        HEAP32[$1 >> 2] = $122;
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec12InitReadBitsEPN10WelsCommon15TagBitStringAuxEi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 16 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($0)) + 4 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = (0 - ($1)) | 0;
        $7 = (($5) + ($6) | 0);
        $8 = ($3 >>> 0) < ($7 >>> 0);
        if (!($8)) {
            $$0 = 2;
            return ($$0 | 0);
        }
        $9 = HEAP8[$3 >> 0] | 0;
        $10 = $9 & 255;
        $11 = $10 << 24;
        $12 = ((($3)) + 1 | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = $13 & 255;
        $15 = $14 << 16;
        $16 = $15 | $11;
        $17 = ((($3)) + 2 | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = $18 & 255;
        $20 = $19 << 8;
        $21 = $16 | $20;
        $22 = ((($3)) + 3 | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = $23 & 255;
        $25 = $21 | $24;
        $26 = ((($0)) + 20 | 0);
        HEAP32[$26 >> 2] = $25;
        $27 = ((($3)) + 4 | 0);
        HEAP32[$2 >> 2] = $27;
        $28 = ((($0)) + 24 | 0);
        HEAP32[$28 >> 2] = -16;
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$095123 = 0, $$096 = 0, $$096$pr = 0, $$10 = 0, $$111 = 0, $$6$ph = 0, $$pn = 0, $$pn$in = 0, $$sink = 0, $$sink$in = 0, $$sink6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
        var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
        var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
        var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0;
        var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
        var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
        var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
        var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
        var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 144 | 0;
        $5 = sp + 8 | 0;
        $6 = sp + 4 | 0;
        $7 = sp;
        $8 = sp + 128 | 0;
        dest = $5; stop = dest + 120 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $9 = ((($4)) + 4040 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($0)) + 317152 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        FUNCTION_TABLE_vii[$12 & 63]($1, $5);
        $13 = ((($5)) + 24 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = $14 << 2;
        $16 = HEAP32[$5 >> 2] | 0;
        $17 = $16 << 1;
        $18 = $17 | $15;
        $19 = ((($5)) + 4 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = $18 | $20;
        $22 = $21 & 255;
        $23 = ((($4)) + 3896 | 0);
        $24 = ((($3)) + 20 | 0);
        $25 = ((($3)) + 4 | 0);
        $26 = ((($3)) + 16 | 0);
        $27 = ((($3)) + 24 | 0);
        $28 = ((($4)) + 3996 | 0);
        $$095123 = 0;
        L1: while (1) {
            $47 = HEAP32[$23 >> 2] | 0;
            $48 = ((($47)) + 176 | 0);
            $49 = HEAP8[$48 >> 0] | 0;
            $50 = ($49 << 24 >> 24) == (0);
            if ($50) {
                $53 = HEAP32[$24 >> 2] | 0;
                $54 = $53 >>> 31;
                $55 = HEAP32[$25 >> 2] | 0;
                $56 = HEAP32[$3 >> 2] | 0;
                $57 = HEAP32[$26 >> 2] | 0;
                $58 = $53 << 1;
                HEAP32[$24 >> 2] = $58;
                $59 = HEAP32[$27 >> 2] | 0;
                $60 = (($59) + 1) | 0;
                HEAP32[$27 >> 2] = $60;
                $61 = ($59 | 0) > (-1);
                $62 = $57;
                if ($61) {
                    $63 = (($57) - ($56)) | 0;
                    $64 = (($55) + 1) | 0;
                    $65 = (($64) - ($56)) | 0;
                    $66 = ($63 | 0) > ($65 | 0);
                    if ($66) {
                        $$10 = 11;
                        label = 30;
                        break;
                    }
                    $67 = HEAP8[$62 >> 0] | 0;
                    $68 = $67 & 255;
                    $69 = $68 << 8;
                    $70 = ((($62)) + 1 | 0);
                    $71 = HEAP8[$70 >> 0] | 0;
                    $72 = $71 & 255;
                    $73 = $69 | $72;
                    $74 = $73 << $60;
                    $75 = $74 | $58;
                    HEAP32[$24 >> 2] = $75;
                    $76 = (($59) + -15) | 0;
                    HEAP32[$27 >> 2] = $76;
                    $77 = ((($62)) + 2 | 0);
                    HEAP32[$26 >> 2] = $77;
                }
                HEAP32[$6 >> 2] = $54;
                $$096 = $54;
            } else {
                $51 = (__ZN7WelsDec27ParseIntraPredModeLumaCabacEPNS_21TagWelsDecoderContextERi($0, $7) | 0);
                $52 = ($51 | 0) == (0);
                if (!($52)) {
                    $$10 = $51;
                    label = 30;
                    break;
                }
                $$096$pr = HEAP32[$7 >> 2] | 0;
                $$096 = $$096$pr;
            }
            $78 = (__ZN7WelsDec16PredIntra4x4ModeEPai($2, $$095123) | 0);
            $79 = HEAP32[$23 >> 2] | 0;
            $80 = ((($79)) + 176 | 0);
            $81 = HEAP8[$80 >> 0] | 0;
            $82 = ($81 << 24 >> 24) == (0);
            do {
                if ($82) {
                    $89 = ($$096 | 0) == (0);
                    if (!($89)) {
                        $90 = $78 & 255;
                        HEAP8[$8 >> 0] = $90;
                        break;
                    }
                    $91 = HEAP32[$24 >> 2] | 0;
                    $92 = $91 >>> 29;
                    $93 = HEAP32[$25 >> 2] | 0;
                    $94 = HEAP32[$3 >> 2] | 0;
                    $95 = HEAP32[$26 >> 2] | 0;
                    $96 = $91 << 3;
                    HEAP32[$24 >> 2] = $96;
                    $97 = HEAP32[$27 >> 2] | 0;
                    $98 = (($97) + 3) | 0;
                    HEAP32[$27 >> 2] = $98;
                    $99 = ($97 | 0) > (-3);
                    $100 = $95;
                    if ($99) {
                        $101 = (($95) - ($94)) | 0;
                        $102 = (($93) + 1) | 0;
                        $103 = (($102) - ($94)) | 0;
                        $104 = ($101 | 0) > ($103 | 0);
                        if ($104) {
                            $$6$ph = 11;
                            label = 21;
                            break L1;
                        }
                        $105 = HEAP8[$100 >> 0] | 0;
                        $106 = $105 & 255;
                        $107 = $106 << 8;
                        $108 = ((($100)) + 1 | 0);
                        $109 = HEAP8[$108 >> 0] | 0;
                        $110 = $109 & 255;
                        $111 = $107 | $110;
                        $112 = $111 << $98;
                        $113 = $112 | $96;
                        HEAP32[$24 >> 2] = $113;
                        $114 = (($97) + -13) | 0;
                        HEAP32[$27 >> 2] = $114;
                        $115 = ((($100)) + 2 | 0);
                        HEAP32[$26 >> 2] = $115;
                    }
                    HEAP32[$6 >> 2] = $92;
                    $116 = ($92 | 0) >= ($78 | 0);
                    $117 = $116 & 1;
                    $118 = (($92) + ($117)) | 0;
                    $119 = $118 & 255;
                    HEAP8[$8 >> 0] = $119;
                } else {
                    $83 = ($$096 | 0) == (-1);
                    if ($83) {
                        $84 = $78 & 255;
                        HEAP8[$8 >> 0] = $84;
                        break;
                    } else {
                        $85 = ($$096 | 0) >= ($78 | 0);
                        $86 = $85 & 1;
                        $87 = (($$096) + ($86)) | 0;
                        $88 = $87 & 255;
                        HEAP8[$8 >> 0] = $88;
                        break;
                    }
                }
            } while (0);
            $30 = (__ZN7WelsDec21CheckIntraNxNPredModeEPiPaib($5, $8, $$095123, 0) | 0);
            $120 = ($30 | 0) == (-1);
            if ($120) {
                $$6$ph = 1050;
                label = 21;
                break;
            }
            $29 = $30 & 255;
            $31 = HEAP32[$28 >> 2] | 0;
            $32 = (15415 + ($$095123) | 0);
            $33 = HEAP8[$32 >> 0] | 0;
            $34 = $33 & 255;
            $35 = ((($31) + ($10 << 4) | 0) + ($34) | 0);
            HEAP8[$35 >> 0] = $29;
            $36 = HEAP8[$8 >> 0] | 0;
            $37 = (15458 + ($$095123) | 0);
            $38 = HEAP8[$37 >> 0] | 0;
            $39 = $38 & 255;
            $40 = (($2) + ($39) | 0);
            HEAP8[$40 >> 0] = $36;
            $41 = (10975 + ($$095123) | 0);
            $42 = HEAP8[$41 >> 0] | 0;
            $43 = $42 & 255;
            $44 = (($5) + ($43 << 2) | 0);
            HEAP32[$44 >> 2] = 1;
            $45 = (($$095123) + 1) | 0;
            $46 = ($$095123 | 0) < (15);
            if ($46) {
                $$095123 = $45;
            } else {
                label = 22;
                break;
            }
        }
        if ((label | 0) == 21) {
            $$10 = $$6$ph;
            STACKTOP = sp; return ($$10 | 0);
        }
        else if ((label | 0) == 22) {
            $121 = ((($2)) + 33 | 0);
            $122 = HEAPU8[$121 >> 0] | (HEAPU8[$121 + 1 >> 0] << 8) | (HEAPU8[$121 + 2 >> 0] << 16) | (HEAPU8[$121 + 3 >> 0] << 24);
            $123 = ((($4)) + 3992 | 0);
            $124 = HEAP32[$123 >> 2] | 0;
            $125 = (($124) + ($10 << 3) | 0);
            HEAP8[$125 >> 0] = $122 & 255; HEAP8[$125 + 1 >> 0] = ($122 >> 8) & 255; HEAP8[$125 + 2 >> 0] = ($122 >> 16) & 255; HEAP8[$125 + 3 >> 0] = $122 >> 24;
            $126 = ((($2)) + 12 | 0);
            $127 = HEAP8[$126 >> 0] | 0;
            $128 = HEAP32[$123 >> 2] | 0;
            $129 = (((($128) + ($10 << 3) | 0)) + 4 | 0);
            HEAP8[$129 >> 0] = $127;
            $130 = ((($2)) + 20 | 0);
            $131 = HEAP8[$130 >> 0] | 0;
            $132 = HEAP32[$123 >> 2] | 0;
            $133 = (((($132) + ($10 << 3) | 0)) + 5 | 0);
            HEAP8[$133 >> 0] = $131;
            $134 = ((($2)) + 28 | 0);
            $135 = HEAP8[$134 >> 0] | 0;
            $136 = HEAP32[$123 >> 2] | 0;
            $137 = (((($136) + ($10 << 3) | 0)) + 6 | 0);
            HEAP8[$137 >> 0] = $135;
            $138 = ((($0)) + 241924 | 0);
            $139 = HEAP32[$138 >> 2] | 0;
            $140 = ((($139)) + 318 | 0);
            $141 = HEAP8[$140 >> 0] | 0;
            $142 = ($141 << 24 >> 24) == (0);
            if ($142) {
                $$10 = 0;
                STACKTOP = sp; return ($$10 | 0);
            }
            $143 = HEAP32[$23 >> 2] | 0;
            $144 = ((($143)) + 176 | 0);
            $145 = HEAP8[$144 >> 0] | 0;
            $146 = ($145 << 24 >> 24) == (0);
            if ($146) {
                $151 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($3, $6) | 0);
                $152 = ($151 | 0) == (0);
                if (!($152)) {
                    $$10 = $151;
                    STACKTOP = sp; return ($$10 | 0);
                }
                $153 = HEAP32[$6 >> 2] | 0;
                $154 = ($153 >>> 0) > (3);
                if ($154) {
                    $$10 = 1052;
                    STACKTOP = sp; return ($$10 | 0);
                } else {
                    $$sink$in = $153;
                }
            } else {
                $147 = (__ZN7WelsDec29ParseIntraPredModeChromaCabacEPNS_21TagWelsDecoderContextEhRi($0, $22, $7) | 0);
                $148 = ($147 | 0) == (0);
                if (!($148)) {
                    $$10 = $147;
                    STACKTOP = sp; return ($$10 | 0);
                }
                $149 = HEAP32[$7 >> 2] | 0;
                $150 = ($149 | 0) > (3);
                if ($150) {
                    $$10 = 1052;
                    STACKTOP = sp; return ($$10 | 0);
                } else {
                    $$sink$in = $149;
                }
            }
            $$pn$in = ((($4)) + 4004 | 0);
            $$pn = HEAP32[$$pn$in >> 2] | 0;
            $$sink = $$sink$in & 255;
            $$sink6 = (($$pn) + ($10) | 0);
            HEAP8[$$sink6 >> 0] = $$sink;
            $155 = HEAP32[$$pn$in >> 2] | 0;
            $156 = (($155) + ($10) | 0);
            $157 = HEAP8[$156 >> 0] | 0;
            $158 = ($157 << 24 >> 24) == (-1);
            if ($158) {
                $$10 = 1052;
                STACKTOP = sp; return ($$10 | 0);
            }
            $159 = (__ZN7WelsDec24CheckIntraChromaPredModeEhPa($22, $156) | 0);
            $160 = ($159 | 0) == (0);
            $$111 = $160 ? 0 : 1052;
            $$10 = $$111;
            STACKTOP = sp; return ($$10 | 0);
        }
        else if ((label | 0) == 30) {
            STACKTOP = sp; return ($$10 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0104134 = 0, $$0106 = 0, $$0106$pr = 0, $$10 = 0, $$121 = 0, $$6$ph = 0, $$pn = 0, $$pn$in = 0, $$sink = 0, $$sink$in = 0, $$sink6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
        var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
        var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
        var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
        var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
        var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
        var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
        var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
        var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 144 | 0;
        $5 = sp + 8 | 0;
        $6 = sp + 4 | 0;
        $7 = sp;
        $8 = sp + 128 | 0;
        dest = $5; stop = dest + 120 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $9 = ((($4)) + 4040 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($0)) + 317152 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        FUNCTION_TABLE_vii[$12 & 63]($1, $5);
        $13 = ((($5)) + 20 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = $14 << 3;
        $16 = ((($5)) + 24 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = $17 << 2;
        $19 = $18 | $15;
        $20 = HEAP32[$5 >> 2] | 0;
        $21 = $20 << 1;
        $22 = $19 | $21;
        $23 = ((($5)) + 4 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = $22 | $24;
        $26 = $25 & 255;
        $27 = ((($4)) + 4000 | 0);
        $28 = HEAP32[$27 >> 2] | 0;
        $29 = (($28) + ($10) | 0);
        HEAP8[$29 >> 0] = $26;
        $30 = ((($4)) + 3896 | 0);
        $31 = ((($3)) + 20 | 0);
        $32 = ((($3)) + 4 | 0);
        $33 = ((($3)) + 16 | 0);
        $34 = ((($3)) + 24 | 0);
        $35 = ((($4)) + 3996 | 0);
        $$0104134 = 0;
        L1: while (1) {
            $100 = HEAP32[$30 >> 2] | 0;
            $101 = ((($100)) + 176 | 0);
            $102 = HEAP8[$101 >> 0] | 0;
            $103 = ($102 << 24 >> 24) == (0);
            if ($103) {
                $106 = HEAP32[$31 >> 2] | 0;
                $107 = $106 >>> 31;
                $108 = HEAP32[$32 >> 2] | 0;
                $109 = HEAP32[$3 >> 2] | 0;
                $110 = HEAP32[$33 >> 2] | 0;
                $111 = $106 << 1;
                HEAP32[$31 >> 2] = $111;
                $112 = HEAP32[$34 >> 2] | 0;
                $113 = (($112) + 1) | 0;
                HEAP32[$34 >> 2] = $113;
                $114 = ($112 | 0) > (-1);
                $115 = $110;
                if ($114) {
                    $116 = (($110) - ($109)) | 0;
                    $117 = (($108) + 1) | 0;
                    $118 = (($117) - ($109)) | 0;
                    $119 = ($116 | 0) > ($118 | 0);
                    if ($119) {
                        $$10 = 11;
                        label = 29;
                        break;
                    }
                    $120 = HEAP8[$115 >> 0] | 0;
                    $121 = $120 & 255;
                    $122 = $121 << 8;
                    $123 = ((($115)) + 1 | 0);
                    $124 = HEAP8[$123 >> 0] | 0;
                    $125 = $124 & 255;
                    $126 = $122 | $125;
                    $127 = $126 << $113;
                    $128 = $127 | $111;
                    HEAP32[$31 >> 2] = $128;
                    $129 = (($112) + -15) | 0;
                    HEAP32[$34 >> 2] = $129;
                    $130 = ((($115)) + 2 | 0);
                    HEAP32[$33 >> 2] = $130;
                }
                HEAP32[$6 >> 2] = $107;
                $$0106 = $107;
            } else {
                $104 = (__ZN7WelsDec27ParseIntraPredModeLumaCabacEPNS_21TagWelsDecoderContextERi($0, $7) | 0);
                $105 = ($104 | 0) == (0);
                if (!($105)) {
                    $$10 = $104;
                    label = 29;
                    break;
                }
                $$0106$pr = HEAP32[$7 >> 2] | 0;
                $$0106 = $$0106$pr;
            }
            $40 = $$0104134 << 2;
            $131 = (__ZN7WelsDec16PredIntra4x4ModeEPai($2, $40) | 0);
            $132 = HEAP32[$30 >> 2] | 0;
            $133 = ((($132)) + 176 | 0);
            $134 = HEAP8[$133 >> 0] | 0;
            $135 = ($134 << 24 >> 24) == (0);
            do {
                if ($135) {
                    $142 = ($$0106 | 0) == (0);
                    if (!($142)) {
                        $143 = $131 & 255;
                        HEAP8[$8 >> 0] = $143;
                        break;
                    }
                    $144 = HEAP32[$31 >> 2] | 0;
                    $145 = $144 >>> 29;
                    $146 = HEAP32[$32 >> 2] | 0;
                    $147 = HEAP32[$3 >> 2] | 0;
                    $148 = HEAP32[$33 >> 2] | 0;
                    $149 = $144 << 3;
                    HEAP32[$31 >> 2] = $149;
                    $150 = HEAP32[$34 >> 2] | 0;
                    $151 = (($150) + 3) | 0;
                    HEAP32[$34 >> 2] = $151;
                    $152 = ($150 | 0) > (-3);
                    $153 = $148;
                    if ($152) {
                        $154 = (($148) - ($147)) | 0;
                        $155 = (($146) + 1) | 0;
                        $156 = (($155) - ($147)) | 0;
                        $157 = ($154 | 0) > ($156 | 0);
                        if ($157) {
                            $$6$ph = 11;
                            label = 21;
                            break L1;
                        }
                        $158 = HEAP8[$153 >> 0] | 0;
                        $159 = $158 & 255;
                        $160 = $159 << 8;
                        $161 = ((($153)) + 1 | 0);
                        $162 = HEAP8[$161 >> 0] | 0;
                        $163 = $162 & 255;
                        $164 = $160 | $163;
                        $165 = $164 << $151;
                        $166 = $165 | $149;
                        HEAP32[$31 >> 2] = $166;
                        $167 = (($150) + -13) | 0;
                        HEAP32[$34 >> 2] = $167;
                        $168 = ((($153)) + 2 | 0);
                        HEAP32[$33 >> 2] = $168;
                    }
                    HEAP32[$6 >> 2] = $145;
                    $169 = ($145 | 0) >= ($131 | 0);
                    $170 = $169 & 1;
                    $171 = (($145) + ($170)) | 0;
                    $172 = $171 & 255;
                    HEAP8[$8 >> 0] = $172;
                } else {
                    $136 = ($$0106 | 0) == (-1);
                    if ($136) {
                        $137 = $131 & 255;
                        HEAP8[$8 >> 0] = $137;
                        break;
                    } else {
                        $138 = ($$0106 | 0) >= ($131 | 0);
                        $139 = $138 & 1;
                        $140 = (($$0106) + ($139)) | 0;
                        $141 = $140 & 255;
                        HEAP8[$8 >> 0] = $141;
                        break;
                    }
                }
            } while (0);
            $37 = (__ZN7WelsDec21CheckIntraNxNPredModeEPiPaib($5, $8, $40, 1) | 0);
            $173 = ($37 | 0) == (-1);
            if ($173) {
                $$6$ph = 1050;
                label = 21;
                break;
            }
            $36 = $37 & 255;
            $38 = HEAP32[$35 >> 2] | 0;
            $39 = (15415 + ($40) | 0);
            $41 = HEAP8[$39 >> 0] | 0;
            $42 = $41 & 255;
            $43 = ((($38) + ($10 << 4) | 0) + ($42) | 0);
            HEAP8[$43 >> 0] = $36;
            $44 = HEAP8[$8 >> 0] | 0;
            $45 = (15458 + ($40) | 0);
            $46 = HEAP8[$45 >> 0] | 0;
            $47 = $46 & 255;
            $48 = (($2) + ($47) | 0);
            HEAP8[$48 >> 0] = $44;
            $49 = (10975 + ($40) | 0);
            $50 = HEAP8[$49 >> 0] | 0;
            $51 = $50 & 255;
            $52 = (($5) + ($51 << 2) | 0);
            HEAP32[$52 >> 2] = 1;
            $53 = HEAP32[$35 >> 2] | 0;
            $54 = $40 | 1;
            $55 = (15415 + ($54) | 0);
            $56 = HEAP8[$55 >> 0] | 0;
            $57 = $56 & 255;
            $58 = ((($53) + ($10 << 4) | 0) + ($57) | 0);
            HEAP8[$58 >> 0] = $36;
            $59 = HEAP8[$8 >> 0] | 0;
            $60 = (15458 + ($54) | 0);
            $61 = HEAP8[$60 >> 0] | 0;
            $62 = $61 & 255;
            $63 = (($2) + ($62) | 0);
            HEAP8[$63 >> 0] = $59;
            $64 = (10975 + ($54) | 0);
            $65 = HEAP8[$64 >> 0] | 0;
            $66 = $65 & 255;
            $67 = (($5) + ($66 << 2) | 0);
            HEAP32[$67 >> 2] = 1;
            $68 = HEAP32[$35 >> 2] | 0;
            $69 = $40 | 2;
            $70 = (15415 + ($69) | 0);
            $71 = HEAP8[$70 >> 0] | 0;
            $72 = $71 & 255;
            $73 = ((($68) + ($10 << 4) | 0) + ($72) | 0);
            HEAP8[$73 >> 0] = $36;
            $74 = HEAP8[$8 >> 0] | 0;
            $75 = (15458 + ($69) | 0);
            $76 = HEAP8[$75 >> 0] | 0;
            $77 = $76 & 255;
            $78 = (($2) + ($77) | 0);
            HEAP8[$78 >> 0] = $74;
            $79 = (10975 + ($69) | 0);
            $80 = HEAP8[$79 >> 0] | 0;
            $81 = $80 & 255;
            $82 = (($5) + ($81 << 2) | 0);
            HEAP32[$82 >> 2] = 1;
            $83 = HEAP32[$35 >> 2] | 0;
            $84 = $40 | 3;
            $85 = (15415 + ($84) | 0);
            $86 = HEAP8[$85 >> 0] | 0;
            $87 = $86 & 255;
            $88 = ((($83) + ($10 << 4) | 0) + ($87) | 0);
            HEAP8[$88 >> 0] = $36;
            $89 = HEAP8[$8 >> 0] | 0;
            $90 = (15458 + ($84) | 0);
            $91 = HEAP8[$90 >> 0] | 0;
            $92 = $91 & 255;
            $93 = (($2) + ($92) | 0);
            HEAP8[$93 >> 0] = $89;
            $94 = (10975 + ($84) | 0);
            $95 = HEAP8[$94 >> 0] | 0;
            $96 = $95 & 255;
            $97 = (($5) + ($96 << 2) | 0);
            HEAP32[$97 >> 2] = 1;
            $98 = (($$0104134) + 1) | 0;
            $99 = ($$0104134 | 0) < (3);
            if ($99) {
                $$0104134 = $98;
            } else {
                label = 22;
                break;
            }
        }
        if ((label | 0) == 21) {
            $$10 = $$6$ph;
            STACKTOP = sp; return ($$10 | 0);
        }
        else if ((label | 0) == 22) {
            $174 = ((($2)) + 33 | 0);
            $175 = HEAPU8[$174 >> 0] | (HEAPU8[$174 + 1 >> 0] << 8) | (HEAPU8[$174 + 2 >> 0] << 16) | (HEAPU8[$174 + 3 >> 0] << 24);
            $176 = ((($4)) + 3992 | 0);
            $177 = HEAP32[$176 >> 2] | 0;
            $178 = (($177) + ($10 << 3) | 0);
            HEAP8[$178 >> 0] = $175 & 255; HEAP8[$178 + 1 >> 0] = ($175 >> 8) & 255; HEAP8[$178 + 2 >> 0] = ($175 >> 16) & 255; HEAP8[$178 + 3 >> 0] = $175 >> 24;
            $179 = ((($2)) + 12 | 0);
            $180 = HEAP8[$179 >> 0] | 0;
            $181 = HEAP32[$176 >> 2] | 0;
            $182 = (((($181) + ($10 << 3) | 0)) + 4 | 0);
            HEAP8[$182 >> 0] = $180;
            $183 = ((($2)) + 20 | 0);
            $184 = HEAP8[$183 >> 0] | 0;
            $185 = HEAP32[$176 >> 2] | 0;
            $186 = (((($185) + ($10 << 3) | 0)) + 5 | 0);
            HEAP8[$186 >> 0] = $184;
            $187 = ((($2)) + 28 | 0);
            $188 = HEAP8[$187 >> 0] | 0;
            $189 = HEAP32[$176 >> 2] | 0;
            $190 = (((($189) + ($10 << 3) | 0)) + 6 | 0);
            HEAP8[$190 >> 0] = $188;
            $191 = HEAP32[$30 >> 2] | 0;
            $192 = ((($191)) + 176 | 0);
            $193 = HEAP8[$192 >> 0] | 0;
            $194 = ($193 << 24 >> 24) == (0);
            if ($194) {
                $199 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($3, $6) | 0);
                $200 = ($199 | 0) == (0);
                if (!($200)) {
                    $$10 = $199;
                    STACKTOP = sp; return ($$10 | 0);
                }
                $201 = HEAP32[$6 >> 2] | 0;
                $202 = ($201 >>> 0) > (3);
                if ($202) {
                    $$10 = 1052;
                    STACKTOP = sp; return ($$10 | 0);
                } else {
                    $$sink$in = $201;
                }
            } else {
                $195 = (__ZN7WelsDec29ParseIntraPredModeChromaCabacEPNS_21TagWelsDecoderContextEhRi($0, $26, $7) | 0);
                $196 = ($195 | 0) == (0);
                if (!($196)) {
                    $$10 = $195;
                    STACKTOP = sp; return ($$10 | 0);
                }
                $197 = HEAP32[$7 >> 2] | 0;
                $198 = ($197 | 0) > (3);
                if ($198) {
                    $$10 = 1052;
                    STACKTOP = sp; return ($$10 | 0);
                } else {
                    $$sink$in = $197;
                }
            }
            $$pn$in = ((($4)) + 4004 | 0);
            $$pn = HEAP32[$$pn$in >> 2] | 0;
            $$sink = $$sink$in & 255;
            $$sink6 = (($$pn) + ($10) | 0);
            HEAP8[$$sink6 >> 0] = $$sink;
            $203 = HEAP32[$$pn$in >> 2] | 0;
            $204 = (($203) + ($10) | 0);
            $205 = HEAP8[$204 >> 0] | 0;
            $206 = ($205 << 24 >> 24) == (-1);
            if ($206) {
                $$10 = 1052;
                STACKTOP = sp; return ($$10 | 0);
            }
            $207 = (__ZN7WelsDec24CheckIntraChromaPredModeEhPa($26, $204) | 0);
            $208 = ($207 | 0) == (0);
            $$121 = $208 ? 0 : 1052;
            $$10 = $$121;
            STACKTOP = sp; return ($$10 | 0);
        }
        else if ((label | 0) == 29) {
            STACKTOP = sp; return ($$10 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$2 = 0, $$33 = 0, $$pn = 0, $$pn$in = 0, $$sink = 0, $$sink$in = 0, $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $4 = sp + 8 | 0;
        $5 = sp + 4 | 0;
        $6 = sp;
        $7 = ((($3)) + 4040 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        HEAP8[$4 >> 0] = 0;
        $9 = ((($0)) + 317156 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        FUNCTION_TABLE_vii[$10 & 63]($1, $4);
        $11 = HEAP8[$4 >> 0] | 0;
        $12 = ((($3)) + 3992 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = (((($13) + ($8 << 3) | 0)) + 7 | 0);
        $15 = (__ZN7WelsDec23CheckIntra16x16PredModeEhPa($11, $14) | 0);
        $16 = ($15 | 0) == (0);
        if (!($16)) {
            $$2 = 1051;
            STACKTOP = sp; return ($$2 | 0);
        }
        $17 = ((($0)) + 241924 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = ((($18)) + 318 | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = ($20 << 24 >> 24) == (0);
        if ($21) {
            $$2 = 0;
            STACKTOP = sp; return ($$2 | 0);
        }
        $22 = ((($3)) + 3896 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = ((($23)) + 176 | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = ($25 << 24 >> 24) == (0);
        if ($26) {
            $32 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($2, $5) | 0);
            $33 = ($32 | 0) == (0);
            if (!($33)) {
                $$2 = $32;
                STACKTOP = sp; return ($$2 | 0);
            }
            $34 = HEAP32[$5 >> 2] | 0;
            $35 = ($34 >>> 0) > (3);
            if ($35) {
                $$2 = 1052;
                STACKTOP = sp; return ($$2 | 0);
            } else {
                $$sink$in = $34;
            }
        } else {
            $27 = HEAP8[$4 >> 0] | 0;
            $28 = (__ZN7WelsDec29ParseIntraPredModeChromaCabacEPNS_21TagWelsDecoderContextEhRi($0, $27, $6) | 0);
            $29 = ($28 | 0) == (0);
            if (!($29)) {
                $$2 = $28;
                STACKTOP = sp; return ($$2 | 0);
            }
            $30 = HEAP32[$6 >> 2] | 0;
            $31 = ($30 | 0) > (3);
            if ($31) {
                $$2 = 1052;
                STACKTOP = sp; return ($$2 | 0);
            } else {
                $$sink$in = $30;
            }
        }
        $$pn$in = ((($3)) + 4004 | 0);
        $$pn = HEAP32[$$pn$in >> 2] | 0;
        $$sink = $$sink$in & 255;
        $$sink2 = (($$pn) + ($8) | 0);
        HEAP8[$$sink2 >> 0] = $$sink;
        $36 = HEAP32[$$pn$in >> 2] | 0;
        $37 = (($36) + ($8) | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = ($38 << 24 >> 24) == (-1);
        if ($39) {
            $$2 = 1052;
            STACKTOP = sp; return ($$2 | 0);
        }
        $40 = HEAP8[$4 >> 0] | 0;
        $41 = (__ZN7WelsDec24CheckIntraChromaPredModeEhPa($40, $37) | 0);
        $42 = ($41 | 0) == (0);
        $$33 = $42 ? 0 : 1052;
        $$2 = $$33;
        STACKTOP = sp; return ($$2 | 0);
    }
    function __ZN7WelsDec12BsStartCavlcEPN10WelsCommon15TagBitStringAuxE($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 16 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = HEAP32[$0 >> 2] | 0;
        $4 = (($2) - ($3)) | 0;
        $5 = $4 << 3;
        $6 = ((($0)) + 24 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (($7) + -16) | 0;
        $9 = (($8) + ($5)) | 0;
        $10 = ((($0)) + 12 | 0);
        HEAP32[$10 >> 2] = $9;
        return;
    }
    function __ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        $8 = $8 | 0;
        $9 = $9 | 0;
        var $$ = 0, $$0 = 0, $$0$i = 0, $$0103123 = 0, $$0104124 = 0, $$0104124$in = 0, $$0107 = 0, $$0116 = 0, $$0117 = 0, $$0118 = 0, $$039$i = 0, $$1105125 = 0, $$1126 = 0, $$2106128 = 0, $$2129 = 0, $$pr = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0;
        var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
        var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
        var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
        var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
        var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
        var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
        var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
        var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0;
        var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 160 | 0;
        $10 = sp + 80 | 0;
        $11 = sp + 16 | 0;
        $12 = sp + 145 | 0;
        $13 = sp + 144 | 0;
        $14 = sp;
        do {
            switch ($6 | 0) {
                case 9: {
                    $$0116 = 1; $$0118 = 5;
                    break;
                }
                case 10: {
                    $$0116 = 2; $$0118 = 5;
                    break;
                }
                case 11: {
                    $$0116 = 0; $$0118 = 3;
                    break;
                }
                case 7: {
                    $$0116 = 1; $$0118 = 4;
                    break;
                }
                case 8: {
                    $$0116 = 2; $$0118 = 4;
                    break;
                }
                case 18: {
                    $$0116 = 7; $$0118 = 6;
                    break;
                }
                case 17: {
                    $$0116 = 6; $$0118 = 6;
                    break;
                }
                case 12: {
                    $$0116 = 3; $$0118 = 3;
                    break;
                }
                case 13: {
                    $$0116 = 4; $$0118 = 4;
                    break;
                }
                case 14: {
                    $$0116 = 5; $$0118 = 4;
                    break;
                }
                case 15: {
                    $$0116 = 4; $$0118 = 5;
                    break;
                }
                case 16: {
                    $$0116 = 5; $$0118 = 5;
                    break;
                }
                default: {
                    $$0116 = 0; $$0118 = $6;
                }
            }
        } while (0);
        $15 = ((($9)) + 562526 | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = ($16 << 24 >> 24) == (0);
        if ($17) {
            $22 = $8 & 255;
            $23 = (16 + ($22 << 4) | 0);
            $152 = $23;
        } else {
            $18 = (((($9)) + 562472 | 0) + ($$0116 << 2) | 0);
            $19 = HEAP32[$18 >> 2] | 0;
            $20 = $8 & 255;
            $21 = (($19) + ($20 << 5) | 0);
            $152 = $21;
        }
        $24 = ((($2)) + 12 | 0);
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = HEAP32[$2 >> 2] | 0;
        $27 = $25 >> 3;
        $28 = (($26) + ($27) | 0);
        $29 = ($$0118 | 0) == (4);
        $30 = HEAP8[$28 >> 0] | 0;
        $31 = $30 & 255;
        $32 = $31 << 8;
        $33 = ((($28)) + 1 | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = $34 & 255;
        $36 = $32 | $35;
        $37 = $36 << 16;
        $38 = ((($28)) + 2 | 0);
        $39 = HEAP8[$38 >> 0] | 0;
        $40 = $39 & 255;
        $41 = $40 << 8;
        $42 = $37 | $41;
        $43 = ((($28)) + 3 | 0);
        $44 = HEAP8[$43 >> 0] | 0;
        $45 = $44 & 255;
        $46 = $42 | $45;
        $47 = $25 & 7;
        $48 = $46 << $47;
        HEAP32[$14 >> 2] = $48;
        $49 = (32 - ($47)) | 0;
        $50 = $49 & 255;
        $51 = ((($14)) + 4 | 0);
        HEAP8[$51 >> 0] = $50;
        $52 = ((($14)) + 8 | 0);
        HEAP32[$52 >> 2] = $28;
        $53 = (15458 + ($3) | 0);
        $54 = HEAP8[$53 >> 0] | 0;
        $55 = $54 & 255;
        $56 = (($55) + -1) | 0;
        $57 = (($1) + ($56) | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = (($55) + -8) | 0;
        $60 = (($1) + ($59) | 0);
        $61 = HEAP8[$60 >> 0] | 0;
        $62 = $58 & 255;
        $63 = $61 & 255;
        $64 = (($63) + ($62)) | 0;
        $65 = ($58 << 24 >> 24) != (-1);
        $66 = ($61 << 24 >> 24) != (-1);
        $$ = $65 & $66;
        $67 = $$ & 1;
        $68 = $64 << 24;
        $sext = (($68) + 16777216) | 0;
        $69 = $sext >> 24;
        $70 = $69 >> $67;
        $71 = $61 & $58;
        $72 = ($71 << 24 >> 24) == (-1);
        $73 = $72 & 1;
        $74 = (($70) + ($73)) | 0;
        $75 = $74 & 255;
        $76 = (__ZN7WelsDecL33CavlcGetTrailingOnesAndTotalCoeffERhS0_PNS_16TagReadBitsCacheEPNS_11TagVlcTableEba($12, $13, $14, $0, $29, $75) | 0);
        switch ($$0118 | 0) {
            case 1: case 4: {
                $$pr = HEAP8[$12 >> 0] | 0;
                $79 = $$pr;
                break;
            }
            default: {
                $77 = HEAP8[$12 >> 0] | 0;
                $78 = (($1) + ($55) | 0);
                HEAP8[$78 >> 0] = $77;
                $79 = $77;
            }
        }
        $80 = ($79 << 24 >> 24) == (0);
        if ($80) {
            $81 = HEAP32[$24 >> 2] | 0;
            $82 = (($81) + ($76)) | 0;
            HEAP32[$24 >> 2] = $82;
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $83 = HEAP8[$13 >> 0] | 0;
        $84 = ($83 & 255) > (3);
        $85 = ($79 & 255) > (16);
        $or$cond = $85 | $84;
        if ($or$cond) {
            $$0 = 1046;
            STACKTOP = sp; return ($$0 | 0);
        }
        $86 = (__ZN7WelsDecL16CavlcGetLevelValEPiPNS_16TagReadBitsCacheEhh($10, $14, $79, $83) | 0);
        $87 = ($86 | 0) == (-1);
        if ($87) {
            $$0 = 1045;
            STACKTOP = sp; return ($$0 | 0);
        }
        $88 = (($86) + ($76)) | 0;
        $89 = $79 & 255;
        $90 = ($89 | 0) < ($4 | 0);
        if ($90) {
            $$039$i = $29 ? 21069 : 21026;
            $$0$i = $29 & 1;
            $91 = (($89) + -1) | 0;
            $92 = (($$039$i) + ($91) | 0);
            $93 = HEAP8[$92 >> 0] | 0;
            $94 = $93 & 255;
            $95 = HEAP8[$51 >> 0] | 0;
            $96 = ($95 & 255) < ($93 & 255);
            if ($96) {
                $97 = HEAP32[$52 >> 2] | 0;
                $98 = ((($97)) + 2 | 0);
                HEAP32[$52 >> 2] = $98;
                $99 = $95 & 255;
                $100 = (($99) + 16) | 0;
                $101 = $100 & 255;
                HEAP8[$51 >> 0] = $101;
                $102 = ((($97)) + 4 | 0);
                $103 = HEAP8[$102 >> 0] | 0;
                $104 = $103 & 255;
                $105 = $104 << 8;
                $106 = ((($97)) + 5 | 0);
                $107 = HEAP8[$106 >> 0] | 0;
                $108 = $107 & 255;
                $109 = $105 | $108;
                $110 = (($95) + 16) << 24 >> 24;
                $111 = $110 & 255;
                $112 = (32 - ($111)) | 0;
                $113 = $109 << $112;
                $114 = HEAP32[$14 >> 2] | 0;
                $115 = $113 | $114;
                HEAP32[$14 >> 2] = $115;
                $118 = $115; $126 = $101;
            } else {
                $$pre$i = HEAP32[$14 >> 2] | 0;
                $118 = $$pre$i; $126 = $95;
            }
            $116 = (32 - ($94)) | 0;
            $117 = $118 >>> $116;
            $119 = ((((($0)) + 160 | 0) + (($$0$i * 60) | 0) | 0) + ($91 << 2) | 0);
            $120 = HEAP32[$119 >> 2] | 0;
            $121 = (((($120) + ($117 << 1) | 0)) + 1 | 0);
            $122 = HEAP8[$121 >> 0] | 0;
            $123 = $122 & 255;
            $124 = $118 << $123;
            HEAP32[$14 >> 2] = $124;
            $125 = $126 & 255;
            $127 = (($125) - ($123)) | 0;
            $128 = $127 & 255;
            HEAP8[$51 >> 0] = $128;
            $129 = (($120) + ($117 << 1) | 0);
            $130 = HEAP8[$129 >> 0] | 0;
            $131 = $130 & 255;
            $132 = (($88) + ($123)) | 0;
            $$0107 = $132; $$0117 = $131;
        } else {
            $$0107 = $88; $$0117 = 0;
        }
        $133 = (($$0117) + ($89)) | 0;
        $134 = ($133 | 0) > ($4 | 0);
        if ($134) {
            $$0 = 1047;
            STACKTOP = sp; return ($$0 | 0);
        }
        $135 = (__ZN7WelsDecL17CavlcGetRunBeforeEPiPNS_16TagReadBitsCacheEhPNS_11TagVlcTableEi($11, $14, $79, $0, $$0117) | 0);
        $136 = ($135 | 0) == (-1);
        if ($136) {
            $$0 = 1048;
            STACKTOP = sp; return ($$0 | 0);
        }
        $137 = (($135) + ($$0107)) | 0;
        $138 = HEAP32[$24 >> 2] | 0;
        $139 = (($137) + ($138)) | 0;
        HEAP32[$24 >> 2] = $139;
        if ($29) {
            $$0103123 = -1; $$0104124$in = $89;
            while (1) {
                $$0104124 = (($$0104124$in) + -1) | 0;
                $140 = (($11) + ($$0104124 << 2) | 0);
                $141 = HEAP32[$140 >> 2] | 0;
                $142 = (($$0103123) + 1) | 0;
                $143 = (($142) + ($141)) | 0;
                $144 = (($5) + ($143) | 0);
                $145 = HEAP8[$144 >> 0] | 0;
                $146 = $145 & 255;
                $147 = HEAP8[$15 >> 0] | 0;
                $148 = ($147 << 24 >> 24) != (0);
                $149 = (($10) + ($$0104124 << 2) | 0);
                $150 = HEAP32[$149 >> 2] | 0;
                $151 = HEAP16[$152 >> 1] | 0;
                $153 = $151 & 65535;
                $154 = Math_imul($150, $153) | 0;
                $155 = $154 >>> 4;
                $156 = $148 ? $155 : $154;
                $157 = $156 & 65535;
                $158 = (($7) + ($146 << 1) | 0);
                HEAP16[$158 >> 1] = $157;
                $159 = ($$0104124$in | 0) > (1);
                if ($159) {
                    $$0103123 = $143; $$0104124$in = $$0104124;
                } else {
                    $$0 = 0;
                    break;
                }
            }
            STACKTOP = sp; return ($$0 | 0);
        }
        $160 = ($$0118 | 0) == (1);
        $161 = (($89) + -1) | 0;
        if ($160) {
            $$1105125 = $161; $$1126 = -1;
            while (1) {
                $162 = (($11) + ($$1105125 << 2) | 0);
                $163 = HEAP32[$162 >> 2] | 0;
                $164 = (($$1126) + 1) | 0;
                $165 = (($164) + ($163)) | 0;
                $166 = (($5) + ($165) | 0);
                $167 = HEAP8[$166 >> 0] | 0;
                $168 = $167 & 255;
                $169 = (($10) + ($$1105125 << 2) | 0);
                $170 = HEAP32[$169 >> 2] | 0;
                $171 = $170 & 65535;
                $172 = (($7) + ($168 << 1) | 0);
                HEAP16[$172 >> 1] = $171;
                $173 = (($$1105125) + -1) | 0;
                $174 = ($$1105125 | 0) > (0);
                if ($174) {
                    $$1105125 = $173; $$1126 = $165;
                } else {
                    $$0 = 0;
                    break;
                }
            }
            STACKTOP = sp; return ($$0 | 0);
        } else {
            $$2106128 = $161; $$2129 = -1;
        }
        while (1) {
            $175 = (($11) + ($$2106128 << 2) | 0);
            $176 = HEAP32[$175 >> 2] | 0;
            $177 = (($$2129) + 1) | 0;
            $178 = (($177) + ($176)) | 0;
            $179 = (($5) + ($178) | 0);
            $180 = HEAP8[$179 >> 0] | 0;
            $181 = $180 & 255;
            $182 = HEAP8[$15 >> 0] | 0;
            $183 = ($182 << 24 >> 24) == (0);
            $184 = (($10) + ($$2106128 << 2) | 0);
            $185 = HEAP32[$184 >> 2] | 0;
            if ($183) {
                $191 = $181 & 7;
                $192 = (($152) + ($191 << 1) | 0);
                $193 = HEAP16[$192 >> 1] | 0;
                $194 = $193 & 65535;
                $195 = Math_imul($185, $194) | 0;
                $197 = $195;
            } else {
                $186 = (($152) + ($181 << 1) | 0);
                $187 = HEAP16[$186 >> 1] | 0;
                $188 = $187 & 65535;
                $189 = Math_imul($185, $188) | 0;
                $190 = $189 >> 4;
                $197 = $190;
            }
            $196 = $197 & 65535;
            $198 = (($7) + ($181 << 1) | 0);
            HEAP16[$198 >> 1] = $196;
            $199 = (($$2106128) + -1) | 0;
            $200 = ($$2106128 | 0) > (0);
            if ($200) {
                $$2106128 = $199; $$2129 = $178;
            } else {
                $$0 = 0;
                break;
            }
        }
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        $8 = $8 | 0;
        $9 = $9 | 0;
        $10 = $10 | 0;
        var $$0 = 0, $$0$i = 0, $$039$i = 0, $$08399 = 0, $$08399$us = 0, $$084 = 0, $$084$us = 0, $$084100 = 0, $$084100$us = 0, $$08498 = 0, $$085 = 0, $$094 = 0, $$095 = 0, $$096 = 0, $$pr = 0, $$pre$i = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
        var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
        var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
        var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
        var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
        var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
        var $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div = 0, $narrow = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 160 | 0;
        $11 = sp + 80 | 0;
        $12 = sp + 16 | 0;
        $13 = sp + 145 | 0;
        $14 = sp + 144 | 0;
        $15 = sp;
        do {
            switch ($6 | 0) {
                case 9: {
                    $$094 = -5; $$096 = 5;
                    break;
                }
                case 10: {
                    $$094 = -4; $$096 = 5;
                    break;
                }
                case 11: {
                    $$094 = -6; $$096 = 3;
                    break;
                }
                case 7: {
                    $$094 = -5; $$096 = 4;
                    break;
                }
                case 8: {
                    $$094 = -4; $$096 = 4;
                    break;
                }
                case 18: {
                    $$094 = 1; $$096 = 6;
                    break;
                }
                case 17: {
                    $$094 = 0; $$096 = 6;
                    break;
                }
                case 12: {
                    $$094 = -3; $$096 = 3;
                    break;
                }
                case 13: {
                    $$094 = -2; $$096 = 4;
                    break;
                }
                case 14: {
                    $$094 = -1; $$096 = 4;
                    break;
                }
                case 15: {
                    $$094 = -2; $$096 = 5;
                    break;
                }
                case 16: {
                    $$094 = -1; $$096 = 5;
                    break;
                }
                default: {
                    $$094 = -6; $$096 = $6;
                }
            }
        } while (0);
        $16 = ((($10)) + 562526 | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = ($17 << 24 >> 24) == (0);
        if ($18) {
            $23 = $9 & 255;
            $24 = (848 + ($23 << 7) | 0);
            $159 = $24;
        } else {
            $19 = (((($10)) + 562496 | 0) + ($$094 << 2) | 0);
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = $9 & 255;
            $22 = (($20) + ($21 << 7) | 0);
            $159 = $22;
        }
        $25 = ((($2)) + 12 | 0);
        $26 = HEAP32[$25 >> 2] | 0;
        $27 = HEAP32[$2 >> 2] | 0;
        $28 = $26 >> 3;
        $29 = (($27) + ($28) | 0);
        $30 = ($$096 | 0) == (4);
        $31 = HEAP8[$29 >> 0] | 0;
        $32 = $31 & 255;
        $33 = $32 << 8;
        $34 = ((($29)) + 1 | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = $33 | $36;
        $38 = $37 << 16;
        $39 = ((($29)) + 2 | 0);
        $40 = HEAP8[$39 >> 0] | 0;
        $41 = $40 & 255;
        $42 = $41 << 8;
        $43 = $38 | $42;
        $44 = ((($29)) + 3 | 0);
        $45 = HEAP8[$44 >> 0] | 0;
        $46 = $45 & 255;
        $47 = $43 | $46;
        $48 = $26 & 7;
        $49 = $47 << $48;
        HEAP32[$15 >> 2] = $49;
        $50 = (32 - ($48)) | 0;
        $51 = $50 & 255;
        $52 = ((($15)) + 4 | 0);
        HEAP8[$52 >> 0] = $51;
        $53 = ((($15)) + 8 | 0);
        HEAP32[$53 >> 2] = $29;
        $54 = (15458 + ($3) | 0);
        $55 = HEAP8[$54 >> 0] | 0;
        $56 = $55 & 255;
        $57 = (($56) + -1) | 0;
        $58 = (($1) + ($57) | 0);
        $59 = HEAP8[$58 >> 0] | 0;
        $60 = (($56) + -8) | 0;
        $61 = (($1) + ($60) | 0);
        $62 = HEAP8[$61 >> 0] | 0;
        $63 = $59 & 255;
        $64 = $62 & 255;
        $65 = (($64) + ($63)) | 0;
        $66 = ($59 << 24 >> 24) != (-1);
        $67 = ($62 << 24 >> 24) != (-1);
        $narrow = $66 & $67;
        $68 = $narrow & 1;
        $69 = $65 << 24;
        $sext = (($69) + 16777216) | 0;
        $70 = $sext >> 24;
        $71 = $70 >> $68;
        $72 = $62 & $59;
        $73 = ($72 << 24 >> 24) == (-1);
        $74 = $73 & 1;
        $75 = (($71) + ($74)) | 0;
        $76 = $75 & 255;
        $77 = (__ZN7WelsDecL33CavlcGetTrailingOnesAndTotalCoeffERhS0_PNS_16TagReadBitsCacheEPNS_11TagVlcTableEba($13, $14, $15, $0, $30, $76) | 0);
        switch ($$096 | 0) {
            case 1: case 4: {
                $$pr = HEAP8[$13 >> 0] | 0;
                $80 = $$pr;
                break;
            }
            default: {
                $78 = HEAP8[$13 >> 0] | 0;
                $79 = (($1) + ($56) | 0);
                HEAP8[$79 >> 0] = $78;
                $80 = $78;
            }
        }
        $81 = ($80 << 24 >> 24) == (0);
        if ($81) {
            $82 = HEAP32[$25 >> 2] | 0;
            $83 = (($82) + ($77)) | 0;
            HEAP32[$25 >> 2] = $83;
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $84 = HEAP8[$14 >> 0] | 0;
        $85 = ($84 & 255) > (3);
        $86 = ($80 & 255) > (16);
        $or$cond = $86 | $85;
        if ($or$cond) {
            $$0 = 1046;
            STACKTOP = sp; return ($$0 | 0);
        }
        $87 = (__ZN7WelsDecL16CavlcGetLevelValEPiPNS_16TagReadBitsCacheEhh($11, $15, $80, $84) | 0);
        $88 = ($87 | 0) == (-1);
        if ($88) {
            $$0 = 1045;
            STACKTOP = sp; return ($$0 | 0);
        }
        $89 = (($87) + ($77)) | 0;
        $90 = $80 & 255;
        $91 = ($90 | 0) < ($4 | 0);
        if ($91) {
            $$039$i = $30 ? 21069 : 21026;
            $$0$i = $30 & 1;
            $92 = (($90) + -1) | 0;
            $93 = (($$039$i) + ($92) | 0);
            $94 = HEAP8[$93 >> 0] | 0;
            $95 = $94 & 255;
            $96 = HEAP8[$52 >> 0] | 0;
            $97 = ($96 & 255) < ($94 & 255);
            if ($97) {
                $98 = HEAP32[$53 >> 2] | 0;
                $99 = ((($98)) + 2 | 0);
                HEAP32[$53 >> 2] = $99;
                $100 = $96 & 255;
                $101 = (($100) + 16) | 0;
                $102 = $101 & 255;
                HEAP8[$52 >> 0] = $102;
                $103 = ((($98)) + 4 | 0);
                $104 = HEAP8[$103 >> 0] | 0;
                $105 = $104 & 255;
                $106 = $105 << 8;
                $107 = ((($98)) + 5 | 0);
                $108 = HEAP8[$107 >> 0] | 0;
                $109 = $108 & 255;
                $110 = $106 | $109;
                $111 = (($96) + 16) << 24 >> 24;
                $112 = $111 & 255;
                $113 = (32 - ($112)) | 0;
                $114 = $110 << $113;
                $115 = HEAP32[$15 >> 2] | 0;
                $116 = $114 | $115;
                HEAP32[$15 >> 2] = $116;
                $119 = $116; $127 = $102;
            } else {
                $$pre$i = HEAP32[$15 >> 2] | 0;
                $119 = $$pre$i; $127 = $96;
            }
            $117 = (32 - ($95)) | 0;
            $118 = $119 >>> $117;
            $120 = ((((($0)) + 160 | 0) + (($$0$i * 60) | 0) | 0) + ($92 << 2) | 0);
            $121 = HEAP32[$120 >> 2] | 0;
            $122 = (((($121) + ($118 << 1) | 0)) + 1 | 0);
            $123 = HEAP8[$122 >> 0] | 0;
            $124 = $123 & 255;
            $125 = $119 << $124;
            HEAP32[$15 >> 2] = $125;
            $126 = $127 & 255;
            $128 = (($126) - ($124)) | 0;
            $129 = $128 & 255;
            HEAP8[$52 >> 0] = $129;
            $130 = (($121) + ($118 << 1) | 0);
            $131 = HEAP8[$130 >> 0] | 0;
            $132 = $131 & 255;
            $133 = (($89) + ($124)) | 0;
            $$085 = $133; $$095 = $132;
        } else {
            $$085 = $89; $$095 = 0;
        }
        $134 = (($$095) + ($90)) | 0;
        $135 = ($134 | 0) > ($4 | 0);
        if ($135) {
            $$0 = 1047;
            STACKTOP = sp; return ($$0 | 0);
        }
        $136 = (__ZN7WelsDecL17CavlcGetRunBeforeEPiPNS_16TagReadBitsCacheEhPNS_11TagVlcTableEi($12, $15, $80, $0, $$095) | 0);
        $137 = ($136 | 0) == (-1);
        if ($137) {
            $$0 = 1048;
            STACKTOP = sp; return ($$0 | 0);
        }
        $138 = (($136) + ($$085)) | 0;
        $139 = HEAP32[$25 >> 2] | 0;
        $140 = (($138) + ($139)) | 0;
        HEAP32[$25 >> 2] = $140;
        $$08498 = (($90) + -1) | 0;
        $141 = ($9 & 255) > (35);
        $div = (($9 & 255) / 6) & -1;
        $142 = $div & 255;
        $143 = (($142) + -6) | 0;
        $144 = (5 - ($142)) | 0;
        $145 = 1 << $144;
        $146 = (6 - ($142)) | 0;
        if ($141) {
            $$08399$us = -1; $$084100$us = $$08498;
            while (1) {
                $147 = (($12) + ($$084100$us << 2) | 0);
                $148 = HEAP32[$147 >> 2] | 0;
                $149 = (($$08399$us) + 1) | 0;
                $150 = (($149) + ($148)) | 0;
                $151 = $150 << 2;
                $152 = (($151) + ($8)) | 0;
                $153 = (($5) + ($152) | 0);
                $154 = HEAP8[$153 >> 0] | 0;
                $155 = $154 & 255;
                $156 = (($11) + ($$084100$us << 2) | 0);
                $157 = HEAP32[$156 >> 2] | 0;
                $158 = (($159) + ($155 << 1) | 0);
                $160 = HEAP16[$158 >> 1] | 0;
                $161 = $160 & 65535;
                $162 = Math_imul($157, $161) | 0;
                $163 = $162 << $143;
                $164 = $163 & 65535;
                $165 = (($7) + ($155 << 1) | 0);
                HEAP16[$165 >> 1] = $164;
                $$084$us = (($$084100$us) + -1) | 0;
                $166 = ($$084100$us | 0) > (0);
                if ($166) {
                    $$08399$us = $150; $$084100$us = $$084$us;
                } else {
                    $$0 = 0;
                    break;
                }
            }
            STACKTOP = sp; return ($$0 | 0);
        } else {
            $$08399 = -1; $$084100 = $$08498;
            while (1) {
                $167 = (($12) + ($$084100 << 2) | 0);
                $168 = HEAP32[$167 >> 2] | 0;
                $169 = (($$08399) + 1) | 0;
                $170 = (($169) + ($168)) | 0;
                $171 = $170 << 2;
                $172 = (($171) + ($8)) | 0;
                $173 = (($5) + ($172) | 0);
                $174 = HEAP8[$173 >> 0] | 0;
                $175 = $174 & 255;
                $176 = (($11) + ($$084100 << 2) | 0);
                $177 = HEAP32[$176 >> 2] | 0;
                $178 = (($159) + ($175 << 1) | 0);
                $179 = HEAP16[$178 >> 1] | 0;
                $180 = $179 & 65535;
                $181 = Math_imul($177, $180) | 0;
                $182 = (($181) + ($145)) | 0;
                $183 = $182 >> $146;
                $184 = $183 & 65535;
                $185 = (($7) + ($175 << 1) | 0);
                HEAP16[$185 >> 1] = $184;
                $$084 = (($$084100) + -1) | 0;
                $186 = ($$084100 | 0) > (0);
                if ($186) {
                    $$08399 = $170; $$084100 = $$084;
                } else {
                    $$0 = 0;
                    break;
                }
            }
            STACKTOP = sp; return ($$0 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec10BsEndCavlcEPN10WelsCommon15TagBitStringAuxE($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = HEAP32[$0 >> 2] | 0;
        $2 = ((($0)) + 12 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = $3 >> 3;
        $5 = (($1) + ($4) | 0);
        $6 = ((($0)) + 16 | 0);
        HEAP32[$6 >> 2] = $5;
        $7 = HEAP8[$5 >> 0] | 0;
        $8 = $7 & 255;
        $9 = $8 << 8;
        $10 = ((($5)) + 1 | 0);
        $11 = HEAP8[$10 >> 0] | 0;
        $12 = $11 & 255;
        $13 = $9 | $12;
        $14 = $13 << 16;
        $15 = ((($5)) + 2 | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = $16 & 255;
        $18 = $17 << 8;
        $19 = $14 | $18;
        $20 = ((($5)) + 3 | 0);
        $21 = HEAP8[$20 >> 0] | 0;
        $22 = $21 & 255;
        $23 = $19 | $22;
        $24 = $3 & 7;
        $25 = $23 << $24;
        $26 = ((($0)) + 20 | 0);
        HEAP32[$26 >> 2] = $25;
        $27 = ((($5)) + 4 | 0);
        HEAP32[$6 >> 2] = $27;
        $28 = $24 | -16;
        $29 = ((($0)) + 24 | 0);
        HEAP32[$29 >> 2] = $28;
        return;
    }
    function __ZN7WelsDecL33CavlcGetTrailingOnesAndTotalCoeffERhS0_PNS_16TagReadBitsCacheEPNS_11TagVlcTableEba($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$075$pn77 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
        var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
        var $85 = 0, $86 = 0, $9 = 0, $storemerge = 0, $storemerge$in = 0, $storemerge76 = 0, $storemerge76$in = 0, label = 0, sp = 0;
        sp = STACKTOP;
        do {
            if ($4) {
                $6 = HEAP32[$2 >> 2] | 0;
                $7 = $6 >>> 24;
                $8 = ((($3)) + 128 | 0);
                $9 = HEAP32[$8 >> 2] | 0;
                $10 = (($9) + ($7 << 1) | 0);
                $11 = HEAP8[$10 >> 0] | 0;
                $12 = $11 & 255;
                $13 = (((($9) + ($7 << 1) | 0)) + 1 | 0);
                $14 = HEAP8[$13 >> 0] | 0;
                $15 = $14 & 255;
                $16 = $6 << $15;
                HEAP32[$2 >> 2] = $16;
                $17 = ((($2)) + 4 | 0);
                $18 = HEAP8[$17 >> 0] | 0;
                $19 = $18 & 255;
                $20 = (($19) - ($15)) | 0;
                $21 = $20 & 255;
                HEAP8[$17 >> 0] = $21;
                $$075$pn77 = $12; $$1 = $15;
            } else {
                $22 = $5 << 24 >> 24;
                $23 = (18809 + ($22) | 0);
                $24 = HEAP8[$23 >> 0] | 0;
                $25 = $24 & 255;
                $26 = ($24 & 255) < (3);
                $27 = HEAP32[$2 >> 2] | 0;
                if (!($26)) {
                    $75 = $27 >>> 26;
                    $76 = $27 << 6;
                    HEAP32[$2 >> 2] = $76;
                    $77 = ((($2)) + 4 | 0);
                    $78 = HEAP8[$77 >> 0] | 0;
                    $79 = $78 & 255;
                    $80 = (($79) + 250) | 0;
                    $81 = $80 & 255;
                    HEAP8[$77 >> 0] = $81;
                    $82 = ((($3)) + 12 | 0);
                    $83 = HEAP32[$82 >> 2] | 0;
                    $84 = (($83) + ($75 << 1) | 0);
                    $85 = HEAP8[$84 >> 0] | 0;
                    $86 = $85 & 255;
                    $$075$pn77 = $86; $$1 = 6;
                    break;
                }
                $28 = $27 >>> 24;
                $29 = (18790 + ($25) | 0);
                $30 = HEAP8[$29 >> 0] | 0;
                $31 = $30 & 255;
                $32 = ($28 >>> 0) < ($31 >>> 0);
                if ($32) {
                    $33 = $27 << 8;
                    HEAP32[$2 >> 2] = $33;
                    $34 = ((($2)) + 4 | 0);
                    $35 = HEAP8[$34 >> 0] | 0;
                    $36 = $35 & 255;
                    $37 = (($36) + 248) | 0;
                    $38 = $37 & 255;
                    HEAP8[$34 >> 0] = $38;
                    $39 = (9356 + ($25 << 2) | 0);
                    $40 = HEAP32[$39 >> 2] | 0;
                    $41 = (($40) + ($28) | 0);
                    $42 = HEAP8[$41 >> 0] | 0;
                    $43 = $42 & 255;
                    $44 = (32 - ($43)) | 0;
                    $45 = $33 >>> $44;
                    $46 = (($25) + 1) | 0;
                    $47 = ((($3) + ($46 << 5) | 0) + ($28 << 2) | 0);
                    $48 = HEAP32[$47 >> 2] | 0;
                    $49 = (($48) + ($45 << 1) | 0);
                    $50 = HEAP8[$49 >> 0] | 0;
                    $51 = $50 & 255;
                    $52 = (((($48) + ($45 << 1) | 0)) + 1 | 0);
                    $53 = HEAP8[$52 >> 0] | 0;
                    $54 = $53 & 255;
                    $55 = $33 << $54;
                    HEAP32[$2 >> 2] = $55;
                    $56 = (($35) + -8) << 24 >> 24;
                    $57 = $56 & 255;
                    $58 = (($57) - ($54)) | 0;
                    $59 = $58 & 255;
                    HEAP8[$34 >> 0] = $59;
                    $60 = (($54) + 8) | 0;
                    $$075$pn77 = $51; $$1 = $60;
                    break;
                } else {
                    $61 = (($3) + ($25 << 2) | 0);
                    $62 = HEAP32[$61 >> 2] | 0;
                    $63 = (($62) + ($28 << 1) | 0);
                    $64 = HEAP8[$63 >> 0] | 0;
                    $65 = $64 & 255;
                    $66 = (((($62) + ($28 << 1) | 0)) + 1 | 0);
                    $67 = HEAP8[$66 >> 0] | 0;
                    $68 = $67 & 255;
                    $69 = $27 << $68;
                    HEAP32[$2 >> 2] = $69;
                    $70 = ((($2)) + 4 | 0);
                    $71 = HEAP8[$70 >> 0] | 0;
                    $72 = $71 & 255;
                    $73 = (($72) - ($68)) | 0;
                    $74 = $73 & 255;
                    HEAP8[$70 >> 0] = $74;
                    $$075$pn77 = $65; $$1 = $68;
                    break;
                }
            }
        } while (0);
        $storemerge76$in = (18826 + ($$075$pn77 << 1) | 0);
        $storemerge76 = HEAP8[$storemerge76$in >> 0] | 0;
        HEAP8[$1 >> 0] = $storemerge76;
        $storemerge$in = (((18826 + ($$075$pn77 << 1) | 0)) + 1 | 0);
        $storemerge = HEAP8[$storemerge$in >> 0] | 0;
        HEAP8[$0 >> 0] = $storemerge;
        return ($$1 | 0);
    }
    function __ZN7WelsDecL16CavlcGetLevelValEPiPNS_16TagReadBitsCacheEhh($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$ = 0, $$$i = 0, $$0 = 0, $$0101113 = 0, $$0102$lcssa = 0, $$0102121 = 0, $$0104117 = 0, $$0106112 = 0, $$0107116 = 0, $$1 = 0, $$1$i = 0, $$108 = 0, $$1103118 = 0, $$1105 = 0, $$111 = 0, $$114$i = 0, $$16$i = 0, $$2$i = 0, $$215$i = 0, $$lcssa = 0;
        var $$neg17$i = 0, $$pre = 0, $$pre133 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
        var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
        var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
        var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
        var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
        var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $narrow = 0, $or$cond = 0, $or$cond110 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = $3 & 255;
        $5 = ($3 << 24 >> 24) == (0);
        $6 = HEAP32[$1 >> 2] | 0;
        if ($5) {
            $$0102$lcssa = 0; $$lcssa = $6;
        } else {
            $$0102121 = 0; $9 = $6;
            while (1) {
                $7 = (30 - ($$0102121)) | 0;
                $8 = $9 >>> $7;
                $10 = $8 & 2;
                $11 = (1 - ($10)) | 0;
                $12 = (($0) + ($$0102121 << 2) | 0);
                HEAP32[$12 >> 2] = $11;
                $13 = (($$0102121) + 1) | 0;
                $14 = HEAP32[$1 >> 2] | 0;
                $exitcond = ($13 | 0) == ($4 | 0);
                if ($exitcond) {
                    $$0102$lcssa = $4; $$lcssa = $14;
                    break;
                } else {
                    $$0102121 = $13; $9 = $14;
                }
            }
        }
        $15 = $$lcssa << $4;
        HEAP32[$1 >> 2] = $15;
        $16 = ((($1)) + 4 | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = $17 & 255;
        $19 = (($18) - ($4)) | 0;
        $20 = $19 & 255;
        HEAP8[$16 >> 0] = $20;
        $21 = $2 & 255;
        $22 = ($3 & 255) < (3);
        $23 = ($$0102$lcssa >>> 0) < ($21 >>> 0);
        if (!($23)) {
            $$0 = $4;
            return ($$0 | 0);
        }
        $24 = ($2 & 255) > (10);
        $narrow = $24 & $22;
        $25 = $narrow & 1;
        $26 = ((($1)) + 8 | 0);
        $$0104117 = $4; $$0107116 = $25; $$1103118 = $$0102$lcssa; $27 = $20;
        while (1) {
            $28 = ($27 & 255) < (17);
            if ($28) {
                $29 = HEAP32[$26 >> 2] | 0;
                $30 = ((($29)) + 2 | 0);
                HEAP32[$26 >> 2] = $30;
                $31 = $27 & 255;
                $32 = (($31) + 16) | 0;
                $33 = $32 & 255;
                HEAP8[$16 >> 0] = $33;
                $34 = ((($29)) + 4 | 0);
                $35 = HEAP8[$34 >> 0] | 0;
                $36 = $35 & 255;
                $37 = $36 << 8;
                $38 = ((($29)) + 5 | 0);
                $39 = HEAP8[$38 >> 0] | 0;
                $40 = $39 & 255;
                $41 = $37 | $40;
                $42 = (($27) + 16) << 24 >> 24;
                $43 = $42 & 255;
                $44 = (32 - ($43)) | 0;
                $45 = $41 << $44;
                $46 = HEAP32[$1 >> 2] | 0;
                $47 = $45 | $46;
                HEAP32[$1 >> 2] = $47;
                $48 = $47; $65 = $33;
            } else {
                $$pre133 = HEAP32[$1 >> 2] | 0;
                $48 = $$pre133; $65 = $27;
            }
            $49 = ($48 >>> 0) > (65535);
            $50 = $48 >>> 16;
            $$$i = $49 ? $50 : $48;
            $$16$i = $49 ? 16 : 0;
            $51 = $$$i & 65280;
            $52 = ($51 | 0) == (0);
            $53 = $$$i >>> 8;
            $54 = $$16$i | 8;
            $$114$i = $52 ? $$$i : $53;
            $$1$i = $52 ? $$16$i : $54;
            $55 = $$114$i & 240;
            $56 = ($55 | 0) == (0);
            $57 = $$114$i >>> 4;
            $58 = $$1$i | 4;
            $$215$i = $56 ? $$114$i : $57;
            $$2$i = $56 ? $$1$i : $58;
            $59 = (9292 + ($$215$i << 2) | 0);
            $60 = HEAP32[$59 >> 2] | 0;
            $$neg17$i = (32 - ($$2$i)) | 0;
            $61 = (($$neg17$i) - ($60)) | 0;
            $62 = ($61 | 0) > (16);
            if ($62) {
                $$0 = -1;
                label = 18;
                break;
            }
            $63 = $48 << $61;
            HEAP32[$1 >> 2] = $63;
            $64 = $65 & 255;
            $66 = (($64) - ($61)) | 0;
            $67 = $66 & 255;
            HEAP8[$16 >> 0] = $67;
            $68 = (($61) + ($$0104117)) | 0;
            $69 = (($61) + -1) | 0;
            $70 = $69 << $$0107116;
            $71 = ($61 | 0) > (14);
            if ($71) {
                $72 = ($69 | 0) == (14);
                $73 = ($$0107116 | 0) == (0);
                $or$cond = $73 & $72;
                if ($or$cond) {
                    $$0101113 = $70; $$0106112 = 4;
                    label = 13;
                } else {
                    $74 = ($69 | 0) == (15);
                    $75 = (($70) + 15) | 0;
                    $$ = $73 ? $75 : $70;
                    if ($74) {
                        $$0101113 = $$; $$0106112 = 12;
                        label = 13;
                    } else {
                        label = 12;
                    }
                }
            } else {
                label = 12;
            }
            if ((label | 0) == 12) {
                label = 0;
                $76 = ($$0107116 | 0) > (0);
                if ($76) {
                    $$0101113 = $70; $$0106112 = $$0107116;
                    label = 13;
                } else {
                    $$1 = $70; $$1105 = $68;
                }
            }
            if ((label | 0) == 13) {
                label = 0;
                $77 = $66 & 255;
                $78 = ($$0106112 | 0) < ($77 | 0);
                if ($78) {
                    $102 = $66; $98 = $63;
                } else {
                    $79 = HEAP32[$26 >> 2] | 0;
                    $80 = ((($79)) + 2 | 0);
                    HEAP32[$26 >> 2] = $80;
                    $81 = (($66) + 16) | 0;
                    $82 = $81 & 255;
                    HEAP8[$16 >> 0] = $82;
                    $83 = ((($79)) + 4 | 0);
                    $84 = HEAP8[$83 >> 0] | 0;
                    $85 = $84 & 255;
                    $86 = $85 << 8;
                    $87 = ((($79)) + 5 | 0);
                    $88 = HEAP8[$87 >> 0] | 0;
                    $89 = $88 & 255;
                    $90 = $86 | $89;
                    $91 = (($66) + 16) | 0;
                    $92 = $91 & 255;
                    $93 = (32 - ($92)) | 0;
                    $94 = $90 << $93;
                    $95 = $94 | $63;
                    HEAP32[$1 >> 2] = $95;
                    $102 = $81; $98 = $95;
                }
                $96 = (32 - ($$0106112)) | 0;
                $97 = $98 >>> $96;
                $99 = (($97) + ($$0101113)) | 0;
                $100 = $98 << $$0106112;
                HEAP32[$1 >> 2] = $100;
                $101 = (($102) - ($$0106112)) | 0;
                $103 = $101 & 255;
                HEAP8[$16 >> 0] = $103;
                $104 = (($$0106112) + ($68)) | 0;
                $$1 = $99; $$1105 = $104;
            }
            $105 = ($$1103118 | 0) == ($4 | 0);
            $$108 = $22 & $105;
            $106 = $$108 & 1;
            $107 = $106 << 1;
            $108 = (($$1) + ($107)) | 0;
            $109 = (($108) + 2) | 0;
            $110 = $109 >> 1;
            $111 = (($0) + ($$1103118 << 2) | 0);
            $112 = $110 << 1;
            $113 = $108 & 1;
            $114 = (0 - ($113)) | 0;
            $115 = $112 & $114;
            $116 = (($110) - ($115)) | 0;
            HEAP32[$111 >> 2] = $116;
            $117 = ($$0107116 | 0) == (0);
            $118 = $117 & 1;
            $119 = (($$0107116) + ($118)) | 0;
            $120 = (($119) + -1) | 0;
            $121 = 3 << $120;
            $122 = (($$1103118) + 1) | 0;
            $123 = ($122 | 0) < ($21 | 0);
            if (!($123)) {
                $$0 = $$1105;
                label = 18;
                break;
            }
            $124 = ($119 | 0) < (6);
            $125 = ($116 | 0) > ($121 | 0);
            $126 = (0 - ($121)) | 0;
            $127 = ($116 | 0) < ($126 | 0);
            $or$cond110 = $125 | $127;
            $$111 = $124 & $or$cond110;
            $128 = $$111 & 1;
            $129 = (($119) + ($128)) | 0;
            $$pre = HEAP8[$16 >> 0] | 0;
            $$0104117 = $$1105; $$0107116 = $129; $$1103118 = $122; $27 = $$pre;
        }
        if ((label | 0) == 18) {
            return ($$0 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDecL17CavlcGetRunBeforeEPiPNS_16TagReadBitsCacheEhPNS_11TagVlcTableEi($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$$i = 0, $$086 = 0, $$087$lcssa = 0, $$087106 = 0, $$088$lcssa = 0, $$088105 = 0, $$089103 = 0, $$1 = 0, $$1$i = 0, $$114$i = 0, $$16$i = 0, $$2$i = 0, $$215$i = 0, $$neg17$i = 0, $$pre = 0, $$pre118 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
        var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0;
        var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = $2 & 255;
        $6 = (($5) + -1) | 0;
        $7 = ($2 & 255) > (1);
        L1: do {
            if ($7) {
                $8 = ((($1)) + 4 | 0);
                $9 = ((($1)) + 8 | 0);
                $10 = ((($3)) + 156 | 0);
                $$087106 = $4; $$088105 = 0; $$089103 = 0;
                L3: while (1) {
                    $11 = ($$087106 | 0) > (0);
                    if (!($11)) {
                        break;
                    }
                    $15 = (21156 + ($$087106) | 0);
                    $16 = HEAP8[$15 >> 0] | 0;
                    $17 = $16 & 255;
                    $18 = HEAP8[$8 >> 0] | 0;
                    $19 = ($18 & 255) < ($16 & 255);
                    if ($19) {
                        $20 = HEAP32[$9 >> 2] | 0;
                        $21 = ((($20)) + 2 | 0);
                        HEAP32[$9 >> 2] = $21;
                        $22 = $18 & 255;
                        $23 = (($22) + 16) | 0;
                        $24 = $23 & 255;
                        HEAP8[$8 >> 0] = $24;
                        $25 = ((($20)) + 4 | 0);
                        $26 = HEAP8[$25 >> 0] | 0;
                        $27 = $26 & 255;
                        $28 = $27 << 8;
                        $29 = ((($20)) + 5 | 0);
                        $30 = HEAP8[$29 >> 0] | 0;
                        $31 = $30 & 255;
                        $32 = $28 | $31;
                        $33 = (($18) + 16) << 24 >> 24;
                        $34 = $33 & 255;
                        $35 = (32 - ($34)) | 0;
                        $36 = $32 << $35;
                        $37 = HEAP32[$1 >> 2] | 0;
                        $38 = $36 | $37;
                        HEAP32[$1 >> 2] = $38;
                        $41 = $38; $51 = $24;
                    } else {
                        $$pre = HEAP32[$1 >> 2] | 0;
                        $41 = $$pre; $51 = $18;
                    }
                    $39 = (32 - ($17)) | 0;
                    $40 = $41 >>> $39;
                    $42 = ($$087106 | 0) < (7);
                    do {
                        if ($42) {
                            $43 = (($$087106) + -1) | 0;
                            $44 = (((($3)) + 132 | 0) + ($43 << 2) | 0);
                            $45 = HEAP32[$44 >> 2] | 0;
                            $46 = (((($45) + ($40 << 1) | 0)) + 1 | 0);
                            $47 = HEAP8[$46 >> 0] | 0;
                            $48 = $47 & 255;
                            $49 = $41 << $48;
                            HEAP32[$1 >> 2] = $49;
                            $50 = $51 & 255;
                            $52 = (($50) - ($48)) | 0;
                            $53 = $52 & 255;
                            HEAP8[$8 >> 0] = $53;
                            $54 = (($$088105) + ($48)) | 0;
                            $55 = HEAP32[$44 >> 2] | 0;
                            $56 = (($55) + ($40 << 1) | 0);
                            $57 = HEAP8[$56 >> 0] | 0;
                            $58 = $57 & 255;
                            $59 = (($0) + ($$089103 << 2) | 0);
                            HEAP32[$59 >> 2] = $58;
                            $$1 = $54; $115 = $58;
                        } else {
                            $60 = $41 << $17;
                            HEAP32[$1 >> 2] = $60;
                            $61 = $51 & 255;
                            $62 = (($61) - ($17)) | 0;
                            $63 = $62 & 255;
                            HEAP8[$8 >> 0] = $63;
                            $64 = (($$088105) + ($17)) | 0;
                            $65 = HEAP32[$10 >> 2] | 0;
                            $66 = (($65) + ($40 << 1) | 0);
                            $67 = HEAP8[$66 >> 0] | 0;
                            $68 = ($67 & 255) < (7);
                            if ($68) {
                                $69 = $67 & 255;
                                $70 = (($0) + ($$089103 << 2) | 0);
                                HEAP32[$70 >> 2] = $69;
                                $$1 = $64; $115 = $69;
                                break;
                            }
                            $71 = $62 & 240;
                            $72 = ($71 >>> 0) < (16);
                            if ($72) {
                                $73 = HEAP32[$9 >> 2] | 0;
                                $74 = ((($73)) + 2 | 0);
                                HEAP32[$9 >> 2] = $74;
                                $75 = (($62) + 16) | 0;
                                $76 = $75 & 255;
                                HEAP8[$8 >> 0] = $76;
                                $77 = ((($73)) + 4 | 0);
                                $78 = HEAP8[$77 >> 0] | 0;
                                $79 = $78 & 255;
                                $80 = $79 << 8;
                                $81 = ((($73)) + 5 | 0);
                                $82 = HEAP8[$81 >> 0] | 0;
                                $83 = $82 & 255;
                                $84 = $80 | $83;
                                $85 = (($62) + 16) | 0;
                                $86 = $85 & 255;
                                $87 = (32 - ($86)) | 0;
                                $88 = $84 << $87;
                                $89 = $88 | $60;
                                HEAP32[$1 >> 2] = $89;
                                $90 = $89;
                            } else {
                                $90 = $60;
                            }
                            $91 = ($90 >>> 0) > (65535);
                            $92 = $90 >>> 16;
                            $$$i = $91 ? $92 : $90;
                            $$16$i = $91 ? 16 : 0;
                            $93 = $$$i & 65280;
                            $94 = ($93 | 0) == (0);
                            $95 = $$$i >>> 8;
                            $96 = $$16$i | 8;
                            $$114$i = $94 ? $$$i : $95;
                            $$1$i = $94 ? $$16$i : $96;
                            $97 = $$114$i & 240;
                            $98 = ($97 | 0) == (0);
                            $99 = $$114$i >>> 4;
                            $100 = $$1$i | 4;
                            $$215$i = $98 ? $$114$i : $99;
                            $$2$i = $98 ? $$1$i : $100;
                            $101 = (9292 + ($$215$i << 2) | 0);
                            $102 = HEAP32[$101 >> 2] | 0;
                            $$neg17$i = (32 - ($$2$i)) | 0;
                            $103 = (($$neg17$i) - ($102)) | 0;
                            $104 = (($103) + 6) | 0;
                            $105 = (($0) + ($$089103 << 2) | 0);
                            HEAP32[$105 >> 2] = $104;
                            $106 = ($104 | 0) > ($$087106 | 0);
                            if ($106) {
                                $$086 = -1;
                                label = 19;
                                break L3;
                            }
                            $107 = HEAP32[$1 >> 2] | 0;
                            $108 = $107 << $103;
                            HEAP32[$1 >> 2] = $108;
                            $109 = HEAP8[$8 >> 0] | 0;
                            $110 = $109 & 255;
                            $111 = (($110) - ($103)) | 0;
                            $112 = $111 & 255;
                            HEAP8[$8 >> 0] = $112;
                            $113 = (($103) + ($64)) | 0;
                            $$pre118 = HEAP32[$105 >> 2] | 0;
                            $$1 = $113; $115 = $$pre118;
                        }
                    } while (0);
                    $114 = (($$087106) - ($115)) | 0;
                    $116 = (($$089103) + 1) | 0;
                    $117 = ($116 | 0) < ($6 | 0);
                    if ($117) {
                        $$087106 = $114; $$088105 = $$1; $$089103 = $116;
                    } else {
                        $$087$lcssa = $114; $$088$lcssa = $$1;
                        break L1;
                    }
                }
                if ((label | 0) == 19) {
                    return ($$086 | 0);
                }
                $12 = ($$089103 | 0) < ($5 | 0);
                if (!($12)) {
                    $$086 = $$088105;
                    return ($$086 | 0);
                }
                $scevgep = (($0) + ($$089103 << 2) | 0);
                $13 = (($5) - ($$089103)) | 0;
                $14 = $13 << 2;
                _memset(($scevgep | 0), 0, ($14 | 0)) | 0;
                $$086 = $$088105;
                return ($$086 | 0);
            } else {
                $$087$lcssa = $4; $$088$lcssa = 0;
            }
        } while (0);
        $118 = (($0) + ($6 << 2) | 0);
        HEAP32[$118 >> 2] = $$087$lcssa;
        $$086 = $$088$lcssa;
        return ($$086 | 0);
    }
    function __ZN7WelsDec23CheckIntra16x16PredModeEhPa($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$ = 0, $$1 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = $0 & 255;
        $3 = $2 & 4;
        $4 = $2 & 2;
        $5 = $2 & 1;
        $6 = HEAP8[$1 >> 0] | 0;
        $7 = $6 << 24 >> 24;
        $8 = ($6 & 255) > (3);
        if ($8) {
            $$1 = 1051;
            return ($$1 | 0);
        }
        $9 = ($6 << 24 >> 24) == (2);
        if ($9) {
            $10 = $2 & 5;
            $11 = ($10 | 0) == (5);
            if ($11) {
                $$1 = 0;
                return ($$1 | 0);
            }
            $12 = ($3 | 0) == (0);
            $13 = $5 & 255;
            $14 = (6 - ($13)) << 24 >> 24;
            $$sink = $12 ? $14 : 4;
            HEAP8[$1 >> 0] = $$sink;
            $$1 = 0;
            return ($$1 | 0);
        }
        $15 = (25447 + ($7 << 2) | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = ($6 << 24 >> 24) == ($16 << 24 >> 24);
        if (!($17)) {
            $$1 = 1051;
            return ($$1 | 0);
        }
        $18 = (((25447 + ($7 << 2) | 0)) + 1 | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = $19 << 24 >> 24;
        $21 = ($3 | 0) < ($20 | 0);
        if ($21) {
            $$1 = 1051;
            return ($$1 | 0);
        }
        $22 = (((25447 + ($7 << 2) | 0)) + 2 | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = $23 << 24 >> 24;
        $25 = ($5 | 0) < ($24 | 0);
        if ($25) {
            $$1 = 1051;
            return ($$1 | 0);
        } else {
            $26 = (((25447 + ($7 << 2) | 0)) + 3 | 0);
            $27 = HEAP8[$26 >> 0] | 0;
            $28 = $27 << 24 >> 24;
            $29 = ($4 | 0) < ($28 | 0);
            $$ = $29 ? 1051 : 0;
            return ($$ | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec29ParseIntraPredModeChromaCabacEPNS_21TagWelsDecoderContextEhRi($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$4 = 0, $$5 = 0, $$off = 0, $$off82 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
        var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
        var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, $phitmp76 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $3 = sp + 4 | 0;
        $4 = sp;
        $5 = ((($0)) + 241932 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($6)) + 4004 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($6)) + 3908 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = $1 & 255;
        $12 = $11 & 4;
        $13 = $11 & 1;
        $14 = ((($6)) + 4040 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ((($6)) + 4044 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = (($15) - ($17)) | 0;
        $19 = (($15) + -1) | 0;
        HEAP32[$2 >> 2] = 0;
        $20 = ($13 | 0) == (0);
        if ($20) {
            $35 = 0;
        } else {
            $21 = (($8) + ($18) | 0);
            $22 = HEAP8[$21 >> 0] | 0;
            $$off = (($22) + -1) << 24 >> 24;
            $23 = ($$off & 255) < (3);
            if ($23) {
                $24 = (($10) + ($18 << 1) | 0);
                $25 = HEAP16[$24 >> 1] | 0;
                $26 = ($25 << 16 >> 16) != (512);
                $phitmp = $26 & 1;
                $35 = $phitmp;
            } else {
                $35 = 0;
            }
        }
        $27 = ($12 | 0) == (0);
        if ($27) {
            $36 = 0;
        } else {
            $28 = (($8) + ($19) | 0);
            $29 = HEAP8[$28 >> 0] | 0;
            $$off82 = (($29) + -1) << 24 >> 24;
            $30 = ($$off82 & 255) < (3);
            if ($30) {
                $31 = (($10) + ($19 << 1) | 0);
                $32 = HEAP16[$31 >> 1] | 0;
                $33 = ($32 << 16 >> 16) != (512);
                $phitmp76 = $33 & 1;
                $36 = $phitmp76;
            } else {
                $36 = 0;
            }
        }
        $34 = (($36) + ($35)) | 0;
        $37 = ((($0)) + 512232 | 0);
        $38 = HEAP32[$37 >> 2] | 0;
        $39 = ((($0)) + 511437 | 0);
        $40 = (($39) + ($34 << 1) | 0);
        $41 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($38, $40, $3) | 0);
        $42 = ($41 | 0) == (0);
        if (!($42)) {
            $$5 = $41;
            STACKTOP = sp; return ($$5 | 0);
        }
        $43 = HEAP32[$3 >> 2] | 0;
        HEAP32[$2 >> 2] = $43;
        $44 = ($43 | 0) == (0);
        if ($44) {
            $$5 = 0;
            STACKTOP = sp; return ($$5 | 0);
        }
        $45 = HEAP32[$37 >> 2] | 0;
        $46 = ((($0)) + 511443 | 0);
        $47 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($45, $46, $4) | 0);
        $48 = ($47 | 0) == (0);
        L15: do {
            if ($48) {
                $49 = HEAP32[$4 >> 2] | 0;
                $50 = ($49 | 0) == (0);
                if ($50) {
                    HEAP32[$2 >> 2] = 1;
                    $$4 = 0;
                    break;
                }
                HEAP32[$4 >> 2] = 0;
                while (1) {
                    $51 = HEAP32[$37 >> 2] | 0;
                    $52 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($51, $46, $3) | 0);
                    $53 = ($52 | 0) == (0);
                    if (!($53)) {
                        $$4 = $52;
                        break L15;
                    }
                    $54 = HEAP32[$4 >> 2] | 0;
                    $55 = (($54) + 1) | 0;
                    HEAP32[$4 >> 2] = $55;
                    $56 = HEAP32[$3 >> 2] | 0;
                    $57 = ($56 | 0) != (0);
                    $58 = ($55 | 0) == (0);
                    $59 = $58 & $57;
                    if (!($59)) {
                        break;
                    }
                }
                $60 = ($54 | 0) == (0);
                $or$cond = $60 & $57;
                if ($or$cond) {
                    HEAP32[$4 >> 2] = 2;
                    $62 = 2;
                } else {
                    $62 = $55;
                }
                $61 = (($62) + 1) | 0;
                HEAP32[$2 >> 2] = $61;
                $$4 = 0;
            } else {
                $$4 = $47;
            }
        } while (0);
        $$5 = $$4;
        STACKTOP = sp; return ($$5 | 0);
    }
    function __ZN7WelsDec24CheckIntraChromaPredModeEhPa($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$ = 0, $$1 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = $0 & 255;
        $3 = $2 & 4;
        $4 = $2 & 2;
        $5 = $2 & 1;
        $6 = HEAP8[$1 >> 0] | 0;
        $7 = ($6 << 24 >> 24) == (0);
        if ($7) {
            $8 = $2 & 5;
            $9 = ($8 | 0) == (5);
            if ($9) {
                $$1 = 0;
                return ($$1 | 0);
            }
            $10 = ($3 | 0) == (0);
            $11 = $5 & 255;
            $12 = (6 - ($11)) << 24 >> 24;
            $$sink = $10 ? $12 : 4;
            HEAP8[$1 >> 0] = $$sink;
            $$1 = 0;
            return ($$1 | 0);
        }
        $13 = $6 << 24 >> 24;
        $14 = (25175 + ($13 << 2) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = ($6 << 24 >> 24) == ($15 << 24 >> 24);
        if (!($16)) {
            $$1 = 1052;
            return ($$1 | 0);
        }
        $17 = (((25175 + ($13 << 2) | 0)) + 1 | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = $18 << 24 >> 24;
        $20 = ($3 | 0) < ($19 | 0);
        if ($20) {
            $$1 = 1052;
            return ($$1 | 0);
        }
        $21 = (((25175 + ($13 << 2) | 0)) + 2 | 0);
        $22 = HEAP8[$21 >> 0] | 0;
        $23 = $22 << 24 >> 24;
        $24 = ($5 | 0) < ($23 | 0);
        if ($24) {
            $$1 = 1052;
            return ($$1 | 0);
        } else {
            $25 = (((25175 + ($13 << 2) | 0)) + 3 | 0);
            $26 = HEAP8[$25 >> 0] | 0;
            $27 = $26 << 24 >> 24;
            $28 = ($4 | 0) < ($27 | 0);
            $$ = $28 ? 1052 : 0;
            return ($$ | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $$0$i = 0, $$053 = 0, $$061 = 0, $$062 = 0, $$1 = 0, $$sink$i = 0, $$sink31$i = 0, $$sink32$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
        var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
        var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
        var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
        var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
        var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
        var $99 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = HEAP8[$1 >> 0] | 0;
        $4 = $3 & 255;
        $5 = ((($1)) + 1 | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = $6 & 255;
        HEAP32[$2 >> 2] = $7;
        $8 = ((($0)) + 8 | 0);
        $9 = $8;
        $10 = $9;
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = (($9) + 4) | 0;
        $13 = $12;
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = $0;
        $16 = $15;
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = (($15) + 4) | 0;
        $19 = $18;
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = (_bitshift64Lshr(($17 | 0), ($20 | 0), 6) | 0);
        $22 = tempRet0;
        $23 = $21 & 3;
        $24 = ((14671 + ($4 << 2) | 0) + ($23) | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 & 255;
        $27 = $25 & 255;
        $28 = (_i64Subtract(($17 | 0), ($20 | 0), ($27 | 0), 0) | 0);
        $29 = tempRet0;
        $30 = ((($0)) + 16 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = (_bitshift64Shl(($28 | 0), ($29 | 0), ($31 | 0)) | 0);
        $33 = tempRet0;
        $34 = ($14 >>> 0) < ($33 >>> 0);
        $35 = ($11 >>> 0) < ($32 >>> 0);
        $36 = ($14 | 0) == ($33 | 0);
        $37 = $36 & $35;
        $38 = $34 | $37;
        do {
            if ($38) {
                $51 = (((14927 + ($4 << 1) | 0)) + 1 | 0);
                $52 = HEAP8[$51 >> 0] | 0;
                HEAP8[$1 >> 0] = $52;
                $53 = ($29 >>> 0) > (0);
                $54 = ($28 >>> 0) > (255);
                $55 = ($29 | 0) == (0);
                $56 = $55 & $54;
                $57 = $53 | $56;
                if (!($57)) {
                    $62 = (_bitshift64Shl(($28 | 0), ($29 | 0), 1) | 0);
                    $63 = tempRet0;
                    $$053 = 1; $66 = $62; $69 = $63; $75 = $11; $78 = $14;
                    break;
                }
                $58 = $0;
                $59 = $58;
                HEAP32[$59 >> 2] = $28;
                $60 = (($58) + 4) | 0;
                $61 = $60;
                HEAP32[$61 >> 2] = $29;
                $$1 = 0;
                return ($$1 | 0);
            } else {
                $39 = (_i64Subtract(($11 | 0), ($14 | 0), ($32 | 0), ($33 | 0)) | 0);
                $40 = tempRet0;
                $41 = $7 ^ 1;
                HEAP32[$2 >> 2] = $41;
                $42 = ($3 << 24 >> 24) == (0);
                if ($42) {
                    $43 = HEAP8[$5 >> 0] | 0;
                    $44 = $43 ^ 1;
                    HEAP8[$5 >> 0] = $44;
                }
                $45 = (14927 + ($4 << 1) | 0);
                $46 = HEAP8[$45 >> 0] | 0;
                HEAP8[$1 >> 0] = $46;
                $47 = (25191 + ($26) | 0);
                $48 = HEAP8[$47 >> 0] | 0;
                $49 = $48 & 255;
                $50 = $26 << $49;
                $$053 = $49; $66 = $50; $69 = 0; $75 = $39; $78 = $40;
            }
        } while (0);
        $64 = $0;
        $65 = $64;
        HEAP32[$65 >> 2] = $66;
        $67 = (($64) + 4) | 0;
        $68 = $67;
        HEAP32[$68 >> 2] = $69;
        $70 = HEAP32[$30 >> 2] | 0;
        $71 = (($70) - ($$053)) | 0;
        HEAP32[$30 >> 2] = $71;
        $72 = ($71 | 0) > (0);
        if ($72) {
            $73 = $8;
            $74 = $73;
            HEAP32[$74 >> 2] = $75;
            $76 = (($73) + 4) | 0;
            $77 = $76;
            HEAP32[$77 >> 2] = $78;
            $$1 = 0;
            return ($$1 | 0);
        }
        $79 = ((($0)) + 28 | 0);
        $80 = HEAP32[$79 >> 2] | 0;
        $81 = ((($0)) + 24 | 0);
        $82 = HEAP32[$81 >> 2] | 0;
        $83 = (($80) - ($82)) | 0;
        $84 = ($83 | 0) < (1);
        $85 = $82;
        if ($84) {
            $$0$i = 10012; $$061 = 0; $$062 = 0;
        } else {
            switch ($83 | 0) {
                case 3: {
                    $86 = HEAP8[$85 >> 0] | 0;
                    $87 = $86 & 255;
                    $88 = $87 << 16;
                    $89 = ((($85)) + 1 | 0);
                    $90 = HEAP8[$89 >> 0] | 0;
                    $91 = $90 & 255;
                    $92 = $91 << 8;
                    $93 = $92 | $88;
                    $94 = ((($85)) + 2 | 0);
                    $95 = HEAP8[$94 >> 0] | 0;
                    $96 = $95 & 255;
                    $97 = $93 | $96;
                    $$sink$i = 24; $$sink31$i = 3; $$sink32$i = $97;
                    break;
                }
                case 2: {
                    $98 = HEAP8[$85 >> 0] | 0;
                    $99 = $98 & 255;
                    $100 = $99 << 8;
                    $101 = ((($85)) + 1 | 0);
                    $102 = HEAP8[$101 >> 0] | 0;
                    $103 = $102 & 255;
                    $104 = $100 | $103;
                    $$sink$i = 16; $$sink31$i = 2; $$sink32$i = $104;
                    break;
                }
                case 1: {
                    $105 = HEAP8[$85 >> 0] | 0;
                    $106 = $105 & 255;
                    $$sink$i = 8; $$sink31$i = 1; $$sink32$i = $106;
                    break;
                }
                default: {
                    $107 = HEAP8[$85 >> 0] | 0;
                    $108 = $107 & 255;
                    $109 = $108 << 24;
                    $110 = ((($85)) + 1 | 0);
                    $111 = HEAP8[$110 >> 0] | 0;
                    $112 = $111 & 255;
                    $113 = $112 << 16;
                    $114 = $113 | $109;
                    $115 = ((($85)) + 2 | 0);
                    $116 = HEAP8[$115 >> 0] | 0;
                    $117 = $116 & 255;
                    $118 = $117 << 8;
                    $119 = $114 | $118;
                    $120 = ((($85)) + 3 | 0);
                    $121 = HEAP8[$120 >> 0] | 0;
                    $122 = $121 & 255;
                    $123 = $119 | $122;
                    $$sink$i = 32; $$sink31$i = 4; $$sink32$i = $123;
                }
            }
            $124 = (($85) + ($$sink31$i) | 0);
            HEAP32[$81 >> 2] = $124;
            $$0$i = 0; $$061 = $$sink$i; $$062 = $$sink32$i;
        }
        $125 = (_bitshift64Shl(($75 | 0), ($78 | 0), ($$061 | 0)) | 0);
        $126 = tempRet0;
        $127 = $125 | $$062;
        $128 = $8;
        $129 = $128;
        HEAP32[$129 >> 2] = $127;
        $130 = (($128) + 4) | 0;
        $131 = $130;
        HEAP32[$131 >> 2] = $126;
        $132 = (($71) + ($$061)) | 0;
        HEAP32[$30 >> 2] = $132;
        $133 = ($$0$i | 0) != (0);
        $134 = ($132 | 0) < (0);
        $or$cond = $133 & $134;
        $$0 = $or$cond ? $$0$i : 0;
        $$1 = $$0;
        return ($$1 | 0);
    }
    function __ZN7WelsDec27ParseIntraPredModeLumaCabacEPNS_21TagWelsDecoderContextERi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $2 = sp;
        HEAP32[$1 >> 2] = 0;
        $3 = ((($0)) + 512232 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($0)) + 511445 | 0);
        $6 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($4, $5, $2) | 0);
        $7 = ($6 | 0) == (0);
        if (!($7)) {
            $$4 = $6;
            STACKTOP = sp; return ($$4 | 0);
        }
        $8 = HEAP32[$2 >> 2] | 0;
        $9 = ($8 | 0) == (1);
        do {
            if ($9) {
                $storemerge = -1;
            } else {
                $10 = HEAP32[$3 >> 2] | 0;
                $11 = ((($0)) + 511447 | 0);
                $12 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($10, $11, $2) | 0);
                $13 = ($12 | 0) == (0);
                if (!($13)) {
                    $$4 = $12;
                    STACKTOP = sp; return ($$4 | 0);
                }
                $14 = HEAP32[$2 >> 2] | 0;
                $15 = HEAP32[$1 >> 2] | 0;
                $16 = $15 | $14;
                HEAP32[$1 >> 2] = $16;
                $17 = HEAP32[$3 >> 2] | 0;
                $18 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($17, $11, $2) | 0);
                $19 = ($18 | 0) == (0);
                if (!($19)) {
                    $$4 = $18;
                    STACKTOP = sp; return ($$4 | 0);
                }
                $20 = HEAP32[$2 >> 2] | 0;
                $21 = $20 << 1;
                $22 = HEAP32[$1 >> 2] | 0;
                $23 = $22 | $21;
                HEAP32[$1 >> 2] = $23;
                $24 = HEAP32[$3 >> 2] | 0;
                $25 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($24, $11, $2) | 0);
                $26 = ($25 | 0) == (0);
                if ($26) {
                    $27 = HEAP32[$2 >> 2] | 0;
                    $28 = $27 << 2;
                    $29 = HEAP32[$1 >> 2] | 0;
                    $30 = $29 | $28;
                    $storemerge = $30;
                    break;
                } else {
                    $$4 = $25;
                    STACKTOP = sp; return ($$4 | 0);
                }
            }
        } while (0);
        HEAP32[$1 >> 2] = $storemerge;
        $$4 = 0;
        STACKTOP = sp; return ($$4 | 0);
    }
    function __ZN7WelsDec16PredIntra4x4ModeEPai($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (15458 + ($1) | 0);
        $3 = HEAP8[$2 >> 0] | 0;
        $4 = $3 & 255;
        $5 = (($4) + -8) | 0;
        $6 = (($0) + ($5) | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = (($4) + -1) | 0;
        $9 = (($0) + ($8) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = ($10 << 24 >> 24) == (-1);
        $12 = ($7 << 24 >> 24) == (-1);
        $or$cond = $12 | $11;
        $13 = ($10 << 24 >> 24) < ($7 << 24 >> 24);
        $14 = $13 ? $10 : $7;
        $15 = $14 << 24 >> 24;
        $16 = $or$cond ? 2 : $15;
        return ($16 | 0);
    }
    function __ZN7WelsDec21CheckIntraNxNPredModeEPiPaib($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$ = 0, $$$ = 0, $$$53 = 0, $$1 = 0, $$2 = 0, $$53 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = (10975 + ($2) | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 << 24 >> 24;
        $7 = (($6) + -1) | 0;
        $8 = (($0) + ($7 << 2) | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = (($6) + -6) | 0;
        $11 = (($0) + ($10 << 2) | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = (($6) + -7) | 0;
        $14 = (($0) + ($13 << 2) | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = $3 ? 4 : 5;
        $17 = (($6) - ($16)) | 0;
        $18 = (($0) + ($17 << 2) | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = HEAP8[$1 >> 0] | 0;
        $21 = $20 << 24 >> 24;
        $22 = ($20 & 255) > (8);
        if ($22) {
            $$1 = -1;
            return ($$1 | 0);
        }
        $23 = ($20 << 24 >> 24) == (2);
        do {
            if ($23) {
                $24 = ($9 | 0) != (0);
                $25 = ($12 | 0) != (0);
                $or$cond = $24 & $25;
                if ($or$cond) {
                    $$1 = $21;
                    return ($$1 | 0);
                } else {
                    $$ = $25 ? 10 : 11;
                    $$$ = $24 ? 9 : $$;
                    $$2 = $$$;
                    break;
                }
            } else {
                $26 = (25463 + ($21 << 2) | 0);
                $27 = HEAP8[$26 >> 0] | 0;
                $28 = ($20 << 24 >> 24) == ($27 << 24 >> 24);
                if (!($28)) {
                    $$1 = -1;
                    return ($$1 | 0);
                }
                $29 = (((25463 + ($21 << 2) | 0)) + 1 | 0);
                $30 = HEAP8[$29 >> 0] | 0;
                $31 = $30 << 24 >> 24;
                $32 = ($9 | 0) < ($31 | 0);
                if ($32) {
                    $$1 = -1;
                    return ($$1 | 0);
                }
                $33 = (((25463 + ($21 << 2) | 0)) + 2 | 0);
                $34 = HEAP8[$33 >> 0] | 0;
                $35 = $34 << 24 >> 24;
                $36 = ($12 | 0) < ($35 | 0);
                if ($36) {
                    $$1 = -1;
                    return ($$1 | 0);
                }
                $37 = (((25463 + ($21 << 2) | 0)) + 3 | 0);
                $38 = HEAP8[$37 >> 0] | 0;
                $39 = $38 << 24 >> 24;
                $40 = ($15 | 0) < ($39 | 0);
                if ($40) {
                    $$1 = -1;
                    return ($$1 | 0);
                } else {
                    $41 = ($20 << 24 >> 24) == (3);
                    $42 = ($19 | 0) == (0);
                    $or$cond3 = $42 & $41;
                    $43 = ($20 << 24 >> 24) == (7);
                    $or$cond5 = $42 & $43;
                    $$53 = $or$cond5 ? 13 : $20;
                    $$$53 = $or$cond3 ? 12 : $$53;
                    $$2 = $$$53;
                    break;
                }
            }
        } while (0);
        $44 = $$2 << 24 >> 24;
        $$1 = $44;
        return ($$1 | 0);
    }
    function __ZN7WelsDec23PredPSkipMvFromNeighborEPNS_10TagDqLayerEPs($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$$20$i = 0, $$$20$i220 = 0, $$$i218245 = 0, $$$i242 = 0, $$0$off0 = 0, $$0$off0$not = 0, $$0184 = 0, $$0185 = 0, $$0186 = 0, $$0189 = 0, $$0191 = 0, $$0193 = 0, $$0195$off0 = 0, $$0195$off0$not = 0, $$0196$off0 = 0, $$0196$off0$not = 0, $$1 = 0, $$1$i = 0, $$1$i222 = 0, $$119$i221247 = 0;
        var $$119$i244 = 0, $$1194$off0 = 0, $$1194$off0$not = 0, $$20$i219246 = 0, $$20$i243 = 0, $$214 = 0, $$217 = 0, $$neg$i = 0, $$neg$i223 = 0, $$not = 0, $$not201 = 0, $$sink = 0, $$sink$sink = 0, $$sroa$0$0 = 0, $$sroa$010$0 = 0, $$sroa$010$0$extract$trunc = 0, $$sroa$010$0$extract$trunc11 = 0, $$sroa$010$0$insert$ext = 0, $$sroa$010$0$insert$insert = 0, $$sroa$010$1 = 0;
        var $$sroa$017$0$extract$trunc = 0, $$sroa$017$0$insert$ext20 = 0, $$sroa$017$0$insert$insert22 = 0, $$sroa$017$0236238 = 0, $$sroa$031$0$extract$trunc = 0, $$sroa$031$0$insert$ext38 = 0, $$sroa$031$0$insert$insert40 = 0, $$sroa$031$0227229 = 0, $$sroa$7$0 = 0, $$sroa$7$0$extract$shift = 0, $$sroa$7$0$extract$shift14 = 0, $$sroa$7$0$extract$trunc = 0, $$sroa$7$0$extract$trunc15 = 0, $$sroa$7$0$insert$ext = 0, $$sroa$7$0$insert$shift = 0, $$sroa$7$1 = 0, $$sroa$724$0$extract$shift = 0, $$sroa$724$0$extract$trunc = 0, $$sroa$724$0$insert$ext26 = 0, $$sroa$724$0$insert$shift27 = 0;
        var $$sroa$724$0235239 = 0, $$sroa$8$0$extract$shift = 0, $$sroa$8$0$extract$trunc = 0, $$sroa$8$0$insert$ext48 = 0, $$sroa$8$0$insert$shift49 = 0, $$sroa$8$0226230 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
        var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
        var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
        var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
        var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
        var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $brmerge202 = 0, $brmerge203 = 0, $brmerge204 = 0, $extract$t = 0, $extract$t197 = 0, $or$cond = 0, $or$cond$not = 0, $or$cond207 = 0, $or$cond210 = 0, $or$cond213 = 0, $or$cond216 = 0, $or$cond3 = 0, $or$cond3$not = 0, $phitmp = 0, $phitmp200 = 0;
        var $phitmp240 = 0, $phitmp241 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 4040 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($0)) + 4032 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 4036 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($0)) + 3912 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = (($9) + ($3 << 2) | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ($5 | 0) != (0);
        $13 = (($3) + -1) | 0;
        if ($12) {
            $14 = (($9) + ($13 << 2) | 0);
            $15 = HEAP32[$14 >> 2] | 0;
            $16 = ($15 | 0) == ($11 | 0);
            $$0196$off0 = $16;
        } else {
            $$0196$off0 = 0;
        }
        $17 = ($7 | 0) != (0);
        do {
            if ($17) {
                $18 = ((($0)) + 4044 | 0);
                $19 = HEAP32[$18 >> 2] | 0;
                $20 = (($3) - ($19)) | 0;
                $21 = (($9) + ($20 << 2) | 0);
                $22 = HEAP32[$21 >> 2] | 0;
                $23 = ($22 | 0) == ($11 | 0);
                $24 = (($20) + -1) | 0;
                if ($12) {
                    $25 = (($9) + ($24 << 2) | 0);
                    $26 = HEAP32[$25 >> 2] | 0;
                    $27 = ($26 | 0) == ($11 | 0);
                    $28 = $27 & 1;
                    $$0193 = $28;
                } else {
                    $$0193 = 0;
                }
                $29 = (($19) + -1) | 0;
                $30 = ($5 | 0) == ($29 | 0);
                if ($30) {
                    $extract$t197 = ($$0193 << 24 >> 24) != (0);
                    $$0$off0 = $23; $$0189 = 0; $$0191 = $20; $$0195$off0 = 0; $$1 = $24; $$1194$off0 = $extract$t197;
                    break;
                } else {
                    $31 = (($20) + 1) | 0;
                    $32 = (($9) + ($31 << 2) | 0);
                    $33 = HEAP32[$32 >> 2] | 0;
                    $34 = ($33 | 0) == ($11 | 0);
                    $extract$t = ($$0193 << 24 >> 24) != (0);
                    $$0$off0 = $23; $$0189 = $31; $$0191 = $20; $$0195$off0 = $34; $$1 = $24; $$1194$off0 = $extract$t;
                    break;
                }
            } else {
                $$0$off0 = 0; $$0189 = 0; $$0191 = 0; $$0195$off0 = 0; $$1 = 0; $$1194$off0 = 0;
            }
        } while (0);
        $$not = $12 ^ 1;
        $$0196$off0$not = $$0196$off0 ^ 1;
        $brmerge = $$not | $$0196$off0$not;
        if ($brmerge) {
            $59 = 0;
        } else {
            $35 = ((($0)) + 3908 | 0);
            $36 = HEAP32[$35 >> 2] | 0;
            $37 = (($36) + ($13 << 1) | 0);
            $38 = HEAP16[$37 >> 1] | 0;
            $39 = $38 & 504;
            $phitmp240 = $39 & 65535;
            $59 = $phitmp240;
        }
        $$not201 = $17 ^ 1;
        $$0$off0$not = $$0$off0 ^ 1;
        $brmerge202 = $$not201 | $$0$off0$not;
        if ($brmerge202) {
            $70 = 0;
        } else {
            $40 = ((($0)) + 3908 | 0);
            $41 = HEAP32[$40 >> 2] | 0;
            $42 = (($41) + ($$0191 << 1) | 0);
            $43 = HEAP16[$42 >> 1] | 0;
            $44 = $43 & 504;
            $phitmp241 = $44 & 65535;
            $70 = $phitmp241;
        }
        $or$cond = $12 & $17;
        $or$cond$not = $or$cond ^ 1;
        $$1194$off0$not = $$1194$off0 ^ 1;
        $brmerge203 = $or$cond$not | $$1194$off0$not;
        if ($brmerge203) {
            $91 = 0;
        } else {
            $45 = ((($0)) + 3908 | 0);
            $46 = HEAP32[$45 >> 2] | 0;
            $47 = (($46) + ($$1 << 1) | 0);
            $48 = HEAP16[$47 >> 1] | 0;
            $49 = $48 & 504;
            $phitmp = $49 & 65535;
            $91 = $phitmp;
        }
        $50 = ((($0)) + 4044 | 0);
        $51 = HEAP32[$50 >> 2] | 0;
        $52 = (($51) + -1) | 0;
        $53 = ($5 | 0) != ($52 | 0);
        $or$cond3 = $17 & $53;
        $or$cond3$not = $or$cond3 ^ 1;
        $$0195$off0$not = $$0195$off0 ^ 1;
        $brmerge204 = $$0195$off0$not | $or$cond3$not;
        if ($brmerge204) {
            $81 = 0;
        } else {
            $54 = ((($0)) + 3908 | 0);
            $55 = HEAP32[$54 >> 2] | 0;
            $56 = (($55) + ($$0189 << 1) | 0);
            $57 = HEAP16[$56 >> 1] | 0;
            $58 = $57 & 504;
            $phitmp200 = $58 & 65535;
            $81 = $phitmp200;
        }
        $60 = ($59 | 0) == (0);
        $or$cond207 = $60 | $$0196$off0$not;
        L25: do {
            if ($or$cond207) {
                if ($$0196$off0) {
                    $$sroa$031$0227229 = 0; $$sroa$8$0226230 = 0; $103 = 0;
                } else {
                    label = 21;
                }
            } else {
                $61 = ((($0)) + 3916 | 0);
                $62 = HEAP32[$61 >> 2] | 0;
                $63 = (((($62) + ($13 << 6) | 0)) + 12 | 0);
                $64 = HEAPU8[$63 >> 0] | (HEAPU8[$63 + 1 >> 0] << 8) | (HEAPU8[$63 + 2 >> 0] << 16) | (HEAPU8[$63 + 3 >> 0] << 24);
                $$sroa$031$0$extract$trunc = $64 & 65535;
                $$sroa$8$0$extract$shift = $64 >>> 16;
                $$sroa$8$0$extract$trunc = $$sroa$8$0$extract$shift & 65535;
                $65 = ((($0)) + 3932 | 0);
                $66 = HEAP32[$65 >> 2] | 0;
                $67 = (((($66) + ($13 << 4) | 0)) + 3 | 0);
                $68 = HEAP8[$67 >> 0] | 0;
                switch ($68 << 24 >> 24) {
                    case -2: {
                        label = 21;
                        break L25;
                        break;
                    }
                    case 0: {
                        break;
                    }
                    default: {
                        $$sroa$031$0227229 = $$sroa$031$0$extract$trunc; $$sroa$8$0226230 = $$sroa$8$0$extract$trunc; $103 = 0;
                        break L25;
                    }
                }
                $69 = ($64 | 0) == (0);
                if ($69) {
                    label = 21;
                } else {
                    $$sroa$031$0227229 = $$sroa$031$0$extract$trunc; $$sroa$8$0226230 = $$sroa$8$0$extract$trunc; $103 = 1;
                }
            }
        } while (0);
        if ((label | 0) == 21) {
            HEAP8[$1 >> 0] = 0 & 255; HEAP8[$1 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$1 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$1 + 3 >> 0] = 0 >> 24;
            return;
        }
        $71 = ($70 | 0) == (0);
        $or$cond210 = $71 | $$0$off0$not;
        L33: do {
            if ($or$cond210) {
                if ($$0$off0) {
                    $$sroa$017$0236238 = 0; $$sroa$724$0235239 = 0; $105 = 0;
                } else {
                    label = 26;
                }
            } else {
                $72 = ((($0)) + 3916 | 0);
                $73 = HEAP32[$72 >> 2] | 0;
                $74 = (((($73) + ($$0191 << 6) | 0)) + 48 | 0);
                $75 = HEAPU8[$74 >> 0] | (HEAPU8[$74 + 1 >> 0] << 8) | (HEAPU8[$74 + 2 >> 0] << 16) | (HEAPU8[$74 + 3 >> 0] << 24);
                $$sroa$017$0$extract$trunc = $75 & 65535;
                $$sroa$724$0$extract$shift = $75 >>> 16;
                $$sroa$724$0$extract$trunc = $$sroa$724$0$extract$shift & 65535;
                $76 = ((($0)) + 3932 | 0);
                $77 = HEAP32[$76 >> 2] | 0;
                $78 = (((($77) + ($$0191 << 4) | 0)) + 12 | 0);
                $79 = HEAP8[$78 >> 0] | 0;
                switch ($79 << 24 >> 24) {
                    case -2: {
                        label = 26;
                        break L33;
                        break;
                    }
                    case 0: {
                        break;
                    }
                    default: {
                        $$sroa$017$0236238 = $$sroa$017$0$extract$trunc; $$sroa$724$0235239 = $$sroa$724$0$extract$trunc; $105 = 0;
                        break L33;
                    }
                }
                $80 = ($75 | 0) == (0);
                if ($80) {
                    label = 26;
                } else {
                    $$sroa$017$0236238 = $$sroa$017$0$extract$trunc; $$sroa$724$0235239 = $$sroa$724$0$extract$trunc; $105 = 1;
                }
            }
        } while (0);
        if ((label | 0) == 26) {
            HEAP8[$1 >> 0] = 0 & 255; HEAP8[$1 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$1 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$1 + 3 >> 0] = 0 >> 24;
            return;
        }
        $82 = ($81 | 0) == (0);
        $or$cond213 = $82 | $$0195$off0$not;
        if ($or$cond213) {
            $$214 = $$0195$off0 ? -1 : -2;
            $$0186 = $$214; $$sroa$010$0 = 0; $$sroa$7$0 = 0;
        } else {
            $83 = ((($0)) + 3916 | 0);
            $84 = HEAP32[$83 >> 2] | 0;
            $85 = (((($84) + ($$0189 << 6) | 0)) + 48 | 0);
            $86 = HEAPU8[$85 >> 0] | (HEAPU8[$85 + 1 >> 0] << 8) | (HEAPU8[$85 + 2 >> 0] << 16) | (HEAPU8[$85 + 3 >> 0] << 24);
            $$sroa$010$0$extract$trunc = $86 & 65535;
            $$sroa$7$0$extract$shift = $86 >>> 16;
            $$sroa$7$0$extract$trunc = $$sroa$7$0$extract$shift & 65535;
            $87 = ((($0)) + 3932 | 0);
            $88 = HEAP32[$87 >> 2] | 0;
            $89 = (((($88) + ($$0189 << 4) | 0)) + 12 | 0);
            $90 = HEAP8[$89 >> 0] | 0;
            $$0186 = $90; $$sroa$010$0 = $$sroa$010$0$extract$trunc; $$sroa$7$0 = $$sroa$7$0$extract$trunc;
        }
        $92 = ($91 | 0) == (0);
        $or$cond216 = $92 | $$1194$off0$not;
        if ($or$cond216) {
            $$217 = $$1194$off0 ? -1 : -2;
            $$0185 = $$217; $$sroa$0$0 = 0;
        } else {
            $93 = ((($0)) + 3916 | 0);
            $94 = HEAP32[$93 >> 2] | 0;
            $95 = (((($94) + ($$1 << 6) | 0)) + 60 | 0);
            $96 = HEAPU8[$95 >> 0] | (HEAPU8[$95 + 1 >> 0] << 8) | (HEAPU8[$95 + 2 >> 0] << 16) | (HEAPU8[$95 + 3 >> 0] << 24);
            $97 = ((($0)) + 3932 | 0);
            $98 = HEAP32[$97 >> 2] | 0;
            $99 = (((($98) + ($$1 << 4) | 0)) + 15 | 0);
            $100 = HEAP8[$99 >> 0] | 0;
            $$0185 = $100; $$sroa$0$0 = $96;
        }
        $101 = ($$0186 << 24 >> 24) == (-2);
        $$sroa$7$0$extract$shift14 = $$sroa$0$0 >>> 16;
        $$sroa$010$0$extract$trunc11 = $$sroa$0$0 & 65535;
        $$sroa$7$0$extract$trunc15 = $$sroa$7$0$extract$shift14 & 65535;
        $$0184 = $101 ? $$0185 : $$0186;
        $$sroa$7$1 = $101 ? $$sroa$7$0$extract$trunc15 : $$sroa$7$0;
        $$sroa$010$1 = $101 ? $$sroa$010$0$extract$trunc11 : $$sroa$010$0;
        $102 = $103 & 1;
        $104 = $105 & 1;
        $106 = (($104) + ($102)) | 0;
        $107 = ($$0184 << 24 >> 24) == (0);
        $108 = $107 & 1;
        $109 = (($106) + ($108)) | 0;
        $110 = ($109 | 0) == (1);
        if (!($110)) {
            $111 = $$sroa$031$0227229 & 65535;
            $112 = $$sroa$017$0236238 & 65535;
            $113 = $$sroa$010$1 << 16 >> 16;
            $114 = ($$sroa$017$0236238 << 16 >> 16) < ($$sroa$031$0227229 << 16 >> 16);
            $$$i242 = $114 ? $$sroa$017$0236238 : $$sroa$031$0227229;
            $115 = ($$sroa$017$0236238 << 16 >> 16) > ($$sroa$031$0227229 << 16 >> 16);
            $$20$i243 = $115 ? $$sroa$017$0236238 : $$sroa$031$0227229;
            $116 = $$20$i243 << 16 >> 16;
            $117 = ($$$i242 << 16 >> 16) > ($$sroa$010$1 << 16 >> 16);
            $118 = ($116 | 0) < ($113 | 0);
            $$$20$i = $118 ? $113 : $116;
            $119 = ($$$i242 << 16 >> 16) < ($$sroa$010$1 << 16 >> 16);
            $$119$i244 = $119 ? $$$i242 : $$sroa$010$1;
            $120 = $$119$i244 & 65535;
            $$1$i = $117 ? $116 : $$$20$i;
            $$neg$i = (($112) + ($111)) | 0;
            $121 = (($$neg$i) + ($113)) | 0;
            $122 = (($121) - ($120)) | 0;
            $123 = (($122) - ($$1$i)) | 0;
            $124 = $123 & 65535;
            HEAP16[$1 >> 1] = $124;
            $125 = $$sroa$8$0226230 & 65535;
            $126 = $$sroa$724$0235239 & 65535;
            $127 = $$sroa$7$1 << 16 >> 16;
            $128 = ($$sroa$724$0235239 << 16 >> 16) < ($$sroa$8$0226230 << 16 >> 16);
            $$$i218245 = $128 ? $$sroa$724$0235239 : $$sroa$8$0226230;
            $129 = ($$sroa$724$0235239 << 16 >> 16) > ($$sroa$8$0226230 << 16 >> 16);
            $$20$i219246 = $129 ? $$sroa$724$0235239 : $$sroa$8$0226230;
            $130 = $$20$i219246 << 16 >> 16;
            $131 = ($$$i218245 << 16 >> 16) > ($$sroa$7$1 << 16 >> 16);
            $132 = ($130 | 0) < ($127 | 0);
            $$$20$i220 = $132 ? $127 : $130;
            $133 = ($$$i218245 << 16 >> 16) < ($$sroa$7$1 << 16 >> 16);
            $$119$i221247 = $133 ? $$$i218245 : $$sroa$7$1;
            $134 = $$119$i221247 & 65535;
            $$1$i222 = $131 ? $130 : $$$20$i220;
            $$neg$i223 = (($126) + ($125)) | 0;
            $135 = (($$neg$i223) + ($127)) | 0;
            $136 = (($135) - ($134)) | 0;
            $137 = (($136) - ($$1$i222)) | 0;
            $138 = $137 & 65535;
            $139 = ((($1)) + 2 | 0);
            HEAP16[$139 >> 1] = $138;
            return;
        }
        if ($103) {
            $$sroa$8$0$insert$ext48 = $$sroa$8$0226230 & 65535;
            $$sroa$8$0$insert$shift49 = $$sroa$8$0$insert$ext48 << 16;
            $$sroa$031$0$insert$ext38 = $$sroa$031$0227229 & 65535;
            $$sroa$031$0$insert$insert40 = $$sroa$8$0$insert$shift49 | $$sroa$031$0$insert$ext38;
            $$sink$sink = $$sroa$031$0$insert$insert40;
        } else {
            $$sroa$7$0$insert$ext = $$sroa$7$1 & 65535;
            $$sroa$7$0$insert$shift = $$sroa$7$0$insert$ext << 16;
            $$sroa$010$0$insert$ext = $$sroa$010$1 & 65535;
            $$sroa$010$0$insert$insert = $$sroa$7$0$insert$shift | $$sroa$010$0$insert$ext;
            $$sroa$724$0$insert$ext26 = $$sroa$724$0235239 & 65535;
            $$sroa$724$0$insert$shift27 = $$sroa$724$0$insert$ext26 << 16;
            $$sroa$017$0$insert$ext20 = $$sroa$017$0236238 & 65535;
            $$sroa$017$0$insert$insert22 = $$sroa$724$0$insert$shift27 | $$sroa$017$0$insert$ext20;
            $$sink = $105 ? $$sroa$017$0$insert$insert22 : $$sroa$010$0$insert$insert;
            $$sink$sink = $$sink;
        }
        HEAP8[$1 >> 0] = $$sink$sink & 255; HEAP8[$1 + 1 >> 0] = ($$sink$sink >> 8) & 255; HEAP8[$1 + 2 >> 0] = ($$sink$sink >> 16) & 255; HEAP8[$1 + 3 >> 0] = $$sink$sink >> 24;
        return;
    }
    function __ZN7WelsDec29WelsActualDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0588729 = 0, $$0596 = 0, $$0598 = 0, $$0600 = 0, $$0600$1 = 0, $$11 = 0, $$1589726 = 0, $$1597 = 0, $$1599 = 0, $$1601 = 0, $$1601$1 = 0, $$2592723 = 0, $$3$ph = 0, $$31 = 0, $$648 = 0, $$648$1 = 0, $$650 = 0, $$650$1 = 0, $$off = 0, $$off628 = 0;
        var $$phi$trans$insert = 0, $$phi$trans$insert759 = 0, $$phi$trans$insert762 = 0, $$phi$trans$insert765 = 0, $$pn = 0, $$pn$in = 0, $$pre = 0, $$pre$phi769Z2D = 0, $$pre$phi771Z2D = 0, $$pre$phiZ2D = 0, $$pre757 = 0, $$pre758 = 0, $$pre760 = 0, $$pre761 = 0, $$pre763 = 0, $$pre764 = 0, $$pre766 = 0, $$pre768 = 0, $$pre770 = 0, $$sink = 0;
        var $$sink16 = 0, $$sink25 = 0, $$sink35 = 0, $$sink35$in$in = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
        var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
        var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
        var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
        var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
        var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
        var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
        var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
        var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
        var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
        var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
        var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
        var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
        var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
        var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
        var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
        var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
        var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
        var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
        var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
        var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
        var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
        var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
        var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
        var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
        var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
        var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
        var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
        var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
        var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
        var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
        var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
        var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
        var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
        var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
        var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
        var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
        var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
        var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
        var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
        var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
        var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
        var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
        var $889 = 0, $89 = 0, $890 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_ZN7WelsDec18g_kuiInterCbpTableE$sink = 0, $_ZN7WelsDec21g_kuiInterCbpTable400E$sink = 0, $or$cond = 0, $or$cond21 = 0, $or$cond23 = 0, $or$cond27 = 0;
        var $scevgep = 0, $scevgep755 = 0, $storemerge$i = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 416 | 0;
        $vararg_buffer = sp;
        $1 = sp + 48 | 0;
        $2 = sp + 8 | 0;
        $3 = sp + 4 | 0;
        $4 = sp + 348 | 0;
        $5 = sp + 288 | 0;
        $6 = ((($0)) + 5864 | 0);
        $7 = ((($0)) + 241932 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($8)) + 3900 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($8)) + 3866 | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = $12 & 255;
        $14 = ((($8)) + 3867 | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = $15 & 255;
        $17 = ((($8)) + 4032 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = ((($8)) + 4036 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = ((($8)) + 4040 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = ((($8)) + 3964 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = (($24) + (($22 * 24) | 0) | 0);
        __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($2, $8);
        $26 = ((($4)) + 15 | 0);
        $27 = $26;
        $28 = $27 & 15;
        $29 = (0 - ($28)) | 0;
        $30 = (($26) + ($29) | 0);
        $31 = ((($8)) + 3976 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = (($32) + ($22) | 0);
        HEAP8[$33 >> 0] = 0;
        $34 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($10, $3) | 0);
        $35 = ($34 | 0) == (0);
        if (!($35)) {
            $$31 = $34;
            STACKTOP = sp; return ($$31 | 0);
        }
        $36 = HEAP32[$3 >> 2] | 0;
        $37 = ($36 >>> 0) < (5);
        L4: do {
            if ($37) {
                $38 = (9368 + ($36 << 3) | 0);
                $39 = HEAP32[$38 >> 2] | 0;
                $40 = $39 & 65535;
                $41 = ((($8)) + 3908 | 0);
                $42 = HEAP32[$41 >> 2] | 0;
                $43 = (($42) + ($22 << 1) | 0);
                HEAP16[$43 >> 1] = $40;
                __ZN7WelsDec18WelsFillCacheInterEPNS_16TagNeighborAvailEPhPA30_A2_sPA30_aPNS_10TagDqLayerE($2, $30, $1, $5, $8);
                $44 = (__ZN7WelsDec14ParseInterInfoEPNS_21TagWelsDecoderContextEPA30_A2_sPA30_aPN10WelsCommon15TagBitStringAuxE($0, $1, $5, $10) | 0);
                $45 = ($44 | 0) == (0);
                do {
                    if ($45) {
                        $46 = ((($8)) + 3860 | 0);
                        $47 = HEAP8[$46 >> 0] | 0;
                        $48 = ($47 << 24 >> 24) == (0);
                        if ($48) {
                            $79 = ((($8)) + 3861 | 0);
                            $80 = HEAP8[$79 >> 0] | 0;
                            $$sink = $80;
                        } else {
                            $49 = ((($10)) + 20 | 0);
                            $50 = HEAP32[$49 >> 2] | 0;
                            $51 = $50 >>> 31;
                            $52 = ((($10)) + 4 | 0);
                            $53 = HEAP32[$52 >> 2] | 0;
                            $54 = HEAP32[$10 >> 2] | 0;
                            $55 = ((($10)) + 16 | 0);
                            $56 = HEAP32[$55 >> 2] | 0;
                            $57 = $50 << 1;
                            HEAP32[$49 >> 2] = $57;
                            $58 = ((($10)) + 24 | 0);
                            $59 = HEAP32[$58 >> 2] | 0;
                            $60 = (($59) + 1) | 0;
                            HEAP32[$58 >> 2] = $60;
                            $61 = ($59 | 0) > (-1);
                            $62 = $56;
                            if ($61) {
                                $63 = (($56) - ($54)) | 0;
                                $64 = (($53) + 1) | 0;
                                $65 = (($64) - ($54)) | 0;
                                $66 = ($63 | 0) > ($65 | 0);
                                if ($66) {
                                    $$3$ph = 11;
                                    break;
                                }
                                $67 = HEAP8[$62 >> 0] | 0;
                                $68 = $67 & 255;
                                $69 = $68 << 8;
                                $70 = ((($62)) + 1 | 0);
                                $71 = HEAP8[$70 >> 0] | 0;
                                $72 = $71 & 255;
                                $73 = $69 | $72;
                                $74 = $73 << $60;
                                $75 = $74 | $57;
                                HEAP32[$49 >> 2] = $75;
                                $76 = (($59) + -15) | 0;
                                HEAP32[$58 >> 2] = $76;
                                $77 = ((($62)) + 2 | 0);
                                HEAP32[$55 >> 2] = $77;
                            }
                            HEAP32[$3 >> 2] = $51;
                            $78 = $51 & 255;
                            $$sink = $78;
                        }
                        $$pn$in = ((($8)) + 3972 | 0);
                        $$pn = HEAP32[$$pn$in >> 2] | 0;
                        $$sink16 = (($$pn) + ($22) | 0);
                        HEAP8[$$sink16 >> 0] = $$sink;
                        $81 = HEAP32[$$pn$in >> 2] | 0;
                        $82 = (($81) + ($22) | 0);
                        $83 = HEAP8[$82 >> 0] | 0;
                        $84 = ($83 << 24 >> 24) == (0);
                        if ($84) {
                            $85 = HEAP32[$31 >> 2] | 0;
                            $86 = (($85) + ($22) | 0);
                            HEAP8[$86 >> 0] = 0;
                            $$0596 = 0; $$0598 = 0; $$pre$phiZ2D = $41;
                            break L4;
                        } else {
                            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25499, $vararg_buffer);
                            $$3$ph = -1;
                            break;
                        }
                    } else {
                        $$3$ph = -1;
                    }
                } while (0);
                $$31 = $$3$ph;
                STACKTOP = sp; return ($$31 | 0);
            } else {
                $87 = (($36) + -5) | 0;
                $88 = ($87 >>> 0) > (25);
                if ($88) {
                    $$31 = 1035;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $89 = ((($0)) + 241924 | 0);
                $90 = HEAP32[$89 >> 2] | 0;
                $91 = ((($90)) + 318 | 0);
                $92 = HEAP8[$91 >> 0] | 0;
                $93 = ($92 << 24 >> 24) == (0);
                L25: do {
                    if ($93) {
                        switch ($36 | 0) {
                            case 30: {
                                label = 18;
                                break L25;
                                break;
                            }
                            case 5: {
                                label = 19;
                                break L25;
                                break;
                            }
                            case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: {
                                $$31 = 1035;
                                break;
                            }
                            default: {
                                label = 32;
                                break L25;
                            }
                        }
                        STACKTOP = sp; return ($$31 | 0);
                    } else {
                        switch ($36 | 0) {
                            case 30: {
                                label = 18;
                                break;
                            }
                            case 5: {
                                label = 19;
                                break;
                            }
                            default: {
                                label = 32;
                            }
                        }
                    }
                } while (0);
                if ((label | 0) == 18) {
                    $94 = ((($8)) + 4100 | 0);
                    $95 = HEAP32[$94 >> 2] | 0;
                    $96 = ((($95)) + 32 | 0);
                    $97 = HEAP32[$96 >> 2] | 0;
                    $98 = ((($95)) + 36 | 0);
                    $99 = HEAP32[$98 >> 2] | 0;
                    $100 = Math_imul($97, $20) | 0;
                    $101 = (($100) + ($18)) | 0;
                    $102 = $101 << 4;
                    $103 = Math_imul($99, $20) | 0;
                    $104 = (($103) + ($18)) | 0;
                    $105 = ((($95)) + 16 | 0);
                    $106 = HEAP32[$105 >> 2] | 0;
                    $107 = (($106) + ($102) | 0);
                    $108 = ((($95)) + 20 | 0);
                    $109 = HEAP32[$108 >> 2] | 0;
                    $110 = ((($95)) + 24 | 0);
                    $111 = HEAP32[$110 >> 2] | 0;
                    $112 = ((($10)) + 24 | 0);
                    $113 = HEAP32[$112 >> 2] | 0;
                    $114 = (0 - ($113)) | 0;
                    $115 = $114 >> 3;
                    $116 = ((($8)) + 3908 | 0);
                    $117 = HEAP32[$116 >> 2] | 0;
                    $118 = (($117) + ($22 << 1) | 0);
                    HEAP16[$118 >> 1] = 512;
                    $119 = ((($10)) + 16 | 0);
                    $120 = HEAP32[$119 >> 2] | 0;
                    $121 = (-2 - ($115)) | 0;
                    $122 = (($120) + ($121) | 0);
                    HEAP32[$119 >> 2] = $122;
                    $123 = (254 - ($115)) | 0;
                    dest = $107; src = $122; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $124 = (($107) + ($97) | 0);
                    $125 = ((($122)) + 16 | 0);
                    dest = $124; src = $125; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $126 = (($124) + ($97) | 0);
                    $127 = ((($125)) + 16 | 0);
                    dest = $126; src = $127; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $128 = (($126) + ($97) | 0);
                    $129 = ((($127)) + 16 | 0);
                    dest = $128; src = $129; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $130 = (($128) + ($97) | 0);
                    $131 = ((($129)) + 16 | 0);
                    dest = $130; src = $131; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $132 = (($130) + ($97) | 0);
                    $133 = ((($131)) + 16 | 0);
                    dest = $132; src = $133; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $134 = (($132) + ($97) | 0);
                    $135 = ((($133)) + 16 | 0);
                    dest = $134; src = $135; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $136 = (($134) + ($97) | 0);
                    $137 = ((($135)) + 16 | 0);
                    dest = $136; src = $137; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $138 = (($136) + ($97) | 0);
                    $139 = ((($137)) + 16 | 0);
                    dest = $138; src = $139; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $140 = (($138) + ($97) | 0);
                    $141 = ((($139)) + 16 | 0);
                    dest = $140; src = $141; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $142 = (($140) + ($97) | 0);
                    $143 = ((($141)) + 16 | 0);
                    dest = $142; src = $143; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $144 = (($142) + ($97) | 0);
                    $145 = ((($143)) + 16 | 0);
                    dest = $144; src = $145; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $146 = (($144) + ($97) | 0);
                    $147 = ((($145)) + 16 | 0);
                    dest = $146; src = $147; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $148 = (($146) + ($97) | 0);
                    $149 = ((($147)) + 16 | 0);
                    dest = $148; src = $149; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $150 = (($148) + ($97) | 0);
                    $151 = ((($149)) + 16 | 0);
                    dest = $150; src = $151; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $152 = (($150) + ($97) | 0);
                    $153 = ((($151)) + 16 | 0);
                    dest = $152; src = $153; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                    $154 = $104 << 3;
                    $155 = (($109) + ($154) | 0);
                    $156 = (($111) + ($154) | 0);
                    $scevgep755 = (($120) + ($123) | 0);
                    $157 = $scevgep755;
                    $158 = $157;
                    $159 = HEAPU8[$158 >> 0] | (HEAPU8[$158 + 1 >> 0] << 8) | (HEAPU8[$158 + 2 >> 0] << 16) | (HEAPU8[$158 + 3 >> 0] << 24);
                    $160 = (($157) + 4) | 0;
                    $161 = $160;
                    $162 = HEAPU8[$161 >> 0] | (HEAPU8[$161 + 1 >> 0] << 8) | (HEAPU8[$161 + 2 >> 0] << 16) | (HEAPU8[$161 + 3 >> 0] << 24);
                    $163 = $155;
                    $164 = $163;
                    HEAP8[$164 >> 0] = $159 & 255; HEAP8[$164 + 1 >> 0] = ($159 >> 8) & 255; HEAP8[$164 + 2 >> 0] = ($159 >> 16) & 255; HEAP8[$164 + 3 >> 0] = $159 >> 24;
                    $165 = (($163) + 4) | 0;
                    $166 = $165;
                    HEAP8[$166 >> 0] = $162 & 255; HEAP8[$166 + 1 >> 0] = ($162 >> 8) & 255; HEAP8[$166 + 2 >> 0] = ($162 >> 16) & 255; HEAP8[$166 + 3 >> 0] = $162 >> 24;
                    $167 = (($155) + ($99) | 0);
                    $168 = ((($scevgep755)) + 8 | 0);
                    $169 = $168;
                    $170 = $169;
                    $171 = HEAPU8[$170 >> 0] | (HEAPU8[$170 + 1 >> 0] << 8) | (HEAPU8[$170 + 2 >> 0] << 16) | (HEAPU8[$170 + 3 >> 0] << 24);
                    $172 = (($169) + 4) | 0;
                    $173 = $172;
                    $174 = HEAPU8[$173 >> 0] | (HEAPU8[$173 + 1 >> 0] << 8) | (HEAPU8[$173 + 2 >> 0] << 16) | (HEAPU8[$173 + 3 >> 0] << 24);
                    $175 = $167;
                    $176 = $175;
                    HEAP8[$176 >> 0] = $171 & 255; HEAP8[$176 + 1 >> 0] = ($171 >> 8) & 255; HEAP8[$176 + 2 >> 0] = ($171 >> 16) & 255; HEAP8[$176 + 3 >> 0] = $171 >> 24;
                    $177 = (($175) + 4) | 0;
                    $178 = $177;
                    HEAP8[$178 >> 0] = $174 & 255; HEAP8[$178 + 1 >> 0] = ($174 >> 8) & 255; HEAP8[$178 + 2 >> 0] = ($174 >> 16) & 255; HEAP8[$178 + 3 >> 0] = $174 >> 24;
                    $179 = (($167) + ($99) | 0);
                    $180 = ((($168)) + 8 | 0);
                    $181 = $180;
                    $182 = $181;
                    $183 = HEAPU8[$182 >> 0] | (HEAPU8[$182 + 1 >> 0] << 8) | (HEAPU8[$182 + 2 >> 0] << 16) | (HEAPU8[$182 + 3 >> 0] << 24);
                    $184 = (($181) + 4) | 0;
                    $185 = $184;
                    $186 = HEAPU8[$185 >> 0] | (HEAPU8[$185 + 1 >> 0] << 8) | (HEAPU8[$185 + 2 >> 0] << 16) | (HEAPU8[$185 + 3 >> 0] << 24);
                    $187 = $179;
                    $188 = $187;
                    HEAP8[$188 >> 0] = $183 & 255; HEAP8[$188 + 1 >> 0] = ($183 >> 8) & 255; HEAP8[$188 + 2 >> 0] = ($183 >> 16) & 255; HEAP8[$188 + 3 >> 0] = $183 >> 24;
                    $189 = (($187) + 4) | 0;
                    $190 = $189;
                    HEAP8[$190 >> 0] = $186 & 255; HEAP8[$190 + 1 >> 0] = ($186 >> 8) & 255; HEAP8[$190 + 2 >> 0] = ($186 >> 16) & 255; HEAP8[$190 + 3 >> 0] = $186 >> 24;
                    $191 = (($179) + ($99) | 0);
                    $192 = ((($180)) + 8 | 0);
                    $193 = $192;
                    $194 = $193;
                    $195 = HEAPU8[$194 >> 0] | (HEAPU8[$194 + 1 >> 0] << 8) | (HEAPU8[$194 + 2 >> 0] << 16) | (HEAPU8[$194 + 3 >> 0] << 24);
                    $196 = (($193) + 4) | 0;
                    $197 = $196;
                    $198 = HEAPU8[$197 >> 0] | (HEAPU8[$197 + 1 >> 0] << 8) | (HEAPU8[$197 + 2 >> 0] << 16) | (HEAPU8[$197 + 3 >> 0] << 24);
                    $199 = $191;
                    $200 = $199;
                    HEAP8[$200 >> 0] = $195 & 255; HEAP8[$200 + 1 >> 0] = ($195 >> 8) & 255; HEAP8[$200 + 2 >> 0] = ($195 >> 16) & 255; HEAP8[$200 + 3 >> 0] = $195 >> 24;
                    $201 = (($199) + 4) | 0;
                    $202 = $201;
                    HEAP8[$202 >> 0] = $198 & 255; HEAP8[$202 + 1 >> 0] = ($198 >> 8) & 255; HEAP8[$202 + 2 >> 0] = ($198 >> 16) & 255; HEAP8[$202 + 3 >> 0] = $198 >> 24;
                    $203 = (($191) + ($99) | 0);
                    $204 = ((($192)) + 8 | 0);
                    $205 = $204;
                    $206 = $205;
                    $207 = HEAPU8[$206 >> 0] | (HEAPU8[$206 + 1 >> 0] << 8) | (HEAPU8[$206 + 2 >> 0] << 16) | (HEAPU8[$206 + 3 >> 0] << 24);
                    $208 = (($205) + 4) | 0;
                    $209 = $208;
                    $210 = HEAPU8[$209 >> 0] | (HEAPU8[$209 + 1 >> 0] << 8) | (HEAPU8[$209 + 2 >> 0] << 16) | (HEAPU8[$209 + 3 >> 0] << 24);
                    $211 = $203;
                    $212 = $211;
                    HEAP8[$212 >> 0] = $207 & 255; HEAP8[$212 + 1 >> 0] = ($207 >> 8) & 255; HEAP8[$212 + 2 >> 0] = ($207 >> 16) & 255; HEAP8[$212 + 3 >> 0] = $207 >> 24;
                    $213 = (($211) + 4) | 0;
                    $214 = $213;
                    HEAP8[$214 >> 0] = $210 & 255; HEAP8[$214 + 1 >> 0] = ($210 >> 8) & 255; HEAP8[$214 + 2 >> 0] = ($210 >> 16) & 255; HEAP8[$214 + 3 >> 0] = $210 >> 24;
                    $215 = (($203) + ($99) | 0);
                    $216 = ((($204)) + 8 | 0);
                    $217 = $216;
                    $218 = $217;
                    $219 = HEAPU8[$218 >> 0] | (HEAPU8[$218 + 1 >> 0] << 8) | (HEAPU8[$218 + 2 >> 0] << 16) | (HEAPU8[$218 + 3 >> 0] << 24);
                    $220 = (($217) + 4) | 0;
                    $221 = $220;
                    $222 = HEAPU8[$221 >> 0] | (HEAPU8[$221 + 1 >> 0] << 8) | (HEAPU8[$221 + 2 >> 0] << 16) | (HEAPU8[$221 + 3 >> 0] << 24);
                    $223 = $215;
                    $224 = $223;
                    HEAP8[$224 >> 0] = $219 & 255; HEAP8[$224 + 1 >> 0] = ($219 >> 8) & 255; HEAP8[$224 + 2 >> 0] = ($219 >> 16) & 255; HEAP8[$224 + 3 >> 0] = $219 >> 24;
                    $225 = (($223) + 4) | 0;
                    $226 = $225;
                    HEAP8[$226 >> 0] = $222 & 255; HEAP8[$226 + 1 >> 0] = ($222 >> 8) & 255; HEAP8[$226 + 2 >> 0] = ($222 >> 16) & 255; HEAP8[$226 + 3 >> 0] = $222 >> 24;
                    $227 = (($215) + ($99) | 0);
                    $228 = ((($216)) + 8 | 0);
                    $229 = $228;
                    $230 = $229;
                    $231 = HEAPU8[$230 >> 0] | (HEAPU8[$230 + 1 >> 0] << 8) | (HEAPU8[$230 + 2 >> 0] << 16) | (HEAPU8[$230 + 3 >> 0] << 24);
                    $232 = (($229) + 4) | 0;
                    $233 = $232;
                    $234 = HEAPU8[$233 >> 0] | (HEAPU8[$233 + 1 >> 0] << 8) | (HEAPU8[$233 + 2 >> 0] << 16) | (HEAPU8[$233 + 3 >> 0] << 24);
                    $235 = $227;
                    $236 = $235;
                    HEAP8[$236 >> 0] = $231 & 255; HEAP8[$236 + 1 >> 0] = ($231 >> 8) & 255; HEAP8[$236 + 2 >> 0] = ($231 >> 16) & 255; HEAP8[$236 + 3 >> 0] = $231 >> 24;
                    $237 = (($235) + 4) | 0;
                    $238 = $237;
                    HEAP8[$238 >> 0] = $234 & 255; HEAP8[$238 + 1 >> 0] = ($234 >> 8) & 255; HEAP8[$238 + 2 >> 0] = ($234 >> 16) & 255; HEAP8[$238 + 3 >> 0] = $234 >> 24;
                    $239 = (($227) + ($99) | 0);
                    $240 = ((($228)) + 8 | 0);
                    $241 = $240;
                    $242 = $241;
                    $243 = HEAPU8[$242 >> 0] | (HEAPU8[$242 + 1 >> 0] << 8) | (HEAPU8[$242 + 2 >> 0] << 16) | (HEAPU8[$242 + 3 >> 0] << 24);
                    $244 = (($241) + 4) | 0;
                    $245 = $244;
                    $246 = HEAPU8[$245 >> 0] | (HEAPU8[$245 + 1 >> 0] << 8) | (HEAPU8[$245 + 2 >> 0] << 16) | (HEAPU8[$245 + 3 >> 0] << 24);
                    $247 = $239;
                    $248 = $247;
                    HEAP8[$248 >> 0] = $243 & 255; HEAP8[$248 + 1 >> 0] = ($243 >> 8) & 255; HEAP8[$248 + 2 >> 0] = ($243 >> 16) & 255; HEAP8[$248 + 3 >> 0] = $243 >> 24;
                    $249 = (($247) + 4) | 0;
                    $250 = $249;
                    HEAP8[$250 >> 0] = $246 & 255; HEAP8[$250 + 1 >> 0] = ($246 >> 8) & 255; HEAP8[$250 + 2 >> 0] = ($246 >> 16) & 255; HEAP8[$250 + 3 >> 0] = $246 >> 24;
                    $scevgep = ((($scevgep755)) + 64 | 0);
                    $251 = $scevgep;
                    $252 = $251;
                    $253 = HEAPU8[$252 >> 0] | (HEAPU8[$252 + 1 >> 0] << 8) | (HEAPU8[$252 + 2 >> 0] << 16) | (HEAPU8[$252 + 3 >> 0] << 24);
                    $254 = (($251) + 4) | 0;
                    $255 = $254;
                    $256 = HEAPU8[$255 >> 0] | (HEAPU8[$255 + 1 >> 0] << 8) | (HEAPU8[$255 + 2 >> 0] << 16) | (HEAPU8[$255 + 3 >> 0] << 24);
                    $257 = $156;
                    $258 = $257;
                    HEAP8[$258 >> 0] = $253 & 255; HEAP8[$258 + 1 >> 0] = ($253 >> 8) & 255; HEAP8[$258 + 2 >> 0] = ($253 >> 16) & 255; HEAP8[$258 + 3 >> 0] = $253 >> 24;
                    $259 = (($257) + 4) | 0;
                    $260 = $259;
                    HEAP8[$260 >> 0] = $256 & 255; HEAP8[$260 + 1 >> 0] = ($256 >> 8) & 255; HEAP8[$260 + 2 >> 0] = ($256 >> 16) & 255; HEAP8[$260 + 3 >> 0] = $256 >> 24;
                    $261 = (($156) + ($99) | 0);
                    $262 = ((($scevgep)) + 8 | 0);
                    $263 = $262;
                    $264 = $263;
                    $265 = HEAPU8[$264 >> 0] | (HEAPU8[$264 + 1 >> 0] << 8) | (HEAPU8[$264 + 2 >> 0] << 16) | (HEAPU8[$264 + 3 >> 0] << 24);
                    $266 = (($263) + 4) | 0;
                    $267 = $266;
                    $268 = HEAPU8[$267 >> 0] | (HEAPU8[$267 + 1 >> 0] << 8) | (HEAPU8[$267 + 2 >> 0] << 16) | (HEAPU8[$267 + 3 >> 0] << 24);
                    $269 = $261;
                    $270 = $269;
                    HEAP8[$270 >> 0] = $265 & 255; HEAP8[$270 + 1 >> 0] = ($265 >> 8) & 255; HEAP8[$270 + 2 >> 0] = ($265 >> 16) & 255; HEAP8[$270 + 3 >> 0] = $265 >> 24;
                    $271 = (($269) + 4) | 0;
                    $272 = $271;
                    HEAP8[$272 >> 0] = $268 & 255; HEAP8[$272 + 1 >> 0] = ($268 >> 8) & 255; HEAP8[$272 + 2 >> 0] = ($268 >> 16) & 255; HEAP8[$272 + 3 >> 0] = $268 >> 24;
                    $273 = (($261) + ($99) | 0);
                    $274 = ((($262)) + 8 | 0);
                    $275 = $274;
                    $276 = $275;
                    $277 = HEAPU8[$276 >> 0] | (HEAPU8[$276 + 1 >> 0] << 8) | (HEAPU8[$276 + 2 >> 0] << 16) | (HEAPU8[$276 + 3 >> 0] << 24);
                    $278 = (($275) + 4) | 0;
                    $279 = $278;
                    $280 = HEAPU8[$279 >> 0] | (HEAPU8[$279 + 1 >> 0] << 8) | (HEAPU8[$279 + 2 >> 0] << 16) | (HEAPU8[$279 + 3 >> 0] << 24);
                    $281 = $273;
                    $282 = $281;
                    HEAP8[$282 >> 0] = $277 & 255; HEAP8[$282 + 1 >> 0] = ($277 >> 8) & 255; HEAP8[$282 + 2 >> 0] = ($277 >> 16) & 255; HEAP8[$282 + 3 >> 0] = $277 >> 24;
                    $283 = (($281) + 4) | 0;
                    $284 = $283;
                    HEAP8[$284 >> 0] = $280 & 255; HEAP8[$284 + 1 >> 0] = ($280 >> 8) & 255; HEAP8[$284 + 2 >> 0] = ($280 >> 16) & 255; HEAP8[$284 + 3 >> 0] = $280 >> 24;
                    $285 = (($273) + ($99) | 0);
                    $286 = ((($274)) + 8 | 0);
                    $287 = $286;
                    $288 = $287;
                    $289 = HEAPU8[$288 >> 0] | (HEAPU8[$288 + 1 >> 0] << 8) | (HEAPU8[$288 + 2 >> 0] << 16) | (HEAPU8[$288 + 3 >> 0] << 24);
                    $290 = (($287) + 4) | 0;
                    $291 = $290;
                    $292 = HEAPU8[$291 >> 0] | (HEAPU8[$291 + 1 >> 0] << 8) | (HEAPU8[$291 + 2 >> 0] << 16) | (HEAPU8[$291 + 3 >> 0] << 24);
                    $293 = $285;
                    $294 = $293;
                    HEAP8[$294 >> 0] = $289 & 255; HEAP8[$294 + 1 >> 0] = ($289 >> 8) & 255; HEAP8[$294 + 2 >> 0] = ($289 >> 16) & 255; HEAP8[$294 + 3 >> 0] = $289 >> 24;
                    $295 = (($293) + 4) | 0;
                    $296 = $295;
                    HEAP8[$296 >> 0] = $292 & 255; HEAP8[$296 + 1 >> 0] = ($292 >> 8) & 255; HEAP8[$296 + 2 >> 0] = ($292 >> 16) & 255; HEAP8[$296 + 3 >> 0] = $292 >> 24;
                    $297 = (($285) + ($99) | 0);
                    $298 = ((($286)) + 8 | 0);
                    $299 = $298;
                    $300 = $299;
                    $301 = HEAPU8[$300 >> 0] | (HEAPU8[$300 + 1 >> 0] << 8) | (HEAPU8[$300 + 2 >> 0] << 16) | (HEAPU8[$300 + 3 >> 0] << 24);
                    $302 = (($299) + 4) | 0;
                    $303 = $302;
                    $304 = HEAPU8[$303 >> 0] | (HEAPU8[$303 + 1 >> 0] << 8) | (HEAPU8[$303 + 2 >> 0] << 16) | (HEAPU8[$303 + 3 >> 0] << 24);
                    $305 = $297;
                    $306 = $305;
                    HEAP8[$306 >> 0] = $301 & 255; HEAP8[$306 + 1 >> 0] = ($301 >> 8) & 255; HEAP8[$306 + 2 >> 0] = ($301 >> 16) & 255; HEAP8[$306 + 3 >> 0] = $301 >> 24;
                    $307 = (($305) + 4) | 0;
                    $308 = $307;
                    HEAP8[$308 >> 0] = $304 & 255; HEAP8[$308 + 1 >> 0] = ($304 >> 8) & 255; HEAP8[$308 + 2 >> 0] = ($304 >> 16) & 255; HEAP8[$308 + 3 >> 0] = $304 >> 24;
                    $309 = (($297) + ($99) | 0);
                    $310 = ((($298)) + 8 | 0);
                    $311 = $310;
                    $312 = $311;
                    $313 = HEAPU8[$312 >> 0] | (HEAPU8[$312 + 1 >> 0] << 8) | (HEAPU8[$312 + 2 >> 0] << 16) | (HEAPU8[$312 + 3 >> 0] << 24);
                    $314 = (($311) + 4) | 0;
                    $315 = $314;
                    $316 = HEAPU8[$315 >> 0] | (HEAPU8[$315 + 1 >> 0] << 8) | (HEAPU8[$315 + 2 >> 0] << 16) | (HEAPU8[$315 + 3 >> 0] << 24);
                    $317 = $309;
                    $318 = $317;
                    HEAP8[$318 >> 0] = $313 & 255; HEAP8[$318 + 1 >> 0] = ($313 >> 8) & 255; HEAP8[$318 + 2 >> 0] = ($313 >> 16) & 255; HEAP8[$318 + 3 >> 0] = $313 >> 24;
                    $319 = (($317) + 4) | 0;
                    $320 = $319;
                    HEAP8[$320 >> 0] = $316 & 255; HEAP8[$320 + 1 >> 0] = ($316 >> 8) & 255; HEAP8[$320 + 2 >> 0] = ($316 >> 16) & 255; HEAP8[$320 + 3 >> 0] = $316 >> 24;
                    $321 = (($309) + ($99) | 0);
                    $322 = ((($310)) + 8 | 0);
                    $323 = $322;
                    $324 = $323;
                    $325 = HEAPU8[$324 >> 0] | (HEAPU8[$324 + 1 >> 0] << 8) | (HEAPU8[$324 + 2 >> 0] << 16) | (HEAPU8[$324 + 3 >> 0] << 24);
                    $326 = (($323) + 4) | 0;
                    $327 = $326;
                    $328 = HEAPU8[$327 >> 0] | (HEAPU8[$327 + 1 >> 0] << 8) | (HEAPU8[$327 + 2 >> 0] << 16) | (HEAPU8[$327 + 3 >> 0] << 24);
                    $329 = $321;
                    $330 = $329;
                    HEAP8[$330 >> 0] = $325 & 255; HEAP8[$330 + 1 >> 0] = ($325 >> 8) & 255; HEAP8[$330 + 2 >> 0] = ($325 >> 16) & 255; HEAP8[$330 + 3 >> 0] = $325 >> 24;
                    $331 = (($329) + 4) | 0;
                    $332 = $331;
                    HEAP8[$332 >> 0] = $328 & 255; HEAP8[$332 + 1 >> 0] = ($328 >> 8) & 255; HEAP8[$332 + 2 >> 0] = ($328 >> 16) & 255; HEAP8[$332 + 3 >> 0] = $328 >> 24;
                    $333 = (($321) + ($99) | 0);
                    $334 = ((($322)) + 8 | 0);
                    $335 = $334;
                    $336 = $335;
                    $337 = HEAPU8[$336 >> 0] | (HEAPU8[$336 + 1 >> 0] << 8) | (HEAPU8[$336 + 2 >> 0] << 16) | (HEAPU8[$336 + 3 >> 0] << 24);
                    $338 = (($335) + 4) | 0;
                    $339 = $338;
                    $340 = HEAPU8[$339 >> 0] | (HEAPU8[$339 + 1 >> 0] << 8) | (HEAPU8[$339 + 2 >> 0] << 16) | (HEAPU8[$339 + 3 >> 0] << 24);
                    $341 = $333;
                    $342 = $341;
                    HEAP8[$342 >> 0] = $337 & 255; HEAP8[$342 + 1 >> 0] = ($337 >> 8) & 255; HEAP8[$342 + 2 >> 0] = ($337 >> 16) & 255; HEAP8[$342 + 3 >> 0] = $337 >> 24;
                    $343 = (($341) + 4) | 0;
                    $344 = $343;
                    HEAP8[$344 >> 0] = $340 & 255; HEAP8[$344 + 1 >> 0] = ($340 >> 8) & 255; HEAP8[$344 + 2 >> 0] = ($340 >> 16) & 255; HEAP8[$344 + 3 >> 0] = $340 >> 24;
                    $345 = HEAP32[$119 >> 2] | 0;
                    $346 = ((($345)) + 384 | 0);
                    HEAP32[$119 >> 2] = $346;
                    $347 = ((($8)) + 3948 | 0);
                    $348 = HEAP32[$347 >> 2] | 0;
                    $349 = (($348) + ($22) | 0);
                    HEAP8[$349 >> 0] = 0;
                    $350 = ((($8)) + 3952 | 0);
                    $351 = HEAP32[$350 >> 2] | 0;
                    $352 = (((($351) + ($22 << 1) | 0)) + 1 | 0);
                    HEAP8[$352 >> 0] = 0;
                    $353 = HEAP32[$350 >> 2] | 0;
                    $354 = (($353) + ($22 << 1) | 0);
                    HEAP8[$354 >> 0] = 0;
                    ; HEAP32[$25 >> 2] = 269488144 | 0; HEAP32[$25 + 4 >> 2] = 269488144 | 0; HEAP32[$25 + 8 >> 2] = 269488144 | 0; HEAP32[$25 + 12 >> 2] = 269488144 | 0; HEAP32[$25 + 16 >> 2] = 269488144 | 0; HEAP32[$25 + 20 >> 2] = 269488144 | 0;
                    $355 = (__ZN7WelsDec12InitReadBitsEPN10WelsCommon15TagBitStringAuxEi($10, 0) | 0);
                    $$31 = $355;
                    STACKTOP = sp; return ($$31 | 0);
                }
                else if ((label | 0) == 19) {
                    $356 = ((($1)) + 15 | 0);
                    $357 = $356;
                    $358 = $357 & 15;
                    $359 = (0 - ($358)) | 0;
                    $360 = (($356) + ($359) | 0);
                    $361 = ((($8)) + 3908 | 0);
                    $362 = HEAP32[$361 >> 2] | 0;
                    $363 = (($362) + ($22 << 1) | 0);
                    HEAP16[$363 >> 1] = 1;
                    $364 = ((($0)) + 241928 | 0);
                    $365 = HEAP32[$364 >> 2] | 0;
                    $366 = ((($365)) + 184 | 0);
                    $367 = HEAP8[$366 >> 0] | 0;
                    $368 = ($367 << 24 >> 24) == (0);
                    if ($368) {
                        $$pre770 = ((($8)) + 3944 | 0);
                        $$pre$phi771Z2D = $$pre770;
                    } else {
                        $369 = ((($10)) + 20 | 0);
                        $370 = HEAP32[$369 >> 2] | 0;
                        $371 = $370 >>> 31;
                        $372 = ((($10)) + 4 | 0);
                        $373 = HEAP32[$372 >> 2] | 0;
                        $374 = HEAP32[$10 >> 2] | 0;
                        $375 = ((($10)) + 16 | 0);
                        $376 = HEAP32[$375 >> 2] | 0;
                        $377 = $370 << 1;
                        HEAP32[$369 >> 2] = $377;
                        $378 = ((($10)) + 24 | 0);
                        $379 = HEAP32[$378 >> 2] | 0;
                        $380 = (($379) + 1) | 0;
                        HEAP32[$378 >> 2] = $380;
                        $381 = ($379 | 0) > (-1);
                        $382 = $376;
                        do {
                            if ($381) {
                                $383 = (($376) - ($374)) | 0;
                                $384 = (($373) + 1) | 0;
                                $385 = (($384) - ($374)) | 0;
                                $386 = ($383 | 0) > ($385 | 0);
                                if (!($386)) {
                                    $387 = HEAP8[$382 >> 0] | 0;
                                    $388 = $387 & 255;
                                    $389 = $388 << 8;
                                    $390 = ((($382)) + 1 | 0);
                                    $391 = HEAP8[$390 >> 0] | 0;
                                    $392 = $391 & 255;
                                    $393 = $389 | $392;
                                    $394 = $393 << $380;
                                    $395 = $394 | $377;
                                    HEAP32[$369 >> 2] = $395;
                                    $396 = (($379) + -15) | 0;
                                    HEAP32[$378 >> 2] = $396;
                                    $397 = ((($382)) + 2 | 0);
                                    HEAP32[$375 >> 2] = $397;
                                    break;
                                }
                                $$31 = 11;
                                STACKTOP = sp; return ($$31 | 0);
                            }
                        } while (0);
                        HEAP32[$3 >> 2] = $371;
                        $398 = ((($8)) + 3944 | 0);
                        $399 = HEAP32[$398 >> 2] | 0;
                        $400 = (($399) + ($22) | 0);
                        $401 = $371 & 255;
                        HEAP8[$400 >> 0] = $401;
                        $402 = HEAP32[$398 >> 2] | 0;
                        $403 = (($402) + ($22) | 0);
                        $404 = HEAP8[$403 >> 0] | 0;
                        $405 = ($404 << 24 >> 24) == (0);
                        if ($405) {
                            $$pre$phi771Z2D = $398;
                        } else {
                            $406 = HEAP32[$361 >> 2] | 0;
                            $407 = (($406) + ($22 << 1) | 0);
                            HEAP16[$407 >> 1] = 4;
                            $$pre$phi771Z2D = $398;
                        }
                    }
                    $408 = HEAP32[$$pre$phi771Z2D >> 2] | 0;
                    $409 = (($408) + ($22) | 0);
                    $410 = HEAP8[$409 >> 0] | 0;
                    $411 = ($410 << 24 >> 24) == (0);
                    $412 = ((($0)) + 317148 | 0);
                    $413 = HEAP32[$412 >> 2] | 0;
                    FUNCTION_TABLE_viiii[$413 & 31]($2, $30, $360, $8);
                    if ($411) {
                        $414 = (__ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $360, $10, $8) | 0);
                        $415 = ($414 | 0) == (0);
                        if ($415) {
                            label = 30;
                        } else {
                            $$11 = $414;
                        }
                    } else {
                        $416 = (__ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $360, $10, $8) | 0);
                        $417 = ($416 | 0) == (0);
                        if ($417) {
                            label = 30;
                        } else {
                            $$11 = $416;
                        }
                    }
                    if ((label | 0) == 30) {
                        $$0596 = 0; $$0598 = 0; $$pre$phiZ2D = $361;
                        break;
                    }
                    $$31 = $$11;
                    STACKTOP = sp; return ($$31 | 0);
                }
                else if ((label | 0) == 32) {
                    $418 = ((($8)) + 3908 | 0);
                    $419 = HEAP32[$418 >> 2] | 0;
                    $420 = (($419) + ($22 << 1) | 0);
                    HEAP16[$420 >> 1] = 2;
                    $421 = ((($8)) + 3944 | 0);
                    $422 = HEAP32[$421 >> 2] | 0;
                    $423 = (($422) + ($22) | 0);
                    HEAP8[$423 >> 0] = 0;
                    $424 = ((($8)) + 3940 | 0);
                    $425 = HEAP32[$424 >> 2] | 0;
                    $426 = (($425) + ($22) | 0);
                    HEAP8[$426 >> 0] = 1;
                    $427 = (($36) + -6) | 0;
                    $428 = $427 & 3;
                    $429 = $428 & 255;
                    $430 = ((($8)) + 3992 | 0);
                    $431 = HEAP32[$430 >> 2] | 0;
                    $432 = (((($431) + ($22 << 3) | 0)) + 7 | 0);
                    HEAP8[$432 >> 0] = $429;
                    $433 = $427 >>> 2;
                    $434 = (25169 + ($433) | 0);
                    $435 = HEAP8[$434 >> 0] | 0;
                    $436 = ((($8)) + 3956 | 0);
                    $437 = HEAP32[$436 >> 2] | 0;
                    $438 = (($437) + ($22) | 0);
                    HEAP8[$438 >> 0] = $435;
                    $439 = HEAP32[$89 >> 2] | 0;
                    $440 = ((($439)) + 318 | 0);
                    $441 = HEAP8[$440 >> 0] | 0;
                    $442 = ($441 << 24 >> 24) == (0);
                    $$pre = HEAP32[$436 >> 2] | 0;
                    $$phi$trans$insert = (($$pre) + ($22) | 0);
                    $$pre757 = HEAP8[$$phi$trans$insert >> 0] | 0;
                    $443 = $$pre757 << 24 >> 24;
                    $444 = $443 >> 4;
                    $445 = $442 ? 0 : $444;
                    $446 = $$pre757 & 15;
                    $447 = $446 & 255;
                    __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($2, $30, $8);
                    $448 = (__ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $10, $8) | 0);
                    $449 = ($448 | 0) == (0);
                    if ($449) {
                        $$0596 = $447; $$0598 = $445; $$pre$phiZ2D = $418;
                        break;
                    } else {
                        $$31 = -1;
                    }
                    STACKTOP = sp; return ($$31 | 0);
                }
            }
        } while (0);
        $450 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $451 = (($450) + ($22 << 1) | 0);
        $452 = HEAP16[$451 >> 1] | 0;
        $453 = ($452 << 16 >> 16) == (2);
        do {
            if ($453) {
                $$pre768 = ((($8)) + 3956 | 0);
                $$1597 = $$0596; $$1599 = $$0598; $$pre$phi769Z2D = $$pre768;
            } else {
                $454 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($10, $3) | 0);
                $455 = ($454 | 0) == (0);
                if (!($455)) {
                    $$31 = $454;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $456 = HEAP32[$3 >> 2] | 0;
                $457 = ((($0)) + 241924 | 0);
                $458 = HEAP32[$457 >> 2] | 0;
                $459 = ((($458)) + 318 | 0);
                $460 = HEAP8[$459 >> 0] | 0;
                $461 = ($460 << 24 >> 24) != (0);
                $462 = ($456 >>> 0) > (47);
                $or$cond21 = $462 & $461;
                if ($or$cond21) {
                    $$31 = 1042;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $463 = ($460 << 24 >> 24) == (0);
                $464 = ($456 >>> 0) > (15);
                $or$cond23 = $464 & $463;
                if ($or$cond23) {
                    $$31 = 1042;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $465 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                $466 = (($465) + ($22 << 1) | 0);
                $467 = HEAP16[$466 >> 1] | 0;
                switch ($467 << 16 >> 16) {
                    case 4: case 1: {
                        $_ZN7WelsDec18g_kuiInterCbpTableE$sink = 15502; $_ZN7WelsDec21g_kuiInterCbpTable400E$sink = 15550;
                        break;
                    }
                    default: {
                        $_ZN7WelsDec18g_kuiInterCbpTableE$sink = 15566; $_ZN7WelsDec21g_kuiInterCbpTable400E$sink = 15614;
                    }
                }
                $468 = (($_ZN7WelsDec21g_kuiInterCbpTable400E$sink) + ($456) | 0);
                $469 = (($_ZN7WelsDec18g_kuiInterCbpTableE$sink) + ($456) | 0);
                $$sink25 = $461 ? $469 : $468;
                $470 = HEAP8[$$sink25 >> 0] | 0;
                $471 = ((($8)) + 3956 | 0);
                $472 = HEAP32[$471 >> 2] | 0;
                $473 = (($472) + ($22) | 0);
                HEAP8[$473 >> 0] = $470;
                $474 = HEAP32[$471 >> 2] | 0;
                $475 = (($474) + ($22) | 0);
                $476 = HEAP8[$475 >> 0] | 0;
                $477 = $476 << 24 >> 24;
                $478 = $477 >> 4;
                $479 = $477 & 15;
                $480 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                $481 = (($480) + ($22 << 1) | 0);
                $482 = HEAP16[$481 >> 1] | 0;
                $$off = (($482) + -8) << 16 >> 16;
                $483 = ($$off & 65535) < (25);
                if (!($483)) {
                    $484 = ((($8)) + 3940 | 0);
                    $485 = HEAP32[$484 >> 2] | 0;
                    $486 = (($485) + ($22) | 0);
                    $487 = HEAP8[$486 >> 0] | 0;
                    $488 = ($487 << 24 >> 24) == (0);
                    $489 = ($482 << 16 >> 16) == (4);
                    $or$cond = $488 | $489;
                    if ($or$cond) {
                        $$1597 = $479; $$1599 = $478; $$pre$phi769Z2D = $471;
                        break;
                    }
                }
                $490 = ($482 << 16 >> 16) != (1);
                $491 = ($479 | 0) != (0);
                $or$cond27 = $491 & $490;
                if ($or$cond27) {
                    $492 = ((($0)) + 241928 | 0);
                    $493 = HEAP32[$492 >> 2] | 0;
                    $494 = ((($493)) + 184 | 0);
                    $495 = HEAP8[$494 >> 0] | 0;
                    $496 = ($495 << 24 >> 24) == (0);
                    if ($496) {
                        $$1597 = $479; $$1599 = $478; $$pre$phi769Z2D = $471;
                    } else {
                        $497 = ((($10)) + 20 | 0);
                        $498 = HEAP32[$497 >> 2] | 0;
                        $499 = $498 >>> 31;
                        $500 = ((($10)) + 4 | 0);
                        $501 = HEAP32[$500 >> 2] | 0;
                        $502 = HEAP32[$10 >> 2] | 0;
                        $503 = ((($10)) + 16 | 0);
                        $504 = HEAP32[$503 >> 2] | 0;
                        $505 = $498 << 1;
                        HEAP32[$497 >> 2] = $505;
                        $506 = ((($10)) + 24 | 0);
                        $507 = HEAP32[$506 >> 2] | 0;
                        $508 = (($507) + 1) | 0;
                        HEAP32[$506 >> 2] = $508;
                        $509 = ($507 | 0) > (-1);
                        $510 = $504;
                        do {
                            if ($509) {
                                $511 = (($504) - ($502)) | 0;
                                $512 = (($501) + 1) | 0;
                                $513 = (($512) - ($502)) | 0;
                                $514 = ($511 | 0) > ($513 | 0);
                                if ($514) {
                                    $$31 = 11;
                                    STACKTOP = sp; return ($$31 | 0);
                                } else {
                                    $515 = HEAP8[$510 >> 0] | 0;
                                    $516 = $515 & 255;
                                    $517 = $516 << 8;
                                    $518 = ((($510)) + 1 | 0);
                                    $519 = HEAP8[$518 >> 0] | 0;
                                    $520 = $519 & 255;
                                    $521 = $517 | $520;
                                    $522 = $521 << $508;
                                    $523 = $522 | $505;
                                    HEAP32[$497 >> 2] = $523;
                                    $524 = (($507) + -15) | 0;
                                    HEAP32[$506 >> 2] = $524;
                                    $525 = ((($510)) + 2 | 0);
                                    HEAP32[$503 >> 2] = $525;
                                    break;
                                }
                            }
                        } while (0);
                        HEAP32[$3 >> 2] = $499;
                        $526 = ((($8)) + 3944 | 0);
                        $527 = HEAP32[$526 >> 2] | 0;
                        $528 = (($527) + ($22) | 0);
                        $529 = $499 & 255;
                        HEAP8[$528 >> 0] = $529;
                        $$1597 = $479; $$1599 = $478; $$pre$phi769Z2D = $471;
                    }
                } else {
                    $$1597 = $479; $$1599 = $478; $$pre$phi769Z2D = $471;
                }
            }
        } while (0);
        $530 = (((($24) + (($22 * 24) | 0) | 0)) + 4 | 0);
        $531 = (((($24) + (($22 * 24) | 0) | 0)) + 8 | 0);
        $532 = (((($24) + (($22 * 24) | 0) | 0)) + 12 | 0);
        $533 = (((($24) + (($22 * 24) | 0) | 0)) + 16 | 0);
        $534 = (((($24) + (($22 * 24) | 0) | 0)) + 20 | 0);
        ; HEAP32[$25 >> 2] = 0 | 0; HEAP32[$25 + 4 >> 2] = 0 | 0; HEAP32[$25 + 8 >> 2] = 0 | 0; HEAP32[$25 + 12 >> 2] = 0 | 0; HEAP32[$25 + 16 >> 2] = 0 | 0; HEAP32[$25 + 20 >> 2] = 0 | 0;
        $535 = HEAP32[$$pre$phi769Z2D >> 2] | 0;
        $536 = (($535) + ($22) | 0);
        $537 = HEAP8[$536 >> 0] | 0;
        $538 = ($537 << 24 >> 24) == (0);
        L82: do {
            if ($538) {
                $539 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                $540 = (($539) + ($22 << 1) | 0);
                $541 = HEAP16[$540 >> 1] | 0;
                switch ($541 << 16 >> 16) {
                    case 1024: case 2: {
                        break;
                    }
                    default: {
                        $542 = ((($8)) + 3868 | 0);
                        $543 = HEAP32[$542 >> 2] | 0;
                        $544 = $543 & 255;
                        $545 = ((($8)) + 3948 | 0);
                        $546 = HEAP32[$545 >> 2] | 0;
                        $547 = (($546) + ($22) | 0);
                        HEAP8[$547 >> 0] = $544;
                        $548 = ((($8)) + 92 | 0);
                        $549 = ((($8)) + 3952 | 0);
                        $550 = HEAP32[$545 >> 2] | 0;
                        $551 = (($550) + ($22) | 0);
                        $552 = HEAP8[$551 >> 0] | 0;
                        $553 = $552 << 24 >> 24;
                        $554 = HEAP32[$548 >> 2] | 0;
                        $555 = ((($554)) + 168 | 0);
                        $556 = HEAP32[$555 >> 2] | 0;
                        $557 = (($556) + ($553)) | 0;
                        $558 = ($557 | 0) < (51);
                        $$648 = $558 ? $557 : 51;
                        $559 = ($557 | 0) > (0);
                        $560 = $559 ? $$648 : 0;
                        $561 = (10899 + ($560) | 0);
                        $562 = HEAP8[$561 >> 0] | 0;
                        $563 = HEAP32[$549 >> 2] | 0;
                        $564 = (($563) + ($22 << 1) | 0);
                        HEAP8[$564 >> 0] = $562;
                        $565 = HEAP32[$545 >> 2] | 0;
                        $566 = (($565) + ($22) | 0);
                        $567 = HEAP8[$566 >> 0] | 0;
                        $568 = $567 << 24 >> 24;
                        $569 = HEAP32[$548 >> 2] | 0;
                        $570 = ((($569)) + 172 | 0);
                        $571 = HEAP32[$570 >> 2] | 0;
                        $572 = (($571) + ($568)) | 0;
                        $573 = ($572 | 0) < (51);
                        $$648$1 = $573 ? $572 : 51;
                        $574 = ($572 | 0) > (0);
                        $575 = $574 ? $$648$1 : 0;
                        $576 = (10899 + ($575) | 0);
                        $577 = HEAP8[$576 >> 0] | 0;
                        $578 = HEAP32[$549 >> 2] | 0;
                        $579 = (((($578) + ($22 << 1) | 0)) + 1 | 0);
                        HEAP8[$579 >> 0] = $577;
                        $$pre758 = HEAP32[$$pre$phi769Z2D >> 2] | 0;
                        $$phi$trans$insert759 = (($$pre758) + ($22) | 0);
                        $$pre760 = HEAP8[$$phi$trans$insert759 >> 0] | 0;
                        $580 = ($$pre760 << 24 >> 24) == (0);
                        if (!($580)) {
                            break L82;
                        }
                    }
                }
                $581 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                $582 = (($581) + ($22 << 1) | 0);
                $583 = HEAP16[$582 >> 1] | 0;
                $584 = ($583 << 16 >> 16) == (2);
                if (!($584)) {
                    $$31 = 0;
                    STACKTOP = sp; return ($$31 | 0);
                }
            }
        } while (0);
        $585 = ((($8)) + 3988 | 0);
        $586 = HEAP32[$585 >> 2] | 0;
        $587 = (($586) + (($22 * 768) | 0) | 0);
        _memset(($587 | 0), 0, 768) | 0;
        $588 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_565($10, $1) | 0);
        $589 = ($588 | 0) == (0);
        if (!($589)) {
            $$31 = $588;
            STACKTOP = sp; return ($$31 | 0);
        }
        $590 = HEAP32[$1 >> 2] | 0;
        $591 = $590 & 1;
        $592 = ($591 | 0) == (0);
        $593 = $590 >>> 1;
        $594 = (0 - ($593)) | 0;
        $595 = (($590) + 1) | 0;
        $596 = $595 >>> 1;
        $storemerge$i = $592 ? $594 : $596;
        $$off628 = (($storemerge$i) + 26) | 0;
        $597 = ($$off628 >>> 0) > (51);
        if ($597) {
            $$31 = 1027;
            STACKTOP = sp; return ($$31 | 0);
        }
        $598 = ((($8)) + 3868 | 0);
        $599 = HEAP32[$598 >> 2] | 0;
        $600 = (($storemerge$i) + 52) | 0;
        $601 = (($600) + ($599)) | 0;
        $602 = (($601 | 0) % 52) & -1;
        $603 = $602 & 255;
        $604 = ((($8)) + 3948 | 0);
        $605 = HEAP32[$604 >> 2] | 0;
        $606 = (($605) + ($22) | 0);
        HEAP8[$606 >> 0] = $603;
        $607 = HEAP32[$604 >> 2] | 0;
        $608 = (($607) + ($22) | 0);
        $609 = HEAP8[$608 >> 0] | 0;
        $610 = $609 << 24 >> 24;
        HEAP32[$598 >> 2] = $610;
        $611 = ((($8)) + 92 | 0);
        $612 = ((($8)) + 3952 | 0);
        $613 = HEAP32[$611 >> 2] | 0;
        $614 = ((($613)) + 168 | 0);
        $615 = HEAP32[$614 >> 2] | 0;
        $616 = (($615) + ($610)) | 0;
        $617 = ($616 | 0) < (51);
        $$650 = $617 ? $616 : 51;
        $618 = ($616 | 0) > (0);
        $619 = $618 ? $$650 : 0;
        $620 = (10899 + ($619) | 0);
        $621 = HEAP8[$620 >> 0] | 0;
        $622 = HEAP32[$612 >> 2] | 0;
        $623 = (($622) + ($22 << 1) | 0);
        HEAP8[$623 >> 0] = $621;
        $624 = HEAP32[$598 >> 2] | 0;
        $625 = HEAP32[$611 >> 2] | 0;
        $626 = ((($625)) + 172 | 0);
        $627 = HEAP32[$626 >> 2] | 0;
        $628 = (($627) + ($624)) | 0;
        $629 = ($628 | 0) < (51);
        $$650$1 = $629 ? $628 : 51;
        $630 = ($628 | 0) > (0);
        $631 = $630 ? $$650$1 : 0;
        $632 = (10899 + ($631) | 0);
        $633 = HEAP8[$632 >> 0] | 0;
        $634 = HEAP32[$612 >> 2] | 0;
        $635 = (((($634) + ($22 << 1) | 0)) + 1 | 0);
        HEAP8[$635 >> 0] = $633;
        __ZN7WelsDec12BsStartCavlcEPN10WelsCommon15TagBitStringAuxE($10);
        $636 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $637 = (($636) + ($22 << 1) | 0);
        $638 = HEAP16[$637 >> 1] | 0;
        $639 = ($638 << 16 >> 16) == (2);
        L96: do {
            if ($639) {
                $640 = HEAP32[$585 >> 2] | 0;
                $641 = (($640) + (($22 * 768) | 0) | 0);
                $642 = HEAP32[$604 >> 2] | 0;
                $643 = (($642) + ($22) | 0);
                $644 = HEAP8[$643 >> 0] | 0;
                $645 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 0, 16, 15482, 1, $641, $644, $0) | 0);
                $646 = ($645 | 0) == (0);
                if (!($646)) {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $647 = ($$1597 | 0) == (0);
                if (!($647)) {
                    $648 = ($13 >>> 0) > (1);
                    $649 = $648 ? $13 : 1;
                    $650 = (($16) + 1) | 0;
                    $651 = (($650) - ($649)) | 0;
                    $652 = (26970 + ($649) | 0);
                    $$2592723 = 0;
                    while (1) {
                        $655 = HEAP32[$585 >> 2] | 0;
                        $656 = $$2592723 << 4;
                        $657 = ((($655) + (($22 * 768) | 0) | 0) + ($656 << 1) | 0);
                        $658 = HEAP32[$604 >> 2] | 0;
                        $659 = (($658) + ($22) | 0);
                        $660 = HEAP8[$659 >> 0] | 0;
                        $661 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, $$2592723, $651, $652, 2, $657, $660, $0) | 0);
                        $662 = ($661 | 0) == (0);
                        if (!($662)) {
                            $$31 = -1;
                            break;
                        }
                        $653 = (($$2592723) + 1) | 0;
                        $654 = ($$2592723 | 0) < (15);
                        if ($654) {
                            $$2592723 = $653;
                        } else {
                            label = 76;
                            break L96;
                        }
                    }
                    STACKTOP = sp; return ($$31 | 0);
                }
            } else {
                $663 = ((($8)) + 3944 | 0);
                $664 = HEAP32[$663 >> 2] | 0;
                $665 = (($664) + ($22) | 0);
                $666 = HEAP8[$665 >> 0] | 0;
                $667 = ($666 << 24 >> 24) == (0);
                $668 = (1 - ($13)) | 0;
                $669 = (($668) + ($16)) | 0;
                if ($667) {
                    $671 = (26970 + ($13) | 0);
                    $$1589726 = 0; $708 = $638;
                    while (1) {
                        $707 = $708 & 519;
                        $709 = ($707 << 16 >> 16) != (0);
                        $710 = $709 ? 11 : 12;
                        $711 = 1 << $$1589726;
                        $712 = $711 & $$1597;
                        $713 = ($712 | 0) == (0);
                        $714 = $$1589726 << 2;
                        if ($713) {
                            $732 = (15458 + ($714) | 0);
                            $733 = HEAP8[$732 >> 0] | 0;
                            $734 = $733 & 255;
                            $735 = (($30) + ($734) | 0);
                            HEAP8[$735 >> 0] = 0 & 255; HEAP8[$735 + 1 >> 0] = 0 >> 8;
                            $736 = $714 | 2;
                            $737 = (15458 + ($736) | 0);
                            $738 = HEAP8[$737 >> 0] | 0;
                            $739 = $738 & 255;
                            $740 = (($30) + ($739) | 0);
                            HEAP8[$740 >> 0] = 0 & 255; HEAP8[$740 + 1 >> 0] = 0 >> 8;
                        } else {
                            $715 = HEAP32[$585 >> 2] | 0;
                            $716 = $$1589726 << 6;
                            $717 = ((($715) + (($22 * 768) | 0) | 0) + ($716 << 1) | 0);
                            $718 = HEAP32[$604 >> 2] | 0;
                            $719 = (($718) + ($22) | 0);
                            $720 = HEAP8[$719 >> 0] | 0;
                            $721 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, $714, $669, $671, $710, $717, $720, $0) | 0);
                            $722 = ($721 | 0) == (0);
                            if (!($722)) {
                                $$31 = -1;
                                label = 84;
                                break;
                            }
                            $723 = $714 | 1;
                            $724 = HEAP32[$585 >> 2] | 0;
                            $725 = $723 << 4;
                            $726 = ((($724) + (($22 * 768) | 0) | 0) + ($725 << 1) | 0);
                            $727 = HEAP32[$604 >> 2] | 0;
                            $728 = (($727) + ($22) | 0);
                            $729 = HEAP8[$728 >> 0] | 0;
                            $730 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, $723, $669, $671, $710, $726, $729, $0) | 0);
                            $731 = ($730 | 0) == (0);
                            if (!($731)) {
                                $$31 = -1;
                                label = 84;
                                break;
                            }
                            $857 = (($723) + 1) | 0;
                            $858 = HEAP32[$585 >> 2] | 0;
                            $859 = $857 << 4;
                            $860 = ((($858) + (($22 * 768) | 0) | 0) + ($859 << 1) | 0);
                            $861 = HEAP32[$604 >> 2] | 0;
                            $862 = (($861) + ($22) | 0);
                            $863 = HEAP8[$862 >> 0] | 0;
                            $864 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, $857, $669, $671, $710, $860, $863, $0) | 0);
                            $865 = ($864 | 0) == (0);
                            if (!($865)) {
                                $$31 = -1;
                                label = 84;
                                break;
                            }
                            $866 = $714 | 3;
                            $867 = HEAP32[$585 >> 2] | 0;
                            $868 = $866 << 4;
                            $869 = ((($867) + (($22 * 768) | 0) | 0) + ($868 << 1) | 0);
                            $870 = HEAP32[$604 >> 2] | 0;
                            $871 = (($870) + ($22) | 0);
                            $872 = HEAP8[$871 >> 0] | 0;
                            $873 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, $866, $669, $671, $710, $869, $872, $0) | 0);
                            $874 = ($873 | 0) == (0);
                            if (!($874)) {
                                $$31 = -1;
                                label = 84;
                                break;
                            }
                        }
                        $741 = ($$1589726 | 0) < (3);
                        if (!($741)) {
                            label = 76;
                            break L96;
                        }
                        $742 = (($$1589726) + 1) | 0;
                        $$pre764 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                        $$phi$trans$insert765 = (($$pre764) + ($22 << 1) | 0);
                        $$pre766 = HEAP16[$$phi$trans$insert765 >> 1] | 0;
                        $$1589726 = $742; $708 = $$pre766;
                    }
                    if ((label | 0) == 84) {
                        STACKTOP = sp; return ($$31 | 0);
                    }
                } else {
                    $670 = (26986 + ($13) | 0);
                    $$0588729 = 0; $673 = $638;
                    while (1) {
                        $672 = $673 & 519;
                        $674 = ($672 << 16 >> 16) != (0);
                        $675 = $674 ? 11 : 12;
                        $676 = 1 << $$0588729;
                        $677 = $676 & $$1597;
                        $678 = ($677 | 0) == (0);
                        $679 = $$0588729 << 2;
                        if ($678) {
                            $696 = (15458 + ($679) | 0);
                            $697 = HEAP8[$696 >> 0] | 0;
                            $698 = $697 & 255;
                            $699 = (($30) + ($698) | 0);
                            HEAP8[$699 >> 0] = 0 & 255; HEAP8[$699 + 1 >> 0] = 0 >> 8;
                            $700 = $679 | 2;
                            $701 = (15458 + ($700) | 0);
                            $702 = HEAP8[$701 >> 0] | 0;
                            $703 = $702 & 255;
                            $704 = (($30) + ($703) | 0);
                            HEAP8[$704 >> 0] = 0 & 255; HEAP8[$704 + 1 >> 0] = 0 >> 8;
                        } else {
                            $680 = $$0588729 << 6;
                            $681 = HEAP32[$585 >> 2] | 0;
                            $682 = ((($681) + (($22 * 768) | 0) | 0) + ($680 << 1) | 0);
                            $683 = HEAP32[$604 >> 2] | 0;
                            $684 = (($683) + ($22) | 0);
                            $685 = HEAP8[$684 >> 0] | 0;
                            $686 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($6, $30, $10, $679, $669, $670, $675, $682, 0, $685, $0) | 0);
                            $687 = ($686 | 0) == (0);
                            if (!($687)) {
                                $$31 = -1;
                                label = 84;
                                break;
                            }
                            $688 = $679 | 1;
                            $689 = HEAP32[$585 >> 2] | 0;
                            $690 = ((($689) + (($22 * 768) | 0) | 0) + ($680 << 1) | 0);
                            $691 = HEAP32[$604 >> 2] | 0;
                            $692 = (($691) + ($22) | 0);
                            $693 = HEAP8[$692 >> 0] | 0;
                            $694 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($6, $30, $10, $688, $669, $670, $675, $690, 1, $693, $0) | 0);
                            $695 = ($694 | 0) == (0);
                            if (!($695)) {
                                $$31 = -1;
                                label = 84;
                                break;
                            }
                            $875 = (($688) + 1) | 0;
                            $876 = HEAP32[$585 >> 2] | 0;
                            $877 = ((($876) + (($22 * 768) | 0) | 0) + ($680 << 1) | 0);
                            $878 = HEAP32[$604 >> 2] | 0;
                            $879 = (($878) + ($22) | 0);
                            $880 = HEAP8[$879 >> 0] | 0;
                            $881 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($6, $30, $10, $875, $669, $670, $675, $877, 2, $880, $0) | 0);
                            $882 = ($881 | 0) == (0);
                            if (!($882)) {
                                $$31 = -1;
                                label = 84;
                                break;
                            }
                            $883 = $679 | 3;
                            $884 = HEAP32[$585 >> 2] | 0;
                            $885 = ((($884) + (($22 * 768) | 0) | 0) + ($680 << 1) | 0);
                            $886 = HEAP32[$604 >> 2] | 0;
                            $887 = (($886) + ($22) | 0);
                            $888 = HEAP8[$887 >> 0] | 0;
                            $889 = (__ZN7WelsDec25WelsResidualBlockCavlc8x8EPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPsihPNS_21TagWelsDecoderContextE($6, $30, $10, $883, $669, $670, $675, $885, 3, $888, $0) | 0);
                            $890 = ($889 | 0) == (0);
                            if (!($890)) {
                                $$31 = -1;
                                label = 84;
                                break;
                            }
                        }
                        $705 = ($$0588729 | 0) < (3);
                        if (!($705)) {
                            label = 76;
                            break L96;
                        }
                        $706 = (($$0588729) + 1) | 0;
                        $$pre761 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                        $$phi$trans$insert762 = (($$pre761) + ($22 << 1) | 0);
                        $$pre763 = HEAP16[$$phi$trans$insert762 >> 1] | 0;
                        $$0588729 = $706; $673 = $$pre763;
                    }
                    if ((label | 0) == 84) {
                        STACKTOP = sp; return ($$31 | 0);
                    }
                }
            }
        } while (0);
        if ((label | 0) == 76) {
            $743 = ((($30)) + 9 | 0);
            $744 = HEAPU8[$743 >> 0] | (HEAPU8[$743 + 1 >> 0] << 8) | (HEAPU8[$743 + 2 >> 0] << 16) | (HEAPU8[$743 + 3 >> 0] << 24);
            HEAP32[$25 >> 2] = $744;
            $745 = ((($30)) + 17 | 0);
            $746 = HEAPU8[$745 >> 0] | (HEAPU8[$745 + 1 >> 0] << 8) | (HEAPU8[$745 + 2 >> 0] << 16) | (HEAPU8[$745 + 3 >> 0] << 24);
            HEAP32[$530 >> 2] = $746;
            $747 = ((($30)) + 25 | 0);
            $748 = HEAPU8[$747 >> 0] | (HEAPU8[$747 + 1 >> 0] << 8) | (HEAPU8[$747 + 2 >> 0] << 16) | (HEAPU8[$747 + 3 >> 0] << 24);
            HEAP32[$531 >> 2] = $748;
            $$sink35$in$in = ((($30)) + 33 | 0);
            $$sink35 = HEAPU8[$$sink35$in$in >> 0] | (HEAPU8[$$sink35$in$in + 1 >> 0] << 8) | (HEAPU8[$$sink35$in$in + 2 >> 0] << 16) | (HEAPU8[$$sink35$in$in + 3 >> 0] << 24);
            HEAP32[$532 >> 2] = $$sink35;
        }
        $749 = ($$1599 | 0) == (2);
        $750 = (($$1599) + -1) | 0;
        $751 = ($750 >>> 0) < (2);
        if ($751) {
            $752 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $753 = (($752) + ($22 << 1) | 0);
            $754 = HEAP16[$753 >> 1] | 0;
            $755 = $754 & 519;
            $756 = ($755 << 16 >> 16) == (0);
            $$0600 = $756 ? 13 : 7;
            $757 = HEAP32[$585 >> 2] | 0;
            $758 = (((($757) + (($22 * 768) | 0) | 0)) + 512 | 0);
            $759 = HEAP32[$612 >> 2] | 0;
            $760 = (($759) + ($22 << 1) | 0);
            $761 = HEAP8[$760 >> 0] | 0;
            $762 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 16, 4, 15498, $$0600, $758, $761, $0) | 0);
            $763 = ($762 | 0) == (0);
            if (!($763)) {
                $$31 = -1;
                STACKTOP = sp; return ($$31 | 0);
            }
            $764 = HEAP32[$$pre$phiZ2D >> 2] | 0;
            $765 = (($764) + ($22 << 1) | 0);
            $766 = HEAP16[$765 >> 1] | 0;
            $767 = $766 & 519;
            $768 = ($767 << 16 >> 16) == (0);
            $$0600$1 = $768 ? 14 : 8;
            $769 = HEAP32[$585 >> 2] | 0;
            $770 = (((($769) + (($22 * 768) | 0) | 0)) + 640 | 0);
            $771 = HEAP32[$612 >> 2] | 0;
            $772 = (((($771) + ($22 << 1) | 0)) + 1 | 0);
            $773 = HEAP8[$772 >> 0] | 0;
            $774 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 20, 4, 15498, $$0600$1, $770, $773, $0) | 0);
            $775 = ($774 | 0) == (0);
            if (!($775)) {
                $$31 = -1;
                STACKTOP = sp; return ($$31 | 0);
            }
        }
        do {
            if ($749) {
                $776 = ($13 >>> 0) > (1);
                $777 = $776 ? $13 : 1;
                $778 = (($16) + 1) | 0;
                $779 = (($778) - ($777)) | 0;
                $780 = (26970 + ($777) | 0);
                $781 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                $782 = (($781) + ($22 << 1) | 0);
                $783 = HEAP16[$782 >> 1] | 0;
                $784 = $783 & 519;
                $785 = ($784 << 16 >> 16) == (0);
                $$1601 = $785 ? 15 : 9;
                $786 = HEAP32[$585 >> 2] | 0;
                $787 = (((($786) + (($22 * 768) | 0) | 0)) + 512 | 0);
                $788 = HEAP32[$612 >> 2] | 0;
                $789 = (($788) + ($22 << 1) | 0);
                $790 = HEAP8[$789 >> 0] | 0;
                $791 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 16, $779, $780, $$1601, $787, $790, $0) | 0);
                $792 = ($791 | 0) == (0);
                if (!($792)) {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $793 = HEAP32[$585 >> 2] | 0;
                $794 = (((($793) + (($22 * 768) | 0) | 0)) + 544 | 0);
                $795 = HEAP32[$612 >> 2] | 0;
                $796 = (($795) + ($22 << 1) | 0);
                $797 = HEAP8[$796 >> 0] | 0;
                $798 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 17, $779, $780, $$1601, $794, $797, $0) | 0);
                $799 = ($798 | 0) == (0);
                if (!($799)) {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $800 = HEAP32[$585 >> 2] | 0;
                $801 = (((($800) + (($22 * 768) | 0) | 0)) + 576 | 0);
                $802 = HEAP32[$612 >> 2] | 0;
                $803 = (($802) + ($22 << 1) | 0);
                $804 = HEAP8[$803 >> 0] | 0;
                $805 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 18, $779, $780, $$1601, $801, $804, $0) | 0);
                $806 = ($805 | 0) == (0);
                if (!($806)) {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $807 = HEAP32[$585 >> 2] | 0;
                $808 = (((($807) + (($22 * 768) | 0) | 0)) + 608 | 0);
                $809 = HEAP32[$612 >> 2] | 0;
                $810 = (($809) + ($22 << 1) | 0);
                $811 = HEAP8[$810 >> 0] | 0;
                $812 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 19, $779, $780, $$1601, $808, $811, $0) | 0);
                $813 = ($812 | 0) == (0);
                if (!($813)) {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $814 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                $815 = (($814) + ($22 << 1) | 0);
                $816 = HEAP16[$815 >> 1] | 0;
                $817 = $816 & 519;
                $818 = ($817 << 16 >> 16) == (0);
                $$1601$1 = $818 ? 16 : 10;
                $819 = HEAP32[$585 >> 2] | 0;
                $820 = (((($819) + (($22 * 768) | 0) | 0)) + 640 | 0);
                $821 = HEAP32[$612 >> 2] | 0;
                $822 = (((($821) + ($22 << 1) | 0)) + 1 | 0);
                $823 = HEAP8[$822 >> 0] | 0;
                $824 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 20, $779, $780, $$1601$1, $820, $823, $0) | 0);
                $825 = ($824 | 0) == (0);
                if (!($825)) {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $826 = HEAP32[$585 >> 2] | 0;
                $827 = (((($826) + (($22 * 768) | 0) | 0)) + 672 | 0);
                $828 = HEAP32[$612 >> 2] | 0;
                $829 = (((($828) + ($22 << 1) | 0)) + 1 | 0);
                $830 = HEAP8[$829 >> 0] | 0;
                $831 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 21, $779, $780, $$1601$1, $827, $830, $0) | 0);
                $832 = ($831 | 0) == (0);
                if (!($832)) {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $833 = HEAP32[$585 >> 2] | 0;
                $834 = (((($833) + (($22 * 768) | 0) | 0)) + 704 | 0);
                $835 = HEAP32[$612 >> 2] | 0;
                $836 = (((($835) + ($22 << 1) | 0)) + 1 | 0);
                $837 = HEAP8[$836 >> 0] | 0;
                $838 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 22, $779, $780, $$1601$1, $834, $837, $0) | 0);
                $839 = ($838 | 0) == (0);
                if (!($839)) {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
                $840 = HEAP32[$585 >> 2] | 0;
                $841 = (((($840) + (($22 * 768) | 0) | 0)) + 736 | 0);
                $842 = HEAP32[$612 >> 2] | 0;
                $843 = (((($842) + ($22 << 1) | 0)) + 1 | 0);
                $844 = HEAP8[$843 >> 0] | 0;
                $845 = (__ZN7WelsDec22WelsResidualBlockCavlcEPNS_11TagVlcTableEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($6, $30, $10, 23, $779, $780, $$1601$1, $841, $844, $0) | 0);
                $846 = ($845 | 0) == (0);
                if ($846) {
                    $847 = ((($30)) + 14 | 0);
                    $848 = HEAP16[$847 >> 1] | 0;
                    HEAP16[$533 >> 1] = $848;
                    $849 = ((($30)) + 22 | 0);
                    $850 = HEAP16[$849 >> 1] | 0;
                    HEAP16[$534 >> 1] = $850;
                    $851 = ((($30)) + 38 | 0);
                    $852 = HEAP16[$851 >> 1] | 0;
                    $853 = (((($24) + (($22 * 24) | 0) | 0)) + 18 | 0);
                    HEAP16[$853 >> 1] = $852;
                    $854 = ((($30)) + 46 | 0);
                    $855 = HEAP16[$854 >> 1] | 0;
                    $856 = (((($24) + (($22 * 24) | 0) | 0)) + 22 | 0);
                    HEAP16[$856 >> 1] = $855;
                    break;
                } else {
                    $$31 = -1;
                    STACKTOP = sp; return ($$31 | 0);
                }
            }
        } while (0);
        __ZN7WelsDec10BsEndCavlcEPN10WelsCommon15TagBitStringAuxE($10);
        $$31 = 0;
        STACKTOP = sp; return ($$31 | 0);
    }
    function __ZN7WelsDec18WelsFillCacheInterEPNS_16TagNeighborAvailEPhPA30_A2_sPA30_aPNS_10TagDqLayerE($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$ = 0, $$0 = 0, $$0126 = 0, $$0128 = 0, $$sink$sink = 0, $$sink12 = 0, $$sink132 = 0, $$sink6 = 0, $$sink7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
        var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
        var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
        var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
        var $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        $5 = ((($4)) + 4040 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($0, $1, $4);
        $7 = HEAP32[$0 >> 2] | 0;
        $8 = ($7 | 0) == (0);
        if ($8) {
            $$0128 = 0;
        } else {
            $9 = ((($4)) + 4044 | 0);
            $10 = HEAP32[$9 >> 2] | 0;
            $11 = (($6) - ($10)) | 0;
            $$0128 = $11;
        }
        $12 = ((($0)) + 4 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ($13 | 0) == (0);
        $15 = (($6) + -1) | 0;
        $$ = $14 ? 0 : $15;
        $16 = ((($0)) + 12 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ($17 | 0) == (0);
        if ($18) {
            $$0126 = 0;
        } else {
            $19 = ((($4)) + 4044 | 0);
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = (($15) - ($20)) | 0;
            $$0126 = $21;
        }
        $22 = ((($0)) + 8 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = ($23 | 0) == (0);
        if ($24) {
            $$0 = 0;
        } else {
            $25 = ((($4)) + 4044 | 0);
            $26 = (($6) + 1) | 0;
            $27 = HEAP32[$25 >> 2] | 0;
            $28 = (($26) - ($27)) | 0;
            $$0 = $28;
        }
        if ($14) {
            label = 10;
        } else {
            $29 = ((($0)) + 16 | 0);
            $30 = HEAP32[$29 >> 2] | 0;
            $31 = $30 & 504;
            $32 = ($31 | 0) == (0);
            if ($32) {
                label = 10;
            } else {
                $33 = ((($4)) + 3916 | 0);
                $34 = HEAP32[$33 >> 2] | 0;
                $35 = (((($34) + ($$ << 6) | 0)) + 12 | 0);
                $36 = HEAPU8[$35 >> 0] | (HEAPU8[$35 + 1 >> 0] << 8) | (HEAPU8[$35 + 2 >> 0] << 16) | (HEAPU8[$35 + 3 >> 0] << 24);
                $37 = ((($2)) + 24 | 0);
                HEAP8[$37 >> 0] = $36 & 255; HEAP8[$37 + 1 >> 0] = ($36 >> 8) & 255; HEAP8[$37 + 2 >> 0] = ($36 >> 16) & 255; HEAP8[$37 + 3 >> 0] = $36 >> 24;
                $38 = HEAP32[$33 >> 2] | 0;
                $39 = (((($38) + ($$ << 6) | 0)) + 28 | 0);
                $40 = HEAPU8[$39 >> 0] | (HEAPU8[$39 + 1 >> 0] << 8) | (HEAPU8[$39 + 2 >> 0] << 16) | (HEAPU8[$39 + 3 >> 0] << 24);
                $41 = ((($2)) + 48 | 0);
                HEAP8[$41 >> 0] = $40 & 255; HEAP8[$41 + 1 >> 0] = ($40 >> 8) & 255; HEAP8[$41 + 2 >> 0] = ($40 >> 16) & 255; HEAP8[$41 + 3 >> 0] = $40 >> 24;
                $42 = HEAP32[$33 >> 2] | 0;
                $43 = (((($42) + ($$ << 6) | 0)) + 44 | 0);
                $44 = HEAPU8[$43 >> 0] | (HEAPU8[$43 + 1 >> 0] << 8) | (HEAPU8[$43 + 2 >> 0] << 16) | (HEAPU8[$43 + 3 >> 0] << 24);
                $45 = ((($2)) + 72 | 0);
                HEAP8[$45 >> 0] = $44 & 255; HEAP8[$45 + 1 >> 0] = ($44 >> 8) & 255; HEAP8[$45 + 2 >> 0] = ($44 >> 16) & 255; HEAP8[$45 + 3 >> 0] = $44 >> 24;
                $46 = HEAP32[$33 >> 2] | 0;
                $47 = (((($46) + ($$ << 6) | 0)) + 60 | 0);
                $48 = HEAPU8[$47 >> 0] | (HEAPU8[$47 + 1 >> 0] << 8) | (HEAPU8[$47 + 2 >> 0] << 16) | (HEAPU8[$47 + 3 >> 0] << 24);
                $49 = ((($2)) + 96 | 0);
                HEAP8[$49 >> 0] = $48 & 255; HEAP8[$49 + 1 >> 0] = ($48 >> 8) & 255; HEAP8[$49 + 2 >> 0] = ($48 >> 16) & 255; HEAP8[$49 + 3 >> 0] = $48 >> 24;
                $50 = ((($4)) + 3932 | 0);
                $51 = HEAP32[$50 >> 2] | 0;
                $52 = (((($51) + ($$ << 4) | 0)) + 3 | 0);
                $53 = HEAP8[$52 >> 0] | 0;
                $54 = ((($3)) + 6 | 0);
                HEAP8[$54 >> 0] = $53;
                $55 = HEAP32[$50 >> 2] | 0;
                $56 = (((($55) + ($$ << 4) | 0)) + 7 | 0);
                $57 = HEAP8[$56 >> 0] | 0;
                $58 = ((($3)) + 12 | 0);
                HEAP8[$58 >> 0] = $57;
                $59 = HEAP32[$50 >> 2] | 0;
                $60 = (((($59) + ($$ << 4) | 0)) + 11 | 0);
                $61 = HEAP8[$60 >> 0] | 0;
                $62 = ((($3)) + 18 | 0);
                HEAP8[$62 >> 0] = $61;
                $63 = HEAP32[$50 >> 2] | 0;
                $64 = (((($63) + ($$ << 4) | 0)) + 15 | 0);
                $65 = HEAP8[$64 >> 0] | 0;
                $$sink$sink = $65; $$sink6 = 24;
            }
        }
        do {
            if ((label | 0) == 10) {
                $66 = ((($2)) + 24 | 0);
                HEAP8[$66 >> 0] = 0 & 255; HEAP8[$66 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$66 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$66 + 3 >> 0] = 0 >> 24;
                $67 = ((($2)) + 48 | 0);
                HEAP8[$67 >> 0] = 0 & 255; HEAP8[$67 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$67 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$67 + 3 >> 0] = 0 >> 24;
                $68 = ((($2)) + 72 | 0);
                HEAP8[$68 >> 0] = 0 & 255; HEAP8[$68 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$68 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$68 + 3 >> 0] = 0 >> 24;
                $69 = ((($2)) + 96 | 0);
                HEAP8[$69 >> 0] = 0 & 255; HEAP8[$69 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$69 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$69 + 3 >> 0] = 0 >> 24;
                $70 = HEAP32[$12 >> 2] | 0;
                $71 = ($70 | 0) == (0);
                $72 = ((($3)) + 24 | 0);
                if ($71) {
                    HEAP8[$72 >> 0] = -2;
                    $73 = ((($3)) + 18 | 0);
                    HEAP8[$73 >> 0] = -2;
                    $74 = ((($3)) + 12 | 0);
                    HEAP8[$74 >> 0] = -2;
                    $$sink$sink = -2; $$sink6 = 6;
                    break;
                } else {
                    HEAP8[$72 >> 0] = -1;
                    $75 = ((($3)) + 18 | 0);
                    HEAP8[$75 >> 0] = -1;
                    $76 = ((($3)) + 12 | 0);
                    HEAP8[$76 >> 0] = -1;
                    $$sink$sink = -1; $$sink6 = 6;
                    break;
                }
            }
        } while (0);
        $77 = (($3) + ($$sink6) | 0);
        HEAP8[$77 >> 0] = $$sink$sink;
        $78 = HEAP32[$16 >> 2] | 0;
        $79 = ($78 | 0) == (0);
        if ($79) {
            label = 16;
        } else {
            $80 = ((($0)) + 24 | 0);
            $81 = HEAP32[$80 >> 2] | 0;
            $82 = $81 & 504;
            $83 = ($82 | 0) == (0);
            if ($83) {
                label = 16;
            } else {
                $84 = ((($4)) + 3916 | 0);
                $85 = HEAP32[$84 >> 2] | 0;
                $86 = (((($85) + ($$0126 << 6) | 0)) + 60 | 0);
                $87 = HEAPU8[$86 >> 0] | (HEAPU8[$86 + 1 >> 0] << 8) | (HEAPU8[$86 + 2 >> 0] << 16) | (HEAPU8[$86 + 3 >> 0] << 24);
                HEAP8[$2 >> 0] = $87 & 255; HEAP8[$2 + 1 >> 0] = ($87 >> 8) & 255; HEAP8[$2 + 2 >> 0] = ($87 >> 16) & 255; HEAP8[$2 + 3 >> 0] = $87 >> 24;
                $88 = ((($4)) + 3932 | 0);
                $89 = HEAP32[$88 >> 2] | 0;
                $90 = (((($89) + ($$0126 << 4) | 0)) + 15 | 0);
                $91 = HEAP8[$90 >> 0] | 0;
                HEAP8[$3 >> 0] = $91;
            }
        }
        if ((label | 0) == 16) {
            HEAP8[$2 >> 0] = 0 & 255; HEAP8[$2 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$2 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$2 + 3 >> 0] = 0 >> 24;
            $92 = HEAP32[$16 >> 2] | 0;
            $93 = ($92 | 0) == (0);
            $$sink7 = $93 ? -2 : -1;
            HEAP8[$3 >> 0] = $$sink7;
        }
        $94 = HEAP32[$0 >> 2] | 0;
        $95 = ($94 | 0) == (0);
        if ($95) {
            label = 20;
        } else {
            $96 = ((($0)) + 20 | 0);
            $97 = HEAP32[$96 >> 2] | 0;
            $98 = $97 & 504;
            $99 = ($98 | 0) == (0);
            if ($99) {
                label = 20;
            } else {
                $100 = ((($4)) + 3916 | 0);
                $101 = HEAP32[$100 >> 2] | 0;
                $102 = (((($101) + ($$0128 << 6) | 0)) + 48 | 0);
                $103 = $102;
                $104 = $103;
                $105 = HEAPU8[$104 >> 0] | (HEAPU8[$104 + 1 >> 0] << 8) | (HEAPU8[$104 + 2 >> 0] << 16) | (HEAPU8[$104 + 3 >> 0] << 24);
                $106 = (($103) + 4) | 0;
                $107 = $106;
                $108 = HEAPU8[$107 >> 0] | (HEAPU8[$107 + 1 >> 0] << 8) | (HEAPU8[$107 + 2 >> 0] << 16) | (HEAPU8[$107 + 3 >> 0] << 24);
                $109 = ((($2)) + 4 | 0);
                $110 = $109;
                $111 = $110;
                HEAP8[$111 >> 0] = $105 & 255; HEAP8[$111 + 1 >> 0] = ($105 >> 8) & 255; HEAP8[$111 + 2 >> 0] = ($105 >> 16) & 255; HEAP8[$111 + 3 >> 0] = $105 >> 24;
                $112 = (($110) + 4) | 0;
                $113 = $112;
                HEAP8[$113 >> 0] = $108 & 255; HEAP8[$113 + 1 >> 0] = ($108 >> 8) & 255; HEAP8[$113 + 2 >> 0] = ($108 >> 16) & 255; HEAP8[$113 + 3 >> 0] = $108 >> 24;
                $114 = HEAP32[$100 >> 2] | 0;
                $115 = (((($114) + ($$0128 << 6) | 0)) + 56 | 0);
                $116 = $115;
                $117 = $116;
                $118 = HEAPU8[$117 >> 0] | (HEAPU8[$117 + 1 >> 0] << 8) | (HEAPU8[$117 + 2 >> 0] << 16) | (HEAPU8[$117 + 3 >> 0] << 24);
                $119 = (($116) + 4) | 0;
                $120 = $119;
                $121 = HEAPU8[$120 >> 0] | (HEAPU8[$120 + 1 >> 0] << 8) | (HEAPU8[$120 + 2 >> 0] << 16) | (HEAPU8[$120 + 3 >> 0] << 24);
                $122 = ((($2)) + 12 | 0);
                $123 = $122;
                $124 = $123;
                HEAP8[$124 >> 0] = $118 & 255; HEAP8[$124 + 1 >> 0] = ($118 >> 8) & 255; HEAP8[$124 + 2 >> 0] = ($118 >> 16) & 255; HEAP8[$124 + 3 >> 0] = $118 >> 24;
                $125 = (($123) + 4) | 0;
                $126 = $125;
                HEAP8[$126 >> 0] = $121 & 255; HEAP8[$126 + 1 >> 0] = ($121 >> 8) & 255; HEAP8[$126 + 2 >> 0] = ($121 >> 16) & 255; HEAP8[$126 + 3 >> 0] = $121 >> 24;
                $127 = ((($4)) + 3932 | 0);
                $128 = HEAP32[$127 >> 2] | 0;
                $129 = (((($128) + ($$0128 << 4) | 0)) + 12 | 0);
                $130 = HEAPU8[$129 >> 0] | (HEAPU8[$129 + 1 >> 0] << 8) | (HEAPU8[$129 + 2 >> 0] << 16) | (HEAPU8[$129 + 3 >> 0] << 24);
                $131 = ((($3)) + 1 | 0);
                HEAP8[$131 >> 0] = $130 & 255; HEAP8[$131 + 1 >> 0] = ($130 >> 8) & 255; HEAP8[$131 + 2 >> 0] = ($130 >> 16) & 255; HEAP8[$131 + 3 >> 0] = $130 >> 24;
            }
        }
        if ((label | 0) == 20) {
            $132 = ((($2)) + 4 | 0);
            dest = $132; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 0 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            $133 = HEAP32[$0 >> 2] | 0;
            $134 = ($133 | 0) == (0);
            $$sink132 = $134 ? -2 : -1;
            $135 = ((($3)) + 1 | 0);
            _memset(($135 | 0), ($$sink132 | 0), 4) | 0;
        }
        $136 = HEAP32[$22 >> 2] | 0;
        $137 = ($136 | 0) == (0);
        if (!($137)) {
            $138 = ((($0)) + 28 | 0);
            $139 = HEAP32[$138 >> 2] | 0;
            $140 = $139 & 504;
            $141 = ($140 | 0) == (0);
            if (!($141)) {
                $142 = ((($4)) + 3916 | 0);
                $143 = HEAP32[$142 >> 2] | 0;
                $144 = (((($143) + ($$0 << 6) | 0)) + 48 | 0);
                $145 = HEAPU8[$144 >> 0] | (HEAPU8[$144 + 1 >> 0] << 8) | (HEAPU8[$144 + 2 >> 0] << 16) | (HEAPU8[$144 + 3 >> 0] << 24);
                $146 = ((($2)) + 20 | 0);
                HEAP8[$146 >> 0] = $145 & 255; HEAP8[$146 + 1 >> 0] = ($145 >> 8) & 255; HEAP8[$146 + 2 >> 0] = ($145 >> 16) & 255; HEAP8[$146 + 3 >> 0] = $145 >> 24;
                $147 = ((($4)) + 3932 | 0);
                $148 = HEAP32[$147 >> 2] | 0;
                $149 = (((($148) + ($$0 << 4) | 0)) + 12 | 0);
                $150 = HEAP8[$149 >> 0] | 0;
                $151 = ((($3)) + 5 | 0);
                HEAP8[$151 >> 0] = $150;
                $156 = ((($2)) + 36 | 0);
                HEAP8[$156 >> 0] = 0 & 255; HEAP8[$156 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$156 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$156 + 3 >> 0] = 0 >> 24;
                $157 = ((($2)) + 84 | 0);
                HEAP8[$157 >> 0] = 0 & 255; HEAP8[$157 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$157 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$157 + 3 >> 0] = 0 >> 24;
                $158 = ((($2)) + 44 | 0);
                HEAP8[$158 >> 0] = 0 & 255; HEAP8[$158 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$158 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$158 + 3 >> 0] = 0 >> 24;
                $159 = ((($2)) + 68 | 0);
                HEAP8[$159 >> 0] = 0 & 255; HEAP8[$159 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$159 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$159 + 3 >> 0] = 0 >> 24;
                $160 = ((($2)) + 92 | 0);
                HEAP8[$160 >> 0] = 0 & 255; HEAP8[$160 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$160 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$160 + 3 >> 0] = 0 >> 24;
                $161 = ((($3)) + 23 | 0);
                HEAP8[$161 >> 0] = -2;
                $162 = ((($3)) + 17 | 0);
                HEAP8[$162 >> 0] = -2;
                $163 = ((($3)) + 11 | 0);
                HEAP8[$163 >> 0] = -2;
                $164 = ((($3)) + 21 | 0);
                HEAP8[$164 >> 0] = -2;
                $165 = ((($3)) + 9 | 0);
                HEAP8[$165 >> 0] = -2;
                return;
            }
        }
        $152 = ((($2)) + 20 | 0);
        HEAP8[$152 >> 0] = 0 & 255; HEAP8[$152 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$152 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$152 + 3 >> 0] = 0 >> 24;
        $153 = HEAP32[$22 >> 2] | 0;
        $154 = ($153 | 0) == (0);
        $155 = ((($3)) + 5 | 0);
        $$sink12 = $154 ? -2 : -1;
        HEAP8[$155 >> 0] = $$sink12;
        $156 = ((($2)) + 36 | 0);
        HEAP8[$156 >> 0] = 0 & 255; HEAP8[$156 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$156 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$156 + 3 >> 0] = 0 >> 24;
        $157 = ((($2)) + 84 | 0);
        HEAP8[$157 >> 0] = 0 & 255; HEAP8[$157 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$157 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$157 + 3 >> 0] = 0 >> 24;
        $158 = ((($2)) + 44 | 0);
        HEAP8[$158 >> 0] = 0 & 255; HEAP8[$158 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$158 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$158 + 3 >> 0] = 0 >> 24;
        $159 = ((($2)) + 68 | 0);
        HEAP8[$159 >> 0] = 0 & 255; HEAP8[$159 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$159 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$159 + 3 >> 0] = 0 >> 24;
        $160 = ((($2)) + 92 | 0);
        HEAP8[$160 >> 0] = 0 & 255; HEAP8[$160 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$160 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$160 + 3 >> 0] = 0 >> 24;
        $161 = ((($3)) + 23 | 0);
        HEAP8[$161 >> 0] = -2;
        $162 = ((($3)) + 17 | 0);
        HEAP8[$162 >> 0] = -2;
        $163 = ((($3)) + 11 | 0);
        HEAP8[$163 >> 0] = -2;
        $164 = ((($3)) + 21 | 0);
        HEAP8[$164 >> 0] = -2;
        $165 = ((($3)) + 9 | 0);
        HEAP8[$165 >> 0] = -2;
        return;
    }
    function __ZN7WelsDec14ParseInterInfoEPNS_21TagWelsDecoderContextEPA30_A2_sPA30_aPN10WelsCommon15TagBitStringAuxE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0440684 = 0, $$0441 = 0, $$37 = 0, $$38$ph = 0, $$39 = 0, $$491 = 0, $$8438686783 = 0, $$9439685 = 0, $$in = 0, $$lcssa = 0, $$lcssa704 = 0, $$lcssa706 = 0, $$lcssa709 = 0, $$phi$trans$insert = 0, $$phi$trans$insert730 = 0, $$phi$trans$insert732 = 0, $$pre = 0, $$pre729 = 0, $$pre731 = 0, $$pre733 = 0;
        var $$pre734 = 0, $$pre736 = 0, $$pre738 = 0, $$pre739 = 0, $$pre741 = 0, $$pre743 = 0, $$pre745 = 0, $$sink = 0, $$sink$i = 0, $$sink$i523 = 0, $$sink$sink$sink = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0;
        var $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0;
        var $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0;
        var $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0;
        var $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0;
        var $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0;
        var $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
        var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
        var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
        var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
        var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
        var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
        var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
        var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
        var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
        var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
        var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
        var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
        var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
        var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
        var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
        var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
        var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
        var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
        var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
        var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
        var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
        var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
        var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
        var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
        var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
        var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
        var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
        var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
        var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
        var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
        var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
        var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
        var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
        var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
        var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
        var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
        var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
        var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
        var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
        var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
        var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
        var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
        var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
        var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
        var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
        var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond = 0, $cond689 = 0, $or$cond = 0, $or$cond476 = 0;
        var $or$cond479 = 0, $or$cond479$1 = 0, $or$cond483 = 0, $or$cond483$1 = 0, $or$cond486 = 0, $or$cond486$1 = 0, $or$cond490 = 0, $or$cond490$1 = 0, $or$cond495 = 0, $or$cond499 = 0, $sext = 0, $sext465 = 0, $sext466 = 0, $sext467 = 0, $sext469 = 0, $sext469$1 = 0, $sext470 = 0, $sext470$1 = 0, $sext471 = 0, $storemerge = 0;
        var $storemerge$i = 0, $storemerge$i500 = 0, $storemerge$i503 = 0, $storemerge$i508 = 0, $storemerge$i515 = 0, $storemerge$i515$1 = 0, $storemerge$i518 = 0, $storemerge$i518$1 = 0, $storemerge$i531 = 0, $storemerge$i531$1 = 0, $storemerge$i534 = 0, $storemerge$i534$1 = 0, $storemerge757 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0;
        var $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 160 | 0;
        $vararg_buffer21 = sp + 72 | 0;
        $vararg_buffer18 = sp + 64 | 0;
        $vararg_buffer15 = sp + 56 | 0;
        $vararg_buffer13 = sp + 48 | 0;
        $vararg_buffer10 = sp + 40 | 0;
        $vararg_buffer8 = sp + 32 | 0;
        $vararg_buffer5 = sp + 24 | 0;
        $vararg_buffer3 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $4 = sp + 152 | 0;
        $5 = sp + 136 | 0;
        $6 = sp + 156 | 0;
        $7 = sp + 128 | 0;
        $8 = sp + 112 | 0;
        $9 = sp + 96 | 0;
        $10 = sp + 80 | 0;
        $11 = sp + 76 | 0;
        $12 = ((($0)) + 241932 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ((($13)) + 4040 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ((($13)) + 88 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ((($17)) + 828 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ((($19)) + 24 | 0);
        $21 = HEAP16[$20 >> 1] | 0;
        $22 = ((($19)) + 26 | 0);
        $23 = HEAP16[$22 >> 1] | 0;
        $24 = ((($13)) + 3859 | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 & 255;
        $27 = ((($5)) + 12 | 0);
        HEAP32[$27 >> 2] = $26;
        $28 = ((($5)) + 8 | 0);
        HEAP32[$28 >> 2] = $26;
        $29 = ((($5)) + 4 | 0);
        HEAP32[$29 >> 2] = $26;
        HEAP32[$5 >> 2] = $26;
        $30 = ((($13)) + 52 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = ((($13)) + 3908 | 0);
        $33 = HEAP32[$32 >> 2] | 0;
        $34 = (($33) + ($15 << 1) | 0);
        $35 = HEAP16[$34 >> 1] | 0;
        $36 = $35 << 16 >> 16;
        switch ($36 | 0) {
            case 8: {
                $37 = ((($13)) + 3858 | 0);
                $38 = HEAP8[$37 >> 0] | 0;
                $39 = ($38 << 24 >> 24) == (0);
                if ($39) {
                    $69 = $26;
                } else {
                    $40 = ((($3)) + 20 | 0);
                    $41 = HEAP32[$40 >> 2] | 0;
                    $42 = $41 >>> 31;
                    $43 = ((($3)) + 4 | 0);
                    $44 = HEAP32[$43 >> 2] | 0;
                    $45 = HEAP32[$3 >> 2] | 0;
                    $46 = ((($3)) + 16 | 0);
                    $47 = HEAP32[$46 >> 2] | 0;
                    $48 = $41 << 1;
                    HEAP32[$40 >> 2] = $48;
                    $49 = ((($3)) + 24 | 0);
                    $50 = HEAP32[$49 >> 2] | 0;
                    $51 = (($50) + 1) | 0;
                    HEAP32[$49 >> 2] = $51;
                    $52 = ($50 | 0) > (-1);
                    $53 = $47;
                    do {
                        if ($52) {
                            $54 = (($47) - ($45)) | 0;
                            $55 = (($44) + 1) | 0;
                            $56 = (($55) - ($45)) | 0;
                            $57 = ($54 | 0) > ($56 | 0);
                            if ($57) {
                                $$39 = 11;
                                STACKTOP = sp; return ($$39 | 0);
                            } else {
                                $58 = HEAP8[$53 >> 0] | 0;
                                $59 = $58 & 255;
                                $60 = $59 << 8;
                                $61 = ((($53)) + 1 | 0);
                                $62 = HEAP8[$61 >> 0] | 0;
                                $63 = $62 & 255;
                                $64 = $60 | $63;
                                $65 = $64 << $51;
                                $66 = $65 | $48;
                                HEAP32[$40 >> 2] = $66;
                                $67 = (($50) + -15) | 0;
                                HEAP32[$49 >> 2] = $67;
                                $68 = ((($53)) + 2 | 0);
                                HEAP32[$46 >> 2] = $68;
                                break;
                            }
                        }
                    } while (0);
                    HEAP32[$7 >> 2] = $42;
                    HEAP32[$5 >> 2] = $42;
                    $69 = $42;
                }
                $70 = ($69 | 0) == (0);
                if (!($70)) {
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25537, $vararg_buffer);
                    $$39 = 459814;
                    STACKTOP = sp; return ($$39 | 0);
                }
                L16: do {
                    switch ($31 | 0) {
                        case 1: {
                            $$sink$i = 0;
                            label = 15;
                            break;
                        }
                        case 2: {
                            $71 = ((($3)) + 20 | 0);
                            $72 = HEAP32[$71 >> 2] | 0;
                            $73 = $72 >>> 31;
                            $74 = ((($3)) + 4 | 0);
                            $75 = HEAP32[$74 >> 2] | 0;
                            $76 = HEAP32[$3 >> 2] | 0;
                            $77 = ((($3)) + 16 | 0);
                            $78 = HEAP32[$77 >> 2] | 0;
                            $79 = $72 << 1;
                            HEAP32[$71 >> 2] = $79;
                            $80 = ((($3)) + 24 | 0);
                            $81 = HEAP32[$80 >> 2] | 0;
                            $82 = (($81) + 1) | 0;
                            HEAP32[$80 >> 2] = $82;
                            $83 = ($81 | 0) > (-1);
                            $84 = $78;
                            do {
                                if ($83) {
                                    $85 = (($78) - ($76)) | 0;
                                    $86 = (($75) + 1) | 0;
                                    $87 = (($86) - ($76)) | 0;
                                    $88 = ($85 | 0) > ($87 | 0);
                                    if ($88) {
                                        $$39 = 11;
                                        STACKTOP = sp; return ($$39 | 0);
                                    } else {
                                        $89 = HEAP8[$84 >> 0] | 0;
                                        $90 = $89 & 255;
                                        $91 = $90 << 8;
                                        $92 = ((($84)) + 1 | 0);
                                        $93 = HEAP8[$92 >> 0] | 0;
                                        $94 = $93 & 255;
                                        $95 = $91 | $94;
                                        $96 = $95 << $82;
                                        $97 = $96 | $79;
                                        HEAP32[$71 >> 2] = $97;
                                        $98 = (($81) + -15) | 0;
                                        HEAP32[$80 >> 2] = $98;
                                        $99 = ((($84)) + 2 | 0);
                                        HEAP32[$77 >> 2] = $99;
                                        break;
                                    }
                                }
                            } while (0);
                            HEAP32[$7 >> 2] = $73;
                            $100 = $73 ^ 1;
                            $$sink$i = $100;
                            label = 15;
                            break;
                        }
                        default: {
                            $101 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                            $102 = ($101 | 0) == (0);
                            if ($102) {
                                $$pre745 = HEAP32[$7 >> 2] | 0;
                                $103 = $$pre745;
                                break L16;
                            } else {
                                $$39 = $101;
                                STACKTOP = sp; return ($$39 | 0);
                            }
                        }
                    }
                } while (0);
                if ((label | 0) == 15) {
                    HEAP32[$7 >> 2] = $$sink$i;
                    $103 = $$sink$i;
                }
                $104 = ($103 | 0) > (-1);
                $105 = ($103 | 0) < ($31 | 0);
                $or$cond = $104 & $105;
                if ($or$cond) {
                    $106 = (((($0)) + 5468 | 0) + ($103 << 2) | 0);
                    $107 = HEAP32[$106 >> 2] | 0;
                    $108 = ($107 | 0) == (0 | 0);
                    if ($108) {
                        label = 18;
                    } else {
                        $$0441 = $103;
                    }
                } else {
                    label = 18;
                }
                do {
                    if ((label | 0) == 18) {
                        $109 = ((($0)) + 512344 | 0);
                        HEAP8[$109 >> 0] = 1;
                        $110 = ((($0)) + 242340 | 0);
                        $111 = HEAP32[$110 >> 2] | 0;
                        $112 = ($111 | 0) == (0);
                        if ($112) {
                            $$39 = 1041;
                            STACKTOP = sp; return ($$39 | 0);
                        } else {
                            $113 = ((($0)) + 116 | 0);
                            $114 = HEAP32[$113 >> 2] | 0;
                            $115 = $114 | 4;
                            HEAP32[$113 >> 2] = $115;
                            $$0441 = 0;
                            break;
                        }
                    }
                } while (0);
                $116 = ((($0)) + 512345 | 0);
                $117 = HEAP8[$116 >> 0] | 0;
                $118 = ($117 << 24 >> 24) == (0);
                $119 = ((($0)) + 512344 | 0);
                if ($118) {
                    $120 = HEAP8[$119 >> 0] | 0;
                    $121 = ($120 << 24 >> 24) == (0);
                    if ($121) {
                        $122 = (((($0)) + 5468 | 0) + ($$0441 << 2) | 0);
                        $123 = HEAP32[$122 >> 2] | 0;
                        $124 = ($123 | 0) == (0 | 0);
                        if ($124) {
                            $128 = 1;
                        } else {
                            $125 = ((($123)) + 72 | 0);
                            $126 = HEAP8[$125 >> 0] | 0;
                            $127 = $126 ^ 1;
                            $128 = $127;
                        }
                    } else {
                        $128 = 1;
                    }
                } else {
                    $128 = 1;
                }
                HEAP8[$119 >> 0] = $128;
                $129 = $$0441 & 255;
                __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($1, $2, 0, 4, $129, $6);
                $130 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                $131 = ($130 | 0) == (0);
                if (!($131)) {
                    $$39 = $130;
                    STACKTOP = sp; return ($$39 | 0);
                }
                $132 = HEAP32[$4 >> 2] | 0;
                $133 = $132 & 1;
                $134 = ($133 | 0) == (0);
                $135 = $132 >>> 1;
                $136 = (0 - ($135)) | 0;
                $137 = (($132) + 1) | 0;
                $138 = $137 >>> 1;
                $storemerge$i500 = $134 ? $136 : $138;
                $139 = HEAP16[$6 >> 1] | 0;
                $140 = $139 & 65535;
                $141 = (($storemerge$i500) + ($140)) | 0;
                $142 = $141 & 65535;
                HEAP16[$6 >> 1] = $142;
                $143 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                $144 = ($143 | 0) == (0);
                if (!($144)) {
                    $$39 = $143;
                    STACKTOP = sp; return ($$39 | 0);
                }
                $145 = HEAP32[$4 >> 2] | 0;
                $146 = $145 & 1;
                $147 = ($146 | 0) == (0);
                $148 = $145 >>> 1;
                $149 = (0 - ($148)) | 0;
                $150 = (($145) + 1) | 0;
                $151 = $150 >>> 1;
                $storemerge$i503 = $147 ? $149 : $151;
                $152 = ((($6)) + 2 | 0);
                $153 = HEAP16[$152 >> 1] | 0;
                $154 = $153 & 65535;
                $155 = (($storemerge$i503) + ($154)) | 0;
                $156 = $155 & 65535;
                HEAP16[$152 >> 1] = $156;
                $sext471 = $155 << 16;
                $157 = $sext471 >> 16;
                $158 = $21 << 16 >> 16;
                $159 = ($157 | 0) < ($158 | 0);
                $160 = $23 << 16 >> 16;
                $161 = ($157 | 0) > ($160 | 0);
                $or$cond476 = $159 | $161;
                if ($or$cond476) {
                    HEAP32[$vararg_buffer1 >> 2] = $157;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer1);
                }
                __ZN7WelsDec22UpdateP16x16MotionInfoEPNS_10TagDqLayerEaPs($13, $129, $6);
                $$39 = 0;
                STACKTOP = sp; return ($$39 | 0);
                break;
            }
            case 16: {
                $162 = ((($13)) + 3858 | 0);
                $163 = ((($3)) + 20 | 0);
                $164 = ((($3)) + 4 | 0);
                $165 = ((($3)) + 16 | 0);
                $166 = ((($3)) + 24 | 0);
                $167 = HEAP8[$162 >> 0] | 0;
                $168 = ($167 << 24 >> 24) == (0);
                if ($168) {
                    $191 = $26; $848 = $26;
                } else {
                    $193 = HEAP32[$163 >> 2] | 0;
                    $194 = $193 >>> 31;
                    $195 = HEAP32[$164 >> 2] | 0;
                    $196 = HEAP32[$3 >> 2] | 0;
                    $197 = HEAP32[$165 >> 2] | 0;
                    $198 = $193 << 1;
                    HEAP32[$163 >> 2] = $198;
                    $199 = HEAP32[$166 >> 2] | 0;
                    $200 = (($199) + 1) | 0;
                    HEAP32[$166 >> 2] = $200;
                    $201 = ($199 | 0) > (-1);
                    $202 = $197;
                    do {
                        if ($201) {
                            $203 = (($197) - ($196)) | 0;
                            $204 = (($195) + 1) | 0;
                            $205 = (($204) - ($196)) | 0;
                            $206 = ($203 | 0) > ($205 | 0);
                            if ($206) {
                                $$39 = 11;
                                STACKTOP = sp; return ($$39 | 0);
                            } else {
                                $207 = HEAP8[$202 >> 0] | 0;
                                $208 = $207 & 255;
                                $209 = $208 << 8;
                                $210 = ((($202)) + 1 | 0);
                                $211 = HEAP8[$210 >> 0] | 0;
                                $212 = $211 & 255;
                                $213 = $209 | $212;
                                $214 = $213 << $200;
                                $215 = $214 | $198;
                                HEAP32[$163 >> 2] = $215;
                                $216 = (($199) + -15) | 0;
                                HEAP32[$166 >> 2] = $216;
                                $217 = ((($202)) + 2 | 0);
                                HEAP32[$165 >> 2] = $217;
                                break;
                            }
                        }
                    } while (0);
                    HEAP32[$7 >> 2] = $194;
                    HEAP32[$5 >> 2] = $194;
                    $$pre739 = HEAP8[$162 >> 0] | 0;
                    $218 = ($$pre739 << 24 >> 24) == (0);
                    if ($218) {
                        $191 = $26; $848 = $194;
                    } else {
                        $822 = HEAP32[$163 >> 2] | 0;
                        $823 = $822 >>> 31;
                        $824 = HEAP32[$164 >> 2] | 0;
                        $825 = HEAP32[$3 >> 2] | 0;
                        $826 = HEAP32[$165 >> 2] | 0;
                        $827 = $822 << 1;
                        HEAP32[$163 >> 2] = $827;
                        $828 = HEAP32[$166 >> 2] | 0;
                        $829 = (($828) + 1) | 0;
                        HEAP32[$166 >> 2] = $829;
                        $830 = ($828 | 0) > (-1);
                        $831 = $826;
                        do {
                            if ($830) {
                                $832 = (($826) - ($825)) | 0;
                                $833 = (($824) + 1) | 0;
                                $834 = (($833) - ($825)) | 0;
                                $835 = ($832 | 0) > ($834 | 0);
                                if ($835) {
                                    $$39 = 11;
                                    STACKTOP = sp; return ($$39 | 0);
                                } else {
                                    $836 = HEAP8[$831 >> 0] | 0;
                                    $837 = $836 & 255;
                                    $838 = $837 << 8;
                                    $839 = ((($831)) + 1 | 0);
                                    $840 = HEAP8[$839 >> 0] | 0;
                                    $841 = $840 & 255;
                                    $842 = $838 | $841;
                                    $843 = $842 << $829;
                                    $844 = $843 | $827;
                                    HEAP32[$163 >> 2] = $844;
                                    $845 = (($828) + -15) | 0;
                                    HEAP32[$166 >> 2] = $845;
                                    $846 = ((($831)) + 2 | 0);
                                    HEAP32[$165 >> 2] = $846;
                                    break;
                                }
                            }
                        } while (0);
                        HEAP32[$7 >> 2] = $823;
                        HEAP32[$29 >> 2] = $823;
                        $191 = $823; $848 = $194;
                    }
                }
                $172 = ((($0)) + 512344 | 0);
                $174 = ((($0)) + 242340 | 0);
                $177 = ((($0)) + 116 | 0);
                $180 = ((($0)) + 512345 | 0);
                $847 = ($31 | 0) == (1);
                $849 = ($848 | 0) == (0);
                if ($847) {
                    if ($849) {
                        HEAP32[$7 >> 2] = 0;
                        $169 = ((($0)) + 5468 | 0);
                        $170 = HEAP32[$169 >> 2] | 0;
                        $171 = ($170 | 0) == (0 | 0);
                        do {
                            if ($171) {
                                HEAP8[$172 >> 0] = 1;
                                $173 = HEAP32[$174 >> 2] | 0;
                                $175 = ($173 | 0) == (0);
                                if ($175) {
                                    $$39 = 1041;
                                    STACKTOP = sp; return ($$39 | 0);
                                } else {
                                    $176 = HEAP32[$177 >> 2] | 0;
                                    $178 = $176 | 4;
                                    HEAP32[$177 >> 2] = $178;
                                    break;
                                }
                            }
                        } while (0);
                        $179 = HEAP8[$180 >> 0] | 0;
                        $181 = ($179 << 24 >> 24) == (0);
                        if ($181) {
                            $182 = HEAP8[$172 >> 0] | 0;
                            $183 = ($182 << 24 >> 24) == (0);
                            if ($183) {
                                $184 = ((($0)) + 5468 | 0);
                                $185 = HEAP32[$184 >> 2] | 0;
                                $186 = ($185 | 0) == (0 | 0);
                                if ($186) {
                                    $190 = 1;
                                } else {
                                    $187 = ((($185)) + 72 | 0);
                                    $188 = HEAP8[$187 >> 0] | 0;
                                    $189 = $188 ^ 1;
                                    $190 = $189;
                                }
                            } else {
                                $190 = 1;
                            }
                        } else {
                            $190 = 1;
                        }
                        HEAP8[$172 >> 0] = $190;
                        $192 = ($191 | 0) == (0);
                        if ($192) {
                            HEAP32[$7 >> 2] = 0;
                            $757 = ((($0)) + 5468 | 0);
                            $758 = HEAP32[$757 >> 2] | 0;
                            $759 = ($758 | 0) == (0 | 0);
                            do {
                                if ($759) {
                                    HEAP8[$172 >> 0] = 1;
                                    $760 = HEAP32[$174 >> 2] | 0;
                                    $761 = ($760 | 0) == (0);
                                    if ($761) {
                                        $$39 = 1041;
                                        STACKTOP = sp; return ($$39 | 0);
                                    } else {
                                        $762 = HEAP32[$177 >> 2] | 0;
                                        $763 = $762 | 4;
                                        HEAP32[$177 >> 2] = $763;
                                        $765 = 1;
                                        break;
                                    }
                                } else {
                                    $765 = $190;
                                }
                            } while (0);
                            $764 = $179 | $765;
                            $766 = ($764 << 24 >> 24) == (0);
                            if ($766) {
                                $767 = ((($0)) + 5468 | 0);
                                $768 = HEAP32[$767 >> 2] | 0;
                                $769 = ($768 | 0) == (0 | 0);
                                if ($769) {
                                    $223 = 0; $305 = 0; $storemerge757 = 1;
                                } else {
                                    $770 = ((($768)) + 72 | 0);
                                    $771 = HEAP8[$770 >> 0] | 0;
                                    $772 = $771 ^ 1;
                                    $223 = 0; $305 = 0; $storemerge757 = $772;
                                }
                            } else {
                                $223 = 0; $305 = 0; $storemerge757 = 1;
                            }
                        } else {
                            label = 48;
                        }
                    } else {
                        label = 48;
                    }
                } else {
                    if ($849) {
                        $cond = ($31 | 0) == (2);
                        do {
                            if ($cond) {
                                $226 = HEAP32[$163 >> 2] | 0;
                                $227 = $226 >>> 31;
                                $228 = HEAP32[$164 >> 2] | 0;
                                $229 = HEAP32[$3 >> 2] | 0;
                                $230 = HEAP32[$165 >> 2] | 0;
                                $231 = $226 << 1;
                                HEAP32[$163 >> 2] = $231;
                                $232 = HEAP32[$166 >> 2] | 0;
                                $233 = (($232) + 1) | 0;
                                HEAP32[$166 >> 2] = $233;
                                $234 = ($232 | 0) > (-1);
                                $235 = $230;
                                do {
                                    if ($234) {
                                        $236 = (($230) - ($229)) | 0;
                                        $237 = (($228) + 1) | 0;
                                        $238 = (($237) - ($229)) | 0;
                                        $239 = ($236 | 0) > ($238 | 0);
                                        if ($239) {
                                            $$39 = 11;
                                            STACKTOP = sp; return ($$39 | 0);
                                        } else {
                                            $240 = HEAP8[$235 >> 0] | 0;
                                            $241 = $240 & 255;
                                            $242 = $241 << 8;
                                            $243 = ((($235)) + 1 | 0);
                                            $244 = HEAP8[$243 >> 0] | 0;
                                            $245 = $244 & 255;
                                            $246 = $242 | $245;
                                            $247 = $246 << $233;
                                            $248 = $247 | $231;
                                            HEAP32[$163 >> 2] = $248;
                                            $249 = (($232) + -15) | 0;
                                            HEAP32[$166 >> 2] = $249;
                                            $250 = ((($235)) + 2 | 0);
                                            HEAP32[$165 >> 2] = $250;
                                            break;
                                        }
                                    }
                                } while (0);
                                $251 = $227 ^ 1;
                                HEAP32[$7 >> 2] = $251;
                                $254 = $251;
                            } else {
                                $252 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                                $253 = ($252 | 0) == (0);
                                if ($253) {
                                    $$pre741 = HEAP32[$7 >> 2] | 0;
                                    $254 = $$pre741;
                                    break;
                                } else {
                                    $$39 = $252;
                                    STACKTOP = sp; return ($$39 | 0);
                                }
                            }
                        } while (0);
                        $255 = ($254 | 0) > (-1);
                        $256 = ($254 | 0) < ($31 | 0);
                        $or$cond479 = $255 & $256;
                        if ($or$cond479) {
                            $257 = (((($0)) + 5468 | 0) + ($254 << 2) | 0);
                            $258 = HEAP32[$257 >> 2] | 0;
                            $259 = ($258 | 0) == (0 | 0);
                            if ($259) {
                                label = 58;
                            } else {
                                $269 = $254;
                            }
                        } else {
                            label = 58;
                        }
                        do {
                            if ((label | 0) == 58) {
                                HEAP8[$172 >> 0] = 1;
                                $260 = HEAP32[$174 >> 2] | 0;
                                $261 = ($260 | 0) == (0);
                                if ($261) {
                                    $$39 = 1041;
                                    STACKTOP = sp; return ($$39 | 0);
                                } else {
                                    $262 = HEAP32[$177 >> 2] | 0;
                                    $263 = $262 | 4;
                                    HEAP32[$177 >> 2] = $263;
                                    $269 = 0;
                                    break;
                                }
                            }
                        } while (0);
                        $264 = HEAP8[$180 >> 0] | 0;
                        $265 = ($264 << 24 >> 24) == (0);
                        if ($265) {
                            $266 = HEAP8[$172 >> 0] | 0;
                            $267 = ($266 << 24 >> 24) == (0);
                            if ($267) {
                                $268 = (((($0)) + 5468 | 0) + ($269 << 2) | 0);
                                $270 = HEAP32[$268 >> 2] | 0;
                                $271 = ($270 | 0) == (0 | 0);
                                if ($271) {
                                    $275 = 1;
                                } else {
                                    $272 = ((($270)) + 72 | 0);
                                    $273 = HEAP8[$272 >> 0] | 0;
                                    $274 = $273 ^ 1;
                                    $275 = $274;
                                }
                            } else {
                                $275 = 1;
                            }
                        } else {
                            $275 = 1;
                        }
                        HEAP8[$172 >> 0] = $275;
                        $276 = ($191 | 0) == (0);
                        if ($276) {
                            do {
                                if ($cond) {
                                    $775 = HEAP32[$163 >> 2] | 0;
                                    $776 = $775 >>> 31;
                                    $777 = HEAP32[$164 >> 2] | 0;
                                    $778 = HEAP32[$3 >> 2] | 0;
                                    $779 = HEAP32[$165 >> 2] | 0;
                                    $780 = $775 << 1;
                                    HEAP32[$163 >> 2] = $780;
                                    $781 = HEAP32[$166 >> 2] | 0;
                                    $782 = (($781) + 1) | 0;
                                    HEAP32[$166 >> 2] = $782;
                                    $783 = ($781 | 0) > (-1);
                                    $784 = $779;
                                    do {
                                        if ($783) {
                                            $785 = (($779) - ($778)) | 0;
                                            $786 = (($777) + 1) | 0;
                                            $787 = (($786) - ($778)) | 0;
                                            $788 = ($785 | 0) > ($787 | 0);
                                            if ($788) {
                                                $$39 = 11;
                                                STACKTOP = sp; return ($$39 | 0);
                                            } else {
                                                $789 = HEAP8[$784 >> 0] | 0;
                                                $790 = $789 & 255;
                                                $791 = $790 << 8;
                                                $792 = ((($784)) + 1 | 0);
                                                $793 = HEAP8[$792 >> 0] | 0;
                                                $794 = $793 & 255;
                                                $795 = $791 | $794;
                                                $796 = $795 << $782;
                                                $797 = $796 | $780;
                                                HEAP32[$163 >> 2] = $797;
                                                $798 = (($781) + -15) | 0;
                                                HEAP32[$166 >> 2] = $798;
                                                $799 = ((($784)) + 2 | 0);
                                                HEAP32[$165 >> 2] = $799;
                                                break;
                                            }
                                        }
                                    } while (0);
                                    $800 = $776 ^ 1;
                                    HEAP32[$7 >> 2] = $800;
                                    $801 = $800;
                                } else {
                                    $773 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                                    $774 = ($773 | 0) == (0);
                                    if ($774) {
                                        $$pre743 = HEAP32[$7 >> 2] | 0;
                                        $801 = $$pre743;
                                        break;
                                    } else {
                                        $$39 = $773;
                                        STACKTOP = sp; return ($$39 | 0);
                                    }
                                }
                            } while (0);
                            $802 = ($801 | 0) > (-1);
                            $803 = ($801 | 0) < ($31 | 0);
                            $or$cond479$1 = $802 & $803;
                            if ($or$cond479$1) {
                                $804 = (((($0)) + 5468 | 0) + ($801 << 2) | 0);
                                $805 = HEAP32[$804 >> 2] | 0;
                                $806 = ($805 | 0) == (0 | 0);
                                if ($806) {
                                    label = 181;
                                } else {
                                    $816 = $801;
                                }
                            } else {
                                label = 181;
                            }
                            do {
                                if ((label | 0) == 181) {
                                    HEAP8[$172 >> 0] = 1;
                                    $807 = HEAP32[$174 >> 2] | 0;
                                    $808 = ($807 | 0) == (0);
                                    if ($808) {
                                        $$39 = 1041;
                                        STACKTOP = sp; return ($$39 | 0);
                                    } else {
                                        $809 = HEAP32[$177 >> 2] | 0;
                                        $810 = $809 | 4;
                                        HEAP32[$177 >> 2] = $810;
                                        $816 = 0;
                                        break;
                                    }
                                }
                            } while (0);
                            $811 = HEAP8[$180 >> 0] | 0;
                            $812 = ($811 << 24 >> 24) == (0);
                            if ($812) {
                                $813 = HEAP8[$172 >> 0] | 0;
                                $814 = ($813 << 24 >> 24) == (0);
                                if ($814) {
                                    $815 = (((($0)) + 5468 | 0) + ($816 << 2) | 0);
                                    $817 = HEAP32[$815 >> 2] | 0;
                                    $818 = ($817 | 0) == (0 | 0);
                                    if ($818) {
                                        $223 = $269; $305 = $816; $storemerge757 = 1;
                                    } else {
                                        $819 = ((($817)) + 72 | 0);
                                        $820 = HEAP8[$819 >> 0] | 0;
                                        $821 = $820 ^ 1;
                                        $223 = $269; $305 = $816; $storemerge757 = $821;
                                    }
                                } else {
                                    $223 = $269; $305 = $816; $storemerge757 = 1;
                                }
                            } else {
                                $223 = $269; $305 = $816; $storemerge757 = 1;
                            }
                        } else {
                            label = 48;
                        }
                    } else {
                        label = 48;
                    }
                }
                if ((label | 0) == 48) {
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25537, $vararg_buffer3);
                    $$39 = 459814;
                    STACKTOP = sp; return ($$39 | 0);
                }
                HEAP8[$172 >> 0] = $storemerge757;
                $219 = ((($6)) + 2 | 0);
                $220 = $21 << 16 >> 16;
                $221 = $23 << 16 >> 16;
                $222 = $223 & 255;
                __ZN7WelsDec15PredInter16x8MvEPA30_A2_sPA30_aiaPs($1, $2, 0, $222, $6);
                $224 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                $225 = ($224 | 0) == (0);
                do {
                    if ($225) {
                        $277 = HEAP32[$4 >> 2] | 0;
                        $278 = $277 & 1;
                        $279 = ($278 | 0) == (0);
                        $280 = $277 >>> 1;
                        $281 = (0 - ($280)) | 0;
                        $282 = (($277) + 1) | 0;
                        $283 = $282 >>> 1;
                        $storemerge$i515 = $279 ? $281 : $283;
                        $284 = HEAP16[$6 >> 1] | 0;
                        $285 = $284 & 65535;
                        $286 = (($storemerge$i515) + ($285)) | 0;
                        $287 = $286 & 65535;
                        HEAP16[$6 >> 1] = $287;
                        $288 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                        $289 = ($288 | 0) == (0);
                        if ($289) {
                            $290 = HEAP32[$4 >> 2] | 0;
                            $291 = $290 & 1;
                            $292 = ($291 | 0) == (0);
                            $293 = $290 >>> 1;
                            $294 = (0 - ($293)) | 0;
                            $295 = (($290) + 1) | 0;
                            $296 = $295 >>> 1;
                            $storemerge$i518 = $292 ? $294 : $296;
                            $297 = HEAP16[$219 >> 1] | 0;
                            $298 = $297 & 65535;
                            $299 = (($storemerge$i518) + ($298)) | 0;
                            $300 = $299 & 65535;
                            HEAP16[$219 >> 1] = $300;
                            $sext470 = $299 << 16;
                            $301 = $sext470 >> 16;
                            $302 = ($301 | 0) < ($220 | 0);
                            $303 = ($301 | 0) > ($221 | 0);
                            $or$cond483 = $302 | $303;
                            if ($or$cond483) {
                                HEAP32[$vararg_buffer5 >> 2] = $301;
                                __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer5);
                            }
                            __ZN7WelsDec21UpdateP16x8MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($13, $1, $2, 0, $222, $6);
                            $304 = $305 & 255;
                            __ZN7WelsDec15PredInter16x8MvEPA30_A2_sPA30_aiaPs($1, $2, 8, $304, $6);
                            $306 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                            $307 = ($306 | 0) == (0);
                            if (!($307)) {
                                $$lcssa = $306;
                                break;
                            }
                            $730 = HEAP32[$4 >> 2] | 0;
                            $731 = $730 & 1;
                            $732 = ($731 | 0) == (0);
                            $733 = $730 >>> 1;
                            $734 = (0 - ($733)) | 0;
                            $735 = (($730) + 1) | 0;
                            $736 = $735 >>> 1;
                            $storemerge$i515$1 = $732 ? $734 : $736;
                            $737 = HEAP16[$6 >> 1] | 0;
                            $738 = $737 & 65535;
                            $739 = (($storemerge$i515$1) + ($738)) | 0;
                            $740 = $739 & 65535;
                            HEAP16[$6 >> 1] = $740;
                            $741 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                            $742 = ($741 | 0) == (0);
                            if ($742) {
                                $743 = HEAP32[$4 >> 2] | 0;
                                $744 = $743 & 1;
                                $745 = ($744 | 0) == (0);
                                $746 = $743 >>> 1;
                                $747 = (0 - ($746)) | 0;
                                $748 = (($743) + 1) | 0;
                                $749 = $748 >>> 1;
                                $storemerge$i518$1 = $745 ? $747 : $749;
                                $750 = HEAP16[$219 >> 1] | 0;
                                $751 = $750 & 65535;
                                $752 = (($storemerge$i518$1) + ($751)) | 0;
                                $753 = $752 & 65535;
                                HEAP16[$219 >> 1] = $753;
                                $sext470$1 = $752 << 16;
                                $754 = $sext470$1 >> 16;
                                $755 = ($754 | 0) < ($220 | 0);
                                $756 = ($754 | 0) > ($221 | 0);
                                $or$cond483$1 = $755 | $756;
                                if ($or$cond483$1) {
                                    HEAP32[$vararg_buffer18 >> 2] = $754;
                                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer18);
                                }
                                __ZN7WelsDec21UpdateP16x8MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($13, $1, $2, 8, $304, $6);
                                $$39 = 0;
                                STACKTOP = sp; return ($$39 | 0);
                            } else {
                                $$lcssa704 = $741;
                            }
                        } else {
                            $$lcssa704 = $288;
                        }
                        $$39 = $$lcssa704;
                        STACKTOP = sp; return ($$39 | 0);
                    } else {
                        $$lcssa = $224;
                    }
                } while (0);
                $$39 = $$lcssa;
                STACKTOP = sp; return ($$39 | 0);
                break;
            }
            case 32: {
                $308 = ((($13)) + 3858 | 0);
                $309 = ((($3)) + 20 | 0);
                $310 = ((($3)) + 4 | 0);
                $311 = ((($3)) + 16 | 0);
                $312 = ((($3)) + 24 | 0);
                $313 = HEAP8[$308 >> 0] | 0;
                $314 = ($313 << 24 >> 24) == (0);
                if ($314) {
                    $337 = $26; $968 = $26;
                } else {
                    $339 = HEAP32[$309 >> 2] | 0;
                    $340 = $339 >>> 31;
                    $341 = HEAP32[$310 >> 2] | 0;
                    $342 = HEAP32[$3 >> 2] | 0;
                    $343 = HEAP32[$311 >> 2] | 0;
                    $344 = $339 << 1;
                    HEAP32[$309 >> 2] = $344;
                    $345 = HEAP32[$312 >> 2] | 0;
                    $346 = (($345) + 1) | 0;
                    HEAP32[$312 >> 2] = $346;
                    $347 = ($345 | 0) > (-1);
                    $348 = $343;
                    do {
                        if ($347) {
                            $349 = (($343) - ($342)) | 0;
                            $350 = (($341) + 1) | 0;
                            $351 = (($350) - ($342)) | 0;
                            $352 = ($349 | 0) > ($351 | 0);
                            if ($352) {
                                $$39 = 11;
                                STACKTOP = sp; return ($$39 | 0);
                            } else {
                                $353 = HEAP8[$348 >> 0] | 0;
                                $354 = $353 & 255;
                                $355 = $354 << 8;
                                $356 = ((($348)) + 1 | 0);
                                $357 = HEAP8[$356 >> 0] | 0;
                                $358 = $357 & 255;
                                $359 = $355 | $358;
                                $360 = $359 << $346;
                                $361 = $360 | $344;
                                HEAP32[$309 >> 2] = $361;
                                $362 = (($345) + -15) | 0;
                                HEAP32[$312 >> 2] = $362;
                                $363 = ((($348)) + 2 | 0);
                                HEAP32[$311 >> 2] = $363;
                                break;
                            }
                        }
                    } while (0);
                    HEAP32[$7 >> 2] = $340;
                    HEAP32[$5 >> 2] = $340;
                    $$pre734 = HEAP8[$308 >> 0] | 0;
                    $364 = ($$pre734 << 24 >> 24) == (0);
                    if ($364) {
                        $337 = $26; $968 = $340;
                    } else {
                        $942 = HEAP32[$309 >> 2] | 0;
                        $943 = $942 >>> 31;
                        $944 = HEAP32[$310 >> 2] | 0;
                        $945 = HEAP32[$3 >> 2] | 0;
                        $946 = HEAP32[$311 >> 2] | 0;
                        $947 = $942 << 1;
                        HEAP32[$309 >> 2] = $947;
                        $948 = HEAP32[$312 >> 2] | 0;
                        $949 = (($948) + 1) | 0;
                        HEAP32[$312 >> 2] = $949;
                        $950 = ($948 | 0) > (-1);
                        $951 = $946;
                        do {
                            if ($950) {
                                $952 = (($946) - ($945)) | 0;
                                $953 = (($944) + 1) | 0;
                                $954 = (($953) - ($945)) | 0;
                                $955 = ($952 | 0) > ($954 | 0);
                                if ($955) {
                                    $$39 = 11;
                                    STACKTOP = sp; return ($$39 | 0);
                                } else {
                                    $956 = HEAP8[$951 >> 0] | 0;
                                    $957 = $956 & 255;
                                    $958 = $957 << 8;
                                    $959 = ((($951)) + 1 | 0);
                                    $960 = HEAP8[$959 >> 0] | 0;
                                    $961 = $960 & 255;
                                    $962 = $958 | $961;
                                    $963 = $962 << $949;
                                    $964 = $963 | $947;
                                    HEAP32[$309 >> 2] = $964;
                                    $965 = (($948) + -15) | 0;
                                    HEAP32[$312 >> 2] = $965;
                                    $966 = ((($951)) + 2 | 0);
                                    HEAP32[$311 >> 2] = $966;
                                    break;
                                }
                            }
                        } while (0);
                        HEAP32[$7 >> 2] = $943;
                        HEAP32[$29 >> 2] = $943;
                        $337 = $943; $968 = $340;
                    }
                }
                $318 = ((($0)) + 512344 | 0);
                $320 = ((($0)) + 242340 | 0);
                $323 = ((($0)) + 116 | 0);
                $326 = ((($0)) + 512345 | 0);
                $967 = ($31 | 0) == (1);
                $969 = ($968 | 0) == (0);
                if ($967) {
                    if ($969) {
                        HEAP32[$7 >> 2] = 0;
                        $315 = ((($0)) + 5468 | 0);
                        $316 = HEAP32[$315 >> 2] | 0;
                        $317 = ($316 | 0) == (0 | 0);
                        do {
                            if ($317) {
                                HEAP8[$318 >> 0] = 1;
                                $319 = HEAP32[$320 >> 2] | 0;
                                $321 = ($319 | 0) == (0);
                                if ($321) {
                                    $$39 = 1041;
                                    STACKTOP = sp; return ($$39 | 0);
                                } else {
                                    $322 = HEAP32[$323 >> 2] | 0;
                                    $324 = $322 | 4;
                                    HEAP32[$323 >> 2] = $324;
                                    break;
                                }
                            }
                        } while (0);
                        $325 = HEAP8[$326 >> 0] | 0;
                        $327 = ($325 << 24 >> 24) == (0);
                        if ($327) {
                            $328 = HEAP8[$318 >> 0] | 0;
                            $329 = ($328 << 24 >> 24) == (0);
                            if ($329) {
                                $330 = ((($0)) + 5468 | 0);
                                $331 = HEAP32[$330 >> 2] | 0;
                                $332 = ($331 | 0) == (0 | 0);
                                if ($332) {
                                    $336 = 1;
                                } else {
                                    $333 = ((($331)) + 72 | 0);
                                    $334 = HEAP8[$333 >> 0] | 0;
                                    $335 = $334 ^ 1;
                                    $336 = $335;
                                }
                            } else {
                                $336 = 1;
                            }
                        } else {
                            $336 = 1;
                        }
                        HEAP8[$318 >> 0] = $336;
                        $338 = ($337 | 0) == (0);
                        if ($338) {
                            HEAP32[$7 >> 2] = 0;
                            $877 = ((($0)) + 5468 | 0);
                            $878 = HEAP32[$877 >> 2] | 0;
                            $879 = ($878 | 0) == (0 | 0);
                            do {
                                if ($879) {
                                    HEAP8[$318 >> 0] = 1;
                                    $880 = HEAP32[$320 >> 2] | 0;
                                    $881 = ($880 | 0) == (0);
                                    if ($881) {
                                        $$39 = 1041;
                                        STACKTOP = sp; return ($$39 | 0);
                                    } else {
                                        $882 = HEAP32[$323 >> 2] | 0;
                                        $883 = $882 | 4;
                                        HEAP32[$323 >> 2] = $883;
                                        $885 = 1;
                                        break;
                                    }
                                } else {
                                    $885 = $336;
                                }
                            } while (0);
                            $884 = $325 | $885;
                            $886 = ($884 << 24 >> 24) == (0);
                            if ($886) {
                                $887 = ((($0)) + 5468 | 0);
                                $888 = HEAP32[$887 >> 2] | 0;
                                $889 = ($888 | 0) == (0 | 0);
                                if ($889) {
                                    $369 = 0; $451 = 0; $storemerge = 1;
                                } else {
                                    $890 = ((($888)) + 72 | 0);
                                    $891 = HEAP8[$890 >> 0] | 0;
                                    $892 = $891 ^ 1;
                                    $369 = 0; $451 = 0; $storemerge = $892;
                                }
                            } else {
                                $369 = 0; $451 = 0; $storemerge = 1;
                            }
                        } else {
                            label = 103;
                        }
                    } else {
                        label = 103;
                    }
                } else {
                    if ($969) {
                        $cond689 = ($31 | 0) == (2);
                        do {
                            if ($cond689) {
                                $372 = HEAP32[$309 >> 2] | 0;
                                $373 = $372 >>> 31;
                                $374 = HEAP32[$310 >> 2] | 0;
                                $375 = HEAP32[$3 >> 2] | 0;
                                $376 = HEAP32[$311 >> 2] | 0;
                                $377 = $372 << 1;
                                HEAP32[$309 >> 2] = $377;
                                $378 = HEAP32[$312 >> 2] | 0;
                                $379 = (($378) + 1) | 0;
                                HEAP32[$312 >> 2] = $379;
                                $380 = ($378 | 0) > (-1);
                                $381 = $376;
                                do {
                                    if ($380) {
                                        $382 = (($376) - ($375)) | 0;
                                        $383 = (($374) + 1) | 0;
                                        $384 = (($383) - ($375)) | 0;
                                        $385 = ($382 | 0) > ($384 | 0);
                                        if ($385) {
                                            $$39 = 11;
                                            STACKTOP = sp; return ($$39 | 0);
                                        } else {
                                            $386 = HEAP8[$381 >> 0] | 0;
                                            $387 = $386 & 255;
                                            $388 = $387 << 8;
                                            $389 = ((($381)) + 1 | 0);
                                            $390 = HEAP8[$389 >> 0] | 0;
                                            $391 = $390 & 255;
                                            $392 = $388 | $391;
                                            $393 = $392 << $379;
                                            $394 = $393 | $377;
                                            HEAP32[$309 >> 2] = $394;
                                            $395 = (($378) + -15) | 0;
                                            HEAP32[$312 >> 2] = $395;
                                            $396 = ((($381)) + 2 | 0);
                                            HEAP32[$311 >> 2] = $396;
                                            break;
                                        }
                                    }
                                } while (0);
                                $397 = $373 ^ 1;
                                HEAP32[$7 >> 2] = $397;
                                $400 = $397;
                            } else {
                                $398 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                                $399 = ($398 | 0) == (0);
                                if ($399) {
                                    $$pre736 = HEAP32[$7 >> 2] | 0;
                                    $400 = $$pre736;
                                    break;
                                } else {
                                    $$39 = $398;
                                    STACKTOP = sp; return ($$39 | 0);
                                }
                            }
                        } while (0);
                        $401 = ($400 | 0) > (-1);
                        $402 = ($400 | 0) < ($31 | 0);
                        $or$cond486 = $401 & $402;
                        if ($or$cond486) {
                            $403 = (((($0)) + 5468 | 0) + ($400 << 2) | 0);
                            $404 = HEAP32[$403 >> 2] | 0;
                            $405 = ($404 | 0) == (0 | 0);
                            if ($405) {
                                label = 96;
                            } else {
                                $415 = $400;
                            }
                        } else {
                            label = 96;
                        }
                        do {
                            if ((label | 0) == 96) {
                                HEAP8[$318 >> 0] = 1;
                                $406 = HEAP32[$320 >> 2] | 0;
                                $407 = ($406 | 0) == (0);
                                if ($407) {
                                    $$39 = 1041;
                                    STACKTOP = sp; return ($$39 | 0);
                                } else {
                                    $408 = HEAP32[$323 >> 2] | 0;
                                    $409 = $408 | 4;
                                    HEAP32[$323 >> 2] = $409;
                                    $415 = 0;
                                    break;
                                }
                            }
                        } while (0);
                        $410 = HEAP8[$326 >> 0] | 0;
                        $411 = ($410 << 24 >> 24) == (0);
                        if ($411) {
                            $412 = HEAP8[$318 >> 0] | 0;
                            $413 = ($412 << 24 >> 24) == (0);
                            if ($413) {
                                $414 = (((($0)) + 5468 | 0) + ($415 << 2) | 0);
                                $416 = HEAP32[$414 >> 2] | 0;
                                $417 = ($416 | 0) == (0 | 0);
                                if ($417) {
                                    $421 = 1;
                                } else {
                                    $418 = ((($416)) + 72 | 0);
                                    $419 = HEAP8[$418 >> 0] | 0;
                                    $420 = $419 ^ 1;
                                    $421 = $420;
                                }
                            } else {
                                $421 = 1;
                            }
                        } else {
                            $421 = 1;
                        }
                        HEAP8[$318 >> 0] = $421;
                        $422 = ($337 | 0) == (0);
                        if ($422) {
                            do {
                                if ($cond689) {
                                    $895 = HEAP32[$309 >> 2] | 0;
                                    $896 = $895 >>> 31;
                                    $897 = HEAP32[$310 >> 2] | 0;
                                    $898 = HEAP32[$3 >> 2] | 0;
                                    $899 = HEAP32[$311 >> 2] | 0;
                                    $900 = $895 << 1;
                                    HEAP32[$309 >> 2] = $900;
                                    $901 = HEAP32[$312 >> 2] | 0;
                                    $902 = (($901) + 1) | 0;
                                    HEAP32[$312 >> 2] = $902;
                                    $903 = ($901 | 0) > (-1);
                                    $904 = $899;
                                    do {
                                        if ($903) {
                                            $905 = (($899) - ($898)) | 0;
                                            $906 = (($897) + 1) | 0;
                                            $907 = (($906) - ($898)) | 0;
                                            $908 = ($905 | 0) > ($907 | 0);
                                            if ($908) {
                                                $$39 = 11;
                                                STACKTOP = sp; return ($$39 | 0);
                                            } else {
                                                $909 = HEAP8[$904 >> 0] | 0;
                                                $910 = $909 & 255;
                                                $911 = $910 << 8;
                                                $912 = ((($904)) + 1 | 0);
                                                $913 = HEAP8[$912 >> 0] | 0;
                                                $914 = $913 & 255;
                                                $915 = $911 | $914;
                                                $916 = $915 << $902;
                                                $917 = $916 | $900;
                                                HEAP32[$309 >> 2] = $917;
                                                $918 = (($901) + -15) | 0;
                                                HEAP32[$312 >> 2] = $918;
                                                $919 = ((($904)) + 2 | 0);
                                                HEAP32[$311 >> 2] = $919;
                                                break;
                                            }
                                        }
                                    } while (0);
                                    $920 = $896 ^ 1;
                                    HEAP32[$7 >> 2] = $920;
                                    $921 = $920;
                                } else {
                                    $893 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                                    $894 = ($893 | 0) == (0);
                                    if ($894) {
                                        $$pre738 = HEAP32[$7 >> 2] | 0;
                                        $921 = $$pre738;
                                        break;
                                    } else {
                                        $$39 = $893;
                                        STACKTOP = sp; return ($$39 | 0);
                                    }
                                }
                            } while (0);
                            $922 = ($921 | 0) > (-1);
                            $923 = ($921 | 0) < ($31 | 0);
                            $or$cond486$1 = $922 & $923;
                            if ($or$cond486$1) {
                                $924 = (((($0)) + 5468 | 0) + ($921 << 2) | 0);
                                $925 = HEAP32[$924 >> 2] | 0;
                                $926 = ($925 | 0) == (0 | 0);
                                if ($926) {
                                    label = 211;
                                } else {
                                    $936 = $921;
                                }
                            } else {
                                label = 211;
                            }
                            do {
                                if ((label | 0) == 211) {
                                    HEAP8[$318 >> 0] = 1;
                                    $927 = HEAP32[$320 >> 2] | 0;
                                    $928 = ($927 | 0) == (0);
                                    if ($928) {
                                        $$39 = 1041;
                                        STACKTOP = sp; return ($$39 | 0);
                                    } else {
                                        $929 = HEAP32[$323 >> 2] | 0;
                                        $930 = $929 | 4;
                                        HEAP32[$323 >> 2] = $930;
                                        $936 = 0;
                                        break;
                                    }
                                }
                            } while (0);
                            $931 = HEAP8[$326 >> 0] | 0;
                            $932 = ($931 << 24 >> 24) == (0);
                            if ($932) {
                                $933 = HEAP8[$318 >> 0] | 0;
                                $934 = ($933 << 24 >> 24) == (0);
                                if ($934) {
                                    $935 = (((($0)) + 5468 | 0) + ($936 << 2) | 0);
                                    $937 = HEAP32[$935 >> 2] | 0;
                                    $938 = ($937 | 0) == (0 | 0);
                                    if ($938) {
                                        $369 = $415; $451 = $936; $storemerge = 1;
                                    } else {
                                        $939 = ((($937)) + 72 | 0);
                                        $940 = HEAP8[$939 >> 0] | 0;
                                        $941 = $940 ^ 1;
                                        $369 = $415; $451 = $936; $storemerge = $941;
                                    }
                                } else {
                                    $369 = $415; $451 = $936; $storemerge = 1;
                                }
                            } else {
                                $369 = $415; $451 = $936; $storemerge = 1;
                            }
                        } else {
                            label = 103;
                        }
                    } else {
                        label = 103;
                    }
                }
                if ((label | 0) == 103) {
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25537, $vararg_buffer8);
                    $$39 = 459814;
                    STACKTOP = sp; return ($$39 | 0);
                }
                HEAP8[$318 >> 0] = $storemerge;
                $365 = ((($6)) + 2 | 0);
                $366 = $21 << 16 >> 16;
                $367 = $23 << 16 >> 16;
                $368 = $369 & 255;
                __ZN7WelsDec15PredInter8x16MvEPA30_A2_sPA30_aiaPs($1, $2, 0, $368, $6);
                $370 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                $371 = ($370 | 0) == (0);
                do {
                    if ($371) {
                        $423 = HEAP32[$4 >> 2] | 0;
                        $424 = $423 & 1;
                        $425 = ($424 | 0) == (0);
                        $426 = $423 >>> 1;
                        $427 = (0 - ($426)) | 0;
                        $428 = (($423) + 1) | 0;
                        $429 = $428 >>> 1;
                        $storemerge$i531 = $425 ? $427 : $429;
                        $430 = HEAP16[$6 >> 1] | 0;
                        $431 = $430 & 65535;
                        $432 = (($storemerge$i531) + ($431)) | 0;
                        $433 = $432 & 65535;
                        HEAP16[$6 >> 1] = $433;
                        $434 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                        $435 = ($434 | 0) == (0);
                        if ($435) {
                            $436 = HEAP32[$4 >> 2] | 0;
                            $437 = $436 & 1;
                            $438 = ($437 | 0) == (0);
                            $439 = $436 >>> 1;
                            $440 = (0 - ($439)) | 0;
                            $441 = (($436) + 1) | 0;
                            $442 = $441 >>> 1;
                            $storemerge$i534 = $438 ? $440 : $442;
                            $443 = HEAP16[$365 >> 1] | 0;
                            $444 = $443 & 65535;
                            $445 = (($storemerge$i534) + ($444)) | 0;
                            $446 = $445 & 65535;
                            HEAP16[$365 >> 1] = $446;
                            $sext469 = $445 << 16;
                            $447 = $sext469 >> 16;
                            $448 = ($447 | 0) < ($366 | 0);
                            $449 = ($447 | 0) > ($367 | 0);
                            $or$cond490 = $448 | $449;
                            if ($or$cond490) {
                                HEAP32[$vararg_buffer10 >> 2] = $447;
                                __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer10);
                            }
                            __ZN7WelsDec21UpdateP8x16MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($13, $1, $2, 0, $368, $6);
                            $450 = $451 & 255;
                            __ZN7WelsDec15PredInter8x16MvEPA30_A2_sPA30_aiaPs($1, $2, 4, $450, $6);
                            $452 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                            $453 = ($452 | 0) == (0);
                            if (!($453)) {
                                $$lcssa706 = $452;
                                break;
                            }
                            $850 = HEAP32[$4 >> 2] | 0;
                            $851 = $850 & 1;
                            $852 = ($851 | 0) == (0);
                            $853 = $850 >>> 1;
                            $854 = (0 - ($853)) | 0;
                            $855 = (($850) + 1) | 0;
                            $856 = $855 >>> 1;
                            $storemerge$i531$1 = $852 ? $854 : $856;
                            $857 = HEAP16[$6 >> 1] | 0;
                            $858 = $857 & 65535;
                            $859 = (($storemerge$i531$1) + ($858)) | 0;
                            $860 = $859 & 65535;
                            HEAP16[$6 >> 1] = $860;
                            $861 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                            $862 = ($861 | 0) == (0);
                            if ($862) {
                                $863 = HEAP32[$4 >> 2] | 0;
                                $864 = $863 & 1;
                                $865 = ($864 | 0) == (0);
                                $866 = $863 >>> 1;
                                $867 = (0 - ($866)) | 0;
                                $868 = (($863) + 1) | 0;
                                $869 = $868 >>> 1;
                                $storemerge$i534$1 = $865 ? $867 : $869;
                                $870 = HEAP16[$365 >> 1] | 0;
                                $871 = $870 & 65535;
                                $872 = (($storemerge$i534$1) + ($871)) | 0;
                                $873 = $872 & 65535;
                                HEAP16[$365 >> 1] = $873;
                                $sext469$1 = $872 << 16;
                                $874 = $sext469$1 >> 16;
                                $875 = ($874 | 0) < ($366 | 0);
                                $876 = ($874 | 0) > ($367 | 0);
                                $or$cond490$1 = $875 | $876;
                                if ($or$cond490$1) {
                                    HEAP32[$vararg_buffer21 >> 2] = $874;
                                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer21);
                                }
                                __ZN7WelsDec21UpdateP8x16MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($13, $1, $2, 4, $450, $6);
                                $$39 = 0;
                                STACKTOP = sp; return ($$39 | 0);
                            } else {
                                $$lcssa709 = $861;
                            }
                        } else {
                            $$lcssa709 = $434;
                        }
                        $$39 = $$lcssa709;
                        STACKTOP = sp; return ($$39 | 0);
                    } else {
                        $$lcssa706 = $370;
                    }
                } while (0);
                $$39 = $$lcssa706;
                STACKTOP = sp; return ($$39 | 0);
                break;
            }
            case 128: case 64: {
                ; HEAP32[$8 >> 2] = 0 | 0; HEAP32[$8 + 4 >> 2] = 0 | 0; HEAP32[$8 + 8 >> 2] = 0 | 0; HEAP32[$8 + 12 >> 2] = 0 | 0;
                $454 = ($35 << 16 >> 16) == (128);
                $$491 = $454 ? 1 : $31;
                $455 = ((($13)) + 4008 | 0);
                $456 = ((($13)) + 3940 | 0);
                $457 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                $458 = ($457 | 0) == (0);
                L285: do {
                    if ($458) {
                        $459 = HEAP32[$7 >> 2] | 0;
                        $460 = ($459 >>> 0) > (3);
                        if ($460) {
                            $$38$ph = 1038;
                        } else {
                            $461 = (9408 + ($459 << 3) | 0);
                            $462 = HEAP32[$461 >> 2] | 0;
                            $463 = $462 & 255;
                            $464 = HEAP32[$455 >> 2] | 0;
                            $465 = (($464) + ($15 << 2) | 0);
                            HEAP8[$465 >> 0] = $463;
                            $466 = (((9408 + ($459 << 3) | 0)) + 4 | 0);
                            $467 = HEAP8[$466 >> 0] | 0;
                            $468 = $467 << 24 >> 24;
                            HEAP32[$9 >> 2] = $468;
                            $469 = (((9408 + ($459 << 3) | 0)) + 5 | 0);
                            $470 = HEAP8[$469 >> 0] | 0;
                            $471 = $470 << 24 >> 24;
                            HEAP32[$10 >> 2] = $471;
                            $472 = ($459 | 0) == (0);
                            $473 = $472 & 1;
                            $474 = HEAP32[$456 >> 2] | 0;
                            $475 = (($474) + ($15) | 0);
                            $476 = HEAP8[$475 >> 0] | 0;
                            $477 = $476 & 255;
                            $478 = $477 & $473;
                            $479 = $478 & 255;
                            HEAP8[$475 >> 0] = $479;
                            $480 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                            $481 = ($480 | 0) == (0);
                            if ($481) {
                                $1033 = HEAP32[$7 >> 2] | 0;
                                $1034 = ($1033 >>> 0) > (3);
                                if ($1034) {
                                    $$38$ph = 1038;
                                } else {
                                    $1035 = (9408 + ($1033 << 3) | 0);
                                    $1036 = HEAP32[$1035 >> 2] | 0;
                                    $1037 = $1036 & 255;
                                    $1038 = HEAP32[$455 >> 2] | 0;
                                    $1039 = (((($1038) + ($15 << 2) | 0)) + 1 | 0);
                                    HEAP8[$1039 >> 0] = $1037;
                                    $1040 = (((9408 + ($1033 << 3) | 0)) + 4 | 0);
                                    $1041 = HEAP8[$1040 >> 0] | 0;
                                    $1042 = $1041 << 24 >> 24;
                                    $1043 = ((($9)) + 4 | 0);
                                    HEAP32[$1043 >> 2] = $1042;
                                    $1044 = (((9408 + ($1033 << 3) | 0)) + 5 | 0);
                                    $1045 = HEAP8[$1044 >> 0] | 0;
                                    $1046 = $1045 << 24 >> 24;
                                    $1047 = ((($10)) + 4 | 0);
                                    HEAP32[$1047 >> 2] = $1046;
                                    $1048 = ($1033 | 0) == (0);
                                    $1049 = $1048 & 1;
                                    $1050 = HEAP32[$456 >> 2] | 0;
                                    $1051 = (($1050) + ($15) | 0);
                                    $1052 = HEAP8[$1051 >> 0] | 0;
                                    $1053 = $1052 & 255;
                                    $1054 = $1053 & $1049;
                                    $1055 = $1054 & 255;
                                    HEAP8[$1051 >> 0] = $1055;
                                    $1056 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                                    $1057 = ($1056 | 0) == (0);
                                    if ($1057) {
                                        $1058 = HEAP32[$7 >> 2] | 0;
                                        $1059 = ($1058 >>> 0) > (3);
                                        if ($1059) {
                                            $$38$ph = 1038;
                                        } else {
                                            $1060 = (9408 + ($1058 << 3) | 0);
                                            $1061 = HEAP32[$1060 >> 2] | 0;
                                            $1062 = $1061 & 255;
                                            $1063 = HEAP32[$455 >> 2] | 0;
                                            $1064 = (((($1063) + ($15 << 2) | 0)) + 2 | 0);
                                            HEAP8[$1064 >> 0] = $1062;
                                            $1065 = (((9408 + ($1058 << 3) | 0)) + 4 | 0);
                                            $1066 = HEAP8[$1065 >> 0] | 0;
                                            $1067 = $1066 << 24 >> 24;
                                            $1068 = ((($9)) + 8 | 0);
                                            HEAP32[$1068 >> 2] = $1067;
                                            $1069 = (((9408 + ($1058 << 3) | 0)) + 5 | 0);
                                            $1070 = HEAP8[$1069 >> 0] | 0;
                                            $1071 = $1070 << 24 >> 24;
                                            $1072 = ((($10)) + 8 | 0);
                                            HEAP32[$1072 >> 2] = $1071;
                                            $1073 = ($1058 | 0) == (0);
                                            $1074 = $1073 & 1;
                                            $1075 = HEAP32[$456 >> 2] | 0;
                                            $1076 = (($1075) + ($15) | 0);
                                            $1077 = HEAP8[$1076 >> 0] | 0;
                                            $1078 = $1077 & 255;
                                            $1079 = $1078 & $1074;
                                            $1080 = $1079 & 255;
                                            HEAP8[$1076 >> 0] = $1080;
                                            $1081 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                                            $1082 = ($1081 | 0) == (0);
                                            if ($1082) {
                                                $1083 = HEAP32[$7 >> 2] | 0;
                                                $1084 = ($1083 >>> 0) > (3);
                                                if ($1084) {
                                                    $$38$ph = 1038;
                                                } else {
                                                    $1085 = (9408 + ($1083 << 3) | 0);
                                                    $1086 = HEAP32[$1085 >> 2] | 0;
                                                    $1087 = $1086 & 255;
                                                    $1088 = HEAP32[$455 >> 2] | 0;
                                                    $1089 = (((($1088) + ($15 << 2) | 0)) + 3 | 0);
                                                    HEAP8[$1089 >> 0] = $1087;
                                                    $1090 = (((9408 + ($1083 << 3) | 0)) + 4 | 0);
                                                    $1091 = HEAP8[$1090 >> 0] | 0;
                                                    $1092 = $1091 << 24 >> 24;
                                                    $1093 = ((($9)) + 12 | 0);
                                                    HEAP32[$1093 >> 2] = $1092;
                                                    $1094 = (((9408 + ($1083 << 3) | 0)) + 5 | 0);
                                                    $1095 = HEAP8[$1094 >> 0] | 0;
                                                    $1096 = $1095 << 24 >> 24;
                                                    $1097 = ((($10)) + 12 | 0);
                                                    HEAP32[$1097 >> 2] = $1096;
                                                    $1098 = ($1083 | 0) == (0);
                                                    $1099 = $1098 & 1;
                                                    $1100 = HEAP32[$456 >> 2] | 0;
                                                    $1101 = (($1100) + ($15) | 0);
                                                    $1102 = HEAP8[$1101 >> 0] | 0;
                                                    $1103 = $1102 & 255;
                                                    $1104 = $1103 & $1099;
                                                    $1105 = $1104 & 255;
                                                    HEAP8[$1101 >> 0] = $1105;
                                                    $1106 = ((($13)) + 3858 | 0);
                                                    $1107 = HEAP8[$1106 >> 0] | 0;
                                                    $1108 = ($1107 << 24 >> 24) == (0);
                                                    if ($1108) {
                                                        $533 = $26;
                                                    } else {
                                                        $482 = ((($3)) + 20 | 0);
                                                        $483 = ((($3)) + 4 | 0);
                                                        $484 = ((($3)) + 16 | 0);
                                                        $485 = ((($3)) + 24 | 0);
                                                        $486 = HEAP32[$482 >> 2] | 0;
                                                        $487 = $486 >>> 31;
                                                        $488 = HEAP32[$483 >> 2] | 0;
                                                        $489 = HEAP32[$3 >> 2] | 0;
                                                        $490 = HEAP32[$484 >> 2] | 0;
                                                        $491 = $486 << 1;
                                                        HEAP32[$482 >> 2] = $491;
                                                        $492 = HEAP32[$485 >> 2] | 0;
                                                        $493 = (($492) + 1) | 0;
                                                        HEAP32[$485 >> 2] = $493;
                                                        $494 = ($492 | 0) > (-1);
                                                        $495 = $490;
                                                        if ($494) {
                                                            $496 = (($490) - ($489)) | 0;
                                                            $497 = (($488) + 1) | 0;
                                                            $498 = (($497) - ($489)) | 0;
                                                            $499 = ($496 | 0) > ($498 | 0);
                                                            if ($499) {
                                                                $$38$ph = 11;
                                                                break;
                                                            }
                                                            $500 = HEAP8[$495 >> 0] | 0;
                                                            $501 = $500 & 255;
                                                            $502 = $501 << 8;
                                                            $503 = ((($495)) + 1 | 0);
                                                            $504 = HEAP8[$503 >> 0] | 0;
                                                            $505 = $504 & 255;
                                                            $506 = $502 | $505;
                                                            $507 = $506 << $493;
                                                            $508 = $507 | $491;
                                                            HEAP32[$482 >> 2] = $508;
                                                            $509 = (($492) + -15) | 0;
                                                            HEAP32[$485 >> 2] = $509;
                                                            $510 = ((($495)) + 2 | 0);
                                                            HEAP32[$484 >> 2] = $510;
                                                            $511 = $510;
                                                            $513 = $508; $516 = $509; $518 = $511;
                                                        } else {
                                                            $513 = $491; $516 = $493; $518 = $490;
                                                        }
                                                        HEAP32[$7 >> 2] = $487;
                                                        HEAP32[$5 >> 2] = $487;
                                                        $512 = $513 >>> 31;
                                                        $514 = $513 << 1;
                                                        HEAP32[$482 >> 2] = $514;
                                                        $515 = (($516) + 1) | 0;
                                                        HEAP32[$485 >> 2] = $515;
                                                        $517 = ($516 | 0) > (-1);
                                                        $519 = $518;
                                                        if ($517) {
                                                            $970 = (($518) - ($489)) | 0;
                                                            $971 = (($488) + 1) | 0;
                                                            $972 = (($971) - ($489)) | 0;
                                                            $973 = ($970 | 0) > ($972 | 0);
                                                            if ($973) {
                                                                $$38$ph = 11;
                                                                break;
                                                            }
                                                            $974 = HEAP8[$519 >> 0] | 0;
                                                            $975 = $974 & 255;
                                                            $976 = $975 << 8;
                                                            $977 = ((($519)) + 1 | 0);
                                                            $978 = HEAP8[$977 >> 0] | 0;
                                                            $979 = $978 & 255;
                                                            $980 = $976 | $979;
                                                            $981 = $980 << $515;
                                                            $982 = $981 | $514;
                                                            HEAP32[$482 >> 2] = $982;
                                                            $983 = (($516) + -15) | 0;
                                                            HEAP32[$485 >> 2] = $983;
                                                            $984 = ((($519)) + 2 | 0);
                                                            HEAP32[$484 >> 2] = $984;
                                                            $985 = $984;
                                                            $987 = $982; $990 = $983; $992 = $985;
                                                        } else {
                                                            $987 = $514; $990 = $515; $992 = $518;
                                                        }
                                                        HEAP32[$7 >> 2] = $512;
                                                        HEAP32[$29 >> 2] = $512;
                                                        $986 = $987 >>> 31;
                                                        $988 = $987 << 1;
                                                        HEAP32[$482 >> 2] = $988;
                                                        $989 = (($990) + 1) | 0;
                                                        HEAP32[$485 >> 2] = $989;
                                                        $991 = ($990 | 0) > (-1);
                                                        $993 = $992;
                                                        if ($991) {
                                                            $994 = (($992) - ($489)) | 0;
                                                            $995 = (($488) + 1) | 0;
                                                            $996 = (($995) - ($489)) | 0;
                                                            $997 = ($994 | 0) > ($996 | 0);
                                                            if ($997) {
                                                                $$38$ph = 11;
                                                                break;
                                                            }
                                                            $998 = HEAP8[$993 >> 0] | 0;
                                                            $999 = $998 & 255;
                                                            $1000 = $999 << 8;
                                                            $1001 = ((($993)) + 1 | 0);
                                                            $1002 = HEAP8[$1001 >> 0] | 0;
                                                            $1003 = $1002 & 255;
                                                            $1004 = $1000 | $1003;
                                                            $1005 = $1004 << $989;
                                                            $1006 = $1005 | $988;
                                                            HEAP32[$482 >> 2] = $1006;
                                                            $1007 = (($990) + -15) | 0;
                                                            HEAP32[$485 >> 2] = $1007;
                                                            $1008 = ((($993)) + 2 | 0);
                                                            HEAP32[$484 >> 2] = $1008;
                                                            $1009 = $1008;
                                                            $1011 = $1006; $1014 = $1007; $1016 = $1009;
                                                        } else {
                                                            $1011 = $988; $1014 = $989; $1016 = $992;
                                                        }
                                                        HEAP32[$7 >> 2] = $986;
                                                        HEAP32[$28 >> 2] = $986;
                                                        $1010 = $1011 >>> 31;
                                                        $1012 = $1011 << 1;
                                                        HEAP32[$482 >> 2] = $1012;
                                                        $1013 = (($1014) + 1) | 0;
                                                        HEAP32[$485 >> 2] = $1013;
                                                        $1015 = ($1014 | 0) > (-1);
                                                        $1017 = $1016;
                                                        if ($1015) {
                                                            $1018 = (($1016) - ($489)) | 0;
                                                            $1019 = (($488) + 1) | 0;
                                                            $1020 = (($1019) - ($489)) | 0;
                                                            $1021 = ($1018 | 0) > ($1020 | 0);
                                                            if ($1021) {
                                                                $$38$ph = 11;
                                                                break;
                                                            }
                                                            $1022 = HEAP8[$1017 >> 0] | 0;
                                                            $1023 = $1022 & 255;
                                                            $1024 = $1023 << 8;
                                                            $1025 = ((($1017)) + 1 | 0);
                                                            $1026 = HEAP8[$1025 >> 0] | 0;
                                                            $1027 = $1026 & 255;
                                                            $1028 = $1024 | $1027;
                                                            $1029 = $1028 << $1013;
                                                            $1030 = $1029 | $1012;
                                                            HEAP32[$482 >> 2] = $1030;
                                                            $1031 = (($1014) + -15) | 0;
                                                            HEAP32[$485 >> 2] = $1031;
                                                            $1032 = ((($1017)) + 2 | 0);
                                                            HEAP32[$484 >> 2] = $1032;
                                                        }
                                                        HEAP32[$7 >> 2] = $1010;
                                                        HEAP32[$27 >> 2] = $1010;
                                                        $533 = $487;
                                                    }
                                                    $520 = HEAP32[$32 >> 2] | 0;
                                                    $521 = (($520) + ($15 << 1) | 0);
                                                    $522 = HEAP16[$521 >> 1] | 0;
                                                    $523 = ($522 << 16 >> 16) == (128);
                                                    L313: do {
                                                        if ($523) {
                                                            $535 = ((($13)) + 3932 | 0);
                                                            $536 = HEAP32[$535 >> 2] | 0;
                                                            $537 = (($536) + ($15 << 4) | 0);
                                                            dest = $537; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 0 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
                                                        } else {
                                                            $524 = ((($0)) + 512344 | 0);
                                                            $525 = ((($0)) + 242340 | 0);
                                                            $526 = ((($0)) + 116 | 0);
                                                            $527 = ((($0)) + 512345 | 0);
                                                            $528 = ((($13)) + 3932 | 0);
                                                            $529 = ((($3)) + 20 | 0);
                                                            $530 = ((($3)) + 4 | 0);
                                                            $531 = ((($3)) + 16 | 0);
                                                            $532 = ((($3)) + 24 | 0);
                                                            $534 = ($533 | 0) == (0);
                                                            L316: do {
                                                                if ($534) {
                                                                    $$8438686783 = 0; $$in = 15415;
                                                                    while (1) {
                                                                        $542 = HEAP8[$$in >> 0] | 0;
                                                                        switch ($$491 | 0) {
                                                                            case 1: {
                                                                                $$sink$i523 = 0;
                                                                                label = 128;
                                                                                break;
                                                                            }
                                                                            case 2: {
                                                                                $543 = HEAP32[$529 >> 2] | 0;
                                                                                $544 = $543 >>> 31;
                                                                                $545 = HEAP32[$530 >> 2] | 0;
                                                                                $546 = HEAP32[$3 >> 2] | 0;
                                                                                $547 = HEAP32[$531 >> 2] | 0;
                                                                                $548 = $543 << 1;
                                                                                HEAP32[$529 >> 2] = $548;
                                                                                $549 = HEAP32[$532 >> 2] | 0;
                                                                                $550 = (($549) + 1) | 0;
                                                                                HEAP32[$532 >> 2] = $550;
                                                                                $551 = ($549 | 0) > (-1);
                                                                                $552 = $547;
                                                                                if ($551) {
                                                                                    $553 = (($547) - ($546)) | 0;
                                                                                    $554 = (($545) + 1) | 0;
                                                                                    $555 = (($554) - ($546)) | 0;
                                                                                    $556 = ($553 | 0) > ($555 | 0);
                                                                                    if ($556) {
                                                                                        $$38$ph = 11;
                                                                                        break L285;
                                                                                    }
                                                                                    $557 = HEAP8[$552 >> 0] | 0;
                                                                                    $558 = $557 & 255;
                                                                                    $559 = $558 << 8;
                                                                                    $560 = ((($552)) + 1 | 0);
                                                                                    $561 = HEAP8[$560 >> 0] | 0;
                                                                                    $562 = $561 & 255;
                                                                                    $563 = $559 | $562;
                                                                                    $564 = $563 << $550;
                                                                                    $565 = $564 | $548;
                                                                                    HEAP32[$529 >> 2] = $565;
                                                                                    $566 = (($549) + -15) | 0;
                                                                                    HEAP32[$532 >> 2] = $566;
                                                                                    $567 = ((($552)) + 2 | 0);
                                                                                    HEAP32[$531 >> 2] = $567;
                                                                                }
                                                                                HEAP32[$7 >> 2] = $544;
                                                                                $568 = $544 ^ 1;
                                                                                $$sink$i523 = $568;
                                                                                label = 128;
                                                                                break;
                                                                            }
                                                                            default: {
                                                                                $569 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $7) | 0);
                                                                                $570 = ($569 | 0) == (0);
                                                                                if (!($570)) {
                                                                                    $$38$ph = $569;
                                                                                    break L285;
                                                                                }
                                                                                $$pre729 = HEAP32[$7 >> 2] | 0;
                                                                                $572 = $$pre729;
                                                                            }
                                                                        }
                                                                        if ((label | 0) == 128) {
                                                                            label = 0;
                                                                            HEAP32[$7 >> 2] = $$sink$i523;
                                                                            $572 = $$sink$i523;
                                                                        }
                                                                        $571 = (($8) + ($$8438686783 << 2) | 0);
                                                                        HEAP32[$571 >> 2] = $572;
                                                                        $573 = ($572 | 0) > (-1);
                                                                        $574 = ($572 | 0) < ($$491 | 0);
                                                                        $or$cond495 = $573 & $574;
                                                                        if ($or$cond495) {
                                                                            $575 = (((($0)) + 5468 | 0) + ($572 << 2) | 0);
                                                                            $576 = HEAP32[$575 >> 2] | 0;
                                                                            $577 = ($576 | 0) == (0 | 0);
                                                                            if ($577) {
                                                                                label = 131;
                                                                            } else {
                                                                                $587 = $572;
                                                                            }
                                                                        } else {
                                                                            label = 131;
                                                                        }
                                                                        if ((label | 0) == 131) {
                                                                            label = 0;
                                                                            HEAP8[$524 >> 0] = 1;
                                                                            $578 = HEAP32[$525 >> 2] | 0;
                                                                            $579 = ($578 | 0) == (0);
                                                                            if ($579) {
                                                                                $$38$ph = 1041;
                                                                                break L285;
                                                                            }
                                                                            HEAP32[$571 >> 2] = 0;
                                                                            $580 = HEAP32[$526 >> 2] | 0;
                                                                            $581 = $580 | 4;
                                                                            HEAP32[$526 >> 2] = $581;
                                                                            $587 = 0;
                                                                        }
                                                                        $582 = HEAP8[$527 >> 0] | 0;
                                                                        $583 = ($582 << 24 >> 24) == (0);
                                                                        if ($583) {
                                                                            $584 = HEAP8[$524 >> 0] | 0;
                                                                            $585 = ($584 << 24 >> 24) == (0);
                                                                            if ($585) {
                                                                                $586 = (((($0)) + 5468 | 0) + ($587 << 2) | 0);
                                                                                $588 = HEAP32[$586 >> 2] | 0;
                                                                                $589 = ($588 | 0) == (0 | 0);
                                                                                if ($589) {
                                                                                    $594 = 0;
                                                                                } else {
                                                                                    $590 = ((($588)) + 72 | 0);
                                                                                    $591 = HEAP8[$590 >> 0] | 0;
                                                                                    $592 = ($591 << 24 >> 24) != (0);
                                                                                    $594 = $592;
                                                                                }
                                                                                $593 = $594 ^ 1;
                                                                                $596 = $593;
                                                                            } else {
                                                                                $596 = 1;
                                                                            }
                                                                        } else {
                                                                            $596 = 1;
                                                                        }
                                                                        $595 = $596 & 1;
                                                                        HEAP8[$524 >> 0] = $595;
                                                                        $597 = $587 & 255;
                                                                        $598 = HEAP32[$528 >> 2] | 0;
                                                                        $599 = $542 & 255;
                                                                        $600 = (($599) + 5) | 0;
                                                                        $601 = ((($598) + ($15 << 4) | 0) + ($600) | 0);
                                                                        HEAP8[$601 >> 0] = $597;
                                                                        $602 = HEAP32[$528 >> 2] | 0;
                                                                        $603 = (($599) + 4) | 0;
                                                                        $604 = ((($602) + ($15 << 4) | 0) + ($603) | 0);
                                                                        HEAP8[$604 >> 0] = $597;
                                                                        $605 = HEAP32[$528 >> 2] | 0;
                                                                        $606 = (($599) + 1) | 0;
                                                                        $607 = ((($605) + ($15 << 4) | 0) + ($606) | 0);
                                                                        HEAP8[$607 >> 0] = $597;
                                                                        $608 = HEAP32[$528 >> 2] | 0;
                                                                        $609 = ((($608) + ($15 << 4) | 0) + ($599) | 0);
                                                                        HEAP8[$609 >> 0] = $597;
                                                                        $610 = (($$8438686783) + 1) | 0;
                                                                        $611 = ($$8438686783 | 0) < (3);
                                                                        if (!($611)) {
                                                                            break L313;
                                                                        }
                                                                        $$phi$trans$insert = (($5) + ($610 << 2) | 0);
                                                                        $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
                                                                        $612 = $610 << 18;
                                                                        $613 = $612 >> 16;
                                                                        $614 = (15415 + ($613) | 0);
                                                                        $615 = ($$pre | 0) == (0);
                                                                        if ($615) {
                                                                            $$8438686783 = $610; $$in = $614;
                                                                        } else {
                                                                            break L316;
                                                                        }
                                                                    }
                                                                }
                                                            } while (0);
                                                            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25537, $vararg_buffer13);
                                                            $$38$ph = 459814;
                                                            break L285;
                                                        }
                                                    } while (0);
                                                    $538 = ((($11)) + 2 | 0);
                                                    $539 = $21 << 16 >> 16;
                                                    $540 = $23 << 16 >> 16;
                                                    $541 = ((($13)) + 3916 | 0);
                                                    $$9439685 = 0; $634 = $468; $637 = $471;
                                                    L346: while (1) {
                                                        $616 = HEAP32[$455 >> 2] | 0;
                                                        $617 = ((($616) + ($15 << 2) | 0) + ($$9439685) | 0);
                                                        $618 = HEAP8[$617 >> 0] | 0;
                                                        $619 = $$9439685 << 18;
                                                        $620 = $619 >> 16;
                                                        $621 = (10975 + ($620) | 0);
                                                        $622 = HEAP8[$621 >> 0] | 0;
                                                        $623 = (($8) + ($$9439685 << 2) | 0);
                                                        $624 = HEAP32[$623 >> 2] | 0;
                                                        $625 = $624 & 255;
                                                        $626 = $622 & 255;
                                                        $627 = (($626) + 7) | 0;
                                                        $628 = (($2) + ($627) | 0);
                                                        HEAP8[$628 >> 0] = $625;
                                                        $629 = (($626) + 6) | 0;
                                                        $630 = (($2) + ($629) | 0);
                                                        HEAP8[$630 >> 0] = $625;
                                                        $631 = (($626) + 1) | 0;
                                                        $632 = (($2) + ($631) | 0);
                                                        HEAP8[$632 >> 0] = $625;
                                                        $633 = (($2) + ($626) | 0);
                                                        HEAP8[$633 >> 0] = $625;
                                                        $sext = $634 << 24;
                                                        $635 = $sext >> 24;
                                                        $636 = ($sext | 0) > (0);
                                                        L348: do {
                                                            if ($636) {
                                                                $sext465 = $637 << 16;
                                                                $638 = $sext465 >> 16;
                                                                $639 = ($618 << 24 >> 24) == (4);
                                                                $$0440684 = 0;
                                                                while (1) {
                                                                    $640 = Math_imul($$0440684, $638) | 0;
                                                                    $641 = (($640) + ($620)) | 0;
                                                                    $sext466 = $641 << 16;
                                                                    $642 = $sext466 >> 16;
                                                                    $643 = (15415 + ($642) | 0);
                                                                    $644 = HEAP8[$643 >> 0] | 0;
                                                                    $645 = (10975 + ($642) | 0);
                                                                    $646 = HEAP8[$645 >> 0] | 0;
                                                                    __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($1, $2, $642, $638, $625, $11);
                                                                    $647 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                                                                    $648 = ($647 | 0) == (0);
                                                                    if (!($648)) {
                                                                        label = 144;
                                                                        break L346;
                                                                    }
                                                                    $649 = HEAP32[$4 >> 2] | 0;
                                                                    $650 = $649 & 1;
                                                                    $651 = ($650 | 0) == (0);
                                                                    $652 = $649 >>> 1;
                                                                    $653 = (0 - ($652)) | 0;
                                                                    $654 = (($649) + 1) | 0;
                                                                    $655 = $654 >>> 1;
                                                                    $storemerge$i508 = $651 ? $653 : $655;
                                                                    $656 = HEAP16[$11 >> 1] | 0;
                                                                    $657 = $656 & 65535;
                                                                    $658 = (($storemerge$i508) + ($657)) | 0;
                                                                    $659 = $658 & 65535;
                                                                    HEAP16[$11 >> 1] = $659;
                                                                    $660 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($3, $4) | 0);
                                                                    $661 = ($660 | 0) == (0);
                                                                    if (!($661)) {
                                                                        label = 146;
                                                                        break L346;
                                                                    }
                                                                    $662 = HEAP32[$4 >> 2] | 0;
                                                                    $663 = $662 & 1;
                                                                    $664 = ($663 | 0) == (0);
                                                                    $665 = $662 >>> 1;
                                                                    $666 = (0 - ($665)) | 0;
                                                                    $667 = (($662) + 1) | 0;
                                                                    $668 = $667 >>> 1;
                                                                    $storemerge$i = $664 ? $666 : $668;
                                                                    $669 = HEAP16[$538 >> 1] | 0;
                                                                    $670 = $669 & 65535;
                                                                    $671 = (($storemerge$i) + ($670)) | 0;
                                                                    $672 = $671 & 65535;
                                                                    HEAP16[$538 >> 1] = $672;
                                                                    $sext467 = $671 << 16;
                                                                    $673 = $sext467 >> 16;
                                                                    $674 = ($673 | 0) < ($539 | 0);
                                                                    $675 = ($673 | 0) > ($540 | 0);
                                                                    $or$cond499 = $674 | $675;
                                                                    if ($or$cond499) {
                                                                        HEAP32[$vararg_buffer15 >> 2] = $673;
                                                                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer15);
                                                                    }
                                                                    L357: do {
                                                                        switch ($618 << 24 >> 24) {
                                                                            case 1: {
                                                                                $676 = HEAP32[$11 >> 2] | 0;
                                                                                $677 = HEAP32[$541 >> 2] | 0;
                                                                                $678 = $644 & 255;
                                                                                $679 = ((($677) + ($15 << 6) | 0) + ($678 << 2) | 0);
                                                                                HEAP8[$679 >> 0] = $676 & 255; HEAP8[$679 + 1 >> 0] = ($676 >> 8) & 255; HEAP8[$679 + 2 >> 0] = ($676 >> 16) & 255; HEAP8[$679 + 3 >> 0] = $676 >> 24;
                                                                                $680 = HEAP32[$11 >> 2] | 0;
                                                                                $681 = HEAP32[$541 >> 2] | 0;
                                                                                $682 = (($678) + 1) | 0;
                                                                                $683 = ((($681) + ($15 << 6) | 0) + ($682 << 2) | 0);
                                                                                HEAP8[$683 >> 0] = $680 & 255; HEAP8[$683 + 1 >> 0] = ($680 >> 8) & 255; HEAP8[$683 + 2 >> 0] = ($680 >> 16) & 255; HEAP8[$683 + 3 >> 0] = $680 >> 24;
                                                                                $684 = HEAP32[$11 >> 2] | 0;
                                                                                $685 = HEAP32[$541 >> 2] | 0;
                                                                                $686 = (($678) + 4) | 0;
                                                                                $687 = ((($685) + ($15 << 6) | 0) + ($686 << 2) | 0);
                                                                                HEAP8[$687 >> 0] = $684 & 255; HEAP8[$687 + 1 >> 0] = ($684 >> 8) & 255; HEAP8[$687 + 2 >> 0] = ($684 >> 16) & 255; HEAP8[$687 + 3 >> 0] = $684 >> 24;
                                                                                $688 = HEAP32[$11 >> 2] | 0;
                                                                                $689 = HEAP32[$541 >> 2] | 0;
                                                                                $690 = (($678) + 5) | 0;
                                                                                $691 = ((($689) + ($15 << 6) | 0) + ($690 << 2) | 0);
                                                                                HEAP8[$691 >> 0] = $688 & 255; HEAP8[$691 + 1 >> 0] = ($688 >> 8) & 255; HEAP8[$691 + 2 >> 0] = ($688 >> 16) & 255; HEAP8[$691 + 3 >> 0] = $688 >> 24;
                                                                                $692 = HEAP32[$11 >> 2] | 0;
                                                                                $693 = $646 & 255;
                                                                                $694 = (($1) + ($693 << 2) | 0);
                                                                                HEAP8[$694 >> 0] = $692 & 255; HEAP8[$694 + 1 >> 0] = ($692 >> 8) & 255; HEAP8[$694 + 2 >> 0] = ($692 >> 16) & 255; HEAP8[$694 + 3 >> 0] = $692 >> 24;
                                                                                $695 = (($693) + 1) | 0;
                                                                                $696 = (($1) + ($695 << 2) | 0);
                                                                                HEAP8[$696 >> 0] = $692 & 255; HEAP8[$696 + 1 >> 0] = ($692 >> 8) & 255; HEAP8[$696 + 2 >> 0] = ($692 >> 16) & 255; HEAP8[$696 + 3 >> 0] = $692 >> 24;
                                                                                $697 = (($693) + 6) | 0;
                                                                                $698 = (($1) + ($697 << 2) | 0);
                                                                                HEAP8[$698 >> 0] = $692 & 255; HEAP8[$698 + 1 >> 0] = ($692 >> 8) & 255; HEAP8[$698 + 2 >> 0] = ($692 >> 16) & 255; HEAP8[$698 + 3 >> 0] = $692 >> 24;
                                                                                $699 = (($693) + 7) | 0;
                                                                                $$sink = $699; $$sink$sink$sink = $692;
                                                                                break;
                                                                            }
                                                                            case 2: {
                                                                                $700 = HEAP32[$11 >> 2] | 0;
                                                                                $701 = HEAP32[$541 >> 2] | 0;
                                                                                $702 = $644 & 255;
                                                                                $703 = ((($701) + ($15 << 6) | 0) + ($702 << 2) | 0);
                                                                                HEAP8[$703 >> 0] = $700 & 255; HEAP8[$703 + 1 >> 0] = ($700 >> 8) & 255; HEAP8[$703 + 2 >> 0] = ($700 >> 16) & 255; HEAP8[$703 + 3 >> 0] = $700 >> 24;
                                                                                $704 = HEAP32[$11 >> 2] | 0;
                                                                                $705 = HEAP32[$541 >> 2] | 0;
                                                                                $706 = (($702) + 1) | 0;
                                                                                $707 = ((($705) + ($15 << 6) | 0) + ($706 << 2) | 0);
                                                                                HEAP8[$707 >> 0] = $704 & 255; HEAP8[$707 + 1 >> 0] = ($704 >> 8) & 255; HEAP8[$707 + 2 >> 0] = ($704 >> 16) & 255; HEAP8[$707 + 3 >> 0] = $704 >> 24;
                                                                                $708 = HEAP32[$11 >> 2] | 0;
                                                                                $709 = $646 & 255;
                                                                                $710 = (($1) + ($709 << 2) | 0);
                                                                                HEAP8[$710 >> 0] = $708 & 255; HEAP8[$710 + 1 >> 0] = ($708 >> 8) & 255; HEAP8[$710 + 2 >> 0] = ($708 >> 16) & 255; HEAP8[$710 + 3 >> 0] = $708 >> 24;
                                                                                $711 = (($709) + 1) | 0;
                                                                                $$sink = $711; $$sink$sink$sink = $708;
                                                                                break;
                                                                            }
                                                                            default: {
                                                                                $712 = HEAP32[$11 >> 2] | 0;
                                                                                $713 = HEAP32[$541 >> 2] | 0;
                                                                                $714 = $644 & 255;
                                                                                $715 = ((($713) + ($15 << 6) | 0) + ($714 << 2) | 0);
                                                                                HEAP8[$715 >> 0] = $712 & 255; HEAP8[$715 + 1 >> 0] = ($712 >> 8) & 255; HEAP8[$715 + 2 >> 0] = ($712 >> 16) & 255; HEAP8[$715 + 3 >> 0] = $712 >> 24;
                                                                                $716 = HEAP32[$11 >> 2] | 0;
                                                                                if ($639) {
                                                                                    $717 = HEAP32[$541 >> 2] | 0;
                                                                                    $718 = (($714) + 4) | 0;
                                                                                    $719 = ((($717) + ($15 << 6) | 0) + ($718 << 2) | 0);
                                                                                    HEAP8[$719 >> 0] = $716 & 255; HEAP8[$719 + 1 >> 0] = ($716 >> 8) & 255; HEAP8[$719 + 2 >> 0] = ($716 >> 16) & 255; HEAP8[$719 + 3 >> 0] = $716 >> 24;
                                                                                    $720 = HEAP32[$11 >> 2] | 0;
                                                                                    $721 = $646 & 255;
                                                                                    $722 = (($1) + ($721 << 2) | 0);
                                                                                    HEAP8[$722 >> 0] = $720 & 255; HEAP8[$722 + 1 >> 0] = ($720 >> 8) & 255; HEAP8[$722 + 2 >> 0] = ($720 >> 16) & 255; HEAP8[$722 + 3 >> 0] = $720 >> 24;
                                                                                    $723 = (($721) + 6) | 0;
                                                                                    $$sink = $723; $$sink$sink$sink = $720;
                                                                                    break L357;
                                                                                } else {
                                                                                    $724 = $646 & 255;
                                                                                    $$sink = $724; $$sink$sink$sink = $716;
                                                                                    break L357;
                                                                                }
                                                                            }
                                                                        }
                                                                    } while (0);
                                                                    $725 = (($1) + ($$sink << 2) | 0);
                                                                    HEAP8[$725 >> 0] = $$sink$sink$sink & 255; HEAP8[$725 + 1 >> 0] = ($$sink$sink$sink >> 8) & 255; HEAP8[$725 + 2 >> 0] = ($$sink$sink$sink >> 16) & 255; HEAP8[$725 + 3 >> 0] = $$sink$sink$sink >> 24;
                                                                    $726 = (($$0440684) + 1) | 0;
                                                                    $727 = ($726 | 0) < ($635 | 0);
                                                                    if ($727) {
                                                                        $$0440684 = $726;
                                                                    } else {
                                                                        break L348;
                                                                    }
                                                                }
                                                            }
                                                        } while (0);
                                                        $728 = (($$9439685) + 1) | 0;
                                                        $729 = ($$9439685 | 0) < (3);
                                                        if (!($729)) {
                                                            label = 160;
                                                            break;
                                                        }
                                                        $$phi$trans$insert730 = (($9) + ($728 << 2) | 0);
                                                        $$pre731 = HEAP32[$$phi$trans$insert730 >> 2] | 0;
                                                        $$phi$trans$insert732 = (($10) + ($728 << 2) | 0);
                                                        $$pre733 = HEAP32[$$phi$trans$insert732 >> 2] | 0;
                                                        $$9439685 = $728; $634 = $$pre731; $637 = $$pre733;
                                                    }
                                                    if ((label | 0) == 144) {
                                                        $$37 = $647;
                                                    }
                                                    else if ((label | 0) == 146) {
                                                        $$37 = $660;
                                                    }
                                                    else if ((label | 0) == 160) {
                                                        $$39 = 0;
                                                        STACKTOP = sp; return ($$39 | 0);
                                                    }
                                                    $$38$ph = $$37;
                                                }
                                            } else {
                                                $$38$ph = $1081;
                                            }
                                        }
                                    } else {
                                        $$38$ph = $1056;
                                    }
                                }
                            } else {
                                $$38$ph = $480;
                            }
                        }
                    } else {
                        $$38$ph = $457;
                    }
                } while (0);
                $$39 = $$38$ph;
                STACKTOP = sp; return ($$39 | 0);
                break;
            }
            default: {
                $$39 = 0;
                STACKTOP = sp; return ($$39 | 0);
            }
        }
        return (0) | 0;
    }
    function __ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_983($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $$0$i$ph = 0, $$0$i7678 = 0, $$074 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
        var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 20 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = $3 >>> 24;
        $5 = ($4 | 0) == (0);
        do {
            if ($5) {
                $9 = $3 >>> 16;
                $10 = ($9 | 0) == (0);
                if (!($10)) {
                    $11 = (15630 + ($9) | 0);
                    $12 = HEAP8[$11 >> 0] | 0;
                    $13 = $12 & 255;
                    $14 = (($13) + 8) | 0;
                    $$0$i$ph = $14;
                    break;
                }
                $15 = $3 >>> 8;
                $16 = ($15 | 0) == (0);
                if (!($16)) {
                    $17 = (15630 + ($15) | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    $20 = (($19) + 16) | 0;
                    $$0$i$ph = $20;
                    break;
                }
                $21 = ($3 | 0) == (0);
                if ($21) {
                    $$0 = 12;
                    return ($$0 | 0);
                } else {
                    $22 = (15630 + ($3) | 0);
                    $23 = HEAP8[$22 >> 0] | 0;
                    $24 = $23 & 255;
                    $25 = (($24) + 24) | 0;
                    $$0$i$ph = $25;
                    break;
                }
            } else {
                $6 = (15630 + ($4) | 0);
                $7 = HEAP8[$6 >> 0] | 0;
                $8 = $7 & 255;
                $$0$i$ph = $8;
            }
        } while (0);
        $26 = ((($0)) + 4 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = HEAP32[$0 >> 2] | 0;
        $29 = (($27) - ($28)) | 0;
        $30 = ($$0$i$ph | 0) > (16);
        $31 = ((($0)) + 16 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = (($32) - ($28)) | 0;
        $34 = $32;
        do {
            if ($30) {
                $35 = $3 << 16;
                HEAP32[$2 >> 2] = $35;
                $36 = ((($0)) + 24 | 0);
                $37 = HEAP32[$36 >> 2] | 0;
                $38 = (($37) + 16) | 0;
                HEAP32[$36 >> 2] = $38;
                $39 = ($37 | 0) > (-16);
                do {
                    if ($39) {
                        $40 = (($29) + 1) | 0;
                        $41 = ($33 | 0) > ($40 | 0);
                        if ($41) {
                            $$0 = 11;
                            return ($$0 | 0);
                        } else {
                            $42 = HEAP8[$34 >> 0] | 0;
                            $43 = $42 & 255;
                            $44 = $43 << 8;
                            $45 = ((($34)) + 1 | 0);
                            $46 = HEAP8[$45 >> 0] | 0;
                            $47 = $46 & 255;
                            $48 = $44 | $47;
                            $49 = $48 << $38;
                            $50 = $49 | $35;
                            HEAP32[$2 >> 2] = $50;
                            HEAP32[$36 >> 2] = $37;
                            $51 = ((($34)) + 2 | 0);
                            HEAP32[$31 >> 2] = $51;
                            $52 = $51;
                            $55 = $50; $57 = $37; $60 = $52; $64 = $51;
                            break;
                        }
                    } else {
                        $55 = $35; $57 = $38; $60 = $32; $64 = $34;
                    }
                } while (0);
                $53 = (($$0$i$ph) + -15) | 0;
                $54 = $55 << $53;
                HEAP32[$2 >> 2] = $54;
                $56 = (($57) + ($53)) | 0;
                HEAP32[$36 >> 2] = $56;
                $58 = ($56 | 0) > (0);
                if ($58) {
                    $59 = (($60) - ($28)) | 0;
                    $61 = (($29) + 1) | 0;
                    $62 = ($59 | 0) > ($61 | 0);
                    if ($62) {
                        $$0 = 11;
                        return ($$0 | 0);
                    } else {
                        $63 = HEAP8[$64 >> 0] | 0;
                        $65 = $63 & 255;
                        $66 = $65 << 8;
                        $67 = ((($64)) + 1 | 0);
                        $68 = HEAP8[$67 >> 0] | 0;
                        $69 = $68 & 255;
                        $70 = $66 | $69;
                        $71 = $70 << $56;
                        $72 = $71 | $54;
                        HEAP32[$2 >> 2] = $72;
                        $73 = (($56) + -16) | 0;
                        HEAP32[$36 >> 2] = $73;
                        $74 = ((($64)) + 2 | 0);
                        HEAP32[$31 >> 2] = $74;
                        $75 = $74;
                        $$pre$phiZ2D = $36; $102 = $73; $105 = $75; $109 = $74; $99 = $72;
                        label = 20;
                        break;
                    }
                } else {
                    $$pre$phiZ2D = $36; $102 = $56; $105 = $60; $109 = $64; $99 = $54;
                    label = 20;
                }
            } else {
                $76 = (($$0$i$ph) + 1) | 0;
                $77 = $3 << $76;
                HEAP32[$2 >> 2] = $77;
                $78 = ((($0)) + 24 | 0);
                $79 = HEAP32[$78 >> 2] | 0;
                $80 = (($79) + ($76)) | 0;
                HEAP32[$78 >> 2] = $80;
                $81 = ($80 | 0) > (0);
                do {
                    if ($81) {
                        $82 = (($29) + 1) | 0;
                        $83 = ($33 | 0) > ($82 | 0);
                        if ($83) {
                            $$0 = 11;
                            return ($$0 | 0);
                        } else {
                            $84 = HEAP8[$34 >> 0] | 0;
                            $85 = $84 & 255;
                            $86 = $85 << 8;
                            $87 = ((($34)) + 1 | 0);
                            $88 = HEAP8[$87 >> 0] | 0;
                            $89 = $88 & 255;
                            $90 = $86 | $89;
                            $91 = $90 << $80;
                            $92 = $91 | $77;
                            HEAP32[$2 >> 2] = $92;
                            $93 = (($80) + -16) | 0;
                            HEAP32[$78 >> 2] = $93;
                            $94 = ((($34)) + 2 | 0);
                            HEAP32[$31 >> 2] = $94;
                            $95 = $94;
                            $123 = $94; $124 = $93; $125 = $95; $126 = $92;
                            break;
                        }
                    } else {
                        $123 = $34; $124 = $80; $125 = $32; $126 = $77;
                    }
                } while (0);
                $96 = ($$0$i$ph | 0) == (0);
                if ($96) {
                    $$0$i7678 = 0; $$074 = 0;
                } else {
                    $$pre$phiZ2D = $78; $102 = $124; $105 = $125; $109 = $123; $99 = $126;
                    label = 20;
                }
            }
        } while (0);
        do {
            if ((label | 0) == 20) {
                $97 = (32 - ($$0$i$ph)) | 0;
                $98 = $99 >>> $97;
                $100 = $99 << $$0$i$ph;
                HEAP32[$2 >> 2] = $100;
                $101 = (($102) + ($$0$i$ph)) | 0;
                HEAP32[$$pre$phiZ2D >> 2] = $101;
                $103 = ($101 | 0) > (0);
                if ($103) {
                    $104 = (($105) - ($28)) | 0;
                    $106 = (($29) + 1) | 0;
                    $107 = ($104 | 0) > ($106 | 0);
                    if ($107) {
                        $$0 = 11;
                        return ($$0 | 0);
                    } else {
                        $108 = HEAP8[$109 >> 0] | 0;
                        $110 = $108 & 255;
                        $111 = $110 << 8;
                        $112 = ((($109)) + 1 | 0);
                        $113 = HEAP8[$112 >> 0] | 0;
                        $114 = $113 & 255;
                        $115 = $111 | $114;
                        $116 = $115 << $101;
                        $117 = $116 | $100;
                        HEAP32[$2 >> 2] = $117;
                        $118 = (($101) + -16) | 0;
                        HEAP32[$$pre$phiZ2D >> 2] = $118;
                        $119 = ((($109)) + 2 | 0);
                        HEAP32[$31 >> 2] = $119;
                        $$0$i7678 = $$0$i$ph; $$074 = $98;
                        break;
                    }
                } else {
                    $$0$i7678 = $$0$i$ph; $$074 = $98;
                }
            }
        } while (0);
        $120 = 1 << $$0$i7678;
        $121 = (($120) + -1) | 0;
        $122 = (($121) + ($$074)) | 0;
        HEAP32[$1 >> 2] = $122;
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$$20$i = 0, $$$20$i80 = 0, $$$i = 0, $$$i78 = 0, $$$sink = 0, $$0 = 0, $$1$i = 0, $$1$i82 = 0, $$119$i = 0, $$119$i81 = 0, $$20$i = 0, $$20$i79 = 0, $$neg$i = 0, $$neg$i83 = 0, $$pn = 0, $$sink = 0, $$sroa$6$0$in$in = 0, $$sroa$6$0$in$in$in$in = 0, $10 = 0, $11 = 0;
        var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
        var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0;
        var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond77 = 0, $sext = 0, $sext72 = 0, $sext73 = 0, $sext76 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        $6 = (10975 + ($2) | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = (($7) + -6) << 24 >> 24;
        $9 = $8 & 255;
        $10 = (($9) + ($3)) | 0;
        $11 = (($7) + -1) << 24 >> 24;
        $12 = $11 & 255;
        $13 = (($1) + ($12) | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = (($1) + ($9) | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = $10 & 255;
        $18 = (($1) + ($17) | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = (($7) + -7) << 24 >> 24;
        $21 = $20 & 255;
        $22 = (($0) + ($12 << 2) | 0);
        $23 = HEAPU8[$22 >> 0] | (HEAPU8[$22 + 1 >> 0] << 8) | (HEAPU8[$22 + 2 >> 0] << 16) | (HEAPU8[$22 + 3 >> 0] << 24);
        $24 = (($0) + ($9 << 2) | 0);
        $25 = HEAPU8[$24 >> 0] | (HEAPU8[$24 + 1 >> 0] << 8) | (HEAPU8[$24 + 2 >> 0] << 16) | (HEAPU8[$24 + 3 >> 0] << 24);
        $26 = ($19 << 24 >> 24) == (-2);
        if ($26) {
            $27 = (($1) + ($21) | 0);
            $28 = HEAP8[$27 >> 0] | 0;
            $$0 = $28; $$pn = $21;
        } else {
            $$0 = $19; $$pn = $17;
        }
        $$sroa$6$0$in$in$in$in = (($0) + ($$pn << 2) | 0);
        $$sroa$6$0$in$in = HEAPU8[$$sroa$6$0$in$in$in$in >> 0] | (HEAPU8[$$sroa$6$0$in$in$in$in + 1 >> 0] << 8) | (HEAPU8[$$sroa$6$0$in$in$in$in + 2 >> 0] << 16) | (HEAPU8[$$sroa$6$0$in$in$in$in + 3 >> 0] << 24);
        $29 = ($14 << 24 >> 24) == ($4 << 24 >> 24);
        $30 = ($16 << 24 >> 24) == ($4 << 24 >> 24);
        $31 = ($16 << 24 >> 24) == (-2);
        $32 = ($$0 << 24 >> 24) == (-2);
        $or$cond = $31 & $32;
        $33 = ($14 << 24 >> 24) > (-2);
        $or$cond77 = $33 & $or$cond;
        if ($or$cond77) {
            HEAP8[$5 >> 0] = $23 & 255; HEAP8[$5 + 1 >> 0] = ($23 >> 8) & 255; HEAP8[$5 + 2 >> 0] = ($23 >> 16) & 255; HEAP8[$5 + 3 >> 0] = $23 >> 24;
            return;
        }
        $34 = $29 & 1;
        $35 = $30 & 1;
        $36 = (($35) + ($34)) | 0;
        $37 = ($$0 << 24 >> 24) == ($4 << 24 >> 24);
        $38 = $37 & 1;
        $39 = (($36) + ($38)) | 0;
        $40 = ($39 | 0) == (1);
        if ($40) {
            $$sink = $30 ? $25 : $$sroa$6$0$in$in;
            $$$sink = $29 ? $23 : $$sink;
            HEAP8[$5 >> 0] = $$$sink & 255; HEAP8[$5 + 1 >> 0] = ($$$sink >> 8) & 255; HEAP8[$5 + 2 >> 0] = ($$$sink >> 16) & 255; HEAP8[$5 + 3 >> 0] = $$$sink >> 24;
            return;
        } else {
            $sext = $23 << 16;
            $41 = $sext >> 16;
            $sext72 = $25 << 16;
            $42 = $sext72 >> 16;
            $sext73 = $$sroa$6$0$in$in << 16;
            $43 = $sext73 >> 16;
            $44 = ($42 | 0) < ($41 | 0);
            $$$i = $44 ? $42 : $41;
            $$20$i = $44 ? $41 : $42;
            $45 = ($$$i | 0) > ($43 | 0);
            $46 = ($$20$i | 0) < ($43 | 0);
            $$$20$i = $46 ? $43 : $$20$i;
            $$119$i = $45 ? $43 : $$$i;
            $$1$i = $45 ? $$20$i : $$$20$i;
            $$neg$i = (($42) + ($41)) | 0;
            $47 = (($$neg$i) + ($43)) | 0;
            $48 = (($47) - ($$119$i)) | 0;
            $49 = (($48) - ($$1$i)) | 0;
            $50 = $49 & 65535;
            HEAP16[$5 >> 1] = $50;
            $51 = $23 >> 16;
            $52 = $25 >> 16;
            $sext76 = $$sroa$6$0$in$in >> 16;
            $53 = ($52 | 0) < ($51 | 0);
            $$$i78 = $53 ? $52 : $51;
            $$20$i79 = $53 ? $51 : $52;
            $54 = ($$$i78 | 0) > ($sext76 | 0);
            $55 = ($$20$i79 | 0) < ($sext76 | 0);
            $$$20$i80 = $55 ? $sext76 : $$20$i79;
            $$119$i81 = $54 ? $sext76 : $$$i78;
            $$1$i82 = $54 ? $$20$i79 : $$$20$i80;
            $$neg$i83 = (($52) + ($51)) | 0;
            $56 = (($$neg$i83) + ($sext76)) | 0;
            $57 = (($56) - ($$119$i81)) | 0;
            $58 = (($57) - ($$1$i82)) | 0;
            $59 = $58 & 65535;
            $60 = ((($5)) + 2 | 0);
            HEAP16[$60 >> 1] = $59;
            return;
        }
    }
    function __ZN7WelsDec22UpdateP16x16MotionInfoEPNS_10TagDqLayerEaPs($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = $1 << 24 >> 24;
        $4 = $3 << 8;
        $5 = $4 | $3;
        $6 = $5 & 65535;
        $7 = HEAPU8[$2 >> 0] | (HEAPU8[$2 + 1 >> 0] << 8) | (HEAPU8[$2 + 2 >> 0] << 16) | (HEAPU8[$2 + 3 >> 0] << 24);
        $8 = ((($0)) + 4040 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($0)) + 3932 | 0);
        $11 = ((($0)) + 3916 | 0);
        $12 = HEAP8[15415] | 0;
        $13 = $12 & 255;
        $14 = HEAP32[$10 >> 2] | 0;
        $15 = ((($14) + ($9 << 4) | 0) + ($13) | 0);
        HEAP8[$15 >> 0] = $6 & 255; HEAP8[$15 + 1 >> 0] = $6 >> 8;
        $16 = HEAP32[$10 >> 2] | 0;
        $17 = (($12) + 4) << 24 >> 24;
        $18 = $17 & 255;
        $19 = ((($16) + ($9 << 4) | 0) + ($18) | 0);
        HEAP8[$19 >> 0] = $6 & 255; HEAP8[$19 + 1 >> 0] = $6 >> 8;
        $20 = HEAP32[$11 >> 2] | 0;
        $21 = ((($20) + ($9 << 6) | 0) + ($13 << 2) | 0);
        HEAP8[$21 >> 0] = $7 & 255; HEAP8[$21 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$21 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$21 + 3 >> 0] = $7 >> 24;
        $22 = HEAP32[$11 >> 2] | 0;
        $23 = (($13) + 1) | 0;
        $24 = ((($22) + ($9 << 6) | 0) + ($23 << 2) | 0);
        HEAP8[$24 >> 0] = $7 & 255; HEAP8[$24 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$24 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$24 + 3 >> 0] = $7 >> 24;
        $25 = HEAP32[$11 >> 2] | 0;
        $26 = ((($25) + ($9 << 6) | 0) + ($18 << 2) | 0);
        HEAP8[$26 >> 0] = $7 & 255; HEAP8[$26 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$26 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$26 + 3 >> 0] = $7 >> 24;
        $27 = HEAP32[$11 >> 2] | 0;
        $28 = (($18) + 1) | 0;
        $29 = ((($27) + ($9 << 6) | 0) + ($28 << 2) | 0);
        HEAP8[$29 >> 0] = $7 & 255; HEAP8[$29 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$29 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$29 + 3 >> 0] = $7 >> 24;
        $30 = HEAP8[(15419) >> 0] | 0;
        $31 = $30 & 255;
        $32 = HEAP32[$10 >> 2] | 0;
        $33 = ((($32) + ($9 << 4) | 0) + ($31) | 0);
        HEAP8[$33 >> 0] = $6 & 255; HEAP8[$33 + 1 >> 0] = $6 >> 8;
        $34 = HEAP32[$10 >> 2] | 0;
        $35 = (($30) + 4) << 24 >> 24;
        $36 = $35 & 255;
        $37 = ((($34) + ($9 << 4) | 0) + ($36) | 0);
        HEAP8[$37 >> 0] = $6 & 255; HEAP8[$37 + 1 >> 0] = $6 >> 8;
        $38 = HEAP32[$11 >> 2] | 0;
        $39 = ((($38) + ($9 << 6) | 0) + ($31 << 2) | 0);
        HEAP8[$39 >> 0] = $7 & 255; HEAP8[$39 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$39 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$39 + 3 >> 0] = $7 >> 24;
        $40 = HEAP32[$11 >> 2] | 0;
        $41 = (($31) + 1) | 0;
        $42 = ((($40) + ($9 << 6) | 0) + ($41 << 2) | 0);
        HEAP8[$42 >> 0] = $7 & 255; HEAP8[$42 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$42 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$42 + 3 >> 0] = $7 >> 24;
        $43 = HEAP32[$11 >> 2] | 0;
        $44 = ((($43) + ($9 << 6) | 0) + ($36 << 2) | 0);
        HEAP8[$44 >> 0] = $7 & 255; HEAP8[$44 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$44 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$44 + 3 >> 0] = $7 >> 24;
        $45 = HEAP32[$11 >> 2] | 0;
        $46 = (($36) + 1) | 0;
        $47 = ((($45) + ($9 << 6) | 0) + ($46 << 2) | 0);
        HEAP8[$47 >> 0] = $7 & 255; HEAP8[$47 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$47 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$47 + 3 >> 0] = $7 >> 24;
        $48 = HEAP8[(15423) >> 0] | 0;
        $49 = $48 & 255;
        $50 = HEAP32[$10 >> 2] | 0;
        $51 = ((($50) + ($9 << 4) | 0) + ($49) | 0);
        HEAP8[$51 >> 0] = $6 & 255; HEAP8[$51 + 1 >> 0] = $6 >> 8;
        $52 = HEAP32[$10 >> 2] | 0;
        $53 = (($48) + 4) << 24 >> 24;
        $54 = $53 & 255;
        $55 = ((($52) + ($9 << 4) | 0) + ($54) | 0);
        HEAP8[$55 >> 0] = $6 & 255; HEAP8[$55 + 1 >> 0] = $6 >> 8;
        $56 = HEAP32[$11 >> 2] | 0;
        $57 = ((($56) + ($9 << 6) | 0) + ($49 << 2) | 0);
        HEAP8[$57 >> 0] = $7 & 255; HEAP8[$57 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$57 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$57 + 3 >> 0] = $7 >> 24;
        $58 = HEAP32[$11 >> 2] | 0;
        $59 = (($49) + 1) | 0;
        $60 = ((($58) + ($9 << 6) | 0) + ($59 << 2) | 0);
        HEAP8[$60 >> 0] = $7 & 255; HEAP8[$60 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$60 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$60 + 3 >> 0] = $7 >> 24;
        $61 = HEAP32[$11 >> 2] | 0;
        $62 = ((($61) + ($9 << 6) | 0) + ($54 << 2) | 0);
        HEAP8[$62 >> 0] = $7 & 255; HEAP8[$62 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$62 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$62 + 3 >> 0] = $7 >> 24;
        $63 = HEAP32[$11 >> 2] | 0;
        $64 = (($54) + 1) | 0;
        $65 = ((($63) + ($9 << 6) | 0) + ($64 << 2) | 0);
        HEAP8[$65 >> 0] = $7 & 255; HEAP8[$65 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$65 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$65 + 3 >> 0] = $7 >> 24;
        $66 = HEAP8[(15427) >> 0] | 0;
        $67 = $66 & 255;
        $68 = HEAP32[$10 >> 2] | 0;
        $69 = ((($68) + ($9 << 4) | 0) + ($67) | 0);
        HEAP8[$69 >> 0] = $6 & 255; HEAP8[$69 + 1 >> 0] = $6 >> 8;
        $70 = HEAP32[$10 >> 2] | 0;
        $71 = (($66) + 4) << 24 >> 24;
        $72 = $71 & 255;
        $73 = ((($70) + ($9 << 4) | 0) + ($72) | 0);
        HEAP8[$73 >> 0] = $6 & 255; HEAP8[$73 + 1 >> 0] = $6 >> 8;
        $74 = HEAP32[$11 >> 2] | 0;
        $75 = ((($74) + ($9 << 6) | 0) + ($67 << 2) | 0);
        HEAP8[$75 >> 0] = $7 & 255; HEAP8[$75 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$75 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$75 + 3 >> 0] = $7 >> 24;
        $76 = HEAP32[$11 >> 2] | 0;
        $77 = (($67) + 1) | 0;
        $78 = ((($76) + ($9 << 6) | 0) + ($77 << 2) | 0);
        HEAP8[$78 >> 0] = $7 & 255; HEAP8[$78 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$78 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$78 + 3 >> 0] = $7 >> 24;
        $79 = HEAP32[$11 >> 2] | 0;
        $80 = ((($79) + ($9 << 6) | 0) + ($72 << 2) | 0);
        HEAP8[$80 >> 0] = $7 & 255; HEAP8[$80 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$80 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$80 + 3 >> 0] = $7 >> 24;
        $81 = HEAP32[$11 >> 2] | 0;
        $82 = (($72) + 1) | 0;
        $83 = ((($81) + ($9 << 6) | 0) + ($82 << 2) | 0);
        HEAP8[$83 >> 0] = $7 & 255; HEAP8[$83 + 1 >> 0] = ($7 >> 8) & 255; HEAP8[$83 + 2 >> 0] = ($7 >> 16) & 255; HEAP8[$83 + 3 >> 0] = $7 >> 24;
        return;
    }
    function __ZN7WelsDec15PredInter16x8MvEPA30_A2_sPA30_aiaPs($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ($2 | 0) == (0);
        if ($5) {
            $6 = ((($1)) + 1 | 0);
            $7 = HEAP8[$6 >> 0] | 0;
            $8 = ($7 << 24 >> 24) == ($3 << 24 >> 24);
            if ($8) {
                $9 = ((($0)) + 4 | 0);
                $10 = HEAPU8[$9 >> 0] | (HEAPU8[$9 + 1 >> 0] << 8) | (HEAPU8[$9 + 2 >> 0] << 16) | (HEAPU8[$9 + 3 >> 0] << 24);
                HEAP8[$4 >> 0] = $10 & 255; HEAP8[$4 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$4 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$4 + 3 >> 0] = $10 >> 24;
                return;
            }
        } else {
            $11 = ((($1)) + 18 | 0);
            $12 = HEAP8[$11 >> 0] | 0;
            $13 = ($12 << 24 >> 24) == ($3 << 24 >> 24);
            if ($13) {
                $14 = ((($0)) + 72 | 0);
                $15 = HEAPU8[$14 >> 0] | (HEAPU8[$14 + 1 >> 0] << 8) | (HEAPU8[$14 + 2 >> 0] << 16) | (HEAPU8[$14 + 3 >> 0] << 24);
                HEAP8[$4 >> 0] = $15 & 255; HEAP8[$4 + 1 >> 0] = ($15 >> 8) & 255; HEAP8[$4 + 2 >> 0] = ($15 >> 16) & 255; HEAP8[$4 + 3 >> 0] = $15 >> 24;
                return;
            }
        }
        __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($0, $1, $2, 4, $3, $4);
        return;
    }
    function __ZN7WelsDec21UpdateP16x8MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
        var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
        var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = $4 << 24 >> 24;
        $7 = $6 << 8;
        $8 = $7 | $6;
        $9 = $8 & 65535;
        $10 = HEAPU8[$5 >> 0] | (HEAPU8[$5 + 1 >> 0] << 8) | (HEAPU8[$5 + 2 >> 0] << 16) | (HEAPU8[$5 + 3 >> 0] << 24);
        $11 = ((($0)) + 4040 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($0)) + 3932 | 0);
        $14 = ((($0)) + 3916 | 0);
        $15 = (15415 + ($3) | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = $16 & 255;
        $18 = (10975 + ($3) | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = $19 & 255;
        $21 = HEAP32[$13 >> 2] | 0;
        $22 = ((($21) + ($12 << 4) | 0) + ($17) | 0);
        HEAP8[$22 >> 0] = $9 & 255; HEAP8[$22 + 1 >> 0] = $9 >> 8;
        $23 = HEAP32[$13 >> 2] | 0;
        $24 = (($16) + 4) << 24 >> 24;
        $25 = $24 & 255;
        $26 = ((($23) + ($12 << 4) | 0) + ($25) | 0);
        HEAP8[$26 >> 0] = $9 & 255; HEAP8[$26 + 1 >> 0] = $9 >> 8;
        $27 = HEAP32[$14 >> 2] | 0;
        $28 = ((($27) + ($12 << 6) | 0) + ($17 << 2) | 0);
        HEAP8[$28 >> 0] = $10 & 255; HEAP8[$28 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$28 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$28 + 3 >> 0] = $10 >> 24;
        $29 = HEAP32[$14 >> 2] | 0;
        $30 = (($17) + 1) | 0;
        $31 = ((($29) + ($12 << 6) | 0) + ($30 << 2) | 0);
        HEAP8[$31 >> 0] = $10 & 255; HEAP8[$31 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$31 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$31 + 3 >> 0] = $10 >> 24;
        $32 = HEAP32[$14 >> 2] | 0;
        $33 = ((($32) + ($12 << 6) | 0) + ($25 << 2) | 0);
        HEAP8[$33 >> 0] = $10 & 255; HEAP8[$33 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$33 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$33 + 3 >> 0] = $10 >> 24;
        $34 = HEAP32[$14 >> 2] | 0;
        $35 = (($25) + 1) | 0;
        $36 = ((($34) + ($12 << 6) | 0) + ($35 << 2) | 0);
        HEAP8[$36 >> 0] = $10 & 255; HEAP8[$36 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$36 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$36 + 3 >> 0] = $10 >> 24;
        $37 = (($2) + ($20) | 0);
        HEAP8[$37 >> 0] = $9 & 255; HEAP8[$37 + 1 >> 0] = $9 >> 8;
        $38 = (($19) + 6) << 24 >> 24;
        $39 = $38 & 255;
        $40 = (($2) + ($39) | 0);
        HEAP8[$40 >> 0] = $9 & 255; HEAP8[$40 + 1 >> 0] = $9 >> 8;
        $41 = (($1) + ($20 << 2) | 0);
        HEAP8[$41 >> 0] = $10 & 255; HEAP8[$41 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$41 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$41 + 3 >> 0] = $10 >> 24;
        $42 = (($20) + 1) | 0;
        $43 = (($1) + ($42 << 2) | 0);
        HEAP8[$43 >> 0] = $10 & 255; HEAP8[$43 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$43 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$43 + 3 >> 0] = $10 >> 24;
        $44 = (($1) + ($39 << 2) | 0);
        HEAP8[$44 >> 0] = $10 & 255; HEAP8[$44 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$44 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$44 + 3 >> 0] = $10 >> 24;
        $45 = (($39) + 1) | 0;
        $46 = (($1) + ($45 << 2) | 0);
        HEAP8[$46 >> 0] = $10 & 255; HEAP8[$46 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$46 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$46 + 3 >> 0] = $10 >> 24;
        $47 = (($3) + 4) | 0;
        $48 = (15415 + ($47) | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = $49 & 255;
        $51 = (10975 + ($47) | 0);
        $52 = HEAP8[$51 >> 0] | 0;
        $53 = $52 & 255;
        $54 = HEAP32[$13 >> 2] | 0;
        $55 = ((($54) + ($12 << 4) | 0) + ($50) | 0);
        HEAP8[$55 >> 0] = $9 & 255; HEAP8[$55 + 1 >> 0] = $9 >> 8;
        $56 = HEAP32[$13 >> 2] | 0;
        $57 = (($49) + 4) << 24 >> 24;
        $58 = $57 & 255;
        $59 = ((($56) + ($12 << 4) | 0) + ($58) | 0);
        HEAP8[$59 >> 0] = $9 & 255; HEAP8[$59 + 1 >> 0] = $9 >> 8;
        $60 = HEAP32[$14 >> 2] | 0;
        $61 = ((($60) + ($12 << 6) | 0) + ($50 << 2) | 0);
        HEAP8[$61 >> 0] = $10 & 255; HEAP8[$61 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$61 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$61 + 3 >> 0] = $10 >> 24;
        $62 = HEAP32[$14 >> 2] | 0;
        $63 = (($50) + 1) | 0;
        $64 = ((($62) + ($12 << 6) | 0) + ($63 << 2) | 0);
        HEAP8[$64 >> 0] = $10 & 255; HEAP8[$64 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$64 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$64 + 3 >> 0] = $10 >> 24;
        $65 = HEAP32[$14 >> 2] | 0;
        $66 = ((($65) + ($12 << 6) | 0) + ($58 << 2) | 0);
        HEAP8[$66 >> 0] = $10 & 255; HEAP8[$66 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$66 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$66 + 3 >> 0] = $10 >> 24;
        $67 = HEAP32[$14 >> 2] | 0;
        $68 = (($58) + 1) | 0;
        $69 = ((($67) + ($12 << 6) | 0) + ($68 << 2) | 0);
        HEAP8[$69 >> 0] = $10 & 255; HEAP8[$69 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$69 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$69 + 3 >> 0] = $10 >> 24;
        $70 = (($2) + ($53) | 0);
        HEAP8[$70 >> 0] = $9 & 255; HEAP8[$70 + 1 >> 0] = $9 >> 8;
        $71 = (($52) + 6) << 24 >> 24;
        $72 = $71 & 255;
        $73 = (($2) + ($72) | 0);
        HEAP8[$73 >> 0] = $9 & 255; HEAP8[$73 + 1 >> 0] = $9 >> 8;
        $74 = (($1) + ($53 << 2) | 0);
        HEAP8[$74 >> 0] = $10 & 255; HEAP8[$74 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$74 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$74 + 3 >> 0] = $10 >> 24;
        $75 = (($53) + 1) | 0;
        $76 = (($1) + ($75 << 2) | 0);
        HEAP8[$76 >> 0] = $10 & 255; HEAP8[$76 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$76 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$76 + 3 >> 0] = $10 >> 24;
        $77 = (($1) + ($72 << 2) | 0);
        HEAP8[$77 >> 0] = $10 & 255; HEAP8[$77 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$77 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$77 + 3 >> 0] = $10 >> 24;
        $78 = (($72) + 1) | 0;
        $79 = (($1) + ($78 << 2) | 0);
        HEAP8[$79 >> 0] = $10 & 255; HEAP8[$79 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$79 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$79 + 3 >> 0] = $10 >> 24;
        return;
    }
    function __ZN7WelsDec15PredInter8x16MvEPA30_A2_sPA30_aiaPs($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0 = 0, $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ($2 | 0) == (0);
        if ($5) {
            $6 = ((($1)) + 6 | 0);
            $7 = HEAP8[$6 >> 0] | 0;
            $8 = ($7 << 24 >> 24) == ($3 << 24 >> 24);
            if ($8) {
                $9 = ((($0)) + 24 | 0);
                $10 = HEAPU8[$9 >> 0] | (HEAPU8[$9 + 1 >> 0] << 8) | (HEAPU8[$9 + 2 >> 0] << 16) | (HEAPU8[$9 + 3 >> 0] << 24);
                HEAP8[$4 >> 0] = $10 & 255; HEAP8[$4 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$4 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$4 + 3 >> 0] = $10 >> 24;
                return;
            }
        } else {
            $11 = ((($1)) + 5 | 0);
            $12 = HEAP8[$11 >> 0] | 0;
            $13 = ($12 << 24 >> 24) == (-2);
            if ($13) {
                $14 = ((($1)) + 2 | 0);
                $15 = HEAP8[$14 >> 0] | 0;
                $$0 = 2; $$021 = $15;
            } else {
                $$0 = 5; $$021 = $12;
            }
            $16 = ($$021 << 24 >> 24) == ($3 << 24 >> 24);
            if ($16) {
                $17 = (($0) + ($$0 << 2) | 0);
                $18 = HEAPU8[$17 >> 0] | (HEAPU8[$17 + 1 >> 0] << 8) | (HEAPU8[$17 + 2 >> 0] << 16) | (HEAPU8[$17 + 3 >> 0] << 24);
                HEAP8[$4 >> 0] = $18 & 255; HEAP8[$4 + 1 >> 0] = ($18 >> 8) & 255; HEAP8[$4 + 2 >> 0] = ($18 >> 16) & 255; HEAP8[$4 + 3 >> 0] = $18 >> 24;
                return;
            }
        }
        __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($0, $1, $2, 2, $3, $4);
        return;
    }
    function __ZN7WelsDec21UpdateP8x16MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
        var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
        var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = $4 << 24 >> 24;
        $7 = $6 << 8;
        $8 = $7 | $6;
        $9 = $8 & 65535;
        $10 = HEAPU8[$5 >> 0] | (HEAPU8[$5 + 1 >> 0] << 8) | (HEAPU8[$5 + 2 >> 0] << 16) | (HEAPU8[$5 + 3 >> 0] << 24);
        $11 = ((($0)) + 4040 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($0)) + 3932 | 0);
        $14 = ((($0)) + 3916 | 0);
        $15 = (15415 + ($3) | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = (10975 + ($3) | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = $16 & 255;
        $20 = $18 & 255;
        $21 = HEAP32[$13 >> 2] | 0;
        $22 = ((($21) + ($12 << 4) | 0) + ($19) | 0);
        HEAP8[$22 >> 0] = $9 & 255; HEAP8[$22 + 1 >> 0] = $9 >> 8;
        $23 = HEAP32[$13 >> 2] | 0;
        $24 = (($16) + 4) << 24 >> 24;
        $25 = $24 & 255;
        $26 = ((($23) + ($12 << 4) | 0) + ($25) | 0);
        HEAP8[$26 >> 0] = $9 & 255; HEAP8[$26 + 1 >> 0] = $9 >> 8;
        $27 = HEAP32[$14 >> 2] | 0;
        $28 = ((($27) + ($12 << 6) | 0) + ($19 << 2) | 0);
        HEAP8[$28 >> 0] = $10 & 255; HEAP8[$28 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$28 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$28 + 3 >> 0] = $10 >> 24;
        $29 = HEAP32[$14 >> 2] | 0;
        $30 = (($19) + 1) | 0;
        $31 = ((($29) + ($12 << 6) | 0) + ($30 << 2) | 0);
        HEAP8[$31 >> 0] = $10 & 255; HEAP8[$31 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$31 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$31 + 3 >> 0] = $10 >> 24;
        $32 = HEAP32[$14 >> 2] | 0;
        $33 = ((($32) + ($12 << 6) | 0) + ($25 << 2) | 0);
        HEAP8[$33 >> 0] = $10 & 255; HEAP8[$33 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$33 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$33 + 3 >> 0] = $10 >> 24;
        $34 = HEAP32[$14 >> 2] | 0;
        $35 = (($25) + 1) | 0;
        $36 = ((($34) + ($12 << 6) | 0) + ($35 << 2) | 0);
        HEAP8[$36 >> 0] = $10 & 255; HEAP8[$36 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$36 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$36 + 3 >> 0] = $10 >> 24;
        $37 = (($2) + ($20) | 0);
        HEAP8[$37 >> 0] = $9 & 255; HEAP8[$37 + 1 >> 0] = $9 >> 8;
        $38 = (($18) + 6) << 24 >> 24;
        $39 = $38 & 255;
        $40 = (($2) + ($39) | 0);
        HEAP8[$40 >> 0] = $9 & 255; HEAP8[$40 + 1 >> 0] = $9 >> 8;
        $41 = (($1) + ($20 << 2) | 0);
        HEAP8[$41 >> 0] = $10 & 255; HEAP8[$41 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$41 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$41 + 3 >> 0] = $10 >> 24;
        $42 = (($20) + 1) | 0;
        $43 = (($1) + ($42 << 2) | 0);
        HEAP8[$43 >> 0] = $10 & 255; HEAP8[$43 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$43 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$43 + 3 >> 0] = $10 >> 24;
        $44 = (($1) + ($39 << 2) | 0);
        HEAP8[$44 >> 0] = $10 & 255; HEAP8[$44 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$44 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$44 + 3 >> 0] = $10 >> 24;
        $45 = (($39) + 1) | 0;
        $46 = (($1) + ($45 << 2) | 0);
        HEAP8[$46 >> 0] = $10 & 255; HEAP8[$46 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$46 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$46 + 3 >> 0] = $10 >> 24;
        $47 = (($3) + 8) | 0;
        $48 = (15415 + ($47) | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = (10975 + ($47) | 0);
        $51 = HEAP8[$50 >> 0] | 0;
        $52 = $49 & 255;
        $53 = $51 & 255;
        $54 = HEAP32[$13 >> 2] | 0;
        $55 = ((($54) + ($12 << 4) | 0) + ($52) | 0);
        HEAP8[$55 >> 0] = $9 & 255; HEAP8[$55 + 1 >> 0] = $9 >> 8;
        $56 = HEAP32[$13 >> 2] | 0;
        $57 = (($49) + 4) << 24 >> 24;
        $58 = $57 & 255;
        $59 = ((($56) + ($12 << 4) | 0) + ($58) | 0);
        HEAP8[$59 >> 0] = $9 & 255; HEAP8[$59 + 1 >> 0] = $9 >> 8;
        $60 = HEAP32[$14 >> 2] | 0;
        $61 = ((($60) + ($12 << 6) | 0) + ($52 << 2) | 0);
        HEAP8[$61 >> 0] = $10 & 255; HEAP8[$61 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$61 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$61 + 3 >> 0] = $10 >> 24;
        $62 = HEAP32[$14 >> 2] | 0;
        $63 = (($52) + 1) | 0;
        $64 = ((($62) + ($12 << 6) | 0) + ($63 << 2) | 0);
        HEAP8[$64 >> 0] = $10 & 255; HEAP8[$64 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$64 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$64 + 3 >> 0] = $10 >> 24;
        $65 = HEAP32[$14 >> 2] | 0;
        $66 = ((($65) + ($12 << 6) | 0) + ($58 << 2) | 0);
        HEAP8[$66 >> 0] = $10 & 255; HEAP8[$66 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$66 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$66 + 3 >> 0] = $10 >> 24;
        $67 = HEAP32[$14 >> 2] | 0;
        $68 = (($58) + 1) | 0;
        $69 = ((($67) + ($12 << 6) | 0) + ($68 << 2) | 0);
        HEAP8[$69 >> 0] = $10 & 255; HEAP8[$69 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$69 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$69 + 3 >> 0] = $10 >> 24;
        $70 = (($2) + ($53) | 0);
        HEAP8[$70 >> 0] = $9 & 255; HEAP8[$70 + 1 >> 0] = $9 >> 8;
        $71 = (($51) + 6) << 24 >> 24;
        $72 = $71 & 255;
        $73 = (($2) + ($72) | 0);
        HEAP8[$73 >> 0] = $9 & 255; HEAP8[$73 + 1 >> 0] = $9 >> 8;
        $74 = (($1) + ($53 << 2) | 0);
        HEAP8[$74 >> 0] = $10 & 255; HEAP8[$74 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$74 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$74 + 3 >> 0] = $10 >> 24;
        $75 = (($53) + 1) | 0;
        $76 = (($1) + ($75 << 2) | 0);
        HEAP8[$76 >> 0] = $10 & 255; HEAP8[$76 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$76 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$76 + 3 >> 0] = $10 >> 24;
        $77 = (($1) + ($72 << 2) | 0);
        HEAP8[$77 >> 0] = $10 & 255; HEAP8[$77 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$77 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$77 + 3 >> 0] = $10 >> 24;
        $78 = (($72) + 1) | 0;
        $79 = (($1) + ($78 << 2) | 0);
        HEAP8[$79 >> 0] = $10 & 255; HEAP8[$79 + 1 >> 0] = ($10 >> 8) & 255; HEAP8[$79 + 2 >> 0] = ($10 >> 16) & 255; HEAP8[$79 + 3 >> 0] = $10 >> 24;
        return;
    }
    function __ZN7WelsDec32WelsDecodeMbCabacISliceBaseMode0EPNS_21TagWelsDecoderContextERj($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$1505 = 0, $$1507 = 0, $$1531592 = 0, $$2500589 = 0, $$34 = 0, $$37 = 0, $$548 = 0, $$548$1 = 0, $$550 = 0, $$550$1 = 0, $$9 = 0, $$off535 = 0, $$phi$trans$insert = 0, $$phi$trans$insert617 = 0, $$pn = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre615 = 0, $$pre616 = 0, $$pre618 = 0;
        var $$pre619 = 0, $$sink29$sink = 0, $$sink39 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
        var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
        var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
        var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
        var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
        var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
        var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
        var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
        var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
        var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
        var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
        var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
        var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
        var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
        var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
        var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
        var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
        var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
        var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
        var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
        var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
        var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
        var $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
        var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
        var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
        var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
        var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
        var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 176 | 0;
        $2 = sp + 72 | 0;
        $3 = sp + 68 | 0;
        $4 = sp + 64 | 0;
        $5 = sp + 108 | 0;
        $6 = sp;
        $7 = ((($0)) + 241932 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($8)) + 3900 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($8)) + 3866 | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = $12 & 255;
        $14 = ((($8)) + 3867 | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = $15 & 255;
        $17 = ((($8)) + 4040 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$4 >> 2] = 0;
        $19 = ((($5)) + 15 | 0);
        $20 = $19;
        $21 = $20 & 15;
        $22 = (0 - ($21)) | 0;
        $23 = (($19) + ($22) | 0);
        $24 = ((($8)) + 3940 | 0);
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = (($25) + ($18) | 0);
        HEAP8[$26 >> 0] = 1;
        $27 = ((($8)) + 3944 | 0);
        $28 = HEAP32[$27 >> 2] | 0;
        $29 = (($28) + ($18) | 0);
        HEAP8[$29 >> 0] = 0;
        $30 = ((($8)) + 3976 | 0);
        $31 = HEAP32[$30 >> 2] | 0;
        $32 = (($31) + ($18) | 0);
        HEAP8[$32 >> 0] = 0;
        $33 = ((($8)) + 3861 | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = ((($8)) + 3972 | 0);
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = (($36) + ($18) | 0);
        HEAP8[$37 >> 0] = $34;
        __ZN7WelsDec22GetNeighborAvailMbTypeEPNS_16TagNeighborAvailEPNS_10TagDqLayerE($2, $8);
        $38 = (__ZN7WelsDec22ParseMBTypeISliceCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $2, $3) | 0);
        $39 = ($38 | 0) == (0);
        if (!($39)) {
            $$37 = $38;
            STACKTOP = sp; return ($$37 | 0);
        }
        $40 = HEAP32[$3 >> 2] | 0;
        $41 = ($40 >>> 0) > (25);
        if ($41) {
            $$37 = 1035;
            STACKTOP = sp; return ($$37 | 0);
        }
        $42 = ((($0)) + 241924 | 0);
        $43 = HEAP32[$42 >> 2] | 0;
        $44 = ((($43)) + 318 | 0);
        $45 = HEAP8[$44 >> 0] | 0;
        $46 = ($45 << 24 >> 24) == (0);
        L7: do {
            if ($46) {
                switch ($40 | 0) {
                    case 25: {
                        label = 6;
                        break L7;
                        break;
                    }
                    case 0: {
                        label = 10;
                        break L7;
                        break;
                    }
                    case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: {
                        $$37 = 1035;
                        break;
                    }
                    default: {
                        label = 20;
                        break L7;
                    }
                }
                STACKTOP = sp; return ($$37 | 0);
            } else {
                switch ($40 | 0) {
                    case 25: {
                        label = 6;
                        break;
                    }
                    case 0: {
                        label = 10;
                        break;
                    }
                    default: {
                        label = 20;
                    }
                }
            }
        } while (0);
        L11: do {
            if ((label | 0) == 6) {
                $47 = (__ZN7WelsDec18ParseIPCMInfoCabacEPNS_21TagWelsDecoderContextE($0) | 0);
                $48 = ($47 | 0) == (0);
                if (!($48)) {
                    $$37 = $47;
                    STACKTOP = sp; return ($$37 | 0);
                }
                $49 = ((($8)) + 3884 | 0);
                HEAP32[$49 >> 2] = 0;
                $50 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($0, $1) | 0);
                $51 = ($50 | 0) == (0);
                if (!($51)) {
                    $$37 = $50;
                    STACKTOP = sp; return ($$37 | 0);
                }
                $52 = HEAP32[$1 >> 2] | 0;
                $53 = ($52 | 0) == (0);
                if ($53) {
                    $$37 = 0;
                    STACKTOP = sp; return ($$37 | 0);
                }
                $54 = ((($0)) + 512232 | 0);
                $55 = HEAP32[$54 >> 2] | 0;
                $56 = HEAP32[$7 >> 2] | 0;
                $57 = ((($56)) + 3900 | 0);
                $58 = HEAP32[$57 >> 2] | 0;
                __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($55, $58);
                $$37 = 0;
                STACKTOP = sp; return ($$37 | 0);
            }
            else if ((label | 0) == 10) {
                $59 = ((($6)) + 15 | 0);
                $60 = $59;
                $61 = $60 & 15;
                $62 = (0 - ($61)) | 0;
                $63 = (($59) + ($62) | 0);
                $64 = ((($8)) + 3908 | 0);
                $65 = HEAP32[$64 >> 2] | 0;
                $66 = (($65) + ($18 << 1) | 0);
                HEAP16[$66 >> 1] = 1;
                $67 = ((($0)) + 241928 | 0);
                $68 = HEAP32[$67 >> 2] | 0;
                $69 = ((($68)) + 184 | 0);
                $70 = HEAP8[$69 >> 0] | 0;
                $71 = ($70 << 24 >> 24) == (0);
                if ($71) {
                    label = 12;
                } else {
                    $72 = HEAP32[$7 >> 2] | 0;
                    $73 = ((($72)) + 3944 | 0);
                    $74 = HEAP32[$73 >> 2] | 0;
                    $75 = (($74) + ($18) | 0);
                    $76 = (__ZN7WelsDec30ParseTransformSize8x8FlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERb($0, $2, $75) | 0);
                    $77 = ($76 | 0) == (0);
                    if ($77) {
                        label = 12;
                    } else {
                        $$9 = $76;
                    }
                }
                do {
                    if ((label | 0) == 12) {
                        $78 = HEAP32[$7 >> 2] | 0;
                        $79 = ((($78)) + 3944 | 0);
                        $80 = HEAP32[$79 >> 2] | 0;
                        $81 = (($80) + ($18) | 0);
                        $82 = HEAP8[$81 >> 0] | 0;
                        $83 = ($82 << 24 >> 24) == (0);
                        if ($83) {
                            $90 = ((($0)) + 317148 | 0);
                            $91 = HEAP32[$90 >> 2] | 0;
                            FUNCTION_TABLE_viiii[$91 & 31]($2, $23, $63, $8);
                            $92 = (__ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $63, $10, $8) | 0);
                            $93 = ($92 | 0) == (0);
                            if (!($93)) {
                                $$9 = $92;
                                break;
                            }
                        } else {
                            $84 = HEAP32[$64 >> 2] | 0;
                            $85 = (($84) + ($18 << 1) | 0);
                            HEAP16[$85 >> 1] = 4;
                            HEAP32[$3 >> 2] = 4;
                            $86 = ((($0)) + 317148 | 0);
                            $87 = HEAP32[$86 >> 2] | 0;
                            FUNCTION_TABLE_viiii[$87 & 31]($2, $23, $63, $8);
                            $88 = (__ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $63, $10, $8) | 0);
                            $89 = ($88 | 0) == (0);
                            if (!($89)) {
                                $$9 = $88;
                                break;
                            }
                        }
                        $94 = (__ZN7WelsDec17ParseCbpInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $2, $4) | 0);
                        $95 = ($94 | 0) == (0);
                        if ($95) {
                            $96 = HEAP32[$4 >> 2] | 0;
                            $97 = $96 & 255;
                            $98 = ((($8)) + 3956 | 0);
                            $99 = HEAP32[$98 >> 2] | 0;
                            $100 = (($99) + ($18) | 0);
                            HEAP8[$100 >> 0] = $97;
                            $101 = HEAP32[$4 >> 2] | 0;
                            $102 = ($101 | 0) == (0);
                            $$pre619 = ((($8)) + 3884 | 0);
                            if ($102) {
                                $104 = 0;
                            } else {
                                $103 = HEAP32[$$pre619 >> 2] | 0;
                                $104 = $103;
                            }
                            HEAP32[$$pre619 >> 2] = $104;
                            $105 = HEAP32[$42 >> 2] | 0;
                            $106 = ((($105)) + 318 | 0);
                            $107 = HEAP8[$106 >> 0] | 0;
                            $108 = ($107 << 24 >> 24) != (0);
                            $109 = $101 >>> 4;
                            $110 = $108 ? $109 : 0;
                            $111 = $101 & 15;
                            $$1505 = $111; $$1507 = $110; $$pre$phiZ2D = $98;
                            break L11;
                        } else {
                            $$9 = $94;
                        }
                    }
                } while (0);
                $$37 = $$9;
                STACKTOP = sp; return ($$37 | 0);
            }
            else if ((label | 0) == 20) {
                $112 = ((($8)) + 3908 | 0);
                $113 = HEAP32[$112 >> 2] | 0;
                $114 = (($113) + ($18 << 1) | 0);
                HEAP16[$114 >> 1] = 2;
                $115 = HEAP32[$27 >> 2] | 0;
                $116 = (($115) + ($18) | 0);
                HEAP8[$116 >> 0] = 0;
                $117 = HEAP32[$24 >> 2] | 0;
                $118 = (($117) + ($18) | 0);
                HEAP8[$118 >> 0] = 1;
                $119 = HEAP32[$3 >> 2] | 0;
                $120 = (($119) + 3) | 0;
                $121 = $120 & 3;
                $122 = $121 & 255;
                $123 = ((($8)) + 3992 | 0);
                $124 = HEAP32[$123 >> 2] | 0;
                $125 = (((($124) + ($18 << 3) | 0)) + 7 | 0);
                HEAP8[$125 >> 0] = $122;
                $126 = HEAP32[$3 >> 2] | 0;
                $127 = (($126) + -1) | 0;
                $128 = $127 >>> 2;
                $129 = (25169 + ($128) | 0);
                $130 = HEAP8[$129 >> 0] | 0;
                $131 = ((($8)) + 3956 | 0);
                $132 = HEAP32[$131 >> 2] | 0;
                $133 = (($132) + ($18) | 0);
                HEAP8[$133 >> 0] = $130;
                $134 = HEAP32[$42 >> 2] | 0;
                $135 = ((($134)) + 318 | 0);
                $136 = HEAP8[$135 >> 0] | 0;
                $137 = ($136 << 24 >> 24) == (0);
                $$pre = HEAP32[$131 >> 2] | 0;
                $$phi$trans$insert = (($$pre) + ($18) | 0);
                $$pre615 = HEAP8[$$phi$trans$insert >> 0] | 0;
                $138 = $$pre615 << 24 >> 24;
                $139 = $138 >> 4;
                $140 = $137 ? 0 : $139;
                $141 = $$pre615 & 15;
                $142 = $141 & 255;
                __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($2, $23, $8);
                $143 = (__ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $2, $10, $8) | 0);
                $144 = ($143 | 0) == (0);
                if ($144) {
                    $$1505 = $142; $$1507 = $140; $$pre$phiZ2D = $131;
                } else {
                    $$37 = $143;
                    STACKTOP = sp; return ($$37 | 0);
                }
            }
        } while (0);
        $145 = ((($8)) + 3964 | 0);
        $146 = HEAP32[$145 >> 2] | 0;
        $147 = (($146) + (($18 * 24) | 0) | 0);
        HEAP8[$147 >> 0] = 0 & 255; HEAP8[$147 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$147 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$147 + 3 >> 0] = 0 >> 24;
        $148 = HEAP32[$145 >> 2] | 0;
        $149 = (((($148) + (($18 * 24) | 0) | 0)) + 4 | 0);
        HEAP8[$149 >> 0] = 0 & 255; HEAP8[$149 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$149 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$149 + 3 >> 0] = 0 >> 24;
        $150 = HEAP32[$145 >> 2] | 0;
        $151 = (((($150) + (($18 * 24) | 0) | 0)) + 8 | 0);
        HEAP8[$151 >> 0] = 0 & 255; HEAP8[$151 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$151 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$151 + 3 >> 0] = 0 >> 24;
        $152 = HEAP32[$145 >> 2] | 0;
        $153 = (((($152) + (($18 * 24) | 0) | 0)) + 12 | 0);
        HEAP8[$153 >> 0] = 0 & 255; HEAP8[$153 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$153 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$153 + 3 >> 0] = 0 >> 24;
        $154 = HEAP32[$145 >> 2] | 0;
        $155 = (((($154) + (($18 * 24) | 0) | 0)) + 16 | 0);
        HEAP8[$155 >> 0] = 0 & 255; HEAP8[$155 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$155 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$155 + 3 >> 0] = 0 >> 24;
        $156 = HEAP32[$145 >> 2] | 0;
        $157 = (((($156) + (($18 * 24) | 0) | 0)) + 20 | 0);
        HEAP8[$157 >> 0] = 0 & 255; HEAP8[$157 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$157 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$157 + 3 >> 0] = 0 >> 24;
        $158 = ((($8)) + 3960 | 0);
        $159 = HEAP32[$158 >> 2] | 0;
        $160 = (($159) + ($18 << 1) | 0);
        HEAP16[$160 >> 1] = 0;
        $161 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $162 = (($161) + ($18) | 0);
        $163 = HEAP8[$162 >> 0] | 0;
        $164 = ($163 << 24 >> 24) == (0);
        L41: do {
            if ($164) {
                $165 = ((($8)) + 3908 | 0);
                $166 = HEAP32[$165 >> 2] | 0;
                $167 = (($166) + ($18 << 1) | 0);
                $168 = HEAP16[$167 >> 1] | 0;
                switch ($168 << 16 >> 16) {
                    case 4: case 1: {
                        $169 = ((($8)) + 3868 | 0);
                        $170 = HEAP32[$169 >> 2] | 0;
                        $171 = $170 & 255;
                        $172 = ((($8)) + 3948 | 0);
                        $173 = HEAP32[$172 >> 2] | 0;
                        $174 = (($173) + ($18) | 0);
                        HEAP8[$174 >> 0] = $171;
                        $175 = ((($8)) + 92 | 0);
                        $176 = ((($8)) + 3952 | 0);
                        $177 = HEAP32[$172 >> 2] | 0;
                        $178 = (($177) + ($18) | 0);
                        $179 = HEAP8[$178 >> 0] | 0;
                        $180 = $179 << 24 >> 24;
                        $181 = HEAP32[$175 >> 2] | 0;
                        $182 = ((($181)) + 168 | 0);
                        $183 = HEAP32[$182 >> 2] | 0;
                        $184 = (($183) + ($180)) | 0;
                        $185 = ($184 | 0) < (51);
                        $$548 = $185 ? $184 : 51;
                        $186 = ($184 | 0) > (0);
                        $187 = $186 ? $$548 : 0;
                        $188 = (10899 + ($187) | 0);
                        $189 = HEAP8[$188 >> 0] | 0;
                        $190 = HEAP32[$176 >> 2] | 0;
                        $191 = (($190) + ($18 << 1) | 0);
                        HEAP8[$191 >> 0] = $189;
                        $192 = HEAP32[$172 >> 2] | 0;
                        $193 = (($192) + ($18) | 0);
                        $194 = HEAP8[$193 >> 0] | 0;
                        $195 = $194 << 24 >> 24;
                        $196 = HEAP32[$175 >> 2] | 0;
                        $197 = ((($196)) + 172 | 0);
                        $198 = HEAP32[$197 >> 2] | 0;
                        $199 = (($198) + ($195)) | 0;
                        $200 = ($199 | 0) < (51);
                        $$548$1 = $200 ? $199 : 51;
                        $201 = ($199 | 0) > (0);
                        $202 = $201 ? $$548$1 : 0;
                        $203 = (10899 + ($202) | 0);
                        $204 = HEAP8[$203 >> 0] | 0;
                        $205 = HEAP32[$176 >> 2] | 0;
                        $206 = (((($205) + ($18 << 1) | 0)) + 1 | 0);
                        HEAP8[$206 >> 0] = $204;
                        $$pre616 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                        $$phi$trans$insert617 = (($$pre616) + ($18) | 0);
                        $$pre618 = HEAP8[$$phi$trans$insert617 >> 0] | 0;
                        $207 = ($$pre618 << 24 >> 24) == (0);
                        if (!($207)) {
                            label = 25;
                            break L41;
                        }
                        break;
                    }
                    default: {
                    }
                }
                $208 = ((($8)) + 3908 | 0);
                $209 = HEAP32[$208 >> 2] | 0;
                $210 = (($209) + ($18 << 1) | 0);
                $211 = HEAP16[$210 >> 1] | 0;
                $212 = ($211 << 16 >> 16) == (2);
                if ($212) {
                    label = 25;
                } else {
                    $422 = HEAP32[$145 >> 2] | 0;
                    $423 = (($422) + (($18 * 24) | 0) | 0);
                    HEAP8[$423 >> 0] = 0 & 255; HEAP8[$423 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$423 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$423 + 3 >> 0] = 0 >> 24;
                    $424 = HEAP32[$145 >> 2] | 0;
                    $425 = (((($424) + (($18 * 24) | 0) | 0)) + 4 | 0);
                    HEAP8[$425 >> 0] = 0 & 255; HEAP8[$425 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$425 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$425 + 3 >> 0] = 0 >> 24;
                    $426 = HEAP32[$145 >> 2] | 0;
                    $427 = (((($426) + (($18 * 24) | 0) | 0)) + 8 | 0);
                    HEAP8[$427 >> 0] = 0 & 255; HEAP8[$427 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$427 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$427 + 3 >> 0] = 0 >> 24;
                    $428 = HEAP32[$145 >> 2] | 0;
                    $429 = (((($428) + (($18 * 24) | 0) | 0)) + 12 | 0);
                    HEAP8[$429 >> 0] = 0 & 255; HEAP8[$429 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$429 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$429 + 3 >> 0] = 0 >> 24;
                    $430 = HEAP32[$145 >> 2] | 0;
                    $431 = (((($430) + (($18 * 24) | 0) | 0)) + 16 | 0);
                    HEAP8[$431 >> 0] = 0 & 255; HEAP8[$431 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$431 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$431 + 3 >> 0] = 0 >> 24;
                    $432 = HEAP32[$145 >> 2] | 0;
                    $433 = (((($432) + (($18 * 24) | 0) | 0)) + 20 | 0);
                    HEAP8[$433 >> 0] = 0 & 255; HEAP8[$433 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$433 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$433 + 3 >> 0] = 0 >> 24;
                }
            } else {
                label = 25;
            }
        } while (0);
        L47: do {
            if ((label | 0) == 25) {
                $213 = ((($8)) + 3988 | 0);
                $214 = HEAP32[$213 >> 2] | 0;
                $215 = (($214) + (($18 * 768) | 0) | 0);
                _memset(($215 | 0), 0, 768) | 0;
                $216 = (__ZN7WelsDec17ParseDeltaQpCabacEPNS_21TagWelsDecoderContextERi($0, $6) | 0);
                $217 = ($216 | 0) == (0);
                L49: do {
                    if ($217) {
                        $218 = HEAP32[$6 >> 2] | 0;
                        $$off535 = (($218) + 26) | 0;
                        $219 = ($$off535 >>> 0) > (51);
                        if ($219) {
                            $$37 = 1027;
                            STACKTOP = sp; return ($$37 | 0);
                        }
                        $220 = ((($8)) + 3868 | 0);
                        $221 = HEAP32[$220 >> 2] | 0;
                        $222 = (($218) + 52) | 0;
                        $223 = (($222) + ($221)) | 0;
                        $224 = (($223 | 0) % 52) & -1;
                        $225 = $224 & 255;
                        $226 = ((($8)) + 3948 | 0);
                        $227 = HEAP32[$226 >> 2] | 0;
                        $228 = (($227) + ($18) | 0);
                        HEAP8[$228 >> 0] = $225;
                        $229 = HEAP32[$226 >> 2] | 0;
                        $230 = (($229) + ($18) | 0);
                        $231 = HEAP8[$230 >> 0] | 0;
                        $232 = $231 << 24 >> 24;
                        HEAP32[$220 >> 2] = $232;
                        $233 = ((($8)) + 92 | 0);
                        $234 = ((($8)) + 3952 | 0);
                        $235 = HEAP32[$233 >> 2] | 0;
                        $236 = ((($235)) + 168 | 0);
                        $237 = HEAP32[$236 >> 2] | 0;
                        $238 = (($237) + ($232)) | 0;
                        $239 = ($238 | 0) < (51);
                        $$550 = $239 ? $238 : 51;
                        $240 = ($238 | 0) > (0);
                        $241 = $240 ? $$550 : 0;
                        $242 = (10899 + ($241) | 0);
                        $243 = HEAP8[$242 >> 0] | 0;
                        $244 = HEAP32[$234 >> 2] | 0;
                        $245 = (($244) + ($18 << 1) | 0);
                        HEAP8[$245 >> 0] = $243;
                        $246 = HEAP32[$220 >> 2] | 0;
                        $247 = HEAP32[$233 >> 2] | 0;
                        $248 = ((($247)) + 172 | 0);
                        $249 = HEAP32[$248 >> 2] | 0;
                        $250 = (($249) + ($246)) | 0;
                        $251 = ($250 | 0) < (51);
                        $$550$1 = $251 ? $250 : 51;
                        $252 = ($250 | 0) > (0);
                        $253 = $252 ? $$550$1 : 0;
                        $254 = (10899 + ($253) | 0);
                        $255 = HEAP8[$254 >> 0] | 0;
                        $256 = HEAP32[$234 >> 2] | 0;
                        $257 = (((($256) + ($18 << 1) | 0)) + 1 | 0);
                        HEAP8[$257 >> 0] = $255;
                        $258 = ((($8)) + 3908 | 0);
                        $259 = HEAP32[$258 >> 2] | 0;
                        $260 = (($259) + ($18 << 1) | 0);
                        $261 = HEAP16[$260 >> 1] | 0;
                        $262 = ($261 << 16 >> 16) == (2);
                        do {
                            if ($262) {
                                $263 = HEAP32[$213 >> 2] | 0;
                                $264 = (($263) + (($18 * 768) | 0) | 0);
                                $265 = HEAP32[$226 >> 2] | 0;
                                $266 = (($265) + ($18) | 0);
                                $267 = HEAP8[$266 >> 0] | 0;
                                $268 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 0, 16, 15482, 1, $264, $267, $0) | 0);
                                $269 = ($268 | 0) == (0);
                                if (!($269)) {
                                    $$34 = $268;
                                    break L49;
                                }
                                $270 = ($$1505 | 0) == (0);
                                if ($270) {
                                    $300 = HEAP32[$145 >> 2] | 0;
                                    $301 = (($300) + (($18 * 24) | 0) | 0);
                                    HEAP8[$301 >> 0] = 0 & 255; HEAP8[$301 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$301 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$301 + 3 >> 0] = 0 >> 24;
                                    $302 = HEAP32[$145 >> 2] | 0;
                                    $303 = (((($302) + (($18 * 24) | 0) | 0)) + 4 | 0);
                                    HEAP8[$303 >> 0] = 0 & 255; HEAP8[$303 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$303 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$303 + 3 >> 0] = 0 >> 24;
                                    $304 = HEAP32[$145 >> 2] | 0;
                                    $305 = (((($304) + (($18 * 24) | 0) | 0)) + 8 | 0);
                                    HEAP8[$305 >> 0] = 0 & 255; HEAP8[$305 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$305 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$305 + 3 >> 0] = 0 >> 24;
                                    $$sink29$sink = 0;
                                    break;
                                }
                                $271 = ($13 >>> 0) > (1);
                                $272 = $271 ? $13 : 1;
                                $273 = (($16) + 1) | 0;
                                $274 = (($273) - ($272)) | 0;
                                $275 = (26970 + ($272) | 0);
                                $$2500589 = 0;
                                while (1) {
                                    $278 = HEAP32[$213 >> 2] | 0;
                                    $279 = $$2500589 << 4;
                                    $280 = ((($278) + (($18 * 768) | 0) | 0) + ($279 << 1) | 0);
                                    $281 = HEAP32[$226 >> 2] | 0;
                                    $282 = (($281) + ($18) | 0);
                                    $283 = HEAP8[$282 >> 0] | 0;
                                    $284 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, $$2500589, $274, $275, 2, $280, $283, $0) | 0);
                                    $285 = ($284 | 0) == (0);
                                    if (!($285)) {
                                        $$34 = $284;
                                        break L49;
                                    }
                                    $276 = (($$2500589) + 1) | 0;
                                    $277 = ($$2500589 | 0) < (15);
                                    if ($277) {
                                        $$2500589 = $276;
                                    } else {
                                        break;
                                    }
                                }
                                $286 = ((($23)) + 9 | 0);
                                $287 = HEAPU8[$286 >> 0] | (HEAPU8[$286 + 1 >> 0] << 8) | (HEAPU8[$286 + 2 >> 0] << 16) | (HEAPU8[$286 + 3 >> 0] << 24);
                                $288 = HEAP32[$145 >> 2] | 0;
                                $289 = (($288) + (($18 * 24) | 0) | 0);
                                HEAP8[$289 >> 0] = $287 & 255; HEAP8[$289 + 1 >> 0] = ($287 >> 8) & 255; HEAP8[$289 + 2 >> 0] = ($287 >> 16) & 255; HEAP8[$289 + 3 >> 0] = $287 >> 24;
                                $290 = ((($23)) + 17 | 0);
                                $291 = HEAPU8[$290 >> 0] | (HEAPU8[$290 + 1 >> 0] << 8) | (HEAPU8[$290 + 2 >> 0] << 16) | (HEAPU8[$290 + 3 >> 0] << 24);
                                $292 = HEAP32[$145 >> 2] | 0;
                                $293 = (((($292) + (($18 * 24) | 0) | 0)) + 4 | 0);
                                HEAP8[$293 >> 0] = $291 & 255; HEAP8[$293 + 1 >> 0] = ($291 >> 8) & 255; HEAP8[$293 + 2 >> 0] = ($291 >> 16) & 255; HEAP8[$293 + 3 >> 0] = $291 >> 24;
                                $294 = ((($23)) + 25 | 0);
                                $295 = HEAPU8[$294 >> 0] | (HEAPU8[$294 + 1 >> 0] << 8) | (HEAPU8[$294 + 2 >> 0] << 16) | (HEAPU8[$294 + 3 >> 0] << 24);
                                $296 = HEAP32[$145 >> 2] | 0;
                                $297 = (((($296) + (($18 * 24) | 0) | 0)) + 8 | 0);
                                HEAP8[$297 >> 0] = $295 & 255; HEAP8[$297 + 1 >> 0] = ($295 >> 8) & 255; HEAP8[$297 + 2 >> 0] = ($295 >> 16) & 255; HEAP8[$297 + 3 >> 0] = $295 >> 24;
                                $298 = ((($23)) + 33 | 0);
                                $299 = HEAPU8[$298 >> 0] | (HEAPU8[$298 + 1 >> 0] << 8) | (HEAPU8[$298 + 2 >> 0] << 16) | (HEAPU8[$298 + 3 >> 0] << 24);
                                $$sink29$sink = $299;
                            } else {
                                $306 = HEAP32[$27 >> 2] | 0;
                                $307 = (($306) + ($18) | 0);
                                $308 = HEAP8[$307 >> 0] | 0;
                                $309 = ($308 << 24 >> 24) == (0);
                                $310 = (1 - ($13)) | 0;
                                $311 = (($310) + ($16)) | 0;
                                if ($309) {
                                    $315 = (26970 + ($13) | 0);
                                    $$1531592 = 0;
                                    while (1) {
                                        $331 = 1 << $$1531592;
                                        $332 = $331 & $$1505;
                                        $333 = ($332 | 0) == (0);
                                        $334 = $$1531592 << 2;
                                        if ($333) {
                                            $352 = (15431 + ($334) | 0);
                                            $353 = HEAP8[$352 >> 0] | 0;
                                            $354 = $353 & 255;
                                            $355 = (($23) + ($354) | 0);
                                            HEAP8[$355 >> 0] = 0 & 255; HEAP8[$355 + 1 >> 0] = 0 >> 8;
                                            $356 = $334 | 2;
                                            $357 = (15431 + ($356) | 0);
                                            $358 = HEAP8[$357 >> 0] | 0;
                                            $359 = $358 & 255;
                                            $360 = (($23) + ($359) | 0);
                                            HEAP8[$360 >> 0] = 0 & 255; HEAP8[$360 + 1 >> 0] = 0 >> 8;
                                        } else {
                                            $335 = HEAP32[$213 >> 2] | 0;
                                            $336 = $$1531592 << 6;
                                            $337 = ((($335) + (($18 * 768) | 0) | 0) + ($336 << 1) | 0);
                                            $338 = HEAP32[$226 >> 2] | 0;
                                            $339 = (($338) + ($18) | 0);
                                            $340 = HEAP8[$339 >> 0] | 0;
                                            $341 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, $334, $311, $315, 11, $337, $340, $0) | 0);
                                            $342 = ($341 | 0) == (0);
                                            if (!($342)) {
                                                $$34 = $341;
                                                break L49;
                                            }
                                            $343 = $334 | 1;
                                            $344 = HEAP32[$213 >> 2] | 0;
                                            $345 = $343 << 4;
                                            $346 = ((($344) + (($18 * 768) | 0) | 0) + ($345 << 1) | 0);
                                            $347 = HEAP32[$226 >> 2] | 0;
                                            $348 = (($347) + ($18) | 0);
                                            $349 = HEAP8[$348 >> 0] | 0;
                                            $350 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, $343, $311, $315, 11, $346, $349, $0) | 0);
                                            $351 = ($350 | 0) == (0);
                                            if (!($351)) {
                                                $$34 = $350;
                                                break L49;
                                            }
                                            $499 = (($343) + 1) | 0;
                                            $500 = HEAP32[$213 >> 2] | 0;
                                            $501 = $499 << 4;
                                            $502 = ((($500) + (($18 * 768) | 0) | 0) + ($501 << 1) | 0);
                                            $503 = HEAP32[$226 >> 2] | 0;
                                            $504 = (($503) + ($18) | 0);
                                            $505 = HEAP8[$504 >> 0] | 0;
                                            $506 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, $499, $311, $315, 11, $502, $505, $0) | 0);
                                            $507 = ($506 | 0) == (0);
                                            if (!($507)) {
                                                $$34 = $506;
                                                break L49;
                                            }
                                            $508 = $334 | 3;
                                            $509 = HEAP32[$213 >> 2] | 0;
                                            $510 = $508 << 4;
                                            $511 = ((($509) + (($18 * 768) | 0) | 0) + ($510 << 1) | 0);
                                            $512 = HEAP32[$226 >> 2] | 0;
                                            $513 = (($512) + ($18) | 0);
                                            $514 = HEAP8[$513 >> 0] | 0;
                                            $515 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, $508, $311, $315, 11, $511, $514, $0) | 0);
                                            $516 = ($515 | 0) == (0);
                                            if (!($516)) {
                                                $$34 = $515;
                                                break L49;
                                            }
                                        }
                                        $361 = (($$1531592) + 1) | 0;
                                        $362 = ($$1531592 | 0) < (3);
                                        if ($362) {
                                            $$1531592 = $361;
                                        } else {
                                            break;
                                        }
                                    }
                                    $363 = ((($23)) + 9 | 0);
                                    $364 = HEAPU8[$363 >> 0] | (HEAPU8[$363 + 1 >> 0] << 8) | (HEAPU8[$363 + 2 >> 0] << 16) | (HEAPU8[$363 + 3 >> 0] << 24);
                                    $365 = HEAP32[$145 >> 2] | 0;
                                    $366 = (($365) + (($18 * 24) | 0) | 0);
                                    HEAP8[$366 >> 0] = $364 & 255; HEAP8[$366 + 1 >> 0] = ($364 >> 8) & 255; HEAP8[$366 + 2 >> 0] = ($364 >> 16) & 255; HEAP8[$366 + 3 >> 0] = $364 >> 24;
                                    $367 = ((($23)) + 17 | 0);
                                    $368 = HEAPU8[$367 >> 0] | (HEAPU8[$367 + 1 >> 0] << 8) | (HEAPU8[$367 + 2 >> 0] << 16) | (HEAPU8[$367 + 3 >> 0] << 24);
                                    $369 = HEAP32[$145 >> 2] | 0;
                                    $370 = (((($369) + (($18 * 24) | 0) | 0)) + 4 | 0);
                                    HEAP8[$370 >> 0] = $368 & 255; HEAP8[$370 + 1 >> 0] = ($368 >> 8) & 255; HEAP8[$370 + 2 >> 0] = ($368 >> 16) & 255; HEAP8[$370 + 3 >> 0] = $368 >> 24;
                                    $371 = ((($23)) + 25 | 0);
                                    $372 = HEAPU8[$371 >> 0] | (HEAPU8[$371 + 1 >> 0] << 8) | (HEAPU8[$371 + 2 >> 0] << 16) | (HEAPU8[$371 + 3 >> 0] << 24);
                                    $373 = HEAP32[$145 >> 2] | 0;
                                    $374 = (((($373) + (($18 * 24) | 0) | 0)) + 8 | 0);
                                    HEAP8[$374 >> 0] = $372 & 255; HEAP8[$374 + 1 >> 0] = ($372 >> 8) & 255; HEAP8[$374 + 2 >> 0] = ($372 >> 16) & 255; HEAP8[$374 + 3 >> 0] = $372 >> 24;
                                    $375 = ((($23)) + 33 | 0);
                                    $376 = HEAPU8[$375 >> 0] | (HEAPU8[$375 + 1 >> 0] << 8) | (HEAPU8[$375 + 2 >> 0] << 16) | (HEAPU8[$375 + 3 >> 0] << 24);
                                    $$sink29$sink = $376;
                                    break;
                                }
                                $312 = (26986 + ($13) | 0);
                                $313 = $$1505 & 1;
                                $314 = ($313 | 0) == (0);
                                if ($314) {
                                    $323 = HEAP8[15431] | 0;
                                    $324 = $323 & 255;
                                    $325 = (($23) + ($324) | 0);
                                    HEAP8[$325 >> 0] = 0 & 255; HEAP8[$325 + 1 >> 0] = 0 >> 8;
                                    $326 = HEAP8[(15433) >> 0] | 0;
                                    $327 = $326 & 255;
                                    $328 = (($23) + ($327) | 0);
                                    HEAP8[$328 >> 0] = 0 & 255; HEAP8[$328 + 1 >> 0] = 0 >> 8;
                                } else {
                                    $316 = HEAP32[$213 >> 2] | 0;
                                    $317 = (($316) + (($18 * 768) | 0) | 0);
                                    $318 = HEAP32[$226 >> 2] | 0;
                                    $319 = (($318) + ($18) | 0);
                                    $320 = HEAP8[$319 >> 0] | 0;
                                    $321 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 0, $311, $312, 17, $317, $320, $0) | 0);
                                    $322 = ($321 | 0) == (0);
                                    if (!($322)) {
                                        $$34 = $321;
                                        break L49;
                                    }
                                }
                                $329 = $$1505 & 2;
                                $330 = ($329 | 0) == (0);
                                if ($330) {
                                    $524 = HEAP8[(15435) >> 0] | 0;
                                    $525 = $524 & 255;
                                    $526 = (($23) + ($525) | 0);
                                    HEAP8[$526 >> 0] = 0 & 255; HEAP8[$526 + 1 >> 0] = 0 >> 8;
                                    $527 = HEAP8[(15437) >> 0] | 0;
                                    $528 = $527 & 255;
                                    $529 = (($23) + ($528) | 0);
                                    HEAP8[$529 >> 0] = 0 & 255; HEAP8[$529 + 1 >> 0] = 0 >> 8;
                                } else {
                                    $517 = HEAP32[$213 >> 2] | 0;
                                    $518 = (((($517) + (($18 * 768) | 0) | 0)) + 128 | 0);
                                    $519 = HEAP32[$226 >> 2] | 0;
                                    $520 = (($519) + ($18) | 0);
                                    $521 = HEAP8[$520 >> 0] | 0;
                                    $522 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 4, $311, $312, 17, $518, $521, $0) | 0);
                                    $523 = ($522 | 0) == (0);
                                    if (!($523)) {
                                        $$34 = $522;
                                        break L49;
                                    }
                                }
                                $530 = $$1505 & 4;
                                $531 = ($530 | 0) == (0);
                                if ($531) {
                                    $539 = HEAP8[(15439) >> 0] | 0;
                                    $540 = $539 & 255;
                                    $541 = (($23) + ($540) | 0);
                                    HEAP8[$541 >> 0] = 0 & 255; HEAP8[$541 + 1 >> 0] = 0 >> 8;
                                    $542 = HEAP8[(15441) >> 0] | 0;
                                    $543 = $542 & 255;
                                    $544 = (($23) + ($543) | 0);
                                    HEAP8[$544 >> 0] = 0 & 255; HEAP8[$544 + 1 >> 0] = 0 >> 8;
                                } else {
                                    $532 = HEAP32[$213 >> 2] | 0;
                                    $533 = (((($532) + (($18 * 768) | 0) | 0)) + 256 | 0);
                                    $534 = HEAP32[$226 >> 2] | 0;
                                    $535 = (($534) + ($18) | 0);
                                    $536 = HEAP8[$535 >> 0] | 0;
                                    $537 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 8, $311, $312, 17, $533, $536, $0) | 0);
                                    $538 = ($537 | 0) == (0);
                                    if (!($538)) {
                                        $$34 = $537;
                                        break L49;
                                    }
                                }
                                $545 = $$1505 & 8;
                                $546 = ($545 | 0) == (0);
                                if ($546) {
                                    $554 = HEAP8[(15443) >> 0] | 0;
                                    $555 = $554 & 255;
                                    $556 = (($23) + ($555) | 0);
                                    HEAP8[$556 >> 0] = 0 & 255; HEAP8[$556 + 1 >> 0] = 0 >> 8;
                                    $557 = HEAP8[(15445) >> 0] | 0;
                                    $558 = $557 & 255;
                                    $559 = (($23) + ($558) | 0);
                                    HEAP8[$559 >> 0] = 0 & 255; HEAP8[$559 + 1 >> 0] = 0 >> 8;
                                } else {
                                    $547 = HEAP32[$213 >> 2] | 0;
                                    $548 = (((($547) + (($18 * 768) | 0) | 0)) + 384 | 0);
                                    $549 = HEAP32[$226 >> 2] | 0;
                                    $550 = (($549) + ($18) | 0);
                                    $551 = HEAP8[$550 >> 0] | 0;
                                    $552 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 12, $311, $312, 17, $548, $551, $0) | 0);
                                    $553 = ($552 | 0) == (0);
                                    if (!($553)) {
                                        $$34 = $552;
                                        break L49;
                                    }
                                }
                                $560 = ((($23)) + 9 | 0);
                                $561 = HEAPU8[$560 >> 0] | (HEAPU8[$560 + 1 >> 0] << 8) | (HEAPU8[$560 + 2 >> 0] << 16) | (HEAPU8[$560 + 3 >> 0] << 24);
                                $562 = HEAP32[$145 >> 2] | 0;
                                $563 = (($562) + (($18 * 24) | 0) | 0);
                                HEAP8[$563 >> 0] = $561 & 255; HEAP8[$563 + 1 >> 0] = ($561 >> 8) & 255; HEAP8[$563 + 2 >> 0] = ($561 >> 16) & 255; HEAP8[$563 + 3 >> 0] = $561 >> 24;
                                $564 = ((($23)) + 17 | 0);
                                $565 = HEAPU8[$564 >> 0] | (HEAPU8[$564 + 1 >> 0] << 8) | (HEAPU8[$564 + 2 >> 0] << 16) | (HEAPU8[$564 + 3 >> 0] << 24);
                                $566 = HEAP32[$145 >> 2] | 0;
                                $567 = (((($566) + (($18 * 24) | 0) | 0)) + 4 | 0);
                                HEAP8[$567 >> 0] = $565 & 255; HEAP8[$567 + 1 >> 0] = ($565 >> 8) & 255; HEAP8[$567 + 2 >> 0] = ($565 >> 16) & 255; HEAP8[$567 + 3 >> 0] = $565 >> 24;
                                $568 = ((($23)) + 25 | 0);
                                $569 = HEAPU8[$568 >> 0] | (HEAPU8[$568 + 1 >> 0] << 8) | (HEAPU8[$568 + 2 >> 0] << 16) | (HEAPU8[$568 + 3 >> 0] << 24);
                                $570 = HEAP32[$145 >> 2] | 0;
                                $571 = (((($570) + (($18 * 24) | 0) | 0)) + 8 | 0);
                                HEAP8[$571 >> 0] = $569 & 255; HEAP8[$571 + 1 >> 0] = ($569 >> 8) & 255; HEAP8[$571 + 2 >> 0] = ($569 >> 16) & 255; HEAP8[$571 + 3 >> 0] = $569 >> 24;
                                $572 = ((($23)) + 33 | 0);
                                $573 = HEAPU8[$572 >> 0] | (HEAPU8[$572 + 1 >> 0] << 8) | (HEAPU8[$572 + 2 >> 0] << 16) | (HEAPU8[$572 + 3 >> 0] << 24);
                                $$sink29$sink = $573;
                            }
                        } while (0);
                        $377 = HEAP32[$145 >> 2] | 0;
                        $378 = (((($377) + (($18 * 24) | 0) | 0)) + 12 | 0);
                        HEAP8[$378 >> 0] = $$sink29$sink & 255; HEAP8[$378 + 1 >> 0] = ($$sink29$sink >> 8) & 255; HEAP8[$378 + 2 >> 0] = ($$sink29$sink >> 16) & 255; HEAP8[$378 + 3 >> 0] = $$sink29$sink >> 24;
                        $379 = ($$1507 | 0) == (2);
                        $380 = (($$1507) + -1) | 0;
                        $381 = ($380 >>> 0) < (2);
                        if ($381) {
                            $382 = HEAP32[$213 >> 2] | 0;
                            $383 = (((($382) + (($18 * 768) | 0) | 0)) + 512 | 0);
                            $384 = HEAP32[$234 >> 2] | 0;
                            $385 = (($384) + ($18 << 1) | 0);
                            $386 = HEAP8[$385 >> 0] | 0;
                            $387 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 16, 4, 15498, 7, $383, $386, $0) | 0);
                            $388 = ($387 | 0) == (0);
                            if (!($388)) {
                                $$34 = $387;
                                break;
                            }
                            $389 = HEAP32[$213 >> 2] | 0;
                            $390 = (((($389) + (($18 * 768) | 0) | 0)) + 640 | 0);
                            $391 = HEAP32[$234 >> 2] | 0;
                            $392 = (((($391) + ($18 << 1) | 0)) + 1 | 0);
                            $393 = HEAP8[$392 >> 0] | 0;
                            $394 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 20, 4, 15498, 8, $390, $393, $0) | 0);
                            $395 = ($394 | 0) == (0);
                            if (!($395)) {
                                $$34 = $394;
                                break;
                            }
                        }
                        if ($379) {
                            $396 = ($13 >>> 0) > (1);
                            $397 = $396 ? $13 : 1;
                            $398 = (($16) + 1) | 0;
                            $399 = (($398) - ($397)) | 0;
                            $400 = (26970 + ($397) | 0);
                            $401 = HEAP32[$213 >> 2] | 0;
                            $402 = (((($401) + (($18 * 768) | 0) | 0)) + 512 | 0);
                            $403 = HEAP32[$234 >> 2] | 0;
                            $404 = (($403) + ($18 << 1) | 0);
                            $405 = HEAP8[$404 >> 0] | 0;
                            $406 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 16, $399, $400, 9, $402, $405, $0) | 0);
                            $407 = ($406 | 0) == (0);
                            if (!($407)) {
                                $$34 = $406;
                                break;
                            }
                            $408 = HEAP32[$213 >> 2] | 0;
                            $409 = (((($408) + (($18 * 768) | 0) | 0)) + 544 | 0);
                            $410 = HEAP32[$234 >> 2] | 0;
                            $411 = (($410) + ($18 << 1) | 0);
                            $412 = HEAP8[$411 >> 0] | 0;
                            $413 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 17, $399, $400, 9, $409, $412, $0) | 0);
                            $414 = ($413 | 0) == (0);
                            if (!($414)) {
                                $$34 = $413;
                                break;
                            }
                            $443 = HEAP32[$213 >> 2] | 0;
                            $444 = (((($443) + (($18 * 768) | 0) | 0)) + 576 | 0);
                            $445 = HEAP32[$234 >> 2] | 0;
                            $446 = (($445) + ($18 << 1) | 0);
                            $447 = HEAP8[$446 >> 0] | 0;
                            $448 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 18, $399, $400, 9, $444, $447, $0) | 0);
                            $449 = ($448 | 0) == (0);
                            if (!($449)) {
                                $$34 = $448;
                                break;
                            }
                            $450 = HEAP32[$213 >> 2] | 0;
                            $451 = (((($450) + (($18 * 768) | 0) | 0)) + 608 | 0);
                            $452 = HEAP32[$234 >> 2] | 0;
                            $453 = (($452) + ($18 << 1) | 0);
                            $454 = HEAP8[$453 >> 0] | 0;
                            $455 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 19, $399, $400, 9, $451, $454, $0) | 0);
                            $456 = ($455 | 0) == (0);
                            if (!($456)) {
                                $$34 = $455;
                                break;
                            }
                            $457 = HEAP32[$213 >> 2] | 0;
                            $458 = (((($457) + (($18 * 768) | 0) | 0)) + 640 | 0);
                            $459 = HEAP32[$234 >> 2] | 0;
                            $460 = (((($459) + ($18 << 1) | 0)) + 1 | 0);
                            $461 = HEAP8[$460 >> 0] | 0;
                            $462 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 20, $399, $400, 10, $458, $461, $0) | 0);
                            $463 = ($462 | 0) == (0);
                            if (!($463)) {
                                $$34 = $462;
                                break;
                            }
                            $464 = HEAP32[$213 >> 2] | 0;
                            $465 = (((($464) + (($18 * 768) | 0) | 0)) + 672 | 0);
                            $466 = HEAP32[$234 >> 2] | 0;
                            $467 = (((($466) + ($18 << 1) | 0)) + 1 | 0);
                            $468 = HEAP8[$467 >> 0] | 0;
                            $469 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 21, $399, $400, 10, $465, $468, $0) | 0);
                            $470 = ($469 | 0) == (0);
                            if (!($470)) {
                                $$34 = $469;
                                break;
                            }
                            $471 = HEAP32[$213 >> 2] | 0;
                            $472 = (((($471) + (($18 * 768) | 0) | 0)) + 704 | 0);
                            $473 = HEAP32[$234 >> 2] | 0;
                            $474 = (((($473) + ($18 << 1) | 0)) + 1 | 0);
                            $475 = HEAP8[$474 >> 0] | 0;
                            $476 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 22, $399, $400, 10, $472, $475, $0) | 0);
                            $477 = ($476 | 0) == (0);
                            if (!($477)) {
                                $$34 = $476;
                                break;
                            }
                            $478 = HEAP32[$213 >> 2] | 0;
                            $479 = (((($478) + (($18 * 768) | 0) | 0)) + 736 | 0);
                            $480 = HEAP32[$234 >> 2] | 0;
                            $481 = (((($480) + ($18 << 1) | 0)) + 1 | 0);
                            $482 = HEAP8[$481 >> 0] | 0;
                            $483 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($2, $23, $10, 23, $399, $400, 10, $479, $482, $0) | 0);
                            $484 = ($483 | 0) == (0);
                            if (!($484)) {
                                $$34 = $483;
                                break;
                            }
                            $485 = ((($23)) + 14 | 0);
                            $486 = HEAPU8[$485 >> 0] | (HEAPU8[$485 + 1 >> 0] << 8);
                            $487 = HEAP32[$145 >> 2] | 0;
                            $488 = (((($487) + (($18 * 24) | 0) | 0)) + 16 | 0);
                            HEAP8[$488 >> 0] = $486 & 255; HEAP8[$488 + 1 >> 0] = $486 >> 8;
                            $489 = ((($23)) + 22 | 0);
                            $490 = HEAPU8[$489 >> 0] | (HEAPU8[$489 + 1 >> 0] << 8);
                            $491 = HEAP32[$145 >> 2] | 0;
                            $492 = (((($491) + (($18 * 24) | 0) | 0)) + 20 | 0);
                            HEAP8[$492 >> 0] = $490 & 255; HEAP8[$492 + 1 >> 0] = $490 >> 8;
                            $493 = ((($23)) + 38 | 0);
                            $494 = HEAPU8[$493 >> 0] | (HEAPU8[$493 + 1 >> 0] << 8);
                            $495 = HEAP32[$145 >> 2] | 0;
                            $496 = (((($495) + (($18 * 24) | 0) | 0)) + 18 | 0);
                            HEAP8[$496 >> 0] = $494 & 255; HEAP8[$496 + 1 >> 0] = $494 >> 8;
                            $497 = ((($23)) + 46 | 0);
                            $498 = HEAPU8[$497 >> 0] | (HEAPU8[$497 + 1 >> 0] << 8);
                            $$sink39 = $498;
                        } else {
                            $415 = HEAP32[$145 >> 2] | 0;
                            $416 = (((($415) + (($18 * 24) | 0) | 0)) + 16 | 0);
                            HEAP8[$416 >> 0] = 0 & 255; HEAP8[$416 + 1 >> 0] = 0 >> 8;
                            $417 = HEAP32[$145 >> 2] | 0;
                            $418 = (((($417) + (($18 * 24) | 0) | 0)) + 20 | 0);
                            HEAP8[$418 >> 0] = 0 & 255; HEAP8[$418 + 1 >> 0] = 0 >> 8;
                            $419 = HEAP32[$145 >> 2] | 0;
                            $420 = (((($419) + (($18 * 24) | 0) | 0)) + 18 | 0);
                            HEAP8[$420 >> 0] = 0 & 255; HEAP8[$420 + 1 >> 0] = 0 >> 8;
                            $$sink39 = 0;
                        }
                        $$pn = HEAP32[$145 >> 2] | 0;
                        $421 = (((($$pn) + (($18 * 24) | 0) | 0)) + 22 | 0);
                        HEAP8[$421 >> 0] = $$sink39 & 255; HEAP8[$421 + 1 >> 0] = $$sink39 >> 8;
                        break L47;
                    } else {
                        $$34 = $216;
                    }
                } while (0);
                $$37 = $$34;
                STACKTOP = sp; return ($$37 | 0);
            }
        } while (0);
        $434 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($0, $1) | 0);
        $435 = ($434 | 0) == (0);
        if (!($435)) {
            $$37 = $434;
            STACKTOP = sp; return ($$37 | 0);
        }
        $436 = HEAP32[$1 >> 2] | 0;
        $437 = ($436 | 0) == (0);
        if ($437) {
            $$37 = 0;
            STACKTOP = sp; return ($$37 | 0);
        }
        $438 = ((($0)) + 512232 | 0);
        $439 = HEAP32[$438 >> 2] | 0;
        $440 = HEAP32[$7 >> 2] | 0;
        $441 = ((($440)) + 3900 | 0);
        $442 = HEAP32[$441 >> 2] | 0;
        __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($439, $442);
        $$37 = 0;
        STACKTOP = sp; return ($$37 | 0);
    }
    function __ZN7WelsDec22ParseMBTypeISliceCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$8 = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $phitmp99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $3 = sp;
        HEAP32[$2 >> 2] = 0;
        $4 = ((($0)) + 512232 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 511315 | 0);
        $7 = ((($1)) + 4 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ($8 | 0) == (0);
        if ($9) {
            $23 = 0;
        } else {
            $10 = ((($1)) + 16 | 0);
            $11 = HEAP32[$10 >> 2] | 0;
            $12 = ($11 | 0) != (1);
            $13 = ($11 | 0) != (4);
            $14 = $12 & $13;
            $phitmp = $14 & 1;
            $23 = $phitmp;
        }
        $15 = HEAP32[$1 >> 2] | 0;
        $16 = ($15 | 0) == (0);
        if ($16) {
            $24 = 0;
        } else {
            $17 = ((($1)) + 20 | 0);
            $18 = HEAP32[$17 >> 2] | 0;
            $19 = ($18 | 0) != (1);
            $20 = ($18 | 0) != (4);
            $21 = $19 & $20;
            $phitmp99 = $21 & 1;
            $24 = $phitmp99;
        }
        $22 = (($24) + ($23)) | 0;
        $25 = (($6) + ($22 << 1) | 0);
        $26 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $25, $3) | 0);
        $27 = ($26 | 0) == (0);
        if (!($27)) {
            $$8 = $26;
            STACKTOP = sp; return ($$8 | 0);
        }
        $28 = HEAP32[$3 >> 2] | 0;
        HEAP32[$2 >> 2] = $28;
        $29 = ($28 | 0) == (0);
        if ($29) {
            $$8 = 0;
            STACKTOP = sp; return ($$8 | 0);
        }
        $30 = (__ZN7WelsDec20DecodeTerminateCabacEPNS_19SWelsCabacDecEngineERj($5, $3) | 0);
        $31 = ($30 | 0) == (0);
        if (!($31)) {
            $$8 = $30;
            STACKTOP = sp; return ($$8 | 0);
        }
        $32 = HEAP32[$3 >> 2] | 0;
        $33 = ($32 | 0) == (1);
        do {
            if ($33) {
                $$sink = 25;
            } else {
                $34 = ((($0)) + 511321 | 0);
                $35 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $34, $3) | 0);
                $36 = ($35 | 0) == (0);
                if (!($36)) {
                    $$8 = $35;
                    STACKTOP = sp; return ($$8 | 0);
                }
                $37 = HEAP32[$3 >> 2] | 0;
                $38 = ($37 * 12) | 0;
                $39 = $38 | 1;
                HEAP32[$2 >> 2] = $39;
                $40 = ((($0)) + 511323 | 0);
                $41 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $40, $3) | 0);
                $42 = ($41 | 0) == (0);
                if (!($42)) {
                    $$8 = $41;
                    STACKTOP = sp; return ($$8 | 0);
                }
                $43 = HEAP32[$3 >> 2] | 0;
                $44 = ($43 | 0) == (0);
                if (!($44)) {
                    $45 = ((($0)) + 511325 | 0);
                    $46 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $45, $3) | 0);
                    $47 = ($46 | 0) == (0);
                    if (!($47)) {
                        $$8 = $46;
                        STACKTOP = sp; return ($$8 | 0);
                    }
                    $48 = HEAP32[$2 >> 2] | 0;
                    $49 = (($48) + 4) | 0;
                    HEAP32[$2 >> 2] = $49;
                    $50 = HEAP32[$3 >> 2] | 0;
                    $51 = ($50 | 0) == (0);
                    if (!($51)) {
                        $52 = (($48) + 8) | 0;
                        HEAP32[$2 >> 2] = $52;
                    }
                }
                $53 = ((($0)) + 511327 | 0);
                $54 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $53, $3) | 0);
                $55 = ($54 | 0) == (0);
                if (!($55)) {
                    $$8 = $54;
                    STACKTOP = sp; return ($$8 | 0);
                }
                $56 = HEAP32[$3 >> 2] | 0;
                $57 = $56 << 1;
                $58 = HEAP32[$2 >> 2] | 0;
                $59 = (($58) + ($57)) | 0;
                HEAP32[$2 >> 2] = $59;
                $60 = ((($0)) + 511329 | 0);
                $61 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $60, $3) | 0);
                $62 = ($61 | 0) == (0);
                if ($62) {
                    $63 = HEAP32[$3 >> 2] | 0;
                    $64 = HEAP32[$2 >> 2] | 0;
                    $65 = (($64) + ($63)) | 0;
                    $$sink = $65;
                    break;
                } else {
                    $$8 = $61;
                    STACKTOP = sp; return ($$8 | 0);
                }
            }
        } while (0);
        HEAP32[$2 >> 2] = $$sink;
        $$8 = 0;
        STACKTOP = sp; return ($$8 | 0);
    }
    function __ZN7WelsDec18ParseIPCMInfoCabacEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
        var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
        var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
        var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
        var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
        var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
        var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
        var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
        var $279 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
        var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
        var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
        var $scevgep = 0, $scevgep127 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 512232 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($0)) + 241932 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($4)) + 3900 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($4)) + 4100 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ((($8)) + 32 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($8)) + 36 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($4)) + 4032 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ((($4)) + 4036 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = ((($4)) + 4040 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = Math_imul($16, $12) | 0;
        $20 = (($19) + ($14)) | 0;
        $21 = $20 << 3;
        $22 = ((($0)) + 5464 | 0);
        $23 = HEAP32[$22 >> 2] | 0;
        $24 = ((($23)) + 16 | 0);
        $25 = HEAP32[$24 >> 2] | 0;
        $26 = ((($23)) + 20 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = (($27) + ($21) | 0);
        $29 = ((($23)) + 24 | 0);
        $30 = HEAP32[$29 >> 2] | 0;
        $31 = (($30) + ($21) | 0);
        $32 = ((($4)) + 3908 | 0);
        $33 = HEAP32[$32 >> 2] | 0;
        $34 = (($33) + ($18 << 1) | 0);
        HEAP16[$34 >> 1] = 512;
        __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($2, $6);
        $35 = ((($6)) + 4 | 0);
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = ((($6)) + 16 | 0);
        $38 = HEAP32[$37 >> 2] | 0;
        $39 = $38;
        $40 = (($36) - ($39)) | 0;
        $41 = ($40 | 0) < (384);
        if ($41) {
            $$2 = 10012;
            return ($$2 | 0);
        }
        $42 = Math_imul($16, $10) | 0;
        $43 = (($42) + ($14)) | 0;
        $44 = $43 << 4;
        $45 = (($25) + ($44) | 0);
        dest = $45; src = $38; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $46 = (($45) + ($10) | 0);
        $47 = ((($38)) + 16 | 0);
        dest = $46; src = $47; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $48 = (($46) + ($10) | 0);
        $49 = ((($38)) + 32 | 0);
        dest = $48; src = $49; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $50 = (($48) + ($10) | 0);
        $51 = ((($38)) + 48 | 0);
        dest = $50; src = $51; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $52 = (($50) + ($10) | 0);
        $53 = ((($38)) + 64 | 0);
        dest = $52; src = $53; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $54 = (($52) + ($10) | 0);
        $55 = ((($38)) + 80 | 0);
        dest = $54; src = $55; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $56 = (($54) + ($10) | 0);
        $57 = ((($38)) + 96 | 0);
        dest = $56; src = $57; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $58 = (($56) + ($10) | 0);
        $59 = ((($38)) + 112 | 0);
        dest = $58; src = $59; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $60 = (($58) + ($10) | 0);
        $61 = ((($38)) + 128 | 0);
        dest = $60; src = $61; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $62 = (($60) + ($10) | 0);
        $63 = ((($38)) + 144 | 0);
        dest = $62; src = $63; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $64 = (($62) + ($10) | 0);
        $65 = ((($38)) + 160 | 0);
        dest = $64; src = $65; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $66 = (($64) + ($10) | 0);
        $67 = ((($38)) + 176 | 0);
        dest = $66; src = $67; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $68 = (($66) + ($10) | 0);
        $69 = ((($38)) + 192 | 0);
        dest = $68; src = $69; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $70 = (($68) + ($10) | 0);
        $71 = ((($38)) + 208 | 0);
        dest = $70; src = $71; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $72 = (($70) + ($10) | 0);
        $73 = ((($38)) + 224 | 0);
        dest = $72; src = $73; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $74 = (($72) + ($10) | 0);
        $75 = ((($38)) + 240 | 0);
        dest = $74; src = $75; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
        $scevgep127 = ((($38)) + 256 | 0);
        $76 = $scevgep127;
        $77 = $76;
        $78 = HEAPU8[$77 >> 0] | (HEAPU8[$77 + 1 >> 0] << 8) | (HEAPU8[$77 + 2 >> 0] << 16) | (HEAPU8[$77 + 3 >> 0] << 24);
        $79 = (($76) + 4) | 0;
        $80 = $79;
        $81 = HEAPU8[$80 >> 0] | (HEAPU8[$80 + 1 >> 0] << 8) | (HEAPU8[$80 + 2 >> 0] << 16) | (HEAPU8[$80 + 3 >> 0] << 24);
        $82 = $28;
        $83 = $82;
        HEAP8[$83 >> 0] = $78 & 255; HEAP8[$83 + 1 >> 0] = ($78 >> 8) & 255; HEAP8[$83 + 2 >> 0] = ($78 >> 16) & 255; HEAP8[$83 + 3 >> 0] = $78 >> 24;
        $84 = (($82) + 4) | 0;
        $85 = $84;
        HEAP8[$85 >> 0] = $81 & 255; HEAP8[$85 + 1 >> 0] = ($81 >> 8) & 255; HEAP8[$85 + 2 >> 0] = ($81 >> 16) & 255; HEAP8[$85 + 3 >> 0] = $81 >> 24;
        $86 = (($28) + ($12) | 0);
        $87 = ((($38)) + 264 | 0);
        $88 = $87;
        $89 = $88;
        $90 = HEAPU8[$89 >> 0] | (HEAPU8[$89 + 1 >> 0] << 8) | (HEAPU8[$89 + 2 >> 0] << 16) | (HEAPU8[$89 + 3 >> 0] << 24);
        $91 = (($88) + 4) | 0;
        $92 = $91;
        $93 = HEAPU8[$92 >> 0] | (HEAPU8[$92 + 1 >> 0] << 8) | (HEAPU8[$92 + 2 >> 0] << 16) | (HEAPU8[$92 + 3 >> 0] << 24);
        $94 = $86;
        $95 = $94;
        HEAP8[$95 >> 0] = $90 & 255; HEAP8[$95 + 1 >> 0] = ($90 >> 8) & 255; HEAP8[$95 + 2 >> 0] = ($90 >> 16) & 255; HEAP8[$95 + 3 >> 0] = $90 >> 24;
        $96 = (($94) + 4) | 0;
        $97 = $96;
        HEAP8[$97 >> 0] = $93 & 255; HEAP8[$97 + 1 >> 0] = ($93 >> 8) & 255; HEAP8[$97 + 2 >> 0] = ($93 >> 16) & 255; HEAP8[$97 + 3 >> 0] = $93 >> 24;
        $98 = (($86) + ($12) | 0);
        $99 = ((($38)) + 272 | 0);
        $100 = $99;
        $101 = $100;
        $102 = HEAPU8[$101 >> 0] | (HEAPU8[$101 + 1 >> 0] << 8) | (HEAPU8[$101 + 2 >> 0] << 16) | (HEAPU8[$101 + 3 >> 0] << 24);
        $103 = (($100) + 4) | 0;
        $104 = $103;
        $105 = HEAPU8[$104 >> 0] | (HEAPU8[$104 + 1 >> 0] << 8) | (HEAPU8[$104 + 2 >> 0] << 16) | (HEAPU8[$104 + 3 >> 0] << 24);
        $106 = $98;
        $107 = $106;
        HEAP8[$107 >> 0] = $102 & 255; HEAP8[$107 + 1 >> 0] = ($102 >> 8) & 255; HEAP8[$107 + 2 >> 0] = ($102 >> 16) & 255; HEAP8[$107 + 3 >> 0] = $102 >> 24;
        $108 = (($106) + 4) | 0;
        $109 = $108;
        HEAP8[$109 >> 0] = $105 & 255; HEAP8[$109 + 1 >> 0] = ($105 >> 8) & 255; HEAP8[$109 + 2 >> 0] = ($105 >> 16) & 255; HEAP8[$109 + 3 >> 0] = $105 >> 24;
        $110 = (($98) + ($12) | 0);
        $111 = ((($38)) + 280 | 0);
        $112 = $111;
        $113 = $112;
        $114 = HEAPU8[$113 >> 0] | (HEAPU8[$113 + 1 >> 0] << 8) | (HEAPU8[$113 + 2 >> 0] << 16) | (HEAPU8[$113 + 3 >> 0] << 24);
        $115 = (($112) + 4) | 0;
        $116 = $115;
        $117 = HEAPU8[$116 >> 0] | (HEAPU8[$116 + 1 >> 0] << 8) | (HEAPU8[$116 + 2 >> 0] << 16) | (HEAPU8[$116 + 3 >> 0] << 24);
        $118 = $110;
        $119 = $118;
        HEAP8[$119 >> 0] = $114 & 255; HEAP8[$119 + 1 >> 0] = ($114 >> 8) & 255; HEAP8[$119 + 2 >> 0] = ($114 >> 16) & 255; HEAP8[$119 + 3 >> 0] = $114 >> 24;
        $120 = (($118) + 4) | 0;
        $121 = $120;
        HEAP8[$121 >> 0] = $117 & 255; HEAP8[$121 + 1 >> 0] = ($117 >> 8) & 255; HEAP8[$121 + 2 >> 0] = ($117 >> 16) & 255; HEAP8[$121 + 3 >> 0] = $117 >> 24;
        $122 = (($110) + ($12) | 0);
        $123 = ((($38)) + 288 | 0);
        $124 = $123;
        $125 = $124;
        $126 = HEAPU8[$125 >> 0] | (HEAPU8[$125 + 1 >> 0] << 8) | (HEAPU8[$125 + 2 >> 0] << 16) | (HEAPU8[$125 + 3 >> 0] << 24);
        $127 = (($124) + 4) | 0;
        $128 = $127;
        $129 = HEAPU8[$128 >> 0] | (HEAPU8[$128 + 1 >> 0] << 8) | (HEAPU8[$128 + 2 >> 0] << 16) | (HEAPU8[$128 + 3 >> 0] << 24);
        $130 = $122;
        $131 = $130;
        HEAP8[$131 >> 0] = $126 & 255; HEAP8[$131 + 1 >> 0] = ($126 >> 8) & 255; HEAP8[$131 + 2 >> 0] = ($126 >> 16) & 255; HEAP8[$131 + 3 >> 0] = $126 >> 24;
        $132 = (($130) + 4) | 0;
        $133 = $132;
        HEAP8[$133 >> 0] = $129 & 255; HEAP8[$133 + 1 >> 0] = ($129 >> 8) & 255; HEAP8[$133 + 2 >> 0] = ($129 >> 16) & 255; HEAP8[$133 + 3 >> 0] = $129 >> 24;
        $134 = (($122) + ($12) | 0);
        $135 = ((($38)) + 296 | 0);
        $136 = $135;
        $137 = $136;
        $138 = HEAPU8[$137 >> 0] | (HEAPU8[$137 + 1 >> 0] << 8) | (HEAPU8[$137 + 2 >> 0] << 16) | (HEAPU8[$137 + 3 >> 0] << 24);
        $139 = (($136) + 4) | 0;
        $140 = $139;
        $141 = HEAPU8[$140 >> 0] | (HEAPU8[$140 + 1 >> 0] << 8) | (HEAPU8[$140 + 2 >> 0] << 16) | (HEAPU8[$140 + 3 >> 0] << 24);
        $142 = $134;
        $143 = $142;
        HEAP8[$143 >> 0] = $138 & 255; HEAP8[$143 + 1 >> 0] = ($138 >> 8) & 255; HEAP8[$143 + 2 >> 0] = ($138 >> 16) & 255; HEAP8[$143 + 3 >> 0] = $138 >> 24;
        $144 = (($142) + 4) | 0;
        $145 = $144;
        HEAP8[$145 >> 0] = $141 & 255; HEAP8[$145 + 1 >> 0] = ($141 >> 8) & 255; HEAP8[$145 + 2 >> 0] = ($141 >> 16) & 255; HEAP8[$145 + 3 >> 0] = $141 >> 24;
        $146 = (($134) + ($12) | 0);
        $147 = ((($38)) + 304 | 0);
        $148 = $147;
        $149 = $148;
        $150 = HEAPU8[$149 >> 0] | (HEAPU8[$149 + 1 >> 0] << 8) | (HEAPU8[$149 + 2 >> 0] << 16) | (HEAPU8[$149 + 3 >> 0] << 24);
        $151 = (($148) + 4) | 0;
        $152 = $151;
        $153 = HEAPU8[$152 >> 0] | (HEAPU8[$152 + 1 >> 0] << 8) | (HEAPU8[$152 + 2 >> 0] << 16) | (HEAPU8[$152 + 3 >> 0] << 24);
        $154 = $146;
        $155 = $154;
        HEAP8[$155 >> 0] = $150 & 255; HEAP8[$155 + 1 >> 0] = ($150 >> 8) & 255; HEAP8[$155 + 2 >> 0] = ($150 >> 16) & 255; HEAP8[$155 + 3 >> 0] = $150 >> 24;
        $156 = (($154) + 4) | 0;
        $157 = $156;
        HEAP8[$157 >> 0] = $153 & 255; HEAP8[$157 + 1 >> 0] = ($153 >> 8) & 255; HEAP8[$157 + 2 >> 0] = ($153 >> 16) & 255; HEAP8[$157 + 3 >> 0] = $153 >> 24;
        $158 = (($146) + ($12) | 0);
        $159 = ((($38)) + 312 | 0);
        $160 = $159;
        $161 = $160;
        $162 = HEAPU8[$161 >> 0] | (HEAPU8[$161 + 1 >> 0] << 8) | (HEAPU8[$161 + 2 >> 0] << 16) | (HEAPU8[$161 + 3 >> 0] << 24);
        $163 = (($160) + 4) | 0;
        $164 = $163;
        $165 = HEAPU8[$164 >> 0] | (HEAPU8[$164 + 1 >> 0] << 8) | (HEAPU8[$164 + 2 >> 0] << 16) | (HEAPU8[$164 + 3 >> 0] << 24);
        $166 = $158;
        $167 = $166;
        HEAP8[$167 >> 0] = $162 & 255; HEAP8[$167 + 1 >> 0] = ($162 >> 8) & 255; HEAP8[$167 + 2 >> 0] = ($162 >> 16) & 255; HEAP8[$167 + 3 >> 0] = $162 >> 24;
        $168 = (($166) + 4) | 0;
        $169 = $168;
        HEAP8[$169 >> 0] = $165 & 255; HEAP8[$169 + 1 >> 0] = ($165 >> 8) & 255; HEAP8[$169 + 2 >> 0] = ($165 >> 16) & 255; HEAP8[$169 + 3 >> 0] = $165 >> 24;
        $scevgep = ((($38)) + 320 | 0);
        $170 = $scevgep;
        $171 = $170;
        $172 = HEAPU8[$171 >> 0] | (HEAPU8[$171 + 1 >> 0] << 8) | (HEAPU8[$171 + 2 >> 0] << 16) | (HEAPU8[$171 + 3 >> 0] << 24);
        $173 = (($170) + 4) | 0;
        $174 = $173;
        $175 = HEAPU8[$174 >> 0] | (HEAPU8[$174 + 1 >> 0] << 8) | (HEAPU8[$174 + 2 >> 0] << 16) | (HEAPU8[$174 + 3 >> 0] << 24);
        $176 = $31;
        $177 = $176;
        HEAP8[$177 >> 0] = $172 & 255; HEAP8[$177 + 1 >> 0] = ($172 >> 8) & 255; HEAP8[$177 + 2 >> 0] = ($172 >> 16) & 255; HEAP8[$177 + 3 >> 0] = $172 >> 24;
        $178 = (($176) + 4) | 0;
        $179 = $178;
        HEAP8[$179 >> 0] = $175 & 255; HEAP8[$179 + 1 >> 0] = ($175 >> 8) & 255; HEAP8[$179 + 2 >> 0] = ($175 >> 16) & 255; HEAP8[$179 + 3 >> 0] = $175 >> 24;
        $180 = (($31) + ($12) | 0);
        $181 = ((($38)) + 328 | 0);
        $182 = $181;
        $183 = $182;
        $184 = HEAPU8[$183 >> 0] | (HEAPU8[$183 + 1 >> 0] << 8) | (HEAPU8[$183 + 2 >> 0] << 16) | (HEAPU8[$183 + 3 >> 0] << 24);
        $185 = (($182) + 4) | 0;
        $186 = $185;
        $187 = HEAPU8[$186 >> 0] | (HEAPU8[$186 + 1 >> 0] << 8) | (HEAPU8[$186 + 2 >> 0] << 16) | (HEAPU8[$186 + 3 >> 0] << 24);
        $188 = $180;
        $189 = $188;
        HEAP8[$189 >> 0] = $184 & 255; HEAP8[$189 + 1 >> 0] = ($184 >> 8) & 255; HEAP8[$189 + 2 >> 0] = ($184 >> 16) & 255; HEAP8[$189 + 3 >> 0] = $184 >> 24;
        $190 = (($188) + 4) | 0;
        $191 = $190;
        HEAP8[$191 >> 0] = $187 & 255; HEAP8[$191 + 1 >> 0] = ($187 >> 8) & 255; HEAP8[$191 + 2 >> 0] = ($187 >> 16) & 255; HEAP8[$191 + 3 >> 0] = $187 >> 24;
        $192 = (($180) + ($12) | 0);
        $193 = ((($38)) + 336 | 0);
        $194 = $193;
        $195 = $194;
        $196 = HEAPU8[$195 >> 0] | (HEAPU8[$195 + 1 >> 0] << 8) | (HEAPU8[$195 + 2 >> 0] << 16) | (HEAPU8[$195 + 3 >> 0] << 24);
        $197 = (($194) + 4) | 0;
        $198 = $197;
        $199 = HEAPU8[$198 >> 0] | (HEAPU8[$198 + 1 >> 0] << 8) | (HEAPU8[$198 + 2 >> 0] << 16) | (HEAPU8[$198 + 3 >> 0] << 24);
        $200 = $192;
        $201 = $200;
        HEAP8[$201 >> 0] = $196 & 255; HEAP8[$201 + 1 >> 0] = ($196 >> 8) & 255; HEAP8[$201 + 2 >> 0] = ($196 >> 16) & 255; HEAP8[$201 + 3 >> 0] = $196 >> 24;
        $202 = (($200) + 4) | 0;
        $203 = $202;
        HEAP8[$203 >> 0] = $199 & 255; HEAP8[$203 + 1 >> 0] = ($199 >> 8) & 255; HEAP8[$203 + 2 >> 0] = ($199 >> 16) & 255; HEAP8[$203 + 3 >> 0] = $199 >> 24;
        $204 = (($192) + ($12) | 0);
        $205 = ((($38)) + 344 | 0);
        $206 = $205;
        $207 = $206;
        $208 = HEAPU8[$207 >> 0] | (HEAPU8[$207 + 1 >> 0] << 8) | (HEAPU8[$207 + 2 >> 0] << 16) | (HEAPU8[$207 + 3 >> 0] << 24);
        $209 = (($206) + 4) | 0;
        $210 = $209;
        $211 = HEAPU8[$210 >> 0] | (HEAPU8[$210 + 1 >> 0] << 8) | (HEAPU8[$210 + 2 >> 0] << 16) | (HEAPU8[$210 + 3 >> 0] << 24);
        $212 = $204;
        $213 = $212;
        HEAP8[$213 >> 0] = $208 & 255; HEAP8[$213 + 1 >> 0] = ($208 >> 8) & 255; HEAP8[$213 + 2 >> 0] = ($208 >> 16) & 255; HEAP8[$213 + 3 >> 0] = $208 >> 24;
        $214 = (($212) + 4) | 0;
        $215 = $214;
        HEAP8[$215 >> 0] = $211 & 255; HEAP8[$215 + 1 >> 0] = ($211 >> 8) & 255; HEAP8[$215 + 2 >> 0] = ($211 >> 16) & 255; HEAP8[$215 + 3 >> 0] = $211 >> 24;
        $216 = (($204) + ($12) | 0);
        $217 = ((($38)) + 352 | 0);
        $218 = $217;
        $219 = $218;
        $220 = HEAPU8[$219 >> 0] | (HEAPU8[$219 + 1 >> 0] << 8) | (HEAPU8[$219 + 2 >> 0] << 16) | (HEAPU8[$219 + 3 >> 0] << 24);
        $221 = (($218) + 4) | 0;
        $222 = $221;
        $223 = HEAPU8[$222 >> 0] | (HEAPU8[$222 + 1 >> 0] << 8) | (HEAPU8[$222 + 2 >> 0] << 16) | (HEAPU8[$222 + 3 >> 0] << 24);
        $224 = $216;
        $225 = $224;
        HEAP8[$225 >> 0] = $220 & 255; HEAP8[$225 + 1 >> 0] = ($220 >> 8) & 255; HEAP8[$225 + 2 >> 0] = ($220 >> 16) & 255; HEAP8[$225 + 3 >> 0] = $220 >> 24;
        $226 = (($224) + 4) | 0;
        $227 = $226;
        HEAP8[$227 >> 0] = $223 & 255; HEAP8[$227 + 1 >> 0] = ($223 >> 8) & 255; HEAP8[$227 + 2 >> 0] = ($223 >> 16) & 255; HEAP8[$227 + 3 >> 0] = $223 >> 24;
        $228 = (($216) + ($12) | 0);
        $229 = ((($38)) + 360 | 0);
        $230 = $229;
        $231 = $230;
        $232 = HEAPU8[$231 >> 0] | (HEAPU8[$231 + 1 >> 0] << 8) | (HEAPU8[$231 + 2 >> 0] << 16) | (HEAPU8[$231 + 3 >> 0] << 24);
        $233 = (($230) + 4) | 0;
        $234 = $233;
        $235 = HEAPU8[$234 >> 0] | (HEAPU8[$234 + 1 >> 0] << 8) | (HEAPU8[$234 + 2 >> 0] << 16) | (HEAPU8[$234 + 3 >> 0] << 24);
        $236 = $228;
        $237 = $236;
        HEAP8[$237 >> 0] = $232 & 255; HEAP8[$237 + 1 >> 0] = ($232 >> 8) & 255; HEAP8[$237 + 2 >> 0] = ($232 >> 16) & 255; HEAP8[$237 + 3 >> 0] = $232 >> 24;
        $238 = (($236) + 4) | 0;
        $239 = $238;
        HEAP8[$239 >> 0] = $235 & 255; HEAP8[$239 + 1 >> 0] = ($235 >> 8) & 255; HEAP8[$239 + 2 >> 0] = ($235 >> 16) & 255; HEAP8[$239 + 3 >> 0] = $235 >> 24;
        $240 = (($228) + ($12) | 0);
        $241 = ((($38)) + 368 | 0);
        $242 = $241;
        $243 = $242;
        $244 = HEAPU8[$243 >> 0] | (HEAPU8[$243 + 1 >> 0] << 8) | (HEAPU8[$243 + 2 >> 0] << 16) | (HEAPU8[$243 + 3 >> 0] << 24);
        $245 = (($242) + 4) | 0;
        $246 = $245;
        $247 = HEAPU8[$246 >> 0] | (HEAPU8[$246 + 1 >> 0] << 8) | (HEAPU8[$246 + 2 >> 0] << 16) | (HEAPU8[$246 + 3 >> 0] << 24);
        $248 = $240;
        $249 = $248;
        HEAP8[$249 >> 0] = $244 & 255; HEAP8[$249 + 1 >> 0] = ($244 >> 8) & 255; HEAP8[$249 + 2 >> 0] = ($244 >> 16) & 255; HEAP8[$249 + 3 >> 0] = $244 >> 24;
        $250 = (($248) + 4) | 0;
        $251 = $250;
        HEAP8[$251 >> 0] = $247 & 255; HEAP8[$251 + 1 >> 0] = ($247 >> 8) & 255; HEAP8[$251 + 2 >> 0] = ($247 >> 16) & 255; HEAP8[$251 + 3 >> 0] = $247 >> 24;
        $252 = (($240) + ($12) | 0);
        $253 = ((($38)) + 376 | 0);
        $254 = $253;
        $255 = $254;
        $256 = HEAPU8[$255 >> 0] | (HEAPU8[$255 + 1 >> 0] << 8) | (HEAPU8[$255 + 2 >> 0] << 16) | (HEAPU8[$255 + 3 >> 0] << 24);
        $257 = (($254) + 4) | 0;
        $258 = $257;
        $259 = HEAPU8[$258 >> 0] | (HEAPU8[$258 + 1 >> 0] << 8) | (HEAPU8[$258 + 2 >> 0] << 16) | (HEAPU8[$258 + 3 >> 0] << 24);
        $260 = $252;
        $261 = $260;
        HEAP8[$261 >> 0] = $256 & 255; HEAP8[$261 + 1 >> 0] = ($256 >> 8) & 255; HEAP8[$261 + 2 >> 0] = ($256 >> 16) & 255; HEAP8[$261 + 3 >> 0] = $256 >> 24;
        $262 = (($260) + 4) | 0;
        $263 = $262;
        HEAP8[$263 >> 0] = $259 & 255; HEAP8[$263 + 1 >> 0] = ($259 >> 8) & 255; HEAP8[$263 + 2 >> 0] = ($259 >> 16) & 255; HEAP8[$263 + 3 >> 0] = $259 >> 24;
        $264 = HEAP32[$37 >> 2] | 0;
        $265 = ((($264)) + 384 | 0);
        HEAP32[$37 >> 2] = $265;
        $266 = ((($4)) + 3948 | 0);
        $267 = HEAP32[$266 >> 2] | 0;
        $268 = (($267) + ($18) | 0);
        HEAP8[$268 >> 0] = 0;
        $269 = ((($4)) + 3952 | 0);
        $270 = HEAP32[$269 >> 2] | 0;
        $271 = (((($270) + ($18 << 1) | 0)) + 1 | 0);
        HEAP8[$271 >> 0] = 0;
        $272 = HEAP32[$269 >> 2] | 0;
        $273 = (($272) + ($18 << 1) | 0);
        HEAP8[$273 >> 0] = 0;
        $274 = ((($4)) + 3964 | 0);
        $275 = HEAP32[$274 >> 2] | 0;
        $276 = (($275) + (($18 * 24) | 0) | 0);
        dest = $276; stop = dest + 24 | 0; do { HEAP8[dest >> 0] = 16 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
        $277 = (__ZN7WelsDec12InitReadBitsEPN10WelsCommon15TagBitStringAuxEi($6, 1) | 0);
        $278 = ($277 | 0) == (0);
        if ($278) {
            $279 = (__ZN7WelsDec24InitCabacDecEngineFromBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($2, $6) | 0);
            return ($279 | 0);
        } else {
            $$2 = $277;
            return ($$2 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$1 >> 2] = 0;
        $2 = ((($0)) + 512232 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = (__ZN7WelsDec20DecodeTerminateCabacEPNS_19SWelsCabacDecEngineERj($3, $1) | 0);
        return ($4 | 0);
    }
    function __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 16 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = $3 >> 3;
        $5 = ((($0)) + 24 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (0 - ($4)) | 0;
        $8 = (($6) + ($7) | 0);
        HEAP32[$5 >> 2] = $8;
        HEAP32[$2 >> 2] = 0;
        $9 = ((($1)) + 24 | 0);
        HEAP32[$9 >> 2] = 0;
        $10 = ((($0)) + 20 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        HEAP32[$1 >> 2] = $11;
        $12 = HEAP32[$5 >> 2] | 0;
        $13 = ((($1)) + 16 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = ((($1)) + 20 | 0);
        HEAP32[$14 >> 2] = 0;
        $15 = ((($1)) + 12 | 0);
        HEAP32[$15 >> 2] = 0;
        return;
    }
    function __ZN7WelsDec30ParseTransformSize8x8FlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERb($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
        var $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $3 = sp;
        $4 = ((($0)) + 512232 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 512107 | 0);
        $7 = ((($1)) + 4 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ($8 | 0) == (0);
        if ($9) {
            $35 = 0;
        } else {
            $10 = ((($0)) + 241932 | 0);
            $11 = HEAP32[$10 >> 2] | 0;
            $12 = ((($11)) + 3944 | 0);
            $13 = HEAP32[$12 >> 2] | 0;
            $14 = ((($11)) + 4040 | 0);
            $15 = HEAP32[$14 >> 2] | 0;
            $16 = (($15) + -1) | 0;
            $17 = (($13) + ($16) | 0);
            $18 = HEAP8[$17 >> 0] | 0;
            $19 = $18 & 255;
            $35 = $19;
        }
        $20 = HEAP32[$1 >> 2] | 0;
        $21 = ($20 | 0) == (0);
        if ($21) {
            $36 = 0;
        } else {
            $22 = ((($0)) + 241932 | 0);
            $23 = HEAP32[$22 >> 2] | 0;
            $24 = ((($23)) + 3944 | 0);
            $25 = HEAP32[$24 >> 2] | 0;
            $26 = ((($23)) + 4040 | 0);
            $27 = HEAP32[$26 >> 2] | 0;
            $28 = ((($23)) + 4044 | 0);
            $29 = HEAP32[$28 >> 2] | 0;
            $30 = (($27) - ($29)) | 0;
            $31 = (($25) + ($30) | 0);
            $32 = HEAP8[$31 >> 0] | 0;
            $33 = $32 & 255;
            $36 = $33;
        }
        $34 = (($36) + ($35)) | 0;
        $37 = (($6) + ($34 << 1) | 0);
        $38 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $37, $3) | 0);
        $39 = ($38 | 0) == (0);
        if (!($39)) {
            $$1 = $38;
            STACKTOP = sp; return ($$1 | 0);
        }
        $40 = HEAP32[$3 >> 2] | 0;
        $41 = ($40 | 0) != (0);
        $42 = $41 & 1;
        HEAP8[$2 >> 0] = $42;
        $$1 = 0;
        STACKTOP = sp; return ($$1 | 0);
    }
    function __ZN7WelsDec17ParseCbpInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$6 = 0, $$lobit = 0, $$lobit130 = 0, $$mask = 0, $$mask114 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
        var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
        var $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
        var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
        var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
        var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
        var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $phitmp109 = 0, $phitmp110 = 0, $phitmp111 = 0, $phitmp112 = 0, $phitmp113 = 0, $phitmp131 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $3 = sp;
        HEAP32[$2 >> 2] = 0;
        $4 = HEAP32[$1 >> 2] | 0;
        $5 = ($4 | 0) == (0);
        if ($5) {
            $17 = 0; $33 = 0;
        } else {
            $6 = ((($1)) + 20 | 0);
            $7 = HEAP32[$6 >> 2] | 0;
            $8 = ($7 | 0) == (512);
            if ($8) {
                $17 = 0; $33 = 0;
            } else {
                $9 = ((($1)) + 32 | 0);
                $10 = HEAP8[$9 >> 0] | 0;
                $11 = $10 & 8;
                $12 = ($11 << 24 >> 24) == (0);
                $13 = ($10 & 255) >>> 1;
                $14 = $13 & 2;
                $15 = $14 ^ 2;
                $phitmp131 = $15 & 255;
                $17 = $12; $33 = $phitmp131;
            }
        }
        $16 = $17 & 1;
        $18 = ((($1)) + 4 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ($19 | 0) == (0);
        if ($20) {
            $34 = 0; $62 = 0;
        } else {
            $21 = ((($1)) + 16 | 0);
            $22 = HEAP32[$21 >> 2] | 0;
            $23 = ($22 | 0) == (512);
            if ($23) {
                $34 = 0; $62 = 0;
            } else {
                $24 = ((($1)) + 33 | 0);
                $25 = HEAP8[$24 >> 0] | 0;
                $26 = ($25 & 255) >>> 1;
                $$lobit130 = $26 & 1;
                $27 = $$lobit130 ^ 1;
                $28 = $27 & 255;
                $29 = ($25 & 255) >>> 3;
                $$lobit = $29 & 1;
                $30 = $$lobit ^ 1;
                $31 = $30 & 255;
                $34 = $28; $62 = $31;
            }
        }
        $32 = $34 | $33;
        $35 = ((($0)) + 512232 | 0);
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = ((($0)) + 511455 | 0);
        $38 = (($37) + ($32 << 1) | 0);
        $39 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($36, $38, $3) | 0);
        $40 = ($39 | 0) == (0);
        if (!($40)) {
            $$6 = $39;
            STACKTOP = sp; return ($$6 | 0);
        }
        $41 = HEAP32[$3 >> 2] | 0;
        $42 = ($41 | 0) == (0);
        if (!($42)) {
            $43 = HEAP32[$2 >> 2] | 0;
            $44 = (($43) + 1) | 0;
            HEAP32[$2 >> 2] = $44;
        }
        $45 = $42 & 1;
        $46 = $16 << 1;
        $47 = $46 | $45;
        $48 = HEAP32[$35 >> 2] | 0;
        $49 = (($37) + ($47 << 1) | 0);
        $50 = ((($3)) + 4 | 0);
        $51 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($48, $49, $50) | 0);
        $52 = ($51 | 0) == (0);
        if (!($52)) {
            $$6 = $51;
            STACKTOP = sp; return ($$6 | 0);
        }
        $53 = HEAP32[$50 >> 2] | 0;
        $54 = ($53 | 0) == (0);
        if (!($54)) {
            $55 = HEAP32[$2 >> 2] | 0;
            $56 = (($55) + 2) | 0;
            HEAP32[$2 >> 2] = $56;
        }
        $57 = HEAP32[$3 >> 2] | 0;
        $58 = ($57 | 0) == (0);
        $59 = $58 & 1;
        $60 = $59 << 1;
        $61 = $60 | $62;
        $63 = HEAP32[$35 >> 2] | 0;
        $64 = (($37) + ($61 << 1) | 0);
        $65 = ((($3)) + 8 | 0);
        $66 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($63, $64, $65) | 0);
        $67 = ($66 | 0) == (0);
        if (!($67)) {
            $$6 = $66;
            STACKTOP = sp; return ($$6 | 0);
        }
        $68 = HEAP32[$65 >> 2] | 0;
        $69 = ($68 | 0) == (0);
        if (!($69)) {
            $70 = HEAP32[$2 >> 2] | 0;
            $71 = (($70) + 4) | 0;
            HEAP32[$2 >> 2] = $71;
        }
        $72 = HEAP32[$50 >> 2] | 0;
        $73 = ($72 | 0) == (0);
        $74 = $73 & 1;
        $75 = $69 & 1;
        $76 = $74 << 1;
        $77 = $76 | $75;
        $78 = HEAP32[$35 >> 2] | 0;
        $79 = (($37) + ($77 << 1) | 0);
        $80 = ((($3)) + 12 | 0);
        $81 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($78, $79, $80) | 0);
        $82 = ($81 | 0) == (0);
        if (!($82)) {
            $$6 = $81;
            STACKTOP = sp; return ($$6 | 0);
        }
        $83 = HEAP32[$80 >> 2] | 0;
        $84 = ($83 | 0) == (0);
        if (!($84)) {
            $85 = HEAP32[$2 >> 2] | 0;
            $86 = (($85) + 8) | 0;
            HEAP32[$2 >> 2] = $86;
        }
        $87 = ((($0)) + 241924 | 0);
        $88 = HEAP32[$87 >> 2] | 0;
        $89 = ((($88)) + 318 | 0);
        $90 = HEAP8[$89 >> 0] | 0;
        $91 = ($90 << 24 >> 24) == (0);
        if ($91) {
            $$6 = 0;
            STACKTOP = sp; return ($$6 | 0);
        }
        $92 = HEAP32[$1 >> 2] | 0;
        $93 = ($92 | 0) == (0);
        if ($93) {
            $109 = 0;
        } else {
            $94 = ((($1)) + 20 | 0);
            $95 = HEAP32[$94 >> 2] | 0;
            $96 = ($95 | 0) == (512);
            if ($96) {
                $109 = 2;
            } else {
                $97 = ((($1)) + 32 | 0);
                $98 = HEAP8[$97 >> 0] | 0;
                $99 = ($98 & 255) > (15);
                $phitmp = $99 & 1;
                $phitmp110 = $phitmp << 1;
                $109 = $phitmp110;
            }
        }
        $100 = HEAP32[$18 >> 2] | 0;
        $101 = ($100 | 0) == (0);
        if ($101) {
            $110 = 0;
        } else {
            $102 = ((($1)) + 16 | 0);
            $103 = HEAP32[$102 >> 2] | 0;
            $104 = ($103 | 0) == (512);
            if ($104) {
                $110 = 1;
            } else {
                $105 = ((($1)) + 33 | 0);
                $106 = HEAP8[$105 >> 0] | 0;
                $107 = ($106 & 255) > (15);
                $phitmp109 = $107 & 1;
                $110 = $phitmp109;
            }
        }
        $108 = $110 | $109;
        $111 = HEAP32[$35 >> 2] | 0;
        $112 = ((($0)) + 511463 | 0);
        $113 = (($112) + ($108 << 1) | 0);
        $114 = ((($3)) + 16 | 0);
        $115 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($111, $113, $114) | 0);
        $116 = ($115 | 0) == (0);
        if (!($116)) {
            $$6 = $115;
            STACKTOP = sp; return ($$6 | 0);
        }
        $117 = HEAP32[$114 >> 2] | 0;
        $118 = ($117 | 0) == (0);
        if ($118) {
            $$6 = 0;
            STACKTOP = sp; return ($$6 | 0);
        }
        $119 = HEAP32[$1 >> 2] | 0;
        $120 = ($119 | 0) == (0);
        if ($120) {
            $138 = 0;
        } else {
            $121 = ((($1)) + 20 | 0);
            $122 = HEAP32[$121 >> 2] | 0;
            $123 = ($122 | 0) == (512);
            if ($123) {
                $138 = 2;
            } else {
                $124 = ((($1)) + 32 | 0);
                $125 = HEAP8[$124 >> 0] | 0;
                $126 = $125 << 24 >> 24;
                $$mask114 = $126 & -16;
                $127 = ($$mask114 | 0) == (32);
                $phitmp111 = $127 & 1;
                $phitmp113 = $phitmp111 << 1;
                $138 = $phitmp113;
            }
        }
        $128 = HEAP32[$18 >> 2] | 0;
        $129 = ($128 | 0) == (0);
        if ($129) {
            $139 = 0;
        } else {
            $130 = ((($1)) + 16 | 0);
            $131 = HEAP32[$130 >> 2] | 0;
            $132 = ($131 | 0) == (512);
            if ($132) {
                $139 = 1;
            } else {
                $133 = ((($1)) + 33 | 0);
                $134 = HEAP8[$133 >> 0] | 0;
                $135 = $134 << 24 >> 24;
                $$mask = $135 & -16;
                $136 = ($$mask | 0) == (32);
                $phitmp112 = $136 & 1;
                $139 = $phitmp112;
            }
        }
        $137 = $139 | $138;
        $140 = HEAP32[$35 >> 2] | 0;
        $141 = ((($0)) + 511471 | 0);
        $142 = (($141) + ($137 << 1) | 0);
        $143 = ((($3)) + 20 | 0);
        $144 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($140, $142, $143) | 0);
        $145 = ($144 | 0) == (0);
        if (!($145)) {
            $$6 = $144;
            STACKTOP = sp; return ($$6 | 0);
        }
        $146 = HEAP32[$143 >> 2] | 0;
        $147 = (($146) + 4) | 0;
        $148 = 1 << $147;
        $149 = HEAP32[$2 >> 2] | 0;
        $150 = (($148) + ($149)) | 0;
        HEAP32[$2 >> 2] = $150;
        $$6 = 0;
        STACKTOP = sp; return ($$6 | 0);
    }
    function __ZN7WelsDec17ParseDeltaQpCabacEPNS_21TagWelsDecoderContextERi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$2 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $2 = sp;
        $3 = ((($0)) + 241932 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        HEAP32[$1 >> 2] = 0;
        $5 = ((($0)) + 511429 | 0);
        $6 = ((($4)) + 3884 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ($7 | 0) != (0);
        $9 = $8 & 1;
        $10 = ((($0)) + 512232 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = (($5) + ($9 << 1) | 0);
        $13 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($11, $12, $2) | 0);
        $14 = ($13 | 0) == (0);
        if (!($14)) {
            $$2 = $13;
            STACKTOP = sp; return ($$2 | 0);
        }
        $15 = HEAP32[$2 >> 2] | 0;
        $16 = ($15 | 0) == (0);
        if ($16) {
            $$pre = HEAP32[$1 >> 2] | 0;
            $28 = $$pre;
        } else {
            $17 = HEAP32[$10 >> 2] | 0;
            $18 = ((($0)) + 511433 | 0);
            $19 = (__ZN7WelsDec19DecodeUnaryBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEiRj($17, $18, 1, $2) | 0);
            $20 = ($19 | 0) == (0);
            if (!($20)) {
                $$2 = $19;
                STACKTOP = sp; return ($$2 | 0);
            }
            $21 = HEAP32[$2 >> 2] | 0;
            $22 = (($21) + 1) | 0;
            HEAP32[$2 >> 2] = $22;
            $23 = (($21) + 2) | 0;
            $24 = $23 >>> 1;
            HEAP32[$1 >> 2] = $24;
            $25 = $22 & 1;
            $26 = ($25 | 0) == (0);
            if ($26) {
                $27 = (0 - ($24)) | 0;
                HEAP32[$1 >> 2] = $27;
                $28 = $27;
            } else {
                $28 = $24;
            }
        }
        HEAP32[$6 >> 2] = $28;
        $$2 = 0;
        STACKTOP = sp; return ($$2 | 0);
    }
    function __ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        $8 = $8 | 0;
        $9 = $9 | 0;
        var $$078 = 0, $$079 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
        var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
        var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
        var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
        var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
        var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
        var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
        var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
        var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
        var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
        var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
        var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
        var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
        var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
        var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
        var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
        var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
        var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
        var $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
        var $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $98 = 0, $99 = 0, $exitcond = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 80 | 0;
        $10 = sp + 68 | 0;
        $11 = sp + 64 | 0;
        $12 = sp;
        HEAP32[$10 >> 2] = 0;
        dest = $12; stop = dest + 64 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        do {
            switch ($6 | 0) {
                case 9: {
                    $$078 = 1; $$079 = $6;
                    break;
                }
                case 10: {
                    $$078 = 2; $$079 = $6;
                    break;
                }
                case 11: {
                    $$078 = 0; $$079 = 3;
                    break;
                }
                case 7: {
                    $$078 = 1; $$079 = $6;
                    break;
                }
                case 8: {
                    $$078 = 2; $$079 = $6;
                    break;
                }
                case 18: {
                    $$078 = 7; $$079 = 6;
                    break;
                }
                case 17: {
                    $$078 = 6; $$079 = 6;
                    break;
                }
                case 12: {
                    $$078 = 3; $$079 = 3;
                    break;
                }
                case 13: {
                    $$078 = 4; $$079 = 7;
                    break;
                }
                case 14: {
                    $$078 = 5; $$079 = 8;
                    break;
                }
                case 15: {
                    $$078 = 4; $$079 = 9;
                    break;
                }
                case 16: {
                    $$078 = 5; $$079 = 10;
                    break;
                }
                default: {
                    $$078 = 0; $$079 = $6;
                }
            }
        } while (0);
        $13 = ((($9)) + 562526 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = ($14 << 24 >> 24) == (0);
        if ($15) {
            $20 = $8 & 255;
            $21 = (16 + ($20 << 4) | 0);
            $54 = $21;
        } else {
            $16 = (((($9)) + 562472 | 0) + ($$078 << 2) | 0);
            $17 = HEAP32[$16 >> 2] | 0;
            $18 = $8 & 255;
            $19 = (($17) + ($18 << 5) | 0);
            $54 = $19;
        }
        $22 = (__ZN7WelsDec17ParseCbfInfoCabacEPNS_16TagNeighborAvailEPhiiPNS_21TagWelsDecoderContextERj($0, $1, $3, $$079, $9, $11) | 0);
        $23 = ($22 | 0) == (0);
        if (!($23)) {
            $$3 = $22;
            STACKTOP = sp; return ($$3 | 0);
        }
        $24 = HEAP32[$11 >> 2] | 0;
        $25 = ($24 | 0) == (0);
        do {
            if ($25) {
                $34 = 0;
            } else {
                $26 = (__ZN7WelsDec24ParseSignificantMapCabacEPiiPNS_21TagWelsDecoderContextERj($12, $$079, $9, $10) | 0);
                $27 = ($26 | 0) == (0);
                if (!($27)) {
                    $$3 = $26;
                    STACKTOP = sp; return ($$3 | 0);
                }
                $28 = (__ZN7WelsDec26ParseSignificantCoeffCabacEPiiPNS_21TagWelsDecoderContextE($12, $$079, $9) | 0);
                $29 = ($28 | 0) == (0);
                if ($29) {
                    $$pre = HEAP32[$10 >> 2] | 0;
                    $34 = $$pre;
                    break;
                } else {
                    $$3 = $28;
                    STACKTOP = sp; return ($$3 | 0);
                }
            }
        } while (0);
        $30 = (15431 + ($3) | 0);
        $31 = HEAP8[$30 >> 0] | 0;
        $32 = $31 & 255;
        $33 = $34 & 255;
        $35 = (($1) + ($32) | 0);
        HEAP8[$35 >> 0] = $33;
        $36 = ($34 | 0) == (0);
        if ($36) {
            $$3 = 0;
            STACKTOP = sp; return ($$3 | 0);
        }
        $37 = ($$079 | 0) == (1);
        if ($37) {
            $38 = HEAP32[$12 >> 2] | 0;
            $39 = ($38 | 0) == (0);
            if (!($39)) {
                $40 = $38 & 65535;
                $41 = HEAP8[$5 >> 0] | 0;
                $42 = $41 & 255;
                $43 = (($7) + ($42 << 1) | 0);
                HEAP16[$43 >> 1] = $40;
            }
            $44 = ((($12)) + 4 | 0);
            $45 = HEAP32[$44 >> 2] | 0;
            $46 = ($45 | 0) == (0);
            if (!($46)) {
                $88 = $45 & 65535;
                $89 = ((($5)) + 1 | 0);
                $90 = HEAP8[$89 >> 0] | 0;
                $91 = $90 & 255;
                $92 = (($7) + ($91 << 1) | 0);
                HEAP16[$92 >> 1] = $88;
            }
            $93 = ((($12)) + 8 | 0);
            $94 = HEAP32[$93 >> 2] | 0;
            $95 = ($94 | 0) == (0);
            if (!($95)) {
                $96 = $94 & 65535;
                $97 = ((($5)) + 2 | 0);
                $98 = HEAP8[$97 >> 0] | 0;
                $99 = $98 & 255;
                $100 = (($7) + ($99 << 1) | 0);
                HEAP16[$100 >> 1] = $96;
            }
            $101 = ((($12)) + 12 | 0);
            $102 = HEAP32[$101 >> 2] | 0;
            $103 = ($102 | 0) == (0);
            if (!($103)) {
                $104 = $102 & 65535;
                $105 = ((($5)) + 3 | 0);
                $106 = HEAP8[$105 >> 0] | 0;
                $107 = $106 & 255;
                $108 = (($7) + ($107 << 1) | 0);
                HEAP16[$108 >> 1] = $104;
            }
            $109 = ((($12)) + 16 | 0);
            $110 = HEAP32[$109 >> 2] | 0;
            $111 = ($110 | 0) == (0);
            if (!($111)) {
                $112 = $110 & 65535;
                $113 = ((($5)) + 4 | 0);
                $114 = HEAP8[$113 >> 0] | 0;
                $115 = $114 & 255;
                $116 = (($7) + ($115 << 1) | 0);
                HEAP16[$116 >> 1] = $112;
            }
            $117 = ((($12)) + 20 | 0);
            $118 = HEAP32[$117 >> 2] | 0;
            $119 = ($118 | 0) == (0);
            if (!($119)) {
                $120 = $118 & 65535;
                $121 = ((($5)) + 5 | 0);
                $122 = HEAP8[$121 >> 0] | 0;
                $123 = $122 & 255;
                $124 = (($7) + ($123 << 1) | 0);
                HEAP16[$124 >> 1] = $120;
            }
            $125 = ((($12)) + 24 | 0);
            $126 = HEAP32[$125 >> 2] | 0;
            $127 = ($126 | 0) == (0);
            if (!($127)) {
                $128 = $126 & 65535;
                $129 = ((($5)) + 6 | 0);
                $130 = HEAP8[$129 >> 0] | 0;
                $131 = $130 & 255;
                $132 = (($7) + ($131 << 1) | 0);
                HEAP16[$132 >> 1] = $128;
            }
            $133 = ((($12)) + 28 | 0);
            $134 = HEAP32[$133 >> 2] | 0;
            $135 = ($134 | 0) == (0);
            if (!($135)) {
                $136 = $134 & 65535;
                $137 = ((($5)) + 7 | 0);
                $138 = HEAP8[$137 >> 0] | 0;
                $139 = $138 & 255;
                $140 = (($7) + ($139 << 1) | 0);
                HEAP16[$140 >> 1] = $136;
            }
            $141 = ((($12)) + 32 | 0);
            $142 = HEAP32[$141 >> 2] | 0;
            $143 = ($142 | 0) == (0);
            if (!($143)) {
                $144 = $142 & 65535;
                $145 = ((($5)) + 8 | 0);
                $146 = HEAP8[$145 >> 0] | 0;
                $147 = $146 & 255;
                $148 = (($7) + ($147 << 1) | 0);
                HEAP16[$148 >> 1] = $144;
            }
            $149 = ((($12)) + 36 | 0);
            $150 = HEAP32[$149 >> 2] | 0;
            $151 = ($150 | 0) == (0);
            if (!($151)) {
                $152 = $150 & 65535;
                $153 = ((($5)) + 9 | 0);
                $154 = HEAP8[$153 >> 0] | 0;
                $155 = $154 & 255;
                $156 = (($7) + ($155 << 1) | 0);
                HEAP16[$156 >> 1] = $152;
            }
            $157 = ((($12)) + 40 | 0);
            $158 = HEAP32[$157 >> 2] | 0;
            $159 = ($158 | 0) == (0);
            if (!($159)) {
                $160 = $158 & 65535;
                $161 = ((($5)) + 10 | 0);
                $162 = HEAP8[$161 >> 0] | 0;
                $163 = $162 & 255;
                $164 = (($7) + ($163 << 1) | 0);
                HEAP16[$164 >> 1] = $160;
            }
            $165 = ((($12)) + 44 | 0);
            $166 = HEAP32[$165 >> 2] | 0;
            $167 = ($166 | 0) == (0);
            if (!($167)) {
                $168 = $166 & 65535;
                $169 = ((($5)) + 11 | 0);
                $170 = HEAP8[$169 >> 0] | 0;
                $171 = $170 & 255;
                $172 = (($7) + ($171 << 1) | 0);
                HEAP16[$172 >> 1] = $168;
            }
            $173 = ((($12)) + 48 | 0);
            $174 = HEAP32[$173 >> 2] | 0;
            $175 = ($174 | 0) == (0);
            if (!($175)) {
                $176 = $174 & 65535;
                $177 = ((($5)) + 12 | 0);
                $178 = HEAP8[$177 >> 0] | 0;
                $179 = $178 & 255;
                $180 = (($7) + ($179 << 1) | 0);
                HEAP16[$180 >> 1] = $176;
            }
            $181 = ((($12)) + 52 | 0);
            $182 = HEAP32[$181 >> 2] | 0;
            $183 = ($182 | 0) == (0);
            if (!($183)) {
                $184 = $182 & 65535;
                $185 = ((($5)) + 13 | 0);
                $186 = HEAP8[$185 >> 0] | 0;
                $187 = $186 & 255;
                $188 = (($7) + ($187 << 1) | 0);
                HEAP16[$188 >> 1] = $184;
            }
            $189 = ((($12)) + 56 | 0);
            $190 = HEAP32[$189 >> 2] | 0;
            $191 = ($190 | 0) == (0);
            if (!($191)) {
                $192 = $190 & 65535;
                $193 = ((($5)) + 14 | 0);
                $194 = HEAP8[$193 >> 0] | 0;
                $195 = $194 & 255;
                $196 = (($7) + ($195 << 1) | 0);
                HEAP16[$196 >> 1] = $192;
            }
            $197 = ((($12)) + 60 | 0);
            $198 = HEAP32[$197 >> 2] | 0;
            $199 = ($198 | 0) == (0);
            if ($199) {
                $$3 = 0;
                STACKTOP = sp; return ($$3 | 0);
            }
            $200 = $198 & 65535;
            $201 = ((($5)) + 15 | 0);
            $202 = HEAP8[$201 >> 0] | 0;
            $203 = $202 & 255;
            $204 = (($7) + ($203 << 1) | 0);
            HEAP16[$204 >> 1] = $200;
            $$3 = 0;
            STACKTOP = sp; return ($$3 | 0);
        }
        $47 = (($$079) + -7) | 0;
        $48 = ($47 >>> 0) < (2);
        if (!($48)) {
            $$2 = 0;
            while (1) {
                $66 = (($12) + ($$2 << 2) | 0);
                $67 = HEAP32[$66 >> 2] | 0;
                $68 = ($67 | 0) == (0);
                if (!($68)) {
                    $69 = HEAP8[$13 >> 0] | 0;
                    $70 = ($69 << 24 >> 24) == (0);
                    $71 = (($5) + ($$2) | 0);
                    $72 = HEAP8[$71 >> 0] | 0;
                    $73 = $72 & 255;
                    if ($70) {
                        $79 = $73 & 7;
                        $80 = (($54) + ($79 << 1) | 0);
                        $81 = HEAP16[$80 >> 1] | 0;
                        $82 = $81 & 65535;
                        $83 = Math_imul($67, $82) | 0;
                        $85 = $83;
                    } else {
                        $74 = (($54) + ($73 << 1) | 0);
                        $75 = HEAP16[$74 >> 1] | 0;
                        $76 = $75 & 65535;
                        $77 = Math_imul($67, $76) | 0;
                        $78 = $77 >> 4;
                        $85 = $78;
                    }
                    $84 = $85 & 65535;
                    $86 = (($7) + ($73 << 1) | 0);
                    HEAP16[$86 >> 1] = $84;
                }
                $87 = (($$2) + 1) | 0;
                $exitcond = ($87 | 0) == (16);
                if ($exitcond) {
                    $$3 = 0;
                    break;
                } else {
                    $$2 = $87;
                }
            }
            STACKTOP = sp; return ($$3 | 0);
        }
        $49 = HEAP32[$12 >> 2] | 0;
        $50 = ($49 | 0) == (0);
        if (!($50)) {
            $51 = HEAP8[$13 >> 0] | 0;
            $52 = ($51 << 24 >> 24) != (0);
            $53 = HEAP16[$54 >> 1] | 0;
            $55 = $53 & 65535;
            $56 = Math_imul($49, $55) | 0;
            $57 = $56 >>> 4;
            $58 = $52 ? $57 : $56;
            $59 = $58 & 65535;
            $60 = HEAP8[$5 >> 0] | 0;
            $61 = $60 & 255;
            $62 = (($7) + ($61 << 1) | 0);
            HEAP16[$62 >> 1] = $59;
        }
        $63 = ((($12)) + 4 | 0);
        $64 = HEAP32[$63 >> 2] | 0;
        $65 = ($64 | 0) == (0);
        if (!($65)) {
            $205 = HEAP8[$13 >> 0] | 0;
            $206 = ($205 << 24 >> 24) != (0);
            $207 = HEAP16[$54 >> 1] | 0;
            $208 = $207 & 65535;
            $209 = Math_imul($64, $208) | 0;
            $210 = $209 >>> 4;
            $211 = $206 ? $210 : $209;
            $212 = $211 & 65535;
            $213 = ((($5)) + 1 | 0);
            $214 = HEAP8[$213 >> 0] | 0;
            $215 = $214 & 255;
            $216 = (($7) + ($215 << 1) | 0);
            HEAP16[$216 >> 1] = $212;
        }
        $217 = ((($12)) + 8 | 0);
        $218 = HEAP32[$217 >> 2] | 0;
        $219 = ($218 | 0) == (0);
        if (!($219)) {
            $220 = HEAP8[$13 >> 0] | 0;
            $221 = ($220 << 24 >> 24) != (0);
            $222 = HEAP16[$54 >> 1] | 0;
            $223 = $222 & 65535;
            $224 = Math_imul($218, $223) | 0;
            $225 = $224 >>> 4;
            $226 = $221 ? $225 : $224;
            $227 = $226 & 65535;
            $228 = ((($5)) + 2 | 0);
            $229 = HEAP8[$228 >> 0] | 0;
            $230 = $229 & 255;
            $231 = (($7) + ($230 << 1) | 0);
            HEAP16[$231 >> 1] = $227;
        }
        $232 = ((($12)) + 12 | 0);
        $233 = HEAP32[$232 >> 2] | 0;
        $234 = ($233 | 0) == (0);
        if (!($234)) {
            $235 = HEAP8[$13 >> 0] | 0;
            $236 = ($235 << 24 >> 24) != (0);
            $237 = HEAP16[$54 >> 1] | 0;
            $238 = $237 & 65535;
            $239 = Math_imul($233, $238) | 0;
            $240 = $239 >>> 4;
            $241 = $236 ? $240 : $239;
            $242 = $241 & 65535;
            $243 = ((($5)) + 3 | 0);
            $244 = HEAP8[$243 >> 0] | 0;
            $245 = $244 & 255;
            $246 = (($7) + ($245 << 1) | 0);
            HEAP16[$246 >> 1] = $242;
        }
        $247 = ((($12)) + 16 | 0);
        $248 = HEAP32[$247 >> 2] | 0;
        $249 = ($248 | 0) == (0);
        if (!($249)) {
            $250 = HEAP8[$13 >> 0] | 0;
            $251 = ($250 << 24 >> 24) != (0);
            $252 = HEAP16[$54 >> 1] | 0;
            $253 = $252 & 65535;
            $254 = Math_imul($248, $253) | 0;
            $255 = $254 >>> 4;
            $256 = $251 ? $255 : $254;
            $257 = $256 & 65535;
            $258 = ((($5)) + 4 | 0);
            $259 = HEAP8[$258 >> 0] | 0;
            $260 = $259 & 255;
            $261 = (($7) + ($260 << 1) | 0);
            HEAP16[$261 >> 1] = $257;
        }
        $262 = ((($12)) + 20 | 0);
        $263 = HEAP32[$262 >> 2] | 0;
        $264 = ($263 | 0) == (0);
        if (!($264)) {
            $265 = HEAP8[$13 >> 0] | 0;
            $266 = ($265 << 24 >> 24) != (0);
            $267 = HEAP16[$54 >> 1] | 0;
            $268 = $267 & 65535;
            $269 = Math_imul($263, $268) | 0;
            $270 = $269 >>> 4;
            $271 = $266 ? $270 : $269;
            $272 = $271 & 65535;
            $273 = ((($5)) + 5 | 0);
            $274 = HEAP8[$273 >> 0] | 0;
            $275 = $274 & 255;
            $276 = (($7) + ($275 << 1) | 0);
            HEAP16[$276 >> 1] = $272;
        }
        $277 = ((($12)) + 24 | 0);
        $278 = HEAP32[$277 >> 2] | 0;
        $279 = ($278 | 0) == (0);
        if (!($279)) {
            $280 = HEAP8[$13 >> 0] | 0;
            $281 = ($280 << 24 >> 24) != (0);
            $282 = HEAP16[$54 >> 1] | 0;
            $283 = $282 & 65535;
            $284 = Math_imul($278, $283) | 0;
            $285 = $284 >>> 4;
            $286 = $281 ? $285 : $284;
            $287 = $286 & 65535;
            $288 = ((($5)) + 6 | 0);
            $289 = HEAP8[$288 >> 0] | 0;
            $290 = $289 & 255;
            $291 = (($7) + ($290 << 1) | 0);
            HEAP16[$291 >> 1] = $287;
        }
        $292 = ((($12)) + 28 | 0);
        $293 = HEAP32[$292 >> 2] | 0;
        $294 = ($293 | 0) == (0);
        if (!($294)) {
            $295 = HEAP8[$13 >> 0] | 0;
            $296 = ($295 << 24 >> 24) != (0);
            $297 = HEAP16[$54 >> 1] | 0;
            $298 = $297 & 65535;
            $299 = Math_imul($293, $298) | 0;
            $300 = $299 >>> 4;
            $301 = $296 ? $300 : $299;
            $302 = $301 & 65535;
            $303 = ((($5)) + 7 | 0);
            $304 = HEAP8[$303 >> 0] | 0;
            $305 = $304 & 255;
            $306 = (($7) + ($305 << 1) | 0);
            HEAP16[$306 >> 1] = $302;
        }
        $307 = ((($12)) + 32 | 0);
        $308 = HEAP32[$307 >> 2] | 0;
        $309 = ($308 | 0) == (0);
        if (!($309)) {
            $310 = HEAP8[$13 >> 0] | 0;
            $311 = ($310 << 24 >> 24) != (0);
            $312 = HEAP16[$54 >> 1] | 0;
            $313 = $312 & 65535;
            $314 = Math_imul($308, $313) | 0;
            $315 = $314 >>> 4;
            $316 = $311 ? $315 : $314;
            $317 = $316 & 65535;
            $318 = ((($5)) + 8 | 0);
            $319 = HEAP8[$318 >> 0] | 0;
            $320 = $319 & 255;
            $321 = (($7) + ($320 << 1) | 0);
            HEAP16[$321 >> 1] = $317;
        }
        $322 = ((($12)) + 36 | 0);
        $323 = HEAP32[$322 >> 2] | 0;
        $324 = ($323 | 0) == (0);
        if (!($324)) {
            $325 = HEAP8[$13 >> 0] | 0;
            $326 = ($325 << 24 >> 24) != (0);
            $327 = HEAP16[$54 >> 1] | 0;
            $328 = $327 & 65535;
            $329 = Math_imul($323, $328) | 0;
            $330 = $329 >>> 4;
            $331 = $326 ? $330 : $329;
            $332 = $331 & 65535;
            $333 = ((($5)) + 9 | 0);
            $334 = HEAP8[$333 >> 0] | 0;
            $335 = $334 & 255;
            $336 = (($7) + ($335 << 1) | 0);
            HEAP16[$336 >> 1] = $332;
        }
        $337 = ((($12)) + 40 | 0);
        $338 = HEAP32[$337 >> 2] | 0;
        $339 = ($338 | 0) == (0);
        if (!($339)) {
            $340 = HEAP8[$13 >> 0] | 0;
            $341 = ($340 << 24 >> 24) != (0);
            $342 = HEAP16[$54 >> 1] | 0;
            $343 = $342 & 65535;
            $344 = Math_imul($338, $343) | 0;
            $345 = $344 >>> 4;
            $346 = $341 ? $345 : $344;
            $347 = $346 & 65535;
            $348 = ((($5)) + 10 | 0);
            $349 = HEAP8[$348 >> 0] | 0;
            $350 = $349 & 255;
            $351 = (($7) + ($350 << 1) | 0);
            HEAP16[$351 >> 1] = $347;
        }
        $352 = ((($12)) + 44 | 0);
        $353 = HEAP32[$352 >> 2] | 0;
        $354 = ($353 | 0) == (0);
        if (!($354)) {
            $355 = HEAP8[$13 >> 0] | 0;
            $356 = ($355 << 24 >> 24) != (0);
            $357 = HEAP16[$54 >> 1] | 0;
            $358 = $357 & 65535;
            $359 = Math_imul($353, $358) | 0;
            $360 = $359 >>> 4;
            $361 = $356 ? $360 : $359;
            $362 = $361 & 65535;
            $363 = ((($5)) + 11 | 0);
            $364 = HEAP8[$363 >> 0] | 0;
            $365 = $364 & 255;
            $366 = (($7) + ($365 << 1) | 0);
            HEAP16[$366 >> 1] = $362;
        }
        $367 = ((($12)) + 48 | 0);
        $368 = HEAP32[$367 >> 2] | 0;
        $369 = ($368 | 0) == (0);
        if (!($369)) {
            $370 = HEAP8[$13 >> 0] | 0;
            $371 = ($370 << 24 >> 24) != (0);
            $372 = HEAP16[$54 >> 1] | 0;
            $373 = $372 & 65535;
            $374 = Math_imul($368, $373) | 0;
            $375 = $374 >>> 4;
            $376 = $371 ? $375 : $374;
            $377 = $376 & 65535;
            $378 = ((($5)) + 12 | 0);
            $379 = HEAP8[$378 >> 0] | 0;
            $380 = $379 & 255;
            $381 = (($7) + ($380 << 1) | 0);
            HEAP16[$381 >> 1] = $377;
        }
        $382 = ((($12)) + 52 | 0);
        $383 = HEAP32[$382 >> 2] | 0;
        $384 = ($383 | 0) == (0);
        if (!($384)) {
            $385 = HEAP8[$13 >> 0] | 0;
            $386 = ($385 << 24 >> 24) != (0);
            $387 = HEAP16[$54 >> 1] | 0;
            $388 = $387 & 65535;
            $389 = Math_imul($383, $388) | 0;
            $390 = $389 >>> 4;
            $391 = $386 ? $390 : $389;
            $392 = $391 & 65535;
            $393 = ((($5)) + 13 | 0);
            $394 = HEAP8[$393 >> 0] | 0;
            $395 = $394 & 255;
            $396 = (($7) + ($395 << 1) | 0);
            HEAP16[$396 >> 1] = $392;
        }
        $397 = ((($12)) + 56 | 0);
        $398 = HEAP32[$397 >> 2] | 0;
        $399 = ($398 | 0) == (0);
        if (!($399)) {
            $400 = HEAP8[$13 >> 0] | 0;
            $401 = ($400 << 24 >> 24) != (0);
            $402 = HEAP16[$54 >> 1] | 0;
            $403 = $402 & 65535;
            $404 = Math_imul($398, $403) | 0;
            $405 = $404 >>> 4;
            $406 = $401 ? $405 : $404;
            $407 = $406 & 65535;
            $408 = ((($5)) + 14 | 0);
            $409 = HEAP8[$408 >> 0] | 0;
            $410 = $409 & 255;
            $411 = (($7) + ($410 << 1) | 0);
            HEAP16[$411 >> 1] = $407;
        }
        $412 = ((($12)) + 60 | 0);
        $413 = HEAP32[$412 >> 2] | 0;
        $414 = ($413 | 0) == (0);
        if ($414) {
            $$3 = 0;
            STACKTOP = sp; return ($$3 | 0);
        }
        $415 = HEAP8[$13 >> 0] | 0;
        $416 = ($415 << 24 >> 24) != (0);
        $417 = HEAP16[$54 >> 1] | 0;
        $418 = $417 & 65535;
        $419 = Math_imul($413, $418) | 0;
        $420 = $419 >>> 4;
        $421 = $416 ? $420 : $419;
        $422 = $421 & 65535;
        $423 = ((($5)) + 15 | 0);
        $424 = HEAP8[$423 >> 0] | 0;
        $425 = $424 & 255;
        $426 = (($7) + ($425 << 1) | 0);
        HEAP16[$426 >> 1] = $422;
        $$3 = 0;
        STACKTOP = sp; return ($$3 | 0);
    }
    function __ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        $8 = $8 | 0;
        $9 = $9 | 0;
        var $$0 = 0, $$046 = 0, $$046$us = 0, $$057 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
        var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $div = 0;
        var $exitcond = 0, $exitcond59 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 272 | 0;
        $10 = sp + 256 | 0;
        $11 = sp;
        HEAP32[$10 >> 2] = 0;
        _memset(($11 | 0), 0, 256) | 0;
        do {
            switch ($6 | 0) {
                case 9: {
                    $$0 = -5; $$057 = $6;
                    break;
                }
                case 10: {
                    $$0 = -4; $$057 = $6;
                    break;
                }
                case 11: {
                    $$0 = -6; $$057 = 3;
                    break;
                }
                case 7: {
                    $$0 = -5; $$057 = $6;
                    break;
                }
                case 8: {
                    $$0 = -4; $$057 = $6;
                    break;
                }
                case 18: {
                    $$0 = 1; $$057 = 6;
                    break;
                }
                case 17: {
                    $$0 = 0; $$057 = 6;
                    break;
                }
                case 12: {
                    $$0 = -3; $$057 = 3;
                    break;
                }
                case 13: {
                    $$0 = -2; $$057 = 7;
                    break;
                }
                case 14: {
                    $$0 = -1; $$057 = 8;
                    break;
                }
                case 15: {
                    $$0 = -2; $$057 = 9;
                    break;
                }
                case 16: {
                    $$0 = -1; $$057 = 10;
                    break;
                }
                default: {
                    $$0 = -6; $$057 = $6;
                }
            }
        } while (0);
        $12 = ((($9)) + 562526 | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = ($13 << 24 >> 24) == (0);
        if ($14) {
            $19 = $8 & 255;
            $20 = (848 + ($19 << 7) | 0);
            $61 = $20;
        } else {
            $15 = (((($9)) + 562496 | 0) + ($$0 << 2) | 0);
            $16 = HEAP32[$15 >> 2] | 0;
            $17 = $8 & 255;
            $18 = (($16) + ($17 << 7) | 0);
            $61 = $18;
        }
        $21 = (__ZN7WelsDec24ParseSignificantMapCabacEPiiPNS_21TagWelsDecoderContextERj($11, $$057, $9, $10) | 0);
        $22 = ($21 | 0) == (0);
        if (!($22)) {
            $$2 = $21;
            STACKTOP = sp; return ($$2 | 0);
        }
        $23 = (__ZN7WelsDec26ParseSignificantCoeffCabacEPiiPNS_21TagWelsDecoderContextE($11, $$057, $9) | 0);
        $24 = ($23 | 0) == (0);
        if (!($24)) {
            $$2 = $23;
            STACKTOP = sp; return ($$2 | 0);
        }
        $25 = HEAP32[$10 >> 2] | 0;
        $26 = $25 & 255;
        $27 = (($3) + 3) | 0;
        $28 = (15431 + ($27) | 0);
        $29 = HEAP8[$28 >> 0] | 0;
        $30 = $29 & 255;
        $31 = (($1) + ($30) | 0);
        HEAP8[$31 >> 0] = $26;
        $32 = (($3) + 2) | 0;
        $33 = (15431 + ($32) | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = $34 & 255;
        $36 = (($1) + ($35) | 0);
        HEAP8[$36 >> 0] = $26;
        $37 = (($3) + 1) | 0;
        $38 = (15431 + ($37) | 0);
        $39 = HEAP8[$38 >> 0] | 0;
        $40 = $39 & 255;
        $41 = (($1) + ($40) | 0);
        HEAP8[$41 >> 0] = $26;
        $42 = (15431 + ($3) | 0);
        $43 = HEAP8[$42 >> 0] | 0;
        $44 = $43 & 255;
        $45 = (($1) + ($44) | 0);
        HEAP8[$45 >> 0] = $26;
        $46 = ($25 | 0) != (0);
        $47 = ($$057 | 0) == (6);
        $or$cond = $47 & $46;
        if (!($or$cond)) {
            $$2 = 0;
            STACKTOP = sp; return ($$2 | 0);
        }
        $48 = ($8 & 255) > (35);
        $div = (($8 & 255) / 6) & -1;
        $49 = $div & 255;
        $50 = (($49) + -6) | 0;
        $51 = (5 - ($49)) | 0;
        $52 = 1 << $51;
        $53 = (6 - ($49)) | 0;
        if ($48) {
            $$046$us = 0;
            while (1) {
                $54 = (($11) + ($$046$us << 2) | 0);
                $55 = HEAP32[$54 >> 2] | 0;
                $56 = ($55 | 0) == (0);
                if (!($56)) {
                    $57 = (($5) + ($$046$us) | 0);
                    $58 = HEAP8[$57 >> 0] | 0;
                    $59 = $58 & 255;
                    $60 = (($61) + ($59 << 1) | 0);
                    $62 = HEAP16[$60 >> 1] | 0;
                    $63 = $62 & 65535;
                    $64 = Math_imul($55, $63) | 0;
                    $65 = $64 << $50;
                    $66 = $65 & 65535;
                    $67 = (($7) + ($59 << 1) | 0);
                    HEAP16[$67 >> 1] = $66;
                }
                $68 = (($$046$us) + 1) | 0;
                $exitcond = ($68 | 0) == (64);
                if ($exitcond) {
                    $$2 = 0;
                    break;
                } else {
                    $$046$us = $68;
                }
            }
            STACKTOP = sp; return ($$2 | 0);
        } else {
            $$046 = 0;
            while (1) {
                $69 = (($11) + ($$046 << 2) | 0);
                $70 = HEAP32[$69 >> 2] | 0;
                $71 = ($70 | 0) == (0);
                if (!($71)) {
                    $72 = (($5) + ($$046) | 0);
                    $73 = HEAP8[$72 >> 0] | 0;
                    $74 = $73 & 255;
                    $75 = (($61) + ($74 << 1) | 0);
                    $76 = HEAP16[$75 >> 1] | 0;
                    $77 = $76 & 65535;
                    $78 = Math_imul($70, $77) | 0;
                    $79 = (($78) + ($52)) | 0;
                    $80 = $79 >> $53;
                    $81 = $80 & 65535;
                    $82 = (($7) + ($74 << 1) | 0);
                    HEAP16[$82 >> 1] = $81;
                }
                $83 = (($$046) + 1) | 0;
                $exitcond59 = ($83 | 0) == (64);
                if ($exitcond59) {
                    $$2 = 0;
                    break;
                } else {
                    $$046 = $83;
                }
            }
            STACKTOP = sp; return ($$2 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec24ParseSignificantMapCabacEPiiPNS_21TagWelsDecoderContextERj($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$053$lcssa = 0, $$05362 = 0, $$05362$us = 0, $$054$lcssa59 = 0, $$05460 = 0, $$05460$us = 0, $$4 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
        var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
        var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $4 = sp;
        $5 = ($1 | 0) == (6);
        $6 = $5 ? 402 : 105;
        $7 = (((($2)) + 511309 | 0) + ($6 << 1) | 0);
        $8 = (10338 + ($1 << 1) | 0);
        $9 = HEAP16[$8 >> 1] | 0;
        $10 = $9 << 16 >> 16;
        $11 = (($7) + ($10 << 1) | 0);
        $12 = $5 ? 417 : 166;
        $13 = (((($2)) + 511309 | 0) + ($12 << 1) | 0);
        $14 = (10338 + ($1 << 1) | 0);
        $15 = HEAP16[$14 >> 1] | 0;
        $16 = $15 << 16 >> 16;
        $17 = (($13) + ($16 << 1) | 0);
        HEAP32[$3 >> 2] = 0;
        $18 = (10294 + ($1 << 1) | 0);
        $19 = HEAP16[$18 >> 1] | 0;
        $20 = $19 << 16 >> 16;
        $21 = ($1 | 0) == (0);
        L1: do {
            if ($21) {
                $$053$lcssa = $0;
            } else {
                $22 = ((($2)) + 512232 | 0);
                L3: do {
                    if ($5) {
                        $$05362$us = $0; $$05460$us = 0;
                        while (1) {
                            $23 = (25586 + ($$05460$us) | 0);
                            $24 = HEAP8[$23 >> 0] | 0;
                            $25 = $24 & 255;
                            $26 = HEAP32[$22 >> 2] | 0;
                            $27 = (($11) + ($25 << 1) | 0);
                            $28 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($26, $27, $4) | 0);
                            $29 = ($28 | 0) == (0);
                            if (!($29)) {
                                $$4 = $28;
                                label = 17;
                                break;
                            }
                            $30 = HEAP32[$4 >> 2] | 0;
                            $31 = ($30 | 0) == (0);
                            $32 = ((($$05362$us)) + 4 | 0);
                            if ($31) {
                                HEAP32[$$05362$us >> 2] = 0;
                            } else {
                                HEAP32[$$05362$us >> 2] = 1;
                                $33 = HEAP32[$3 >> 2] | 0;
                                $34 = (($33) + 1) | 0;
                                HEAP32[$3 >> 2] = $34;
                                $35 = (25650 + ($$05460$us) | 0);
                                $36 = HEAP8[$35 >> 0] | 0;
                                $37 = $36 & 255;
                                $38 = HEAP32[$22 >> 2] | 0;
                                $39 = (($17) + ($37 << 1) | 0);
                                $40 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($38, $39, $4) | 0);
                                $41 = ($40 | 0) == (0);
                                if (!($41)) {
                                    $$4 = $40;
                                    label = 17;
                                    break;
                                }
                                $42 = HEAP32[$4 >> 2] | 0;
                                $43 = ($42 | 0) == (0);
                                if (!($43)) {
                                    $$054$lcssa59 = $$05460$us; $$lcssa = $32;
                                    break L3;
                                }
                            }
                            $44 = (($$05460$us) + 1) | 0;
                            $45 = ($44 | 0) < ($20 | 0);
                            if ($45) {
                                $$05362$us = $32; $$05460$us = $44;
                            } else {
                                $$053$lcssa = $32;
                                break L1;
                            }
                        }
                        if ((label | 0) == 17) {
                            STACKTOP = sp; return ($$4 | 0);
                        }
                    } else {
                        $$05362 = $0; $$05460 = 0;
                        while (1) {
                            $46 = HEAP32[$22 >> 2] | 0;
                            $47 = (($11) + ($$05460 << 1) | 0);
                            $48 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($46, $47, $4) | 0);
                            $49 = ($48 | 0) == (0);
                            if (!($49)) {
                                $$4 = $48;
                                label = 17;
                                break;
                            }
                            $50 = HEAP32[$4 >> 2] | 0;
                            $51 = ($50 | 0) == (0);
                            $52 = ((($$05362)) + 4 | 0);
                            if ($51) {
                                HEAP32[$$05362 >> 2] = 0;
                            } else {
                                HEAP32[$$05362 >> 2] = 1;
                                $53 = HEAP32[$3 >> 2] | 0;
                                $54 = (($53) + 1) | 0;
                                HEAP32[$3 >> 2] = $54;
                                $55 = HEAP32[$22 >> 2] | 0;
                                $56 = (($17) + ($$05460 << 1) | 0);
                                $57 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($55, $56, $4) | 0);
                                $58 = ($57 | 0) == (0);
                                if (!($58)) {
                                    $$4 = $57;
                                    label = 17;
                                    break;
                                }
                                $59 = HEAP32[$4 >> 2] | 0;
                                $60 = ($59 | 0) == (0);
                                if (!($60)) {
                                    $$054$lcssa59 = $$05460; $$lcssa = $52;
                                    break L3;
                                }
                            }
                            $63 = (($$05460) + 1) | 0;
                            $64 = ($63 | 0) < ($20 | 0);
                            if ($64) {
                                $$05362 = $52; $$05460 = $63;
                            } else {
                                $$053$lcssa = $52;
                                break L1;
                            }
                        }
                        if ((label | 0) == 17) {
                            STACKTOP = sp; return ($$4 | 0);
                        }
                    }
                } while (0);
                $61 = (($20) - ($$054$lcssa59)) | 0;
                $62 = $61 << 2;
                _memset(($$lcssa | 0), 0, ($62 | 0)) | 0;
                $$4 = 0;
                STACKTOP = sp; return ($$4 | 0);
            }
        } while (0);
        HEAP32[$$053$lcssa >> 2] = 1;
        $65 = HEAP32[$3 >> 2] | 0;
        $66 = (($65) + 1) | 0;
        HEAP32[$3 >> 2] = $66;
        $$4 = 0;
        STACKTOP = sp; return ($$4 | 0);
    }
    function __ZN7WelsDec26ParseSignificantCoeffCabacEPiiPNS_21TagWelsDecoderContextE($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$06582 = 0, $$06981 = 0, $$07080 = 0, $$07379 = 0, $$171 = 0, $$174 = 0, $$272 = 0, $$275 = 0, $$6 = 0, $$78 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
        var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
        var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
        var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $3 = sp;
        $4 = ($1 | 0) == (6);
        $5 = $4 ? 426 : 227;
        $6 = (((($2)) + 511309 | 0) + ($5 << 1) | 0);
        $7 = (10272 + ($1 << 1) | 0);
        $8 = HEAP16[$7 >> 1] | 0;
        $9 = $8 << 16 >> 16;
        $10 = (($6) + ($9 << 1) | 0);
        $11 = $4 ? 431 : 232;
        $12 = (((($2)) + 511309 | 0) + ($11 << 1) | 0);
        $13 = (10272 + ($1 << 1) | 0);
        $14 = HEAP16[$13 >> 1] | 0;
        $15 = $14 << 16 >> 16;
        $16 = (($12) + ($15 << 1) | 0);
        $17 = (10294 + ($1 << 1) | 0);
        $18 = HEAP16[$17 >> 1] | 0;
        $19 = $18 << 16 >> 16;
        $20 = ((($2)) + 512232 | 0);
        $21 = ($1 | 0) == (0);
        if ($21) {
            $$6 = 0;
            STACKTOP = sp; return ($$6 | 0);
        }
        $22 = (($0) + ($19 << 2) | 0);
        $23 = (10316 + ($1 << 1) | 0);
        $24 = HEAP16[$23 >> 1] | 0;
        $25 = $24 << 16 >> 16;
        $$06582 = $19; $$06981 = $22; $$07080 = 0; $$07379 = 1;
        while (1) {
            $26 = HEAP32[$$06981 >> 2] | 0;
            $27 = ($26 | 0) == (0);
            if ($27) {
                $$272 = $$07080; $$275 = $$07379;
            } else {
                $28 = HEAP32[$20 >> 2] | 0;
                $29 = (($10) + ($$07379 << 1) | 0);
                $30 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($28, $29, $3) | 0);
                $31 = ($30 | 0) == (0);
                if (!($31)) {
                    $$6 = $30;
                    label = 13;
                    break;
                }
                $32 = HEAP32[$3 >> 2] | 0;
                $33 = HEAP32[$$06981 >> 2] | 0;
                $34 = (($33) + ($32)) | 0;
                HEAP32[$$06981 >> 2] = $34;
                $35 = ($34 | 0) == (2);
                if ($35) {
                    $36 = HEAP32[$20 >> 2] | 0;
                    $37 = (($16) + ($$07080 << 1) | 0);
                    $38 = (__ZN7WelsDec19DecodeUEGLevelCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($36, $37, $3) | 0);
                    $39 = ($38 | 0) == (0);
                    if (!($39)) {
                        $$6 = $38;
                        label = 13;
                        break;
                    }
                    $40 = HEAP32[$3 >> 2] | 0;
                    $41 = HEAP32[$$06981 >> 2] | 0;
                    $42 = (($41) + ($40)) | 0;
                    HEAP32[$$06981 >> 2] = $42;
                    $43 = (($$07080) + 1) | 0;
                    $44 = ($43 | 0) < ($25 | 0);
                    $45 = $44 ? $43 : $25;
                    $$171 = $45; $$174 = 0;
                } else {
                    $46 = ($$07379 | 0) == (0);
                    $47 = (($$07379) + 1) | 0;
                    $48 = ($47 | 0) < (4);
                    $49 = $48 ? $47 : 4;
                    $$78 = $46 ? 0 : $49;
                    $$171 = $$07080; $$174 = $$78;
                }
                $50 = HEAP32[$20 >> 2] | 0;
                $51 = (__ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($50, $3) | 0);
                $52 = ($51 | 0) == (0);
                if (!($52)) {
                    $$6 = $51;
                    label = 13;
                    break;
                }
                $53 = HEAP32[$3 >> 2] | 0;
                $54 = ($53 | 0) == (0);
                if ($54) {
                    $$272 = $$171; $$275 = $$174;
                } else {
                    $55 = HEAP32[$$06981 >> 2] | 0;
                    $56 = (0 - ($55)) | 0;
                    HEAP32[$$06981 >> 2] = $56;
                    $$272 = $$171; $$275 = $$174;
                }
            }
            $57 = ((($$06981)) + -4 | 0);
            $58 = (($$06582) + -1) | 0;
            $59 = ($$06582 | 0) > (0);
            if ($59) {
                $$06582 = $58; $$06981 = $57; $$07080 = $$272; $$07379 = $$275;
            } else {
                $$6 = 0;
                label = 13;
                break;
            }
        }
        if ((label | 0) == 13) {
            STACKTOP = sp; return ($$6 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec19DecodeUEGLevelCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$$028$i = 0, $$$031$i = 0, $$$032$i = 0, $$028$i = 0, $$031$lcssa$i = 0, $$03138$i = 0, $$032$i = 0, $$033 = 0, $$1$$37 = 0, $$4 = 0, $$4$i$ph = 0, $$5 = 0, $$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
        var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $3 = sp + 4 | 0;
        $4 = sp;
        HEAP32[$2 >> 2] = 0;
        $5 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($0, $1, $2) | 0);
        $6 = ($5 | 0) == (0);
        if (!($6)) {
            $$5 = $5;
            STACKTOP = sp; return ($$5 | 0);
        }
        $7 = HEAP32[$2 >> 2] | 0;
        $8 = ($7 | 0) == (0);
        if ($8) {
            $$5 = 0;
            STACKTOP = sp; return ($$5 | 0);
        }
        HEAP32[$2 >> 2] = 0;
        $$033 = 1;
        while (1) {
            $9 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($0, $1, $4) | 0);
            $10 = ($9 | 0) == (0);
            if (!($10)) {
                $$4 = $9;
                break;
            }
            $11 = HEAP32[$2 >> 2] | 0;
            $12 = (($11) + 1) | 0;
            HEAP32[$2 >> 2] = $12;
            $13 = (($$033) + 1) | 0;
            $14 = HEAP32[$4 >> 2] | 0;
            $15 = ($14 | 0) != (0);
            $16 = ($13 | 0) != (13);
            $17 = $16 & $15;
            if ($17) {
                $$033 = $13;
            } else {
                label = 6;
                break;
            }
        }
        L10: do {
            if ((label | 0) == 6) {
                if ($15) {
                    HEAP32[$4 >> 2] = 0;
                    $$028$i = 0; $$032$i = 0;
                    while (1) {
                        $18 = (__ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($0, $3) | 0);
                        $19 = ($18 | 0) == (0);
                        if (!($19)) {
                            $$4$i$ph = $18;
                            break;
                        }
                        $20 = HEAP32[$3 >> 2] | 0;
                        $21 = ($20 | 0) == (1);
                        $22 = 1 << $$028$i;
                        $23 = $21 ? $22 : 0;
                        $$$032$i = (($23) + ($$032$i)) | 0;
                        $24 = $21 & 1;
                        $$$028$i = (($$028$i) + ($24)) | 0;
                        $25 = ($20 | 0) == (0);
                        if ($25) {
                            label = 10;
                            break;
                        } else {
                            $$028$i = $$$028$i; $$032$i = $$$032$i;
                        }
                    }
                    L16: do {
                        if ((label | 0) == 10) {
                            $26 = ($$$028$i | 0) == (0);
                            if ($26) {
                                $$031$lcssa$i = 0;
                            } else {
                                $$03138$i = 0; $$in$i = $$$028$i;
                                while (1) {
                                    $27 = (($$in$i) + -1) | 0;
                                    $28 = (__ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($0, $3) | 0);
                                    $29 = ($28 | 0) == (0);
                                    if (!($29)) {
                                        $$4$i$ph = $28;
                                        break L16;
                                    }
                                    $30 = HEAP32[$3 >> 2] | 0;
                                    $31 = ($30 | 0) == (1);
                                    $32 = 1 << $27;
                                    $33 = $31 ? $32 : 0;
                                    $$$031$i = $33 | $$03138$i;
                                    $34 = ($27 | 0) == (0);
                                    if ($34) {
                                        $$031$lcssa$i = $$$031$i;
                                        break;
                                    } else {
                                        $$03138$i = $$$031$i; $$in$i = $27;
                                    }
                                }
                            }
                            $36 = (($$031$lcssa$i) + ($$$032$i)) | 0;
                            HEAP32[$4 >> 2] = $36;
                            $37 = (($36) + 1) | 0;
                            $38 = HEAP32[$2 >> 2] | 0;
                            $39 = (($37) + ($38)) | 0;
                            HEAP32[$2 >> 2] = $39;
                            $$4 = 0;
                            break L10;
                        }
                    } while (0);
                    $35 = ($$4$i$ph | 0) == (0);
                    $$1$$37 = $35 ? $9 : $$4$i$ph;
                    $$4 = $$1$$37;
                } else {
                    $$4 = 0;
                }
            }
        } while (0);
        $$5 = $$4;
        STACKTOP = sp; return ($$5 | 0);
    }
    function __ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $$0$i = 0, $$032 = 0, $$037 = 0, $$1 = 0, $$sink = 0, $$sink$i = 0, $$sink31$i = 0, $$sink32$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
        var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
        var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
        var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
        var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $not$ = 0, $not$or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 16 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($0)) + 8 | 0);
        $5 = $4;
        $6 = $5;
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (($5) + 4) | 0;
        $9 = $8;
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ($3 | 0) < (1);
        if ($11) {
            $12 = ((($0)) + 28 | 0);
            $13 = HEAP32[$12 >> 2] | 0;
            $14 = ((($0)) + 24 | 0);
            $15 = HEAP32[$14 >> 2] | 0;
            $16 = (($13) - ($15)) | 0;
            $17 = ($16 | 0) < (1);
            $18 = $15;
            if ($17) {
                $$0 = 0; $$0$i = 10012; $$037 = 0;
            } else {
                switch ($16 | 0) {
                    case 3: {
                        $19 = HEAP8[$18 >> 0] | 0;
                        $20 = $19 & 255;
                        $21 = $20 << 16;
                        $22 = ((($18)) + 1 | 0);
                        $23 = HEAP8[$22 >> 0] | 0;
                        $24 = $23 & 255;
                        $25 = $24 << 8;
                        $26 = $25 | $21;
                        $27 = ((($18)) + 2 | 0);
                        $28 = HEAP8[$27 >> 0] | 0;
                        $29 = $28 & 255;
                        $30 = $26 | $29;
                        $$sink$i = 24; $$sink31$i = 3; $$sink32$i = $30;
                        break;
                    }
                    case 2: {
                        $31 = HEAP8[$18 >> 0] | 0;
                        $32 = $31 & 255;
                        $33 = $32 << 8;
                        $34 = ((($18)) + 1 | 0);
                        $35 = HEAP8[$34 >> 0] | 0;
                        $36 = $35 & 255;
                        $37 = $33 | $36;
                        $$sink$i = 16; $$sink31$i = 2; $$sink32$i = $37;
                        break;
                    }
                    case 1: {
                        $38 = HEAP8[$18 >> 0] | 0;
                        $39 = $38 & 255;
                        $$sink$i = 8; $$sink31$i = 1; $$sink32$i = $39;
                        break;
                    }
                    default: {
                        $40 = HEAP8[$18 >> 0] | 0;
                        $41 = $40 & 255;
                        $42 = $41 << 24;
                        $43 = ((($18)) + 1 | 0);
                        $44 = HEAP8[$43 >> 0] | 0;
                        $45 = $44 & 255;
                        $46 = $45 << 16;
                        $47 = $46 | $42;
                        $48 = ((($18)) + 2 | 0);
                        $49 = HEAP8[$48 >> 0] | 0;
                        $50 = $49 & 255;
                        $51 = $50 << 8;
                        $52 = $47 | $51;
                        $53 = ((($18)) + 3 | 0);
                        $54 = HEAP8[$53 >> 0] | 0;
                        $55 = $54 & 255;
                        $56 = $52 | $55;
                        $$sink$i = 32; $$sink31$i = 4; $$sink32$i = $56;
                    }
                }
                $57 = (($18) + ($$sink31$i) | 0);
                HEAP32[$14 >> 2] = $57;
                $$0 = $$sink$i; $$0$i = 0; $$037 = $$sink32$i;
            }
            $58 = (_bitshift64Shl(($7 | 0), ($10 | 0), ($$0 | 0)) | 0);
            $59 = tempRet0;
            $60 = $58 | $$037;
            $61 = ($$0$i | 0) == (0);
            $62 = ($$0 | 0) != (0);
            $not$or$cond = $62 | $61;
            if ($not$or$cond) {
                $$032 = $$0; $72 = $59; $74 = $60;
            } else {
                $$1 = $$0$i;
                return ($$1 | 0);
            }
        } else {
            $$032 = $3; $72 = $10; $74 = $7;
        }
        $63 = (($$032) + -1) | 0;
        $64 = $0;
        $65 = $64;
        $66 = HEAP32[$65 >> 2] | 0;
        $67 = (($64) + 4) | 0;
        $68 = $67;
        $69 = HEAP32[$68 >> 2] | 0;
        $70 = (_bitshift64Shl(($66 | 0), ($69 | 0), ($63 | 0)) | 0);
        $71 = tempRet0;
        $73 = ($72 >>> 0) < ($71 >>> 0);
        $75 = ($74 >>> 0) < ($70 >>> 0);
        $76 = ($72 | 0) == ($71 | 0);
        $77 = $76 & $75;
        $78 = $73 | $77;
        HEAP32[$2 >> 2] = $63;
        $79 = $78 ? 0 : $70;
        $80 = $78 ? 0 : $71;
        $81 = (_i64Subtract(($74 | 0), ($72 | 0), ($79 | 0), ($80 | 0)) | 0);
        $82 = tempRet0;
        $not$ = $78 ^ 1;
        $$sink = $not$ & 1;
        $83 = $4;
        $84 = $83;
        HEAP32[$84 >> 2] = $81;
        $85 = (($83) + 4) | 0;
        $86 = $85;
        HEAP32[$86 >> 2] = $82;
        HEAP32[$1 >> 2] = $$sink;
        $$1 = 0;
        return ($$1 | 0);
    }
    function __ZN7WelsDec17ParseCbfInfoCabacEPNS_16TagNeighborAvailEPhiiPNS_21TagWelsDecoderContextERj($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$085 = 0, $$087 = 0, $$186 = 0, $$188 = 0, $$2 = 0, $$94 = 0, $$95 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
        var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $98 = 0, $99 = 0, $phitmp = 0, $phitmp91 = 0, $phitmp92 = 0, $phitmp93 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = ((($4)) + 241932 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($7)) + 4040 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($7)) + 4044 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = (($9) - ($11)) | 0;
        $13 = (($9) + -1) | 0;
        $14 = ((($7)) + 3960 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ((($7)) + 3908 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        HEAP32[$5 >> 2] = 0;
        $18 = (($17) + ($9 << 1) | 0);
        $19 = HEAP16[$18 >> 1] | 0;
        $20 = $19 & 519;
        $21 = ($20 << 16 >> 16) != (0);
        $22 = $21 & 1;
        switch ($3 | 0) {
            case 1: case 7: case 8: {
                $23 = HEAP32[$0 >> 2] | 0;
                $24 = ($23 | 0) == (0);
                if ($24) {
                    $$087 = $22;
                } else {
                    $25 = (($17) + ($12 << 1) | 0);
                    $26 = HEAP16[$25 >> 1] | 0;
                    $27 = ($26 << 16 >> 16) == (512);
                    if ($27) {
                        $$087 = 1;
                    } else {
                        $28 = (($15) + ($12 << 1) | 0);
                        $29 = HEAP16[$28 >> 1] | 0;
                        $30 = $29 & 65535;
                        $31 = 1 << $3;
                        $32 = $31 & $30;
                        $33 = ($32 | 0) != (0);
                        $phitmp93 = $33 & 1;
                        $$087 = $phitmp93;
                    }
                }
                $34 = ((($0)) + 4 | 0);
                $35 = HEAP32[$34 >> 2] | 0;
                $36 = ($35 | 0) == (0);
                if ($36) {
                    $$085 = $22;
                } else {
                    $37 = (($17) + ($13 << 1) | 0);
                    $38 = HEAP16[$37 >> 1] | 0;
                    $39 = ($38 << 16 >> 16) == (512);
                    if ($39) {
                        $$085 = 1;
                    } else {
                        $40 = (($15) + ($13 << 1) | 0);
                        $41 = HEAP16[$40 >> 1] | 0;
                        $42 = $41 & 65535;
                        $43 = 1 << $3;
                        $44 = $43 & $42;
                        $45 = ($44 | 0) != (0);
                        $phitmp92 = $45 & 1;
                        $$085 = $phitmp92;
                    }
                }
                $46 = ($$087 << 1) & 255;
                $47 = $$085 | $46;
                $48 = $47 & 255;
                $49 = ((($4)) + 512232 | 0);
                $50 = HEAP32[$49 >> 2] | 0;
                $51 = ((($4)) + 511479 | 0);
                $52 = (10360 + ($3 << 1) | 0);
                $53 = HEAP16[$52 >> 1] | 0;
                $54 = $53 << 16 >> 16;
                $55 = (($51) + ($54 << 1) | 0);
                $56 = (($55) + ($48 << 1) | 0);
                $57 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($50, $56, $5) | 0);
                $58 = ($57 | 0) == (0);
                if (!($58)) {
                    $$2 = $57;
                    return ($$2 | 0);
                }
                $59 = HEAP32[$5 >> 2] | 0;
                $60 = ($59 | 0) == (0);
                if (!($60)) {
                    $61 = 1 << $3;
                    $62 = (($15) + ($9 << 1) | 0);
                    $63 = HEAP16[$62 >> 1] | 0;
                    $64 = $63 & 65535;
                    $65 = $61 | $64;
                    $66 = $65 & 65535;
                    HEAP16[$62 >> 1] = $66;
                }
                break;
            }
            default: {
                $67 = (15431 + ($2) | 0);
                $68 = HEAP8[$67 >> 0] | 0;
                $69 = $68 & 255;
                $70 = (($69) + -8) | 0;
                $71 = (($1) + ($70) | 0);
                $72 = HEAP8[$71 >> 0] | 0;
                switch ($72 << 24 >> 24) {
                    case -1: {
                        $$188 = $22;
                        break;
                    }
                    case 0: {
                        $73 = 13434828 >>> $2;
                        $74 = $73 & 1;
                        $75 = ($74 | 0) == (0);
                        $$94 = $75 ? $12 : $9;
                        $76 = (($17) + ($$94 << 1) | 0);
                        $77 = HEAP16[$76 >> 1] | 0;
                        $78 = ($77 << 16 >> 16) == (512);
                        $phitmp91 = $78 & 1;
                        $$188 = $phitmp91;
                        break;
                    }
                    default: {
                        $$188 = 1;
                    }
                }
                $79 = (($69) + -1) | 0;
                $80 = (($1) + ($79) | 0);
                $81 = HEAP8[$80 >> 0] | 0;
                switch ($81 << 24 >> 24) {
                    case -1: {
                        $$186 = $22;
                        break;
                    }
                    case 0: {
                        $82 = 11205370 >>> $2;
                        $83 = $82 & 1;
                        $84 = ($83 | 0) == (0);
                        $$95 = $84 ? $13 : $9;
                        $85 = (($17) + ($$95 << 1) | 0);
                        $86 = HEAP16[$85 >> 1] | 0;
                        $87 = ($86 << 16 >> 16) == (512);
                        $phitmp = $87 & 1;
                        $$186 = $phitmp;
                        break;
                    }
                    default: {
                        $$186 = 1;
                    }
                }
                $88 = ($$188 << 1) & 255;
                $89 = $$186 | $88;
                $90 = $89 & 255;
                $91 = ((($4)) + 512232 | 0);
                $92 = HEAP32[$91 >> 2] | 0;
                $93 = ((($4)) + 511479 | 0);
                $94 = (10360 + ($3 << 1) | 0);
                $95 = HEAP16[$94 >> 1] | 0;
                $96 = $95 << 16 >> 16;
                $97 = (($93) + ($96 << 1) | 0);
                $98 = (($97) + ($90 << 1) | 0);
                $99 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($92, $98, $5) | 0);
                $100 = ($99 | 0) == (0);
                if (!($100)) {
                    $$2 = $99;
                    return ($$2 | 0);
                }
            }
        }
        $$2 = 0;
        return ($$2 | 0);
    }
    function __ZN7WelsDec19DecodeUnaryBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEiRj($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$3 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $4 = sp;
        HEAP32[$3 >> 2] = 0;
        $5 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($0, $1, $3) | 0);
        $6 = ($5 | 0) == (0);
        if (!($6)) {
            $$4 = $5;
            STACKTOP = sp; return ($$4 | 0);
        }
        $7 = HEAP32[$3 >> 2] | 0;
        $8 = ($7 | 0) == (0);
        if ($8) {
            $$4 = 0;
            STACKTOP = sp; return ($$4 | 0);
        }
        $9 = (($1) + ($2 << 1) | 0);
        HEAP32[$3 >> 2] = 0;
        while (1) {
            $10 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($0, $9, $4) | 0);
            $11 = ($10 | 0) == (0);
            if (!($11)) {
                $$3 = $10;
                break;
            }
            $12 = HEAP32[$3 >> 2] | 0;
            $13 = (($12) + 1) | 0;
            HEAP32[$3 >> 2] = $13;
            $14 = HEAP32[$4 >> 2] | 0;
            $15 = ($14 | 0) == (0);
            if ($15) {
                $$3 = 0;
                break;
            }
        }
        $$4 = $$3;
        STACKTOP = sp; return ($$4 | 0);
    }
    function __ZN7WelsDec20DecodeTerminateCabacEPNS_19SWelsCabacDecEngineERj($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $$0$i = 0, $$036 = 0, $$1 = 0, $$sink$i = 0, $$sink31$i = 0, $$sink32$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0;
        var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
        var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
        var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
        var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = $0;
        $3 = $2;
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = (($2) + 4) | 0;
        $6 = $5;
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (_i64Add(($4 | 0), ($7 | 0), -2, -1) | 0);
        $9 = tempRet0;
        $10 = ((($0)) + 8 | 0);
        $11 = $10;
        $12 = $11;
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = (($11) + 4) | 0;
        $15 = $14;
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = ((($0)) + 16 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = (_bitshift64Shl(($8 | 0), ($9 | 0), ($18 | 0)) | 0);
        $20 = tempRet0;
        $21 = ($16 >>> 0) < ($20 >>> 0);
        $22 = ($13 >>> 0) < ($19 >>> 0);
        $23 = ($16 | 0) == ($20 | 0);
        $24 = $23 & $22;
        $25 = $21 | $24;
        if (!($25)) {
            HEAP32[$1 >> 2] = 1;
            $$1 = 0;
            return ($$1 | 0);
        }
        HEAP32[$1 >> 2] = 0;
        $26 = ($9 >>> 0) < (0);
        $27 = ($8 >>> 0) < (256);
        $28 = ($9 | 0) == (0);
        $29 = $28 & $27;
        $30 = $26 | $29;
        if (!($30)) {
            $106 = $0;
            $107 = $106;
            HEAP32[$107 >> 2] = $8;
            $108 = (($106) + 4) | 0;
            $109 = $108;
            HEAP32[$109 >> 2] = $9;
            $$1 = 0;
            return ($$1 | 0);
        }
        $31 = (25191 + ($8) | 0);
        $32 = HEAP8[$31 >> 0] | 0;
        $33 = $32 & 255;
        $34 = $32 & 255;
        $35 = (_bitshift64Shl(($8 | 0), ($9 | 0), ($34 | 0)) | 0);
        $36 = tempRet0;
        $37 = $0;
        $38 = $37;
        HEAP32[$38 >> 2] = $35;
        $39 = (($37) + 4) | 0;
        $40 = $39;
        HEAP32[$40 >> 2] = $36;
        $41 = HEAP32[$17 >> 2] | 0;
        $42 = (($41) - ($33)) | 0;
        HEAP32[$17 >> 2] = $42;
        $43 = ($42 | 0) < (0);
        if ($43) {
            $44 = ((($0)) + 28 | 0);
            $45 = HEAP32[$44 >> 2] | 0;
            $46 = ((($0)) + 24 | 0);
            $47 = HEAP32[$46 >> 2] | 0;
            $48 = (($45) - ($47)) | 0;
            $49 = ($48 | 0) < (1);
            $50 = $47;
            if ($49) {
                $$0 = 0; $$0$i = 10012; $$036 = 0;
            } else {
                switch ($48 | 0) {
                    case 3: {
                        $51 = HEAP8[$50 >> 0] | 0;
                        $52 = $51 & 255;
                        $53 = $52 << 16;
                        $54 = ((($50)) + 1 | 0);
                        $55 = HEAP8[$54 >> 0] | 0;
                        $56 = $55 & 255;
                        $57 = $56 << 8;
                        $58 = $57 | $53;
                        $59 = ((($50)) + 2 | 0);
                        $60 = HEAP8[$59 >> 0] | 0;
                        $61 = $60 & 255;
                        $62 = $58 | $61;
                        $$sink$i = 24; $$sink31$i = 3; $$sink32$i = $62;
                        break;
                    }
                    case 2: {
                        $63 = HEAP8[$50 >> 0] | 0;
                        $64 = $63 & 255;
                        $65 = $64 << 8;
                        $66 = ((($50)) + 1 | 0);
                        $67 = HEAP8[$66 >> 0] | 0;
                        $68 = $67 & 255;
                        $69 = $65 | $68;
                        $$sink$i = 16; $$sink31$i = 2; $$sink32$i = $69;
                        break;
                    }
                    case 1: {
                        $70 = HEAP8[$50 >> 0] | 0;
                        $71 = $70 & 255;
                        $$sink$i = 8; $$sink31$i = 1; $$sink32$i = $71;
                        break;
                    }
                    default: {
                        $72 = HEAP8[$50 >> 0] | 0;
                        $73 = $72 & 255;
                        $74 = $73 << 24;
                        $75 = ((($50)) + 1 | 0);
                        $76 = HEAP8[$75 >> 0] | 0;
                        $77 = $76 & 255;
                        $78 = $77 << 16;
                        $79 = $78 | $74;
                        $80 = ((($50)) + 2 | 0);
                        $81 = HEAP8[$80 >> 0] | 0;
                        $82 = $81 & 255;
                        $83 = $82 << 8;
                        $84 = $79 | $83;
                        $85 = ((($50)) + 3 | 0);
                        $86 = HEAP8[$85 >> 0] | 0;
                        $87 = $86 & 255;
                        $88 = $84 | $87;
                        $$sink$i = 32; $$sink31$i = 4; $$sink32$i = $88;
                    }
                }
                $89 = (($50) + ($$sink31$i) | 0);
                HEAP32[$46 >> 2] = $89;
                $$0 = $$sink$i; $$0$i = 0; $$036 = $$sink32$i;
            }
            $90 = $10;
            $91 = $90;
            $92 = HEAP32[$91 >> 2] | 0;
            $93 = (($90) + 4) | 0;
            $94 = $93;
            $95 = HEAP32[$94 >> 2] | 0;
            $96 = (_bitshift64Shl(($92 | 0), ($95 | 0), ($$0 | 0)) | 0);
            $97 = tempRet0;
            $98 = $96 | $$036;
            $99 = $10;
            $100 = $99;
            HEAP32[$100 >> 2] = $98;
            $101 = (($99) + 4) | 0;
            $102 = $101;
            HEAP32[$102 >> 2] = $97;
            $103 = (($42) + ($$0)) | 0;
            HEAP32[$17 >> 2] = $103;
            $104 = ($$0$i | 0) != (0);
            $105 = ($103 | 0) < (0);
            $or$cond = $104 & $105;
            if ($or$cond) {
                $$1 = $$0$i;
                return ($$1 | 0);
            }
        }
        $$1 = 0;
        return ($$1 | 0);
    }
    function __ZN7WelsDec18ParseSkipFlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0;
        var $phitmp19 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$2 >> 2] = 0;
        $3 = ((($1)) + 4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ($4 | 0) == (0);
        if ($5) {
            $15 = 0;
        } else {
            $6 = ((($1)) + 16 | 0);
            $7 = HEAP32[$6 >> 2] | 0;
            $8 = ($7 | 0) != (256);
            $phitmp = $8 & 1;
            $15 = $phitmp;
        }
        $9 = HEAP32[$1 >> 2] | 0;
        $10 = ($9 | 0) == (0);
        if ($10) {
            $16 = 0;
        } else {
            $11 = ((($1)) + 20 | 0);
            $12 = HEAP32[$11 >> 2] | 0;
            $13 = ($12 | 0) != (256);
            $phitmp19 = $13 & 1;
            $16 = $phitmp19;
        }
        $14 = (($16) + ($15)) | 0;
        $17 = ((($0)) + 511331 | 0);
        $18 = (($17) + ($14 << 1) | 0);
        $19 = ((($0)) + 512232 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($20, $18, $2) | 0);
        return ($21 | 0);
    }
    function __ZN7WelsDec32WelsDecodeMbCabacPSliceBaseMode0EPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0537 = 0, $$0537$1 = 0, $$0545 = 0, $$0548 = 0, $$1538 = 0, $$1538$1 = 0, $$1541640 = 0, $$1546 = 0, $$1549 = 0, $$1575643 = 0, $$39 = 0, $$42 = 0, $$599 = 0, $$599$1 = 0, $$606 = 0, $$606$1 = 0, $$9 = 0, $$off = 0, $$off579 = 0, $$phi$trans$insert = 0;
        var $$phi$trans$insert669 = 0, $$phi$trans$insert672 = 0, $$phi$trans$insert674 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre666 = 0, $$pre668 = 0, $$pre670 = 0, $$pre673 = 0, $$pre675 = 0, $$pre682 = 0, $$sink33$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
        var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
        var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
        var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
        var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
        var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
        var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
        var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
        var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
        var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
        var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
        var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
        var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
        var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
        var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
        var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
        var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
        var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
        var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
        var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
        var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
        var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
        var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
        var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
        var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
        var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
        var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
        var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
        var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
        var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 624 | 0;
        $3 = sp + 244 | 0;
        $4 = sp + 240 | 0;
        $5 = sp + 548 | 0;
        $6 = sp;
        $7 = sp + 248 | 0;
        $8 = sp + 488 | 0;
        $9 = ((($0)) + 241932 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($10)) + 3900 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($10)) + 3866 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = $14 & 255;
        $16 = ((($10)) + 3867 | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = $17 & 255;
        $19 = ((($10)) + 4040 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$4 >> 2] = 0;
        $21 = ((($5)) + 15 | 0);
        $22 = $21;
        $23 = $22 & 15;
        $24 = (0 - ($23)) | 0;
        $25 = (($21) + ($24) | 0);
        $26 = ((($10)) + 3976 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = (($27) + ($20) | 0);
        HEAP8[$28 >> 0] = 0;
        $29 = (__ZN7WelsDec22ParseMBTypePSliceCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $1, $3) | 0);
        $30 = ($29 | 0) == (0);
        if (!($30)) {
            $$42 = $29;
            STACKTOP = sp; return ($$42 | 0);
        }
        $31 = HEAP32[$3 >> 2] | 0;
        $32 = ($31 >>> 0) < (4);
        L4: do {
            if ($32) {
                $33 = (9368 + ($31 << 3) | 0);
                $34 = HEAP32[$33 >> 2] | 0;
                $35 = $34 & 65535;
                $36 = ((($10)) + 3908 | 0);
                $37 = HEAP32[$36 >> 2] | 0;
                $38 = (($37) + ($20 << 1) | 0);
                HEAP16[$38 >> 1] = $35;
                __ZN7WelsDec23WelsFillCacheInterCabacEPNS_16TagNeighborAvailEPhPA30_A2_sS5_PA30_aPNS_10TagDqLayerE($1, $25, $6, $7, $8, $10);
                $39 = (__ZN7WelsDec25ParseInterMotionInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_A2_sS7_PA30_a($0, $1, $25, $6, $7, $8) | 0);
                $40 = ($39 | 0) == (0);
                if ($40) {
                    $41 = HEAP32[$26 >> 2] | 0;
                    $42 = (($41) + ($20) | 0);
                    HEAP8[$42 >> 0] = 0;
                    $$0545 = 0; $$0548 = 0; $$pre$phiZ2D = $36;
                    break;
                }
                $$42 = $39;
                STACKTOP = sp; return ($$42 | 0);
            } else {
                $43 = (($31) + -5) | 0;
                HEAP32[$3 >> 2] = $43;
                $44 = ($43 >>> 0) > (25);
                if ($44) {
                    $$42 = 1035;
                    STACKTOP = sp; return ($$42 | 0);
                }
                $45 = ((($0)) + 241924 | 0);
                $46 = HEAP32[$45 >> 2] | 0;
                $47 = ((($46)) + 318 | 0);
                $48 = HEAP8[$47 >> 0] | 0;
                $49 = ($48 << 24 >> 24) == (0);
                L14: do {
                    if ($49) {
                        switch ($31 | 0) {
                            case 30: {
                                label = 10;
                                break L14;
                                break;
                            }
                            case 5: {
                                label = 14;
                                break L14;
                                break;
                            }
                            case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: {
                                $$42 = 1035;
                                break;
                            }
                            default: {
                                label = 21;
                                break L14;
                            }
                        }
                        STACKTOP = sp; return ($$42 | 0);
                    } else {
                        switch ($31 | 0) {
                            case 30: {
                                label = 10;
                                break;
                            }
                            case 5: {
                                label = 14;
                                break;
                            }
                            default: {
                                label = 21;
                            }
                        }
                    }
                } while (0);
                if ((label | 0) == 10) {
                    $50 = (__ZN7WelsDec18ParseIPCMInfoCabacEPNS_21TagWelsDecoderContextE($0) | 0);
                    $51 = ($50 | 0) == (0);
                    if (!($51)) {
                        $$42 = $50;
                        STACKTOP = sp; return ($$42 | 0);
                    }
                    $52 = ((($10)) + 3884 | 0);
                    HEAP32[$52 >> 2] = 0;
                    $53 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($0, $2) | 0);
                    $54 = ($53 | 0) == (0);
                    if (!($54)) {
                        $$42 = $53;
                        STACKTOP = sp; return ($$42 | 0);
                    }
                    $55 = HEAP32[$2 >> 2] | 0;
                    $56 = ($55 | 0) == (0);
                    if ($56) {
                        $$42 = 0;
                        STACKTOP = sp; return ($$42 | 0);
                    }
                    $57 = ((($0)) + 512232 | 0);
                    $58 = HEAP32[$57 >> 2] | 0;
                    $59 = HEAP32[$9 >> 2] | 0;
                    $60 = ((($59)) + 3900 | 0);
                    $61 = HEAP32[$60 >> 2] | 0;
                    __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($58, $61);
                    $$42 = 0;
                    STACKTOP = sp; return ($$42 | 0);
                }
                else if ((label | 0) == 14) {
                    $62 = ((($6)) + 15 | 0);
                    $63 = $62;
                    $64 = $63 & 15;
                    $65 = (0 - ($64)) | 0;
                    $66 = (($62) + ($65) | 0);
                    $67 = ((($10)) + 3908 | 0);
                    $68 = HEAP32[$67 >> 2] | 0;
                    $69 = (($68) + ($20 << 1) | 0);
                    HEAP16[$69 >> 1] = 1;
                    $70 = ((($0)) + 241928 | 0);
                    $71 = HEAP32[$70 >> 2] | 0;
                    $72 = ((($71)) + 184 | 0);
                    $73 = HEAP8[$72 >> 0] | 0;
                    $74 = ($73 << 24 >> 24) == (0);
                    if ($74) {
                        label = 16;
                    } else {
                        $75 = HEAP32[$9 >> 2] | 0;
                        $76 = ((($75)) + 3944 | 0);
                        $77 = HEAP32[$76 >> 2] | 0;
                        $78 = (($77) + ($20) | 0);
                        $79 = (__ZN7WelsDec30ParseTransformSize8x8FlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERb($0, $1, $78) | 0);
                        $80 = ($79 | 0) == (0);
                        if ($80) {
                            label = 16;
                        } else {
                            $$9 = $79;
                        }
                    }
                    do {
                        if ((label | 0) == 16) {
                            $81 = HEAP32[$9 >> 2] | 0;
                            $82 = ((($81)) + 3944 | 0);
                            $83 = HEAP32[$82 >> 2] | 0;
                            $84 = (($83) + ($20) | 0);
                            $85 = HEAP8[$84 >> 0] | 0;
                            $86 = ($85 << 24 >> 24) == (0);
                            if ($86) {
                                $93 = ((($0)) + 317148 | 0);
                                $94 = HEAP32[$93 >> 2] | 0;
                                FUNCTION_TABLE_viiii[$94 & 31]($1, $25, $66, $10);
                                $95 = (__ZN7WelsDec17ParseIntra4x4ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $1, $66, $12, $10) | 0);
                                $96 = ($95 | 0) == (0);
                                if (!($96)) {
                                    $$9 = $95;
                                    break;
                                }
                            } else {
                                $87 = HEAP32[$67 >> 2] | 0;
                                $88 = (($87) + ($20 << 1) | 0);
                                HEAP16[$88 >> 1] = 4;
                                HEAP32[$3 >> 2] = 4;
                                $89 = ((($0)) + 317148 | 0);
                                $90 = HEAP32[$89 >> 2] | 0;
                                FUNCTION_TABLE_viiii[$90 & 31]($1, $25, $66, $10);
                                $91 = (__ZN7WelsDec17ParseIntra8x8ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPaPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $1, $66, $12, $10) | 0);
                                $92 = ($91 | 0) == (0);
                                if (!($92)) {
                                    $$9 = $91;
                                    break;
                                }
                            }
                            $$0545 = 0; $$0548 = 0; $$pre$phiZ2D = $67;
                            break L4;
                        }
                    } while (0);
                    $$42 = $$9;
                    STACKTOP = sp; return ($$42 | 0);
                }
                else if ((label | 0) == 21) {
                    $97 = ((($10)) + 3908 | 0);
                    $98 = HEAP32[$97 >> 2] | 0;
                    $99 = (($98) + ($20 << 1) | 0);
                    HEAP16[$99 >> 1] = 2;
                    $100 = ((($10)) + 3944 | 0);
                    $101 = HEAP32[$100 >> 2] | 0;
                    $102 = (($101) + ($20) | 0);
                    HEAP8[$102 >> 0] = 0;
                    $103 = ((($10)) + 3940 | 0);
                    $104 = HEAP32[$103 >> 2] | 0;
                    $105 = (($104) + ($20) | 0);
                    HEAP8[$105 >> 0] = 1;
                    $106 = HEAP32[$3 >> 2] | 0;
                    $107 = (($106) + 3) | 0;
                    $108 = $107 & 3;
                    $109 = $108 & 255;
                    $110 = ((($10)) + 3992 | 0);
                    $111 = HEAP32[$110 >> 2] | 0;
                    $112 = (((($111) + ($20 << 3) | 0)) + 7 | 0);
                    HEAP8[$112 >> 0] = $109;
                    $113 = HEAP32[$3 >> 2] | 0;
                    $114 = (($113) + -1) | 0;
                    $115 = $114 >>> 2;
                    $116 = (25169 + ($115) | 0);
                    $117 = HEAP8[$116 >> 0] | 0;
                    $118 = ((($10)) + 3956 | 0);
                    $119 = HEAP32[$118 >> 2] | 0;
                    $120 = (($119) + ($20) | 0);
                    HEAP8[$120 >> 0] = $117;
                    $121 = HEAP32[$45 >> 2] | 0;
                    $122 = ((($121)) + 318 | 0);
                    $123 = HEAP8[$122 >> 0] | 0;
                    $124 = ($123 << 24 >> 24) == (0);
                    $$pre = HEAP32[$118 >> 2] | 0;
                    $$phi$trans$insert = (($$pre) + ($20) | 0);
                    $$pre666 = HEAP8[$$phi$trans$insert >> 0] | 0;
                    $125 = $$pre666 << 24 >> 24;
                    $126 = $125 >> 4;
                    $127 = $124 ? 0 : $126;
                    $128 = $$pre666 & 15;
                    $129 = $128 & 255;
                    __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($1, $25, $10);
                    $130 = (__ZN7WelsDec19ParseIntra16x16ModeEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPN10WelsCommon15TagBitStringAuxEPNS_10TagDqLayerE($0, $1, $12, $10) | 0);
                    $131 = ($130 | 0) == (0);
                    if ($131) {
                        $$0545 = $129; $$0548 = $127; $$pre$phiZ2D = $97;
                        break;
                    } else {
                        $$42 = $130;
                    }
                    STACKTOP = sp; return ($$42 | 0);
                }
            }
        } while (0);
        $132 = ((($10)) + 3964 | 0);
        $133 = HEAP32[$132 >> 2] | 0;
        $134 = (($133) + (($20 * 24) | 0) | 0);
        HEAP8[$134 >> 0] = 0 & 255; HEAP8[$134 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$134 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$134 + 3 >> 0] = 0 >> 24;
        $135 = HEAP32[$132 >> 2] | 0;
        $136 = (((($135) + (($20 * 24) | 0) | 0)) + 4 | 0);
        HEAP8[$136 >> 0] = 0 & 255; HEAP8[$136 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$136 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$136 + 3 >> 0] = 0 >> 24;
        $137 = HEAP32[$132 >> 2] | 0;
        $138 = (((($137) + (($20 * 24) | 0) | 0)) + 8 | 0);
        HEAP8[$138 >> 0] = 0 & 255; HEAP8[$138 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$138 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$138 + 3 >> 0] = 0 >> 24;
        $139 = HEAP32[$132 >> 2] | 0;
        $140 = (((($139) + (($20 * 24) | 0) | 0)) + 12 | 0);
        HEAP8[$140 >> 0] = 0 & 255; HEAP8[$140 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$140 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$140 + 3 >> 0] = 0 >> 24;
        $141 = HEAP32[$132 >> 2] | 0;
        $142 = (((($141) + (($20 * 24) | 0) | 0)) + 16 | 0);
        HEAP8[$142 >> 0] = 0 & 255; HEAP8[$142 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$142 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$142 + 3 >> 0] = 0 >> 24;
        $143 = HEAP32[$132 >> 2] | 0;
        $144 = (((($143) + (($20 * 24) | 0) | 0)) + 20 | 0);
        HEAP8[$144 >> 0] = 0 & 255; HEAP8[$144 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$144 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$144 + 3 >> 0] = 0 >> 24;
        $145 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $146 = (($145) + ($20 << 1) | 0);
        $147 = HEAP16[$146 >> 1] | 0;
        $148 = ($147 << 16 >> 16) == (2);
        if ($148) {
            $$phi$trans$insert672 = ((($10)) + 3956 | 0);
            $$pre673 = HEAP32[$$phi$trans$insert672 >> 2] | 0;
            $$phi$trans$insert674 = (($$pre673) + ($20) | 0);
            $$pre675 = HEAP8[$$phi$trans$insert674 >> 0] | 0;
            $$1546 = $$0545; $$1549 = $$0548; $170 = $$pre675;
        } else {
            $149 = (__ZN7WelsDec17ParseCbpInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $1, $4) | 0);
            $150 = ($149 | 0) == (0);
            if (!($150)) {
                $$42 = $149;
                STACKTOP = sp; return ($$42 | 0);
            }
            $151 = HEAP32[$4 >> 2] | 0;
            $152 = $151 & 255;
            $153 = ((($10)) + 3956 | 0);
            $154 = HEAP32[$153 >> 2] | 0;
            $155 = (($154) + ($20) | 0);
            HEAP8[$155 >> 0] = $152;
            $156 = HEAP32[$4 >> 2] | 0;
            $157 = ($156 | 0) == (0);
            $$pre682 = ((($10)) + 3884 | 0);
            if ($157) {
                $159 = 0;
            } else {
                $158 = HEAP32[$$pre682 >> 2] | 0;
                $159 = $158;
            }
            HEAP32[$$pre682 >> 2] = $159;
            $160 = ((($0)) + 241924 | 0);
            $161 = HEAP32[$160 >> 2] | 0;
            $162 = ((($161)) + 318 | 0);
            $163 = HEAP8[$162 >> 0] | 0;
            $164 = ($163 << 24 >> 24) == (0);
            $$pre668 = HEAP32[$153 >> 2] | 0;
            $$phi$trans$insert669 = (($$pre668) + ($20) | 0);
            $$pre670 = HEAP8[$$phi$trans$insert669 >> 0] | 0;
            $165 = $$pre670 << 24 >> 24;
            $166 = $165 >> 4;
            $167 = $164 ? 0 : $166;
            $168 = $$pre670 & 15;
            $169 = $168 & 255;
            $$1546 = $169; $$1549 = $167; $170 = $$pre670;
        }
        $171 = ($170 << 24 >> 24) == (0);
        $172 = HEAP32[$$pre$phiZ2D >> 2] | 0;
        $173 = (($172) + ($20 << 1) | 0);
        $174 = HEAP16[$173 >> 1] | 0;
        $175 = ($174 << 16 >> 16) == (2);
        L54: do {
            if ($171) {
                if ($175) {
                    label = 37;
                } else {
                    $425 = ((($10)) + 3868 | 0);
                    $426 = HEAP32[$425 >> 2] | 0;
                    $427 = $426 & 255;
                    $428 = ((($10)) + 3948 | 0);
                    $429 = HEAP32[$428 >> 2] | 0;
                    $430 = (($429) + ($20) | 0);
                    HEAP8[$430 >> 0] = $427;
                    $431 = ((($10)) + 92 | 0);
                    $432 = ((($10)) + 3952 | 0);
                    $433 = HEAP32[$428 >> 2] | 0;
                    $434 = (($433) + ($20) | 0);
                    $435 = HEAP8[$434 >> 0] | 0;
                    $436 = $435 << 24 >> 24;
                    $437 = HEAP32[$431 >> 2] | 0;
                    $438 = ((($437)) + 168 | 0);
                    $439 = HEAP32[$438 >> 2] | 0;
                    $440 = (($439) + ($436)) | 0;
                    $441 = ($440 | 0) < (51);
                    $$606 = $441 ? $440 : 51;
                    $442 = ($440 | 0) > (0);
                    $443 = $442 ? $$606 : 0;
                    $444 = (10899 + ($443) | 0);
                    $445 = HEAP8[$444 >> 0] | 0;
                    $446 = HEAP32[$432 >> 2] | 0;
                    $447 = (($446) + ($20 << 1) | 0);
                    HEAP8[$447 >> 0] = $445;
                    $448 = HEAP32[$428 >> 2] | 0;
                    $449 = (($448) + ($20) | 0);
                    $450 = HEAP8[$449 >> 0] | 0;
                    $451 = $450 << 24 >> 24;
                    $452 = HEAP32[$431 >> 2] | 0;
                    $453 = ((($452)) + 172 | 0);
                    $454 = HEAP32[$453 >> 2] | 0;
                    $455 = (($454) + ($451)) | 0;
                    $456 = ($455 | 0) < (51);
                    $$606$1 = $456 ? $455 : 51;
                    $457 = ($455 | 0) > (0);
                    $458 = $457 ? $$606$1 : 0;
                    $459 = (10899 + ($458) | 0);
                    $460 = HEAP8[$459 >> 0] | 0;
                    $461 = HEAP32[$432 >> 2] | 0;
                    $462 = (((($461) + ($20 << 1) | 0)) + 1 | 0);
                    HEAP8[$462 >> 0] = $460;
                }
            } else {
                if ($175) {
                    label = 37;
                } else {
                    $$off = (($174) + -8) << 16 >> 16;
                    $176 = ($$off & 65535) < (25);
                    if (!($176)) {
                        $177 = ((($10)) + 3940 | 0);
                        $178 = HEAP32[$177 >> 2] | 0;
                        $179 = (($178) + ($20) | 0);
                        $180 = HEAP8[$179 >> 0] | 0;
                        $181 = ($180 << 24 >> 24) == (0);
                        if ($181) {
                            label = 37;
                            break;
                        }
                    }
                    switch ($174 << 16 >> 16) {
                        case 1: case 4: {
                            label = 37;
                            break L54;
                            break;
                        }
                        default: {
                        }
                    }
                    $182 = $170 & 15;
                    $183 = ($182 << 24 >> 24) == (0);
                    if ($183) {
                        label = 37;
                    } else {
                        $184 = ((($0)) + 241928 | 0);
                        $185 = HEAP32[$184 >> 2] | 0;
                        $186 = ((($185)) + 184 | 0);
                        $187 = HEAP8[$186 >> 0] | 0;
                        $188 = ($187 << 24 >> 24) == (0);
                        if ($188) {
                            label = 37;
                        } else {
                            $189 = HEAP32[$9 >> 2] | 0;
                            $190 = ((($189)) + 3944 | 0);
                            $191 = HEAP32[$190 >> 2] | 0;
                            $192 = (($191) + ($20) | 0);
                            $193 = (__ZN7WelsDec30ParseTransformSize8x8FlagCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERb($0, $1, $192) | 0);
                            $194 = ($193 | 0) == (0);
                            if ($194) {
                                label = 37;
                            } else {
                                $$42 = $193;
                                STACKTOP = sp; return ($$42 | 0);
                            }
                        }
                    }
                }
            }
        } while (0);
        L66: do {
            if ((label | 0) == 37) {
                $195 = ((($10)) + 3988 | 0);
                $196 = HEAP32[$195 >> 2] | 0;
                $197 = (($196) + (($20 * 768) | 0) | 0);
                _memset(($197 | 0), 0, 768) | 0;
                $198 = (__ZN7WelsDec17ParseDeltaQpCabacEPNS_21TagWelsDecoderContextERi($0, $6) | 0);
                $199 = ($198 | 0) == (0);
                L68: do {
                    if ($199) {
                        $200 = HEAP32[$6 >> 2] | 0;
                        $$off579 = (($200) + 26) | 0;
                        $201 = ($$off579 >>> 0) > (51);
                        if ($201) {
                            $$42 = 1027;
                            STACKTOP = sp; return ($$42 | 0);
                        }
                        $202 = ((($10)) + 3868 | 0);
                        $203 = HEAP32[$202 >> 2] | 0;
                        $204 = (($200) + 52) | 0;
                        $205 = (($204) + ($203)) | 0;
                        $206 = (($205 | 0) % 52) & -1;
                        $207 = $206 & 255;
                        $208 = ((($10)) + 3948 | 0);
                        $209 = HEAP32[$208 >> 2] | 0;
                        $210 = (($209) + ($20) | 0);
                        HEAP8[$210 >> 0] = $207;
                        $211 = HEAP32[$208 >> 2] | 0;
                        $212 = (($211) + ($20) | 0);
                        $213 = HEAP8[$212 >> 0] | 0;
                        $214 = $213 << 24 >> 24;
                        HEAP32[$202 >> 2] = $214;
                        $215 = ((($10)) + 92 | 0);
                        $216 = ((($10)) + 3952 | 0);
                        $217 = HEAP32[$215 >> 2] | 0;
                        $218 = ((($217)) + 168 | 0);
                        $219 = HEAP32[$218 >> 2] | 0;
                        $220 = (($219) + ($214)) | 0;
                        $221 = ($220 | 0) < (51);
                        $$599 = $221 ? $220 : 51;
                        $222 = ($220 | 0) > (0);
                        $223 = $222 ? $$599 : 0;
                        $224 = (10899 + ($223) | 0);
                        $225 = HEAP8[$224 >> 0] | 0;
                        $226 = HEAP32[$216 >> 2] | 0;
                        $227 = (($226) + ($20 << 1) | 0);
                        HEAP8[$227 >> 0] = $225;
                        $228 = HEAP32[$202 >> 2] | 0;
                        $229 = HEAP32[$215 >> 2] | 0;
                        $230 = ((($229)) + 172 | 0);
                        $231 = HEAP32[$230 >> 2] | 0;
                        $232 = (($231) + ($228)) | 0;
                        $233 = ($232 | 0) < (51);
                        $$599$1 = $233 ? $232 : 51;
                        $234 = ($232 | 0) > (0);
                        $235 = $234 ? $$599$1 : 0;
                        $236 = (10899 + ($235) | 0);
                        $237 = HEAP8[$236 >> 0] | 0;
                        $238 = HEAP32[$216 >> 2] | 0;
                        $239 = (((($238) + ($20 << 1) | 0)) + 1 | 0);
                        HEAP8[$239 >> 0] = $237;
                        $240 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                        $241 = (($240) + ($20 << 1) | 0);
                        $242 = HEAP16[$241 >> 1] | 0;
                        $243 = ($242 << 16 >> 16) == (2);
                        do {
                            if ($243) {
                                $244 = HEAP32[$195 >> 2] | 0;
                                $245 = (($244) + (($20 * 768) | 0) | 0);
                                $246 = HEAP32[$208 >> 2] | 0;
                                $247 = (($246) + ($20) | 0);
                                $248 = HEAP8[$247 >> 0] | 0;
                                $249 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 0, 16, 15482, 1, $245, $248, $0) | 0);
                                $250 = ($249 | 0) == (0);
                                if (!($250)) {
                                    $$39 = $249;
                                    break L68;
                                }
                                $251 = ($$1546 | 0) == (0);
                                if ($251) {
                                    $281 = HEAP32[$132 >> 2] | 0;
                                    $282 = (($281) + (($20 * 24) | 0) | 0);
                                    HEAP8[$282 >> 0] = 0 & 255; HEAP8[$282 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$282 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$282 + 3 >> 0] = 0 >> 24;
                                    $283 = HEAP32[$132 >> 2] | 0;
                                    $284 = (((($283) + (($20 * 24) | 0) | 0)) + 4 | 0);
                                    HEAP8[$284 >> 0] = 0 & 255; HEAP8[$284 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$284 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$284 + 3 >> 0] = 0 >> 24;
                                    $285 = HEAP32[$132 >> 2] | 0;
                                    $286 = (((($285) + (($20 * 24) | 0) | 0)) + 8 | 0);
                                    HEAP8[$286 >> 0] = 0 & 255; HEAP8[$286 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$286 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$286 + 3 >> 0] = 0 >> 24;
                                    $$sink33$sink = 0;
                                    break;
                                }
                                $252 = ($15 >>> 0) > (1);
                                $253 = $252 ? $15 : 1;
                                $254 = (($18) + 1) | 0;
                                $255 = (($254) - ($253)) | 0;
                                $256 = (26970 + ($253) | 0);
                                $$1541640 = 0;
                                while (1) {
                                    $259 = HEAP32[$195 >> 2] | 0;
                                    $260 = $$1541640 << 4;
                                    $261 = ((($259) + (($20 * 768) | 0) | 0) + ($260 << 1) | 0);
                                    $262 = HEAP32[$208 >> 2] | 0;
                                    $263 = (($262) + ($20) | 0);
                                    $264 = HEAP8[$263 >> 0] | 0;
                                    $265 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, $$1541640, $255, $256, 2, $261, $264, $0) | 0);
                                    $266 = ($265 | 0) == (0);
                                    if (!($266)) {
                                        $$39 = $265;
                                        break L68;
                                    }
                                    $257 = (($$1541640) + 1) | 0;
                                    $258 = ($$1541640 | 0) < (15);
                                    if ($258) {
                                        $$1541640 = $257;
                                    } else {
                                        break;
                                    }
                                }
                                $267 = ((($25)) + 9 | 0);
                                $268 = HEAPU8[$267 >> 0] | (HEAPU8[$267 + 1 >> 0] << 8) | (HEAPU8[$267 + 2 >> 0] << 16) | (HEAPU8[$267 + 3 >> 0] << 24);
                                $269 = HEAP32[$132 >> 2] | 0;
                                $270 = (($269) + (($20 * 24) | 0) | 0);
                                HEAP8[$270 >> 0] = $268 & 255; HEAP8[$270 + 1 >> 0] = ($268 >> 8) & 255; HEAP8[$270 + 2 >> 0] = ($268 >> 16) & 255; HEAP8[$270 + 3 >> 0] = $268 >> 24;
                                $271 = ((($25)) + 17 | 0);
                                $272 = HEAPU8[$271 >> 0] | (HEAPU8[$271 + 1 >> 0] << 8) | (HEAPU8[$271 + 2 >> 0] << 16) | (HEAPU8[$271 + 3 >> 0] << 24);
                                $273 = HEAP32[$132 >> 2] | 0;
                                $274 = (((($273) + (($20 * 24) | 0) | 0)) + 4 | 0);
                                HEAP8[$274 >> 0] = $272 & 255; HEAP8[$274 + 1 >> 0] = ($272 >> 8) & 255; HEAP8[$274 + 2 >> 0] = ($272 >> 16) & 255; HEAP8[$274 + 3 >> 0] = $272 >> 24;
                                $275 = ((($25)) + 25 | 0);
                                $276 = HEAPU8[$275 >> 0] | (HEAPU8[$275 + 1 >> 0] << 8) | (HEAPU8[$275 + 2 >> 0] << 16) | (HEAPU8[$275 + 3 >> 0] << 24);
                                $277 = HEAP32[$132 >> 2] | 0;
                                $278 = (((($277) + (($20 * 24) | 0) | 0)) + 8 | 0);
                                HEAP8[$278 >> 0] = $276 & 255; HEAP8[$278 + 1 >> 0] = ($276 >> 8) & 255; HEAP8[$278 + 2 >> 0] = ($276 >> 16) & 255; HEAP8[$278 + 3 >> 0] = $276 >> 24;
                                $279 = ((($25)) + 33 | 0);
                                $280 = HEAPU8[$279 >> 0] | (HEAPU8[$279 + 1 >> 0] << 8) | (HEAPU8[$279 + 2 >> 0] << 16) | (HEAPU8[$279 + 3 >> 0] << 24);
                                $$sink33$sink = $280;
                            } else {
                                $287 = HEAP32[$9 >> 2] | 0;
                                $288 = ((($287)) + 3944 | 0);
                                $289 = HEAP32[$288 >> 2] | 0;
                                $290 = (($289) + ($20) | 0);
                                $291 = HEAP8[$290 >> 0] | 0;
                                $292 = ($291 << 24 >> 24) == (0);
                                if ($292) {
                                    $316 = $242 & 519;
                                    $317 = ($316 << 16 >> 16) != (0);
                                    $318 = $317 ? 11 : 12;
                                    $319 = (1 - ($15)) | 0;
                                    $320 = (($319) + ($18)) | 0;
                                    $321 = (26970 + ($15) | 0);
                                    $$1575643 = 0;
                                    while (1) {
                                        $322 = 1 << $$1575643;
                                        $323 = $322 & $$1546;
                                        $324 = ($323 | 0) == (0);
                                        $325 = $$1575643 << 2;
                                        if ($324) {
                                            $343 = (15431 + ($325) | 0);
                                            $344 = HEAP8[$343 >> 0] | 0;
                                            $345 = $344 & 255;
                                            $346 = (($25) + ($345) | 0);
                                            HEAP8[$346 >> 0] = 0 & 255; HEAP8[$346 + 1 >> 0] = 0 >> 8;
                                            $347 = $325 | 2;
                                            $348 = (15431 + ($347) | 0);
                                            $349 = HEAP8[$348 >> 0] | 0;
                                            $350 = $349 & 255;
                                            $351 = (($25) + ($350) | 0);
                                            HEAP8[$351 >> 0] = 0 & 255; HEAP8[$351 + 1 >> 0] = 0 >> 8;
                                        } else {
                                            $326 = HEAP32[$195 >> 2] | 0;
                                            $327 = $$1575643 << 6;
                                            $328 = ((($326) + (($20 * 768) | 0) | 0) + ($327 << 1) | 0);
                                            $329 = HEAP32[$208 >> 2] | 0;
                                            $330 = (($329) + ($20) | 0);
                                            $331 = HEAP8[$330 >> 0] | 0;
                                            $332 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, $325, $320, $321, $318, $328, $331, $0) | 0);
                                            $333 = ($332 | 0) == (0);
                                            if (!($333)) {
                                                $$39 = $332;
                                                break L68;
                                            }
                                            $334 = $325 | 1;
                                            $335 = HEAP32[$195 >> 2] | 0;
                                            $336 = $334 << 4;
                                            $337 = ((($335) + (($20 * 768) | 0) | 0) + ($336 << 1) | 0);
                                            $338 = HEAP32[$208 >> 2] | 0;
                                            $339 = (($338) + ($20) | 0);
                                            $340 = HEAP8[$339 >> 0] | 0;
                                            $341 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, $334, $320, $321, $318, $337, $340, $0) | 0);
                                            $342 = ($341 | 0) == (0);
                                            if (!($342)) {
                                                $$39 = $341;
                                                break L68;
                                            }
                                            $535 = (($334) + 1) | 0;
                                            $536 = HEAP32[$195 >> 2] | 0;
                                            $537 = $535 << 4;
                                            $538 = ((($536) + (($20 * 768) | 0) | 0) + ($537 << 1) | 0);
                                            $539 = HEAP32[$208 >> 2] | 0;
                                            $540 = (($539) + ($20) | 0);
                                            $541 = HEAP8[$540 >> 0] | 0;
                                            $542 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, $535, $320, $321, $318, $538, $541, $0) | 0);
                                            $543 = ($542 | 0) == (0);
                                            if (!($543)) {
                                                $$39 = $542;
                                                break L68;
                                            }
                                            $544 = $325 | 3;
                                            $545 = HEAP32[$195 >> 2] | 0;
                                            $546 = $544 << 4;
                                            $547 = ((($545) + (($20 * 768) | 0) | 0) + ($546 << 1) | 0);
                                            $548 = HEAP32[$208 >> 2] | 0;
                                            $549 = (($548) + ($20) | 0);
                                            $550 = HEAP8[$549 >> 0] | 0;
                                            $551 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, $544, $320, $321, $318, $547, $550, $0) | 0);
                                            $552 = ($551 | 0) == (0);
                                            if (!($552)) {
                                                $$39 = $551;
                                                break L68;
                                            }
                                        }
                                        $352 = (($$1575643) + 1) | 0;
                                        $353 = ($$1575643 | 0) < (3);
                                        if ($353) {
                                            $$1575643 = $352;
                                        } else {
                                            break;
                                        }
                                    }
                                    $354 = ((($25)) + 9 | 0);
                                    $355 = HEAPU8[$354 >> 0] | (HEAPU8[$354 + 1 >> 0] << 8) | (HEAPU8[$354 + 2 >> 0] << 16) | (HEAPU8[$354 + 3 >> 0] << 24);
                                    $356 = HEAP32[$132 >> 2] | 0;
                                    $357 = (($356) + (($20 * 24) | 0) | 0);
                                    HEAP8[$357 >> 0] = $355 & 255; HEAP8[$357 + 1 >> 0] = ($355 >> 8) & 255; HEAP8[$357 + 2 >> 0] = ($355 >> 16) & 255; HEAP8[$357 + 3 >> 0] = $355 >> 24;
                                    $358 = ((($25)) + 17 | 0);
                                    $359 = HEAPU8[$358 >> 0] | (HEAPU8[$358 + 1 >> 0] << 8) | (HEAPU8[$358 + 2 >> 0] << 16) | (HEAPU8[$358 + 3 >> 0] << 24);
                                    $360 = HEAP32[$132 >> 2] | 0;
                                    $361 = (((($360) + (($20 * 24) | 0) | 0)) + 4 | 0);
                                    HEAP8[$361 >> 0] = $359 & 255; HEAP8[$361 + 1 >> 0] = ($359 >> 8) & 255; HEAP8[$361 + 2 >> 0] = ($359 >> 16) & 255; HEAP8[$361 + 3 >> 0] = $359 >> 24;
                                    $362 = ((($25)) + 25 | 0);
                                    $363 = HEAPU8[$362 >> 0] | (HEAPU8[$362 + 1 >> 0] << 8) | (HEAPU8[$362 + 2 >> 0] << 16) | (HEAPU8[$362 + 3 >> 0] << 24);
                                    $364 = HEAP32[$132 >> 2] | 0;
                                    $365 = (((($364) + (($20 * 24) | 0) | 0)) + 8 | 0);
                                    HEAP8[$365 >> 0] = $363 & 255; HEAP8[$365 + 1 >> 0] = ($363 >> 8) & 255; HEAP8[$365 + 2 >> 0] = ($363 >> 16) & 255; HEAP8[$365 + 3 >> 0] = $363 >> 24;
                                    $366 = ((($25)) + 33 | 0);
                                    $367 = HEAPU8[$366 >> 0] | (HEAPU8[$366 + 1 >> 0] << 8) | (HEAPU8[$366 + 2 >> 0] << 16) | (HEAPU8[$366 + 3 >> 0] << 24);
                                    $$sink33$sink = $367;
                                    break;
                                }
                                $293 = (1 - ($15)) | 0;
                                $294 = (($293) + ($18)) | 0;
                                $295 = (26986 + ($15) | 0);
                                $296 = $$1546 & 1;
                                $297 = ($296 | 0) == (0);
                                if ($297) {
                                    $308 = HEAP8[15431] | 0;
                                    $309 = $308 & 255;
                                    $310 = (($25) + ($309) | 0);
                                    HEAP8[$310 >> 0] = 0 & 255; HEAP8[$310 + 1 >> 0] = 0 >> 8;
                                    $311 = HEAP8[(15433) >> 0] | 0;
                                    $312 = $311 & 255;
                                    $313 = (($25) + ($312) | 0);
                                    HEAP8[$313 >> 0] = 0 & 255; HEAP8[$313 + 1 >> 0] = 0 >> 8;
                                } else {
                                    $298 = $242 & 519;
                                    $299 = ($298 << 16 >> 16) != (0);
                                    $300 = $299 ? 17 : 18;
                                    $301 = HEAP32[$195 >> 2] | 0;
                                    $302 = (($301) + (($20 * 768) | 0) | 0);
                                    $303 = HEAP32[$208 >> 2] | 0;
                                    $304 = (($303) + ($20) | 0);
                                    $305 = HEAP8[$304 >> 0] | 0;
                                    $306 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 0, $294, $295, $300, $302, $305, $0) | 0);
                                    $307 = ($306 | 0) == (0);
                                    if (!($307)) {
                                        $$39 = $306;
                                        break L68;
                                    }
                                }
                                $314 = $$1546 & 2;
                                $315 = ($314 | 0) == (0);
                                if ($315) {
                                    $566 = HEAP8[(15435) >> 0] | 0;
                                    $567 = $566 & 255;
                                    $568 = (($25) + ($567) | 0);
                                    HEAP8[$568 >> 0] = 0 & 255; HEAP8[$568 + 1 >> 0] = 0 >> 8;
                                    $569 = HEAP8[(15437) >> 0] | 0;
                                    $570 = $569 & 255;
                                    $571 = (($25) + ($570) | 0);
                                    HEAP8[$571 >> 0] = 0 & 255; HEAP8[$571 + 1 >> 0] = 0 >> 8;
                                } else {
                                    $553 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                                    $554 = (($553) + ($20 << 1) | 0);
                                    $555 = HEAP16[$554 >> 1] | 0;
                                    $556 = $555 & 519;
                                    $557 = ($556 << 16 >> 16) != (0);
                                    $558 = $557 ? 17 : 18;
                                    $559 = HEAP32[$195 >> 2] | 0;
                                    $560 = (((($559) + (($20 * 768) | 0) | 0)) + 128 | 0);
                                    $561 = HEAP32[$208 >> 2] | 0;
                                    $562 = (($561) + ($20) | 0);
                                    $563 = HEAP8[$562 >> 0] | 0;
                                    $564 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 4, $294, $295, $558, $560, $563, $0) | 0);
                                    $565 = ($564 | 0) == (0);
                                    if (!($565)) {
                                        $$39 = $564;
                                        break L68;
                                    }
                                }
                                $572 = $$1546 & 4;
                                $573 = ($572 | 0) == (0);
                                if ($573) {
                                    $587 = HEAP8[(15439) >> 0] | 0;
                                    $588 = $587 & 255;
                                    $589 = (($25) + ($588) | 0);
                                    HEAP8[$589 >> 0] = 0 & 255; HEAP8[$589 + 1 >> 0] = 0 >> 8;
                                    $590 = HEAP8[(15441) >> 0] | 0;
                                    $591 = $590 & 255;
                                    $592 = (($25) + ($591) | 0);
                                    HEAP8[$592 >> 0] = 0 & 255; HEAP8[$592 + 1 >> 0] = 0 >> 8;
                                } else {
                                    $574 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                                    $575 = (($574) + ($20 << 1) | 0);
                                    $576 = HEAP16[$575 >> 1] | 0;
                                    $577 = $576 & 519;
                                    $578 = ($577 << 16 >> 16) != (0);
                                    $579 = $578 ? 17 : 18;
                                    $580 = HEAP32[$195 >> 2] | 0;
                                    $581 = (((($580) + (($20 * 768) | 0) | 0)) + 256 | 0);
                                    $582 = HEAP32[$208 >> 2] | 0;
                                    $583 = (($582) + ($20) | 0);
                                    $584 = HEAP8[$583 >> 0] | 0;
                                    $585 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 8, $294, $295, $579, $581, $584, $0) | 0);
                                    $586 = ($585 | 0) == (0);
                                    if (!($586)) {
                                        $$39 = $585;
                                        break L68;
                                    }
                                }
                                $593 = $$1546 & 8;
                                $594 = ($593 | 0) == (0);
                                if ($594) {
                                    $608 = HEAP8[(15443) >> 0] | 0;
                                    $609 = $608 & 255;
                                    $610 = (($25) + ($609) | 0);
                                    HEAP8[$610 >> 0] = 0 & 255; HEAP8[$610 + 1 >> 0] = 0 >> 8;
                                    $611 = HEAP8[(15445) >> 0] | 0;
                                    $612 = $611 & 255;
                                    $613 = (($25) + ($612) | 0);
                                    HEAP8[$613 >> 0] = 0 & 255; HEAP8[$613 + 1 >> 0] = 0 >> 8;
                                } else {
                                    $595 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                                    $596 = (($595) + ($20 << 1) | 0);
                                    $597 = HEAP16[$596 >> 1] | 0;
                                    $598 = $597 & 519;
                                    $599 = ($598 << 16 >> 16) != (0);
                                    $600 = $599 ? 17 : 18;
                                    $601 = HEAP32[$195 >> 2] | 0;
                                    $602 = (((($601) + (($20 * 768) | 0) | 0)) + 384 | 0);
                                    $603 = HEAP32[$208 >> 2] | 0;
                                    $604 = (($603) + ($20) | 0);
                                    $605 = HEAP8[$604 >> 0] | 0;
                                    $606 = (__ZN7WelsDec26ParseResidualBlockCabac8x8EPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 12, $294, $295, $600, $602, $605, $0) | 0);
                                    $607 = ($606 | 0) == (0);
                                    if (!($607)) {
                                        $$39 = $606;
                                        break L68;
                                    }
                                }
                                $614 = ((($25)) + 9 | 0);
                                $615 = HEAPU8[$614 >> 0] | (HEAPU8[$614 + 1 >> 0] << 8) | (HEAPU8[$614 + 2 >> 0] << 16) | (HEAPU8[$614 + 3 >> 0] << 24);
                                $616 = HEAP32[$132 >> 2] | 0;
                                $617 = (($616) + (($20 * 24) | 0) | 0);
                                HEAP8[$617 >> 0] = $615 & 255; HEAP8[$617 + 1 >> 0] = ($615 >> 8) & 255; HEAP8[$617 + 2 >> 0] = ($615 >> 16) & 255; HEAP8[$617 + 3 >> 0] = $615 >> 24;
                                $618 = ((($25)) + 17 | 0);
                                $619 = HEAPU8[$618 >> 0] | (HEAPU8[$618 + 1 >> 0] << 8) | (HEAPU8[$618 + 2 >> 0] << 16) | (HEAPU8[$618 + 3 >> 0] << 24);
                                $620 = HEAP32[$132 >> 2] | 0;
                                $621 = (((($620) + (($20 * 24) | 0) | 0)) + 4 | 0);
                                HEAP8[$621 >> 0] = $619 & 255; HEAP8[$621 + 1 >> 0] = ($619 >> 8) & 255; HEAP8[$621 + 2 >> 0] = ($619 >> 16) & 255; HEAP8[$621 + 3 >> 0] = $619 >> 24;
                                $622 = ((($25)) + 25 | 0);
                                $623 = HEAPU8[$622 >> 0] | (HEAPU8[$622 + 1 >> 0] << 8) | (HEAPU8[$622 + 2 >> 0] << 16) | (HEAPU8[$622 + 3 >> 0] << 24);
                                $624 = HEAP32[$132 >> 2] | 0;
                                $625 = (((($624) + (($20 * 24) | 0) | 0)) + 8 | 0);
                                HEAP8[$625 >> 0] = $623 & 255; HEAP8[$625 + 1 >> 0] = ($623 >> 8) & 255; HEAP8[$625 + 2 >> 0] = ($623 >> 16) & 255; HEAP8[$625 + 3 >> 0] = $623 >> 24;
                                $626 = ((($25)) + 33 | 0);
                                $627 = HEAPU8[$626 >> 0] | (HEAPU8[$626 + 1 >> 0] << 8) | (HEAPU8[$626 + 2 >> 0] << 16) | (HEAPU8[$626 + 3 >> 0] << 24);
                                $$sink33$sink = $627;
                            }
                        } while (0);
                        $368 = HEAP32[$132 >> 2] | 0;
                        $369 = (((($368) + (($20 * 24) | 0) | 0)) + 12 | 0);
                        HEAP8[$369 >> 0] = $$sink33$sink & 255; HEAP8[$369 + 1 >> 0] = ($$sink33$sink >> 8) & 255; HEAP8[$369 + 2 >> 0] = ($$sink33$sink >> 16) & 255; HEAP8[$369 + 3 >> 0] = $$sink33$sink >> 24;
                        $370 = ($$1549 | 0) == (2);
                        $371 = (($$1549) + -1) | 0;
                        $372 = ($371 >>> 0) < (2);
                        if ($372) {
                            $373 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                            $374 = (($373) + ($20 << 1) | 0);
                            $375 = HEAP16[$374 >> 1] | 0;
                            $376 = $375 & 519;
                            $377 = ($376 << 16 >> 16) == (0);
                            $$0537 = $377 ? 13 : 7;
                            $378 = HEAP32[$195 >> 2] | 0;
                            $379 = (((($378) + (($20 * 768) | 0) | 0)) + 512 | 0);
                            $380 = HEAP32[$216 >> 2] | 0;
                            $381 = (($380) + ($20 << 1) | 0);
                            $382 = HEAP8[$381 >> 0] | 0;
                            $383 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 16, 4, 15498, $$0537, $379, $382, $0) | 0);
                            $384 = ($383 | 0) == (0);
                            if (!($384)) {
                                $$39 = $383;
                                break;
                            }
                            $385 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                            $386 = (($385) + ($20 << 1) | 0);
                            $387 = HEAP16[$386 >> 1] | 0;
                            $388 = $387 & 519;
                            $389 = ($388 << 16 >> 16) == (0);
                            $$0537$1 = $389 ? 14 : 8;
                            $390 = HEAP32[$195 >> 2] | 0;
                            $391 = (((($390) + (($20 * 768) | 0) | 0)) + 640 | 0);
                            $392 = HEAP32[$216 >> 2] | 0;
                            $393 = (((($392) + ($20 << 1) | 0)) + 1 | 0);
                            $394 = HEAP8[$393 >> 0] | 0;
                            $395 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 20, 4, 15498, $$0537$1, $391, $394, $0) | 0);
                            $396 = ($395 | 0) == (0);
                            if (!($396)) {
                                $$39 = $395;
                                break;
                            }
                        }
                        if ($370) {
                            $397 = ($15 >>> 0) > (1);
                            $398 = $397 ? $15 : 1;
                            $399 = (($18) + 1) | 0;
                            $400 = (($399) - ($398)) | 0;
                            $401 = (26970 + ($398) | 0);
                            $402 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                            $403 = (($402) + ($20 << 1) | 0);
                            $404 = HEAP16[$403 >> 1] | 0;
                            $405 = $404 & 519;
                            $406 = ($405 << 16 >> 16) == (0);
                            $$1538 = $406 ? 15 : 9;
                            $407 = HEAP32[$195 >> 2] | 0;
                            $408 = (((($407) + (($20 * 768) | 0) | 0)) + 512 | 0);
                            $409 = HEAP32[$216 >> 2] | 0;
                            $410 = (($409) + ($20 << 1) | 0);
                            $411 = HEAP8[$410 >> 0] | 0;
                            $412 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 16, $400, $401, $$1538, $408, $411, $0) | 0);
                            $413 = ($412 | 0) == (0);
                            if (!($413)) {
                                $$39 = $412;
                                break;
                            }
                            $414 = HEAP32[$195 >> 2] | 0;
                            $415 = (((($414) + (($20 * 768) | 0) | 0)) + 544 | 0);
                            $416 = HEAP32[$216 >> 2] | 0;
                            $417 = (($416) + ($20 << 1) | 0);
                            $418 = HEAP8[$417 >> 0] | 0;
                            $419 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 17, $400, $401, $$1538, $415, $418, $0) | 0);
                            $420 = ($419 | 0) == (0);
                            if (!($420)) {
                                $$39 = $419;
                                break;
                            }
                            $472 = HEAP32[$195 >> 2] | 0;
                            $473 = (((($472) + (($20 * 768) | 0) | 0)) + 576 | 0);
                            $474 = HEAP32[$216 >> 2] | 0;
                            $475 = (($474) + ($20 << 1) | 0);
                            $476 = HEAP8[$475 >> 0] | 0;
                            $477 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 18, $400, $401, $$1538, $473, $476, $0) | 0);
                            $478 = ($477 | 0) == (0);
                            if (!($478)) {
                                $$39 = $477;
                                break;
                            }
                            $479 = HEAP32[$195 >> 2] | 0;
                            $480 = (((($479) + (($20 * 768) | 0) | 0)) + 608 | 0);
                            $481 = HEAP32[$216 >> 2] | 0;
                            $482 = (($481) + ($20 << 1) | 0);
                            $483 = HEAP8[$482 >> 0] | 0;
                            $484 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 19, $400, $401, $$1538, $480, $483, $0) | 0);
                            $485 = ($484 | 0) == (0);
                            if (!($485)) {
                                $$39 = $484;
                                break;
                            }
                            $486 = HEAP32[$$pre$phiZ2D >> 2] | 0;
                            $487 = (($486) + ($20 << 1) | 0);
                            $488 = HEAP16[$487 >> 1] | 0;
                            $489 = $488 & 519;
                            $490 = ($489 << 16 >> 16) == (0);
                            $$1538$1 = $490 ? 16 : 10;
                            $491 = HEAP32[$195 >> 2] | 0;
                            $492 = (((($491) + (($20 * 768) | 0) | 0)) + 640 | 0);
                            $493 = HEAP32[$216 >> 2] | 0;
                            $494 = (((($493) + ($20 << 1) | 0)) + 1 | 0);
                            $495 = HEAP8[$494 >> 0] | 0;
                            $496 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 20, $400, $401, $$1538$1, $492, $495, $0) | 0);
                            $497 = ($496 | 0) == (0);
                            if (!($497)) {
                                $$39 = $496;
                                break;
                            }
                            $498 = HEAP32[$195 >> 2] | 0;
                            $499 = (((($498) + (($20 * 768) | 0) | 0)) + 672 | 0);
                            $500 = HEAP32[$216 >> 2] | 0;
                            $501 = (((($500) + ($20 << 1) | 0)) + 1 | 0);
                            $502 = HEAP8[$501 >> 0] | 0;
                            $503 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 21, $400, $401, $$1538$1, $499, $502, $0) | 0);
                            $504 = ($503 | 0) == (0);
                            if (!($504)) {
                                $$39 = $503;
                                break;
                            }
                            $505 = HEAP32[$195 >> 2] | 0;
                            $506 = (((($505) + (($20 * 768) | 0) | 0)) + 704 | 0);
                            $507 = HEAP32[$216 >> 2] | 0;
                            $508 = (((($507) + ($20 << 1) | 0)) + 1 | 0);
                            $509 = HEAP8[$508 >> 0] | 0;
                            $510 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 22, $400, $401, $$1538$1, $506, $509, $0) | 0);
                            $511 = ($510 | 0) == (0);
                            if (!($511)) {
                                $$39 = $510;
                                break;
                            }
                            $512 = HEAP32[$195 >> 2] | 0;
                            $513 = (((($512) + (($20 * 768) | 0) | 0)) + 736 | 0);
                            $514 = HEAP32[$216 >> 2] | 0;
                            $515 = (((($514) + ($20 << 1) | 0)) + 1 | 0);
                            $516 = HEAP8[$515 >> 0] | 0;
                            $517 = (__ZN7WelsDec23ParseResidualBlockCabacEPNS_16TagNeighborAvailEPhPN10WelsCommon15TagBitStringAuxEiiPKhiPshPNS_21TagWelsDecoderContextE($1, $25, $12, 23, $400, $401, $$1538$1, $513, $516, $0) | 0);
                            $518 = ($517 | 0) == (0);
                            if (!($518)) {
                                $$39 = $517;
                                break;
                            }
                            $519 = ((($25)) + 14 | 0);
                            $520 = HEAPU8[$519 >> 0] | (HEAPU8[$519 + 1 >> 0] << 8);
                            $521 = HEAP32[$132 >> 2] | 0;
                            $522 = (((($521) + (($20 * 24) | 0) | 0)) + 16 | 0);
                            HEAP8[$522 >> 0] = $520 & 255; HEAP8[$522 + 1 >> 0] = $520 >> 8;
                            $523 = ((($25)) + 22 | 0);
                            $524 = HEAPU8[$523 >> 0] | (HEAPU8[$523 + 1 >> 0] << 8);
                            $525 = HEAP32[$132 >> 2] | 0;
                            $526 = (((($525) + (($20 * 24) | 0) | 0)) + 20 | 0);
                            HEAP8[$526 >> 0] = $524 & 255; HEAP8[$526 + 1 >> 0] = $524 >> 8;
                            $527 = ((($25)) + 38 | 0);
                            $528 = HEAPU8[$527 >> 0] | (HEAPU8[$527 + 1 >> 0] << 8);
                            $529 = HEAP32[$132 >> 2] | 0;
                            $530 = (((($529) + (($20 * 24) | 0) | 0)) + 18 | 0);
                            HEAP8[$530 >> 0] = $528 & 255; HEAP8[$530 + 1 >> 0] = $528 >> 8;
                            $531 = ((($25)) + 46 | 0);
                            $532 = HEAPU8[$531 >> 0] | (HEAPU8[$531 + 1 >> 0] << 8);
                            $533 = HEAP32[$132 >> 2] | 0;
                            $534 = (((($533) + (($20 * 24) | 0) | 0)) + 22 | 0);
                            HEAP8[$534 >> 0] = $532 & 255; HEAP8[$534 + 1 >> 0] = $532 >> 8;
                        } else {
                            $421 = HEAP32[$132 >> 2] | 0;
                            $422 = (((($421) + (($20 * 24) | 0) | 0)) + 16 | 0);
                            HEAP8[$422 >> 0] = 0 & 255; HEAP8[$422 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$422 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$422 + 3 >> 0] = 0 >> 24;
                            $423 = HEAP32[$132 >> 2] | 0;
                            $424 = (((($423) + (($20 * 24) | 0) | 0)) + 20 | 0);
                            HEAP8[$424 >> 0] = 0 & 255; HEAP8[$424 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$424 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$424 + 3 >> 0] = 0 >> 24;
                        }
                        break L66;
                    } else {
                        $$39 = $198;
                    }
                } while (0);
                $$42 = $$39;
                STACKTOP = sp; return ($$42 | 0);
            }
        } while (0);
        $463 = (__ZN7WelsDec20ParseEndOfSliceCabacEPNS_21TagWelsDecoderContextERj($0, $2) | 0);
        $464 = ($463 | 0) == (0);
        if (!($464)) {
            $$42 = $463;
            STACKTOP = sp; return ($$42 | 0);
        }
        $465 = HEAP32[$2 >> 2] | 0;
        $466 = ($465 | 0) == (0);
        if ($466) {
            $$42 = 0;
            STACKTOP = sp; return ($$42 | 0);
        }
        $467 = ((($0)) + 512232 | 0);
        $468 = HEAP32[$467 >> 2] | 0;
        $469 = HEAP32[$9 >> 2] | 0;
        $470 = ((($469)) + 3900 | 0);
        $471 = HEAP32[$470 >> 2] | 0;
        __ZN7WelsDec25RestoreCabacDecEngineToBSEPNS_19SWelsCabacDecEngineEPN10WelsCommon15TagBitStringAuxE($468, $471);
        $$42 = 0;
        STACKTOP = sp; return ($$42 | 0);
    }
    function __ZN7WelsDec22ParseMBTypePSliceCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailERj($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$12 = 0, $$sink = 0, $$sink$sink = 0, $$sink11 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
        var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
        var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $3 = sp;
        HEAP32[$2 >> 2] = 0;
        $4 = ((($0)) + 512232 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 511337 | 0);
        $7 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $6, $3) | 0);
        $8 = ($7 | 0) == (0);
        if (!($8)) {
            $$12 = $7;
            STACKTOP = sp; return ($$12 | 0);
        }
        $9 = HEAP32[$3 >> 2] | 0;
        $10 = ($9 | 0) == (0);
        do {
            if ($10) {
                $51 = ((($0)) + 511339 | 0);
                $52 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $51, $3) | 0);
                $53 = ($52 | 0) == (0);
                if (!($53)) {
                    $$12 = $52;
                    STACKTOP = sp; return ($$12 | 0);
                }
                $54 = HEAP32[$3 >> 2] | 0;
                $55 = ($54 | 0) == (0);
                if ($55) {
                    $61 = ((($0)) + 511341 | 0);
                    $62 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $61, $3) | 0);
                    $63 = ($62 | 0) == (0);
                    if ($63) {
                        $64 = HEAP32[$3 >> 2] | 0;
                        $65 = ($64 | 0) != (0);
                        $$sink11 = $65 ? 3 : 0;
                        $$sink$sink = $$sink11;
                        break;
                    } else {
                        $$12 = $62;
                        STACKTOP = sp; return ($$12 | 0);
                    }
                } else {
                    $56 = ((($0)) + 511343 | 0);
                    $57 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $56, $3) | 0);
                    $58 = ($57 | 0) == (0);
                    if ($58) {
                        $59 = HEAP32[$3 >> 2] | 0;
                        $60 = ($59 | 0) != (0);
                        $$sink = $60 ? 1 : 2;
                        $$sink$sink = $$sink;
                        break;
                    } else {
                        $$12 = $57;
                        STACKTOP = sp; return ($$12 | 0);
                    }
                }
            } else {
                $11 = ((($0)) + 511343 | 0);
                $12 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $11, $3) | 0);
                $13 = ($12 | 0) == (0);
                if (!($13)) {
                    $$12 = $12;
                    STACKTOP = sp; return ($$12 | 0);
                }
                $14 = HEAP32[$3 >> 2] | 0;
                $15 = ($14 | 0) == (0);
                if ($15) {
                    $$sink$sink = 5;
                } else {
                    $16 = (__ZN7WelsDec20DecodeTerminateCabacEPNS_19SWelsCabacDecEngineERj($5, $3) | 0);
                    $17 = ($16 | 0) == (0);
                    if (!($17)) {
                        $$12 = $16;
                        STACKTOP = sp; return ($$12 | 0);
                    }
                    $18 = HEAP32[$3 >> 2] | 0;
                    $19 = ($18 | 0) == (0);
                    if (!($19)) {
                        HEAP32[$2 >> 2] = 30;
                        $$12 = 0;
                        STACKTOP = sp; return ($$12 | 0);
                    }
                    $20 = ((($0)) + 511345 | 0);
                    $21 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $20, $3) | 0);
                    $22 = ($21 | 0) == (0);
                    if (!($22)) {
                        $$12 = $21;
                        STACKTOP = sp; return ($$12 | 0);
                    }
                    $23 = HEAP32[$3 >> 2] | 0;
                    $24 = ($23 * 12) | 0;
                    $25 = (($24) + 6) | 0;
                    HEAP32[$2 >> 2] = $25;
                    $26 = ((($0)) + 511347 | 0);
                    $27 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $26, $3) | 0);
                    $28 = ($27 | 0) == (0);
                    if (!($28)) {
                        $$12 = $27;
                        STACKTOP = sp; return ($$12 | 0);
                    }
                    $29 = HEAP32[$3 >> 2] | 0;
                    $30 = ($29 | 0) == (0);
                    if (!($30)) {
                        $31 = HEAP32[$2 >> 2] | 0;
                        $32 = (($31) + 4) | 0;
                        HEAP32[$2 >> 2] = $32;
                        $33 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $26, $3) | 0);
                        $34 = ($33 | 0) == (0);
                        if (!($34)) {
                            $$12 = $33;
                            STACKTOP = sp; return ($$12 | 0);
                        }
                        $35 = HEAP32[$3 >> 2] | 0;
                        $36 = ($35 | 0) == (0);
                        if (!($36)) {
                            $37 = HEAP32[$2 >> 2] | 0;
                            $38 = (($37) + 4) | 0;
                            HEAP32[$2 >> 2] = $38;
                        }
                    }
                    $39 = ((($0)) + 511349 | 0);
                    $40 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $39, $3) | 0);
                    $41 = ($40 | 0) == (0);
                    if (!($41)) {
                        $$12 = $40;
                        STACKTOP = sp; return ($$12 | 0);
                    }
                    $42 = HEAP32[$3 >> 2] | 0;
                    $43 = $42 << 1;
                    $44 = HEAP32[$2 >> 2] | 0;
                    $45 = (($44) + ($43)) | 0;
                    HEAP32[$2 >> 2] = $45;
                    $46 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($5, $39, $3) | 0);
                    $47 = ($46 | 0) == (0);
                    if ($47) {
                        $48 = HEAP32[$3 >> 2] | 0;
                        $49 = HEAP32[$2 >> 2] | 0;
                        $50 = (($49) + ($48)) | 0;
                        $$sink$sink = $50;
                        break;
                    } else {
                        $$12 = $46;
                        STACKTOP = sp; return ($$12 | 0);
                    }
                }
            }
        } while (0);
        HEAP32[$2 >> 2] = $$sink$sink;
        $$12 = 0;
        STACKTOP = sp; return ($$12 | 0);
    }
    function __ZN7WelsDec23WelsFillCacheInterCabacEPNS_16TagNeighborAvailEPhPA30_A2_sS5_PA30_aPNS_10TagDqLayerE($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$ = 0, $$0 = 0, $$0162 = 0, $$0164 = 0, $$sink$sink = 0, $$sink12 = 0, $$sink168 = 0, $$sink6 = 0, $$sink7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
        var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
        var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
        var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
        var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
        var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
        var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
        var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
        var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
        var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
        var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
        var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        $6 = ((($5)) + 4040 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        __ZN7WelsDec25WelsFillCacheNonZeroCountEPNS_16TagNeighborAvailEPhPNS_10TagDqLayerE($0, $1, $5);
        $8 = HEAP32[$0 >> 2] | 0;
        $9 = ($8 | 0) == (0);
        if ($9) {
            $$0164 = 0;
        } else {
            $10 = ((($5)) + 4044 | 0);
            $11 = HEAP32[$10 >> 2] | 0;
            $12 = (($7) - ($11)) | 0;
            $$0164 = $12;
        }
        $13 = ((($0)) + 4 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ($14 | 0) == (0);
        $16 = (($7) + -1) | 0;
        $$ = $15 ? 0 : $16;
        $17 = ((($0)) + 12 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = ($18 | 0) == (0);
        if ($19) {
            $$0162 = 0;
        } else {
            $20 = ((($5)) + 4044 | 0);
            $21 = HEAP32[$20 >> 2] | 0;
            $22 = (($16) - ($21)) | 0;
            $$0162 = $22;
        }
        $23 = ((($0)) + 8 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = ($24 | 0) == (0);
        if ($25) {
            $$0 = 0;
        } else {
            $26 = ((($5)) + 4044 | 0);
            $27 = (($7) + 1) | 0;
            $28 = HEAP32[$26 >> 2] | 0;
            $29 = (($27) - ($28)) | 0;
            $$0 = $29;
        }
        if ($15) {
            label = 10;
        } else {
            $30 = ((($0)) + 16 | 0);
            $31 = HEAP32[$30 >> 2] | 0;
            $32 = $31 & 504;
            $33 = ($32 | 0) == (0);
            if ($33) {
                label = 10;
            } else {
                $34 = ((($5)) + 3916 | 0);
                $35 = HEAP32[$34 >> 2] | 0;
                $36 = (((($35) + ($$ << 6) | 0)) + 12 | 0);
                $37 = HEAPU8[$36 >> 0] | (HEAPU8[$36 + 1 >> 0] << 8) | (HEAPU8[$36 + 2 >> 0] << 16) | (HEAPU8[$36 + 3 >> 0] << 24);
                $38 = ((($2)) + 24 | 0);
                HEAP8[$38 >> 0] = $37 & 255; HEAP8[$38 + 1 >> 0] = ($37 >> 8) & 255; HEAP8[$38 + 2 >> 0] = ($37 >> 16) & 255; HEAP8[$38 + 3 >> 0] = $37 >> 24;
                $39 = HEAP32[$34 >> 2] | 0;
                $40 = (((($39) + ($$ << 6) | 0)) + 28 | 0);
                $41 = HEAPU8[$40 >> 0] | (HEAPU8[$40 + 1 >> 0] << 8) | (HEAPU8[$40 + 2 >> 0] << 16) | (HEAPU8[$40 + 3 >> 0] << 24);
                $42 = ((($2)) + 48 | 0);
                HEAP8[$42 >> 0] = $41 & 255; HEAP8[$42 + 1 >> 0] = ($41 >> 8) & 255; HEAP8[$42 + 2 >> 0] = ($41 >> 16) & 255; HEAP8[$42 + 3 >> 0] = $41 >> 24;
                $43 = HEAP32[$34 >> 2] | 0;
                $44 = (((($43) + ($$ << 6) | 0)) + 44 | 0);
                $45 = HEAPU8[$44 >> 0] | (HEAPU8[$44 + 1 >> 0] << 8) | (HEAPU8[$44 + 2 >> 0] << 16) | (HEAPU8[$44 + 3 >> 0] << 24);
                $46 = ((($2)) + 72 | 0);
                HEAP8[$46 >> 0] = $45 & 255; HEAP8[$46 + 1 >> 0] = ($45 >> 8) & 255; HEAP8[$46 + 2 >> 0] = ($45 >> 16) & 255; HEAP8[$46 + 3 >> 0] = $45 >> 24;
                $47 = HEAP32[$34 >> 2] | 0;
                $48 = (((($47) + ($$ << 6) | 0)) + 60 | 0);
                $49 = HEAPU8[$48 >> 0] | (HEAPU8[$48 + 1 >> 0] << 8) | (HEAPU8[$48 + 2 >> 0] << 16) | (HEAPU8[$48 + 3 >> 0] << 24);
                $50 = ((($2)) + 96 | 0);
                HEAP8[$50 >> 0] = $49 & 255; HEAP8[$50 + 1 >> 0] = ($49 >> 8) & 255; HEAP8[$50 + 2 >> 0] = ($49 >> 16) & 255; HEAP8[$50 + 3 >> 0] = $49 >> 24;
                $51 = ((($5)) + 3924 | 0);
                $52 = HEAP32[$51 >> 2] | 0;
                $53 = (((($52) + ($$ << 6) | 0)) + 12 | 0);
                $54 = HEAPU8[$53 >> 0] | (HEAPU8[$53 + 1 >> 0] << 8) | (HEAPU8[$53 + 2 >> 0] << 16) | (HEAPU8[$53 + 3 >> 0] << 24);
                $55 = ((($3)) + 24 | 0);
                HEAP8[$55 >> 0] = $54 & 255; HEAP8[$55 + 1 >> 0] = ($54 >> 8) & 255; HEAP8[$55 + 2 >> 0] = ($54 >> 16) & 255; HEAP8[$55 + 3 >> 0] = $54 >> 24;
                $56 = HEAP32[$51 >> 2] | 0;
                $57 = (((($56) + ($$ << 6) | 0)) + 28 | 0);
                $58 = HEAPU8[$57 >> 0] | (HEAPU8[$57 + 1 >> 0] << 8) | (HEAPU8[$57 + 2 >> 0] << 16) | (HEAPU8[$57 + 3 >> 0] << 24);
                $59 = ((($3)) + 48 | 0);
                HEAP8[$59 >> 0] = $58 & 255; HEAP8[$59 + 1 >> 0] = ($58 >> 8) & 255; HEAP8[$59 + 2 >> 0] = ($58 >> 16) & 255; HEAP8[$59 + 3 >> 0] = $58 >> 24;
                $60 = HEAP32[$51 >> 2] | 0;
                $61 = (((($60) + ($$ << 6) | 0)) + 44 | 0);
                $62 = HEAPU8[$61 >> 0] | (HEAPU8[$61 + 1 >> 0] << 8) | (HEAPU8[$61 + 2 >> 0] << 16) | (HEAPU8[$61 + 3 >> 0] << 24);
                $63 = ((($3)) + 72 | 0);
                HEAP8[$63 >> 0] = $62 & 255; HEAP8[$63 + 1 >> 0] = ($62 >> 8) & 255; HEAP8[$63 + 2 >> 0] = ($62 >> 16) & 255; HEAP8[$63 + 3 >> 0] = $62 >> 24;
                $64 = HEAP32[$51 >> 2] | 0;
                $65 = (((($64) + ($$ << 6) | 0)) + 60 | 0);
                $66 = HEAPU8[$65 >> 0] | (HEAPU8[$65 + 1 >> 0] << 8) | (HEAPU8[$65 + 2 >> 0] << 16) | (HEAPU8[$65 + 3 >> 0] << 24);
                $67 = ((($3)) + 96 | 0);
                HEAP8[$67 >> 0] = $66 & 255; HEAP8[$67 + 1 >> 0] = ($66 >> 8) & 255; HEAP8[$67 + 2 >> 0] = ($66 >> 16) & 255; HEAP8[$67 + 3 >> 0] = $66 >> 24;
                $68 = ((($5)) + 3932 | 0);
                $69 = HEAP32[$68 >> 2] | 0;
                $70 = (((($69) + ($$ << 4) | 0)) + 3 | 0);
                $71 = HEAP8[$70 >> 0] | 0;
                $72 = ((($4)) + 6 | 0);
                HEAP8[$72 >> 0] = $71;
                $73 = HEAP32[$68 >> 2] | 0;
                $74 = (((($73) + ($$ << 4) | 0)) + 7 | 0);
                $75 = HEAP8[$74 >> 0] | 0;
                $76 = ((($4)) + 12 | 0);
                HEAP8[$76 >> 0] = $75;
                $77 = HEAP32[$68 >> 2] | 0;
                $78 = (((($77) + ($$ << 4) | 0)) + 11 | 0);
                $79 = HEAP8[$78 >> 0] | 0;
                $80 = ((($4)) + 18 | 0);
                HEAP8[$80 >> 0] = $79;
                $81 = HEAP32[$68 >> 2] | 0;
                $82 = (((($81) + ($$ << 4) | 0)) + 15 | 0);
                $83 = HEAP8[$82 >> 0] | 0;
                $$sink$sink = $83; $$sink6 = 24;
            }
        }
        do {
            if ((label | 0) == 10) {
                $84 = ((($2)) + 24 | 0);
                HEAP8[$84 >> 0] = 0 & 255; HEAP8[$84 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$84 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$84 + 3 >> 0] = 0 >> 24;
                $85 = ((($2)) + 48 | 0);
                HEAP8[$85 >> 0] = 0 & 255; HEAP8[$85 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$85 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$85 + 3 >> 0] = 0 >> 24;
                $86 = ((($2)) + 72 | 0);
                HEAP8[$86 >> 0] = 0 & 255; HEAP8[$86 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$86 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$86 + 3 >> 0] = 0 >> 24;
                $87 = ((($2)) + 96 | 0);
                HEAP8[$87 >> 0] = 0 & 255; HEAP8[$87 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$87 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$87 + 3 >> 0] = 0 >> 24;
                $88 = ((($3)) + 24 | 0);
                HEAP8[$88 >> 0] = 0 & 255; HEAP8[$88 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$88 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$88 + 3 >> 0] = 0 >> 24;
                $89 = ((($3)) + 48 | 0);
                HEAP8[$89 >> 0] = 0 & 255; HEAP8[$89 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$89 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$89 + 3 >> 0] = 0 >> 24;
                $90 = ((($3)) + 72 | 0);
                HEAP8[$90 >> 0] = 0 & 255; HEAP8[$90 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$90 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$90 + 3 >> 0] = 0 >> 24;
                $91 = ((($3)) + 96 | 0);
                HEAP8[$91 >> 0] = 0 & 255; HEAP8[$91 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$91 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$91 + 3 >> 0] = 0 >> 24;
                $92 = HEAP32[$13 >> 2] | 0;
                $93 = ($92 | 0) == (0);
                $94 = ((($4)) + 24 | 0);
                if ($93) {
                    HEAP8[$94 >> 0] = -2;
                    $95 = ((($4)) + 18 | 0);
                    HEAP8[$95 >> 0] = -2;
                    $96 = ((($4)) + 12 | 0);
                    HEAP8[$96 >> 0] = -2;
                    $$sink$sink = -2; $$sink6 = 6;
                    break;
                } else {
                    HEAP8[$94 >> 0] = -1;
                    $97 = ((($4)) + 18 | 0);
                    HEAP8[$97 >> 0] = -1;
                    $98 = ((($4)) + 12 | 0);
                    HEAP8[$98 >> 0] = -1;
                    $$sink$sink = -1; $$sink6 = 6;
                    break;
                }
            }
        } while (0);
        $99 = (($4) + ($$sink6) | 0);
        HEAP8[$99 >> 0] = $$sink$sink;
        $100 = HEAP32[$17 >> 2] | 0;
        $101 = ($100 | 0) == (0);
        if ($101) {
            label = 16;
        } else {
            $102 = ((($0)) + 24 | 0);
            $103 = HEAP32[$102 >> 2] | 0;
            $104 = $103 & 504;
            $105 = ($104 | 0) == (0);
            if ($105) {
                label = 16;
            } else {
                $106 = ((($5)) + 3916 | 0);
                $107 = HEAP32[$106 >> 2] | 0;
                $108 = (((($107) + ($$0162 << 6) | 0)) + 60 | 0);
                $109 = HEAPU8[$108 >> 0] | (HEAPU8[$108 + 1 >> 0] << 8) | (HEAPU8[$108 + 2 >> 0] << 16) | (HEAPU8[$108 + 3 >> 0] << 24);
                HEAP8[$2 >> 0] = $109 & 255; HEAP8[$2 + 1 >> 0] = ($109 >> 8) & 255; HEAP8[$2 + 2 >> 0] = ($109 >> 16) & 255; HEAP8[$2 + 3 >> 0] = $109 >> 24;
                $110 = ((($5)) + 3924 | 0);
                $111 = HEAP32[$110 >> 2] | 0;
                $112 = (((($111) + ($$0162 << 6) | 0)) + 60 | 0);
                $113 = HEAPU8[$112 >> 0] | (HEAPU8[$112 + 1 >> 0] << 8) | (HEAPU8[$112 + 2 >> 0] << 16) | (HEAPU8[$112 + 3 >> 0] << 24);
                HEAP8[$3 >> 0] = $113 & 255; HEAP8[$3 + 1 >> 0] = ($113 >> 8) & 255; HEAP8[$3 + 2 >> 0] = ($113 >> 16) & 255; HEAP8[$3 + 3 >> 0] = $113 >> 24;
                $114 = ((($5)) + 3932 | 0);
                $115 = HEAP32[$114 >> 2] | 0;
                $116 = (((($115) + ($$0162 << 4) | 0)) + 15 | 0);
                $117 = HEAP8[$116 >> 0] | 0;
                HEAP8[$4 >> 0] = $117;
            }
        }
        if ((label | 0) == 16) {
            HEAP8[$2 >> 0] = 0 & 255; HEAP8[$2 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$2 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$2 + 3 >> 0] = 0 >> 24;
            HEAP8[$3 >> 0] = 0 & 255; HEAP8[$3 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$3 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$3 + 3 >> 0] = 0 >> 24;
            $118 = HEAP32[$17 >> 2] | 0;
            $119 = ($118 | 0) == (0);
            $$sink7 = $119 ? -2 : -1;
            HEAP8[$4 >> 0] = $$sink7;
        }
        $120 = HEAP32[$0 >> 2] | 0;
        $121 = ($120 | 0) == (0);
        if ($121) {
            label = 20;
        } else {
            $122 = ((($0)) + 20 | 0);
            $123 = HEAP32[$122 >> 2] | 0;
            $124 = $123 & 504;
            $125 = ($124 | 0) == (0);
            if ($125) {
                label = 20;
            } else {
                $126 = ((($5)) + 3916 | 0);
                $127 = HEAP32[$126 >> 2] | 0;
                $128 = (((($127) + ($$0164 << 6) | 0)) + 48 | 0);
                $129 = $128;
                $130 = $129;
                $131 = HEAPU8[$130 >> 0] | (HEAPU8[$130 + 1 >> 0] << 8) | (HEAPU8[$130 + 2 >> 0] << 16) | (HEAPU8[$130 + 3 >> 0] << 24);
                $132 = (($129) + 4) | 0;
                $133 = $132;
                $134 = HEAPU8[$133 >> 0] | (HEAPU8[$133 + 1 >> 0] << 8) | (HEAPU8[$133 + 2 >> 0] << 16) | (HEAPU8[$133 + 3 >> 0] << 24);
                $135 = ((($2)) + 4 | 0);
                $136 = $135;
                $137 = $136;
                HEAP8[$137 >> 0] = $131 & 255; HEAP8[$137 + 1 >> 0] = ($131 >> 8) & 255; HEAP8[$137 + 2 >> 0] = ($131 >> 16) & 255; HEAP8[$137 + 3 >> 0] = $131 >> 24;
                $138 = (($136) + 4) | 0;
                $139 = $138;
                HEAP8[$139 >> 0] = $134 & 255; HEAP8[$139 + 1 >> 0] = ($134 >> 8) & 255; HEAP8[$139 + 2 >> 0] = ($134 >> 16) & 255; HEAP8[$139 + 3 >> 0] = $134 >> 24;
                $140 = HEAP32[$126 >> 2] | 0;
                $141 = (((($140) + ($$0164 << 6) | 0)) + 56 | 0);
                $142 = $141;
                $143 = $142;
                $144 = HEAPU8[$143 >> 0] | (HEAPU8[$143 + 1 >> 0] << 8) | (HEAPU8[$143 + 2 >> 0] << 16) | (HEAPU8[$143 + 3 >> 0] << 24);
                $145 = (($142) + 4) | 0;
                $146 = $145;
                $147 = HEAPU8[$146 >> 0] | (HEAPU8[$146 + 1 >> 0] << 8) | (HEAPU8[$146 + 2 >> 0] << 16) | (HEAPU8[$146 + 3 >> 0] << 24);
                $148 = ((($2)) + 12 | 0);
                $149 = $148;
                $150 = $149;
                HEAP8[$150 >> 0] = $144 & 255; HEAP8[$150 + 1 >> 0] = ($144 >> 8) & 255; HEAP8[$150 + 2 >> 0] = ($144 >> 16) & 255; HEAP8[$150 + 3 >> 0] = $144 >> 24;
                $151 = (($149) + 4) | 0;
                $152 = $151;
                HEAP8[$152 >> 0] = $147 & 255; HEAP8[$152 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$152 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$152 + 3 >> 0] = $147 >> 24;
                $153 = ((($5)) + 3924 | 0);
                $154 = HEAP32[$153 >> 2] | 0;
                $155 = (((($154) + ($$0164 << 6) | 0)) + 48 | 0);
                $156 = $155;
                $157 = $156;
                $158 = HEAPU8[$157 >> 0] | (HEAPU8[$157 + 1 >> 0] << 8) | (HEAPU8[$157 + 2 >> 0] << 16) | (HEAPU8[$157 + 3 >> 0] << 24);
                $159 = (($156) + 4) | 0;
                $160 = $159;
                $161 = HEAPU8[$160 >> 0] | (HEAPU8[$160 + 1 >> 0] << 8) | (HEAPU8[$160 + 2 >> 0] << 16) | (HEAPU8[$160 + 3 >> 0] << 24);
                $162 = ((($3)) + 4 | 0);
                $163 = $162;
                $164 = $163;
                HEAP8[$164 >> 0] = $158 & 255; HEAP8[$164 + 1 >> 0] = ($158 >> 8) & 255; HEAP8[$164 + 2 >> 0] = ($158 >> 16) & 255; HEAP8[$164 + 3 >> 0] = $158 >> 24;
                $165 = (($163) + 4) | 0;
                $166 = $165;
                HEAP8[$166 >> 0] = $161 & 255; HEAP8[$166 + 1 >> 0] = ($161 >> 8) & 255; HEAP8[$166 + 2 >> 0] = ($161 >> 16) & 255; HEAP8[$166 + 3 >> 0] = $161 >> 24;
                $167 = HEAP32[$153 >> 2] | 0;
                $168 = (((($167) + ($$0164 << 6) | 0)) + 56 | 0);
                $169 = $168;
                $170 = $169;
                $171 = HEAPU8[$170 >> 0] | (HEAPU8[$170 + 1 >> 0] << 8) | (HEAPU8[$170 + 2 >> 0] << 16) | (HEAPU8[$170 + 3 >> 0] << 24);
                $172 = (($169) + 4) | 0;
                $173 = $172;
                $174 = HEAPU8[$173 >> 0] | (HEAPU8[$173 + 1 >> 0] << 8) | (HEAPU8[$173 + 2 >> 0] << 16) | (HEAPU8[$173 + 3 >> 0] << 24);
                $175 = ((($3)) + 12 | 0);
                $176 = $175;
                $177 = $176;
                HEAP8[$177 >> 0] = $171 & 255; HEAP8[$177 + 1 >> 0] = ($171 >> 8) & 255; HEAP8[$177 + 2 >> 0] = ($171 >> 16) & 255; HEAP8[$177 + 3 >> 0] = $171 >> 24;
                $178 = (($176) + 4) | 0;
                $179 = $178;
                HEAP8[$179 >> 0] = $174 & 255; HEAP8[$179 + 1 >> 0] = ($174 >> 8) & 255; HEAP8[$179 + 2 >> 0] = ($174 >> 16) & 255; HEAP8[$179 + 3 >> 0] = $174 >> 24;
                $180 = ((($5)) + 3932 | 0);
                $181 = HEAP32[$180 >> 2] | 0;
                $182 = (((($181) + ($$0164 << 4) | 0)) + 12 | 0);
                $183 = HEAPU8[$182 >> 0] | (HEAPU8[$182 + 1 >> 0] << 8) | (HEAPU8[$182 + 2 >> 0] << 16) | (HEAPU8[$182 + 3 >> 0] << 24);
                $184 = ((($4)) + 1 | 0);
                HEAP8[$184 >> 0] = $183 & 255; HEAP8[$184 + 1 >> 0] = ($183 >> 8) & 255; HEAP8[$184 + 2 >> 0] = ($183 >> 16) & 255; HEAP8[$184 + 3 >> 0] = $183 >> 24;
            }
        }
        if ((label | 0) == 20) {
            $185 = ((($2)) + 4 | 0);
            $186 = ((($3)) + 4 | 0);
            dest = $185; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 0 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            dest = $186; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = 0 | 0; dest = dest + 1 | 0; } while ((dest | 0) < (stop | 0));
            $187 = HEAP32[$0 >> 2] | 0;
            $188 = ($187 | 0) == (0);
            $$sink168 = $188 ? -2 : -1;
            $189 = ((($4)) + 1 | 0);
            _memset(($189 | 0), ($$sink168 | 0), 4) | 0;
        }
        $190 = HEAP32[$23 >> 2] | 0;
        $191 = ($190 | 0) == (0);
        if (!($191)) {
            $192 = ((($0)) + 28 | 0);
            $193 = HEAP32[$192 >> 2] | 0;
            $194 = $193 & 504;
            $195 = ($194 | 0) == (0);
            if (!($195)) {
                $196 = ((($5)) + 3916 | 0);
                $197 = HEAP32[$196 >> 2] | 0;
                $198 = (((($197) + ($$0 << 6) | 0)) + 48 | 0);
                $199 = HEAPU8[$198 >> 0] | (HEAPU8[$198 + 1 >> 0] << 8) | (HEAPU8[$198 + 2 >> 0] << 16) | (HEAPU8[$198 + 3 >> 0] << 24);
                $200 = ((($2)) + 20 | 0);
                HEAP8[$200 >> 0] = $199 & 255; HEAP8[$200 + 1 >> 0] = ($199 >> 8) & 255; HEAP8[$200 + 2 >> 0] = ($199 >> 16) & 255; HEAP8[$200 + 3 >> 0] = $199 >> 24;
                $201 = ((($5)) + 3924 | 0);
                $202 = HEAP32[$201 >> 2] | 0;
                $203 = (((($202) + ($$0 << 6) | 0)) + 48 | 0);
                $204 = HEAPU8[$203 >> 0] | (HEAPU8[$203 + 1 >> 0] << 8) | (HEAPU8[$203 + 2 >> 0] << 16) | (HEAPU8[$203 + 3 >> 0] << 24);
                $205 = ((($3)) + 20 | 0);
                HEAP8[$205 >> 0] = $204 & 255; HEAP8[$205 + 1 >> 0] = ($204 >> 8) & 255; HEAP8[$205 + 2 >> 0] = ($204 >> 16) & 255; HEAP8[$205 + 3 >> 0] = $204 >> 24;
                $206 = ((($5)) + 3932 | 0);
                $207 = HEAP32[$206 >> 2] | 0;
                $208 = (((($207) + ($$0 << 4) | 0)) + 12 | 0);
                $209 = HEAP8[$208 >> 0] | 0;
                $210 = ((($4)) + 5 | 0);
                HEAP8[$210 >> 0] = $209;
                $215 = ((($2)) + 36 | 0);
                HEAP8[$215 >> 0] = 0 & 255; HEAP8[$215 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$215 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$215 + 3 >> 0] = 0 >> 24;
                $216 = ((($2)) + 84 | 0);
                HEAP8[$216 >> 0] = 0 & 255; HEAP8[$216 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$216 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$216 + 3 >> 0] = 0 >> 24;
                $217 = ((($2)) + 44 | 0);
                HEAP8[$217 >> 0] = 0 & 255; HEAP8[$217 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$217 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$217 + 3 >> 0] = 0 >> 24;
                $218 = ((($2)) + 68 | 0);
                HEAP8[$218 >> 0] = 0 & 255; HEAP8[$218 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$218 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$218 + 3 >> 0] = 0 >> 24;
                $219 = ((($2)) + 92 | 0);
                HEAP8[$219 >> 0] = 0 & 255; HEAP8[$219 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$219 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$219 + 3 >> 0] = 0 >> 24;
                $220 = ((($3)) + 36 | 0);
                HEAP8[$220 >> 0] = 0 & 255; HEAP8[$220 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$220 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$220 + 3 >> 0] = 0 >> 24;
                $221 = ((($3)) + 84 | 0);
                HEAP8[$221 >> 0] = 0 & 255; HEAP8[$221 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$221 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$221 + 3 >> 0] = 0 >> 24;
                $222 = ((($3)) + 44 | 0);
                HEAP8[$222 >> 0] = 0 & 255; HEAP8[$222 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$222 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$222 + 3 >> 0] = 0 >> 24;
                $223 = ((($3)) + 68 | 0);
                HEAP8[$223 >> 0] = 0 & 255; HEAP8[$223 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$223 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$223 + 3 >> 0] = 0 >> 24;
                $224 = ((($3)) + 92 | 0);
                HEAP8[$224 >> 0] = 0 & 255; HEAP8[$224 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$224 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$224 + 3 >> 0] = 0 >> 24;
                $225 = ((($4)) + 23 | 0);
                HEAP8[$225 >> 0] = -2;
                $226 = ((($4)) + 17 | 0);
                HEAP8[$226 >> 0] = -2;
                $227 = ((($4)) + 11 | 0);
                HEAP8[$227 >> 0] = -2;
                $228 = ((($4)) + 21 | 0);
                HEAP8[$228 >> 0] = -2;
                $229 = ((($4)) + 9 | 0);
                HEAP8[$229 >> 0] = -2;
                return;
            }
        }
        $211 = ((($2)) + 20 | 0);
        HEAP8[$211 >> 0] = 0 & 255; HEAP8[$211 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$211 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$211 + 3 >> 0] = 0 >> 24;
        $212 = HEAP32[$23 >> 2] | 0;
        $213 = ($212 | 0) == (0);
        $214 = ((($4)) + 5 | 0);
        $$sink12 = $213 ? -2 : -1;
        HEAP8[$214 >> 0] = $$sink12;
        $215 = ((($2)) + 36 | 0);
        HEAP8[$215 >> 0] = 0 & 255; HEAP8[$215 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$215 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$215 + 3 >> 0] = 0 >> 24;
        $216 = ((($2)) + 84 | 0);
        HEAP8[$216 >> 0] = 0 & 255; HEAP8[$216 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$216 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$216 + 3 >> 0] = 0 >> 24;
        $217 = ((($2)) + 44 | 0);
        HEAP8[$217 >> 0] = 0 & 255; HEAP8[$217 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$217 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$217 + 3 >> 0] = 0 >> 24;
        $218 = ((($2)) + 68 | 0);
        HEAP8[$218 >> 0] = 0 & 255; HEAP8[$218 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$218 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$218 + 3 >> 0] = 0 >> 24;
        $219 = ((($2)) + 92 | 0);
        HEAP8[$219 >> 0] = 0 & 255; HEAP8[$219 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$219 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$219 + 3 >> 0] = 0 >> 24;
        $220 = ((($3)) + 36 | 0);
        HEAP8[$220 >> 0] = 0 & 255; HEAP8[$220 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$220 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$220 + 3 >> 0] = 0 >> 24;
        $221 = ((($3)) + 84 | 0);
        HEAP8[$221 >> 0] = 0 & 255; HEAP8[$221 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$221 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$221 + 3 >> 0] = 0 >> 24;
        $222 = ((($3)) + 44 | 0);
        HEAP8[$222 >> 0] = 0 & 255; HEAP8[$222 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$222 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$222 + 3 >> 0] = 0 >> 24;
        $223 = ((($3)) + 68 | 0);
        HEAP8[$223 >> 0] = 0 & 255; HEAP8[$223 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$223 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$223 + 3 >> 0] = 0 >> 24;
        $224 = ((($3)) + 92 | 0);
        HEAP8[$224 >> 0] = 0 & 255; HEAP8[$224 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$224 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$224 + 3 >> 0] = 0 >> 24;
        $225 = ((($4)) + 23 | 0);
        HEAP8[$225 >> 0] = -2;
        $226 = ((($4)) + 17 | 0);
        HEAP8[$226 >> 0] = -2;
        $227 = ((($4)) + 11 | 0);
        HEAP8[$227 >> 0] = -2;
        $228 = ((($4)) + 21 | 0);
        HEAP8[$228 >> 0] = -2;
        $229 = ((($4)) + 9 | 0);
        HEAP8[$229 >> 0] = -2;
        return;
    }
    function __ZN7WelsDec25ParseInterMotionInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_A2_sS7_PA30_a($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$0421535 = 0, $$061$in$i = 0, $$1$ph$ph = 0, $$1$ph$ph$1 = 0, $$1$ph$ph$2 = 0, $$1$ph$ph$3 = 0, $$1$ph490 = 0, $$1$ph490$1 = 0, $$1$ph490$2 = 0, $$1$ph490$3 = 0, $$2$i$ph = 0, $$23$ph = 0, $$24 = 0, $$3$i477 = 0, $$6420537 = 0, $$phi$trans$insert = 0, $$phi$trans$insert560 = 0, $$pn = 0, $$pre = 0, $$pre561 = 0;
        var $$sink = 0, $$sink470 = 0, $$sink470$pre = 0, $$sink472 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0;
        var $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0;
        var $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0;
        var $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0;
        var $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0;
        var $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0;
        var $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0;
        var $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0;
        var $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0;
        var $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0;
        var $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0;
        var $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $121 = 0, $122 = 0, $123 = 0;
        var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
        var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
        var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
        var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
        var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
        var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
        var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
        var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
        var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
        var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
        var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
        var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
        var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
        var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
        var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
        var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
        var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
        var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
        var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
        var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
        var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
        var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
        var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
        var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
        var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
        var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
        var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
        var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
        var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
        var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
        var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
        var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
        var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
        var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
        var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
        var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
        var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
        var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
        var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
        var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
        var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
        var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
        var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
        var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
        var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
        var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
        var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
        var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
        var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $or$cond = 0, $or$cond450 = 0, $or$cond452 = 0, $or$cond452$1 = 0, $or$cond456 = 0, $or$cond456$1 = 0, $or$cond458 = 0, $or$cond458$1 = 0, $or$cond462 = 0, $or$cond462$1 = 0, $or$cond465 = 0, $or$cond465$1 = 0, $or$cond465$2 = 0;
        var $or$cond465$3 = 0, $or$cond469 = 0, $phitmp = 0, $phitmp502 = 0, $phitmp63$i = 0, $phitmp66$i = 0, $sext = 0, $sext441 = 0, $sext443 = 0, $sext443$1 = 0, $sext444 = 0, $sext444$1 = 0, $sext445 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 80 | 0;
        $vararg_buffer13 = sp + 56 | 0;
        $vararg_buffer10 = sp + 48 | 0;
        $vararg_buffer7 = sp + 40 | 0;
        $vararg_buffer4 = sp + 32 | 0;
        $vararg_buffer1 = sp + 24 | 0;
        $vararg_buffer = sp + 16 | 0;
        $6 = sp + 64 | 0;
        $7 = sp + 8 | 0;
        $8 = sp;
        $9 = sp + 68 | 0;
        $10 = sp + 60 | 0;
        $11 = sp + 76 | 0;
        $12 = sp + 72 | 0;
        $13 = ((($0)) + 241932 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ((($14)) + 4040 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = $7;
        $18 = $17;
        HEAP32[$18 >> 2] = 0;
        $19 = (($17) + 4) | 0;
        $20 = $19;
        HEAP32[$20 >> 2] = 0;
        $21 = $8;
        $22 = $21;
        HEAP32[$22 >> 2] = 0;
        $23 = (($21) + 4) | 0;
        $24 = $23;
        HEAP32[$24 >> 2] = 0;
        HEAP16[$9 >> 1] = 0;
        $25 = ((($14)) + 88 | 0);
        $26 = HEAP32[$25 >> 2] | 0;
        $27 = ((($26)) + 828 | 0);
        $28 = HEAP32[$27 >> 2] | 0;
        $29 = ((($28)) + 24 | 0);
        $30 = HEAP16[$29 >> 1] | 0;
        $31 = ((($28)) + 26 | 0);
        $32 = HEAP16[$31 >> 1] | 0;
        $33 = ((($14)) + 52 | 0);
        $34 = HEAP32[$33 >> 2] | 0;
        $35 = ((($14)) + 3908 | 0);
        $36 = HEAP32[$35 >> 2] | 0;
        $37 = (($36) + ($16 << 1) | 0);
        $38 = HEAP16[$37 >> 1] | 0;
        $39 = $38 << 16 >> 16;
        switch ($39 | 0) {
            case 8: {
                $54 = ($34 | 0) == (1);
                L3: do {
                    if ($54) {
                        HEAP8[$9 >> 0] = 0;
                        $96 = 0;
                    } else {
                        $55 = HEAP32[$1 >> 2] | 0;
                        $56 = ($55 | 0) == (0);
                        if ($56) {
                            $79 = 0;
                        } else {
                            $57 = ((($1)) + 20 | 0);
                            $58 = HEAP32[$57 >> 2] | 0;
                            $59 = ($58 | 0) == (512);
                            if ($59) {
                                $79 = 0;
                            } else {
                                $60 = HEAP8[10975] | 0;
                                $61 = $60 & 255;
                                $62 = (($61) + -6) | 0;
                                $63 = (($5) + ($62) | 0);
                                $64 = HEAP8[$63 >> 0] | 0;
                                $65 = ($64 << 24 >> 24) > (0);
                                $phitmp63$i = $65 & 1;
                                $phitmp502 = $phitmp63$i << 1;
                                $79 = $phitmp502;
                            }
                        }
                        $66 = ((($1)) + 4 | 0);
                        $67 = HEAP32[$66 >> 2] | 0;
                        $68 = ($67 | 0) == (0);
                        if ($68) {
                            $$061$in$i = 0;
                        } else {
                            $69 = ((($1)) + 16 | 0);
                            $70 = HEAP32[$69 >> 2] | 0;
                            $71 = ($70 | 0) == (512);
                            if ($71) {
                                $$061$in$i = 0;
                            } else {
                                $72 = HEAP8[10975] | 0;
                                $73 = $72 & 255;
                                $74 = (($73) + -1) | 0;
                                $75 = (($5) + ($74) | 0);
                                $76 = HEAP8[$75 >> 0] | 0;
                                $77 = ($76 << 24 >> 24) > (0);
                                $phitmp = $77 & 1;
                                $$061$in$i = $phitmp;
                            }
                        }
                        $78 = $$061$in$i | $79;
                        $80 = ((($0)) + 512232 | 0);
                        $81 = HEAP32[$80 >> 2] | 0;
                        $82 = ((($0)) + 511417 | 0);
                        $83 = (($82) + ($78 << 1) | 0);
                        $84 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($81, $83, $6) | 0);
                        $85 = ($84 | 0) == (0);
                        do {
                            if ($85) {
                                $86 = HEAP32[$6 >> 2] | 0;
                                $87 = ($86 | 0) == (0);
                                if ($87) {
                                    $94 = 0;
                                } else {
                                    $88 = HEAP32[$80 >> 2] | 0;
                                    $89 = ((($0)) + 511425 | 0);
                                    $90 = (__ZN7WelsDec19DecodeUnaryBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEiRj($88, $89, 1, $6) | 0);
                                    $91 = ($90 | 0) == (0);
                                    if (!($91)) {
                                        $$2$i$ph = $90;
                                        break;
                                    }
                                    $92 = HEAP32[$6 >> 2] | 0;
                                    $93 = (($92) + 1) | 0;
                                    HEAP32[$6 >> 2] = $93;
                                    $phitmp66$i = $93 & 255;
                                    $94 = $phitmp66$i;
                                }
                                HEAP8[$9 >> 0] = $94;
                                $96 = $94;
                                break L3;
                            } else {
                                $$2$i$ph = $84;
                            }
                        } while (0);
                        $$24 = $$2$i$ph;
                        STACKTOP = sp; return ($$24 | 0);
                    }
                } while (0);
                $95 = $96 << 24 >> 24;
                $97 = ($96 << 24 >> 24) > (-1);
                $98 = ($34 | 0) > ($95 | 0);
                $or$cond = $97 & $98;
                if ($or$cond) {
                    $99 = (((($0)) + 5468 | 0) + ($95 << 2) | 0);
                    $100 = HEAP32[$99 >> 2] | 0;
                    $101 = ($100 | 0) == (0 | 0);
                    if ($101) {
                        label = 20;
                    } else {
                        $116 = $96;
                    }
                } else {
                    label = 20;
                }
                do {
                    if ((label | 0) == 20) {
                        $102 = ((($0)) + 512344 | 0);
                        HEAP8[$102 >> 0] = 1;
                        $103 = ((($0)) + 242340 | 0);
                        $104 = HEAP32[$103 >> 2] | 0;
                        $105 = ($104 | 0) == (0);
                        if ($105) {
                            $$24 = 1041;
                            STACKTOP = sp; return ($$24 | 0);
                        } else {
                            HEAP8[$9 >> 0] = 0;
                            $106 = ((($0)) + 116 | 0);
                            $107 = HEAP32[$106 >> 2] | 0;
                            $108 = $107 | 4;
                            HEAP32[$106 >> 2] = $108;
                            $116 = 0;
                            break;
                        }
                    }
                } while (0);
                $109 = ((($0)) + 512345 | 0);
                $110 = HEAP8[$109 >> 0] | 0;
                $111 = ($110 << 24 >> 24) == (0);
                $112 = ((($0)) + 512344 | 0);
                if ($111) {
                    $113 = HEAP8[$112 >> 0] | 0;
                    $114 = ($113 << 24 >> 24) == (0);
                    if ($114) {
                        $115 = $116 << 24 >> 24;
                        $117 = (((($0)) + 5468 | 0) + ($115 << 2) | 0);
                        $118 = HEAP32[$117 >> 2] | 0;
                        $119 = ($118 | 0) == (0 | 0);
                        if ($119) {
                            $123 = 1;
                        } else {
                            $120 = ((($118)) + 72 | 0);
                            $121 = HEAP8[$120 >> 0] | 0;
                            $122 = $121 ^ 1;
                            $123 = $122;
                        }
                    } else {
                        $123 = 1;
                    }
                } else {
                    $123 = 1;
                }
                HEAP8[$112 >> 0] = $123;
                __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($3, $5, 0, 4, $116, $7);
                $124 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 0, 0, 0, $8) | 0);
                $125 = ($124 | 0) == (0);
                if (!($125)) {
                    $$24 = $124;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $126 = ((($8)) + 2 | 0);
                $127 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 0, 0, 1, $126) | 0);
                $128 = ($127 | 0) == (0);
                if (!($128)) {
                    $$24 = $127;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $129 = HEAP16[$8 >> 1] | 0;
                $130 = $129 & 65535;
                $131 = HEAP16[$7 >> 1] | 0;
                $132 = $131 & 65535;
                $133 = (($132) + ($130)) | 0;
                $134 = $133 & 65535;
                HEAP16[$7 >> 1] = $134;
                $135 = HEAP16[$126 >> 1] | 0;
                $136 = $135 & 65535;
                $137 = ((($7)) + 2 | 0);
                $138 = HEAP16[$137 >> 1] | 0;
                $139 = $138 & 65535;
                $140 = (($139) + ($136)) | 0;
                $141 = $140 & 65535;
                HEAP16[$137 >> 1] = $141;
                $sext445 = $140 << 16;
                $142 = $sext445 >> 16;
                $143 = $30 << 16 >> 16;
                $144 = ($142 | 0) < ($143 | 0);
                $145 = $32 << 16 >> 16;
                $146 = ($142 | 0) > ($145 | 0);
                $or$cond450 = $144 | $146;
                if ($or$cond450) {
                    HEAP32[$vararg_buffer >> 2] = $142;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer);
                }
                __ZN7WelsDec22UpdateP16x16MotionInfoEPNS_10TagDqLayerEaPs($14, $116, $7);
                $147 = HEAP32[$8 >> 2] | 0;
                $148 = HEAP32[$15 >> 2] | 0;
                $149 = ((($14)) + 3924 | 0);
                $150 = HEAP32[$149 >> 2] | 0;
                $151 = (($150) + ($148 << 6) | 0);
                $152 = $151;
                $153 = $152;
                HEAP8[$153 >> 0] = $147 & 255; HEAP8[$153 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$153 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$153 + 3 >> 0] = $147 >> 24;
                $154 = (($152) + 4) | 0;
                $155 = $154;
                HEAP8[$155 >> 0] = $147 & 255; HEAP8[$155 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$155 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$155 + 3 >> 0] = $147 >> 24;
                $156 = HEAP32[$149 >> 2] | 0;
                $157 = (((($156) + ($148 << 6) | 0)) + 8 | 0);
                $158 = $157;
                $159 = $158;
                HEAP8[$159 >> 0] = $147 & 255; HEAP8[$159 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$159 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$159 + 3 >> 0] = $147 >> 24;
                $160 = (($158) + 4) | 0;
                $161 = $160;
                HEAP8[$161 >> 0] = $147 & 255; HEAP8[$161 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$161 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$161 + 3 >> 0] = $147 >> 24;
                $162 = HEAP32[$149 >> 2] | 0;
                $163 = (((($162) + ($148 << 6) | 0)) + 16 | 0);
                $164 = $163;
                $165 = $164;
                HEAP8[$165 >> 0] = $147 & 255; HEAP8[$165 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$165 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$165 + 3 >> 0] = $147 >> 24;
                $166 = (($164) + 4) | 0;
                $167 = $166;
                HEAP8[$167 >> 0] = $147 & 255; HEAP8[$167 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$167 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$167 + 3 >> 0] = $147 >> 24;
                $168 = HEAP32[$149 >> 2] | 0;
                $169 = (((($168) + ($148 << 6) | 0)) + 24 | 0);
                $170 = $169;
                $171 = $170;
                HEAP8[$171 >> 0] = $147 & 255; HEAP8[$171 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$171 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$171 + 3 >> 0] = $147 >> 24;
                $172 = (($170) + 4) | 0;
                $173 = $172;
                HEAP8[$173 >> 0] = $147 & 255; HEAP8[$173 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$173 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$173 + 3 >> 0] = $147 >> 24;
                $174 = HEAP32[$149 >> 2] | 0;
                $175 = (((($174) + ($148 << 6) | 0)) + 32 | 0);
                $176 = $175;
                $177 = $176;
                HEAP8[$177 >> 0] = $147 & 255; HEAP8[$177 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$177 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$177 + 3 >> 0] = $147 >> 24;
                $178 = (($176) + 4) | 0;
                $179 = $178;
                HEAP8[$179 >> 0] = $147 & 255; HEAP8[$179 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$179 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$179 + 3 >> 0] = $147 >> 24;
                $180 = HEAP32[$149 >> 2] | 0;
                $181 = (((($180) + ($148 << 6) | 0)) + 40 | 0);
                $182 = $181;
                $183 = $182;
                HEAP8[$183 >> 0] = $147 & 255; HEAP8[$183 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$183 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$183 + 3 >> 0] = $147 >> 24;
                $184 = (($182) + 4) | 0;
                $185 = $184;
                HEAP8[$185 >> 0] = $147 & 255; HEAP8[$185 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$185 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$185 + 3 >> 0] = $147 >> 24;
                $186 = HEAP32[$149 >> 2] | 0;
                $187 = (((($186) + ($148 << 6) | 0)) + 48 | 0);
                $188 = $187;
                $189 = $188;
                HEAP8[$189 >> 0] = $147 & 255; HEAP8[$189 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$189 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$189 + 3 >> 0] = $147 >> 24;
                $190 = (($188) + 4) | 0;
                $191 = $190;
                HEAP8[$191 >> 0] = $147 & 255; HEAP8[$191 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$191 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$191 + 3 >> 0] = $147 >> 24;
                $192 = HEAP32[$149 >> 2] | 0;
                $193 = (((($192) + ($148 << 6) | 0)) + 56 | 0);
                $194 = $193;
                $195 = $194;
                HEAP8[$195 >> 0] = $147 & 255; HEAP8[$195 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$195 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$195 + 3 >> 0] = $147 >> 24;
                $196 = (($194) + 4) | 0;
                $197 = $196;
                HEAP8[$197 >> 0] = $147 & 255; HEAP8[$197 + 1 >> 0] = ($147 >> 8) & 255; HEAP8[$197 + 2 >> 0] = ($147 >> 16) & 255; HEAP8[$197 + 3 >> 0] = $147 >> 24;
                $$24 = 0;
                STACKTOP = sp; return ($$24 | 0);
                break;
            }
            case 16: {
                $47 = ((($0)) + 512344 | 0);
                $48 = ((($0)) + 242340 | 0);
                $49 = ((($0)) + 116 | 0);
                $50 = ((($0)) + 512345 | 0);
                $51 = ((($14)) + 3932 | 0);
                $52 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, 0, $5, 0, 0, $34, 0, $9) | 0);
                $53 = ($52 | 0) == (0);
                if (!($53)) {
                    $$24 = $52;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $198 = HEAP8[$9 >> 0] | 0;
                $199 = $198 << 24 >> 24;
                $200 = ($198 << 24 >> 24) > (-1);
                $201 = ($34 | 0) > ($199 | 0);
                $or$cond452 = $200 & $201;
                if ($or$cond452) {
                    $202 = (((($0)) + 5468 | 0) + ($199 << 2) | 0);
                    $203 = HEAP32[$202 >> 2] | 0;
                    $204 = ($203 | 0) == (0 | 0);
                    if ($204) {
                        label = 33;
                    } else {
                        $214 = $198;
                    }
                } else {
                    label = 33;
                }
                do {
                    if ((label | 0) == 33) {
                        HEAP8[$47 >> 0] = 1;
                        $205 = HEAP32[$48 >> 2] | 0;
                        $206 = ($205 | 0) == (0);
                        if ($206) {
                            $$24 = 1041;
                            STACKTOP = sp; return ($$24 | 0);
                        } else {
                            HEAP8[$9 >> 0] = 0;
                            $207 = HEAP32[$49 >> 2] | 0;
                            $208 = $207 | 4;
                            HEAP32[$49 >> 2] = $208;
                            $214 = 0;
                            break;
                        }
                    }
                } while (0);
                $209 = HEAP8[$50 >> 0] | 0;
                $210 = ($209 << 24 >> 24) == (0);
                if ($210) {
                    $211 = HEAP8[$47 >> 0] | 0;
                    $212 = ($211 << 24 >> 24) == (0);
                    if ($212) {
                        $213 = $214 << 24 >> 24;
                        $215 = (((($0)) + 5468 | 0) + ($213 << 2) | 0);
                        $216 = HEAP32[$215 >> 2] | 0;
                        $217 = ($216 | 0) == (0 | 0);
                        if ($217) {
                            $221 = 1;
                        } else {
                            $218 = ((($216)) + 72 | 0);
                            $219 = HEAP8[$218 >> 0] | 0;
                            $220 = $219 ^ 1;
                            $221 = $220;
                        }
                    } else {
                        $221 = 1;
                    }
                } else {
                    $221 = 1;
                }
                HEAP8[$47 >> 0] = $221;
                $222 = $214 << 24 >> 24;
                $223 = $222 << 24;
                $224 = $222 << 16;
                $225 = $222 << 8;
                $226 = $224 | $222;
                $227 = $226 | $223;
                $228 = $227 | $225;
                $229 = HEAP32[$15 >> 2] | 0;
                $230 = HEAP8[15415] | 0;
                $231 = $230 & 255;
                $232 = HEAP8[10975] | 0;
                $233 = $232 & 255;
                $234 = HEAP32[$51 >> 2] | 0;
                $235 = ((($234) + ($229 << 4) | 0) + ($231) | 0);
                HEAP8[$235 >> 0] = $228 & 255; HEAP8[$235 + 1 >> 0] = ($228 >> 8) & 255; HEAP8[$235 + 2 >> 0] = ($228 >> 16) & 255; HEAP8[$235 + 3 >> 0] = $228 >> 24;
                $236 = HEAP32[$51 >> 2] | 0;
                $237 = (($230) + 4) << 24 >> 24;
                $238 = $237 & 255;
                $239 = ((($236) + ($229 << 4) | 0) + ($238) | 0);
                HEAP8[$239 >> 0] = $228 & 255; HEAP8[$239 + 1 >> 0] = ($228 >> 8) & 255; HEAP8[$239 + 2 >> 0] = ($228 >> 16) & 255; HEAP8[$239 + 3 >> 0] = $228 >> 24;
                $240 = (($5) + ($233) | 0);
                HEAP8[$240 >> 0] = $228 & 255; HEAP8[$240 + 1 >> 0] = ($228 >> 8) & 255; HEAP8[$240 + 2 >> 0] = ($228 >> 16) & 255; HEAP8[$240 + 3 >> 0] = $228 >> 24;
                $241 = (($232) + 6) << 24 >> 24;
                $242 = $241 & 255;
                $243 = (($5) + ($242) | 0);
                HEAP8[$243 >> 0] = $228 & 255; HEAP8[$243 + 1 >> 0] = ($228 >> 8) & 255; HEAP8[$243 + 2 >> 0] = ($228 >> 16) & 255; HEAP8[$243 + 3 >> 0] = $228 >> 24;
                $244 = ((($9)) + 1 | 0);
                $245 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, 0, $5, 0, 8, $34, 0, $244) | 0);
                $246 = ($245 | 0) == (0);
                if (!($246)) {
                    $$24 = $245;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $827 = HEAP8[$244 >> 0] | 0;
                $828 = $827 << 24 >> 24;
                $829 = ($827 << 24 >> 24) > (-1);
                $830 = ($34 | 0) > ($828 | 0);
                $or$cond452$1 = $829 & $830;
                if ($or$cond452$1) {
                    $831 = (((($0)) + 5468 | 0) + ($828 << 2) | 0);
                    $832 = HEAP32[$831 >> 2] | 0;
                    $833 = ($832 | 0) == (0 | 0);
                    if ($833) {
                        label = 101;
                    } else {
                        $324 = $827;
                    }
                } else {
                    label = 101;
                }
                do {
                    if ((label | 0) == 101) {
                        HEAP8[$47 >> 0] = 1;
                        $834 = HEAP32[$48 >> 2] | 0;
                        $835 = ($834 | 0) == (0);
                        if ($835) {
                            $$24 = 1041;
                            STACKTOP = sp; return ($$24 | 0);
                        } else {
                            HEAP8[$244 >> 0] = 0;
                            $836 = HEAP32[$49 >> 2] | 0;
                            $837 = $836 | 4;
                            HEAP32[$49 >> 2] = $837;
                            $324 = 0;
                            break;
                        }
                    }
                } while (0);
                $838 = HEAP8[$50 >> 0] | 0;
                $839 = ($838 << 24 >> 24) == (0);
                if ($839) {
                    $840 = HEAP8[$47 >> 0] | 0;
                    $841 = ($840 << 24 >> 24) == (0);
                    if ($841) {
                        $842 = $324 << 24 >> 24;
                        $843 = (((($0)) + 5468 | 0) + ($842 << 2) | 0);
                        $844 = HEAP32[$843 >> 2] | 0;
                        $845 = ($844 | 0) == (0 | 0);
                        if ($845) {
                            $849 = 1;
                        } else {
                            $846 = ((($844)) + 72 | 0);
                            $847 = HEAP8[$846 >> 0] | 0;
                            $848 = $847 ^ 1;
                            $849 = $848;
                        }
                    } else {
                        $849 = 1;
                    }
                } else {
                    $849 = 1;
                }
                HEAP8[$47 >> 0] = $849;
                $850 = $324 << 24 >> 24;
                $851 = $850 << 24;
                $852 = $850 << 16;
                $853 = $850 << 8;
                $854 = $852 | $850;
                $855 = $854 | $851;
                $856 = $855 | $853;
                $857 = HEAP32[$15 >> 2] | 0;
                $858 = HEAP8[(15423) >> 0] | 0;
                $773 = $858 & 255;
                $859 = HEAP8[(10983) >> 0] | 0;
                $786 = $859 & 255;
                $860 = HEAP32[$51 >> 2] | 0;
                $861 = ((($860) + ($857 << 4) | 0) + ($773) | 0);
                HEAP8[$861 >> 0] = $856 & 255; HEAP8[$861 + 1 >> 0] = ($856 >> 8) & 255; HEAP8[$861 + 2 >> 0] = ($856 >> 16) & 255; HEAP8[$861 + 3 >> 0] = $856 >> 24;
                $862 = HEAP32[$51 >> 2] | 0;
                $863 = (($858) + 4) << 24 >> 24;
                $780 = $863 & 255;
                $864 = ((($862) + ($857 << 4) | 0) + ($780) | 0);
                HEAP8[$864 >> 0] = $856 & 255; HEAP8[$864 + 1 >> 0] = ($856 >> 8) & 255; HEAP8[$864 + 2 >> 0] = ($856 >> 16) & 255; HEAP8[$864 + 3 >> 0] = $856 >> 24;
                $865 = (($5) + ($786) | 0);
                HEAP8[$865 >> 0] = $856 & 255; HEAP8[$865 + 1 >> 0] = ($856 >> 8) & 255; HEAP8[$865 + 2 >> 0] = ($856 >> 16) & 255; HEAP8[$865 + 3 >> 0] = $856 >> 24;
                $866 = (($859) + 6) << 24 >> 24;
                $792 = $866 & 255;
                $867 = (($5) + ($792) | 0);
                HEAP8[$867 >> 0] = $856 & 255; HEAP8[$867 + 1 >> 0] = ($856 >> 8) & 255; HEAP8[$867 + 2 >> 0] = ($856 >> 16) & 255; HEAP8[$867 + 3 >> 0] = $856 >> 24;
                $247 = ((($8)) + 2 | 0);
                $259 = ((($7)) + 2 | 0);
                $265 = $30 << 16 >> 16;
                $267 = $32 << 16 >> 16;
                $272 = ((($14)) + 3924 | 0);
                $268 = HEAP8[$9 >> 0] | 0;
                __ZN7WelsDec15PredInter16x8MvEPA30_A2_sPA30_aiaPs($3, $5, 0, $268, $7);
                $868 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 0, 0, 0, $8) | 0);
                $869 = ($868 | 0) == (0);
                if (!($869)) {
                    $$24 = $868;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $248 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 0, 0, 1, $247) | 0);
                $249 = ($248 | 0) == (0);
                if (!($249)) {
                    $$24 = $248;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $250 = HEAP16[$8 >> 1] | 0;
                $251 = $250 & 65535;
                $252 = HEAP16[$7 >> 1] | 0;
                $253 = $252 & 65535;
                $254 = (($253) + ($251)) | 0;
                $255 = $254 & 65535;
                HEAP16[$7 >> 1] = $255;
                $256 = HEAP16[$247 >> 1] | 0;
                $257 = $256 & 65535;
                $258 = HEAP16[$259 >> 1] | 0;
                $260 = $258 & 65535;
                $261 = (($260) + ($257)) | 0;
                $262 = $261 & 65535;
                HEAP16[$259 >> 1] = $262;
                $sext444 = $261 << 16;
                $263 = $sext444 >> 16;
                $264 = ($263 | 0) < ($265 | 0);
                $266 = ($263 | 0) > ($267 | 0);
                $or$cond456 = $264 | $266;
                if ($or$cond456) {
                    HEAP32[$vararg_buffer1 >> 2] = $263;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer1);
                }
                __ZN7WelsDec21UpdateP16x8MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($14, $3, $5, 0, $268, $7);
                $269 = HEAP32[$8 >> 2] | 0;
                $270 = HEAP32[$15 >> 2] | 0;
                $271 = HEAP32[$272 >> 2] | 0;
                $273 = ((($271) + ($270 << 6) | 0) + ($231 << 2) | 0);
                $274 = $273;
                $275 = $274;
                HEAP8[$275 >> 0] = $269 & 255; HEAP8[$275 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$275 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$275 + 3 >> 0] = $269 >> 24;
                $276 = (($274) + 4) | 0;
                $277 = $276;
                HEAP8[$277 >> 0] = $269 & 255; HEAP8[$277 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$277 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$277 + 3 >> 0] = $269 >> 24;
                $278 = HEAP32[$272 >> 2] | 0;
                $279 = ((($278) + ($270 << 6) | 0) + ($238 << 2) | 0);
                $280 = $279;
                $281 = $280;
                HEAP8[$281 >> 0] = $269 & 255; HEAP8[$281 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$281 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$281 + 3 >> 0] = $269 >> 24;
                $282 = (($280) + 4) | 0;
                $283 = $282;
                HEAP8[$283 >> 0] = $269 & 255; HEAP8[$283 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$283 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$283 + 3 >> 0] = $269 >> 24;
                $284 = (($4) + ($233 << 2) | 0);
                $285 = $284;
                $286 = $285;
                HEAP8[$286 >> 0] = $269 & 255; HEAP8[$286 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$286 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$286 + 3 >> 0] = $269 >> 24;
                $287 = (($285) + 4) | 0;
                $288 = $287;
                HEAP8[$288 >> 0] = $269 & 255; HEAP8[$288 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$288 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$288 + 3 >> 0] = $269 >> 24;
                $289 = (($4) + ($242 << 2) | 0);
                $290 = $289;
                $291 = $290;
                HEAP8[$291 >> 0] = $269 & 255; HEAP8[$291 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$291 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$291 + 3 >> 0] = $269 >> 24;
                $292 = (($290) + 4) | 0;
                $293 = $292;
                HEAP8[$293 >> 0] = $269 & 255; HEAP8[$293 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$293 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$293 + 3 >> 0] = $269 >> 24;
                $294 = HEAP8[(15419) >> 0] | 0;
                $295 = $294 & 255;
                $296 = HEAP8[(10979) >> 0] | 0;
                $297 = $296 & 255;
                $298 = HEAP32[$272 >> 2] | 0;
                $299 = ((($298) + ($270 << 6) | 0) + ($295 << 2) | 0);
                $300 = $299;
                $301 = $300;
                HEAP8[$301 >> 0] = $269 & 255; HEAP8[$301 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$301 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$301 + 3 >> 0] = $269 >> 24;
                $302 = (($300) + 4) | 0;
                $303 = $302;
                HEAP8[$303 >> 0] = $269 & 255; HEAP8[$303 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$303 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$303 + 3 >> 0] = $269 >> 24;
                $304 = HEAP32[$272 >> 2] | 0;
                $305 = (($294) + 4) << 24 >> 24;
                $306 = $305 & 255;
                $307 = ((($304) + ($270 << 6) | 0) + ($306 << 2) | 0);
                $308 = $307;
                $309 = $308;
                HEAP8[$309 >> 0] = $269 & 255; HEAP8[$309 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$309 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$309 + 3 >> 0] = $269 >> 24;
                $310 = (($308) + 4) | 0;
                $311 = $310;
                HEAP8[$311 >> 0] = $269 & 255; HEAP8[$311 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$311 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$311 + 3 >> 0] = $269 >> 24;
                $312 = (($4) + ($297 << 2) | 0);
                $313 = $312;
                $314 = $313;
                HEAP8[$314 >> 0] = $269 & 255; HEAP8[$314 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$314 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$314 + 3 >> 0] = $269 >> 24;
                $315 = (($313) + 4) | 0;
                $316 = $315;
                HEAP8[$316 >> 0] = $269 & 255; HEAP8[$316 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$316 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$316 + 3 >> 0] = $269 >> 24;
                $317 = (($296) + 6) << 24 >> 24;
                $318 = $317 & 255;
                $319 = (($4) + ($318 << 2) | 0);
                $320 = $319;
                $321 = $320;
                HEAP8[$321 >> 0] = $269 & 255; HEAP8[$321 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$321 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$321 + 3 >> 0] = $269 >> 24;
                $322 = (($320) + 4) | 0;
                $323 = $322;
                HEAP8[$323 >> 0] = $269 & 255; HEAP8[$323 + 1 >> 0] = ($269 >> 8) & 255; HEAP8[$323 + 2 >> 0] = ($269 >> 16) & 255; HEAP8[$323 + 3 >> 0] = $269 >> 24;
                __ZN7WelsDec15PredInter16x8MvEPA30_A2_sPA30_aiaPs($3, $5, 8, $324, $7);
                $325 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 8, 0, 0, $8) | 0);
                $326 = ($325 | 0) == (0);
                if (!($326)) {
                    $$24 = $325;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $752 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 8, 0, 1, $247) | 0);
                $753 = ($752 | 0) == (0);
                if (!($753)) {
                    $$24 = $752;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $754 = HEAP16[$8 >> 1] | 0;
                $755 = $754 & 65535;
                $756 = HEAP16[$7 >> 1] | 0;
                $757 = $756 & 65535;
                $758 = (($757) + ($755)) | 0;
                $759 = $758 & 65535;
                HEAP16[$7 >> 1] = $759;
                $760 = HEAP16[$247 >> 1] | 0;
                $761 = $760 & 65535;
                $762 = HEAP16[$259 >> 1] | 0;
                $763 = $762 & 65535;
                $764 = (($763) + ($761)) | 0;
                $765 = $764 & 65535;
                HEAP16[$259 >> 1] = $765;
                $sext444$1 = $764 << 16;
                $766 = $sext444$1 >> 16;
                $767 = ($766 | 0) < ($265 | 0);
                $768 = ($766 | 0) > ($267 | 0);
                $or$cond456$1 = $767 | $768;
                if ($or$cond456$1) {
                    HEAP32[$vararg_buffer10 >> 2] = $766;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer10);
                }
                __ZN7WelsDec21UpdateP16x8MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($14, $3, $5, 8, $324, $7);
                $769 = HEAP32[$8 >> 2] | 0;
                $770 = HEAP32[$15 >> 2] | 0;
                $771 = HEAP32[$272 >> 2] | 0;
                $772 = ((($771) + ($770 << 6) | 0) + ($773 << 2) | 0);
                $774 = $772;
                $775 = $774;
                HEAP8[$775 >> 0] = $769 & 255; HEAP8[$775 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$775 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$775 + 3 >> 0] = $769 >> 24;
                $776 = (($774) + 4) | 0;
                $777 = $776;
                HEAP8[$777 >> 0] = $769 & 255; HEAP8[$777 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$777 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$777 + 3 >> 0] = $769 >> 24;
                $778 = HEAP32[$272 >> 2] | 0;
                $779 = ((($778) + ($770 << 6) | 0) + ($780 << 2) | 0);
                $781 = $779;
                $782 = $781;
                HEAP8[$782 >> 0] = $769 & 255; HEAP8[$782 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$782 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$782 + 3 >> 0] = $769 >> 24;
                $783 = (($781) + 4) | 0;
                $784 = $783;
                HEAP8[$784 >> 0] = $769 & 255; HEAP8[$784 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$784 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$784 + 3 >> 0] = $769 >> 24;
                $785 = (($4) + ($786 << 2) | 0);
                $787 = $785;
                $788 = $787;
                HEAP8[$788 >> 0] = $769 & 255; HEAP8[$788 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$788 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$788 + 3 >> 0] = $769 >> 24;
                $789 = (($787) + 4) | 0;
                $790 = $789;
                HEAP8[$790 >> 0] = $769 & 255; HEAP8[$790 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$790 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$790 + 3 >> 0] = $769 >> 24;
                $791 = (($4) + ($792 << 2) | 0);
                $793 = $791;
                $794 = $793;
                HEAP8[$794 >> 0] = $769 & 255; HEAP8[$794 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$794 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$794 + 3 >> 0] = $769 >> 24;
                $795 = (($793) + 4) | 0;
                $796 = $795;
                HEAP8[$796 >> 0] = $769 & 255; HEAP8[$796 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$796 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$796 + 3 >> 0] = $769 >> 24;
                $797 = HEAP8[(15427) >> 0] | 0;
                $798 = $797 & 255;
                $799 = HEAP8[(10987) >> 0] | 0;
                $800 = $799 & 255;
                $801 = HEAP32[$272 >> 2] | 0;
                $802 = ((($801) + ($770 << 6) | 0) + ($798 << 2) | 0);
                $803 = $802;
                $804 = $803;
                HEAP8[$804 >> 0] = $769 & 255; HEAP8[$804 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$804 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$804 + 3 >> 0] = $769 >> 24;
                $805 = (($803) + 4) | 0;
                $806 = $805;
                HEAP8[$806 >> 0] = $769 & 255; HEAP8[$806 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$806 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$806 + 3 >> 0] = $769 >> 24;
                $807 = HEAP32[$272 >> 2] | 0;
                $808 = (($797) + 4) << 24 >> 24;
                $809 = $808 & 255;
                $810 = ((($807) + ($770 << 6) | 0) + ($809 << 2) | 0);
                $811 = $810;
                $812 = $811;
                HEAP8[$812 >> 0] = $769 & 255; HEAP8[$812 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$812 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$812 + 3 >> 0] = $769 >> 24;
                $813 = (($811) + 4) | 0;
                $814 = $813;
                HEAP8[$814 >> 0] = $769 & 255; HEAP8[$814 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$814 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$814 + 3 >> 0] = $769 >> 24;
                $815 = (($4) + ($800 << 2) | 0);
                $816 = $815;
                $817 = $816;
                HEAP8[$817 >> 0] = $769 & 255; HEAP8[$817 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$817 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$817 + 3 >> 0] = $769 >> 24;
                $818 = (($816) + 4) | 0;
                $819 = $818;
                HEAP8[$819 >> 0] = $769 & 255; HEAP8[$819 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$819 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$819 + 3 >> 0] = $769 >> 24;
                $820 = (($799) + 6) << 24 >> 24;
                $821 = $820 & 255;
                $822 = (($4) + ($821 << 2) | 0);
                $823 = $822;
                $824 = $823;
                HEAP8[$824 >> 0] = $769 & 255; HEAP8[$824 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$824 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$824 + 3 >> 0] = $769 >> 24;
                $825 = (($823) + 4) | 0;
                $826 = $825;
                HEAP8[$826 >> 0] = $769 & 255; HEAP8[$826 + 1 >> 0] = ($769 >> 8) & 255; HEAP8[$826 + 2 >> 0] = ($769 >> 16) & 255; HEAP8[$826 + 3 >> 0] = $769 >> 24;
                $$24 = 0;
                STACKTOP = sp; return ($$24 | 0);
                break;
            }
            case 32: {
                $40 = ((($0)) + 512344 | 0);
                $41 = ((($0)) + 242340 | 0);
                $42 = ((($0)) + 116 | 0);
                $43 = ((($0)) + 512345 | 0);
                $44 = ((($14)) + 3932 | 0);
                $45 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, 0, $5, 0, 0, $34, 0, $9) | 0);
                $46 = ($45 | 0) == (0);
                if (!($46)) {
                    $$24 = $45;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $327 = HEAP8[$9 >> 0] | 0;
                $328 = $327 << 24 >> 24;
                $329 = ($327 << 24 >> 24) > (-1);
                $330 = ($34 | 0) > ($328 | 0);
                $or$cond458 = $329 & $330;
                if ($or$cond458) {
                    $331 = (((($0)) + 5468 | 0) + ($328 << 2) | 0);
                    $332 = HEAP32[$331 >> 2] | 0;
                    $333 = ($332 | 0) == (0 | 0);
                    if ($333) {
                        label = 46;
                    } else {
                        $343 = $327;
                    }
                } else {
                    label = 46;
                }
                do {
                    if ((label | 0) == 46) {
                        HEAP8[$40 >> 0] = 1;
                        $334 = HEAP32[$41 >> 2] | 0;
                        $335 = ($334 | 0) == (0);
                        if ($335) {
                            $$24 = 1041;
                            STACKTOP = sp; return ($$24 | 0);
                        } else {
                            HEAP8[$9 >> 0] = 0;
                            $336 = HEAP32[$42 >> 2] | 0;
                            $337 = $336 | 4;
                            HEAP32[$42 >> 2] = $337;
                            $343 = 0;
                            break;
                        }
                    }
                } while (0);
                $338 = HEAP8[$43 >> 0] | 0;
                $339 = ($338 << 24 >> 24) == (0);
                if ($339) {
                    $340 = HEAP8[$40 >> 0] | 0;
                    $341 = ($340 << 24 >> 24) == (0);
                    if ($341) {
                        $342 = $343 << 24 >> 24;
                        $344 = (((($0)) + 5468 | 0) + ($342 << 2) | 0);
                        $345 = HEAP32[$344 >> 2] | 0;
                        $346 = ($345 | 0) == (0 | 0);
                        if ($346) {
                            $350 = 1;
                        } else {
                            $347 = ((($345)) + 72 | 0);
                            $348 = HEAP8[$347 >> 0] | 0;
                            $349 = $348 ^ 1;
                            $350 = $349;
                        }
                    } else {
                        $350 = 1;
                    }
                } else {
                    $350 = 1;
                }
                HEAP8[$40 >> 0] = $350;
                $351 = $343 << 24 >> 24;
                $352 = $351 << 8;
                $353 = $352 | $351;
                $354 = $353 & 65535;
                $355 = HEAP32[$15 >> 2] | 0;
                $356 = HEAP8[15415] | 0;
                $357 = HEAP8[10975] | 0;
                $358 = $356 & 255;
                $359 = $357 & 255;
                $360 = HEAP32[$44 >> 2] | 0;
                $361 = ((($360) + ($355 << 4) | 0) + ($358) | 0);
                HEAP8[$361 >> 0] = $354 & 255; HEAP8[$361 + 1 >> 0] = $354 >> 8;
                $362 = HEAP32[$44 >> 2] | 0;
                $363 = (($356) + 4) << 24 >> 24;
                $364 = $363 & 255;
                $365 = ((($362) + ($355 << 4) | 0) + ($364) | 0);
                HEAP8[$365 >> 0] = $354 & 255; HEAP8[$365 + 1 >> 0] = $354 >> 8;
                $366 = (($5) + ($359) | 0);
                HEAP8[$366 >> 0] = $354 & 255; HEAP8[$366 + 1 >> 0] = $354 >> 8;
                $367 = (($357) + 6) << 24 >> 24;
                $368 = $367 & 255;
                $369 = (($5) + ($368) | 0);
                HEAP8[$369 >> 0] = $354 & 255; HEAP8[$369 + 1 >> 0] = $354 >> 8;
                $370 = HEAP8[(15423) >> 0] | 0;
                $371 = HEAP8[(10983) >> 0] | 0;
                $372 = $370 & 255;
                $373 = $371 & 255;
                $374 = HEAP32[$44 >> 2] | 0;
                $375 = ((($374) + ($355 << 4) | 0) + ($372) | 0);
                HEAP8[$375 >> 0] = $354 & 255; HEAP8[$375 + 1 >> 0] = $354 >> 8;
                $376 = HEAP32[$44 >> 2] | 0;
                $377 = (($370) + 4) << 24 >> 24;
                $378 = $377 & 255;
                $379 = ((($376) + ($355 << 4) | 0) + ($378) | 0);
                HEAP8[$379 >> 0] = $354 & 255; HEAP8[$379 + 1 >> 0] = $354 >> 8;
                $380 = (($5) + ($373) | 0);
                HEAP8[$380 >> 0] = $354 & 255; HEAP8[$380 + 1 >> 0] = $354 >> 8;
                $381 = (($371) + 6) << 24 >> 24;
                $382 = $381 & 255;
                $383 = (($5) + ($382) | 0);
                HEAP8[$383 >> 0] = $354 & 255; HEAP8[$383 + 1 >> 0] = $354 >> 8;
                $384 = ((($9)) + 1 | 0);
                $385 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, 0, $5, 0, 4, $34, 0, $384) | 0);
                $386 = ($385 | 0) == (0);
                if (!($386)) {
                    $$24 = $385;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $941 = HEAP8[$384 >> 0] | 0;
                $942 = $941 << 24 >> 24;
                $943 = ($941 << 24 >> 24) > (-1);
                $944 = ($34 | 0) > ($942 | 0);
                $or$cond458$1 = $943 & $944;
                if ($or$cond458$1) {
                    $945 = (((($0)) + 5468 | 0) + ($942 << 2) | 0);
                    $946 = HEAP32[$945 >> 2] | 0;
                    $947 = ($946 | 0) == (0 | 0);
                    if ($947) {
                        label = 114;
                    } else {
                        $456 = $941;
                    }
                } else {
                    label = 114;
                }
                do {
                    if ((label | 0) == 114) {
                        HEAP8[$40 >> 0] = 1;
                        $948 = HEAP32[$41 >> 2] | 0;
                        $949 = ($948 | 0) == (0);
                        if ($949) {
                            $$24 = 1041;
                            STACKTOP = sp; return ($$24 | 0);
                        } else {
                            HEAP8[$384 >> 0] = 0;
                            $950 = HEAP32[$42 >> 2] | 0;
                            $951 = $950 | 4;
                            HEAP32[$42 >> 2] = $951;
                            $456 = 0;
                            break;
                        }
                    }
                } while (0);
                $952 = HEAP8[$43 >> 0] | 0;
                $953 = ($952 << 24 >> 24) == (0);
                if ($953) {
                    $954 = HEAP8[$40 >> 0] | 0;
                    $955 = ($954 << 24 >> 24) == (0);
                    if ($955) {
                        $956 = $456 << 24 >> 24;
                        $957 = (((($0)) + 5468 | 0) + ($956 << 2) | 0);
                        $958 = HEAP32[$957 >> 2] | 0;
                        $959 = ($958 | 0) == (0 | 0);
                        if ($959) {
                            $963 = 1;
                        } else {
                            $960 = ((($958)) + 72 | 0);
                            $961 = HEAP8[$960 >> 0] | 0;
                            $962 = $961 ^ 1;
                            $963 = $962;
                        }
                    } else {
                        $963 = 1;
                    }
                } else {
                    $963 = 1;
                }
                HEAP8[$40 >> 0] = $963;
                $964 = $456 << 24 >> 24;
                $965 = $964 << 8;
                $966 = $965 | $964;
                $967 = $966 & 65535;
                $968 = HEAP32[$15 >> 2] | 0;
                $969 = HEAP8[(15419) >> 0] | 0;
                $970 = HEAP8[(10979) >> 0] | 0;
                $891 = $969 & 255;
                $904 = $970 & 255;
                $971 = HEAP32[$44 >> 2] | 0;
                $972 = ((($971) + ($968 << 4) | 0) + ($891) | 0);
                HEAP8[$972 >> 0] = $967 & 255; HEAP8[$972 + 1 >> 0] = $967 >> 8;
                $973 = HEAP32[$44 >> 2] | 0;
                $974 = (($969) + 4) << 24 >> 24;
                $898 = $974 & 255;
                $975 = ((($973) + ($968 << 4) | 0) + ($898) | 0);
                HEAP8[$975 >> 0] = $967 & 255; HEAP8[$975 + 1 >> 0] = $967 >> 8;
                $976 = (($5) + ($904) | 0);
                HEAP8[$976 >> 0] = $967 & 255; HEAP8[$976 + 1 >> 0] = $967 >> 8;
                $977 = (($970) + 6) << 24 >> 24;
                $910 = $977 & 255;
                $978 = (($5) + ($910) | 0);
                HEAP8[$978 >> 0] = $967 & 255; HEAP8[$978 + 1 >> 0] = $967 >> 8;
                $979 = HEAP8[(15427) >> 0] | 0;
                $980 = HEAP8[(10987) >> 0] | 0;
                $917 = $979 & 255;
                $930 = $980 & 255;
                $981 = HEAP32[$44 >> 2] | 0;
                $982 = ((($981) + ($968 << 4) | 0) + ($917) | 0);
                HEAP8[$982 >> 0] = $967 & 255; HEAP8[$982 + 1 >> 0] = $967 >> 8;
                $983 = HEAP32[$44 >> 2] | 0;
                $984 = (($979) + 4) << 24 >> 24;
                $924 = $984 & 255;
                $985 = ((($983) + ($968 << 4) | 0) + ($924) | 0);
                HEAP8[$985 >> 0] = $967 & 255; HEAP8[$985 + 1 >> 0] = $967 >> 8;
                $986 = (($5) + ($930) | 0);
                HEAP8[$986 >> 0] = $967 & 255; HEAP8[$986 + 1 >> 0] = $967 >> 8;
                $987 = (($980) + 6) << 24 >> 24;
                $936 = $987 & 255;
                $988 = (($5) + ($936) | 0);
                HEAP8[$988 >> 0] = $967 & 255; HEAP8[$988 + 1 >> 0] = $967 >> 8;
                $387 = ((($8)) + 2 | 0);
                $399 = ((($7)) + 2 | 0);
                $405 = $30 << 16 >> 16;
                $407 = $32 << 16 >> 16;
                $412 = ((($14)) + 3924 | 0);
                $408 = HEAP8[$9 >> 0] | 0;
                __ZN7WelsDec15PredInter8x16MvEPA30_A2_sPA30_aiaPs($3, $5, 0, $408, $7);
                $989 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 0, 0, 0, $8) | 0);
                $990 = ($989 | 0) == (0);
                if (!($990)) {
                    $$24 = $989;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $388 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 0, 0, 1, $387) | 0);
                $389 = ($388 | 0) == (0);
                if (!($389)) {
                    $$24 = $388;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $390 = HEAP16[$8 >> 1] | 0;
                $391 = $390 & 65535;
                $392 = HEAP16[$7 >> 1] | 0;
                $393 = $392 & 65535;
                $394 = (($393) + ($391)) | 0;
                $395 = $394 & 65535;
                HEAP16[$7 >> 1] = $395;
                $396 = HEAP16[$387 >> 1] | 0;
                $397 = $396 & 65535;
                $398 = HEAP16[$399 >> 1] | 0;
                $400 = $398 & 65535;
                $401 = (($400) + ($397)) | 0;
                $402 = $401 & 65535;
                HEAP16[$399 >> 1] = $402;
                $sext443 = $401 << 16;
                $403 = $sext443 >> 16;
                $404 = ($403 | 0) < ($405 | 0);
                $406 = ($403 | 0) > ($407 | 0);
                $or$cond462 = $404 | $406;
                if ($or$cond462) {
                    HEAP32[$vararg_buffer4 >> 2] = $403;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer4);
                }
                __ZN7WelsDec21UpdateP8x16MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($14, $3, $5, 0, $408, $7);
                $409 = HEAP32[$8 >> 2] | 0;
                $410 = HEAP32[$15 >> 2] | 0;
                $411 = HEAP32[$412 >> 2] | 0;
                $413 = ((($411) + ($410 << 6) | 0) + ($358 << 2) | 0);
                $414 = $413;
                $415 = $414;
                HEAP8[$415 >> 0] = $409 & 255; HEAP8[$415 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$415 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$415 + 3 >> 0] = $409 >> 24;
                $416 = (($414) + 4) | 0;
                $417 = $416;
                HEAP8[$417 >> 0] = $409 & 255; HEAP8[$417 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$417 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$417 + 3 >> 0] = $409 >> 24;
                $418 = HEAP32[$412 >> 2] | 0;
                $419 = ((($418) + ($410 << 6) | 0) + ($364 << 2) | 0);
                $420 = $419;
                $421 = $420;
                HEAP8[$421 >> 0] = $409 & 255; HEAP8[$421 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$421 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$421 + 3 >> 0] = $409 >> 24;
                $422 = (($420) + 4) | 0;
                $423 = $422;
                HEAP8[$423 >> 0] = $409 & 255; HEAP8[$423 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$423 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$423 + 3 >> 0] = $409 >> 24;
                $424 = (($4) + ($359 << 2) | 0);
                $425 = $424;
                $426 = $425;
                HEAP8[$426 >> 0] = $409 & 255; HEAP8[$426 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$426 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$426 + 3 >> 0] = $409 >> 24;
                $427 = (($425) + 4) | 0;
                $428 = $427;
                HEAP8[$428 >> 0] = $409 & 255; HEAP8[$428 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$428 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$428 + 3 >> 0] = $409 >> 24;
                $429 = (($4) + ($368 << 2) | 0);
                $430 = $429;
                $431 = $430;
                HEAP8[$431 >> 0] = $409 & 255; HEAP8[$431 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$431 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$431 + 3 >> 0] = $409 >> 24;
                $432 = (($430) + 4) | 0;
                $433 = $432;
                HEAP8[$433 >> 0] = $409 & 255; HEAP8[$433 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$433 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$433 + 3 >> 0] = $409 >> 24;
                $434 = HEAP32[$412 >> 2] | 0;
                $435 = ((($434) + ($410 << 6) | 0) + ($372 << 2) | 0);
                $436 = $435;
                $437 = $436;
                HEAP8[$437 >> 0] = $409 & 255; HEAP8[$437 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$437 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$437 + 3 >> 0] = $409 >> 24;
                $438 = (($436) + 4) | 0;
                $439 = $438;
                HEAP8[$439 >> 0] = $409 & 255; HEAP8[$439 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$439 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$439 + 3 >> 0] = $409 >> 24;
                $440 = HEAP32[$412 >> 2] | 0;
                $441 = ((($440) + ($410 << 6) | 0) + ($378 << 2) | 0);
                $442 = $441;
                $443 = $442;
                HEAP8[$443 >> 0] = $409 & 255; HEAP8[$443 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$443 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$443 + 3 >> 0] = $409 >> 24;
                $444 = (($442) + 4) | 0;
                $445 = $444;
                HEAP8[$445 >> 0] = $409 & 255; HEAP8[$445 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$445 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$445 + 3 >> 0] = $409 >> 24;
                $446 = (($4) + ($373 << 2) | 0);
                $447 = $446;
                $448 = $447;
                HEAP8[$448 >> 0] = $409 & 255; HEAP8[$448 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$448 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$448 + 3 >> 0] = $409 >> 24;
                $449 = (($447) + 4) | 0;
                $450 = $449;
                HEAP8[$450 >> 0] = $409 & 255; HEAP8[$450 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$450 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$450 + 3 >> 0] = $409 >> 24;
                $451 = (($4) + ($382 << 2) | 0);
                $452 = $451;
                $453 = $452;
                HEAP8[$453 >> 0] = $409 & 255; HEAP8[$453 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$453 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$453 + 3 >> 0] = $409 >> 24;
                $454 = (($452) + 4) | 0;
                $455 = $454;
                HEAP8[$455 >> 0] = $409 & 255; HEAP8[$455 + 1 >> 0] = ($409 >> 8) & 255; HEAP8[$455 + 2 >> 0] = ($409 >> 16) & 255; HEAP8[$455 + 3 >> 0] = $409 >> 24;
                __ZN7WelsDec15PredInter8x16MvEPA30_A2_sPA30_aiaPs($3, $5, 4, $456, $7);
                $457 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 4, 0, 0, $8) | 0);
                $458 = ($457 | 0) == (0);
                if (!($458)) {
                    $$24 = $457;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $870 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, 4, 0, 1, $387) | 0);
                $871 = ($870 | 0) == (0);
                if (!($871)) {
                    $$24 = $870;
                    STACKTOP = sp; return ($$24 | 0);
                }
                $872 = HEAP16[$8 >> 1] | 0;
                $873 = $872 & 65535;
                $874 = HEAP16[$7 >> 1] | 0;
                $875 = $874 & 65535;
                $876 = (($875) + ($873)) | 0;
                $877 = $876 & 65535;
                HEAP16[$7 >> 1] = $877;
                $878 = HEAP16[$387 >> 1] | 0;
                $879 = $878 & 65535;
                $880 = HEAP16[$399 >> 1] | 0;
                $881 = $880 & 65535;
                $882 = (($881) + ($879)) | 0;
                $883 = $882 & 65535;
                HEAP16[$399 >> 1] = $883;
                $sext443$1 = $882 << 16;
                $884 = $sext443$1 >> 16;
                $885 = ($884 | 0) < ($405 | 0);
                $886 = ($884 | 0) > ($407 | 0);
                $or$cond462$1 = $885 | $886;
                if ($or$cond462$1) {
                    HEAP32[$vararg_buffer13 >> 2] = $884;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer13);
                }
                __ZN7WelsDec21UpdateP8x16MotionInfoEPNS_10TagDqLayerEPA30_A2_sPA30_aiaPs($14, $3, $5, 4, $456, $7);
                $887 = HEAP32[$8 >> 2] | 0;
                $888 = HEAP32[$15 >> 2] | 0;
                $889 = HEAP32[$412 >> 2] | 0;
                $890 = ((($889) + ($888 << 6) | 0) + ($891 << 2) | 0);
                $892 = $890;
                $893 = $892;
                HEAP8[$893 >> 0] = $887 & 255; HEAP8[$893 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$893 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$893 + 3 >> 0] = $887 >> 24;
                $894 = (($892) + 4) | 0;
                $895 = $894;
                HEAP8[$895 >> 0] = $887 & 255; HEAP8[$895 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$895 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$895 + 3 >> 0] = $887 >> 24;
                $896 = HEAP32[$412 >> 2] | 0;
                $897 = ((($896) + ($888 << 6) | 0) + ($898 << 2) | 0);
                $899 = $897;
                $900 = $899;
                HEAP8[$900 >> 0] = $887 & 255; HEAP8[$900 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$900 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$900 + 3 >> 0] = $887 >> 24;
                $901 = (($899) + 4) | 0;
                $902 = $901;
                HEAP8[$902 >> 0] = $887 & 255; HEAP8[$902 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$902 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$902 + 3 >> 0] = $887 >> 24;
                $903 = (($4) + ($904 << 2) | 0);
                $905 = $903;
                $906 = $905;
                HEAP8[$906 >> 0] = $887 & 255; HEAP8[$906 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$906 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$906 + 3 >> 0] = $887 >> 24;
                $907 = (($905) + 4) | 0;
                $908 = $907;
                HEAP8[$908 >> 0] = $887 & 255; HEAP8[$908 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$908 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$908 + 3 >> 0] = $887 >> 24;
                $909 = (($4) + ($910 << 2) | 0);
                $911 = $909;
                $912 = $911;
                HEAP8[$912 >> 0] = $887 & 255; HEAP8[$912 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$912 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$912 + 3 >> 0] = $887 >> 24;
                $913 = (($911) + 4) | 0;
                $914 = $913;
                HEAP8[$914 >> 0] = $887 & 255; HEAP8[$914 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$914 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$914 + 3 >> 0] = $887 >> 24;
                $915 = HEAP32[$412 >> 2] | 0;
                $916 = ((($915) + ($888 << 6) | 0) + ($917 << 2) | 0);
                $918 = $916;
                $919 = $918;
                HEAP8[$919 >> 0] = $887 & 255; HEAP8[$919 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$919 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$919 + 3 >> 0] = $887 >> 24;
                $920 = (($918) + 4) | 0;
                $921 = $920;
                HEAP8[$921 >> 0] = $887 & 255; HEAP8[$921 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$921 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$921 + 3 >> 0] = $887 >> 24;
                $922 = HEAP32[$412 >> 2] | 0;
                $923 = ((($922) + ($888 << 6) | 0) + ($924 << 2) | 0);
                $925 = $923;
                $926 = $925;
                HEAP8[$926 >> 0] = $887 & 255; HEAP8[$926 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$926 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$926 + 3 >> 0] = $887 >> 24;
                $927 = (($925) + 4) | 0;
                $928 = $927;
                HEAP8[$928 >> 0] = $887 & 255; HEAP8[$928 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$928 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$928 + 3 >> 0] = $887 >> 24;
                $929 = (($4) + ($930 << 2) | 0);
                $931 = $929;
                $932 = $931;
                HEAP8[$932 >> 0] = $887 & 255; HEAP8[$932 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$932 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$932 + 3 >> 0] = $887 >> 24;
                $933 = (($931) + 4) | 0;
                $934 = $933;
                HEAP8[$934 >> 0] = $887 & 255; HEAP8[$934 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$934 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$934 + 3 >> 0] = $887 >> 24;
                $935 = (($4) + ($936 << 2) | 0);
                $937 = $935;
                $938 = $937;
                HEAP8[$938 >> 0] = $887 & 255; HEAP8[$938 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$938 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$938 + 3 >> 0] = $887 >> 24;
                $939 = (($937) + 4) | 0;
                $940 = $939;
                HEAP8[$940 >> 0] = $887 & 255; HEAP8[$940 + 1 >> 0] = ($887 >> 8) & 255; HEAP8[$940 + 2 >> 0] = ($887 >> 16) & 255; HEAP8[$940 + 3 >> 0] = $887 >> 24;
                $$24 = 0;
                STACKTOP = sp; return ($$24 | 0);
                break;
            }
            case 128: case 64: {
                HEAP32[$10 >> 2] = 0;
                $459 = ((($0)) + 512232 | 0);
                $460 = ((($0)) + 511351 | 0);
                $461 = ((($0)) + 511353 | 0);
                $462 = ((($0)) + 511355 | 0);
                $463 = ((($14)) + 4008 | 0);
                $464 = ((($14)) + 3940 | 0);
                $465 = HEAP32[$459 >> 2] | 0;
                $466 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($465, $460, $6) | 0);
                $467 = ($466 | 0) == (0);
                L151: do {
                    if ($467) {
                        $468 = HEAP32[$6 >> 2] | 0;
                        $469 = ($468 | 0) == (0);
                        if ($469) {
                            $470 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($465, $461, $6) | 0);
                            $471 = ($470 | 0) == (0);
                            if (!($471)) {
                                $$3$i477 = $470;
                                label = 62;
                                break;
                            }
                            $472 = HEAP32[$6 >> 2] | 0;
                            $473 = ($472 | 0) == (0);
                            if ($473) {
                                $$1$ph$ph = 1;
                                label = 63;
                            } else {
                                $474 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($465, $462, $6) | 0);
                                $475 = ($474 | 0) == (0);
                                if (!($475)) {
                                    $$3$i477 = $474;
                                    label = 62;
                                    break;
                                }
                                $476 = HEAP32[$6 >> 2] | 0;
                                $477 = (3 - ($476)) | 0;
                                $478 = ($477 >>> 0) > (3);
                                if ($478) {
                                    $$23$ph = 1038;
                                    break;
                                } else {
                                    $$1$ph490 = $477;
                                }
                            }
                        } else {
                            $$1$ph$ph = 0;
                            label = 63;
                        }
                        if ((label | 0) == 63) {
                            $$1$ph490 = $$1$ph$ph;
                        }
                        $479 = (9408 + ($$1$ph490 << 3) | 0);
                        $480 = HEAP32[$479 >> 2] | 0;
                        $481 = $480 & 255;
                        $482 = HEAP32[$463 >> 2] | 0;
                        $483 = (($482) + ($16 << 2) | 0);
                        HEAP8[$483 >> 0] = $481;
                        $484 = (((9408 + ($$1$ph490 << 3) | 0)) + 4 | 0);
                        $485 = HEAP8[$484 >> 0] | 0;
                        HEAP8[$11 >> 0] = $485;
                        $486 = (((9408 + ($$1$ph490 << 3) | 0)) + 5 | 0);
                        $487 = HEAP8[$486 >> 0] | 0;
                        HEAP8[$12 >> 0] = $487;
                        $488 = ($$1$ph490 | 0) == (0);
                        $489 = $488 & 1;
                        $490 = HEAP32[$464 >> 2] | 0;
                        $491 = (($490) + ($16) | 0);
                        $492 = HEAP8[$491 >> 0] | 0;
                        $493 = $492 & 255;
                        $494 = $493 & $489;
                        $495 = $494 & 255;
                        HEAP8[$491 >> 0] = $495;
                        $496 = HEAP32[$459 >> 2] | 0;
                        $497 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($496, $460, $6) | 0);
                        $498 = ($497 | 0) == (0);
                        if ($498) {
                            $1111 = HEAP32[$6 >> 2] | 0;
                            $1112 = ($1111 | 0) == (0);
                            if ($1112) {
                                $1113 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($496, $461, $6) | 0);
                                $1114 = ($1113 | 0) == (0);
                                if (!($1114)) {
                                    $$3$i477 = $1113;
                                    label = 62;
                                    break;
                                }
                                $1115 = HEAP32[$6 >> 2] | 0;
                                $1116 = ($1115 | 0) == (0);
                                if ($1116) {
                                    $$1$ph$ph$1 = 1;
                                    label = 153;
                                } else {
                                    $1117 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($496, $462, $6) | 0);
                                    $1118 = ($1117 | 0) == (0);
                                    if (!($1118)) {
                                        $$3$i477 = $1117;
                                        label = 62;
                                        break;
                                    }
                                    $1119 = HEAP32[$6 >> 2] | 0;
                                    $1120 = (3 - ($1119)) | 0;
                                    $1121 = ($1120 >>> 0) > (3);
                                    if ($1121) {
                                        $$23$ph = 1038;
                                        break;
                                    } else {
                                        $$1$ph490$1 = $1120;
                                    }
                                }
                            } else {
                                $$1$ph$ph$1 = 0;
                                label = 153;
                            }
                            if ((label | 0) == 153) {
                                $$1$ph490$1 = $$1$ph$ph$1;
                            }
                            $1122 = (9408 + ($$1$ph490$1 << 3) | 0);
                            $1123 = HEAP32[$1122 >> 2] | 0;
                            $1124 = $1123 & 255;
                            $1125 = HEAP32[$463 >> 2] | 0;
                            $1126 = (((($1125) + ($16 << 2) | 0)) + 1 | 0);
                            HEAP8[$1126 >> 0] = $1124;
                            $1127 = (((9408 + ($$1$ph490$1 << 3) | 0)) + 4 | 0);
                            $1128 = HEAP8[$1127 >> 0] | 0;
                            $1129 = ((($11)) + 1 | 0);
                            HEAP8[$1129 >> 0] = $1128;
                            $1130 = (((9408 + ($$1$ph490$1 << 3) | 0)) + 5 | 0);
                            $1131 = HEAP8[$1130 >> 0] | 0;
                            $1132 = ((($12)) + 1 | 0);
                            HEAP8[$1132 >> 0] = $1131;
                            $1133 = ($$1$ph490$1 | 0) == (0);
                            $1134 = $1133 & 1;
                            $1135 = HEAP32[$464 >> 2] | 0;
                            $1136 = (($1135) + ($16) | 0);
                            $1137 = HEAP8[$1136 >> 0] | 0;
                            $1138 = $1137 & 255;
                            $1139 = $1138 & $1134;
                            $1140 = $1139 & 255;
                            HEAP8[$1136 >> 0] = $1140;
                            $1141 = HEAP32[$459 >> 2] | 0;
                            $1142 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1141, $460, $6) | 0);
                            $1143 = ($1142 | 0) == (0);
                            if ($1143) {
                                $1144 = HEAP32[$6 >> 2] | 0;
                                $1145 = ($1144 | 0) == (0);
                                if ($1145) {
                                    $1146 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1141, $461, $6) | 0);
                                    $1147 = ($1146 | 0) == (0);
                                    if (!($1147)) {
                                        $$3$i477 = $1146;
                                        label = 62;
                                        break;
                                    }
                                    $1148 = HEAP32[$6 >> 2] | 0;
                                    $1149 = ($1148 | 0) == (0);
                                    if ($1149) {
                                        $$1$ph$ph$2 = 1;
                                        label = 160;
                                    } else {
                                        $1150 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1141, $462, $6) | 0);
                                        $1151 = ($1150 | 0) == (0);
                                        if (!($1151)) {
                                            $$3$i477 = $1150;
                                            label = 62;
                                            break;
                                        }
                                        $1152 = HEAP32[$6 >> 2] | 0;
                                        $1153 = (3 - ($1152)) | 0;
                                        $1154 = ($1153 >>> 0) > (3);
                                        if ($1154) {
                                            $$23$ph = 1038;
                                            break;
                                        } else {
                                            $$1$ph490$2 = $1153;
                                        }
                                    }
                                } else {
                                    $$1$ph$ph$2 = 0;
                                    label = 160;
                                }
                                if ((label | 0) == 160) {
                                    $$1$ph490$2 = $$1$ph$ph$2;
                                }
                                $1155 = (9408 + ($$1$ph490$2 << 3) | 0);
                                $1156 = HEAP32[$1155 >> 2] | 0;
                                $1157 = $1156 & 255;
                                $1158 = HEAP32[$463 >> 2] | 0;
                                $1159 = (((($1158) + ($16 << 2) | 0)) + 2 | 0);
                                HEAP8[$1159 >> 0] = $1157;
                                $1160 = (((9408 + ($$1$ph490$2 << 3) | 0)) + 4 | 0);
                                $1161 = HEAP8[$1160 >> 0] | 0;
                                $1162 = ((($11)) + 2 | 0);
                                HEAP8[$1162 >> 0] = $1161;
                                $1163 = (((9408 + ($$1$ph490$2 << 3) | 0)) + 5 | 0);
                                $1164 = HEAP8[$1163 >> 0] | 0;
                                $1165 = ((($12)) + 2 | 0);
                                HEAP8[$1165 >> 0] = $1164;
                                $1166 = ($$1$ph490$2 | 0) == (0);
                                $1167 = $1166 & 1;
                                $1168 = HEAP32[$464 >> 2] | 0;
                                $1169 = (($1168) + ($16) | 0);
                                $1170 = HEAP8[$1169 >> 0] | 0;
                                $1171 = $1170 & 255;
                                $1172 = $1171 & $1167;
                                $1173 = $1172 & 255;
                                HEAP8[$1169 >> 0] = $1173;
                                $1174 = HEAP32[$459 >> 2] | 0;
                                $1175 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1174, $460, $6) | 0);
                                $1176 = ($1175 | 0) == (0);
                                if ($1176) {
                                    $1177 = HEAP32[$6 >> 2] | 0;
                                    $1178 = ($1177 | 0) == (0);
                                    if ($1178) {
                                        $1179 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1174, $461, $6) | 0);
                                        $1180 = ($1179 | 0) == (0);
                                        if (!($1180)) {
                                            $$3$i477 = $1179;
                                            label = 62;
                                            break;
                                        }
                                        $1181 = HEAP32[$6 >> 2] | 0;
                                        $1182 = ($1181 | 0) == (0);
                                        if ($1182) {
                                            $$1$ph$ph$3 = 1;
                                            label = 167;
                                        } else {
                                            $1183 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($1174, $462, $6) | 0);
                                            $1184 = ($1183 | 0) == (0);
                                            if (!($1184)) {
                                                $$3$i477 = $1183;
                                                label = 62;
                                                break;
                                            }
                                            $1185 = HEAP32[$6 >> 2] | 0;
                                            $1186 = (3 - ($1185)) | 0;
                                            $1187 = ($1186 >>> 0) > (3);
                                            if ($1187) {
                                                $$23$ph = 1038;
                                                break;
                                            } else {
                                                $$1$ph490$3 = $1186;
                                            }
                                        }
                                    } else {
                                        $$1$ph$ph$3 = 0;
                                        label = 167;
                                    }
                                    if ((label | 0) == 167) {
                                        $$1$ph490$3 = $$1$ph$ph$3;
                                    }
                                    $1188 = (9408 + ($$1$ph490$3 << 3) | 0);
                                    $1189 = HEAP32[$1188 >> 2] | 0;
                                    $1190 = $1189 & 255;
                                    $1191 = HEAP32[$463 >> 2] | 0;
                                    $1192 = (((($1191) + ($16 << 2) | 0)) + 3 | 0);
                                    HEAP8[$1192 >> 0] = $1190;
                                    $1193 = (((9408 + ($$1$ph490$3 << 3) | 0)) + 4 | 0);
                                    $1194 = HEAP8[$1193 >> 0] | 0;
                                    $1195 = ((($11)) + 3 | 0);
                                    HEAP8[$1195 >> 0] = $1194;
                                    $1196 = (((9408 + ($$1$ph490$3 << 3) | 0)) + 5 | 0);
                                    $1197 = HEAP8[$1196 >> 0] | 0;
                                    $1198 = ((($12)) + 3 | 0);
                                    HEAP8[$1198 >> 0] = $1197;
                                    $1199 = ($$1$ph490$3 | 0) == (0);
                                    $1200 = $1199 & 1;
                                    $1201 = HEAP32[$464 >> 2] | 0;
                                    $1202 = (($1201) + ($16) | 0);
                                    $1203 = HEAP8[$1202 >> 0] | 0;
                                    $1204 = $1203 & 255;
                                    $1205 = $1204 & $1200;
                                    $1206 = $1205 & 255;
                                    HEAP8[$1202 >> 0] = $1206;
                                    $506 = ((($0)) + 512344 | 0);
                                    $508 = ((($0)) + 242340 | 0);
                                    $511 = ((($0)) + 116 | 0);
                                    $514 = ((($0)) + 512345 | 0);
                                    $533 = ((($14)) + 3932 | 0);
                                    $1207 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, 0, $5, 0, 0, $34, 0, $10) | 0);
                                    $1208 = ($1207 | 0) == (0);
                                    if ($1208) {
                                        $499 = HEAP8[$10 >> 0] | 0;
                                        $500 = $499 << 24 >> 24;
                                        $501 = ($499 << 24 >> 24) > (-1);
                                        $502 = ($34 | 0) > ($500 | 0);
                                        $or$cond465 = $501 & $502;
                                        if ($or$cond465) {
                                            $503 = (((($0)) + 5468 | 0) + ($500 << 2) | 0);
                                            $504 = HEAP32[$503 >> 2] | 0;
                                            $505 = ($504 | 0) == (0 | 0);
                                            if ($505) {
                                                label = 68;
                                            } else {
                                                $519 = $499;
                                            }
                                        } else {
                                            label = 68;
                                        }
                                        if ((label | 0) == 68) {
                                            HEAP8[$506 >> 0] = 1;
                                            $507 = HEAP32[$508 >> 2] | 0;
                                            $509 = ($507 | 0) == (0);
                                            if ($509) {
                                                $$23$ph = 1041;
                                                break;
                                            }
                                            HEAP8[$10 >> 0] = 0;
                                            $510 = HEAP32[$511 >> 2] | 0;
                                            $512 = $510 | 4;
                                            HEAP32[$511 >> 2] = $512;
                                            $519 = 0;
                                        }
                                        $513 = HEAP8[$514 >> 0] | 0;
                                        $515 = ($513 << 24 >> 24) == (0);
                                        if ($515) {
                                            $516 = HEAP8[$506 >> 0] | 0;
                                            $517 = ($516 << 24 >> 24) == (0);
                                            if ($517) {
                                                $518 = $519 << 24 >> 24;
                                                $520 = (((($0)) + 5468 | 0) + ($518 << 2) | 0);
                                                $521 = HEAP32[$520 >> 2] | 0;
                                                $522 = ($521 | 0) == (0 | 0);
                                                if ($522) {
                                                    $527 = 0;
                                                } else {
                                                    $523 = ((($521)) + 72 | 0);
                                                    $524 = HEAP8[$523 >> 0] | 0;
                                                    $525 = ($524 << 24 >> 24) != (0);
                                                    $527 = $525;
                                                }
                                                $526 = $527 ^ 1;
                                                $529 = $526;
                                            } else {
                                                $529 = 1;
                                            }
                                        } else {
                                            $529 = 1;
                                        }
                                        $528 = $529 & 1;
                                        HEAP8[$506 >> 0] = $528;
                                        $530 = HEAP32[$15 >> 2] | 0;
                                        $531 = HEAP8[15415] | 0;
                                        $532 = HEAP32[$533 >> 2] | 0;
                                        $534 = $531 & 255;
                                        $535 = (($534) + 5) | 0;
                                        $536 = ((($532) + ($530 << 4) | 0) + ($535) | 0);
                                        HEAP8[$536 >> 0] = $519;
                                        $537 = HEAP32[$533 >> 2] | 0;
                                        $538 = (($534) + 4) | 0;
                                        $539 = ((($537) + ($530 << 4) | 0) + ($538) | 0);
                                        HEAP8[$539 >> 0] = $519;
                                        $540 = HEAP32[$533 >> 2] | 0;
                                        $541 = (($534) + 1) | 0;
                                        $542 = ((($540) + ($530 << 4) | 0) + ($541) | 0);
                                        HEAP8[$542 >> 0] = $519;
                                        $543 = HEAP32[$533 >> 2] | 0;
                                        $544 = ((($543) + ($530 << 4) | 0) + ($534) | 0);
                                        HEAP8[$544 >> 0] = $519;
                                        $545 = ((($10)) + 1 | 0);
                                        $546 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, 0, $5, 0, 4, $34, 0, $545) | 0);
                                        $547 = ($546 | 0) == (0);
                                        if ($547) {
                                            $991 = HEAP8[$545 >> 0] | 0;
                                            $992 = $991 << 24 >> 24;
                                            $993 = ($991 << 24 >> 24) > (-1);
                                            $994 = ($34 | 0) > ($992 | 0);
                                            $or$cond465$1 = $993 & $994;
                                            if ($or$cond465$1) {
                                                $995 = (((($0)) + 5468 | 0) + ($992 << 2) | 0);
                                                $996 = HEAP32[$995 >> 2] | 0;
                                                $997 = ($996 | 0) == (0 | 0);
                                                if ($997) {
                                                    label = 123;
                                                } else {
                                                    $1007 = $991;
                                                }
                                            } else {
                                                label = 123;
                                            }
                                            if ((label | 0) == 123) {
                                                HEAP8[$506 >> 0] = 1;
                                                $998 = HEAP32[$508 >> 2] | 0;
                                                $999 = ($998 | 0) == (0);
                                                if ($999) {
                                                    $$23$ph = 1041;
                                                    break;
                                                }
                                                HEAP8[$545 >> 0] = 0;
                                                $1000 = HEAP32[$511 >> 2] | 0;
                                                $1001 = $1000 | 4;
                                                HEAP32[$511 >> 2] = $1001;
                                                $1007 = 0;
                                            }
                                            $1002 = HEAP8[$514 >> 0] | 0;
                                            $1003 = ($1002 << 24 >> 24) == (0);
                                            if ($1003) {
                                                $1004 = HEAP8[$506 >> 0] | 0;
                                                $1005 = ($1004 << 24 >> 24) == (0);
                                                if ($1005) {
                                                    $1006 = $1007 << 24 >> 24;
                                                    $1008 = (((($0)) + 5468 | 0) + ($1006 << 2) | 0);
                                                    $1009 = HEAP32[$1008 >> 2] | 0;
                                                    $1010 = ($1009 | 0) == (0 | 0);
                                                    if ($1010) {
                                                        $1014 = 1;
                                                    } else {
                                                        $1011 = ((($1009)) + 72 | 0);
                                                        $1012 = HEAP8[$1011 >> 0] | 0;
                                                        $1013 = $1012 ^ 1;
                                                        $1014 = $1013;
                                                    }
                                                } else {
                                                    $1014 = 1;
                                                }
                                            } else {
                                                $1014 = 1;
                                            }
                                            HEAP8[$506 >> 0] = $1014;
                                            $1015 = HEAP32[$15 >> 2] | 0;
                                            $1016 = HEAP8[(15419) >> 0] | 0;
                                            $1017 = HEAP32[$533 >> 2] | 0;
                                            $1018 = $1016 & 255;
                                            $1019 = (($1018) + 5) | 0;
                                            $1020 = ((($1017) + ($1015 << 4) | 0) + ($1019) | 0);
                                            HEAP8[$1020 >> 0] = $1007;
                                            $1021 = HEAP32[$533 >> 2] | 0;
                                            $1022 = (($1018) + 4) | 0;
                                            $1023 = ((($1021) + ($1015 << 4) | 0) + ($1022) | 0);
                                            HEAP8[$1023 >> 0] = $1007;
                                            $1024 = HEAP32[$533 >> 2] | 0;
                                            $1025 = (($1018) + 1) | 0;
                                            $1026 = ((($1024) + ($1015 << 4) | 0) + ($1025) | 0);
                                            HEAP8[$1026 >> 0] = $1007;
                                            $1027 = HEAP32[$533 >> 2] | 0;
                                            $1028 = ((($1027) + ($1015 << 4) | 0) + ($1018) | 0);
                                            HEAP8[$1028 >> 0] = $1007;
                                            $1029 = ((($10)) + 2 | 0);
                                            $1030 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, 0, $5, 0, 8, $34, 0, $1029) | 0);
                                            $1031 = ($1030 | 0) == (0);
                                            if ($1031) {
                                                $1032 = HEAP8[$1029 >> 0] | 0;
                                                $1033 = $1032 << 24 >> 24;
                                                $1034 = ($1032 << 24 >> 24) > (-1);
                                                $1035 = ($34 | 0) > ($1033 | 0);
                                                $or$cond465$2 = $1034 & $1035;
                                                if ($or$cond465$2) {
                                                    $1036 = (((($0)) + 5468 | 0) + ($1033 << 2) | 0);
                                                    $1037 = HEAP32[$1036 >> 2] | 0;
                                                    $1038 = ($1037 | 0) == (0 | 0);
                                                    if ($1038) {
                                                        label = 132;
                                                    } else {
                                                        $1048 = $1032;
                                                    }
                                                } else {
                                                    label = 132;
                                                }
                                                if ((label | 0) == 132) {
                                                    HEAP8[$506 >> 0] = 1;
                                                    $1039 = HEAP32[$508 >> 2] | 0;
                                                    $1040 = ($1039 | 0) == (0);
                                                    if ($1040) {
                                                        $$23$ph = 1041;
                                                        break;
                                                    }
                                                    HEAP8[$1029 >> 0] = 0;
                                                    $1041 = HEAP32[$511 >> 2] | 0;
                                                    $1042 = $1041 | 4;
                                                    HEAP32[$511 >> 2] = $1042;
                                                    $1048 = 0;
                                                }
                                                $1043 = HEAP8[$514 >> 0] | 0;
                                                $1044 = ($1043 << 24 >> 24) == (0);
                                                do {
                                                    if ($1044) {
                                                        $1045 = HEAP8[$506 >> 0] | 0;
                                                        $1046 = ($1045 << 24 >> 24) == (0);
                                                        if (!($1046)) {
                                                            $1055 = 1;
                                                            break;
                                                        }
                                                        $1047 = $1048 << 24 >> 24;
                                                        $1049 = (((($0)) + 5468 | 0) + ($1047 << 2) | 0);
                                                        $1050 = HEAP32[$1049 >> 2] | 0;
                                                        $1051 = ($1050 | 0) == (0 | 0);
                                                        if ($1051) {
                                                            $1055 = 1;
                                                            break;
                                                        }
                                                        $1052 = ((($1050)) + 72 | 0);
                                                        $1053 = HEAP8[$1052 >> 0] | 0;
                                                        $1054 = $1053 ^ 1;
                                                        $1055 = $1054;
                                                    } else {
                                                        $1055 = 1;
                                                    }
                                                } while (0);
                                                HEAP8[$506 >> 0] = $1055;
                                                $1056 = HEAP32[$15 >> 2] | 0;
                                                $1057 = HEAP8[(15423) >> 0] | 0;
                                                $1058 = HEAP32[$533 >> 2] | 0;
                                                $1059 = $1057 & 255;
                                                $1060 = (($1059) + 5) | 0;
                                                $1061 = ((($1058) + ($1056 << 4) | 0) + ($1060) | 0);
                                                HEAP8[$1061 >> 0] = $1048;
                                                $1062 = HEAP32[$533 >> 2] | 0;
                                                $1063 = (($1059) + 4) | 0;
                                                $1064 = ((($1062) + ($1056 << 4) | 0) + ($1063) | 0);
                                                HEAP8[$1064 >> 0] = $1048;
                                                $1065 = HEAP32[$533 >> 2] | 0;
                                                $1066 = (($1059) + 1) | 0;
                                                $1067 = ((($1065) + ($1056 << 4) | 0) + ($1066) | 0);
                                                HEAP8[$1067 >> 0] = $1048;
                                                $1068 = HEAP32[$533 >> 2] | 0;
                                                $1069 = ((($1068) + ($1056 << 4) | 0) + ($1059) | 0);
                                                HEAP8[$1069 >> 0] = $1048;
                                                $1070 = ((($10)) + 3 | 0);
                                                $1071 = (__ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, 0, $5, 0, 12, $34, 0, $1070) | 0);
                                                $1072 = ($1071 | 0) == (0);
                                                if ($1072) {
                                                    $1073 = HEAP8[$1070 >> 0] | 0;
                                                    $1074 = $1073 << 24 >> 24;
                                                    $1075 = ($1073 << 24 >> 24) > (-1);
                                                    $1076 = ($34 | 0) > ($1074 | 0);
                                                    $or$cond465$3 = $1075 & $1076;
                                                    if ($or$cond465$3) {
                                                        $1077 = (((($0)) + 5468 | 0) + ($1074 << 2) | 0);
                                                        $1078 = HEAP32[$1077 >> 2] | 0;
                                                        $1079 = ($1078 | 0) == (0 | 0);
                                                        if ($1079) {
                                                            label = 141;
                                                        } else {
                                                            $1089 = $1073;
                                                        }
                                                    } else {
                                                        label = 141;
                                                    }
                                                    if ((label | 0) == 141) {
                                                        HEAP8[$506 >> 0] = 1;
                                                        $1080 = HEAP32[$508 >> 2] | 0;
                                                        $1081 = ($1080 | 0) == (0);
                                                        if ($1081) {
                                                            $$23$ph = 1041;
                                                            break;
                                                        }
                                                        HEAP8[$1070 >> 0] = 0;
                                                        $1082 = HEAP32[$511 >> 2] | 0;
                                                        $1083 = $1082 | 4;
                                                        HEAP32[$511 >> 2] = $1083;
                                                        $1089 = 0;
                                                    }
                                                    $1084 = HEAP8[$514 >> 0] | 0;
                                                    $1085 = ($1084 << 24 >> 24) == (0);
                                                    do {
                                                        if ($1085) {
                                                            $1086 = HEAP8[$506 >> 0] | 0;
                                                            $1087 = ($1086 << 24 >> 24) == (0);
                                                            if (!($1087)) {
                                                                $1096 = 1;
                                                                break;
                                                            }
                                                            $1088 = $1089 << 24 >> 24;
                                                            $1090 = (((($0)) + 5468 | 0) + ($1088 << 2) | 0);
                                                            $1091 = HEAP32[$1090 >> 2] | 0;
                                                            $1092 = ($1091 | 0) == (0 | 0);
                                                            if ($1092) {
                                                                $1096 = 1;
                                                                break;
                                                            }
                                                            $1093 = ((($1091)) + 72 | 0);
                                                            $1094 = HEAP8[$1093 >> 0] | 0;
                                                            $1095 = $1094 ^ 1;
                                                            $1096 = $1095;
                                                        } else {
                                                            $1096 = 1;
                                                        }
                                                    } while (0);
                                                    HEAP8[$506 >> 0] = $1096;
                                                    $1097 = HEAP32[$15 >> 2] | 0;
                                                    $1098 = HEAP8[(15427) >> 0] | 0;
                                                    $1099 = HEAP32[$533 >> 2] | 0;
                                                    $1100 = $1098 & 255;
                                                    $1101 = (($1100) + 5) | 0;
                                                    $1102 = ((($1099) + ($1097 << 4) | 0) + ($1101) | 0);
                                                    HEAP8[$1102 >> 0] = $1089;
                                                    $1103 = HEAP32[$533 >> 2] | 0;
                                                    $1104 = (($1100) + 4) | 0;
                                                    $1105 = ((($1103) + ($1097 << 4) | 0) + ($1104) | 0);
                                                    HEAP8[$1105 >> 0] = $1089;
                                                    $1106 = HEAP32[$533 >> 2] | 0;
                                                    $1107 = (($1100) + 1) | 0;
                                                    $1108 = ((($1106) + ($1097 << 4) | 0) + ($1107) | 0);
                                                    HEAP8[$1108 >> 0] = $1089;
                                                    $1109 = HEAP32[$533 >> 2] | 0;
                                                    $1110 = ((($1109) + ($1097 << 4) | 0) + ($1100) | 0);
                                                    HEAP8[$1110 >> 0] = $1089;
                                                    $580 = ((($8)) + 2 | 0);
                                                    $592 = ((($7)) + 2 | 0);
                                                    $598 = $30 << 16 >> 16;
                                                    $600 = $32 << 16 >> 16;
                                                    $612 = ((($14)) + 3916 | 0);
                                                    $639 = ((($14)) + 3924 | 0);
                                                    $602 = ((($7)) + 4 | 0);
                                                    $604 = ((($8)) + 4 | 0);
                                                    $$6420537 = 0; $566 = $485; $569 = $487;
                                                    while (1) {
                                                        $548 = HEAP32[$463 >> 2] | 0;
                                                        $549 = ((($548) + ($16 << 2) | 0) + ($$6420537) | 0);
                                                        $550 = HEAP8[$549 >> 0] | 0;
                                                        $551 = $550 << 24 >> 24;
                                                        $552 = $$6420537 << 2;
                                                        $553 = (10975 + ($552) | 0);
                                                        $554 = HEAP8[$553 >> 0] | 0;
                                                        $555 = (($10) + ($$6420537) | 0);
                                                        $556 = HEAP8[$555 >> 0] | 0;
                                                        $557 = $554 & 255;
                                                        $558 = (($557) + 7) | 0;
                                                        $559 = (($5) + ($558) | 0);
                                                        HEAP8[$559 >> 0] = $556;
                                                        $560 = (($557) + 6) | 0;
                                                        $561 = (($5) + ($560) | 0);
                                                        HEAP8[$561 >> 0] = $556;
                                                        $562 = (($557) + 1) | 0;
                                                        $563 = (($5) + ($562) | 0);
                                                        HEAP8[$563 >> 0] = $556;
                                                        $564 = (($5) + ($557) | 0);
                                                        HEAP8[$564 >> 0] = $556;
                                                        $565 = $566 << 24 >> 24;
                                                        $567 = ($566 << 24 >> 24) > (0);
                                                        L240: do {
                                                            if ($567) {
                                                                $568 = $569 << 24 >> 24;
                                                                $570 = ($550 << 24 >> 24) == (4);
                                                                $$0421535 = 0;
                                                                while (1) {
                                                                    $571 = Math_imul($$0421535, $568) | 0;
                                                                    $572 = (($571) + ($552)) | 0;
                                                                    $sext = $572 << 16;
                                                                    $573 = $sext >> 16;
                                                                    $574 = (15415 + ($573) | 0);
                                                                    $575 = HEAP8[$574 >> 0] | 0;
                                                                    $576 = (10975 + ($573) | 0);
                                                                    $577 = HEAP8[$576 >> 0] | 0;
                                                                    __ZN7WelsDec6PredMvEPA30_A2_sPA30_aiiaPs($3, $5, $573, $568, $556, $7);
                                                                    $578 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, $573, 0, 0, $8) | 0);
                                                                    $579 = ($578 | 0) == (0);
                                                                    if (!($579)) {
                                                                        $$23$ph = $578;
                                                                        break L151;
                                                                    }
                                                                    $581 = (__ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, 0, $5, $4, $573, 0, 1, $580) | 0);
                                                                    $582 = ($581 | 0) == (0);
                                                                    if (!($582)) {
                                                                        $$23$ph = $581;
                                                                        break L151;
                                                                    }
                                                                    $583 = HEAP16[$8 >> 1] | 0;
                                                                    $584 = $583 & 65535;
                                                                    $585 = HEAP16[$7 >> 1] | 0;
                                                                    $586 = $585 & 65535;
                                                                    $587 = (($586) + ($584)) | 0;
                                                                    $588 = $587 & 65535;
                                                                    HEAP16[$7 >> 1] = $588;
                                                                    $589 = HEAP16[$580 >> 1] | 0;
                                                                    $590 = $589 & 65535;
                                                                    $591 = HEAP16[$592 >> 1] | 0;
                                                                    $593 = $591 & 65535;
                                                                    $594 = (($593) + ($590)) | 0;
                                                                    $595 = $594 & 65535;
                                                                    HEAP16[$592 >> 1] = $595;
                                                                    $sext441 = $594 << 16;
                                                                    $596 = $sext441 >> 16;
                                                                    $597 = ($596 | 0) < ($598 | 0);
                                                                    $599 = ($596 | 0) > ($600 | 0);
                                                                    $or$cond469 = $597 | $599;
                                                                    if ($or$cond469) {
                                                                        HEAP32[$vararg_buffer7 >> 2] = $596;
                                                                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 25714, $vararg_buffer7);
                                                                    }
                                                                    switch ($551 | 0) {
                                                                        case 1: {
                                                                            $601 = HEAP32[$7 >> 2] | 0;
                                                                            HEAP32[$602 >> 2] = $601;
                                                                            $603 = HEAP32[$8 >> 2] | 0;
                                                                            HEAP32[$604 >> 2] = $603;
                                                                            $605 = $7;
                                                                            $606 = $605;
                                                                            $607 = HEAP32[$606 >> 2] | 0;
                                                                            $608 = (($605) + 4) | 0;
                                                                            $609 = $608;
                                                                            $610 = HEAP32[$609 >> 2] | 0;
                                                                            $611 = HEAP32[$612 >> 2] | 0;
                                                                            $613 = $575 & 255;
                                                                            $614 = ((($611) + ($16 << 6) | 0) + ($613 << 2) | 0);
                                                                            $615 = $614;
                                                                            $616 = $615;
                                                                            HEAP8[$616 >> 0] = $607 & 255; HEAP8[$616 + 1 >> 0] = ($607 >> 8) & 255; HEAP8[$616 + 2 >> 0] = ($607 >> 16) & 255; HEAP8[$616 + 3 >> 0] = $607 >> 24;
                                                                            $617 = (($615) + 4) | 0;
                                                                            $618 = $617;
                                                                            HEAP8[$618 >> 0] = $610 & 255; HEAP8[$618 + 1 >> 0] = ($610 >> 8) & 255; HEAP8[$618 + 2 >> 0] = ($610 >> 16) & 255; HEAP8[$618 + 3 >> 0] = $610 >> 24;
                                                                            $619 = $7;
                                                                            $620 = $619;
                                                                            $621 = HEAP32[$620 >> 2] | 0;
                                                                            $622 = (($619) + 4) | 0;
                                                                            $623 = $622;
                                                                            $624 = HEAP32[$623 >> 2] | 0;
                                                                            $625 = HEAP32[$612 >> 2] | 0;
                                                                            $626 = (($613) + 4) | 0;
                                                                            $627 = ((($625) + ($16 << 6) | 0) + ($626 << 2) | 0);
                                                                            $628 = $627;
                                                                            $629 = $628;
                                                                            HEAP8[$629 >> 0] = $621 & 255; HEAP8[$629 + 1 >> 0] = ($621 >> 8) & 255; HEAP8[$629 + 2 >> 0] = ($621 >> 16) & 255; HEAP8[$629 + 3 >> 0] = $621 >> 24;
                                                                            $630 = (($628) + 4) | 0;
                                                                            $631 = $630;
                                                                            HEAP8[$631 >> 0] = $624 & 255; HEAP8[$631 + 1 >> 0] = ($624 >> 8) & 255; HEAP8[$631 + 2 >> 0] = ($624 >> 16) & 255; HEAP8[$631 + 3 >> 0] = $624 >> 24;
                                                                            $632 = $8;
                                                                            $633 = $632;
                                                                            $634 = HEAP32[$633 >> 2] | 0;
                                                                            $635 = (($632) + 4) | 0;
                                                                            $636 = $635;
                                                                            $637 = HEAP32[$636 >> 2] | 0;
                                                                            $638 = HEAP32[$639 >> 2] | 0;
                                                                            $640 = ((($638) + ($16 << 6) | 0) + ($613 << 2) | 0);
                                                                            $641 = $640;
                                                                            $642 = $641;
                                                                            HEAP8[$642 >> 0] = $634 & 255; HEAP8[$642 + 1 >> 0] = ($634 >> 8) & 255; HEAP8[$642 + 2 >> 0] = ($634 >> 16) & 255; HEAP8[$642 + 3 >> 0] = $634 >> 24;
                                                                            $643 = (($641) + 4) | 0;
                                                                            $644 = $643;
                                                                            HEAP8[$644 >> 0] = $637 & 255; HEAP8[$644 + 1 >> 0] = ($637 >> 8) & 255; HEAP8[$644 + 2 >> 0] = ($637 >> 16) & 255; HEAP8[$644 + 3 >> 0] = $637 >> 24;
                                                                            $645 = HEAP32[$639 >> 2] | 0;
                                                                            $646 = ((($645) + ($16 << 6) | 0) + ($626 << 2) | 0);
                                                                            $647 = $646;
                                                                            $648 = $647;
                                                                            HEAP8[$648 >> 0] = $634 & 255; HEAP8[$648 + 1 >> 0] = ($634 >> 8) & 255; HEAP8[$648 + 2 >> 0] = ($634 >> 16) & 255; HEAP8[$648 + 3 >> 0] = $634 >> 24;
                                                                            $649 = (($647) + 4) | 0;
                                                                            $650 = $649;
                                                                            HEAP8[$650 >> 0] = $637 & 255; HEAP8[$650 + 1 >> 0] = ($637 >> 8) & 255; HEAP8[$650 + 2 >> 0] = ($637 >> 16) & 255; HEAP8[$650 + 3 >> 0] = $637 >> 24;
                                                                            $651 = $7;
                                                                            $652 = $651;
                                                                            $653 = HEAP32[$652 >> 2] | 0;
                                                                            $654 = (($651) + 4) | 0;
                                                                            $655 = $654;
                                                                            $656 = HEAP32[$655 >> 2] | 0;
                                                                            $657 = $577 & 255;
                                                                            $658 = (($3) + ($657 << 2) | 0);
                                                                            $659 = $658;
                                                                            $660 = $659;
                                                                            HEAP8[$660 >> 0] = $653 & 255; HEAP8[$660 + 1 >> 0] = ($653 >> 8) & 255; HEAP8[$660 + 2 >> 0] = ($653 >> 16) & 255; HEAP8[$660 + 3 >> 0] = $653 >> 24;
                                                                            $661 = (($659) + 4) | 0;
                                                                            $662 = $661;
                                                                            HEAP8[$662 >> 0] = $656 & 255; HEAP8[$662 + 1 >> 0] = ($656 >> 8) & 255; HEAP8[$662 + 2 >> 0] = ($656 >> 16) & 255; HEAP8[$662 + 3 >> 0] = $656 >> 24;
                                                                            $663 = (($657) + 6) | 0;
                                                                            $664 = (($3) + ($663 << 2) | 0);
                                                                            $665 = $664;
                                                                            $666 = $665;
                                                                            HEAP8[$666 >> 0] = $653 & 255; HEAP8[$666 + 1 >> 0] = ($653 >> 8) & 255; HEAP8[$666 + 2 >> 0] = ($653 >> 16) & 255; HEAP8[$666 + 3 >> 0] = $653 >> 24;
                                                                            $667 = (($665) + 4) | 0;
                                                                            $668 = $667;
                                                                            HEAP8[$668 >> 0] = $656 & 255; HEAP8[$668 + 1 >> 0] = ($656 >> 8) & 255; HEAP8[$668 + 2 >> 0] = ($656 >> 16) & 255; HEAP8[$668 + 3 >> 0] = $656 >> 24;
                                                                            $669 = (($4) + ($657 << 2) | 0);
                                                                            $670 = $669;
                                                                            $671 = $670;
                                                                            HEAP8[$671 >> 0] = $634 & 255; HEAP8[$671 + 1 >> 0] = ($634 >> 8) & 255; HEAP8[$671 + 2 >> 0] = ($634 >> 16) & 255; HEAP8[$671 + 3 >> 0] = $634 >> 24;
                                                                            $672 = (($670) + 4) | 0;
                                                                            $673 = $672;
                                                                            HEAP8[$673 >> 0] = $637 & 255; HEAP8[$673 + 1 >> 0] = ($637 >> 8) & 255; HEAP8[$673 + 2 >> 0] = ($637 >> 16) & 255; HEAP8[$673 + 3 >> 0] = $637 >> 24;
                                                                            $674 = (($4) + ($663 << 2) | 0);
                                                                            $675 = $674;
                                                                            $676 = $675;
                                                                            HEAP8[$676 >> 0] = $634 & 255; HEAP8[$676 + 1 >> 0] = ($634 >> 8) & 255; HEAP8[$676 + 2 >> 0] = ($634 >> 16) & 255; HEAP8[$676 + 3 >> 0] = $634 >> 24;
                                                                            $677 = (($675) + 4) | 0;
                                                                            $678 = $677;
                                                                            HEAP8[$678 >> 0] = $637 & 255; HEAP8[$678 + 1 >> 0] = ($637 >> 8) & 255; HEAP8[$678 + 2 >> 0] = ($637 >> 16) & 255; HEAP8[$678 + 3 >> 0] = $637 >> 24;
                                                                            break;
                                                                        }
                                                                        case 2: {
                                                                            $679 = HEAP32[$7 >> 2] | 0;
                                                                            HEAP32[$602 >> 2] = $679;
                                                                            $680 = HEAP32[$8 >> 2] | 0;
                                                                            HEAP32[$604 >> 2] = $680;
                                                                            $681 = $7;
                                                                            $682 = $681;
                                                                            $683 = HEAP32[$682 >> 2] | 0;
                                                                            $684 = (($681) + 4) | 0;
                                                                            $685 = $684;
                                                                            $686 = HEAP32[$685 >> 2] | 0;
                                                                            $687 = HEAP32[$612 >> 2] | 0;
                                                                            $688 = $575 & 255;
                                                                            $689 = ((($687) + ($16 << 6) | 0) + ($688 << 2) | 0);
                                                                            $690 = $689;
                                                                            $691 = $690;
                                                                            HEAP8[$691 >> 0] = $683 & 255; HEAP8[$691 + 1 >> 0] = ($683 >> 8) & 255; HEAP8[$691 + 2 >> 0] = ($683 >> 16) & 255; HEAP8[$691 + 3 >> 0] = $683 >> 24;
                                                                            $692 = (($690) + 4) | 0;
                                                                            $693 = $692;
                                                                            HEAP8[$693 >> 0] = $686 & 255; HEAP8[$693 + 1 >> 0] = ($686 >> 8) & 255; HEAP8[$693 + 2 >> 0] = ($686 >> 16) & 255; HEAP8[$693 + 3 >> 0] = $686 >> 24;
                                                                            $694 = $8;
                                                                            $695 = $694;
                                                                            $696 = HEAP32[$695 >> 2] | 0;
                                                                            $697 = (($694) + 4) | 0;
                                                                            $698 = $697;
                                                                            $699 = HEAP32[$698 >> 2] | 0;
                                                                            $700 = HEAP32[$639 >> 2] | 0;
                                                                            $701 = ((($700) + ($16 << 6) | 0) + ($688 << 2) | 0);
                                                                            $702 = $701;
                                                                            $703 = $702;
                                                                            HEAP8[$703 >> 0] = $696 & 255; HEAP8[$703 + 1 >> 0] = ($696 >> 8) & 255; HEAP8[$703 + 2 >> 0] = ($696 >> 16) & 255; HEAP8[$703 + 3 >> 0] = $696 >> 24;
                                                                            $704 = (($702) + 4) | 0;
                                                                            $705 = $704;
                                                                            HEAP8[$705 >> 0] = $699 & 255; HEAP8[$705 + 1 >> 0] = ($699 >> 8) & 255; HEAP8[$705 + 2 >> 0] = ($699 >> 16) & 255; HEAP8[$705 + 3 >> 0] = $699 >> 24;
                                                                            $706 = $7;
                                                                            $707 = $706;
                                                                            $708 = HEAP32[$707 >> 2] | 0;
                                                                            $709 = (($706) + 4) | 0;
                                                                            $710 = $709;
                                                                            $711 = HEAP32[$710 >> 2] | 0;
                                                                            $712 = $577 & 255;
                                                                            $713 = (($3) + ($712 << 2) | 0);
                                                                            $714 = $713;
                                                                            $715 = $714;
                                                                            HEAP8[$715 >> 0] = $708 & 255; HEAP8[$715 + 1 >> 0] = ($708 >> 8) & 255; HEAP8[$715 + 2 >> 0] = ($708 >> 16) & 255; HEAP8[$715 + 3 >> 0] = $708 >> 24;
                                                                            $716 = (($714) + 4) | 0;
                                                                            $717 = $716;
                                                                            HEAP8[$717 >> 0] = $711 & 255; HEAP8[$717 + 1 >> 0] = ($711 >> 8) & 255; HEAP8[$717 + 2 >> 0] = ($711 >> 16) & 255; HEAP8[$717 + 3 >> 0] = $711 >> 24;
                                                                            $718 = (($4) + ($712 << 2) | 0);
                                                                            $719 = $718;
                                                                            $720 = $719;
                                                                            HEAP8[$720 >> 0] = $696 & 255; HEAP8[$720 + 1 >> 0] = ($696 >> 8) & 255; HEAP8[$720 + 2 >> 0] = ($696 >> 16) & 255; HEAP8[$720 + 3 >> 0] = $696 >> 24;
                                                                            $721 = (($719) + 4) | 0;
                                                                            $722 = $721;
                                                                            HEAP8[$722 >> 0] = $699 & 255; HEAP8[$722 + 1 >> 0] = ($699 >> 8) & 255; HEAP8[$722 + 2 >> 0] = ($699 >> 16) & 255; HEAP8[$722 + 3 >> 0] = $699 >> 24;
                                                                            break;
                                                                        }
                                                                        default: {
                                                                            $723 = HEAP32[$7 >> 2] | 0;
                                                                            $724 = HEAP32[$612 >> 2] | 0;
                                                                            $725 = $575 & 255;
                                                                            $726 = ((($724) + ($16 << 6) | 0) + ($725 << 2) | 0);
                                                                            HEAP8[$726 >> 0] = $723 & 255; HEAP8[$726 + 1 >> 0] = ($723 >> 8) & 255; HEAP8[$726 + 2 >> 0] = ($723 >> 16) & 255; HEAP8[$726 + 3 >> 0] = $723 >> 24;
                                                                            if ($570) {
                                                                                $727 = HEAP32[$7 >> 2] | 0;
                                                                                $728 = HEAP32[$612 >> 2] | 0;
                                                                                $729 = (($725) + 4) | 0;
                                                                                $730 = ((($728) + ($16 << 6) | 0) + ($729 << 2) | 0);
                                                                                HEAP8[$730 >> 0] = $727 & 255; HEAP8[$730 + 1 >> 0] = ($727 >> 8) & 255; HEAP8[$730 + 2 >> 0] = ($727 >> 16) & 255; HEAP8[$730 + 3 >> 0] = $727 >> 24;
                                                                                $731 = HEAP32[$8 >> 2] | 0;
                                                                                $732 = HEAP32[$639 >> 2] | 0;
                                                                                $733 = ((($732) + ($16 << 6) | 0) + ($725 << 2) | 0);
                                                                                HEAP8[$733 >> 0] = $731 & 255; HEAP8[$733 + 1 >> 0] = ($731 >> 8) & 255; HEAP8[$733 + 2 >> 0] = ($731 >> 16) & 255; HEAP8[$733 + 3 >> 0] = $731 >> 24;
                                                                                $734 = HEAP32[$639 >> 2] | 0;
                                                                                $735 = ((($734) + ($16 << 6) | 0) + ($729 << 2) | 0);
                                                                                HEAP8[$735 >> 0] = $731 & 255; HEAP8[$735 + 1 >> 0] = ($731 >> 8) & 255; HEAP8[$735 + 2 >> 0] = ($731 >> 16) & 255; HEAP8[$735 + 3 >> 0] = $731 >> 24;
                                                                                $736 = HEAP32[$7 >> 2] | 0;
                                                                                $737 = $577 & 255;
                                                                                $738 = (($3) + ($737 << 2) | 0);
                                                                                HEAP8[$738 >> 0] = $736 & 255; HEAP8[$738 + 1 >> 0] = ($736 >> 8) & 255; HEAP8[$738 + 2 >> 0] = ($736 >> 16) & 255; HEAP8[$738 + 3 >> 0] = $736 >> 24;
                                                                                $739 = (($737) + 6) | 0;
                                                                                $740 = (($3) + ($739 << 2) | 0);
                                                                                HEAP8[$740 >> 0] = $736 & 255; HEAP8[$740 + 1 >> 0] = ($736 >> 8) & 255; HEAP8[$740 + 2 >> 0] = ($736 >> 16) & 255; HEAP8[$740 + 3 >> 0] = $736 >> 24;
                                                                                $741 = (($4) + ($737 << 2) | 0);
                                                                                $$pn = $739; $$sink = $731; $$sink470 = $731; $$sink472 = $741;
                                                                            } else {
                                                                                $742 = HEAP32[$8 >> 2] | 0;
                                                                                $743 = HEAP32[$639 >> 2] | 0;
                                                                                $744 = ((($743) + ($16 << 6) | 0) + ($725 << 2) | 0);
                                                                                HEAP8[$744 >> 0] = $742 & 255; HEAP8[$744 + 1 >> 0] = ($742 >> 8) & 255; HEAP8[$744 + 2 >> 0] = ($742 >> 16) & 255; HEAP8[$744 + 3 >> 0] = $742 >> 24;
                                                                                $745 = $577 & 255;
                                                                                $746 = (($3) + ($745 << 2) | 0);
                                                                                $$sink470$pre = HEAP32[$7 >> 2] | 0;
                                                                                $$pn = $745; $$sink = $742; $$sink470 = $$sink470$pre; $$sink472 = $746;
                                                                            }
                                                                            HEAP8[$$sink472 >> 0] = $$sink470 & 255; HEAP8[$$sink472 + 1 >> 0] = ($$sink470 >> 8) & 255; HEAP8[$$sink472 + 2 >> 0] = ($$sink470 >> 16) & 255; HEAP8[$$sink472 + 3 >> 0] = $$sink470 >> 24;
                                                                            $747 = (($4) + ($$pn << 2) | 0);
                                                                            HEAP8[$747 >> 0] = $$sink & 255; HEAP8[$747 + 1 >> 0] = ($$sink >> 8) & 255; HEAP8[$747 + 2 >> 0] = ($$sink >> 16) & 255; HEAP8[$747 + 3 >> 0] = $$sink >> 24;
                                                                        }
                                                                    }
                                                                    $748 = (($$0421535) + 1) | 0;
                                                                    $749 = ($748 | 0) < ($565 | 0);
                                                                    if ($749) {
                                                                        $$0421535 = $748;
                                                                    } else {
                                                                        break L240;
                                                                    }
                                                                }
                                                            }
                                                        } while (0);
                                                        $750 = (($$6420537) + 1) | 0;
                                                        $751 = ($$6420537 | 0) < (3);
                                                        if (!($751)) {
                                                            break;
                                                        }
                                                        $$phi$trans$insert = (($11) + ($750) | 0);
                                                        $$pre = HEAP8[$$phi$trans$insert >> 0] | 0;
                                                        $$phi$trans$insert560 = (($12) + ($750) | 0);
                                                        $$pre561 = HEAP8[$$phi$trans$insert560 >> 0] | 0;
                                                        $$6420537 = $750; $566 = $$pre; $569 = $$pre561;
                                                    }
                                                    $$24 = 0;
                                                    STACKTOP = sp; return ($$24 | 0);
                                                } else {
                                                    $$23$ph = $1071;
                                                }
                                            } else {
                                                $$23$ph = $1030;
                                            }
                                        } else {
                                            $$23$ph = $546;
                                        }
                                    } else {
                                        $$23$ph = $1207;
                                    }
                                } else {
                                    $$3$i477 = $1175;
                                    label = 62;
                                }
                            } else {
                                $$3$i477 = $1142;
                                label = 62;
                            }
                        } else {
                            $$3$i477 = $497;
                            label = 62;
                        }
                    } else {
                        $$3$i477 = $466;
                        label = 62;
                    }
                } while (0);
                if ((label | 0) == 62) {
                    $$23$ph = $$3$i477;
                }
                $$24 = $$23$ph;
                STACKTOP = sp; return ($$24 | 0);
                break;
            }
            default: {
                $$24 = 0;
                STACKTOP = sp; return ($$24 | 0);
            }
        }
        return (0) | 0;
    }
    function __ZN7WelsDec16ParseRefIdxCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPhPA30_aiiiiRa($0, $1, $2, $3, $4, $5, $6, $7, $8) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        $8 = $8 | 0;
        var $$061 = 0, $$061$in = 0, $$062 = 0, $$2 = 0, $$3 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
        var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $phitmp63 = 0, $phitmp66 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $9 = sp;
        $10 = ($6 | 0) == (1);
        if ($10) {
            HEAP8[$8 >> 0] = 0;
            $$3 = 0;
            STACKTOP = sp; return ($$3 | 0);
        }
        $11 = ((($0)) + 241932 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($12)) + 3932 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ((($12)) + 4040 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        L5: do {
            switch ($5 | 0) {
                case 0: {
                    $17 = HEAP32[$1 >> 2] | 0;
                    $18 = ($17 | 0) == (0);
                    if ($18) {
                        $99 = 0;
                    } else {
                        $19 = ((($1)) + 20 | 0);
                        $20 = HEAP32[$19 >> 2] | 0;
                        $21 = ($20 | 0) == (512);
                        if ($21) {
                            $99 = 0;
                        } else {
                            $22 = HEAP8[10975] | 0;
                            $23 = $22 & 255;
                            $24 = (($23) + -6) | 0;
                            $25 = ((($3) + (($4 * 30) | 0) | 0) + ($24) | 0);
                            $26 = HEAP8[$25 >> 0] | 0;
                            $27 = ($26 << 24 >> 24) > (0);
                            $phitmp63 = $27 & 1;
                            $99 = $phitmp63;
                        }
                    }
                    $28 = ((($1)) + 4 | 0);
                    $29 = HEAP32[$28 >> 2] | 0;
                    $30 = ($29 | 0) == (0);
                    if ($30) {
                        $$061$in = 0; $$062 = $99;
                    } else {
                        $31 = ((($1)) + 16 | 0);
                        $32 = HEAP32[$31 >> 2] | 0;
                        $33 = ($32 | 0) == (512);
                        if ($33) {
                            $$061$in = 0; $$062 = $99;
                        } else {
                            $34 = HEAP8[10975] | 0;
                            $35 = $34 & 255;
                            $36 = (($35) + -1) | 0;
                            $37 = ((($3) + (($4 * 30) | 0) | 0) + ($36) | 0);
                            $38 = HEAP8[$37 >> 0] | 0;
                            $39 = ($38 << 24 >> 24) > (0);
                            $$061$in = $39; $$062 = $99;
                        }
                    }
                    break;
                }
                case 4: {
                    $40 = HEAP32[$1 >> 2] | 0;
                    $41 = ($40 | 0) == (0);
                    if ($41) {
                        $100 = 0;
                    } else {
                        $42 = ((($1)) + 20 | 0);
                        $43 = HEAP32[$42 >> 2] | 0;
                        $44 = ($43 | 0) == (512);
                        if ($44) {
                            $100 = 0;
                        } else {
                            $45 = HEAP8[(10979) >> 0] | 0;
                            $46 = $45 & 255;
                            $47 = (($46) + -6) | 0;
                            $48 = ((($3) + (($4 * 30) | 0) | 0) + ($47) | 0);
                            $49 = HEAP8[$48 >> 0] | 0;
                            $50 = ($49 << 24 >> 24) > (0);
                            $phitmp = $50 & 1;
                            $100 = $phitmp;
                        }
                    }
                    $51 = HEAP8[(15419) >> 0] | 0;
                    $52 = $51 & 255;
                    $53 = (($52) + -1) | 0;
                    $54 = ((($14) + ($16 << 4) | 0) + ($53) | 0);
                    $55 = HEAP8[$54 >> 0] | 0;
                    $56 = ($55 << 24 >> 24) > (0);
                    $$061$in = $56; $$062 = $100;
                    break;
                }
                default: {
                    $57 = ($5 | 0) == (8);
                    $58 = (15415 + ($5) | 0);
                    $59 = HEAP8[$58 >> 0] | 0;
                    $60 = $59 & 255;
                    $61 = (($60) + -4) | 0;
                    $62 = ((($14) + ($16 << 4) | 0) + ($61) | 0);
                    $63 = HEAP8[$62 >> 0] | 0;
                    $64 = ($63 << 24 >> 24) > (0);
                    $65 = $64 & 1;
                    if (!($57)) {
                        $78 = (($60) + -1) | 0;
                        $79 = ((($14) + ($16 << 4) | 0) + ($78) | 0);
                        $80 = HEAP8[$79 >> 0] | 0;
                        $81 = ($80 << 24 >> 24) > (0);
                        $$061$in = $81; $$062 = $65;
                        break L5;
                    }
                    $66 = ((($1)) + 4 | 0);
                    $67 = HEAP32[$66 >> 2] | 0;
                    $68 = ($67 | 0) == (0);
                    if ($68) {
                        $$061$in = 0; $$062 = $65;
                    } else {
                        $69 = ((($1)) + 16 | 0);
                        $70 = HEAP32[$69 >> 2] | 0;
                        $71 = ($70 | 0) == (512);
                        if ($71) {
                            $$061$in = 0; $$062 = $65;
                        } else {
                            $72 = HEAP8[(10983) >> 0] | 0;
                            $73 = $72 & 255;
                            $74 = (($73) + -1) | 0;
                            $75 = ((($3) + (($4 * 30) | 0) | 0) + ($74) | 0);
                            $76 = HEAP8[$75 >> 0] | 0;
                            $77 = ($76 << 24 >> 24) > (0);
                            $$061$in = $77; $$062 = $65;
                        }
                    }
                }
            }
        } while (0);
        $$061 = $$061$in & 1;
        $82 = $$062 << 1;
        $83 = $82 | $$061;
        $84 = ((($0)) + 512232 | 0);
        $85 = HEAP32[$84 >> 2] | 0;
        $86 = ((($0)) + 511417 | 0);
        $87 = (($86) + ($83 << 1) | 0);
        $88 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($85, $87, $9) | 0);
        $89 = ($88 | 0) == (0);
        do {
            if ($89) {
                $90 = HEAP32[$9 >> 2] | 0;
                $91 = ($90 | 0) == (0);
                if ($91) {
                    $98 = 0;
                } else {
                    $92 = HEAP32[$84 >> 2] | 0;
                    $93 = ((($0)) + 511425 | 0);
                    $94 = (__ZN7WelsDec19DecodeUnaryBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEiRj($92, $93, 1, $9) | 0);
                    $95 = ($94 | 0) == (0);
                    if (!($95)) {
                        $$2 = $94;
                        break;
                    }
                    $96 = HEAP32[$9 >> 2] | 0;
                    $97 = (($96) + 1) | 0;
                    HEAP32[$9 >> 2] = $97;
                    $phitmp66 = $97 & 255;
                    $98 = $phitmp66;
                }
                HEAP8[$8 >> 0] = $98;
                $$2 = 0;
            } else {
                $$2 = $88;
            }
        } while (0);
        $$3 = $$2;
        STACKTOP = sp; return ($$3 | 0);
    }
    function __ZN7WelsDec17ParseMvdInfoCabacEPNS_21TagWelsDecoderContextEPNS_16TagNeighborAvailEPA30_aPA30_A2_siaaRs($0, $1, $2, $3, $4, $5, $6, $7) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        $6 = $6 | 0;
        $7 = $7 | 0;
        var $$ = 0, $$068 = 0, $$073 = 0, $$169 = 0, $$3 = 0, $$neg = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
        var $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $8 = sp;
        $9 = ((($0)) + 511389 | 0);
        $10 = $6 << 24 >> 24;
        $11 = ($10 * 7) | 0;
        $12 = (($9) + ($11 << 1) | 0);
        HEAP16[$7 >> 1] = 0;
        $13 = $5 << 24 >> 24;
        $14 = (10975 + ($4) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = $15 & 255;
        $17 = (($16) + -6) | 0;
        $18 = ((($2) + (($13 * 30) | 0) | 0) + ($17) | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = ($19 << 24 >> 24) > (-1);
        if ($20) {
            $21 = (((($3) + (($13 * 120) | 0) | 0) + ($17 << 2) | 0) + ($10 << 1) | 0);
            $22 = HEAP16[$21 >> 1] | 0;
            $23 = $22 << 16 >> 16;
            $24 = $23 >> 31;
            $25 = $24 ^ $23;
            $26 = (($25) - ($24)) | 0;
            $$068 = $26;
        } else {
            $$068 = 0;
        }
        $27 = (($16) + -1) | 0;
        $28 = ((($2) + (($13 * 30) | 0) | 0) + ($27) | 0);
        $29 = HEAP8[$28 >> 0] | 0;
        $30 = ($29 << 24 >> 24) > (-1);
        if ($30) {
            $31 = (((($3) + (($13 * 120) | 0) | 0) + ($27 << 2) | 0) + ($10 << 1) | 0);
            $32 = HEAP16[$31 >> 1] | 0;
            $33 = $32 << 16 >> 16;
            $34 = $33 >> 31;
            $35 = $34 ^ $33;
            $$neg = $33 >>> 31;
            $36 = (($$neg) + ($$068)) | 0;
            $37 = (($36) + ($35)) | 0;
            $$169 = $37;
        } else {
            $$169 = $$068;
        }
        $38 = ($$169 | 0) < (3);
        $39 = ($$169 | 0) > (32);
        $$ = $39 ? 2 : 1;
        $$073 = $38 ? 0 : $$;
        $40 = ((($0)) + 512232 | 0);
        $41 = HEAP32[$40 >> 2] | 0;
        $42 = (($12) + ($$073 << 1) | 0);
        $43 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($41, $42, $8) | 0);
        $44 = ($43 | 0) == (0);
        if (!($44)) {
            $$3 = $43;
            STACKTOP = sp; return ($$3 | 0);
        }
        $45 = HEAP32[$8 >> 2] | 0;
        $46 = ($45 | 0) == (0);
        do {
            if ($46) {
                $$sink = 0;
            } else {
                $47 = HEAP32[$40 >> 2] | 0;
                $48 = ((($12)) + 6 | 0);
                $49 = (__ZN7WelsDec16DecodeUEGMvCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEjRj($47, $48, 3, $8) | 0);
                $50 = ($49 | 0) == (0);
                if (!($50)) {
                    $$3 = $49;
                    STACKTOP = sp; return ($$3 | 0);
                }
                $51 = HEAP32[$8 >> 2] | 0;
                $52 = (($51) + 1) | 0;
                $53 = $52 & 65535;
                HEAP16[$7 >> 1] = $53;
                $54 = HEAP32[$40 >> 2] | 0;
                $55 = (__ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($54, $8) | 0);
                $56 = ($55 | 0) == (0);
                if (!($56)) {
                    $$3 = $55;
                    STACKTOP = sp; return ($$3 | 0);
                }
                $57 = HEAP32[$8 >> 2] | 0;
                $58 = ($57 | 0) == (0);
                if ($58) {
                    $$3 = 0;
                    STACKTOP = sp; return ($$3 | 0);
                } else {
                    $59 = HEAP16[$7 >> 1] | 0;
                    $60 = $59 & 65535;
                    $61 = (0 - ($60)) | 0;
                    $62 = $61 & 65535;
                    $$sink = $62;
                    break;
                }
            }
        } while (0);
        HEAP16[$7 >> 1] = $$sink;
        $$3 = 0;
        STACKTOP = sp; return ($$3 | 0);
    }
    function __ZN7WelsDec16DecodeUEGMvCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementEjRj($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$$028$i = 0, $$$031$i = 0, $$$032$i = 0, $$028$i = 0, $$031$lcssa$i = 0, $$03138$i = 0, $$032 = 0, $$032$i = 0, $$1$$36 = 0, $$4 = 0, $$4$i$ph = 0, $$5 = 0, $$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
        var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
        var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $4 = sp + 4 | 0;
        $5 = sp;
        $6 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($0, $1, $3) | 0);
        $7 = ($6 | 0) == (0);
        if (!($7)) {
            $$5 = $6;
            STACKTOP = sp; return ($$5 | 0);
        }
        $8 = HEAP32[$3 >> 2] | 0;
        $9 = ($8 | 0) == (0);
        if ($9) {
            $$5 = 0;
            STACKTOP = sp; return ($$5 | 0);
        }
        HEAP32[$3 >> 2] = 0;
        $$032 = 1;
        while (1) {
            $10 = (($$032) + 1) | 0;
            $11 = (10382 + ($$032 << 1) | 0);
            $12 = HEAP16[$11 >> 1] | 0;
            $13 = $12 << 16 >> 16;
            $14 = (($1) + ($13 << 1) | 0);
            $15 = (__ZN7WelsDec14DecodeBinCabacEPNS_19SWelsCabacDecEngineEPNS_19SWels_Cabac_ElementERj($0, $14, $5) | 0);
            $16 = ($15 | 0) == (0);
            if (!($16)) {
                $$4 = $15;
                break;
            }
            $17 = HEAP32[$3 >> 2] | 0;
            $18 = (($17) + 1) | 0;
            HEAP32[$3 >> 2] = $18;
            $19 = HEAP32[$5 >> 2] | 0;
            $20 = ($19 | 0) != (0);
            $21 = ($10 | 0) != (8);
            $22 = $21 & $20;
            if ($22) {
                $$032 = $10;
            } else {
                label = 6;
                break;
            }
        }
        L10: do {
            if ((label | 0) == 6) {
                if ($20) {
                    HEAP32[$5 >> 2] = 0;
                    $$028$i = 3; $$032$i = 0;
                    while (1) {
                        $23 = (__ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($0, $4) | 0);
                        $24 = ($23 | 0) == (0);
                        if (!($24)) {
                            $$4$i$ph = $23;
                            break;
                        }
                        $25 = HEAP32[$4 >> 2] | 0;
                        $26 = ($25 | 0) == (1);
                        $27 = 1 << $$028$i;
                        $28 = $26 ? $27 : 0;
                        $$$032$i = (($28) + ($$032$i)) | 0;
                        $29 = $26 & 1;
                        $$$028$i = (($$028$i) + ($29)) | 0;
                        $30 = ($25 | 0) == (0);
                        if ($30) {
                            label = 10;
                            break;
                        } else {
                            $$028$i = $$$028$i; $$032$i = $$$032$i;
                        }
                    }
                    L16: do {
                        if ((label | 0) == 10) {
                            $31 = ($$$028$i | 0) == (0);
                            if ($31) {
                                $$031$lcssa$i = 0;
                            } else {
                                $$03138$i = 0; $$in$i = $$$028$i;
                                while (1) {
                                    $32 = (($$in$i) + -1) | 0;
                                    $33 = (__ZN7WelsDec17DecodeBypassCabacEPNS_19SWelsCabacDecEngineERj($0, $4) | 0);
                                    $34 = ($33 | 0) == (0);
                                    if (!($34)) {
                                        $$4$i$ph = $33;
                                        break L16;
                                    }
                                    $35 = HEAP32[$4 >> 2] | 0;
                                    $36 = ($35 | 0) == (1);
                                    $37 = 1 << $32;
                                    $38 = $36 ? $37 : 0;
                                    $$$031$i = $38 | $$03138$i;
                                    $39 = ($32 | 0) == (0);
                                    if ($39) {
                                        $$031$lcssa$i = $$$031$i;
                                        break;
                                    } else {
                                        $$03138$i = $$$031$i; $$in$i = $32;
                                    }
                                }
                            }
                            $41 = (($$031$lcssa$i) + ($$$032$i)) | 0;
                            HEAP32[$5 >> 2] = $41;
                            $42 = (($41) + 1) | 0;
                            $43 = HEAP32[$3 >> 2] | 0;
                            $44 = (($42) + ($43)) | 0;
                            HEAP32[$3 >> 2] = $44;
                            $$4 = 0;
                            break L10;
                        }
                    } while (0);
                    $40 = ($$4$i$ph | 0) == (0);
                    $$1$$36 = $40 ? $15 : $$4$i$ph;
                    $$4 = $$1$$36;
                } else {
                    $$4 = 0;
                }
            }
        } while (0);
        $$5 = $$4;
        STACKTOP = sp; return ($$5 | 0);
    }
    function __ZN7WelsDec7InitFmoEPNS_6TagFmoEPNS_6TagPpsEiiPN10WelsCommon12CMemoryAlignE($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0$i = 0, $$0$i$i = 0, $$0$i46$i = 0, $$044$i$i = 0, $$045$i$i = 0, $$1$i$i = 0, $$pre$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
        var $9 = 0, $exitcond$i$i = 0, $or$cond$i = 0, $or$cond3$i = 0, $or$cond47$i$i = 0, $or$cond48$i$i = 0, $or$cond5$i$i = 0, $or$cond5$i45$i = 0, $or$cond7$i$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ($0 | 0) == (0 | 0);
        $6 = ($1 | 0) == (0 | 0);
        $or$cond$i = $5 | $6;
        if ($or$cond$i) {
            $$0$i = 1;
            return ($$0$i | 0);
        }
        $7 = ((($0)) + 4 | 0);
        $8 = Math_imul($3, $2) | 0;
        $9 = ($8 | 0) == (0);
        if ($9) {
            $$0$i = 1;
            return ($$0$i | 0);
        }
        $10 = HEAP32[$0 >> 2] | 0;
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($4, $10, 25853);
        $11 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($4, $8, 25853) | 0);
        HEAP32[$0 >> 2] = $11;
        $12 = ($11 | 0) == (0 | 0);
        if ($12) {
            $$0$i = 1;
            return ($$0$i | 0);
        }
        HEAP32[$7 >> 2] = $8;
        $13 = ((($1)) + 8 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ($14 >>> 0) < (2);
        $16 = ($8 | 0) > (0);
        $or$cond3$i = $16 & $15;
        if ($or$cond3$i) {
            _memset(($11 | 0), 0, ($8 | 0)) | 0;
            $17 = ((($0)) + 8 | 0);
            HEAP32[$17 >> 2] = 1;
            $$0$i = 0;
            return ($$0$i | 0);
        }
        $18 = ((($1)) + 12 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ((($0)) + 12 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = ($19 | 0) == ($21 | 0);
        if ($22) {
            $23 = ((($0)) + 8 | 0);
            $24 = HEAP32[$23 >> 2] | 0;
            $25 = ($14 | 0) == ($24 | 0);
            if (!($25)) {
                label = 8;
            }
        } else {
            label = 8;
        }
        L16: do {
            if ((label | 0) == 8) {
                switch ($19 | 0) {
                    case 0: {
                        $26 = ($8 | 0) < (1);
                        $27 = ($14 >>> 0) > (7);
                        $or$cond5$i$i = $26 | $27;
                        if ($or$cond5$i$i) {
                            $$0$i = 1;
                            return ($$0$i | 0);
                        } else {
                            $$045$i$i = 0;
                        }
                        while (1) {
                            $$044$i$i = 0; $$1$i$i = $$045$i$i;
                            while (1) {
                                $28 = $$044$i$i & 255;
                                $29 = (((($1)) + 16 | 0) + ($28 << 2) | 0);
                                $30 = HEAP32[$29 >> 2] | 0;
                                $$0$i$i = 0;
                                while (1) {
                                    $31 = HEAP32[$0 >> 2] | 0;
                                    $32 = (($$0$i$i) + ($$1$i$i)) | 0;
                                    $33 = (($31) + ($32) | 0);
                                    HEAP8[$33 >> 0] = $$044$i$i;
                                    $34 = (($$0$i$i) + 1) | 0;
                                    $35 = ($34 | 0) < ($30 | 0);
                                    $36 = (($34) + ($$1$i$i)) | 0;
                                    $37 = ($36 | 0) < ($8 | 0);
                                    $or$cond47$i$i = $35 & $37;
                                    if ($or$cond47$i$i) {
                                        $$0$i$i = $34;
                                    } else {
                                        break;
                                    }
                                }
                                $38 = (($30) + ($$1$i$i)) | 0;
                                $39 = (($$044$i$i) + 1) << 24 >> 24;
                                $40 = $39 & 255;
                                $41 = ($14 >>> 0) > ($40 >>> 0);
                                $42 = ($38 | 0) < ($8 | 0);
                                $or$cond48$i$i = $41 & $42;
                                if ($or$cond48$i$i) {
                                    $$044$i$i = $39; $$1$i$i = $38;
                                } else {
                                    break;
                                }
                            }
                            if ($42) {
                                $$045$i$i = $38;
                            } else {
                                break;
                            }
                        }
                        break;
                    }
                    case 1: {
                        $43 = ($8 | 0) < (1);
                        $44 = ($2 | 0) == (0);
                        $or$cond5$i45$i = $44 | $43;
                        $45 = ($14 >>> 0) > (7);
                        $or$cond7$i$i = $or$cond5$i45$i | $45;
                        if ($or$cond7$i$i) {
                            $$0$i = 1;
                            return ($$0$i | 0);
                        } else {
                            $$0$i46$i = 0; $54 = $11;
                        }
                        while (1) {
                            $46 = (($$0$i46$i | 0) % ($2 | 0)) & -1;
                            $47 = (($$0$i46$i | 0) / ($2 | 0)) & -1;
                            $48 = Math_imul($47, $14) | 0;
                            $49 = $48 >>> 1;
                            $50 = (($49) + ($46)) | 0;
                            $51 = (($50 >>> 0) % ($14 >>> 0)) & -1;
                            $52 = $51 & 255;
                            $53 = (($54) + ($$0$i46$i) | 0);
                            HEAP8[$53 >> 0] = $52;
                            $55 = (($$0$i46$i) + 1) | 0;
                            $exitcond$i$i = ($55 | 0) == ($8 | 0);
                            if ($exitcond$i$i) {
                                break L16;
                            }
                            $$pre$i$i = HEAP32[$0 >> 2] | 0;
                            $$0$i46$i = $55; $54 = $$pre$i$i;
                        }
                        break;
                    }
                    default: {
                        $$0$i = 1;
                        return ($$0$i | 0);
                    }
                }
            }
        } while (0);
        $56 = HEAP32[$13 >> 2] | 0;
        $57 = ((($0)) + 8 | 0);
        HEAP32[$57 >> 2] = $56;
        $58 = HEAP32[$18 >> 2] | 0;
        HEAP32[$20 >> 2] = $58;
        $$0$i = 0;
        return ($$0$i | 0);
    }
    function _WelsRequestMem($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$$0$i = 0, $$0 = 0, $$0$i = 0, $$0100$i = 0, $$025$i = 0, $$025$i$1 = 0, $$025$i36$i = 0, $$025$i64$i = 0, $$03055$i = 0, $$05989$i = 0, $$078104$i = 0, $$07898$i = 0, $$07899$i = 0, $$080$ph$i = 0, $$080101$i = 0, $$088$i = 0, $$094$off0 = 0, $$96 = 0, $$cast$i = 0, $$cast$i111 = 0;
        var $$pre = 0, $$pre$i = 0, $$pre$i107 = 0, $$pre$i115 = 0, $$pre$i115$1 = 0, $$pre$i39$i = 0, $$pre$i67$i = 0, $$pre$phi$i$1Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi130Z2D = 0, $$pre$phiZ2D = 0, $$pre129 = 0, $$pre27$i = 0, $$pre27$i$1 = 0, $$pre27$i38$i = 0, $$pre27$i66$i = 0, $$pre28$i = 0, $$pre28$i$1 = 0, $$pre28$i41$i = 0, $$pre28$i69$i = 0;
        var $$pre29$i = 0, $$pre29$i$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
        var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
        var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
        var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
        var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
        var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
        var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
        var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
        var $exitcond$i = 0, $or$cond = 0, $or$cond$i97 = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 64 | 0;
        $vararg_buffer12 = sp + 40 | 0;
        $vararg_buffer4 = sp + 16 | 0;
        $vararg_buffer = sp;
        $3 = $1 << 4;
        $4 = $2 << 4;
        $5 = ((($0)) + 562528 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ($0 | 0) == (0 | 0);
        $8 = ($3 | 0) < (1);
        $or$cond = $7 | $8;
        $9 = ($4 | 0) < (1);
        $or$cond3 = $or$cond | $9;
        if ($or$cond3) {
            $$0 = 4;
            STACKTOP = sp; return ($$0 | 0);
        }
        $10 = ((($0)) + 241924 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ($11 | 0) == (0 | 0);
        if ($12) {
            $$0$i = 18;
        } else {
            $13 = ((($11)) + 296 | 0);
            $14 = HEAP32[$13 >> 2] | 0;
            $15 = (($14) + 2) | 0;
            $$0$i = $15;
        }
        $16 = ($$0$i | 0) > (2);
        $$$0$i = $16 ? $$0$i : 2;
        $17 = ((($0)) + 209448 | 0);
        HEAP32[$17 >> 2] = $$$0$i;
        $18 = ((($0)) + 209440 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ($19 | 0) == (0 | 0);
        if ($20) {
            $$094$off0 = 1;
        } else {
            $21 = ((($19)) + 4 | 0);
            $22 = HEAP32[$21 >> 2] | 0;
            $23 = ($22 | 0) != ($$$0$i | 0);
            $$094$off0 = $23;
        }
        $24 = ((($0)) + 64 | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = ($25 << 24 >> 24) == (0);
        if (!($26)) {
            $27 = ((($0)) + 68 | 0);
            $28 = HEAP32[$27 >> 2] | 0;
            $29 = ($3 | 0) == ($28 | 0);
            if ($29) {
                $30 = ((($0)) + 72 | 0);
                $31 = HEAP32[$30 >> 2] | 0;
                $32 = ($4 | 0) != ($31 | 0);
                $brmerge = $$094$off0 | $32;
                if (!($brmerge)) {
                    $$0 = 0;
                    STACKTOP = sp; return ($$0 | 0);
                }
            }
        }
        __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($0);
        $33 = HEAP8[$24 >> 0] | 0;
        $34 = ($33 << 24 >> 24) == (0);
        do {
            if ($34) {
                HEAP32[$vararg_buffer12 >> 2] = $3;
                $vararg_ptr15 = ((($vararg_buffer12)) + 4 | 0);
                HEAP32[$vararg_ptr15 >> 2] = $4;
                $vararg_ptr16 = ((($vararg_buffer12)) + 8 | 0);
                HEAP32[$vararg_ptr16 >> 2] = $$$0$i;
                __Z7WelsLogP13TagLogContextiPKcz($0, 4, 26406, $vararg_buffer12);
                label = 60;
            } else {
                $35 = ((($0)) + 68 | 0);
                $36 = HEAP32[$35 >> 2] | 0;
                $37 = ($3 | 0) == ($36 | 0);
                if ($37) {
                    $38 = ((($0)) + 72 | 0);
                    $39 = HEAP32[$38 >> 2] | 0;
                    $40 = ($4 | 0) == ($39 | 0);
                    if ($40) {
                        $41 = HEAP32[$18 >> 2] | 0;
                        $42 = ($41 | 0) == (0 | 0);
                        if (!($42)) {
                            $43 = ((($41)) + 4 | 0);
                            $44 = HEAP32[$43 >> 2] | 0;
                            $45 = ($44 | 0) == ($$$0$i | 0);
                            if (!($45)) {
                                HEAP32[$vararg_buffer >> 2] = $3;
                                $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
                                HEAP32[$vararg_ptr1 >> 2] = $4;
                                $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
                                HEAP32[$vararg_ptr2 >> 2] = $44;
                                $vararg_ptr3 = ((($vararg_buffer)) + 12 | 0);
                                HEAP32[$vararg_ptr3 >> 2] = $$$0$i;
                                __Z7WelsLogP13TagLogContextiPKcz($0, 4, 26117, $vararg_buffer);
                                $46 = HEAP32[$18 >> 2] | 0;
                                $47 = ((($46)) + 4 | 0);
                                $48 = HEAP32[$47 >> 2] | 0;
                                $49 = ($48 | 0) < ($$$0$i | 0);
                                $50 = ($48 | 0) < (1);
                                $51 = ($$$0$i | 0) < (1);
                                $or$cond$i97 = $51 | $50;
                                if ($49) {
                                    if ($or$cond$i97) {
                                        $$0 = 1;
                                        STACKTOP = sp; return ($$0 | 0);
                                    }
                                    $52 = HEAP32[$5 >> 2] | 0;
                                    $53 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($52, 12, 26229) | 0);
                                    $54 = $53;
                                    $55 = ($53 | 0) == (0 | 0);
                                    if ($55) {
                                        $$0 = 1;
                                        STACKTOP = sp; return ($$0 | 0);
                                    }
                                    $56 = $$$0$i << 2;
                                    $57 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($52, $56, 26238) | 0);
                                    HEAP32[$53 >> 2] = $57;
                                    $58 = ($57 | 0) == (0 | 0);
                                    if ($58) {
                                        $59 = ((($53)) + 4 | 0);
                                        HEAP32[$59 >> 2] = 0;
                                        $60 = ((($53)) + 8 | 0);
                                        HEAP32[$60 >> 2] = 0;
                                        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($52, $53, 22093);
                                        $$0 = 1;
                                        STACKTOP = sp; return ($$0 | 0);
                                    } else {
                                        $$05989$i = $48;
                                    }
                                    while (1) {
                                        $61 = (__ZN7WelsDec12AllocPictureEPNS_21TagWelsDecoderContextEii($0, $3, $4) | 0);
                                        $62 = ($61 | 0) == (0 | 0);
                                        if ($62) {
                                            break;
                                        }
                                        $76 = HEAP32[$53 >> 2] | 0;
                                        $77 = (($76) + ($$05989$i << 2) | 0);
                                        HEAP32[$77 >> 2] = $61;
                                        $78 = (($$05989$i) + 1) | 0;
                                        $79 = ($78 | 0) < ($$$0$i | 0);
                                        if ($79) {
                                            $$05989$i = $78;
                                        } else {
                                            label = 30;
                                            break;
                                        }
                                    }
                                    if ((label | 0) == 30) {
                                        $$pre$i = HEAP32[$53 >> 2] | 0;
                                        $80 = HEAP32[$46 >> 2] | 0;
                                        $81 = $48 << 2;
                                        _memcpy(($$pre$i | 0), ($80 | 0), ($81 | 0)) | 0;
                                        $82 = ((($53)) + 4 | 0);
                                        HEAP32[$82 >> 2] = $$$0$i;
                                        $83 = ((($46)) + 8 | 0);
                                        $84 = HEAP32[$83 >> 2] | 0;
                                        $85 = ((($53)) + 8 | 0);
                                        HEAP32[$85 >> 2] = $84;
                                        HEAP32[$18 >> 2] = $54;
                                        $86 = HEAP32[$82 >> 2] | 0;
                                        $87 = ($86 | 0) > (0);
                                        if ($87) {
                                            $$088$i = 0;
                                            while (1) {
                                                $90 = HEAP32[$53 >> 2] | 0;
                                                $91 = (($90) + ($$088$i << 2) | 0);
                                                $92 = HEAP32[$91 >> 2] | 0;
                                                $93 = ((($92)) + 68 | 0);
                                                HEAP8[$93 >> 0] = 0;
                                                $94 = HEAP32[$53 >> 2] | 0;
                                                $95 = (($94) + ($$088$i << 2) | 0);
                                                $96 = HEAP32[$95 >> 2] | 0;
                                                $97 = ((($96)) + 69 | 0);
                                                HEAP8[$97 >> 0] = 0;
                                                $98 = HEAP32[$53 >> 2] | 0;
                                                $99 = (($98) + ($$088$i << 2) | 0);
                                                $100 = HEAP32[$99 >> 2] | 0;
                                                $101 = ((($100)) + 70 | 0);
                                                HEAP8[$101 >> 0] = 0;
                                                $102 = HEAP32[$53 >> 2] | 0;
                                                $103 = (($102) + ($$088$i << 2) | 0);
                                                $104 = HEAP32[$103 >> 2] | 0;
                                                $105 = ((($104)) + 71 | 0);
                                                HEAP8[$105 >> 0] = 1;
                                                $106 = HEAP32[$53 >> 2] | 0;
                                                $107 = (($106) + ($$088$i << 2) | 0);
                                                $108 = HEAP32[$107 >> 2] | 0;
                                                $109 = ((($108)) + 72 | 0);
                                                HEAP8[$109 >> 0] = 0;
                                                $110 = (($$088$i) + 1) | 0;
                                                $111 = HEAP32[$82 >> 2] | 0;
                                                $112 = ($110 | 0) < ($111 | 0);
                                                if ($112) {
                                                    $$088$i = $110;
                                                } else {
                                                    break;
                                                }
                                            }
                                        }
                                        $88 = HEAP32[$46 >> 2] | 0;
                                        $89 = ($88 | 0) == (0 | 0);
                                        if (!($89)) {
                                            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($52, $88, 26248);
                                            HEAP32[$46 >> 2] = 0;
                                        }
                                        HEAP32[$47 >> 2] = 0;
                                        HEAP32[$83 >> 2] = 0;
                                        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($52, $46, 26266);
                                        $$pre$phi130Z2D = $38; $$pre$phiZ2D = $35;
                                        break;
                                    }
                                    $63 = ((($53)) + 4 | 0);
                                    HEAP32[$63 >> 2] = $$05989$i;
                                    $64 = HEAP32[$53 >> 2] | 0;
                                    $65 = ($64 | 0) == (0 | 0);
                                    if (!($65)) {
                                        $66 = ($$05989$i | 0) > (0);
                                        if ($66) {
                                            $$025$i64$i = 0; $256 = $$05989$i; $68 = $64;
                                            while (1) {
                                                $67 = (($68) + ($$025$i64$i << 2) | 0);
                                                $69 = HEAP32[$67 >> 2] | 0;
                                                $70 = ($69 | 0) == (0 | 0);
                                                if ($70) {
                                                    $73 = $256;
                                                } else {
                                                    __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($69, $52);
                                                    $$pre27$i66$i = HEAP32[$63 >> 2] | 0;
                                                    $73 = $$pre27$i66$i;
                                                }
                                                $71 = (($$025$i64$i) + 1) | 0;
                                                $72 = ($71 | 0) < ($73 | 0);
                                                if (!($72)) {
                                                    break;
                                                }
                                                $$pre$i67$i = HEAP32[$53 >> 2] | 0;
                                                $$025$i64$i = $71; $256 = $73; $68 = $$pre$i67$i;
                                            }
                                            $$pre28$i69$i = HEAP32[$53 >> 2] | 0;
                                            $74 = $$pre28$i69$i;
                                        } else {
                                            $74 = $64;
                                        }
                                        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($52, $74, 22078);
                                        HEAP32[$53 >> 2] = 0;
                                    }
                                    HEAP32[$63 >> 2] = 0;
                                    $75 = ((($53)) + 8 | 0);
                                    HEAP32[$75 >> 2] = 0;
                                    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($52, $53, 22093);
                                    $$0 = 1;
                                    STACKTOP = sp; return ($$0 | 0);
                                }
                                if ($or$cond$i97) {
                                    $$0 = 1;
                                    STACKTOP = sp; return ($$0 | 0);
                                }
                                $113 = HEAP32[$5 >> 2] | 0;
                                $114 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($113, 12, 26229) | 0);
                                $115 = ($114 | 0) == (0 | 0);
                                if ($115) {
                                    $$0 = 1;
                                    STACKTOP = sp; return ($$0 | 0);
                                }
                                $116 = $$$0$i << 2;
                                $117 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($113, $116, 26238) | 0);
                                HEAP32[$114 >> 2] = $117;
                                $118 = ($117 | 0) == (0 | 0);
                                if ($118) {
                                    $123 = ((($114)) + 4 | 0);
                                    HEAP32[$123 >> 2] = 0;
                                    $124 = ((($114)) + 8 | 0);
                                    HEAP32[$124 >> 2] = 0;
                                    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($113, $114, 22093);
                                    $$0 = 1;
                                    STACKTOP = sp; return ($$0 | 0);
                                }
                                $119 = ($48 | 0) > (0);
                                L71: do {
                                    if ($119) {
                                        $120 = ((($0)) + 316852 | 0);
                                        $121 = HEAP32[$120 >> 2] | 0;
                                        $122 = HEAP32[$46 >> 2] | 0;
                                        $$078104$i = 0;
                                        while (1) {
                                            $125 = (($122) + ($$078104$i << 2) | 0);
                                            $126 = HEAP32[$125 >> 2] | 0;
                                            $127 = ($121 | 0) == ($126 | 0);
                                            if ($127) {
                                                break;
                                            }
                                            $128 = (($$078104$i) + 1) | 0;
                                            $129 = ($128 | 0) < ($48 | 0);
                                            if ($129) {
                                                $$078104$i = $128;
                                            } else {
                                                $$07898$i = $128; $138 = $122;
                                                label = 46;
                                                break L71;
                                            }
                                        }
                                        $130 = ($$078104$i | 0) < ($$$0$i | 0);
                                        if ($130) {
                                            $$07898$i = $$078104$i; $138 = $122;
                                            label = 46;
                                        } else {
                                            $131 = $121;
                                            HEAP32[$117 >> 2] = $131;
                                            $132 = ((($114)) + 8 | 0);
                                            HEAP32[$132 >> 2] = 0;
                                            $133 = HEAP32[$114 >> 2] | 0;
                                            $134 = ((($133)) + 4 | 0);
                                            $135 = HEAP32[$46 >> 2] | 0;
                                            $136 = (($$$0$i) + -1) | 0;
                                            $137 = $136 << 2;
                                            _memcpy(($134 | 0), ($135 | 0), ($137 | 0)) | 0;
                                            $$07899$i = $$078104$i; $$080$ph$i = $136;
                                        }
                                    } else {
                                        $$pre$i107 = HEAP32[$46 >> 2] | 0;
                                        $$07898$i = 0; $138 = $$pre$i107;
                                        label = 46;
                                    }
                                } while (0);
                                if ((label | 0) == 46) {
                                    _memcpy(($117 | 0), ($138 | 0), ($116 | 0)) | 0;
                                    $139 = ($$07898$i | 0) < ($$$0$i | 0);
                                    $140 = $139 ? $$07898$i : 0;
                                    $141 = ((($114)) + 8 | 0);
                                    HEAP32[$141 >> 2] = $140;
                                    $$07899$i = $$07898$i; $$080$ph$i = $$$0$i;
                                }
                                $142 = ($$080$ph$i | 0) < ($48 | 0);
                                if ($142) {
                                    $$080101$i = $$080$ph$i;
                                    while (1) {
                                        $143 = ($$07899$i | 0) == ($$080101$i | 0);
                                        do {
                                            if (!($143)) {
                                                $144 = HEAP32[$46 >> 2] | 0;
                                                $145 = (($144) + ($$080101$i << 2) | 0);
                                                $146 = HEAP32[$145 >> 2] | 0;
                                                $147 = ($146 | 0) == (0 | 0);
                                                if ($147) {
                                                    break;
                                                }
                                                __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($146, $113);
                                                $148 = HEAP32[$46 >> 2] | 0;
                                                $149 = (($148) + ($$080101$i << 2) | 0);
                                                HEAP32[$149 >> 2] = 0;
                                            }
                                        } while (0);
                                        $150 = (($$080101$i) + 1) | 0;
                                        $exitcond$i = ($150 | 0) == ($48 | 0);
                                        if ($exitcond$i) {
                                            break;
                                        } else {
                                            $$080101$i = $150;
                                        }
                                    }
                                }
                                $151 = ((($114)) + 4 | 0);
                                HEAP32[$151 >> 2] = $$$0$i;
                                $$cast$i111 = $114;
                                HEAP32[$18 >> 2] = $$cast$i111;
                                $152 = HEAP32[$151 >> 2] | 0;
                                $153 = ($152 | 0) > (0);
                                if ($153) {
                                    $$0100$i = 0;
                                    while (1) {
                                        $156 = HEAP32[$114 >> 2] | 0;
                                        $157 = (($156) + ($$0100$i << 2) | 0);
                                        $158 = HEAP32[$157 >> 2] | 0;
                                        $159 = ((($158)) + 68 | 0);
                                        HEAP8[$159 >> 0] = 0;
                                        $160 = HEAP32[$114 >> 2] | 0;
                                        $161 = (($160) + ($$0100$i << 2) | 0);
                                        $162 = HEAP32[$161 >> 2] | 0;
                                        $163 = ((($162)) + 69 | 0);
                                        HEAP8[$163 >> 0] = 0;
                                        $164 = HEAP32[$114 >> 2] | 0;
                                        $165 = (($164) + ($$0100$i << 2) | 0);
                                        $166 = HEAP32[$165 >> 2] | 0;
                                        $167 = ((($166)) + 70 | 0);
                                        HEAP8[$167 >> 0] = 0;
                                        $168 = HEAP32[$114 >> 2] | 0;
                                        $169 = (($168) + ($$0100$i << 2) | 0);
                                        $170 = HEAP32[$169 >> 2] | 0;
                                        $171 = ((($170)) + 71 | 0);
                                        HEAP8[$171 >> 0] = 1;
                                        $172 = HEAP32[$114 >> 2] | 0;
                                        $173 = (($172) + ($$0100$i << 2) | 0);
                                        $174 = HEAP32[$173 >> 2] | 0;
                                        $175 = ((($174)) + 72 | 0);
                                        HEAP8[$175 >> 0] = 0;
                                        $176 = (($$0100$i) + 1) | 0;
                                        $177 = HEAP32[$151 >> 2] | 0;
                                        $178 = ($176 | 0) < ($177 | 0);
                                        if ($178) {
                                            $$0100$i = $176;
                                        } else {
                                            break;
                                        }
                                    }
                                }
                                $154 = HEAP32[$46 >> 2] | 0;
                                $155 = ($154 | 0) == (0 | 0);
                                if (!($155)) {
                                    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($113, $154, 26248);
                                    HEAP32[$46 >> 2] = 0;
                                }
                                HEAP32[$47 >> 2] = 0;
                                $179 = ((($46)) + 8 | 0);
                                HEAP32[$179 >> 2] = 0;
                                __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($113, $46, 26266);
                                $$pre$phi130Z2D = $38; $$pre$phiZ2D = $35;
                                break;
                            }
                        }
                    }
                }
                $180 = ((($0)) + 72 | 0);
                $181 = HEAP32[$180 >> 2] | 0;
                $182 = HEAP32[$18 >> 2] | 0;
                $183 = ((($182)) + 4 | 0);
                $184 = HEAP32[$183 >> 2] | 0;
                HEAP32[$vararg_buffer4 >> 2] = $36;
                $vararg_ptr7 = ((($vararg_buffer4)) + 4 | 0);
                HEAP32[$vararg_ptr7 >> 2] = $181;
                $vararg_ptr8 = ((($vararg_buffer4)) + 8 | 0);
                HEAP32[$vararg_ptr8 >> 2] = $3;
                $vararg_ptr9 = ((($vararg_buffer4)) + 12 | 0);
                HEAP32[$vararg_ptr9 >> 2] = $4;
                $vararg_ptr10 = ((($vararg_buffer4)) + 16 | 0);
                HEAP32[$vararg_ptr10 >> 2] = $184;
                $vararg_ptr11 = ((($vararg_buffer4)) + 20 | 0);
                HEAP32[$vararg_ptr11 >> 2] = $$$0$i;
                __Z7WelsLogP13TagLogContextiPKcz($0, 4, 26277, $vararg_buffer4);
                label = 60;
            }
        } while (0);
        do {
            if ((label | 0) == 60) {
                $185 = HEAP32[$18 >> 2] | 0;
                $186 = ($185 | 0) == (0 | 0);
                if (!($186)) {
                    $187 = HEAP32[$185 >> 2] | 0;
                    $188 = ($187 | 0) == (0 | 0);
                    if ($188) {
                        $$pre29$i = ((($185)) + 4 | 0);
                        $$pre$phi$iZ2D = $$pre29$i;
                    } else {
                        $189 = ((($185)) + 4 | 0);
                        $190 = HEAP32[$189 >> 2] | 0;
                        $191 = ($190 | 0) > (0);
                        if ($191) {
                            $$025$i = 0; $193 = $187; $257 = $190;
                            while (1) {
                                $192 = (($193) + ($$025$i << 2) | 0);
                                $194 = HEAP32[$192 >> 2] | 0;
                                $195 = ($194 | 0) == (0 | 0);
                                if ($195) {
                                    $198 = $257;
                                } else {
                                    __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($194, $6);
                                    $$pre27$i = HEAP32[$189 >> 2] | 0;
                                    $198 = $$pre27$i;
                                }
                                $196 = (($$025$i) + 1) | 0;
                                $197 = ($196 | 0) < ($198 | 0);
                                if (!($197)) {
                                    break;
                                }
                                $$pre$i115 = HEAP32[$185 >> 2] | 0;
                                $$025$i = $196; $193 = $$pre$i115; $257 = $198;
                            }
                            $$pre28$i = HEAP32[$185 >> 2] | 0;
                            $199 = $$pre28$i;
                        } else {
                            $199 = $187;
                        }
                        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($6, $199, 22078);
                        HEAP32[$185 >> 2] = 0;
                        $$pre$phi$iZ2D = $189;
                    }
                    HEAP32[$$pre$phi$iZ2D >> 2] = 0;
                    $200 = ((($185)) + 8 | 0);
                    HEAP32[$200 >> 2] = 0;
                    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($6, $185, 22093);
                    HEAP32[$18 >> 2] = 0;
                }
                $201 = ((($0)) + 209444 | 0);
                $202 = HEAP32[$201 >> 2] | 0;
                $203 = ($202 | 0) == (0 | 0);
                if (!($203)) {
                    $240 = HEAP32[$202 >> 2] | 0;
                    $241 = ($240 | 0) == (0 | 0);
                    if ($241) {
                        $$pre29$i$1 = ((($202)) + 4 | 0);
                        $$pre$phi$i$1Z2D = $$pre29$i$1;
                    } else {
                        $242 = ((($202)) + 4 | 0);
                        $243 = HEAP32[$242 >> 2] | 0;
                        $244 = ($243 | 0) > (0);
                        if ($244) {
                            $$025$i$1 = 0; $246 = $240; $259 = $243;
                            while (1) {
                                $245 = (($246) + ($$025$i$1 << 2) | 0);
                                $247 = HEAP32[$245 >> 2] | 0;
                                $248 = ($247 | 0) == (0 | 0);
                                if ($248) {
                                    $251 = $259;
                                } else {
                                    __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($247, $6);
                                    $$pre27$i$1 = HEAP32[$242 >> 2] | 0;
                                    $251 = $$pre27$i$1;
                                }
                                $249 = (($$025$i$1) + 1) | 0;
                                $250 = ($249 | 0) < ($251 | 0);
                                if (!($250)) {
                                    break;
                                }
                                $$pre$i115$1 = HEAP32[$202 >> 2] | 0;
                                $$025$i$1 = $249; $246 = $$pre$i115$1; $259 = $251;
                            }
                            $$pre28$i$1 = HEAP32[$202 >> 2] | 0;
                            $252 = $$pre28$i$1;
                        } else {
                            $252 = $240;
                        }
                        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($6, $252, 22078);
                        HEAP32[$202 >> 2] = 0;
                        $$pre$phi$i$1Z2D = $242;
                    }
                    HEAP32[$$pre$phi$i$1Z2D >> 2] = 0;
                    $253 = ((($202)) + 8 | 0);
                    HEAP32[$253 >> 2] = 0;
                    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($6, $202, 22093);
                    HEAP32[$201 >> 2] = 0;
                }
                $254 = ((($0)) + 316852 | 0);
                HEAP32[$254 >> 2] = 0;
                $255 = ($$$0$i | 0) < (1);
                if ($255) {
                    $$0 = 1;
                    STACKTOP = sp; return ($$0 | 0);
                }
                $204 = HEAP32[$5 >> 2] | 0;
                $205 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($204, 12, 26229) | 0);
                $206 = ($205 | 0) == (0 | 0);
                if ($206) {
                    $$0 = 1;
                    STACKTOP = sp; return ($$0 | 0);
                }
                $207 = $$$0$i << 2;
                $208 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($204, $207, 26238) | 0);
                HEAP32[$205 >> 2] = $208;
                $209 = ($208 | 0) == (0 | 0);
                if ($209) {
                    $210 = ((($205)) + 4 | 0);
                    HEAP32[$210 >> 2] = 0;
                    $211 = ((($205)) + 8 | 0);
                    HEAP32[$211 >> 2] = 0;
                    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($204, $205, 22093);
                    $$0 = 1;
                    STACKTOP = sp; return ($$0 | 0);
                } else {
                    $$03055$i = 0;
                }
                while (1) {
                    $212 = (__ZN7WelsDec12AllocPictureEPNS_21TagWelsDecoderContextEii($0, $3, $4) | 0);
                    $213 = ($212 | 0) == (0 | 0);
                    if ($213) {
                        break;
                    }
                    $227 = HEAP32[$205 >> 2] | 0;
                    $228 = (($227) + ($$03055$i << 2) | 0);
                    HEAP32[$228 >> 2] = $212;
                    $229 = (($$03055$i) + 1) | 0;
                    $230 = ($229 | 0) < ($$$0$i | 0);
                    if ($230) {
                        $$03055$i = $229;
                    } else {
                        label = 86;
                        break;
                    }
                }
                if ((label | 0) == 86) {
                    $231 = ((($205)) + 4 | 0);
                    HEAP32[$231 >> 2] = $$$0$i;
                    $232 = ((($205)) + 8 | 0);
                    HEAP32[$232 >> 2] = 0;
                    $$cast$i = $205;
                    HEAP32[$18 >> 2] = $$cast$i;
                    $$pre = ((($0)) + 68 | 0);
                    $$pre129 = ((($0)) + 72 | 0);
                    $$pre$phi130Z2D = $$pre129; $$pre$phiZ2D = $$pre;
                    break;
                }
                $214 = ((($205)) + 4 | 0);
                HEAP32[$214 >> 2] = $$03055$i;
                $215 = HEAP32[$205 >> 2] | 0;
                $216 = ($215 | 0) == (0 | 0);
                if (!($216)) {
                    $217 = ($$03055$i | 0) > (0);
                    if ($217) {
                        $$025$i36$i = 0; $219 = $215; $258 = $$03055$i;
                        while (1) {
                            $218 = (($219) + ($$025$i36$i << 2) | 0);
                            $220 = HEAP32[$218 >> 2] | 0;
                            $221 = ($220 | 0) == (0 | 0);
                            if ($221) {
                                $224 = $258;
                            } else {
                                __ZN7WelsDec11FreePictureEPNS_10TagPictureEPN10WelsCommon12CMemoryAlignE($220, $204);
                                $$pre27$i38$i = HEAP32[$214 >> 2] | 0;
                                $224 = $$pre27$i38$i;
                            }
                            $222 = (($$025$i36$i) + 1) | 0;
                            $223 = ($222 | 0) < ($224 | 0);
                            if (!($223)) {
                                break;
                            }
                            $$pre$i39$i = HEAP32[$205 >> 2] | 0;
                            $$025$i36$i = $222; $219 = $$pre$i39$i; $258 = $224;
                        }
                        $$pre28$i41$i = HEAP32[$205 >> 2] | 0;
                        $225 = $$pre28$i41$i;
                    } else {
                        $225 = $215;
                    }
                    __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($204, $225, 22078);
                    HEAP32[$205 >> 2] = 0;
                }
                HEAP32[$214 >> 2] = 0;
                $226 = ((($205)) + 8 | 0);
                HEAP32[$226 >> 2] = 0;
                __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($204, $205, 22093);
                $$0 = 1;
                STACKTOP = sp; return ($$0 | 0);
            }
        } while (0);
        HEAP32[$$pre$phiZ2D >> 2] = $3;
        HEAP32[$$pre$phi130Z2D >> 2] = $4;
        HEAP8[$24 >> 0] = 1;
        $233 = ((($0)) + 5464 | 0);
        HEAP32[$233 >> 2] = 0;
        $234 = ((($0)) + 512232 | 0);
        $235 = HEAP32[$234 >> 2] | 0;
        $236 = ($235 | 0) == (0 | 0);
        if ($236) {
            $237 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($6, 32, 22101) | 0);
            HEAP32[$234 >> 2] = $237;
            $238 = $237;
        } else {
            $238 = $235;
        }
        $239 = ($238 | 0) == (0 | 0);
        $$96 = $239 & 1;
        $$0 = $$96;
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec22InitialDqLayersContextEPNS_21TagWelsDecoderContextEii($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
        var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
        var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
        var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
        var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
        var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond198 = 0, $or$cond3 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($0 | 0) == (0 | 0);
        $4 = ($1 | 0) < (1);
        $or$cond = $3 | $4;
        $5 = ($2 | 0) < (1);
        $or$cond3 = $or$cond | $5;
        if ($or$cond3) {
            $$3 = 4;
            return ($$3 | 0);
        }
        $6 = (($1) + 15) | 0;
        $7 = $6 >> 4;
        $8 = ((($0)) + 5456 | 0);
        HEAP32[$8 >> 2] = $7;
        $9 = (($2) + 15) | 0;
        $10 = $9 >> 4;
        $11 = ((($0)) + 5460 | 0);
        HEAP32[$11 >> 2] = $10;
        $12 = ((($0)) + 241952 | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = ($13 << 24 >> 24) == (0);
        if (!($14)) {
            $15 = ((($0)) + 241940 | 0);
            $16 = HEAP32[$15 >> 2] | 0;
            $17 = ($16 | 0) < ($1 | 0);
            if (!($17)) {
                $18 = ((($0)) + 241944 | 0);
                $19 = HEAP32[$18 >> 2] | 0;
                $20 = ($19 | 0) < ($2 | 0);
                if (!($20)) {
                    $$3 = 0;
                    return ($$3 | 0);
                }
            }
        }
        $21 = ((($0)) + 562528 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        __ZN7WelsDec24UninitialDqLayersContextEPNS_21TagWelsDecoderContextE($0);
        $23 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, 4116, 26080) | 0);
        $24 = ($23 | 0) == (0 | 0);
        if ($24) {
            $$3 = 1;
            return ($$3 | 0);
        }
        _memset(($23 | 0), 0, 4116) | 0;
        $25 = HEAP32[$8 >> 2] | 0;
        $26 = HEAP32[$11 >> 2] | 0;
        $27 = $25 << 1;
        $28 = Math_imul($27, $26) | 0;
        $29 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $28, 21359) | 0);
        $30 = ((($0)) + 5344 | 0);
        HEAP32[$30 >> 2] = $29;
        $31 = HEAP32[$8 >> 2] | 0;
        $32 = HEAP32[$11 >> 2] | 0;
        $33 = $31 << 6;
        $34 = Math_imul($33, $32) | 0;
        $35 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $34, 21379) | 0);
        $36 = ((($0)) + 5348 | 0);
        HEAP32[$36 >> 2] = $35;
        $37 = HEAP32[$8 >> 2] | 0;
        $38 = HEAP32[$11 >> 2] | 0;
        $39 = $37 << 4;
        $40 = Math_imul($39, $38) | 0;
        $41 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $40, 21397) | 0);
        $42 = ((($0)) + 5356 | 0);
        HEAP32[$42 >> 2] = $41;
        $43 = HEAP32[$8 >> 2] | 0;
        $44 = HEAP32[$11 >> 2] | 0;
        $45 = Math_imul($44, $43) | 0;
        $46 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $45, 21499) | 0);
        $47 = ((($0)) + 5372 | 0);
        HEAP32[$47 >> 2] = $46;
        $48 = HEAP32[$8 >> 2] | 0;
        $49 = HEAP32[$11 >> 2] | 0;
        $50 = Math_imul($49, $48) | 0;
        $51 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $50, 21421) | 0);
        $52 = ((($0)) + 5364 | 0);
        HEAP32[$52 >> 2] = $51;
        $53 = HEAP32[$8 >> 2] | 0;
        $54 = HEAP32[$11 >> 2] | 0;
        $55 = Math_imul($54, $53) | 0;
        $56 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $55, 21465) | 0);
        $57 = ((($0)) + 5368 | 0);
        HEAP32[$57 >> 2] = $56;
        $58 = HEAP32[$8 >> 2] | 0;
        $59 = HEAP32[$11 >> 2] | 0;
        $60 = $58 << 1;
        $61 = Math_imul($60, $59) | 0;
        $62 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $61, 21519) | 0);
        $63 = ((($0)) + 5376 | 0);
        HEAP32[$63 >> 2] = $62;
        $64 = HEAP32[$8 >> 2] | 0;
        $65 = HEAP32[$11 >> 2] | 0;
        $66 = $64 << 6;
        $67 = Math_imul($66, $65) | 0;
        $68 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $67, 21541) | 0);
        $69 = ((($0)) + 5380 | 0);
        HEAP32[$69 >> 2] = $68;
        $70 = HEAP32[$8 >> 2] | 0;
        $71 = HEAP32[$11 >> 2] | 0;
        $72 = $70 << 1;
        $73 = Math_imul($72, $71) | 0;
        $74 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $73, 21560) | 0);
        $75 = ((($0)) + 5388 | 0);
        HEAP32[$75 >> 2] = $74;
        $76 = HEAP32[$8 >> 2] | 0;
        $77 = HEAP32[$11 >> 2] | 0;
        $78 = ($76 * 24) | 0;
        $79 = Math_imul($78, $77) | 0;
        $80 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $79, 21579) | 0);
        $81 = ((($0)) + 5392 | 0);
        HEAP32[$81 >> 2] = $80;
        $82 = HEAP32[$8 >> 2] | 0;
        $83 = HEAP32[$11 >> 2] | 0;
        $84 = ($82 * 24) | 0;
        $85 = Math_imul($84, $83) | 0;
        $86 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $85, 21596) | 0);
        $87 = ((($0)) + 5396 | 0);
        HEAP32[$87 >> 2] = $86;
        $88 = HEAP32[$8 >> 2] | 0;
        $89 = HEAP32[$11 >> 2] | 0;
        $90 = ($88 * 768) | 0;
        $91 = Math_imul($90, $89) | 0;
        $92 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $91, 21615) | 0);
        $93 = ((($0)) + 5400 | 0);
        HEAP32[$93 >> 2] = $92;
        $94 = HEAP32[$8 >> 2] | 0;
        $95 = HEAP32[$11 >> 2] | 0;
        $96 = $94 << 3;
        $97 = Math_imul($96, $95) | 0;
        $98 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $97, 21641) | 0);
        $99 = ((($0)) + 5404 | 0);
        HEAP32[$99 >> 2] = $98;
        $100 = HEAP32[$8 >> 2] | 0;
        $101 = HEAP32[$11 >> 2] | 0;
        $102 = $100 << 4;
        $103 = Math_imul($102, $101) | 0;
        $104 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $103, 21668) | 0);
        $105 = ((($0)) + 5408 | 0);
        HEAP32[$105 >> 2] = $104;
        $106 = HEAP32[$8 >> 2] | 0;
        $107 = HEAP32[$11 >> 2] | 0;
        $108 = Math_imul($107, $106) | 0;
        $109 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $108, 21699) | 0);
        $110 = ((($0)) + 5412 | 0);
        HEAP32[$110 >> 2] = $109;
        $111 = HEAP32[$8 >> 2] | 0;
        $112 = HEAP32[$11 >> 2] | 0;
        $113 = Math_imul($112, $111) | 0;
        $114 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $113, 21728) | 0);
        $115 = ((($0)) + 5416 | 0);
        HEAP32[$115 >> 2] = $114;
        $116 = HEAP32[$8 >> 2] | 0;
        $117 = HEAP32[$11 >> 2] | 0;
        $118 = Math_imul($117, $116) | 0;
        $119 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $118, 21756) | 0);
        $120 = ((($0)) + 5420 | 0);
        HEAP32[$120 >> 2] = $119;
        $121 = HEAP32[$8 >> 2] | 0;
        $122 = HEAP32[$11 >> 2] | 0;
        $123 = $121 << 2;
        $124 = Math_imul($123, $122) | 0;
        $125 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $124, 21773) | 0);
        $126 = ((($0)) + 5432 | 0);
        HEAP32[$126 >> 2] = $125;
        $127 = HEAP32[$8 >> 2] | 0;
        $128 = HEAP32[$11 >> 2] | 0;
        $129 = $127 << 2;
        $130 = Math_imul($129, $128) | 0;
        $131 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $130, 21796) | 0);
        $132 = ((($0)) + 5436 | 0);
        HEAP32[$132 >> 2] = $131;
        $133 = HEAP32[$8 >> 2] | 0;
        $134 = HEAP32[$11 >> 2] | 0;
        $135 = Math_imul($134, $133) | 0;
        $136 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $135, 21818) | 0);
        $137 = ((($0)) + 5440 | 0);
        HEAP32[$137 >> 2] = $136;
        $138 = HEAP32[$8 >> 2] | 0;
        $139 = HEAP32[$11 >> 2] | 0;
        $140 = Math_imul($139, $138) | 0;
        $141 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $140, 21848) | 0);
        $142 = ((($0)) + 5444 | 0);
        HEAP32[$142 >> 2] = $141;
        $143 = HEAP32[$8 >> 2] | 0;
        $144 = HEAP32[$11 >> 2] | 0;
        $145 = Math_imul($144, $143) | 0;
        $146 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $145, 21885) | 0);
        $147 = ((($0)) + 5448 | 0);
        HEAP32[$147 >> 2] = $146;
        $148 = HEAP32[$8 >> 2] | 0;
        $149 = HEAP32[$11 >> 2] | 0;
        $150 = Math_imul($149, $148) | 0;
        $151 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($22, $150, 26089) | 0);
        $152 = ((($0)) + 5452 | 0);
        HEAP32[$152 >> 2] = $151;
        $153 = HEAP32[$30 >> 2] | 0;
        $154 = ($153 | 0) == (0 | 0);
        if ($154) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $155 = HEAP32[$36 >> 2] | 0;
        $156 = ($155 | 0) == (0 | 0);
        if ($156) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $157 = HEAP32[$42 >> 2] | 0;
        $158 = ($157 | 0) == (0 | 0);
        if ($158) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $159 = HEAP32[$47 >> 2] | 0;
        $160 = ($159 | 0) == (0 | 0);
        if ($160) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $161 = HEAP32[$63 >> 2] | 0;
        $162 = ($161 | 0) == (0 | 0);
        if ($162) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $163 = HEAP32[$69 >> 2] | 0;
        $164 = ($163 | 0) == (0 | 0);
        if ($164) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $165 = HEAP32[$75 >> 2] | 0;
        $166 = ($165 | 0) == (0 | 0);
        if ($166) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $167 = HEAP32[$81 >> 2] | 0;
        $168 = ($167 | 0) == (0 | 0);
        if ($168) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $169 = HEAP32[$87 >> 2] | 0;
        $170 = ($169 | 0) == (0 | 0);
        if ($170) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $171 = HEAP32[$93 >> 2] | 0;
        $172 = ($171 | 0) == (0 | 0);
        if ($172) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $173 = HEAP32[$99 >> 2] | 0;
        $174 = ($173 | 0) == (0 | 0);
        if ($174) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $175 = HEAP32[$105 >> 2] | 0;
        $176 = ($175 | 0) == (0 | 0);
        if ($176) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $177 = HEAP32[$115 >> 2] | 0;
        $178 = ($177 | 0) == (0 | 0);
        if ($178) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $179 = HEAP32[$120 >> 2] | 0;
        $180 = ($179 | 0) == (0 | 0);
        if ($180) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $181 = HEAP32[$126 >> 2] | 0;
        $182 = ($181 | 0) == (0 | 0);
        if ($182) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $183 = HEAP32[$132 >> 2] | 0;
        $184 = ($183 | 0) == (0 | 0);
        if ($184) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $185 = HEAP32[$137 >> 2] | 0;
        $186 = ($185 | 0) == (0 | 0);
        if ($186) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $187 = HEAP32[$142 >> 2] | 0;
        $188 = ($187 | 0) == (0 | 0);
        $189 = ($151 | 0) == (0 | 0);
        $or$cond198 = $189 | $188;
        if ($or$cond198) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $190 = HEAP32[$147 >> 2] | 0;
        $191 = ($190 | 0) == (0 | 0);
        if ($191) {
            $$3 = 1;
            return ($$3 | 0);
        }
        $192 = HEAP32[$8 >> 2] | 0;
        $193 = HEAP32[$11 >> 2] | 0;
        $194 = $192 << 2;
        $195 = Math_imul($194, $193) | 0;
        _memset(($183 | 0), -1, ($195 | 0)) | 0;
        $196 = ((($0)) + 241936 | 0);
        HEAP32[$196 >> 2] = $23;
        HEAP8[$12 >> 0] = 1;
        $197 = ((($0)) + 241940 | 0);
        HEAP32[$197 >> 2] = $1;
        $198 = ((($0)) + 241944 | 0);
        HEAP32[$198 >> 2] = $2;
        $$3 = 0;
        return ($$3 | 0);
    }
    function __ZN7WelsDec12AllocPictureEPNS_21TagWelsDecoderContextEii($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        $3 = ((($0)) + 562528 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($4, 120, 26472) | 0);
        $6 = ($5 | 0) == (0 | 0);
        if ($6) {
            $$0 = 0;
            return ($$0 | 0);
        }
        dest = $5; stop = dest + 120 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $7 = (($1) + 95) | 0;
        $8 = $7 & -32;
        $9 = (($2) + 95) | 0;
        $10 = $9 & -32;
        $11 = $8 >> 1;
        $12 = $10 >> 1;
        $13 = Math_imul($10, $8) | 0;
        $14 = Math_imul($12, $11) | 0;
        $15 = ((($0)) + 242344 | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = ($16 << 24 >> 24) == (0);
        do {
            if ($17) {
                $26 = $14 << 1;
                $27 = (($26) + ($13)) | 0;
                $28 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($4, $27, 26481) | 0);
                HEAP32[$5 >> 2] = $28;
                $29 = ($28 | 0) == (0 | 0);
                if (!($29)) {
                    _memset(($28 | 0), -128, ($27 | 0)) | 0;
                    $30 = ((($5)) + 32 | 0);
                    HEAP32[$30 >> 2] = $8;
                    $31 = ((($5)) + 40 | 0);
                    HEAP32[$31 >> 2] = $11;
                    $32 = ((($5)) + 36 | 0);
                    HEAP32[$32 >> 2] = $11;
                    $33 = HEAP32[$5 >> 2] | 0;
                    $34 = (($33) + ($13) | 0);
                    $35 = ((($5)) + 4 | 0);
                    HEAP32[$35 >> 2] = $34;
                    $36 = (($34) + ($14) | 0);
                    $37 = ((($5)) + 8 | 0);
                    HEAP32[$37 >> 2] = $36;
                    $38 = $8 << 5;
                    $39 = $38 | 32;
                    $40 = (($33) + ($39) | 0);
                    $41 = ((($5)) + 16 | 0);
                    HEAP32[$41 >> 2] = $40;
                    $42 = $8 << 4;
                    $43 = $42 >> 1;
                    $44 = $43 | 16;
                    $45 = (($34) + ($44) | 0);
                    $46 = ((($5)) + 20 | 0);
                    HEAP32[$46 >> 2] = $45;
                    $47 = (($36) + ($44) | 0);
                    $48 = ((($5)) + 24 | 0);
                    HEAP32[$48 >> 2] = $47;
                    break;
                }
                __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($4, $5, 22140);
                $$0 = 0;
                return ($$0 | 0);
            } else {
                $18 = ((($5)) + 8 | 0);
                HEAP32[$18 >> 2] = 0;
                $19 = ((($5)) + 4 | 0);
                HEAP32[$19 >> 2] = 0;
                HEAP32[$5 >> 2] = 0;
                $20 = ((($5)) + 16 | 0);
                $21 = ((($5)) + 24 | 0);
                HEAP32[$21 >> 2] = 0;
                $22 = ((($5)) + 20 | 0);
                HEAP32[$22 >> 2] = 0;
                HEAP32[$20 >> 2] = 0;
                $23 = ((($5)) + 32 | 0);
                HEAP32[$23 >> 2] = $8;
                $24 = ((($5)) + 40 | 0);
                HEAP32[$24 >> 2] = $11;
                $25 = ((($5)) + 36 | 0);
                HEAP32[$25 >> 2] = $11;
            }
        } while (0);
        $49 = ((($5)) + 48 | 0);
        HEAP32[$49 >> 2] = 3;
        $50 = ((($5)) + 56 | 0);
        HEAP32[$50 >> 2] = $1;
        $51 = ((($5)) + 60 | 0);
        HEAP32[$51 >> 2] = $2;
        $52 = ((($5)) + 76 | 0);
        HEAP32[$52 >> 2] = -1;
        $53 = ((($5)) + 71 | 0);
        HEAP8[$53 >> 0] = 1;
        $$0 = $5;
        return ($$0 | 0);
    }
    function __ZN7WelsDec26CheckIntegrityNalUnitsListEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0$i = 0, $$0$i117 = 0, $$0$i126 = 0, $$0$i145 = 0, $$0$i154 = 0, $$0$i71 = 0, $$0$i89 = 0, $$0$i98 = 0, $$0$in$i = 0, $$0$in$i116 = 0, $$0$in$i125 = 0, $$0$in$i144 = 0, $$0$in$i153 = 0, $$0$in$i70 = 0, $$0$in$i88 = 0, $$0$in$i97 = 0, $$0$in$ph$i = 0, $$0$in$ph$i122 = 0, $$0$in$ph$i150 = 0, $$0$in$ph$i94 = 0;
        var $$0$off0$ph$i = 0, $$0$off0$ph$i104 = 0, $$0$off0$ph$i132 = 0, $$0$off0$ph$i76 = 0, $$034$ph$i = 0, $$034$ph$i121 = 0, $$034$ph$i149 = 0, $$034$ph$i93 = 0, $$035$i = 0, $$035$i124 = 0, $$035$i152 = 0, $$035$i96 = 0, $$035$ph$i = 0, $$035$ph$i120 = 0, $$035$ph$i148 = 0, $$035$ph$i92 = 0, $$060262 = 0, $$072$ph$i = 0, $$072$ph$i103 = 0, $$072$ph$i131 = 0;
        var $$072$ph$i75 = 0, $$073$i = 0, $$073$i107 = 0, $$073$i135 = 0, $$073$i79 = 0, $$073$in$i = 0, $$073$in$i106 = 0, $$073$in$i134 = 0, $$073$in$i78 = 0, $$073$in$ph$i = 0, $$073$in$ph$i102 = 0, $$073$in$ph$i130 = 0, $$073$in$ph$i74 = 0, $$3 = 0, $$lcssa454 = 0, $$lcssa470 = 0, $$phi$trans$insert = 0, $$phi$trans$insert341 = 0, $$pre = 0, $$pre342 = 0;
        var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
        var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
        var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
        var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
        var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
        var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
        var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
        var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
        var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
        var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
        var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
        var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
        var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
        var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
        var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
        var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
        var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
        var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
        var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
        var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $or$cond$i108 = 0, $or$cond$i127 = 0, $or$cond$i136 = 0, $or$cond$i155 = 0, $or$cond$i72 = 0, $or$cond$i80 = 0, $or$cond$i99 = 0, $or$cond74$i = 0;
        var $or$cond74$i109 = 0, $or$cond74$i137 = 0, $or$cond74$i81 = 0, $or$cond75$i = 0, $or$cond75$i110 = 0, $or$cond75$i138 = 0, $or$cond75$i82 = 0, $or$cond75$not$i = 0, $or$cond75$not$i111 = 0, $or$cond75$not$i139 = 0, $or$cond75$not$i83 = 0, $or$cond76$i = 0, $or$cond76$i112 = 0, $or$cond76$i140 = 0, $or$cond76$i84 = 0, $or$cond95$i = 0, $or$cond95$i113 = 0, $or$cond95$i141 = 0, $or$cond95$i85 = 0, $storemerge$$072$ph$i75 = 0;
        var $storemerge260 = 0, $storemerge65$$072$ph$i131 = 0, $storemerge65258$lcssa = 0, $storemerge65258509 = 0, $storemerge66$$072$ph$i103 = 0, $storemerge66257$lcssa = 0, $storemerge66257507 = 0, $storemerge67$$072$ph$i = 0, $storemerge67264 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 241888 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ((($2)) + 20 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($2)) + 24 | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = ($6 << 24 >> 24) == (0);
        if ($7) {
            $$3 = 0;
            return ($$3 | 0);
        }
        $8 = ((($0)) + 242334 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ($9 << 24 >> 24) == (0);
        if (!($10)) {
            $15 = ((($2)) + 16 | 0);
            HEAP32[$15 >> 2] = 0;
            $16 = ($4 | 0) > (-1);
            if (!($16)) {
                $$3 = 0;
                return ($$3 | 0);
            }
            $17 = HEAP32[$2 >> 2] | 0;
            $storemerge67264 = $4;
            while (1) {
                $18 = (($17) + ($storemerge67264 << 2) | 0);
                $19 = HEAP32[$18 >> 2] | 0;
                $20 = ((($19)) + 14 | 0);
                $21 = HEAP8[$20 >> 0] | 0;
                $22 = ($21 << 24 >> 24) == (0);
                if (!($22)) {
                    break;
                }
                $23 = (($storemerge67264) + -1) | 0;
                $24 = ($storemerge67264 | 0) > (0);
                if ($24) {
                    $storemerge67264 = $23;
                } else {
                    $$3 = 0;
                    label = 80;
                    break;
                }
            }
            if ((label | 0) == 80) {
                return ($$3 | 0);
            }
            $25 = ((($19)) + 15 | 0);
            $26 = HEAP8[$25 >> 0] | 0;
            $27 = ((($19)) + 16 | 0);
            $28 = HEAP8[$27 >> 0] | 0;
            $29 = ((($19)) + 17 | 0);
            $30 = HEAP8[$29 >> 0] | 0;
            $31 = ((($19)) + 28 | 0);
            $32 = HEAP32[$31 >> 2] | 0;
            $33 = ((($19)) + 32 | 0);
            $34 = HEAP32[$33 >> 2] | 0;
            $35 = ((($19)) + 24 | 0);
            $36 = HEAP32[$35 >> 2] | 0;
            $$0$off0$ph$i = 1; $$072$ph$i = 0; $$073$in$ph$i = $storemerge67264;
            L15: while (1) {
                $$073$in$i = $$073$in$ph$i;
                while (1) {
                    $$073$i = (($$073$in$i) + -1) | 0;
                    $37 = ($$073$in$i | 0) > (0);
                    if (!($37)) {
                        break L15;
                    }
                    $38 = (($17) + ($$073$i << 2) | 0);
                    $39 = HEAP32[$38 >> 2] | 0;
                    $40 = ((($39)) + 14 | 0);
                    $41 = HEAP8[$40 >> 0] | 0;
                    $42 = ($41 << 24 >> 24) == (0);
                    if ($42) {
                        $$073$in$i = $$073$i;
                    } else {
                        break;
                    }
                }
                $43 = ((($39)) + 15 | 0);
                $44 = HEAP8[$43 >> 0] | 0;
                $45 = ($44 << 24 >> 24) == ($26 << 24 >> 24);
                if (!($45)) {
                    break;
                }
                $46 = ((($39)) + 24 | 0);
                $47 = HEAP32[$46 >> 2] | 0;
                $48 = ((($39)) + 32 | 0);
                $49 = HEAP32[$48 >> 2] | 0;
                $50 = ((($39)) + 28 | 0);
                $51 = HEAP32[$50 >> 2] | 0;
                $52 = ((($39)) + 17 | 0);
                $53 = HEAP8[$52 >> 0] | 0;
                $54 = ((($39)) + 16 | 0);
                $55 = HEAP8[$54 >> 0] | 0;
                $56 = ($55 << 24 >> 24) == ($28 << 24 >> 24);
                $57 = ($53 << 24 >> 24) == ($30 << 24 >> 24);
                $or$cond$i = $57 & $56;
                $58 = ($51 | 0) == ($32 | 0);
                $or$cond74$i = $58 & $or$cond$i;
                $59 = ($49 | 0) == ($34 | 0);
                $or$cond75$i = $59 & $or$cond74$i;
                $or$cond75$not$i = $or$cond75$i ^ 1;
                $60 = ($47 | 0) == ($36 | 0);
                $or$cond76$i = $60 | $or$cond75$not$i;
                if ($or$cond76$i) {
                    break;
                } else {
                    $$0$off0$ph$i = 0; $$072$ph$i = $$073$i; $$073$in$ph$i = $$073$i;
                }
            }
            $61 = ($storemerge67264 | 0) == ($$072$ph$i | 0);
            $or$cond95$i = $$0$off0$ph$i | $61;
            $storemerge67$$072$ph$i = $or$cond95$i ? $storemerge67264 : $$072$ph$i;
            HEAP32[$15 >> 2] = $storemerge67$$072$ph$i;
            $62 = HEAP32[$1 >> 2] | 0;
            $63 = HEAP32[$62 >> 2] | 0;
            $64 = (($63) + ($storemerge67$$072$ph$i << 2) | 0);
            $65 = HEAP32[$64 >> 2] | 0;
            $66 = ((($65)) + 15 | 0);
            $67 = HEAP8[$66 >> 0] | 0;
            $68 = ((($65)) + 22 | 0);
            $69 = HEAP8[$68 >> 0] | 0;
            $$0$in$ph$i150 = $storemerge67$$072$ph$i; $$034$ph$i149 = $67; $$035$ph$i148 = $69;
            L23: while (1) {
                $$0$in$i153 = $$0$in$ph$i150; $$035$i152 = $$035$ph$i148;
                while (1) {
                    $$0$i154 = (($$0$in$i153) + 1) | 0;
                    $70 = ($$0$in$i153 | 0) < ($4 | 0);
                    if (!($70)) {
                        break L23;
                    }
                    $71 = (($63) + ($$0$i154 << 2) | 0);
                    $72 = HEAP32[$71 >> 2] | 0;
                    $73 = ((($72)) + 15 | 0);
                    $74 = HEAP8[$73 >> 0] | 0;
                    $75 = ((($72)) + 22 | 0);
                    $76 = HEAP8[$75 >> 0] | 0;
                    $77 = ($74 << 24 >> 24) == ($$034$ph$i149 << 24 >> 24);
                    if ($77) {
                        $$0$in$i153 = $$0$i154; $$035$i152 = $76;
                    } else {
                        break;
                    }
                }
                $78 = ((($72)) + 3865 | 0);
                $79 = HEAP8[$78 >> 0] | 0;
                $80 = ((($72)) + 16 | 0);
                $81 = HEAP8[$80 >> 0] | 0;
                $82 = ($81 << 24 >> 24) == (0);
                $83 = ($79 << 24 >> 24) == ($$035$i152 << 24 >> 24);
                $or$cond$i155 = $83 & $82;
                if ($or$cond$i155) {
                    $$0$in$ph$i150 = $$0$i154; $$034$ph$i149 = $74; $$035$ph$i148 = $76;
                } else {
                    break;
                }
            }
            $84 = ((($62)) + 20 | 0);
            HEAP32[$84 >> 2] = $$0$in$i153;
            $85 = (($63) + ($$0$in$i153 << 2) | 0);
            $86 = HEAP32[$85 >> 2] | 0;
            $87 = ((($86)) + 22 | 0);
            $88 = HEAP8[$87 >> 0] | 0;
            $89 = ((($0)) + 241948 | 0);
            HEAP8[$89 >> 0] = $88;
            $90 = HEAP32[$3 >> 2] | 0;
            $91 = HEAP32[$2 >> 2] | 0;
            $92 = (($91) + ($storemerge67$$072$ph$i << 2) | 0);
            $93 = HEAP32[$92 >> 2] | 0;
            $94 = ((($93)) + 32 | 0);
            $95 = HEAP32[$94 >> 2] | 0;
            $$0$in$i144 = $storemerge67$$072$ph$i;
            while (1) {
                $$0$i145 = (($$0$in$i144) + 1) | 0;
                $96 = ($$0$i145 | 0) < ($90 | 0);
                if (!($96)) {
                    break;
                }
                $97 = (($91) + ($$0$i145 << 2) | 0);
                $98 = HEAP32[$97 >> 2] | 0;
                $99 = ((($98)) + 32 | 0);
                $100 = HEAP32[$99 >> 2] | 0;
                $101 = ($100 | 0) == ($95 | 0);
                if ($101) {
                    $$0$in$i144 = $$0$i145;
                } else {
                    $$3 = 0;
                    label = 80;
                    break;
                }
            }
            if ((label | 0) == 80) {
                return ($$3 | 0);
            }
            $102 = (($91) + ($90 << 2) | 0);
            $103 = HEAP32[$102 >> 2] | 0;
            $104 = ((($103)) + 15 | 0);
            $105 = HEAP8[$104 >> 0] | 0;
            $106 = $105 & 255;
            $107 = ((($0)) + 317136 | 0);
            HEAP32[$107 >> 2] = $106;
            $108 = HEAP32[$2 >> 2] | 0;
            $109 = HEAP32[$3 >> 2] | 0;
            $110 = (($108) + ($109 << 2) | 0);
            $111 = HEAP32[$110 >> 2] | 0;
            $112 = ((($111)) + 1156 | 0);
            $113 = HEAP32[$112 >> 2] | 0;
            $114 = $113 << 4;
            $115 = ((($0)) + 317140 | 0);
            HEAP32[$115 >> 2] = $114;
            $116 = HEAP32[$2 >> 2] | 0;
            $117 = HEAP32[$3 >> 2] | 0;
            $118 = (($116) + ($117 << 2) | 0);
            $119 = HEAP32[$118 >> 2] | 0;
            $120 = ((($119)) + 1160 | 0);
            $121 = HEAP32[$120 >> 2] | 0;
            $122 = $121 << 4;
            $123 = ((($0)) + 317144 | 0);
            HEAP32[$123 >> 2] = $122;
            $$3 = 1;
            return ($$3 | 0);
        }
        $11 = ($4 | 0) > (-1);
        if (!($11)) {
            $$3 = 0;
            return ($$3 | 0);
        }
        $12 = ((($0)) + 317136 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = HEAP32[$2 >> 2] | 0;
        $$060262 = $4;
        while (1) {
            $125 = (($14) + ($$060262 << 2) | 0);
            $126 = HEAP32[$125 >> 2] | 0;
            $127 = ((($126)) + 15 | 0);
            $128 = HEAP8[$127 >> 0] | 0;
            $129 = $128 & 255;
            $130 = ($13 | 0) == ($129 | 0);
            if ($130) {
                break;
            }
            $135 = (($$060262) + -1) | 0;
            $136 = ($$060262 | 0) > (0);
            if ($136) {
                $$060262 = $135;
            } else {
                label = 24;
                break;
            }
        }
        if ((label | 0) == 24) {
            if (!($11)) {
                $$3 = 0;
                return ($$3 | 0);
            }
            $124 = HEAP32[$2 >> 2] | 0;
            $storemerge260 = $4;
            while (1) {
                $307 = (($124) + ($storemerge260 << 2) | 0);
                $308 = HEAP32[$307 >> 2] | 0;
                $309 = ((($308)) + 14 | 0);
                $310 = HEAP8[$309 >> 0] | 0;
                $311 = ($310 << 24 >> 24) == (0);
                if (!($311)) {
                    break;
                }
                $312 = (($storemerge260) + -1) | 0;
                $313 = ($storemerge260 | 0) > (0);
                if ($313) {
                    $storemerge260 = $312;
                } else {
                    $$3 = 0;
                    label = 80;
                    break;
                }
            }
            if ((label | 0) == 80) {
                return ($$3 | 0);
            }
            $314 = ((($308)) + 15 | 0);
            $315 = HEAP8[$314 >> 0] | 0;
            $316 = ((($308)) + 16 | 0);
            $317 = HEAP8[$316 >> 0] | 0;
            $318 = ((($308)) + 17 | 0);
            $319 = HEAP8[$318 >> 0] | 0;
            $320 = ((($308)) + 28 | 0);
            $321 = HEAP32[$320 >> 2] | 0;
            $322 = ((($308)) + 32 | 0);
            $323 = HEAP32[$322 >> 2] | 0;
            $324 = ((($308)) + 24 | 0);
            $325 = HEAP32[$324 >> 2] | 0;
            $$0$off0$ph$i76 = 1; $$072$ph$i75 = 0; $$073$in$ph$i74 = $storemerge260;
            L55: while (1) {
                $$073$in$i78 = $$073$in$ph$i74;
                while (1) {
                    $$073$i79 = (($$073$in$i78) + -1) | 0;
                    $326 = ($$073$in$i78 | 0) > (0);
                    if (!($326)) {
                        break L55;
                    }
                    $327 = (($124) + ($$073$i79 << 2) | 0);
                    $328 = HEAP32[$327 >> 2] | 0;
                    $329 = ((($328)) + 14 | 0);
                    $330 = HEAP8[$329 >> 0] | 0;
                    $331 = ($330 << 24 >> 24) == (0);
                    if ($331) {
                        $$073$in$i78 = $$073$i79;
                    } else {
                        break;
                    }
                }
                $332 = ((($328)) + 15 | 0);
                $333 = HEAP8[$332 >> 0] | 0;
                $334 = ($333 << 24 >> 24) == ($315 << 24 >> 24);
                if (!($334)) {
                    break;
                }
                $335 = ((($328)) + 24 | 0);
                $336 = HEAP32[$335 >> 2] | 0;
                $337 = ((($328)) + 32 | 0);
                $338 = HEAP32[$337 >> 2] | 0;
                $339 = ((($328)) + 28 | 0);
                $340 = HEAP32[$339 >> 2] | 0;
                $341 = ((($328)) + 17 | 0);
                $342 = HEAP8[$341 >> 0] | 0;
                $343 = ((($328)) + 16 | 0);
                $344 = HEAP8[$343 >> 0] | 0;
                $345 = ($344 << 24 >> 24) == ($317 << 24 >> 24);
                $346 = ($342 << 24 >> 24) == ($319 << 24 >> 24);
                $or$cond$i80 = $346 & $345;
                $347 = ($340 | 0) == ($321 | 0);
                $or$cond74$i81 = $347 & $or$cond$i80;
                $348 = ($338 | 0) == ($323 | 0);
                $or$cond75$i82 = $348 & $or$cond74$i81;
                $or$cond75$not$i83 = $or$cond75$i82 ^ 1;
                $349 = ($336 | 0) == ($325 | 0);
                $or$cond76$i84 = $349 | $or$cond75$not$i83;
                if ($or$cond76$i84) {
                    break;
                } else {
                    $$0$off0$ph$i76 = 0; $$072$ph$i75 = $$073$i79; $$073$in$ph$i74 = $$073$i79;
                }
            }
            $350 = ($storemerge260 | 0) == ($$072$ph$i75 | 0);
            $or$cond95$i85 = $$0$off0$ph$i76 | $350;
            $storemerge$$072$ph$i75 = $or$cond95$i85 ? $storemerge260 : $$072$ph$i75;
            $351 = ((($2)) + 16 | 0);
            HEAP32[$351 >> 2] = $storemerge$$072$ph$i75;
            $352 = HEAP32[$1 >> 2] | 0;
            $353 = HEAP32[$352 >> 2] | 0;
            $354 = (($353) + ($storemerge$$072$ph$i75 << 2) | 0);
            $355 = HEAP32[$354 >> 2] | 0;
            $356 = ((($355)) + 15 | 0);
            $357 = HEAP8[$356 >> 0] | 0;
            $358 = ((($355)) + 22 | 0);
            $359 = HEAP8[$358 >> 0] | 0;
            $$0$in$ph$i = $storemerge$$072$ph$i75; $$034$ph$i = $357; $$035$ph$i = $359;
            L63: while (1) {
                $$0$in$i70 = $$0$in$ph$i; $$035$i = $$035$ph$i;
                while (1) {
                    $$0$i71 = (($$0$in$i70) + 1) | 0;
                    $360 = ($$0$in$i70 | 0) < ($4 | 0);
                    if (!($360)) {
                        break L63;
                    }
                    $361 = (($353) + ($$0$i71 << 2) | 0);
                    $362 = HEAP32[$361 >> 2] | 0;
                    $363 = ((($362)) + 15 | 0);
                    $364 = HEAP8[$363 >> 0] | 0;
                    $365 = ((($362)) + 22 | 0);
                    $366 = HEAP8[$365 >> 0] | 0;
                    $367 = ($364 << 24 >> 24) == ($$034$ph$i << 24 >> 24);
                    if ($367) {
                        $$0$in$i70 = $$0$i71; $$035$i = $366;
                    } else {
                        break;
                    }
                }
                $368 = ((($362)) + 3865 | 0);
                $369 = HEAP8[$368 >> 0] | 0;
                $370 = ((($362)) + 16 | 0);
                $371 = HEAP8[$370 >> 0] | 0;
                $372 = ($371 << 24 >> 24) == (0);
                $373 = ($369 << 24 >> 24) == ($$035$i << 24 >> 24);
                $or$cond$i72 = $373 & $372;
                if ($or$cond$i72) {
                    $$0$in$ph$i = $$0$i71; $$034$ph$i = $364; $$035$ph$i = $366;
                } else {
                    break;
                }
            }
            $374 = ((($352)) + 20 | 0);
            HEAP32[$374 >> 2] = $$0$in$i70;
            $375 = (($353) + ($$0$in$i70 << 2) | 0);
            $376 = HEAP32[$375 >> 2] | 0;
            $377 = ((($376)) + 22 | 0);
            $378 = HEAP8[$377 >> 0] | 0;
            $379 = ((($0)) + 241948 | 0);
            HEAP8[$379 >> 0] = $378;
            $380 = HEAP32[$3 >> 2] | 0;
            $381 = HEAP32[$2 >> 2] | 0;
            $382 = (($381) + ($storemerge$$072$ph$i75 << 2) | 0);
            $383 = HEAP32[$382 >> 2] | 0;
            $384 = ((($383)) + 32 | 0);
            $385 = HEAP32[$384 >> 2] | 0;
            $$0$in$i = $storemerge$$072$ph$i75;
            while (1) {
                $$0$i = (($$0$in$i) + 1) | 0;
                $386 = ($$0$i | 0) < ($380 | 0);
                if (!($386)) {
                    $$3 = 1;
                    label = 80;
                    break;
                }
                $387 = (($381) + ($$0$i << 2) | 0);
                $388 = HEAP32[$387 >> 2] | 0;
                $389 = ((($388)) + 32 | 0);
                $390 = HEAP32[$389 >> 2] | 0;
                $391 = ($390 | 0) == ($385 | 0);
                if ($391) {
                    $$0$in$i = $$0$i;
                } else {
                    $$3 = 0;
                    label = 80;
                    break;
                }
            }
            if ((label | 0) == 80) {
                return ($$3 | 0);
            }
        }
        $131 = ($$060262 | 0) > (-1);
        L77: do {
            if ($131) {
                $132 = ((($126)) + 14 | 0);
                $133 = HEAP8[$132 >> 0] | 0;
                $134 = ($133 << 24 >> 24) == (0);
                if ($134) {
                    $storemerge65258509 = $$060262;
                    while (1) {
                        $141 = (($storemerge65258509) + -1) | 0;
                        $142 = ($storemerge65258509 | 0) > (0);
                        if (!($142)) {
                            break L77;
                        }
                        $$phi$trans$insert = (($14) + ($141 << 2) | 0);
                        $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
                        $143 = ((($$pre)) + 14 | 0);
                        $144 = HEAP8[$143 >> 0] | 0;
                        $145 = ($144 << 24 >> 24) == (0);
                        if ($145) {
                            $storemerge65258509 = $141;
                        } else {
                            $$lcssa470 = $$pre; $storemerge65258$lcssa = $141;
                            break;
                        }
                    }
                } else {
                    $$lcssa470 = $126; $storemerge65258$lcssa = $$060262;
                }
                $146 = ((($$lcssa470)) + 15 | 0);
                $147 = HEAP8[$146 >> 0] | 0;
                $148 = ((($$lcssa470)) + 16 | 0);
                $149 = HEAP8[$148 >> 0] | 0;
                $150 = ((($$lcssa470)) + 17 | 0);
                $151 = HEAP8[$150 >> 0] | 0;
                $152 = ((($$lcssa470)) + 28 | 0);
                $153 = HEAP32[$152 >> 2] | 0;
                $154 = ((($$lcssa470)) + 32 | 0);
                $155 = HEAP32[$154 >> 2] | 0;
                $156 = ((($$lcssa470)) + 24 | 0);
                $157 = HEAP32[$156 >> 2] | 0;
                $$0$off0$ph$i132 = 1; $$072$ph$i131 = 0; $$073$in$ph$i130 = $storemerge65258$lcssa;
                L84: while (1) {
                    $$073$in$i134 = $$073$in$ph$i130;
                    while (1) {
                        $$073$i135 = (($$073$in$i134) + -1) | 0;
                        $158 = ($$073$in$i134 | 0) > (0);
                        if (!($158)) {
                            break L84;
                        }
                        $159 = (($14) + ($$073$i135 << 2) | 0);
                        $160 = HEAP32[$159 >> 2] | 0;
                        $161 = ((($160)) + 14 | 0);
                        $162 = HEAP8[$161 >> 0] | 0;
                        $163 = ($162 << 24 >> 24) == (0);
                        if ($163) {
                            $$073$in$i134 = $$073$i135;
                        } else {
                            break;
                        }
                    }
                    $164 = ((($160)) + 15 | 0);
                    $165 = HEAP8[$164 >> 0] | 0;
                    $166 = ($165 << 24 >> 24) == ($147 << 24 >> 24);
                    if (!($166)) {
                        break;
                    }
                    $167 = ((($160)) + 24 | 0);
                    $168 = HEAP32[$167 >> 2] | 0;
                    $169 = ((($160)) + 32 | 0);
                    $170 = HEAP32[$169 >> 2] | 0;
                    $171 = ((($160)) + 28 | 0);
                    $172 = HEAP32[$171 >> 2] | 0;
                    $173 = ((($160)) + 17 | 0);
                    $174 = HEAP8[$173 >> 0] | 0;
                    $175 = ((($160)) + 16 | 0);
                    $176 = HEAP8[$175 >> 0] | 0;
                    $177 = ($176 << 24 >> 24) == ($149 << 24 >> 24);
                    $178 = ($174 << 24 >> 24) == ($151 << 24 >> 24);
                    $or$cond$i136 = $178 & $177;
                    $179 = ($172 | 0) == ($153 | 0);
                    $or$cond74$i137 = $179 & $or$cond$i136;
                    $180 = ($170 | 0) == ($155 | 0);
                    $or$cond75$i138 = $180 & $or$cond74$i137;
                    $or$cond75$not$i139 = $or$cond75$i138 ^ 1;
                    $181 = ($168 | 0) == ($157 | 0);
                    $or$cond76$i140 = $181 | $or$cond75$not$i139;
                    if ($or$cond76$i140) {
                        break;
                    } else {
                        $$0$off0$ph$i132 = 0; $$072$ph$i131 = $$073$i135; $$073$in$ph$i130 = $$073$i135;
                    }
                }
                $182 = ($storemerge65258$lcssa | 0) == ($$072$ph$i131 | 0);
                $or$cond95$i141 = $$0$off0$ph$i132 | $182;
                $storemerge65$$072$ph$i131 = $or$cond95$i141 ? $storemerge65258$lcssa : $$072$ph$i131;
                $183 = ((($2)) + 16 | 0);
                HEAP32[$183 >> 2] = $storemerge65$$072$ph$i131;
                $184 = HEAP32[$1 >> 2] | 0;
                $185 = HEAP32[$184 >> 2] | 0;
                $186 = (($185) + ($storemerge65$$072$ph$i131 << 2) | 0);
                $187 = HEAP32[$186 >> 2] | 0;
                $188 = ((($187)) + 15 | 0);
                $189 = HEAP8[$188 >> 0] | 0;
                $190 = ((($187)) + 22 | 0);
                $191 = HEAP8[$190 >> 0] | 0;
                $$0$in$ph$i122 = $storemerge65$$072$ph$i131; $$034$ph$i121 = $189; $$035$ph$i120 = $191;
                L92: while (1) {
                    $$0$in$i125 = $$0$in$ph$i122; $$035$i124 = $$035$ph$i120;
                    while (1) {
                        $$0$i126 = (($$0$in$i125) + 1) | 0;
                        $192 = ($$0$in$i125 | 0) < ($$060262 | 0);
                        if (!($192)) {
                            break L92;
                        }
                        $193 = (($185) + ($$0$i126 << 2) | 0);
                        $194 = HEAP32[$193 >> 2] | 0;
                        $195 = ((($194)) + 15 | 0);
                        $196 = HEAP8[$195 >> 0] | 0;
                        $197 = ((($194)) + 22 | 0);
                        $198 = HEAP8[$197 >> 0] | 0;
                        $199 = ($196 << 24 >> 24) == ($$034$ph$i121 << 24 >> 24);
                        if ($199) {
                            $$0$in$i125 = $$0$i126; $$035$i124 = $198;
                        } else {
                            break;
                        }
                    }
                    $200 = ((($194)) + 3865 | 0);
                    $201 = HEAP8[$200 >> 0] | 0;
                    $202 = ((($194)) + 16 | 0);
                    $203 = HEAP8[$202 >> 0] | 0;
                    $204 = ($203 << 24 >> 24) == (0);
                    $205 = ($201 << 24 >> 24) == ($$035$i124 << 24 >> 24);
                    $or$cond$i127 = $205 & $204;
                    if ($or$cond$i127) {
                        $$0$in$ph$i122 = $$0$i126; $$034$ph$i121 = $196; $$035$ph$i120 = $198;
                    } else {
                        break;
                    }
                }
                $206 = ((($184)) + 20 | 0);
                HEAP32[$206 >> 2] = $$0$in$i125;
                $207 = (($185) + ($$0$in$i125 << 2) | 0);
                $208 = HEAP32[$207 >> 2] | 0;
                $209 = ((($208)) + 22 | 0);
                $210 = HEAP8[$209 >> 0] | 0;
                $211 = ((($0)) + 241948 | 0);
                HEAP8[$211 >> 0] = $210;
                $212 = HEAP32[$3 >> 2] | 0;
                $213 = HEAP32[$2 >> 2] | 0;
                $214 = (($213) + ($storemerge65$$072$ph$i131 << 2) | 0);
                $215 = HEAP32[$214 >> 2] | 0;
                $216 = ((($215)) + 32 | 0);
                $217 = HEAP32[$216 >> 2] | 0;
                $$0$in$i116 = $storemerge65$$072$ph$i131;
                while (1) {
                    $$0$i117 = (($$0$in$i116) + 1) | 0;
                    $218 = ($$0$i117 | 0) < ($212 | 0);
                    if (!($218)) {
                        $$3 = 1;
                        label = 80;
                        break;
                    }
                    $219 = (($213) + ($$0$i117 << 2) | 0);
                    $220 = HEAP32[$219 >> 2] | 0;
                    $221 = ((($220)) + 32 | 0);
                    $222 = HEAP32[$221 >> 2] | 0;
                    $223 = ($222 | 0) == ($217 | 0);
                    if ($223) {
                        $$0$in$i116 = $$0$i117;
                    } else {
                        $$3 = 0;
                        label = 80;
                        break;
                    }
                }
                if ((label | 0) == 80) {
                    return ($$3 | 0);
                }
            }
        } while (0);
        $137 = ($$060262 | 0) > ($4 | 0);
        if ($137) {
            $$3 = 0;
            return ($$3 | 0);
        }
        $138 = ((($126)) + 14 | 0);
        $139 = HEAP8[$138 >> 0] | 0;
        $140 = ($139 << 24 >> 24) == (0);
        L109: do {
            if ($140) {
                $storemerge66257507 = $$060262;
                while (1) {
                    $224 = (($storemerge66257507) + 1) | 0;
                    $225 = ($storemerge66257507 | 0) < ($4 | 0);
                    if (!($225)) {
                        $$3 = 0;
                        break;
                    }
                    $$phi$trans$insert341 = (($14) + ($224 << 2) | 0);
                    $$pre342 = HEAP32[$$phi$trans$insert341 >> 2] | 0;
                    $226 = ((($$pre342)) + 14 | 0);
                    $227 = HEAP8[$226 >> 0] | 0;
                    $228 = ($227 << 24 >> 24) == (0);
                    if ($228) {
                        $storemerge66257507 = $224;
                    } else {
                        $$lcssa454 = $$pre342; $storemerge66257$lcssa = $224;
                        break L109;
                    }
                }
                return ($$3 | 0);
            } else {
                $$lcssa454 = $126; $storemerge66257$lcssa = $$060262;
            }
        } while (0);
        $229 = ((($$lcssa454)) + 15 | 0);
        $230 = HEAP8[$229 >> 0] | 0;
        $231 = ((($$lcssa454)) + 16 | 0);
        $232 = HEAP8[$231 >> 0] | 0;
        $233 = ((($$lcssa454)) + 17 | 0);
        $234 = HEAP8[$233 >> 0] | 0;
        $235 = ((($$lcssa454)) + 28 | 0);
        $236 = HEAP32[$235 >> 2] | 0;
        $237 = ((($$lcssa454)) + 32 | 0);
        $238 = HEAP32[$237 >> 2] | 0;
        $239 = ((($$lcssa454)) + 24 | 0);
        $240 = HEAP32[$239 >> 2] | 0;
        $$0$off0$ph$i104 = 1; $$072$ph$i103 = 0; $$073$in$ph$i102 = $storemerge66257$lcssa;
        L115: while (1) {
            $$073$in$i106 = $$073$in$ph$i102;
            while (1) {
                $$073$i107 = (($$073$in$i106) + -1) | 0;
                $241 = ($$073$in$i106 | 0) > (0);
                if (!($241)) {
                    break L115;
                }
                $242 = (($14) + ($$073$i107 << 2) | 0);
                $243 = HEAP32[$242 >> 2] | 0;
                $244 = ((($243)) + 14 | 0);
                $245 = HEAP8[$244 >> 0] | 0;
                $246 = ($245 << 24 >> 24) == (0);
                if ($246) {
                    $$073$in$i106 = $$073$i107;
                } else {
                    break;
                }
            }
            $247 = ((($243)) + 15 | 0);
            $248 = HEAP8[$247 >> 0] | 0;
            $249 = ($248 << 24 >> 24) == ($230 << 24 >> 24);
            if (!($249)) {
                break;
            }
            $250 = ((($243)) + 24 | 0);
            $251 = HEAP32[$250 >> 2] | 0;
            $252 = ((($243)) + 32 | 0);
            $253 = HEAP32[$252 >> 2] | 0;
            $254 = ((($243)) + 28 | 0);
            $255 = HEAP32[$254 >> 2] | 0;
            $256 = ((($243)) + 17 | 0);
            $257 = HEAP8[$256 >> 0] | 0;
            $258 = ((($243)) + 16 | 0);
            $259 = HEAP8[$258 >> 0] | 0;
            $260 = ($259 << 24 >> 24) == ($232 << 24 >> 24);
            $261 = ($257 << 24 >> 24) == ($234 << 24 >> 24);
            $or$cond$i108 = $261 & $260;
            $262 = ($255 | 0) == ($236 | 0);
            $or$cond74$i109 = $262 & $or$cond$i108;
            $263 = ($253 | 0) == ($238 | 0);
            $or$cond75$i110 = $263 & $or$cond74$i109;
            $or$cond75$not$i111 = $or$cond75$i110 ^ 1;
            $264 = ($251 | 0) == ($240 | 0);
            $or$cond76$i112 = $264 | $or$cond75$not$i111;
            if ($or$cond76$i112) {
                break;
            } else {
                $$0$off0$ph$i104 = 0; $$072$ph$i103 = $$073$i107; $$073$in$ph$i102 = $$073$i107;
            }
        }
        $265 = ($storemerge66257$lcssa | 0) == ($$072$ph$i103 | 0);
        $or$cond95$i113 = $$0$off0$ph$i104 | $265;
        $storemerge66$$072$ph$i103 = $or$cond95$i113 ? $storemerge66257$lcssa : $$072$ph$i103;
        $266 = ((($2)) + 16 | 0);
        HEAP32[$266 >> 2] = $storemerge66$$072$ph$i103;
        $267 = HEAP32[$1 >> 2] | 0;
        $268 = HEAP32[$267 >> 2] | 0;
        $269 = (($268) + ($storemerge66$$072$ph$i103 << 2) | 0);
        $270 = HEAP32[$269 >> 2] | 0;
        $271 = ((($270)) + 15 | 0);
        $272 = HEAP8[$271 >> 0] | 0;
        $273 = ((($270)) + 22 | 0);
        $274 = HEAP8[$273 >> 0] | 0;
        $$0$in$ph$i94 = $storemerge66$$072$ph$i103; $$034$ph$i93 = $272; $$035$ph$i92 = $274;
        L123: while (1) {
            $$0$in$i97 = $$0$in$ph$i94; $$035$i96 = $$035$ph$i92;
            while (1) {
                $$0$i98 = (($$0$in$i97) + 1) | 0;
                $275 = ($$0$in$i97 | 0) < ($4 | 0);
                if (!($275)) {
                    break L123;
                }
                $276 = (($268) + ($$0$i98 << 2) | 0);
                $277 = HEAP32[$276 >> 2] | 0;
                $278 = ((($277)) + 15 | 0);
                $279 = HEAP8[$278 >> 0] | 0;
                $280 = ((($277)) + 22 | 0);
                $281 = HEAP8[$280 >> 0] | 0;
                $282 = ($279 << 24 >> 24) == ($$034$ph$i93 << 24 >> 24);
                if ($282) {
                    $$0$in$i97 = $$0$i98; $$035$i96 = $281;
                } else {
                    break;
                }
            }
            $283 = ((($277)) + 3865 | 0);
            $284 = HEAP8[$283 >> 0] | 0;
            $285 = ((($277)) + 16 | 0);
            $286 = HEAP8[$285 >> 0] | 0;
            $287 = ($286 << 24 >> 24) == (0);
            $288 = ($284 << 24 >> 24) == ($$035$i96 << 24 >> 24);
            $or$cond$i99 = $288 & $287;
            if ($or$cond$i99) {
                $$0$in$ph$i94 = $$0$i98; $$034$ph$i93 = $279; $$035$ph$i92 = $281;
            } else {
                break;
            }
        }
        $289 = ((($267)) + 20 | 0);
        HEAP32[$289 >> 2] = $$0$in$i97;
        $290 = (($268) + ($$0$in$i97 << 2) | 0);
        $291 = HEAP32[$290 >> 2] | 0;
        $292 = ((($291)) + 22 | 0);
        $293 = HEAP8[$292 >> 0] | 0;
        $294 = ((($0)) + 241948 | 0);
        HEAP8[$294 >> 0] = $293;
        $295 = HEAP32[$3 >> 2] | 0;
        $296 = HEAP32[$2 >> 2] | 0;
        $297 = (($296) + ($storemerge66$$072$ph$i103 << 2) | 0);
        $298 = HEAP32[$297 >> 2] | 0;
        $299 = ((($298)) + 32 | 0);
        $300 = HEAP32[$299 >> 2] | 0;
        $$0$in$i88 = $storemerge66$$072$ph$i103;
        while (1) {
            $$0$i89 = (($$0$in$i88) + 1) | 0;
            $301 = ($$0$i89 | 0) < ($295 | 0);
            if (!($301)) {
                $$3 = 1;
                label = 80;
                break;
            }
            $302 = (($296) + ($$0$i89 << 2) | 0);
            $303 = HEAP32[$302 >> 2] | 0;
            $304 = ((($303)) + 32 | 0);
            $305 = HEAP32[$304 >> 2] | 0;
            $306 = ($305 | 0) == ($300 | 0);
            if ($306) {
                $$0$in$i88 = $$0$i89;
            } else {
                $$3 = 0;
                label = 80;
                break;
            }
        }
        if ((label | 0) == 80) {
            return ($$3 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec26CheckAccessUnitBoundaryExtEPN10WelsCommon19TagNalUnitHeaderExtES2_PNS_15TagSliceHeadersES4_($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
        var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        $4 = ((($3)) + 64 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 17 | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = ((($1)) + 17 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ($7 << 24 >> 24) == ($9 << 24 >> 24);
        if (!($10)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $11 = ((($2)) + 24 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($3)) + 24 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = ($12 | 0) < ($14 | 0);
        if ($15) {
            $$0 = 0;
            return ($$0 | 0);
        }
        $16 = ($12 | 0) > ($14 | 0);
        if ($16) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $17 = ((($0)) + 15 | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = ((($1)) + 15 | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = ($18 & 255) < ($20 & 255);
        if ($21) {
            $$0 = 0;
            return ($$0 | 0);
        }
        $22 = ($18 & 255) > ($20 & 255);
        if ($22) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $23 = ((($0)) + 16 | 0);
        $24 = HEAP8[$23 >> 0] | 0;
        $25 = ((($1)) + 16 | 0);
        $26 = HEAP8[$25 >> 0] | 0;
        $27 = ($24 & 255) < ($26 & 255);
        if ($27) {
            $$0 = 0;
            return ($$0 | 0);
        }
        $28 = ($24 & 255) > ($26 & 255);
        if ($28) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $29 = ((($2)) + 4 | 0);
        $30 = HEAP32[$29 >> 2] | 0;
        $31 = ((($3)) + 4 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = ($30 | 0) == ($32 | 0);
        if (!($33)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $34 = ((($2)) + 76 | 0);
        $35 = HEAP32[$34 >> 2] | 0;
        $36 = ((($3)) + 76 | 0);
        $37 = HEAP32[$36 >> 2] | 0;
        $38 = ($35 | 0) == ($37 | 0);
        if (!($38)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $39 = ((($2)) + 64 | 0);
        $40 = HEAP32[$39 >> 2] | 0;
        $41 = HEAP32[$40 >> 2] | 0;
        $42 = HEAP32[$5 >> 2] | 0;
        $43 = ($41 | 0) == ($42 | 0);
        if (!($43)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $44 = ((($2)) + 2737 | 0);
        $45 = HEAP8[$44 >> 0] | 0;
        $46 = ((($3)) + 2737 | 0);
        $47 = HEAP8[$46 >> 0] | 0;
        $48 = ($45 << 24 >> 24) == ($47 << 24 >> 24);
        if (!($48)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $49 = ((($2)) + 2738 | 0);
        $50 = HEAP8[$49 >> 0] | 0;
        $51 = ((($3)) + 2738 | 0);
        $52 = HEAP8[$51 >> 0] | 0;
        $53 = ($50 << 24 >> 24) == ($52 << 24 >> 24);
        if (!($53)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $54 = ((($0)) + 1 | 0);
        $55 = HEAP8[$54 >> 0] | 0;
        $56 = ($55 << 24 >> 24) != (0);
        $57 = ((($1)) + 1 | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = ($58 << 24 >> 24) != (0);
        $60 = $56 ^ $59;
        if ($60) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $61 = ((($0)) + 12 | 0);
        $62 = HEAP8[$61 >> 0] | 0;
        $63 = ((($1)) + 12 | 0);
        $64 = HEAP8[$63 >> 0] | 0;
        $65 = ($62 << 24 >> 24) == ($64 << 24 >> 24);
        if (!($65)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $66 = ($62 << 24 >> 24) == (0);
        if (!($66)) {
            $67 = ((($2)) + 2728 | 0);
            $68 = HEAP16[$67 >> 1] | 0;
            $69 = ((($3)) + 2728 | 0);
            $70 = HEAP16[$69 >> 1] | 0;
            $71 = ($68 << 16 >> 16) == ($70 << 16 >> 16);
            if (!($71)) {
                $$0 = 1;
                return ($$0 | 0);
            }
        }
        $72 = ((($5)) + 20 | 0);
        $73 = HEAP32[$72 >> 2] | 0;
        switch ($73 | 0) {
            case 0: {
                $74 = ((($2)) + 8 | 0);
                $75 = HEAP32[$74 >> 2] | 0;
                $76 = ((($3)) + 8 | 0);
                $77 = HEAP32[$76 >> 2] | 0;
                $78 = ($75 | 0) == ($77 | 0);
                if (!($78)) {
                    $$0 = 1;
                    return ($$0 | 0);
                }
                $79 = ((($2)) + 12 | 0);
                $80 = HEAP32[$79 >> 2] | 0;
                $81 = ((($3)) + 12 | 0);
                $82 = HEAP32[$81 >> 2] | 0;
                $83 = ($80 | 0) == ($82 | 0);
                if (!($83)) {
                    $$0 = 1;
                    return ($$0 | 0);
                }
                break;
            }
            case 1: {
                $84 = ((($2)) + 16 | 0);
                $85 = HEAP32[$84 >> 2] | 0;
                $86 = ((($3)) + 16 | 0);
                $87 = HEAP32[$86 >> 2] | 0;
                $88 = ($85 | 0) == ($87 | 0);
                if (!($88)) {
                    $$0 = 1;
                    return ($$0 | 0);
                }
                $89 = ((($2)) + 20 | 0);
                $90 = HEAP32[$89 >> 2] | 0;
                $91 = ((($3)) + 20 | 0);
                $92 = HEAP32[$91 >> 2] | 0;
                $93 = ($90 | 0) == ($92 | 0);
                if (!($93)) {
                    $$0 = 1;
                    return ($$0 | 0);
                }
                break;
            }
            default: {
            }
        }
        $94 = ((($2)) + 68 | 0);
        $95 = HEAP32[$94 >> 2] | 0;
        $96 = ((($3)) + 68 | 0);
        $97 = HEAP32[$96 >> 2] | 0;
        $98 = (_memcmp($95, $97, 684) | 0);
        $99 = ($98 | 0) == (0);
        if ($99) {
            $100 = (_memcmp($40, $5, 832) | 0);
            $101 = ($100 | 0) != (0);
            return ($101 | 0);
        } else {
            $$0 = 1;
            return ($$0 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec16MarkECFrameAsRefEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = (__ZN7WelsDec13WelsMarkAsRefEPNS_21TagWelsDecoderContextE($0) | 0);
        $2 = ($1 | 0) == (0);
        if (!($2)) {
            $$0 = $1;
            return ($$0 | 0);
        }
        $3 = ((($0)) + 5464 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($4)) + 16 | 0);
        $6 = ((($4)) + 56 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($4)) + 60 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($4)) + 32 | 0);
        $11 = ((($0)) + 317112 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ((($0)) + 317116 | 0);
        _ExpandReferencingPicture($5, $7, $9, $10, $12, $13);
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec11DecInitBitsEPN10WelsCommon15TagBitStringAuxEPKhi($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($1 | 0) == (0 | 0);
        if ($3) {
            $$1 = 2;
            return ($$1 | 0);
        }
        $4 = (($2) + 7) | 0;
        $5 = $4 >> 3;
        HEAP32[$0 >> 2] = $1;
        $6 = (($1) + ($5) | 0);
        $7 = ((($0)) + 4 | 0);
        HEAP32[$7 >> 2] = $6;
        $8 = ((($0)) + 8 | 0);
        HEAP32[$8 >> 2] = $2;
        $9 = $1;
        $10 = ((($0)) + 16 | 0);
        HEAP32[$10 >> 2] = $9;
        $11 = ($5 | 0) > (0);
        if (!($11)) {
            $$1 = 2;
            return ($$1 | 0);
        }
        $12 = HEAP8[$1 >> 0] | 0;
        $13 = $12 & 255;
        $14 = $13 << 24;
        $15 = ((($1)) + 1 | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = $16 & 255;
        $18 = $17 << 16;
        $19 = $18 | $14;
        $20 = ((($1)) + 2 | 0);
        $21 = HEAP8[$20 >> 0] | 0;
        $22 = $21 & 255;
        $23 = $22 << 8;
        $24 = $19 | $23;
        $25 = ((($1)) + 3 | 0);
        $26 = HEAP8[$25 >> 0] | 0;
        $27 = $26 & 255;
        $28 = $24 | $27;
        $29 = ((($0)) + 20 | 0);
        HEAP32[$29 >> 2] = $28;
        $30 = ((($1)) + 4 | 0);
        HEAP32[$10 >> 2] = $30;
        $31 = ((($0)) + 24 | 0);
        HEAP32[$31 >> 2] = -16;
        $$1 = 0;
        return ($$1 | 0);
    }
    function __ZN7WelsDec8ParseSpsEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEPiS5_Phi($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$ = 0, $$$i = 0, $$$i671 = 0, $$$i680 = 0, $$$i689 = 0, $$$i710 = 0, $$$i719 = 0, $$$i731 = 0, $$$i741 = 0, $$$i750 = 0, $$$i759 = 0, $$$i771 = 0, $$$i780 = 0, $$$i792 = 0, $$$i801 = 0, $$$i813 = 0, $$$i822 = 0, $$$i831 = 0, $$$i840 = 0, $$$i887 = 0;
        var $$0 = 0, $$0$i888$ph = 0, $$05742126 = 0, $$0575 = 0, $$0576 = 0, $$06162128 = 0, $$1$i = 0, $$1$i674 = 0, $$1$i683 = 0, $$1$i692 = 0, $$1$i713 = 0, $$1$i722 = 0, $$1$i734 = 0, $$1$i744 = 0, $$1$i753 = 0, $$1$i762 = 0, $$1$i774 = 0, $$1$i783 = 0, $$1$i795 = 0, $$1$i804 = 0;
        var $$1$i816 = 0, $$1$i825 = 0, $$1$i834 = 0, $$1$i843 = 0, $$119$i = 0, $$119$i673 = 0, $$119$i682 = 0, $$119$i691 = 0, $$119$i712 = 0, $$119$i721 = 0, $$119$i733 = 0, $$119$i743 = 0, $$119$i752 = 0, $$119$i761 = 0, $$119$i773 = 0, $$119$i782 = 0, $$119$i794 = 0, $$119$i803 = 0, $$119$i815 = 0, $$119$i824 = 0;
        var $$119$i833 = 0, $$119$i842 = 0, $$2$i = 0, $$2$i672 = 0, $$2$i681 = 0, $$2$i690 = 0, $$2$i711 = 0, $$2$i720 = 0, $$2$i732 = 0, $$2$i742 = 0, $$2$i751 = 0, $$2$i760 = 0, $$2$i772 = 0, $$2$i781 = 0, $$2$i793 = 0, $$2$i802 = 0, $$2$i814 = 0, $$2$i823 = 0, $$2$i832 = 0, $$2$i841 = 0;
        var $$47 = 0, $$pr = 0, $$pre = 0, $$pre$phi1$i$pre$phiZ2DZZ2D = 0, $$pre2132 = 0, $$pre2133 = 0, $$pre2134 = 0, $$pre2135 = 0, $$pre2136 = 0, $$pre2137 = 0, $$pre2350 = 0, $$pre2399 = 0, $$sink = 0, $$sroa$336$12 = 0, $$sroa$336$15 = 0, $$sroa$336$19 = 0, $$sroa$336$27 = 0, $$sroa$336$35 = 0, $$sroa$336$39$ph = 0, $$sroa$336$392125 = 0;
        var $$sroa$336$47 = 0, $$sroa$336$48 = 0, $$sroa$336$51 = 0, $$sroa$336$52 = 0, $$sroa$336$55 = 0, $$sroa$336$58 = 0, $$sroa$336$59 = 0, $$sroa$336$61 = 0, $$sroa$336$62 = 0, $$sroa$336$63 = 0, $$sroa$336$66 = 0, $$sroa$336$69 = 0, $$sroa$336$72 = 0, $$sroa$336$76 = 0, $$sroa$336$77 = 0, $$sroa$336$78 = 0, $$sroa$336$9 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i1968 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682602 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682603 = 0;
        var $$sroa$6907$0$$sroa$6907$16$$pre$i19682604 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682605 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682606 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682607 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682608 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682609 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682610 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682611 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682612 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682613 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682614 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682615 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682617 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682620 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682621 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682622 = 0, $$sroa$6907$0$$sroa$6907$16$$pre$i19682623 = 0;
        var $$sroa$6907$0$$sroa$6907$16$10001924 = 0, $$sroa$6907$0$$sroa$6907$16$10011923 = 0, $$sroa$6907$0$$sroa$6907$16$100119232337 = 0, $$sroa$6907$0$$sroa$6907$16$100119232338 = 0, $$sroa$6907$0$$sroa$6907$16$100119232339 = 0, $$sroa$6907$0$$sroa$6907$16$100119232340 = 0, $$sroa$6907$0$$sroa$6907$16$100119232341 = 0, $$sroa$6907$0$$sroa$6907$16$100119232342 = 0, $$sroa$6907$0$$sroa$6907$16$10021965 = 0, $$sroa$6907$0$$sroa$6907$16$10031932 = 0, $$sroa$6907$0$$sroa$6907$16$10041966 = 0, $$sroa$6907$0$$sroa$6907$16$10051967 = 0, $$sroa$6907$0$$sroa$6907$16$10061979 = 0, $$sroa$6907$0$$sroa$6907$16$100619792456 = 0, $$sroa$6907$0$$sroa$6907$16$100619792457 = 0, $$sroa$6907$0$$sroa$6907$16$100619792458 = 0, $$sroa$6907$0$$sroa$6907$16$100619792459 = 0, $$sroa$6907$0$$sroa$6907$16$100619792460 = 0, $$sroa$6907$0$$sroa$6907$16$100619792461 = 0, $$sroa$6907$0$$sroa$6907$16$100619792462 = 0;
        var $$sroa$6907$0$$sroa$6907$16$100619792463 = 0, $$sroa$6907$0$$sroa$6907$16$100619792464 = 0, $$sroa$6907$0$$sroa$6907$16$100619792465 = 0, $$sroa$6907$0$$sroa$6907$16$100619792466 = 0, $$sroa$6907$0$$sroa$6907$16$10071942 = 0, $$sroa$6907$0$$sroa$6907$16$10081941 = 0, $$sroa$6907$0$$sroa$6907$16$10091933 = 0, $$sroa$6907$0$$sroa$6907$16$100919332383 = 0, $$sroa$6907$0$$sroa$6907$16$100919332384 = 0, $$sroa$6907$0$$sroa$6907$16$100919332385 = 0, $$sroa$6907$0$$sroa$6907$16$100919332386 = 0, $$sroa$6907$0$$sroa$6907$16$100919332387 = 0, $$sroa$6907$0$$sroa$6907$16$100919332388 = 0, $$sroa$6907$0$$sroa$6907$16$100919332389 = 0, $$sroa$6907$0$$sroa$6907$16$100919332390 = 0, $$sroa$6907$0$$sroa$6907$16$100919332391 = 0, $$sroa$6907$0$$sroa$6907$16$10101934 = 0, $$sroa$6907$0$$sroa$6907$16$10111935 = 0, $$sroa$6907$0$$sroa$6907$16$10121947 = 0, $$sroa$6907$0$$sroa$6907$16$10131971 = 0;
        var $$sroa$6907$0$$sroa$6907$16$10141985 = 0, $$sroa$6907$0$$sroa$6907$16$10151960 = 0, $$sroa$6907$0$$sroa$6907$16$10161953 = 0, $$sroa$6907$0$$sroa$6907$16$101619532515 = 0, $$sroa$6907$0$$sroa$6907$16$101619532516 = 0, $$sroa$6907$0$$sroa$6907$16$101619532517 = 0, $$sroa$6907$0$$sroa$6907$16$101619532518 = 0, $$sroa$6907$0$$sroa$6907$16$101619532519 = 0, $$sroa$6907$0$$sroa$6907$16$101619532520 = 0, $$sroa$6907$0$$sroa$6907$16$101619532521 = 0, $$sroa$6907$0$$sroa$6907$16$101619532522 = 0, $$sroa$6907$0$$sroa$6907$16$101619532523 = 0, $$sroa$6907$0$$sroa$6907$16$101619532524 = 0, $$sroa$6907$0$$sroa$6907$16$101619532525 = 0, $$sroa$6907$0$$sroa$6907$16$101619532526 = 0, $$sroa$6907$0$$sroa$6907$16$101619532527 = 0, $$sroa$6907$0$$sroa$6907$16$10171940 = 0, $$sroa$6907$0$$sroa$6907$16$10181939 = 0, $$sroa$6907$0$$sroa$6907$16$10191970 = 0, $$sroa$6907$0$$sroa$6907$16$10201962 = 0;
        var $$sroa$6907$0$$sroa$6907$16$10211972 = 0, $$sroa$6907$0$$sroa$6907$16$10221973 = 0, $$sroa$6907$0$$sroa$6907$16$10231974 = 0, $$sroa$6907$0$$sroa$6907$16$102319742495 = 0, $$sroa$6907$0$$sroa$6907$16$102319742496 = 0, $$sroa$6907$0$$sroa$6907$16$102319742497 = 0, $$sroa$6907$0$$sroa$6907$16$102319742498 = 0, $$sroa$6907$0$$sroa$6907$16$102319742499 = 0, $$sroa$6907$0$$sroa$6907$16$102319742500 = 0, $$sroa$6907$0$$sroa$6907$16$102319742501 = 0, $$sroa$6907$0$$sroa$6907$16$102319742502 = 0, $$sroa$6907$0$$sroa$6907$16$102319742503 = 0, $$sroa$6907$0$$sroa$6907$16$102319742504 = 0, $$sroa$6907$0$$sroa$6907$16$102319742505 = 0, $$sroa$6907$0$$sroa$6907$16$102319742506 = 0, $$sroa$6907$0$$sroa$6907$16$10241977 = 0, $$sroa$6907$0$$sroa$6907$16$10251936 = 0, $$sroa$6907$0$$sroa$6907$16$10261958 = 0, $$sroa$6907$0$$sroa$6907$16$102619582557 = 0, $$sroa$6907$0$$sroa$6907$16$102619582558 = 0;
        var $$sroa$6907$0$$sroa$6907$16$102619582559 = 0, $$sroa$6907$0$$sroa$6907$16$102619582560 = 0, $$sroa$6907$0$$sroa$6907$16$102619582561 = 0, $$sroa$6907$0$$sroa$6907$16$102619582562 = 0, $$sroa$6907$0$$sroa$6907$16$102619582563 = 0, $$sroa$6907$0$$sroa$6907$16$102619582564 = 0, $$sroa$6907$0$$sroa$6907$16$102619582565 = 0, $$sroa$6907$0$$sroa$6907$16$102619582566 = 0, $$sroa$6907$0$$sroa$6907$16$102619582567 = 0, $$sroa$6907$0$$sroa$6907$16$102619582568 = 0, $$sroa$6907$0$$sroa$6907$16$102619582569 = 0, $$sroa$6907$0$$sroa$6907$16$102619582570 = 0, $$sroa$6907$0$$sroa$6907$16$10271955 = 0, $$sroa$6907$0$$sroa$6907$16$10281975 = 0, $$sroa$6907$0$$sroa$6907$16$10291976 = 0, $$sroa$6907$0$$sroa$6907$16$10301938 = 0, $$sroa$6907$0$$sroa$6907$16$103019382401 = 0, $$sroa$6907$0$$sroa$6907$16$103019382402 = 0, $$sroa$6907$0$$sroa$6907$16$103019382403 = 0, $$sroa$6907$0$$sroa$6907$16$103019382404 = 0;
        var $$sroa$6907$0$$sroa$6907$16$103019382405 = 0, $$sroa$6907$0$$sroa$6907$16$103019382406 = 0, $$sroa$6907$0$$sroa$6907$16$103019382407 = 0, $$sroa$6907$0$$sroa$6907$16$103019382408 = 0, $$sroa$6907$0$$sroa$6907$16$103019382409 = 0, $$sroa$6907$0$$sroa$6907$16$103019382410 = 0, $$sroa$6907$0$$sroa$6907$16$10311952 = 0, $$sroa$6907$0$$sroa$6907$16$10321951 = 0, $$sroa$6907$0$$sroa$6907$16$10331989 = 0, $$sroa$6907$0$$sroa$6907$16$103319892352 = 0, $$sroa$6907$0$$sroa$6907$16$103319892353 = 0, $$sroa$6907$0$$sroa$6907$16$103319892354 = 0, $$sroa$6907$0$$sroa$6907$16$103319892355 = 0, $$sroa$6907$0$$sroa$6907$16$103319892356 = 0, $$sroa$6907$0$$sroa$6907$16$103319892357 = 0, $$sroa$6907$0$$sroa$6907$16$103319892358 = 0, $$sroa$6907$0$$sroa$6907$16$10341950 = 0, $$sroa$6907$0$$sroa$6907$16$10351993 = 0, $$sroa$6907$0$$sroa$6907$16$10361959 = 0, $$sroa$6907$0$$sroa$6907$16$10381949 = 0;
        var $$sroa$6907$0$$sroa$6907$16$10391948 = 0, $$sroa$6907$0$$sroa$6907$16$103919482475 = 0, $$sroa$6907$0$$sroa$6907$16$103919482476 = 0, $$sroa$6907$0$$sroa$6907$16$103919482477 = 0, $$sroa$6907$0$$sroa$6907$16$103919482478 = 0, $$sroa$6907$0$$sroa$6907$16$103919482479 = 0, $$sroa$6907$0$$sroa$6907$16$103919482480 = 0, $$sroa$6907$0$$sroa$6907$16$103919482481 = 0, $$sroa$6907$0$$sroa$6907$16$103919482482 = 0, $$sroa$6907$0$$sroa$6907$16$103919482483 = 0, $$sroa$6907$0$$sroa$6907$16$103919482484 = 0, $$sroa$6907$0$$sroa$6907$16$103919482485 = 0, $$sroa$6907$0$$sroa$6907$16$103919482486 = 0, $$sroa$6907$0$$sroa$6907$16$10401988 = 0, $$sroa$6907$0$$sroa$6907$16$10411987 = 0, $$sroa$6907$0$$sroa$6907$16$10421984 = 0, $$sroa$6907$0$$sroa$6907$16$104219842419 = 0, $$sroa$6907$0$$sroa$6907$16$104219842420 = 0, $$sroa$6907$0$$sroa$6907$16$104219842421 = 0, $$sroa$6907$0$$sroa$6907$16$104219842422 = 0;
        var $$sroa$6907$0$$sroa$6907$16$104219842423 = 0, $$sroa$6907$0$$sroa$6907$16$104219842424 = 0, $$sroa$6907$0$$sroa$6907$16$104219842425 = 0, $$sroa$6907$0$$sroa$6907$16$104219842426 = 0, $$sroa$6907$0$$sroa$6907$16$104219842427 = 0, $$sroa$6907$0$$sroa$6907$16$104219842428 = 0, $$sroa$6907$0$$sroa$6907$16$10431961 = 0, $$sroa$6907$0$$sroa$6907$16$10442048 = 0, $$sroa$6907$0$$sroa$6907$16$10452050 = 0, $$sroa$6907$0$$sroa$6907$16$10472051 = 0, $$sroa$6907$0$$sroa$6907$16$10482052 = 0, $$sroa$6907$0$$sroa$6907$16$10492053 = 0, $$sroa$6907$0$$sroa$6907$16$10512045 = 0, $$sroa$6907$0$$sroa$6907$16$10522046 = 0, $$sroa$6907$0$$sroa$6907$16$10532047 = 0, $$sroa$6907$0$$sroa$6907$16$10542001 = 0, $$sroa$6907$0$$sroa$6907$16$10562040 = 0, $$sroa$6907$0$$sroa$6907$16$10572041 = 0, $$sroa$6907$0$$sroa$6907$16$10592043 = 0, $$sroa$6907$0$$sroa$6907$16$10611894 = 0;
        var $$sroa$6907$0$$sroa$6907$16$10621914 = 0, $$sroa$6907$0$$sroa$6907$16$10631921 = 0, $$sroa$6907$0$$sroa$6907$16$10641922 = 0, $$sroa$6907$0$$sroa$6907$16$10651999 = 0, $$sroa$6907$0$$sroa$6907$16$106519992299 = 0, $$sroa$6907$0$$sroa$6907$16$106519992300 = 0, $$sroa$6907$0$$sroa$6907$16$106519992301 = 0, $$sroa$6907$0$$sroa$6907$16$106519992302 = 0, $$sroa$6907$0$$sroa$6907$16$10662000 = 0, $$sroa$6907$0$$sroa$6907$16$10672002 = 0, $$sroa$6907$0$$sroa$6907$16$10682003 = 0, $$sroa$6907$0$$sroa$6907$16$10691913 = 0, $$sroa$6907$0$$sroa$6907$16$106919132287 = 0, $$sroa$6907$0$$sroa$6907$16$106919132288 = 0, $$sroa$6907$0$$sroa$6907$16$106919132289 = 0, $$sroa$6907$0$$sroa$6907$16$106919132290 = 0, $$sroa$6907$0$$sroa$6907$16$10701895 = 0, $$sroa$6907$0$$sroa$6907$16$10711915 = 0, $$sroa$6907$0$$sroa$6907$16$10721916 = 0, $$sroa$6907$0$$sroa$6907$16$10731917 = 0;
        var $$sroa$6907$0$$sroa$6907$16$10741908 = 0, $$sroa$6907$0$$sroa$6907$16$107419082276 = 0, $$sroa$6907$0$$sroa$6907$16$107419082277 = 0, $$sroa$6907$0$$sroa$6907$16$107419082278 = 0, $$sroa$6907$0$$sroa$6907$16$10751909 = 0, $$sroa$6907$0$$sroa$6907$16$10761910 = 0, $$sroa$6907$0$$sroa$6907$16$10771911 = 0, $$sroa$6907$0$$sroa$6907$16$10781912 = 0, $$sroa$6907$0$$sroa$6907$16$10792013 = 0, $$sroa$6907$0$$sroa$6907$16$10812035 = 0, $$sroa$6907$0$$sroa$6907$16$10822037 = 0, $$sroa$6907$0$$sroa$6907$16$10832058 = 0, $$sroa$6907$0$$sroa$6907$16$10842057 = 0, $$sroa$6907$0$$sroa$6907$16$10852056 = 0, $$sroa$6907$0$$sroa$6907$16$10862055 = 0, $$sroa$6907$0$$sroa$6907$16$10882012 = 0, $$sroa$6907$0$$sroa$6907$16$10891902 = 0, $$sroa$6907$0$$sroa$6907$16$10901901 = 0, $$sroa$6907$0$$sroa$6907$16$10911900 = 0, $$sroa$6907$0$$sroa$6907$16$10921899 = 0;
        var $$sroa$6907$0$$sroa$6907$16$10942038 = 0, $$sroa$6907$0$$sroa$6907$16$10952014 = 0, $$sroa$6907$0$$sroa$6907$16$109520142214 = 0, $$sroa$6907$0$$sroa$6907$16$10962042 = 0, $$sroa$6907$0$$sroa$6907$16$10971896 = 0, $$sroa$6907$0$$sroa$6907$16$10981897 = 0, $$sroa$6907$0$$sroa$6907$16$11002075 = 0, $$sroa$6907$0$$sroa$6907$16$11012076 = 0, $$sroa$6907$0$$sroa$6907$16$11022077 = 0, $$sroa$6907$0$$sroa$6907$16$11032078 = 0, $$sroa$6907$0$$sroa$6907$16$11041994 = 0, $$sroa$6907$0$$sroa$6907$16$110419942324 = 0, $$sroa$6907$0$$sroa$6907$16$110419942325 = 0, $$sroa$6907$0$$sroa$6907$16$110419942326 = 0, $$sroa$6907$0$$sroa$6907$16$110419942327 = 0, $$sroa$6907$0$$sroa$6907$16$110419942328 = 0, $$sroa$6907$0$$sroa$6907$16$11062015 = 0, $$sroa$6907$0$$sroa$6907$16$11072016 = 0, $$sroa$6907$0$$sroa$6907$16$11082017 = 0, $$sroa$6907$0$$sroa$6907$16$11092018 = 0;
        var $$sroa$6907$0$$sroa$6907$16$11102009 = 0, $$sroa$6907$0$$sroa$6907$16$111020092205 = 0, $$sroa$6907$0$$sroa$6907$16$11112010 = 0, $$sroa$6907$0$$sroa$6907$16$11122011 = 0, $$sroa$6907$0$$sroa$6907$16$11142102 = 0, $$sroa$6907$0$$sroa$6907$16$11152103 = 0, $$sroa$6907$0$$sroa$6907$16$11171869 = 0, $$sroa$6907$0$$sroa$6907$16$11181870 = 0, $$sroa$6907$0$$sroa$6907$16$11201872 = 0, $$sroa$6907$0$$sroa$6907$16$11222101 = 0, $$sroa$6907$0$$sroa$6907$16$11311920 = 0, $$sroa$6907$0$$sroa$6907$16$11401919 = 0, $$sroa$6907$0$$sroa$6907$16$11421874 = 0, $$sroa$6907$0$$sroa$6907$16$11431875 = 0, $$sroa$6907$0$$sroa$6907$16$11441876 = 0, $$sroa$6907$0$$sroa$6907$16$11451877 = 0, $$sroa$6907$0$$sroa$6907$16$11472100 = 0, $$sroa$6907$0$$sroa$6907$16$11482023 = 0, $$sroa$6907$0$$sroa$6907$16$11492024 = 0, $$sroa$6907$0$$sroa$6907$16$114920242232 = 0;
        var $$sroa$6907$0$$sroa$6907$16$11502025 = 0, $$sroa$6907$0$$sroa$6907$16$11512026 = 0, $$sroa$6907$0$$sroa$6907$16$11522027 = 0, $$sroa$6907$0$$sroa$6907$16$11532028 = 0, $$sroa$6907$0$$sroa$6907$16$11542019 = 0, $$sroa$6907$0$$sroa$6907$16$115420192223 = 0, $$sroa$6907$0$$sroa$6907$16$11552020 = 0, $$sroa$6907$0$$sroa$6907$16$11562021 = 0, $$sroa$6907$0$$sroa$6907$16$11572022 = 0, $$sroa$6907$0$$sroa$6907$16$11592031 = 0, $$sroa$6907$0$$sroa$6907$16$11602036 = 0, $$sroa$6907$0$$sroa$6907$16$11611995 = 0, $$sroa$6907$0$$sroa$6907$16$11621996 = 0, $$sroa$6907$0$$sroa$6907$16$11631997 = 0, $$sroa$6907$0$$sroa$6907$16$11641998 = 0, $$sroa$6907$0$$sroa$6907$16$11651918 = 0, $$sroa$6907$0$$sroa$6907$16$116519182311 = 0, $$sroa$6907$0$$sroa$6907$16$116519182312 = 0, $$sroa$6907$0$$sroa$6907$16$116519182313 = 0, $$sroa$6907$0$$sroa$6907$16$116519182314 = 0;
        var $$sroa$6907$0$$sroa$6907$16$116519182315 = 0, $$sroa$6907$0$$sroa$6907$16$11662033 = 0, $$sroa$6907$0$$sroa$6907$16$11671871 = 0, $$sroa$6907$0$$sroa$6907$16$11682004 = 0, $$sroa$6907$0$$sroa$6907$16$116820042266 = 0, $$sroa$6907$0$$sroa$6907$16$116820042267 = 0, $$sroa$6907$0$$sroa$6907$16$11692005 = 0, $$sroa$6907$0$$sroa$6907$16$11702006 = 0, $$sroa$6907$0$$sroa$6907$16$11712007 = 0, $$sroa$6907$0$$sroa$6907$16$11722008 = 0, $$sroa$6907$0$$sroa$6907$16$11731903 = 0, $$sroa$6907$0$$sroa$6907$16$117319032256 = 0, $$sroa$6907$0$$sroa$6907$16$117319032257 = 0, $$sroa$6907$0$$sroa$6907$16$11741905 = 0, $$sroa$6907$0$$sroa$6907$16$11751906 = 0, $$sroa$6907$0$$sroa$6907$16$11761907 = 0, $$sroa$6907$0$$sroa$6907$16$11772029 = 0, $$sroa$6907$0$$sroa$6907$16$117720292241 = 0, $$sroa$6907$0$$sroa$6907$16$11782030 = 0, $$sroa$6907$0$$sroa$6907$16$11792032 = 0;
        var $$sroa$6907$0$$sroa$6907$16$11801904 = 0, $$sroa$6907$0$$sroa$6907$16$2095 = 0, $$sroa$6907$0$$sroa$6907$16$9092093 = 0, $$sroa$6907$0$$sroa$6907$16$9111882 = 0, $$sroa$6907$0$$sroa$6907$16$9121881 = 0, $$sroa$6907$0$$sroa$6907$16$9131880 = 0, $$sroa$6907$0$$sroa$6907$16$9141879 = 0, $$sroa$6907$0$$sroa$6907$16$9162096 = 0, $$sroa$6907$0$$sroa$6907$16$9172097 = 0, $$sroa$6907$0$$sroa$6907$16$9182098 = 0, $$sroa$6907$0$$sroa$6907$16$9192092 = 0, $$sroa$6907$0$$sroa$6907$16$9202070 = 0, $$sroa$6907$0$$sroa$6907$16$9212071 = 0, $$sroa$6907$0$$sroa$6907$16$9222072 = 0, $$sroa$6907$0$$sroa$6907$16$9232073 = 0, $$sroa$6907$0$$sroa$6907$16$9241992 = 0, $$sroa$6907$0$$sroa$6907$16$9251991 = 0, $$sroa$6907$0$$sroa$6907$16$9261990 = 0, $$sroa$6907$0$$sroa$6907$16$9271937 = 0, $$sroa$6907$0$$sroa$6907$16$9281978 = 0;
        var $$sroa$6907$0$$sroa$6907$16$9292085 = 0, $$sroa$6907$0$$sroa$6907$16$9302086 = 0, $$sroa$6907$0$$sroa$6907$16$9312087 = 0, $$sroa$6907$0$$sroa$6907$16$9322088 = 0, $$sroa$6907$0$$sroa$6907$16$9352080 = 0, $$sroa$6907$0$$sroa$6907$16$9362081 = 0, $$sroa$6907$0$$sroa$6907$16$9372082 = 0, $$sroa$6907$0$$sroa$6907$16$9382083 = 0, $$sroa$6907$0$$sroa$6907$16$9402090 = 0, $$sroa$6907$0$$sroa$6907$16$9412091 = 0, $$sroa$6907$0$$sroa$6907$16$9431886 = 0, $$sroa$6907$0$$sroa$6907$16$9441887 = 0, $$sroa$6907$0$$sroa$6907$16$9452062 = 0, $$sroa$6907$0$$sroa$6907$16$9511885 = 0, $$sroa$6907$0$$sroa$6907$16$9591986 = 0, $$sroa$6907$0$$sroa$6907$16$9602063 = 0, $$sroa$6907$0$$sroa$6907$16$9612065 = 0, $$sroa$6907$0$$sroa$6907$16$9622066 = 0, $$sroa$6907$0$$sroa$6907$16$9632067 = 0, $$sroa$6907$0$$sroa$6907$16$9642068 = 0;
        var $$sroa$6907$0$$sroa$6907$16$9662060 = 0, $$sroa$6907$0$$sroa$6907$16$9672061 = 0, $$sroa$6907$0$$sroa$6907$16$9711889 = 0, $$sroa$6907$0$$sroa$6907$16$9721890 = 0, $$sroa$6907$0$$sroa$6907$16$9731891 = 0, $$sroa$6907$0$$sroa$6907$16$9741892 = 0, $$sroa$6907$0$$sroa$6907$16$9761884 = 0, $$sroa$6907$0$$sroa$6907$16$9771946 = 0, $$sroa$6907$0$$sroa$6907$16$9781928 = 0, $$sroa$6907$0$$sroa$6907$16$97819282367 = 0, $$sroa$6907$0$$sroa$6907$16$97819282368 = 0, $$sroa$6907$0$$sroa$6907$16$97819282369 = 0, $$sroa$6907$0$$sroa$6907$16$97819282370 = 0, $$sroa$6907$0$$sroa$6907$16$97819282371 = 0, $$sroa$6907$0$$sroa$6907$16$97819282372 = 0, $$sroa$6907$0$$sroa$6907$16$97819282373 = 0, $$sroa$6907$0$$sroa$6907$16$97819282374 = 0, $$sroa$6907$0$$sroa$6907$16$9791929 = 0, $$sroa$6907$0$$sroa$6907$16$9801957 = 0, $$sroa$6907$0$$sroa$6907$16$9811956 = 0;
        var $$sroa$6907$0$$sroa$6907$16$9821983 = 0, $$sroa$6907$0$$sroa$6907$16$9831982 = 0, $$sroa$6907$0$$sroa$6907$16$9841981 = 0, $$sroa$6907$0$$sroa$6907$16$9851980 = 0, $$sroa$6907$0$$sroa$6907$16$9861969 = 0, $$sroa$6907$0$$sroa$6907$16$98619692536 = 0, $$sroa$6907$0$$sroa$6907$16$98619692537 = 0, $$sroa$6907$0$$sroa$6907$16$98619692538 = 0, $$sroa$6907$0$$sroa$6907$16$98619692539 = 0, $$sroa$6907$0$$sroa$6907$16$98619692540 = 0, $$sroa$6907$0$$sroa$6907$16$98619692541 = 0, $$sroa$6907$0$$sroa$6907$16$98619692542 = 0, $$sroa$6907$0$$sroa$6907$16$98619692543 = 0, $$sroa$6907$0$$sroa$6907$16$98619692544 = 0, $$sroa$6907$0$$sroa$6907$16$98619692545 = 0, $$sroa$6907$0$$sroa$6907$16$98619692546 = 0, $$sroa$6907$0$$sroa$6907$16$98619692547 = 0, $$sroa$6907$0$$sroa$6907$16$98619692548 = 0, $$sroa$6907$0$$sroa$6907$16$9871954 = 0, $$sroa$6907$0$$sroa$6907$16$9881930 = 0;
        var $$sroa$6907$0$$sroa$6907$16$9891927 = 0, $$sroa$6907$0$$sroa$6907$16$9901926 = 0, $$sroa$6907$0$$sroa$6907$16$9911931 = 0, $$sroa$6907$0$$sroa$6907$16$9921943 = 0, $$sroa$6907$0$$sroa$6907$16$99219432437 = 0, $$sroa$6907$0$$sroa$6907$16$99219432438 = 0, $$sroa$6907$0$$sroa$6907$16$99219432439 = 0, $$sroa$6907$0$$sroa$6907$16$99219432440 = 0, $$sroa$6907$0$$sroa$6907$16$99219432441 = 0, $$sroa$6907$0$$sroa$6907$16$99219432442 = 0, $$sroa$6907$0$$sroa$6907$16$99219432443 = 0, $$sroa$6907$0$$sroa$6907$16$99219432444 = 0, $$sroa$6907$0$$sroa$6907$16$99219432445 = 0, $$sroa$6907$0$$sroa$6907$16$99219432446 = 0, $$sroa$6907$0$$sroa$6907$16$99219432447 = 0, $$sroa$6907$0$$sroa$6907$16$9931944 = 0, $$sroa$6907$0$$sroa$6907$16$9941945 = 0, $$sroa$6907$0$$sroa$6907$16$9951964 = 0, $$sroa$6907$0$$sroa$6907$16$996 = 0, $$sroa$6907$0$$sroa$6907$16$997$cast = 0;
        var $$sroa$6907$0$$sroa$6907$16$9981963 = 0, $$sroa$6907$0$$sroa$6907$16$99819632579 = 0, $$sroa$6907$0$$sroa$6907$16$99819632580 = 0, $$sroa$6907$0$$sroa$6907$16$99819632581 = 0, $$sroa$6907$0$$sroa$6907$16$99819632582 = 0, $$sroa$6907$0$$sroa$6907$16$99819632583 = 0, $$sroa$6907$0$$sroa$6907$16$99819632584 = 0, $$sroa$6907$0$$sroa$6907$16$99819632585 = 0, $$sroa$6907$0$$sroa$6907$16$99819632586 = 0, $$sroa$6907$0$$sroa$6907$16$99819632587 = 0, $$sroa$6907$0$$sroa$6907$16$99819632588 = 0, $$sroa$6907$0$$sroa$6907$16$99819632589 = 0, $$sroa$6907$0$$sroa$6907$16$99819632590 = 0, $$sroa$6907$0$$sroa$6907$16$99819632591 = 0, $$sroa$6907$0$$sroa$6907$16$99819632592 = 0, $$sroa$6907$0$$sroa$6907$16$99819632593 = 0, $$sroa$6907$0$$sroa$6907$16$9991925 = 0, $$sroa$771$0 = 0, $$sroa$771$1 = 0, $$sroa$771$11$ph = 0;
        var $$sroa$771$112124 = 0, $$sroa$771$14 = 0, $$sroa$771$15 = 0, $$sroa$771$16 = 0, $$sroa$771$17 = 0, $$sroa$771$18 = 0, $$sroa$771$19 = 0, $$sroa$771$2 = 0, $$sroa$771$20 = 0, $$sroa$771$21 = 0, $$sroa$771$22 = 0, $$sroa$771$24 = 0, $$sroa$771$6 = 0, $$sroa$771$9 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
        var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
        var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
        var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
        var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
        var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
        var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
        var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
        var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
        var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
        var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0;
        var $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0;
        var $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0;
        var $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0;
        var $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0;
        var $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0;
        var $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0;
        var $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0;
        var $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0;
        var $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0;
        var $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0;
        var $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0;
        var $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0;
        var $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0;
        var $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0;
        var $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0;
        var $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0;
        var $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0;
        var $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0;
        var $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0;
        var $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0;
        var $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0;
        var $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0;
        var $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0;
        var $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0;
        var $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0;
        var $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0;
        var $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0;
        var $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0;
        var $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0;
        var $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0;
        var $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0;
        var $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0;
        var $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0;
        var $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0;
        var $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0;
        var $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0;
        var $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0;
        var $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0;
        var $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0;
        var $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0;
        var $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0;
        var $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0;
        var $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0;
        var $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0;
        var $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0;
        var $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0;
        var $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0;
        var $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0;
        var $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0;
        var $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0;
        var $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0;
        var $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0;
        var $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0;
        var $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0;
        var $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0;
        var $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0;
        var $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0;
        var $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0;
        var $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0;
        var $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0;
        var $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
        var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
        var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
        var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
        var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
        var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
        var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
        var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
        var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
        var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
        var $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
        var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
        var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
        var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
        var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
        var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
        var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
        var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
        var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
        var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
        var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
        var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
        var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
        var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
        var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
        var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
        var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
        var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
        var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
        var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
        var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
        var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
        var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
        var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
        var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
        var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
        var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
        var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
        var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
        var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
        var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
        var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
        var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
        var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $storemerge$i$i$i = 0, $storemerge$i$i696 = 0, $storemerge$i$i699 = 0, $storemerge$i$i705 = 0, $storemerge$i$i726 = 0, $storemerge$i$i808 = 0, $storemerge$i889 = 0, $storemerge$i895 = 0, $storemerge$i900 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0;
        var $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 1024 | 0;
        $vararg_buffer46 = sp + 144 | 0;
        $vararg_buffer44 = sp + 136 | 0;
        $vararg_buffer41 = sp + 128 | 0;
        $vararg_buffer39 = sp + 120 | 0;
        $vararg_buffer36 = sp + 112 | 0;
        $vararg_buffer34 = sp + 104 | 0;
        $vararg_buffer32 = sp + 96 | 0;
        $vararg_buffer29 = sp + 88 | 0;
        $vararg_buffer27 = sp + 80 | 0;
        $vararg_buffer24 = sp + 72 | 0;
        $vararg_buffer21 = sp + 64 | 0;
        $vararg_buffer18 = sp + 56 | 0;
        $vararg_buffer15 = sp + 48 | 0;
        $vararg_buffer12 = sp + 40 | 0;
        $vararg_buffer9 = sp + 32 | 0;
        $vararg_buffer6 = sp + 24 | 0;
        $vararg_buffer3 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $6 = sp + 1016 | 0;
        $7 = sp + 152 | 0;
        $8 = sp + 148 | 0;
        $9 = ((($0)) + 92 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ($10 | 0) == (15);
        $12 = ((($1)) + 20 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = $13 >>> 24;
        $15 = ((($1)) + 4 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = HEAP32[$1 >> 2] | 0;
        $18 = ((($1)) + 16 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = $13 << 8;
        HEAP32[$12 >> 2] = $20;
        $21 = ((($1)) + 24 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = (($22) + 8) | 0;
        HEAP32[$21 >> 2] = $23;
        $24 = ($22 | 0) > (-8);
        $25 = $19;
        do {
            if ($24) {
                $26 = (($19) - ($17)) | 0;
                $27 = (($16) + 1) | 0;
                $28 = (($27) - ($17)) | 0;
                $29 = ($26 | 0) > ($28 | 0);
                if ($29) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $30 = HEAP8[$25 >> 0] | 0;
                    $31 = $30 & 255;
                    $32 = $31 << 8;
                    $33 = ((($25)) + 1 | 0);
                    $34 = HEAP8[$33 >> 0] | 0;
                    $35 = $34 & 255;
                    $36 = $32 | $35;
                    $37 = $36 << $23;
                    $38 = $37 | $20;
                    HEAP32[$12 >> 2] = $38;
                    $39 = (($22) + -8) | 0;
                    HEAP32[$21 >> 2] = $39;
                    $40 = ((($25)) + 2 | 0);
                    HEAP32[$18 >> 2] = $40;
                    $41 = $40;
                    $44 = $38; $47 = $39; $49 = $41;
                    break;
                }
            } else {
                $44 = $20; $47 = $23; $49 = $19;
            }
        } while (0);
        HEAP32[$8 >> 2] = $14;
        $42 = $14 & 255;
        $43 = $44 >>> 31;
        $45 = $44 << 1;
        HEAP32[$12 >> 2] = $45;
        $46 = (($47) + 1) | 0;
        HEAP32[$21 >> 2] = $46;
        $48 = ($47 | 0) > (-1);
        $50 = $49;
        do {
            if ($48) {
                $51 = (($49) - ($17)) | 0;
                $52 = (($16) + 1) | 0;
                $53 = (($52) - ($17)) | 0;
                $54 = ($51 | 0) > ($53 | 0);
                if ($54) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $55 = HEAP8[$50 >> 0] | 0;
                    $56 = $55 & 255;
                    $57 = $56 << 8;
                    $58 = ((($50)) + 1 | 0);
                    $59 = HEAP8[$58 >> 0] | 0;
                    $60 = $59 & 255;
                    $61 = $57 | $60;
                    $62 = $61 << $46;
                    $63 = $62 | $45;
                    HEAP32[$12 >> 2] = $63;
                    $64 = (($47) + -15) | 0;
                    HEAP32[$21 >> 2] = $64;
                    $65 = ((($50)) + 2 | 0);
                    HEAP32[$18 >> 2] = $65;
                    $66 = $65;
                    $68 = $63; $71 = $64; $73 = $66;
                    break;
                }
            } else {
                $68 = $45; $71 = $46; $73 = $49;
            }
        } while (0);
        HEAP32[$8 >> 2] = $43;
        $67 = $68 >>> 31;
        $69 = $68 << 1;
        HEAP32[$12 >> 2] = $69;
        $70 = (($71) + 1) | 0;
        HEAP32[$21 >> 2] = $70;
        $72 = ($71 | 0) > (-1);
        $74 = $73;
        do {
            if ($72) {
                $75 = (($73) - ($17)) | 0;
                $76 = (($16) + 1) | 0;
                $77 = (($76) - ($17)) | 0;
                $78 = ($75 | 0) > ($77 | 0);
                if ($78) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $79 = HEAP8[$74 >> 0] | 0;
                    $80 = $79 & 255;
                    $81 = $80 << 8;
                    $82 = ((($74)) + 1 | 0);
                    $83 = HEAP8[$82 >> 0] | 0;
                    $84 = $83 & 255;
                    $85 = $81 | $84;
                    $86 = $85 << $70;
                    $87 = $86 | $69;
                    HEAP32[$12 >> 2] = $87;
                    $88 = (($71) + -15) | 0;
                    HEAP32[$21 >> 2] = $88;
                    $89 = ((($74)) + 2 | 0);
                    HEAP32[$18 >> 2] = $89;
                    $90 = $89;
                    $92 = $87; $95 = $88; $97 = $90;
                    break;
                }
            } else {
                $92 = $69; $95 = $70; $97 = $73;
            }
        } while (0);
        HEAP32[$8 >> 2] = $67;
        $91 = $92 >>> 31;
        $93 = $92 << 1;
        HEAP32[$12 >> 2] = $93;
        $94 = (($95) + 1) | 0;
        HEAP32[$21 >> 2] = $94;
        $96 = ($95 | 0) > (-1);
        $98 = $97;
        do {
            if ($96) {
                $99 = (($97) - ($17)) | 0;
                $100 = (($16) + 1) | 0;
                $101 = (($100) - ($17)) | 0;
                $102 = ($99 | 0) > ($101 | 0);
                if ($102) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $103 = HEAP8[$98 >> 0] | 0;
                    $104 = $103 & 255;
                    $105 = $104 << 8;
                    $106 = ((($98)) + 1 | 0);
                    $107 = HEAP8[$106 >> 0] | 0;
                    $108 = $107 & 255;
                    $109 = $105 | $108;
                    $110 = $109 << $94;
                    $111 = $110 | $93;
                    HEAP32[$12 >> 2] = $111;
                    $112 = (($95) + -15) | 0;
                    HEAP32[$21 >> 2] = $112;
                    $113 = ((($98)) + 2 | 0);
                    HEAP32[$18 >> 2] = $113;
                    $114 = $113;
                    $116 = $111; $119 = $112; $121 = $114;
                    break;
                }
            } else {
                $116 = $93; $119 = $94; $121 = $97;
            }
        } while (0);
        HEAP32[$8 >> 2] = $91;
        $115 = $116 >>> 31;
        $117 = $116 << 1;
        HEAP32[$12 >> 2] = $117;
        $118 = (($119) + 1) | 0;
        HEAP32[$21 >> 2] = $118;
        $120 = ($119 | 0) > (-1);
        $122 = $121;
        do {
            if ($120) {
                $123 = (($121) - ($17)) | 0;
                $124 = (($16) + 1) | 0;
                $125 = (($124) - ($17)) | 0;
                $126 = ($123 | 0) > ($125 | 0);
                if ($126) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $127 = HEAP8[$122 >> 0] | 0;
                    $128 = $127 & 255;
                    $129 = $128 << 8;
                    $130 = ((($122)) + 1 | 0);
                    $131 = HEAP8[$130 >> 0] | 0;
                    $132 = $131 & 255;
                    $133 = $129 | $132;
                    $134 = $133 << $118;
                    $135 = $134 | $117;
                    HEAP32[$12 >> 2] = $135;
                    $136 = (($119) + -15) | 0;
                    HEAP32[$21 >> 2] = $136;
                    $137 = ((($122)) + 2 | 0);
                    HEAP32[$18 >> 2] = $137;
                    $138 = $137;
                    $141 = $135; $144 = $136; $146 = $138;
                    break;
                }
            } else {
                $141 = $117; $144 = $118; $146 = $121;
            }
        } while (0);
        HEAP32[$8 >> 2] = $115;
        $139 = ($115 | 0) != (0);
        $140 = $141 >>> 31;
        $142 = $141 << 1;
        HEAP32[$12 >> 2] = $142;
        $143 = (($144) + 1) | 0;
        HEAP32[$21 >> 2] = $143;
        $145 = ($144 | 0) > (-1);
        $147 = $146;
        do {
            if ($145) {
                $148 = (($146) - ($17)) | 0;
                $149 = (($16) + 1) | 0;
                $150 = (($149) - ($17)) | 0;
                $151 = ($148 | 0) > ($150 | 0);
                if ($151) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $152 = HEAP8[$147 >> 0] | 0;
                    $153 = $152 & 255;
                    $154 = $153 << 8;
                    $155 = ((($147)) + 1 | 0);
                    $156 = HEAP8[$155 >> 0] | 0;
                    $157 = $156 & 255;
                    $158 = $154 | $157;
                    $159 = $158 << $143;
                    $160 = $159 | $142;
                    HEAP32[$12 >> 2] = $160;
                    $161 = (($144) + -15) | 0;
                    HEAP32[$21 >> 2] = $161;
                    $162 = ((($147)) + 2 | 0);
                    HEAP32[$18 >> 2] = $162;
                    $163 = $162;
                    $165 = $160; $168 = $161; $170 = $163;
                    break;
                }
            } else {
                $165 = $142; $168 = $143; $170 = $146;
            }
        } while (0);
        HEAP32[$8 >> 2] = $140;
        $164 = $165 >>> 31;
        $166 = $165 << 1;
        HEAP32[$12 >> 2] = $166;
        $167 = (($168) + 1) | 0;
        HEAP32[$21 >> 2] = $167;
        $169 = ($168 | 0) > (-1);
        $171 = $170;
        do {
            if ($169) {
                $172 = (($170) - ($17)) | 0;
                $173 = (($16) + 1) | 0;
                $174 = (($173) - ($17)) | 0;
                $175 = ($172 | 0) > ($174 | 0);
                if ($175) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $176 = HEAP8[$171 >> 0] | 0;
                    $177 = $176 & 255;
                    $178 = $177 << 8;
                    $179 = ((($171)) + 1 | 0);
                    $180 = HEAP8[$179 >> 0] | 0;
                    $181 = $180 & 255;
                    $182 = $178 | $181;
                    $183 = $182 << $167;
                    $184 = $183 | $166;
                    HEAP32[$12 >> 2] = $184;
                    $185 = (($168) + -15) | 0;
                    HEAP32[$21 >> 2] = $185;
                    $186 = ((($171)) + 2 | 0);
                    HEAP32[$18 >> 2] = $186;
                    $187 = $186;
                    $189 = $184; $192 = $185; $194 = $187;
                    break;
                }
            } else {
                $189 = $166; $192 = $167; $194 = $170;
            }
        } while (0);
        HEAP32[$8 >> 2] = $164;
        $188 = $189 >>> 30;
        $190 = $189 << 2;
        HEAP32[$12 >> 2] = $190;
        $191 = (($192) + 2) | 0;
        HEAP32[$21 >> 2] = $191;
        $193 = ($192 | 0) > (-2);
        $195 = $194;
        do {
            if ($193) {
                $196 = (($194) - ($17)) | 0;
                $197 = (($16) + 1) | 0;
                $198 = (($197) - ($17)) | 0;
                $199 = ($196 | 0) > ($198 | 0);
                if ($199) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $200 = HEAP8[$195 >> 0] | 0;
                    $201 = $200 & 255;
                    $202 = $201 << 8;
                    $203 = ((($195)) + 1 | 0);
                    $204 = HEAP8[$203 >> 0] | 0;
                    $205 = $204 & 255;
                    $206 = $202 | $205;
                    $207 = $206 << $191;
                    $208 = $207 | $190;
                    HEAP32[$12 >> 2] = $208;
                    $209 = (($192) + -14) | 0;
                    HEAP32[$21 >> 2] = $209;
                    $210 = ((($195)) + 2 | 0);
                    HEAP32[$18 >> 2] = $210;
                    $211 = $210;
                    $213 = $208; $216 = $209; $218 = $211;
                    break;
                }
            } else {
                $213 = $190; $216 = $191; $218 = $194;
            }
        } while (0);
        HEAP32[$8 >> 2] = $188;
        $212 = $213 >>> 24;
        $214 = $213 << 8;
        HEAP32[$12 >> 2] = $214;
        $215 = (($216) + 8) | 0;
        HEAP32[$21 >> 2] = $215;
        $217 = ($216 | 0) > (-8);
        $219 = $218;
        do {
            if ($217) {
                $220 = (($218) - ($17)) | 0;
                $221 = (($16) + 1) | 0;
                $222 = (($221) - ($17)) | 0;
                $223 = ($220 | 0) > ($222 | 0);
                if ($223) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $224 = HEAP8[$219 >> 0] | 0;
                    $225 = $224 & 255;
                    $226 = $225 << 8;
                    $227 = ((($219)) + 1 | 0);
                    $228 = HEAP8[$227 >> 0] | 0;
                    $229 = $228 & 255;
                    $230 = $226 | $229;
                    $231 = $230 << $215;
                    $232 = $231 | $214;
                    HEAP32[$12 >> 2] = $232;
                    $233 = (($216) + -8) | 0;
                    HEAP32[$21 >> 2] = $233;
                    $234 = ((($219)) + 2 | 0);
                    HEAP32[$18 >> 2] = $234;
                    break;
                }
            }
        } while (0);
        HEAP32[$8 >> 2] = $212;
        $235 = $212 & 255;
        $236 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
        $237 = ($236 | 0) == (0);
        if (!($237)) {
            $$47 = $236;
            STACKTOP = sp; return ($$47 | 0);
        }
        $238 = HEAP32[$8 >> 2] | 0;
        $239 = ($238 >>> 0) > (31);
        if ($239) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27050, $vararg_buffer);
            $$47 = 263148;
            STACKTOP = sp; return ($$47 | 0);
        }
        _memset(($7 | 0), 0, 864) | 0;
        do {
            switch ($235 << 24 >> 24) {
                case 9: {
                    $$0$i888$ph = (7624);
                    break;
                }
                case 10: {
                    $$0$i888$ph = 7592;
                    break;
                }
                case 11: {
                    $$$i887 = $139 ? (7624) : (7656);
                    $$0$i888$ph = $$$i887;
                    break;
                }
                case 12: {
                    $$0$i888$ph = (7688);
                    break;
                }
                case 13: {
                    $$0$i888$ph = (7720);
                    break;
                }
                case 20: {
                    $$0$i888$ph = (7752);
                    break;
                }
                case 21: {
                    $$0$i888$ph = (7784);
                    break;
                }
                case 22: {
                    $$0$i888$ph = (7816);
                    break;
                }
                case 30: {
                    $$0$i888$ph = (7848);
                    break;
                }
                case 31: {
                    $$0$i888$ph = (7880);
                    break;
                }
                case 32: {
                    $$0$i888$ph = (7912);
                    break;
                }
                case 40: {
                    $$0$i888$ph = (7944);
                    break;
                }
                case 41: {
                    $$0$i888$ph = (7976);
                    break;
                }
                case 42: {
                    $$0$i888$ph = (8008);
                    break;
                }
                case 50: {
                    $$0$i888$ph = (8040);
                    break;
                }
                case 51: {
                    $$0$i888$ph = (8072);
                    break;
                }
                case 52: {
                    $$0$i888$ph = (8104);
                    break;
                }
                default: {
                    HEAP32[$vararg_buffer1 >> 2] = $212;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27077, $vararg_buffer1);
                    $$47 = 263203;
                    STACKTOP = sp; return ($$47 | 0);
                }
            }
        } while (0);
        $240 = ((($7)) + 828 | 0);
        HEAP32[$240 >> 2] = $$0$i888$ph;
        $241 = ((($7)) + 318 | 0);
        HEAP8[$241 >> 0] = 1;
        $242 = ((($7)) + 316 | 0);
        HEAP8[$242 >> 0] = $42;
        $243 = ((($7)) + 317 | 0);
        HEAP8[$243 >> 0] = $235;
        HEAP32[$7 >> 2] = $238;
        L82: do {
            switch ($42 << 24 >> 24) {
                case 44: case 83: case 86: case 100: case 110: case 122: case -112: case -12: {
                    $244 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                    $245 = ($244 | 0) == (0);
                    if (!($245)) {
                        $$47 = $244;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $246 = HEAP32[$8 >> 2] | 0;
                    $247 = $246 & 255;
                    HEAP8[$241 >> 0] = $247;
                    $248 = $246 & 255;
                    $249 = ($248 >>> 0) > (1);
                    if ($249) {
                        HEAP32[$vararg_buffer3 >> 2] = $248;
                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27106, $vararg_buffer3);
                        $$47 = 263203;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $250 = ((($7)) + 319 | 0);
                    HEAP8[$250 >> 0] = $247;
                    $251 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                    $252 = ($251 | 0) == (0);
                    if (!($252)) {
                        $$47 = $251;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $253 = HEAP32[$8 >> 2] | 0;
                    $254 = ($253 | 0) == (0);
                    if (!($254)) {
                        $255 = (($253) + 8) | 0;
                        HEAP32[$vararg_buffer6 >> 2] = $255;
                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27156, $vararg_buffer6);
                        $$47 = 263203;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $256 = ((($7)) + 320 | 0);
                    HEAP8[$256 >> 0] = 8;
                    $257 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                    $258 = ($257 | 0) == (0);
                    if (!($258)) {
                        $$47 = $257;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $259 = HEAP32[$8 >> 2] | 0;
                    $260 = ($259 | 0) == (0);
                    if (!($260)) {
                        $261 = (($259) + 8) | 0;
                        HEAP32[$vararg_buffer9 >> 2] = $261;
                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27210, $vararg_buffer9);
                        $$47 = 263203;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $262 = ((($7)) + 321 | 0);
                    HEAP8[$262 >> 0] = 8;
                    $263 = HEAP32[$12 >> 2] | 0;
                    $264 = $263 >>> 31;
                    $265 = HEAP32[$15 >> 2] | 0;
                    $266 = HEAP32[$1 >> 2] | 0;
                    $267 = HEAP32[$18 >> 2] | 0;
                    $268 = $263 << 1;
                    HEAP32[$12 >> 2] = $268;
                    $269 = HEAP32[$21 >> 2] | 0;
                    $270 = (($269) + 1) | 0;
                    HEAP32[$21 >> 2] = $270;
                    $271 = ($269 | 0) > (-1);
                    $272 = $267;
                    do {
                        if ($271) {
                            $273 = (($267) - ($266)) | 0;
                            $274 = (($265) + 1) | 0;
                            $275 = (($274) - ($266)) | 0;
                            $276 = ($273 | 0) > ($275 | 0);
                            if ($276) {
                                $$47 = 11;
                                STACKTOP = sp; return ($$47 | 0);
                            } else {
                                $277 = HEAP8[$272 >> 0] | 0;
                                $278 = $277 & 255;
                                $279 = $278 << 8;
                                $280 = ((($272)) + 1 | 0);
                                $281 = HEAP8[$280 >> 0] | 0;
                                $282 = $281 & 255;
                                $283 = $279 | $282;
                                $284 = $283 << $270;
                                $285 = $284 | $268;
                                HEAP32[$12 >> 2] = $285;
                                $286 = (($269) + -15) | 0;
                                HEAP32[$21 >> 2] = $286;
                                $287 = ((($272)) + 2 | 0);
                                HEAP32[$18 >> 2] = $287;
                                $288 = $287;
                                $292 = $285; $295 = $286; $297 = $288;
                                break;
                            }
                        } else {
                            $292 = $268; $295 = $270; $297 = $267;
                        }
                    } while (0);
                    HEAP32[$8 >> 2] = $264;
                    $289 = ((($7)) + 334 | 0);
                    $290 = $264 & 255;
                    HEAP8[$289 >> 0] = $290;
                    $291 = $292 >>> 31;
                    $293 = $292 << 1;
                    HEAP32[$12 >> 2] = $293;
                    $294 = (($295) + 1) | 0;
                    HEAP32[$21 >> 2] = $294;
                    $296 = ($295 | 0) > (-1);
                    $298 = $297;
                    do {
                        if ($296) {
                            $299 = (($297) - ($266)) | 0;
                            $300 = (($265) + 1) | 0;
                            $301 = (($300) - ($266)) | 0;
                            $302 = ($299 | 0) > ($301 | 0);
                            if ($302) {
                                $$47 = 11;
                                STACKTOP = sp; return ($$47 | 0);
                            } else {
                                $303 = HEAP8[$298 >> 0] | 0;
                                $304 = $303 & 255;
                                $305 = $304 << 8;
                                $306 = ((($298)) + 1 | 0);
                                $307 = HEAP8[$306 >> 0] | 0;
                                $308 = $307 & 255;
                                $309 = $305 | $308;
                                $310 = $309 << $294;
                                $311 = $310 | $293;
                                HEAP32[$12 >> 2] = $311;
                                $312 = (($295) + -15) | 0;
                                HEAP32[$21 >> 2] = $312;
                                $313 = ((($298)) + 2 | 0);
                                HEAP32[$18 >> 2] = $313;
                                break;
                            }
                        }
                    } while (0);
                    HEAP32[$8 >> 2] = $291;
                    $314 = ($291 | 0) == (0);
                    $315 = ((($7)) + 335 | 0);
                    $316 = $291 & 255;
                    HEAP8[$315 >> 0] = $316;
                    if ($314) {
                        break L82;
                    }
                    $317 = ((($7)) + 336 | 0);
                    $318 = ((($7)) + 348 | 0);
                    $319 = ((($7)) + 444 | 0);
                    $320 = (__ZN7WelsDec16ParseScalingListEPNS_6TagSpsEPN10WelsCommon15TagBitStringAuxEbPbPA16_hPA64_h($7, $1, 0, $317, $318, $319) | 0);
                    $321 = ($320 | 0) == (0);
                    if ($321) {
                        break L82;
                    } else {
                        $$47 = $320;
                    }
                    STACKTOP = sp; return ($$47 | 0);
                    break;
                }
                default: {
                }
            }
        } while (0);
        $322 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
        $323 = ($322 | 0) == (0);
        if (!($323)) {
            $$47 = $322;
            STACKTOP = sp; return ($$47 | 0);
        }
        $324 = HEAP32[$8 >> 2] | 0;
        $325 = ($324 >>> 0) > (12);
        if ($325) {
            HEAP32[$vararg_buffer12 >> 2] = $324;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 27267, $vararg_buffer12);
            $$47 = 263175;
            STACKTOP = sp; return ($$47 | 0);
        }
        $326 = (($324) + 4) | 0;
        $327 = ((($7)) + 16 | 0);
        HEAP32[$327 >> 2] = $326;
        $328 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
        $329 = ($328 | 0) == (0);
        if (!($329)) {
            $$47 = $328;
            STACKTOP = sp; return ($$47 | 0);
        }
        $330 = HEAP32[$8 >> 2] | 0;
        $331 = ((($7)) + 20 | 0);
        HEAP32[$331 >> 2] = $330;
        L130: do {
            switch ($330 | 0) {
                case 0: {
                    $332 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                    $333 = ($332 | 0) == (0);
                    if (!($333)) {
                        $$47 = $332;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $334 = HEAP32[$8 >> 2] | 0;
                    $335 = ($334 >>> 0) > (12);
                    if (!($335)) {
                        $336 = (($334) + 4) | 0;
                        $337 = ((($7)) + 24 | 0);
                        HEAP32[$337 >> 2] = $336;
                        label = 91;
                        break L130;
                    }
                    HEAP32[$vararg_buffer15 >> 2] = $334;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 1, 27311, $vararg_buffer15);
                    $$47 = 263176;
                    STACKTOP = sp; return ($$47 | 0);
                    break;
                }
                case 1: {
                    $338 = HEAP32[$12 >> 2] | 0;
                    $339 = $338 >>> 31;
                    $340 = HEAP32[$15 >> 2] | 0;
                    $341 = HEAP32[$1 >> 2] | 0;
                    $342 = HEAP32[$18 >> 2] | 0;
                    $343 = $338 << 1;
                    HEAP32[$12 >> 2] = $343;
                    $344 = HEAP32[$21 >> 2] | 0;
                    $345 = (($344) + 1) | 0;
                    HEAP32[$21 >> 2] = $345;
                    $346 = ($344 | 0) > (-1);
                    $347 = $342;
                    do {
                        if ($346) {
                            $348 = (($342) - ($341)) | 0;
                            $349 = (($340) + 1) | 0;
                            $350 = (($349) - ($341)) | 0;
                            $351 = ($348 | 0) > ($350 | 0);
                            if ($351) {
                                $$47 = 11;
                                STACKTOP = sp; return ($$47 | 0);
                            } else {
                                $352 = HEAP8[$347 >> 0] | 0;
                                $353 = $352 & 255;
                                $354 = $353 << 8;
                                $355 = ((($347)) + 1 | 0);
                                $356 = HEAP8[$355 >> 0] | 0;
                                $357 = $356 & 255;
                                $358 = $354 | $357;
                                $359 = $358 << $345;
                                $360 = $359 | $343;
                                HEAP32[$12 >> 2] = $360;
                                $361 = (($344) + -15) | 0;
                                HEAP32[$21 >> 2] = $361;
                                $362 = ((($347)) + 2 | 0);
                                HEAP32[$18 >> 2] = $362;
                                break;
                            }
                        }
                    } while (0);
                    HEAP32[$8 >> 2] = $339;
                    $363 = ((($7)) + 322 | 0);
                    $364 = $339 & 255;
                    HEAP8[$363 >> 0] = $364;
                    $365 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $6) | 0);
                    $366 = ($365 | 0) == (0);
                    if (!($366)) {
                        $$47 = $365;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $367 = HEAP32[$6 >> 2] | 0;
                    $368 = $367 & 1;
                    $369 = ($368 | 0) == (0);
                    $370 = $367 >>> 1;
                    $371 = (0 - ($370)) | 0;
                    $372 = (($367) + 1) | 0;
                    $373 = $372 >>> 1;
                    $storemerge$i900 = $369 ? $371 : $373;
                    $374 = ((($7)) + 28 | 0);
                    HEAP32[$374 >> 2] = $storemerge$i900;
                    $375 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $6) | 0);
                    $376 = ($375 | 0) == (0);
                    if (!($376)) {
                        $$47 = $375;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $377 = HEAP32[$6 >> 2] | 0;
                    $378 = $377 & 1;
                    $379 = ($378 | 0) == (0);
                    $380 = $377 >>> 1;
                    $381 = (0 - ($380)) | 0;
                    $382 = (($377) + 1) | 0;
                    $383 = $382 >>> 1;
                    $storemerge$i895 = $379 ? $381 : $383;
                    $384 = ((($7)) + 32 | 0);
                    HEAP32[$384 >> 2] = $storemerge$i895;
                    $385 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                    $386 = ($385 | 0) == (0);
                    if (!($386)) {
                        $$47 = $385;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $387 = HEAP32[$8 >> 2] | 0;
                    $388 = ($387 >>> 0) > (255);
                    if ($388) {
                        HEAP32[$vararg_buffer18 >> 2] = $387;
                        __Z7WelsLogP13TagLogContextiPKcz($0, 1, 27363, $vararg_buffer18);
                        $$47 = 263177;
                        STACKTOP = sp; return ($$47 | 0);
                    }
                    $389 = ((($7)) + 36 | 0);
                    HEAP32[$389 >> 2] = $387;
                    $390 = ($387 | 0) == (0);
                    if ($390) {
                        label = 91;
                        break L130;
                    }
                    $$06162128 = 0;
                    while (1) {
                        $391 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $6) | 0);
                        $392 = ($391 | 0) == (0);
                        if (!($392)) {
                            break;
                        }
                        $393 = HEAP32[$6 >> 2] | 0;
                        $394 = $393 & 1;
                        $395 = ($394 | 0) == (0);
                        $396 = $393 >>> 1;
                        $397 = (0 - ($396)) | 0;
                        $398 = (($393) + 1) | 0;
                        $399 = $398 >>> 1;
                        $storemerge$i889 = $395 ? $397 : $399;
                        $400 = $storemerge$i889 & 255;
                        $401 = (((($7)) + 40 | 0) + ($$06162128) | 0);
                        HEAP8[$401 >> 0] = $400;
                        $402 = (($$06162128) + 1) | 0;
                        $403 = HEAP32[$389 >> 2] | 0;
                        $404 = ($402 | 0) < ($403 | 0);
                        if ($404) {
                            $$06162128 = $402;
                        } else {
                            label = 91;
                            break L130;
                        }
                    }
                    $$47 = $391;
                    STACKTOP = sp; return ($$47 | 0);
                    break;
                }
                default: {
                    $405 = $330;
                }
            }
        } while (0);
        if ((label | 0) == 91) {
            $$pr = HEAP32[$331 >> 2] | 0;
            $405 = $$pr;
        }
        $406 = ($405 >>> 0) > (2);
        if ($406) {
            HEAP32[$vararg_buffer21 >> 2] = $405;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27419, $vararg_buffer21);
            $$47 = 263152;
            STACKTOP = sp; return ($$47 | 0);
        }
        $407 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
        $408 = ($407 | 0) == (0);
        if (!($408)) {
            $$47 = $407;
            STACKTOP = sp; return ($$47 | 0);
        }
        $409 = HEAP32[$8 >> 2] | 0;
        $410 = ((($7)) + 296 | 0);
        HEAP32[$410 >> 2] = $409;
        $411 = HEAP32[$12 >> 2] | 0;
        $412 = $411 >>> 31;
        $413 = HEAP32[$15 >> 2] | 0;
        $414 = HEAP32[$1 >> 2] | 0;
        $415 = HEAP32[$18 >> 2] | 0;
        $416 = $411 << 1;
        HEAP32[$12 >> 2] = $416;
        $417 = HEAP32[$21 >> 2] | 0;
        $418 = (($417) + 1) | 0;
        HEAP32[$21 >> 2] = $418;
        $419 = ($417 | 0) > (-1);
        $420 = $415;
        do {
            if ($419) {
                $421 = (($415) - ($414)) | 0;
                $422 = (($413) + 1) | 0;
                $423 = (($422) - ($414)) | 0;
                $424 = ($421 | 0) > ($423 | 0);
                if ($424) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $425 = HEAP8[$420 >> 0] | 0;
                    $426 = $425 & 255;
                    $427 = $426 << 8;
                    $428 = ((($420)) + 1 | 0);
                    $429 = HEAP8[$428 >> 0] | 0;
                    $430 = $429 & 255;
                    $431 = $427 | $430;
                    $432 = $431 << $418;
                    $433 = $432 | $416;
                    HEAP32[$12 >> 2] = $433;
                    $434 = (($417) + -15) | 0;
                    HEAP32[$21 >> 2] = $434;
                    $435 = ((($420)) + 2 | 0);
                    HEAP32[$18 >> 2] = $435;
                    break;
                }
            }
        } while (0);
        HEAP32[$8 >> 2] = $412;
        $436 = ((($7)) + 323 | 0);
        $437 = $412 & 255;
        HEAP8[$436 >> 0] = $437;
        $438 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
        $439 = ($438 | 0) == (0);
        if (!($439)) {
            $$47 = $438;
            STACKTOP = sp; return ($$47 | 0);
        }
        $440 = HEAP32[$8 >> 2] | 0;
        $441 = (($440) + 1) | 0;
        $442 = ((($7)) + 4 | 0);
        HEAP32[$442 >> 2] = $441;
        $443 = ($441 >>> 0) > (36864);
        if ($443) {
            HEAP32[$vararg_buffer24 >> 2] = $441;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 27454, $vararg_buffer24);
            $$47 = 263163;
            STACKTOP = sp; return ($$47 | 0);
        }
        $444 = (___muldi3(($441 | 0), 0, ($441 | 0), 0) | 0);
        $445 = tempRet0;
        $446 = ((($$0$i888$ph)) + 8 | 0);
        $447 = HEAP32[$446 >> 2] | 0;
        $448 = $447 << 3;
        $449 = ($445 >>> 0) > (0);
        $450 = ($444 >>> 0) > ($448 >>> 0);
        $451 = ($445 | 0) == (0);
        $452 = $451 & $450;
        $453 = $449 | $452;
        if ($453) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27504, $vararg_buffer27);
        }
        $454 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
        $455 = ($454 | 0) == (0);
        if (!($455)) {
            $$47 = $454;
            STACKTOP = sp; return ($$47 | 0);
        }
        $456 = HEAP32[$8 >> 2] | 0;
        $457 = (($456) + 1) | 0;
        $458 = ((($7)) + 8 | 0);
        HEAP32[$458 >> 2] = $457;
        $459 = ($457 >>> 0) > (36864);
        if ($459) {
            HEAP32[$vararg_buffer29 >> 2] = $457;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 27552, $vararg_buffer29);
            $$47 = 263163;
            STACKTOP = sp; return ($$47 | 0);
        }
        $460 = (___muldi3(($457 | 0), 0, ($457 | 0), 0) | 0);
        $461 = tempRet0;
        $462 = HEAP32[$446 >> 2] | 0;
        $463 = $462 << 3;
        $464 = ($461 >>> 0) > (0);
        $465 = ($460 >>> 0) > ($463 >>> 0);
        $466 = ($461 | 0) == (0);
        $467 = $466 & $465;
        $468 = $464 | $467;
        if ($468) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27603, $vararg_buffer32);
            $$pre = HEAP32[$458 >> 2] | 0;
            $$pre2132 = HEAP32[$446 >> 2] | 0;
            $471 = $$pre; $473 = $$pre2132;
        } else {
            $471 = $457; $473 = $462;
        }
        $469 = HEAP32[$442 >> 2] | 0;
        $470 = Math_imul($471, $469) | 0;
        $472 = ($470 >>> 0) > ($473 >>> 0);
        if ($472) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27652, $vararg_buffer34);
        }
        $474 = ((($7)) + 12 | 0);
        HEAP32[$474 >> 2] = $470;
        $475 = HEAP32[$410 >> 2] | 0;
        $476 = ($475 | 0) > (16);
        if ($476) {
            HEAP32[$vararg_buffer36 >> 2] = $475;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 27701, $vararg_buffer36);
            $$47 = 263162;
            STACKTOP = sp; return ($$47 | 0);
        }
        $477 = ((($$0$i888$ph)) + 12 | 0);
        $478 = HEAP32[$477 >> 2] | 0;
        $479 = (($478 >>> 0) / ($470 >>> 0)) & -1;
        $480 = ($479 >>> 0) < (16);
        $$ = $480 ? $479 : 16;
        $481 = ($475 >>> 0) > ($$ >>> 0);
        if ($481) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27738, $vararg_buffer39);
        }
        $482 = HEAP32[$12 >> 2] | 0;
        $483 = $482 >>> 31;
        $484 = HEAP32[$15 >> 2] | 0;
        $485 = HEAP32[$1 >> 2] | 0;
        $486 = HEAP32[$18 >> 2] | 0;
        $487 = $482 << 1;
        HEAP32[$12 >> 2] = $487;
        $488 = HEAP32[$21 >> 2] | 0;
        $489 = (($488) + 1) | 0;
        HEAP32[$21 >> 2] = $489;
        $490 = ($488 | 0) > (-1);
        $491 = $486;
        do {
            if ($490) {
                $492 = (($486) - ($485)) | 0;
                $493 = (($484) + 1) | 0;
                $494 = (($493) - ($485)) | 0;
                $495 = ($492 | 0) > ($494 | 0);
                if ($495) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $496 = HEAP8[$491 >> 0] | 0;
                    $497 = $496 & 255;
                    $498 = $497 << 8;
                    $499 = ((($491)) + 1 | 0);
                    $500 = HEAP8[$499 >> 0] | 0;
                    $501 = $500 & 255;
                    $502 = $498 | $501;
                    $503 = $502 << $489;
                    $504 = $503 | $487;
                    HEAP32[$12 >> 2] = $504;
                    $505 = (($488) + -15) | 0;
                    HEAP32[$21 >> 2] = $505;
                    $506 = ((($491)) + 2 | 0);
                    HEAP32[$18 >> 2] = $506;
                    $507 = $506;
                    $512 = $504; $515 = $505; $517 = $507;
                    break;
                }
            } else {
                $512 = $487; $515 = $489; $517 = $486;
            }
        } while (0);
        HEAP32[$8 >> 2] = $483;
        $508 = ($483 | 0) == (0);
        $509 = ((($7)) + 324 | 0);
        $510 = $483 & 255;
        HEAP8[$509 >> 0] = $510;
        if ($508) {
            HEAP32[$vararg_buffer41 >> 2] = 0;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 27780, $vararg_buffer41);
            $$47 = 263205;
            STACKTOP = sp; return ($$47 | 0);
        }
        $511 = $512 >>> 31;
        $513 = $512 << 1;
        HEAP32[$12 >> 2] = $513;
        $514 = (($515) + 1) | 0;
        HEAP32[$21 >> 2] = $514;
        $516 = ($515 | 0) > (-1);
        $518 = $517;
        do {
            if ($516) {
                $519 = (($517) - ($485)) | 0;
                $520 = (($484) + 1) | 0;
                $521 = (($520) - ($485)) | 0;
                $522 = ($519 | 0) > ($521 | 0);
                if ($522) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $523 = HEAP8[$518 >> 0] | 0;
                    $524 = $523 & 255;
                    $525 = $524 << 8;
                    $526 = ((($518)) + 1 | 0);
                    $527 = HEAP8[$526 >> 0] | 0;
                    $528 = $527 & 255;
                    $529 = $525 | $528;
                    $530 = $529 << $514;
                    $531 = $530 | $513;
                    HEAP32[$12 >> 2] = $531;
                    $532 = (($515) + -15) | 0;
                    HEAP32[$21 >> 2] = $532;
                    $533 = ((($518)) + 2 | 0);
                    HEAP32[$18 >> 2] = $533;
                    $534 = $533;
                    $538 = $531; $541 = $532; $543 = $534;
                    break;
                }
            } else {
                $538 = $513; $541 = $514; $543 = $517;
            }
        } while (0);
        HEAP32[$8 >> 2] = $511;
        $535 = ((($7)) + 326 | 0);
        $536 = $511 & 255;
        HEAP8[$535 >> 0] = $536;
        $537 = $538 >>> 31;
        $539 = $538 << 1;
        HEAP32[$12 >> 2] = $539;
        $540 = (($541) + 1) | 0;
        HEAP32[$21 >> 2] = $540;
        $542 = ($541 | 0) > (-1);
        $544 = $543;
        do {
            if ($542) {
                $545 = (($543) - ($485)) | 0;
                $546 = (($484) + 1) | 0;
                $547 = (($546) - ($485)) | 0;
                $548 = ($545 | 0) > ($547 | 0);
                if ($548) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $549 = HEAP8[$544 >> 0] | 0;
                    $550 = $549 & 255;
                    $551 = $550 << 8;
                    $552 = ((($544)) + 1 | 0);
                    $553 = HEAP8[$552 >> 0] | 0;
                    $554 = $553 & 255;
                    $555 = $551 | $554;
                    $556 = $555 << $540;
                    $557 = $556 | $539;
                    HEAP32[$12 >> 2] = $557;
                    $558 = (($541) + -15) | 0;
                    HEAP32[$21 >> 2] = $558;
                    $559 = ((($544)) + 2 | 0);
                    HEAP32[$18 >> 2] = $559;
                    $560 = $559;
                    $2276 = $558; $2277 = $560; $2278 = $557;
                    break;
                }
            } else {
                $2276 = $540; $2277 = $543; $2278 = $539;
            }
        } while (0);
        HEAP32[$8 >> 2] = $537;
        $561 = ($537 | 0) == (0);
        $562 = ((($7)) + 327 | 0);
        $563 = $537 & 255;
        HEAP8[$562 >> 0] = $563;
        do {
            if ($561) {
                $590 = ((($7)) + 300 | 0);
                ; HEAP32[$590 >> 2] = 0 | 0; HEAP32[$590 + 4 >> 2] = 0 | 0; HEAP32[$590 + 8 >> 2] = 0 | 0; HEAP32[$590 + 12 >> 2] = 0 | 0;
                $592 = $2278; $595 = $2276; $597 = $2277; $600 = $485; $602 = $484;
            } else {
                $564 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                $565 = ($564 | 0) == (0);
                if (!($565)) {
                    $$47 = $564;
                    STACKTOP = sp; return ($$47 | 0);
                }
                $566 = HEAP32[$8 >> 2] | 0;
                $567 = ((($7)) + 300 | 0);
                HEAP32[$567 >> 2] = $566;
                $568 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                $569 = ($568 | 0) == (0);
                if (!($569)) {
                    $$47 = $568;
                    STACKTOP = sp; return ($$47 | 0);
                }
                $570 = HEAP32[$8 >> 2] | 0;
                $571 = ((($7)) + 308 | 0);
                HEAP32[$571 >> 2] = $570;
                $572 = HEAP32[$567 >> 2] | 0;
                $573 = (($572) + ($570)) | 0;
                $574 = HEAP32[$442 >> 2] | 0;
                $575 = $574 << 3;
                $576 = ($573 | 0) > ($575 | 0);
                if ($576) {
                    __Z7WelsLogP13TagLogContextiPKcz($0, 1, 27832, $vararg_buffer44);
                    $$47 = 263156;
                    STACKTOP = sp; return ($$47 | 0);
                }
                $577 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                $578 = ($577 | 0) == (0);
                if (!($578)) {
                    $$47 = $577;
                    STACKTOP = sp; return ($$47 | 0);
                }
                $579 = HEAP32[$8 >> 2] | 0;
                $580 = ((($7)) + 304 | 0);
                HEAP32[$580 >> 2] = $579;
                $581 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $8) | 0);
                $582 = ($581 | 0) == (0);
                if (!($582)) {
                    $$47 = $581;
                    STACKTOP = sp; return ($$47 | 0);
                }
                $583 = HEAP32[$8 >> 2] | 0;
                $584 = ((($7)) + 312 | 0);
                HEAP32[$584 >> 2] = $583;
                $585 = HEAP32[$580 >> 2] | 0;
                $586 = (($585) + ($583)) | 0;
                $587 = HEAP32[$458 >> 2] | 0;
                $588 = $587 << 3;
                $589 = ($586 | 0) > ($588 | 0);
                if (!($589)) {
                    $$pre2133 = HEAP32[$12 >> 2] | 0;
                    $$pre2134 = HEAP32[$15 >> 2] | 0;
                    $$pre2135 = HEAP32[$1 >> 2] | 0;
                    $$pre2136 = HEAP32[$18 >> 2] | 0;
                    $$pre2137 = HEAP32[$21 >> 2] | 0;
                    $592 = $$pre2133; $595 = $$pre2137; $597 = $$pre2136; $600 = $$pre2135; $602 = $$pre2134;
                    break;
                }
                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 27897, $vararg_buffer46);
                $$47 = 263156;
                STACKTOP = sp; return ($$47 | 0);
            }
        } while (0);
        $591 = $592 >>> 31;
        $593 = $592 << 1;
        HEAP32[$12 >> 2] = $593;
        $594 = (($595) + 1) | 0;
        HEAP32[$21 >> 2] = $594;
        $596 = ($595 | 0) > (-1);
        $598 = $597;
        do {
            if ($596) {
                $599 = (($597) - ($600)) | 0;
                $601 = (($602) + 1) | 0;
                $603 = (($601) - ($600)) | 0;
                $604 = ($599 | 0) > ($603 | 0);
                if ($604) {
                    $$47 = 11;
                    STACKTOP = sp; return ($$47 | 0);
                } else {
                    $605 = HEAP8[$598 >> 0] | 0;
                    $606 = $605 & 255;
                    $607 = $606 << 8;
                    $608 = ((($598)) + 1 | 0);
                    $609 = HEAP8[$608 >> 0] | 0;
                    $610 = $609 & 255;
                    $611 = $607 | $610;
                    $612 = $611 << $594;
                    $613 = $612 | $593;
                    HEAP32[$12 >> 2] = $613;
                    $614 = (($595) + -15) | 0;
                    HEAP32[$21 >> 2] = $614;
                    $615 = ((($598)) + 2 | 0);
                    HEAP32[$18 >> 2] = $615;
                    break;
                }
            }
        } while (0);
        HEAP32[$8 >> 2] = $591;
        $616 = ((($7)) + 328 | 0);
        $617 = $591 & 255;
        HEAP8[$616 >> 0] = $617;
        $618 = ((($0)) + 242344 | 0);
        $619 = HEAP8[$618 >> 0] | 0;
        $620 = ($619 << 24 >> 24) == (0);
        do {
            if (!($620)) {
                $621 = ($5 | 0) > (123);
                if ($621) {
                    $622 = ((($0)) + 116 | 0);
                    $623 = HEAP32[$622 >> 2] | 0;
                    $624 = $623 | 16384;
                    HEAP32[$622 >> 2] = $624;
                    $$47 = 262145;
                    STACKTOP = sp; return ($$47 | 0);
                }
                if (!($11)) {
                    $625 = (((((($0)) + 242864 | 0) + (($238 * 136) | 0) | 0)) + 128 | 0);
                    HEAP32[$625 >> 2] = $238;
                    $$0576 = 0;
                    while (1) {
                        $626 = (($5) - ($$0576)) | 0;
                        $627 = (($626) + -1) | 0;
                        $628 = (($4) + ($627) | 0);
                        $629 = HEAP8[$628 >> 0] | 0;
                        $630 = ($629 << 24 >> 24) == (0);
                        $631 = (($$0576) + 1) | 0;
                        if ($630) {
                            $$0576 = $631;
                        } else {
                            break;
                        }
                    }
                    $632 = $626 & 65535;
                    $633 = (((((($0)) + 242864 | 0) + (($238 * 136) | 0) | 0)) + 132 | 0);
                    HEAP16[$633 >> 1] = $632;
                    $634 = HEAP8[$4 >> 0] | 0;
                    $635 = ($634 << 24 >> 24) == (0);
                    do {
                        if ($635) {
                            $636 = ((($4)) + 1 | 0);
                            $637 = HEAP8[$636 >> 0] | 0;
                            $638 = ($637 << 24 >> 24) == (0);
                            if (!($638)) {
                                $$0575 = 0;
                                break;
                            }
                            $639 = ((($4)) + 2 | 0);
                            $640 = HEAP8[$639 >> 0] | 0;
                            $641 = ($640 << 24 >> 24) == (1);
                            if (!($641)) {
                                $$0575 = 0;
                                break;
                            }
                            $642 = (((($0)) + 242864 | 0) + (($238 * 136) | 0) | 0);
                            HEAP8[$642 >> 0] = 0;
                            $643 = (($632) + 1) << 16 >> 16;
                            HEAP16[$633 >> 1] = $643;
                            $$0575 = 1;
                        } else {
                            $$0575 = 0;
                        }
                    } while (0);
                    $644 = ((((($0)) + 242864 | 0) + (($238 * 136) | 0) | 0) + ($$0575) | 0);
                    _memcpy(($644 | 0), ($4 | 0), ($626 | 0)) | 0;
                    break;
                }
                $645 = (((((($0)) + 247216 | 0) + (($238 * 136) | 0) | 0)) + 128 | 0);
                HEAP32[$645 >> 2] = $238;
                $646 = (((((($0)) + 247216 | 0) + (($238 * 136) | 0) | 0)) + 2 | 0);
                HEAP8[$646 >> 0] = 0;
                $647 = (((((($0)) + 247216 | 0) + (($238 * 136) | 0) | 0)) + 1 | 0);
                HEAP8[$647 >> 0] = 0;
                $648 = (((($0)) + 247216 | 0) + (($238 * 136) | 0) | 0);
                HEAP8[$648 >> 0] = 0;
                $649 = (((((($0)) + 247216 | 0) + (($238 * 136) | 0) | 0)) + 3 | 0);
                HEAP8[$649 >> 0] = 1;
                $650 = (((((($0)) + 247216 | 0) + (($238 * 136) | 0) | 0)) + 4 | 0);
                HEAP8[$650 >> 0] = 103;
                $651 = ((($0)) + 562528 | 0);
                $652 = HEAP32[$651 >> 2] | 0;
                $653 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($652, 132, 27961) | 0);
                $654 = ($653 | 0) == (0 | 0);
                if ($654) {
                    $2180 = ((($0)) + 116 | 0);
                    $2181 = HEAP32[$2180 >> 2] | 0;
                    $2182 = $2181 | 16384;
                    HEAP32[$2180 >> 2] = $2182;
                    $$47 = $2182;
                    STACKTOP = sp; return ($$47 | 0);
                }
                $655 = $653;
                HEAP32[$6 >> 2] = $655;
                $656 = ((($7)) + 329 | 0);
                $657 = HEAP8[$656 >> 0] | 0;
                $658 = $657 | -102;
                $659 = $658 & 255;
                $660 = ((($7)) + 330 | 0);
                $661 = HEAP8[$660 >> 0] | 0;
                $662 = $661 & 255;
                $663 = $659 << 1;
                $664 = $663 | $662;
                $665 = ((($7)) + 331 | 0);
                $666 = HEAP8[$665 >> 0] | 0;
                $667 = $666 & 255;
                $668 = $664 << 1;
                $669 = $668 | $667;
                $670 = ((($7)) + 332 | 0);
                $671 = HEAP8[$670 >> 0] | 0;
                $672 = $671 & 255;
                $673 = $669 << 1;
                $674 = $673 | $672;
                $675 = $674 << 12;
                $676 = HEAP8[$243 >> 0] | 0;
                $677 = $676 & 255;
                $678 = $675 | $677;
                $679 = HEAP32[$7 >> 2] | 0;
                $680 = (($679) + 1) | 0;
                $681 = ($679 >>> 0) < (256);
                do {
                    if ($681) {
                        $682 = (8136 + ($679 << 2) | 0);
                        $683 = HEAP32[$682 >> 2] | 0;
                        $684 = ($683 | 0) < (8);
                        if ($684) {
                            $685 = $678 << $683;
                            $686 = $685 | $680;
                            $687 = (8 - ($683)) | 0;
                            $$sroa$336$9 = $686; $$sroa$6907$0$$sroa$6907$16$$pre$i19682623 = $653; $$sroa$771$0 = $687;
                            break;
                        } else {
                            $688 = (($683) + -8) | 0;
                            $689 = $678 << 8;
                            $690 = $680 >>> $688;
                            $691 = $690 | $689;
                            $692 = $691 >>> 24;
                            $693 = $692 & 255;
                            HEAP8[$653 >> 0] = $693;
                            $694 = $691 >>> 16;
                            $695 = $694 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11472100 = HEAP32[$6 >> 2] | 0;
                            $696 = ((($$sroa$6907$0$$sroa$6907$16$11472100)) + 1 | 0);
                            HEAP8[$696 >> 0] = $695;
                            $697 = $691 >>> 8;
                            $698 = $697 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11222101 = HEAP32[$6 >> 2] | 0;
                            $699 = ((($$sroa$6907$0$$sroa$6907$16$11222101)) + 2 | 0);
                            HEAP8[$699 >> 0] = $698;
                            $700 = $690 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11142102 = HEAP32[$6 >> 2] | 0;
                            $701 = ((($$sroa$6907$0$$sroa$6907$16$11142102)) + 3 | 0);
                            HEAP8[$701 >> 0] = $700;
                            $$sroa$6907$0$$sroa$6907$16$11152103 = HEAP32[$6 >> 2] | 0;
                            $702 = ((($$sroa$6907$0$$sroa$6907$16$11152103)) + 4 | 0);
                            $703 = $702;
                            HEAP32[$6 >> 2] = $703;
                            $704 = 1 << $688;
                            $705 = (($704) + -1) | 0;
                            $706 = $705 & $680;
                            $707 = (40 - ($683)) | 0;
                            $$sroa$336$9 = $706; $$sroa$6907$0$$sroa$6907$16$$pre$i19682623 = $702; $$sroa$771$0 = $707;
                            break;
                        }
                    } else {
                        $708 = ($680 >>> 0) > (65535);
                        $709 = $680 >>> 16;
                        $$$i840 = $708 ? $709 : $680;
                        $$2$i841 = $708 ? 16 : 0;
                        $710 = $$$i840 & 65280;
                        $711 = ($710 | 0) == (0);
                        $712 = $$$i840 >>> 8;
                        $713 = $$2$i841 | 8;
                        $$119$i842 = $711 ? $$$i840 : $712;
                        $$1$i843 = $711 ? $$2$i841 : $713;
                        $714 = (($$119$i842) + -1) | 0;
                        $715 = (8136 + ($714 << 2) | 0);
                        $716 = HEAP32[$715 >> 2] | 0;
                        $717 = $$1$i843 << 1;
                        $718 = (($716) + ($717)) | 0;
                        $719 = $718 | 1;
                        $720 = ($719 | 0) < (8);
                        if ($720) {
                            $721 = $678 << $719;
                            $722 = $721 | $680;
                            $723 = (8 - ($719)) | 0;
                            $$sroa$336$9 = $722; $$sroa$6907$0$$sroa$6907$16$$pre$i19682623 = $653; $$sroa$771$0 = $723;
                            break;
                        } else {
                            $724 = (($719) + -8) | 0;
                            $725 = $678 << 8;
                            $726 = $680 >>> $724;
                            $727 = $726 | $725;
                            $728 = $727 >>> 24;
                            $729 = $728 & 255;
                            HEAP8[$653 >> 0] = $729;
                            $730 = $727 >>> 16;
                            $731 = $730 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11171869 = HEAP32[$6 >> 2] | 0;
                            $732 = ((($$sroa$6907$0$$sroa$6907$16$11171869)) + 1 | 0);
                            HEAP8[$732 >> 0] = $731;
                            $733 = $727 >>> 8;
                            $734 = $733 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11181870 = HEAP32[$6 >> 2] | 0;
                            $735 = ((($$sroa$6907$0$$sroa$6907$16$11181870)) + 2 | 0);
                            HEAP8[$735 >> 0] = $734;
                            $736 = $726 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11671871 = HEAP32[$6 >> 2] | 0;
                            $737 = ((($$sroa$6907$0$$sroa$6907$16$11671871)) + 3 | 0);
                            HEAP8[$737 >> 0] = $736;
                            $$sroa$6907$0$$sroa$6907$16$11201872 = HEAP32[$6 >> 2] | 0;
                            $738 = ((($$sroa$6907$0$$sroa$6907$16$11201872)) + 4 | 0);
                            $739 = $738;
                            HEAP32[$6 >> 2] = $739;
                            $740 = 1 << $724;
                            $741 = (($740) + -1) | 0;
                            $742 = $741 & $680;
                            $743 = (40 - ($719)) | 0;
                            $$sroa$336$9 = $742; $$sroa$6907$0$$sroa$6907$16$$pre$i19682623 = $738; $$sroa$771$0 = $743;
                            break;
                        }
                    }
                } while (0);
                $744 = HEAP32[$327 >> 2] | 0;
                $745 = (($744) + -4) | 0;
                $746 = (($744) + -3) | 0;
                $747 = ($745 >>> 0) < (256);
                do {
                    if ($747) {
                        $748 = (8136 + ($745 << 2) | 0);
                        $749 = HEAP32[$748 >> 2] | 0;
                        $750 = ($$sroa$771$0 | 0) > ($749 | 0);
                        if ($750) {
                            $751 = $$sroa$336$9 << $749;
                            $752 = $751 | $746;
                            $753 = (($$sroa$771$0) - ($749)) | 0;
                            $$sroa$336$12 = $752; $$sroa$6907$0$$sroa$6907$16$$pre$i19682622 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682623; $$sroa$771$1 = $753;
                            break;
                        } else {
                            $754 = (($749) - ($$sroa$771$0)) | 0;
                            $755 = $$sroa$336$9 << $$sroa$771$0;
                            $756 = $746 >>> $754;
                            $757 = $756 | $755;
                            $758 = $757 >>> 24;
                            $759 = $758 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682623 >> 0] = $759;
                            $760 = $757 >>> 16;
                            $761 = $760 & 255;
                            $$sroa$6907$0$$sroa$6907$16$2095 = HEAP32[$6 >> 2] | 0;
                            $762 = ((($$sroa$6907$0$$sroa$6907$16$2095)) + 1 | 0);
                            HEAP8[$762 >> 0] = $761;
                            $763 = $757 >>> 8;
                            $764 = $763 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9162096 = HEAP32[$6 >> 2] | 0;
                            $765 = ((($$sroa$6907$0$$sroa$6907$16$9162096)) + 2 | 0);
                            HEAP8[$765 >> 0] = $764;
                            $766 = $757 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9172097 = HEAP32[$6 >> 2] | 0;
                            $767 = ((($$sroa$6907$0$$sroa$6907$16$9172097)) + 3 | 0);
                            HEAP8[$767 >> 0] = $766;
                            $$sroa$6907$0$$sroa$6907$16$9182098 = HEAP32[$6 >> 2] | 0;
                            $768 = ((($$sroa$6907$0$$sroa$6907$16$9182098)) + 4 | 0);
                            $769 = $768;
                            HEAP32[$6 >> 2] = $769;
                            $770 = 1 << $754;
                            $771 = (($770) + -1) | 0;
                            $772 = $771 & $746;
                            $773 = (32 - ($754)) | 0;
                            $$sroa$336$12 = $772; $$sroa$6907$0$$sroa$6907$16$$pre$i19682622 = $768; $$sroa$771$1 = $773;
                            break;
                        }
                    } else {
                        $774 = ($746 >>> 0) > (65535);
                        $775 = $746 >>> 16;
                        $$$i831 = $774 ? $775 : $746;
                        $$2$i832 = $774 ? 16 : 0;
                        $776 = $$$i831 & 65280;
                        $777 = ($776 | 0) == (0);
                        $778 = $$$i831 >>> 8;
                        $779 = $$2$i832 | 8;
                        $$119$i833 = $777 ? $$$i831 : $778;
                        $$1$i834 = $777 ? $$2$i832 : $779;
                        $780 = (($$119$i833) + -1) | 0;
                        $781 = (8136 + ($780 << 2) | 0);
                        $782 = HEAP32[$781 >> 2] | 0;
                        $783 = $$1$i834 << 1;
                        $784 = (($782) + ($783)) | 0;
                        $785 = $784 | 1;
                        $786 = ($$sroa$771$0 | 0) > ($785 | 0);
                        if ($786) {
                            $787 = $$sroa$336$9 << $785;
                            $788 = $787 | $746;
                            $789 = (($$sroa$771$0) - ($785)) | 0;
                            $$sroa$336$12 = $788; $$sroa$6907$0$$sroa$6907$16$$pre$i19682622 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682623; $$sroa$771$1 = $789;
                            break;
                        } else {
                            $790 = (($785) - ($$sroa$771$0)) | 0;
                            $791 = $$sroa$336$9 << $$sroa$771$0;
                            $792 = $746 >>> $790;
                            $793 = $792 | $791;
                            $794 = $793 >>> 24;
                            $795 = $794 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682623 >> 0] = $795;
                            $796 = $793 >>> 16;
                            $797 = $796 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11421874 = HEAP32[$6 >> 2] | 0;
                            $798 = ((($$sroa$6907$0$$sroa$6907$16$11421874)) + 1 | 0);
                            HEAP8[$798 >> 0] = $797;
                            $799 = $793 >>> 8;
                            $800 = $799 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11431875 = HEAP32[$6 >> 2] | 0;
                            $801 = ((($$sroa$6907$0$$sroa$6907$16$11431875)) + 2 | 0);
                            HEAP8[$801 >> 0] = $800;
                            $802 = $793 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11441876 = HEAP32[$6 >> 2] | 0;
                            $803 = ((($$sroa$6907$0$$sroa$6907$16$11441876)) + 3 | 0);
                            HEAP8[$803 >> 0] = $802;
                            $$sroa$6907$0$$sroa$6907$16$11451877 = HEAP32[$6 >> 2] | 0;
                            $804 = ((($$sroa$6907$0$$sroa$6907$16$11451877)) + 4 | 0);
                            $805 = $804;
                            HEAP32[$6 >> 2] = $805;
                            $806 = 1 << $790;
                            $807 = (($806) + -1) | 0;
                            $808 = $807 & $746;
                            $809 = (32 - ($790)) | 0;
                            $$sroa$336$12 = $808; $$sroa$6907$0$$sroa$6907$16$$pre$i19682622 = $804; $$sroa$771$1 = $809;
                            break;
                        }
                    }
                } while (0);
                $810 = HEAP32[$331 >> 2] | 0;
                $811 = (($810) + 1) | 0;
                $812 = ($810 >>> 0) < (256);
                do {
                    if ($812) {
                        $813 = (8136 + ($810 << 2) | 0);
                        $814 = HEAP32[$813 >> 2] | 0;
                        $815 = ($$sroa$771$1 | 0) > ($814 | 0);
                        if ($815) {
                            $816 = $$sroa$336$12 << $814;
                            $817 = $816 | $811;
                            $818 = (($$sroa$771$1) - ($814)) | 0;
                            $$sroa$336$15 = $817; $$sroa$6907$0$$sroa$6907$16$$pre$i19682621 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682622; $$sroa$771$2 = $818;
                            break;
                        } else {
                            $819 = (($814) - ($$sroa$771$1)) | 0;
                            $820 = $$sroa$336$12 << $$sroa$771$1;
                            $821 = $811 >>> $819;
                            $822 = $821 | $820;
                            $823 = $822 >>> 24;
                            $824 = $823 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682622 >> 0] = $824;
                            $825 = $822 >>> 16;
                            $826 = $825 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9402090 = HEAP32[$6 >> 2] | 0;
                            $827 = ((($$sroa$6907$0$$sroa$6907$16$9402090)) + 1 | 0);
                            HEAP8[$827 >> 0] = $826;
                            $828 = $822 >>> 8;
                            $829 = $828 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9412091 = HEAP32[$6 >> 2] | 0;
                            $830 = ((($$sroa$6907$0$$sroa$6907$16$9412091)) + 2 | 0);
                            HEAP8[$830 >> 0] = $829;
                            $831 = $822 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9192092 = HEAP32[$6 >> 2] | 0;
                            $832 = ((($$sroa$6907$0$$sroa$6907$16$9192092)) + 3 | 0);
                            HEAP8[$832 >> 0] = $831;
                            $$sroa$6907$0$$sroa$6907$16$9092093 = HEAP32[$6 >> 2] | 0;
                            $833 = ((($$sroa$6907$0$$sroa$6907$16$9092093)) + 4 | 0);
                            $834 = $833;
                            HEAP32[$6 >> 2] = $834;
                            $835 = 1 << $819;
                            $836 = (($835) + -1) | 0;
                            $837 = $836 & $811;
                            $838 = (32 - ($819)) | 0;
                            $$sroa$336$15 = $837; $$sroa$6907$0$$sroa$6907$16$$pre$i19682621 = $833; $$sroa$771$2 = $838;
                            break;
                        }
                    } else {
                        $839 = ($811 >>> 0) > (65535);
                        $840 = $811 >>> 16;
                        $$$i822 = $839 ? $840 : $811;
                        $$2$i823 = $839 ? 16 : 0;
                        $841 = $$$i822 & 65280;
                        $842 = ($841 | 0) == (0);
                        $843 = $$$i822 >>> 8;
                        $844 = $$2$i823 | 8;
                        $$119$i824 = $842 ? $$$i822 : $843;
                        $$1$i825 = $842 ? $$2$i823 : $844;
                        $845 = (($$119$i824) + -1) | 0;
                        $846 = (8136 + ($845 << 2) | 0);
                        $847 = HEAP32[$846 >> 2] | 0;
                        $848 = $$1$i825 << 1;
                        $849 = (($847) + ($848)) | 0;
                        $850 = $849 | 1;
                        $851 = ($$sroa$771$1 | 0) > ($850 | 0);
                        if ($851) {
                            $852 = $$sroa$336$12 << $850;
                            $853 = $852 | $811;
                            $854 = (($$sroa$771$1) - ($850)) | 0;
                            $$sroa$336$15 = $853; $$sroa$6907$0$$sroa$6907$16$$pre$i19682621 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682622; $$sroa$771$2 = $854;
                            break;
                        } else {
                            $855 = (($850) - ($$sroa$771$1)) | 0;
                            $856 = $$sroa$336$12 << $$sroa$771$1;
                            $857 = $811 >>> $855;
                            $858 = $857 | $856;
                            $859 = $858 >>> 24;
                            $860 = $859 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682622 >> 0] = $860;
                            $861 = $858 >>> 16;
                            $862 = $861 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9141879 = HEAP32[$6 >> 2] | 0;
                            $863 = ((($$sroa$6907$0$$sroa$6907$16$9141879)) + 1 | 0);
                            HEAP8[$863 >> 0] = $862;
                            $864 = $858 >>> 8;
                            $865 = $864 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9131880 = HEAP32[$6 >> 2] | 0;
                            $866 = ((($$sroa$6907$0$$sroa$6907$16$9131880)) + 2 | 0);
                            HEAP8[$866 >> 0] = $865;
                            $867 = $858 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9121881 = HEAP32[$6 >> 2] | 0;
                            $868 = ((($$sroa$6907$0$$sroa$6907$16$9121881)) + 3 | 0);
                            HEAP8[$868 >> 0] = $867;
                            $$sroa$6907$0$$sroa$6907$16$9111882 = HEAP32[$6 >> 2] | 0;
                            $869 = ((($$sroa$6907$0$$sroa$6907$16$9111882)) + 4 | 0);
                            $870 = $869;
                            HEAP32[$6 >> 2] = $870;
                            $871 = 1 << $855;
                            $872 = (($871) + -1) | 0;
                            $873 = $872 & $811;
                            $874 = (32 - ($855)) | 0;
                            $$sroa$336$15 = $873; $$sroa$6907$0$$sroa$6907$16$$pre$i19682621 = $869; $$sroa$771$2 = $874;
                            break;
                        }
                    }
                } while (0);
                $875 = HEAP32[$331 >> 2] | 0;
                L316: do {
                    switch ($875 | 0) {
                        case 0: {
                            $876 = ((($7)) + 24 | 0);
                            $877 = HEAP32[$876 >> 2] | 0;
                            $878 = (($877) + -4) | 0;
                            $879 = (($877) + -3) | 0;
                            $880 = ($878 >>> 0) < (256);
                            if ($880) {
                                $881 = (8136 + ($878 << 2) | 0);
                                $882 = HEAP32[$881 >> 2] | 0;
                                $883 = ($$sroa$771$2 | 0) > ($882 | 0);
                                if ($883) {
                                    $884 = $$sroa$336$15 << $882;
                                    $885 = $884 | $879;
                                    $886 = (($$sroa$771$2) - ($882)) | 0;
                                    $$sroa$336$48 = $885; $$sroa$6907$0$$sroa$6907$16$$pre$i19682614 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100119232340 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100619792464 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100919332389 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$101619532525 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$102319742504 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$102619582568 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103019382408 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103319892356 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103919482484 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$104219842426 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$106519992300 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$106919132288 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$107419082276 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$110419942326 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$116519182313 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$11682004 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$11731903 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$97819282372 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$98619692546 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$99219432445 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$99819632591 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$771$15 = $886;
                                    break L316;
                                } else {
                                    $887 = (($882) - ($$sroa$771$2)) | 0;
                                    $888 = $$sroa$336$15 << $$sroa$771$2;
                                    $889 = $879 >>> $887;
                                    $890 = $889 | $888;
                                    $891 = $890 >>> 24;
                                    $892 = $891 & 255;
                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682621 >> 0] = $892;
                                    $893 = $890 >>> 16;
                                    $894 = $893 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9292085 = HEAP32[$6 >> 2] | 0;
                                    $895 = ((($$sroa$6907$0$$sroa$6907$16$9292085)) + 1 | 0);
                                    HEAP8[$895 >> 0] = $894;
                                    $896 = $890 >>> 8;
                                    $897 = $896 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9302086 = HEAP32[$6 >> 2] | 0;
                                    $898 = ((($$sroa$6907$0$$sroa$6907$16$9302086)) + 2 | 0);
                                    HEAP8[$898 >> 0] = $897;
                                    $899 = $890 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9312087 = HEAP32[$6 >> 2] | 0;
                                    $900 = ((($$sroa$6907$0$$sroa$6907$16$9312087)) + 3 | 0);
                                    HEAP8[$900 >> 0] = $899;
                                    $$sroa$6907$0$$sroa$6907$16$9322088 = HEAP32[$6 >> 2] | 0;
                                    $901 = ((($$sroa$6907$0$$sroa$6907$16$9322088)) + 4 | 0);
                                    $902 = $901;
                                    HEAP32[$6 >> 2] = $902;
                                    $903 = 1 << $887;
                                    $904 = (($903) + -1) | 0;
                                    $905 = $904 & $879;
                                    $906 = (32 - ($887)) | 0;
                                    $$sroa$336$48 = $905; $$sroa$6907$0$$sroa$6907$16$$pre$i19682614 = $901; $$sroa$6907$0$$sroa$6907$16$100119232340 = $901; $$sroa$6907$0$$sroa$6907$16$100619792464 = $901; $$sroa$6907$0$$sroa$6907$16$100919332389 = $901; $$sroa$6907$0$$sroa$6907$16$101619532525 = $901; $$sroa$6907$0$$sroa$6907$16$102319742504 = $901; $$sroa$6907$0$$sroa$6907$16$102619582568 = $901; $$sroa$6907$0$$sroa$6907$16$103019382408 = $901; $$sroa$6907$0$$sroa$6907$16$103319892356 = $901; $$sroa$6907$0$$sroa$6907$16$103919482484 = $901; $$sroa$6907$0$$sroa$6907$16$104219842426 = $901; $$sroa$6907$0$$sroa$6907$16$106519992300 = $901; $$sroa$6907$0$$sroa$6907$16$106919132288 = $901; $$sroa$6907$0$$sroa$6907$16$107419082276 = $901; $$sroa$6907$0$$sroa$6907$16$110419942326 = $901; $$sroa$6907$0$$sroa$6907$16$116519182313 = $901; $$sroa$6907$0$$sroa$6907$16$11682004 = $901; $$sroa$6907$0$$sroa$6907$16$11731903 = $901; $$sroa$6907$0$$sroa$6907$16$97819282372 = $901; $$sroa$6907$0$$sroa$6907$16$98619692546 = $901; $$sroa$6907$0$$sroa$6907$16$99219432445 = $901; $$sroa$6907$0$$sroa$6907$16$99819632591 = $901; $$sroa$771$15 = $906;
                                    break L316;
                                }
                            } else {
                                $907 = ($879 >>> 0) > (65535);
                                $908 = $879 >>> 16;
                                $$$i813 = $907 ? $908 : $879;
                                $$2$i814 = $907 ? 16 : 0;
                                $909 = $$$i813 & 65280;
                                $910 = ($909 | 0) == (0);
                                $911 = $$$i813 >>> 8;
                                $912 = $$2$i814 | 8;
                                $$119$i815 = $910 ? $$$i813 : $911;
                                $$1$i816 = $910 ? $$2$i814 : $912;
                                $913 = (($$119$i815) + -1) | 0;
                                $914 = (8136 + ($913 << 2) | 0);
                                $915 = HEAP32[$914 >> 2] | 0;
                                $916 = $$1$i816 << 1;
                                $917 = (($915) + ($916)) | 0;
                                $918 = $917 | 1;
                                $919 = ($$sroa$771$2 | 0) > ($918 | 0);
                                if ($919) {
                                    $920 = $$sroa$336$15 << $918;
                                    $921 = $920 | $879;
                                    $922 = (($$sroa$771$2) - ($918)) | 0;
                                    $$sroa$336$48 = $921; $$sroa$6907$0$$sroa$6907$16$$pre$i19682614 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100119232340 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100619792464 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100919332389 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$101619532525 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$102319742504 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$102619582568 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103019382408 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103319892356 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103919482484 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$104219842426 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$106519992300 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$106919132288 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$107419082276 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$110419942326 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$116519182313 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$11682004 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$11731903 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$97819282372 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$98619692546 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$99219432445 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$99819632591 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$771$15 = $922;
                                    break L316;
                                } else {
                                    $923 = (($918) - ($$sroa$771$2)) | 0;
                                    $924 = $$sroa$336$15 << $$sroa$771$2;
                                    $925 = $879 >>> $923;
                                    $926 = $925 | $924;
                                    $927 = $926 >>> 24;
                                    $928 = $927 & 255;
                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682621 >> 0] = $928;
                                    $929 = $926 >>> 16;
                                    $930 = $929 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9352080 = HEAP32[$6 >> 2] | 0;
                                    $931 = ((($$sroa$6907$0$$sroa$6907$16$9352080)) + 1 | 0);
                                    HEAP8[$931 >> 0] = $930;
                                    $932 = $926 >>> 8;
                                    $933 = $932 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9362081 = HEAP32[$6 >> 2] | 0;
                                    $934 = ((($$sroa$6907$0$$sroa$6907$16$9362081)) + 2 | 0);
                                    HEAP8[$934 >> 0] = $933;
                                    $935 = $926 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9372082 = HEAP32[$6 >> 2] | 0;
                                    $936 = ((($$sroa$6907$0$$sroa$6907$16$9372082)) + 3 | 0);
                                    HEAP8[$936 >> 0] = $935;
                                    $$sroa$6907$0$$sroa$6907$16$9382083 = HEAP32[$6 >> 2] | 0;
                                    $937 = ((($$sroa$6907$0$$sroa$6907$16$9382083)) + 4 | 0);
                                    $938 = $937;
                                    HEAP32[$6 >> 2] = $938;
                                    $939 = 1 << $923;
                                    $940 = (($939) + -1) | 0;
                                    $941 = $940 & $879;
                                    $942 = (32 - ($923)) | 0;
                                    $$sroa$336$48 = $941; $$sroa$6907$0$$sroa$6907$16$$pre$i19682614 = $937; $$sroa$6907$0$$sroa$6907$16$100119232340 = $937; $$sroa$6907$0$$sroa$6907$16$100619792464 = $937; $$sroa$6907$0$$sroa$6907$16$100919332389 = $937; $$sroa$6907$0$$sroa$6907$16$101619532525 = $937; $$sroa$6907$0$$sroa$6907$16$102319742504 = $937; $$sroa$6907$0$$sroa$6907$16$102619582568 = $937; $$sroa$6907$0$$sroa$6907$16$103019382408 = $937; $$sroa$6907$0$$sroa$6907$16$103319892356 = $937; $$sroa$6907$0$$sroa$6907$16$103919482484 = $937; $$sroa$6907$0$$sroa$6907$16$104219842426 = $937; $$sroa$6907$0$$sroa$6907$16$106519992300 = $937; $$sroa$6907$0$$sroa$6907$16$106919132288 = $937; $$sroa$6907$0$$sroa$6907$16$107419082276 = $937; $$sroa$6907$0$$sroa$6907$16$110419942326 = $937; $$sroa$6907$0$$sroa$6907$16$116519182313 = $937; $$sroa$6907$0$$sroa$6907$16$11682004 = $937; $$sroa$6907$0$$sroa$6907$16$11731903 = $937; $$sroa$6907$0$$sroa$6907$16$97819282372 = $937; $$sroa$6907$0$$sroa$6907$16$98619692546 = $937; $$sroa$6907$0$$sroa$6907$16$99219432445 = $937; $$sroa$6907$0$$sroa$6907$16$99819632591 = $937; $$sroa$771$15 = $942;
                                    break L316;
                                }
                            }
                            break;
                        }
                        case 1: {
                            $943 = ((($7)) + 322 | 0);
                            $944 = HEAP8[$943 >> 0] | 0;
                            $945 = $944 & 255;
                            $946 = ($$sroa$771$2 | 0) > (1);
                            if ($946) {
                                $947 = $$sroa$336$15 << 1;
                                $948 = $947 | $945;
                                $949 = (($$sroa$771$2) + -1) | 0;
                                $$sroa$336$19 = $948; $$sroa$6907$0$$sroa$6907$16$$pre$i19682620 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $storemerge$i$i808 = $949;
                            } else {
                                $950 = (1 - ($$sroa$771$2)) | 0;
                                $951 = $$sroa$336$15 << $$sroa$771$2;
                                $952 = $945 >>> $950;
                                $953 = $952 | $951;
                                $954 = $953 >>> 24;
                                $955 = $954 & 255;
                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682621 >> 0] = $955;
                                $956 = $953 >>> 16;
                                $957 = $956 & 255;
                                $$sroa$6907$0$$sroa$6907$16$9761884 = HEAP32[$6 >> 2] | 0;
                                $958 = ((($$sroa$6907$0$$sroa$6907$16$9761884)) + 1 | 0);
                                HEAP8[$958 >> 0] = $957;
                                $959 = $953 >>> 8;
                                $960 = $959 & 255;
                                $$sroa$6907$0$$sroa$6907$16$9511885 = HEAP32[$6 >> 2] | 0;
                                $961 = ((($$sroa$6907$0$$sroa$6907$16$9511885)) + 2 | 0);
                                HEAP8[$961 >> 0] = $960;
                                $962 = $953 & 255;
                                $$sroa$6907$0$$sroa$6907$16$9431886 = HEAP32[$6 >> 2] | 0;
                                $963 = ((($$sroa$6907$0$$sroa$6907$16$9431886)) + 3 | 0);
                                HEAP8[$963 >> 0] = $962;
                                $$sroa$6907$0$$sroa$6907$16$9441887 = HEAP32[$6 >> 2] | 0;
                                $964 = ((($$sroa$6907$0$$sroa$6907$16$9441887)) + 4 | 0);
                                $965 = $964;
                                HEAP32[$6 >> 2] = $965;
                                $966 = 1 << $950;
                                $967 = (($966) + 1) | 0;
                                $968 = $967 & $945;
                                $969 = (32 - ($950)) | 0;
                                $$sroa$336$19 = $968; $$sroa$6907$0$$sroa$6907$16$$pre$i19682620 = $964; $storemerge$i$i808 = $969;
                            }
                            $970 = ((($7)) + 28 | 0);
                            $971 = HEAP32[$970 >> 2] | 0;
                            $972 = ($971 | 0) == (0);
                            do {
                                if ($972) {
                                    $973 = ($storemerge$i$i808 | 0) > (1);
                                    if ($973) {
                                        $974 = $$sroa$336$19 << 1;
                                        $975 = $974 | 1;
                                        $976 = (($storemerge$i$i808) + -1) | 0;
                                        $$sroa$336$27 = $975; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682620; $$sroa$771$6 = $976;
                                        break;
                                    } else {
                                        $977 = (1 - ($storemerge$i$i808)) | 0;
                                        $978 = $$sroa$336$19 << $storemerge$i$i808;
                                        $979 = 1 >>> $977;
                                        $980 = $979 | $978;
                                        $981 = $980 >>> 24;
                                        $982 = $981 & 255;
                                        HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682620 >> 0] = $982;
                                        $983 = $980 >>> 16;
                                        $984 = $983 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$11002075 = HEAP32[$6 >> 2] | 0;
                                        $985 = ((($$sroa$6907$0$$sroa$6907$16$11002075)) + 1 | 0);
                                        HEAP8[$985 >> 0] = $984;
                                        $986 = $980 >>> 8;
                                        $987 = $986 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$11012076 = HEAP32[$6 >> 2] | 0;
                                        $988 = ((($$sroa$6907$0$$sroa$6907$16$11012076)) + 2 | 0);
                                        HEAP8[$988 >> 0] = $987;
                                        $989 = $980 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$11022077 = HEAP32[$6 >> 2] | 0;
                                        $990 = ((($$sroa$6907$0$$sroa$6907$16$11022077)) + 3 | 0);
                                        HEAP8[$990 >> 0] = $989;
                                        $$sroa$6907$0$$sroa$6907$16$11032078 = HEAP32[$6 >> 2] | 0;
                                        $991 = ((($$sroa$6907$0$$sroa$6907$16$11032078)) + 4 | 0);
                                        $992 = $991;
                                        HEAP32[$6 >> 2] = $992;
                                        $993 = ($977 | 0) != (0);
                                        $994 = $993 & 1;
                                        $995 = (32 - ($977)) | 0;
                                        $$sroa$336$27 = $994; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $991; $$sroa$771$6 = $995;
                                        break;
                                    }
                                } else {
                                    $996 = ($971 | 0) > (0);
                                    if ($996) {
                                        $997 = $971 << 1;
                                        $998 = (($997) + -1) | 0;
                                        $999 = ($998 >>> 0) < (256);
                                        if ($999) {
                                            $1000 = (8136 + ($998 << 2) | 0);
                                            $1001 = HEAP32[$1000 >> 2] | 0;
                                            $1002 = ($storemerge$i$i808 | 0) > ($1001 | 0);
                                            if ($1002) {
                                                $1003 = $$sroa$336$19 << $1001;
                                                $1004 = $1003 | $997;
                                                $1005 = (($storemerge$i$i808) - ($1001)) | 0;
                                                $$sroa$336$27 = $1004; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682620; $$sroa$771$6 = $1005;
                                                break;
                                            } else {
                                                $1006 = (($1001) - ($storemerge$i$i808)) | 0;
                                                $1007 = $$sroa$336$19 << $storemerge$i$i808;
                                                $1008 = $997 >>> $1006;
                                                $1009 = $1008 | $1007;
                                                $1010 = $1009 >>> 24;
                                                $1011 = $1010 & 255;
                                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682620 >> 0] = $1011;
                                                $1012 = $1009 >>> 16;
                                                $1013 = $1012 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9202070 = HEAP32[$6 >> 2] | 0;
                                                $1014 = ((($$sroa$6907$0$$sroa$6907$16$9202070)) + 1 | 0);
                                                HEAP8[$1014 >> 0] = $1013;
                                                $1015 = $1009 >>> 8;
                                                $1016 = $1015 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9212071 = HEAP32[$6 >> 2] | 0;
                                                $1017 = ((($$sroa$6907$0$$sroa$6907$16$9212071)) + 2 | 0);
                                                HEAP8[$1017 >> 0] = $1016;
                                                $1018 = $1009 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9222072 = HEAP32[$6 >> 2] | 0;
                                                $1019 = ((($$sroa$6907$0$$sroa$6907$16$9222072)) + 3 | 0);
                                                HEAP8[$1019 >> 0] = $1018;
                                                $$sroa$6907$0$$sroa$6907$16$9232073 = HEAP32[$6 >> 2] | 0;
                                                $1020 = ((($$sroa$6907$0$$sroa$6907$16$9232073)) + 4 | 0);
                                                $1021 = $1020;
                                                HEAP32[$6 >> 2] = $1021;
                                                $1022 = 1 << $1006;
                                                $1023 = (($1022) + -1) | 0;
                                                $1024 = $1023 & $997;
                                                $1025 = (32 - ($1006)) | 0;
                                                $$sroa$336$27 = $1024; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $1020; $$sroa$771$6 = $1025;
                                                break;
                                            }
                                        } else {
                                            $1026 = ($997 >>> 0) > (65535);
                                            $1027 = $971 >>> 15;
                                            $1028 = $1027 & 65535;
                                            $$$i792 = $1026 ? $1028 : $997;
                                            $$2$i793 = $1026 ? 16 : 0;
                                            $1029 = $$$i792 & 65280;
                                            $1030 = ($1029 | 0) == (0);
                                            $1031 = $$$i792 >>> 8;
                                            $1032 = $$2$i793 | 8;
                                            $$119$i794 = $1030 ? $$$i792 : $1031;
                                            $$1$i795 = $1030 ? $$2$i793 : $1032;
                                            $1033 = (($$119$i794) + -1) | 0;
                                            $1034 = (8136 + ($1033 << 2) | 0);
                                            $1035 = HEAP32[$1034 >> 2] | 0;
                                            $1036 = $$1$i795 << 1;
                                            $1037 = (($1035) + ($1036)) | 0;
                                            $1038 = $1037 | 1;
                                            $1039 = ($storemerge$i$i808 | 0) > ($1038 | 0);
                                            if ($1039) {
                                                $1040 = $$sroa$336$19 << $1038;
                                                $1041 = $1040 | $997;
                                                $1042 = (($storemerge$i$i808) - ($1038)) | 0;
                                                $$sroa$336$27 = $1041; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682620; $$sroa$771$6 = $1042;
                                                break;
                                            } else {
                                                $1043 = (($1038) - ($storemerge$i$i808)) | 0;
                                                $1044 = $$sroa$336$19 << $storemerge$i$i808;
                                                $1045 = $997 >>> $1043;
                                                $1046 = $1045 | $1044;
                                                $1047 = $1046 >>> 24;
                                                $1048 = $1047 & 255;
                                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682620 >> 0] = $1048;
                                                $1049 = $1046 >>> 16;
                                                $1050 = $1049 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9612065 = HEAP32[$6 >> 2] | 0;
                                                $1051 = ((($$sroa$6907$0$$sroa$6907$16$9612065)) + 1 | 0);
                                                HEAP8[$1051 >> 0] = $1050;
                                                $1052 = $1046 >>> 8;
                                                $1053 = $1052 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9622066 = HEAP32[$6 >> 2] | 0;
                                                $1054 = ((($$sroa$6907$0$$sroa$6907$16$9622066)) + 2 | 0);
                                                HEAP8[$1054 >> 0] = $1053;
                                                $1055 = $1046 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9632067 = HEAP32[$6 >> 2] | 0;
                                                $1056 = ((($$sroa$6907$0$$sroa$6907$16$9632067)) + 3 | 0);
                                                HEAP8[$1056 >> 0] = $1055;
                                                $$sroa$6907$0$$sroa$6907$16$9642068 = HEAP32[$6 >> 2] | 0;
                                                $1057 = ((($$sroa$6907$0$$sroa$6907$16$9642068)) + 4 | 0);
                                                $1058 = $1057;
                                                HEAP32[$6 >> 2] = $1058;
                                                $1059 = 1 << $1043;
                                                $1060 = (($1059) + -1) | 0;
                                                $1061 = $1060 & $997;
                                                $1062 = (32 - ($1043)) | 0;
                                                $$sroa$336$27 = $1061; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $1057; $$sroa$771$6 = $1062;
                                                break;
                                            }
                                        }
                                    } else {
                                        $1063 = (0 - ($971)) | 0;
                                        $1064 = $1063 << 1;
                                        $1065 = $1064 | 1;
                                        $1066 = ($1064 >>> 0) < (256);
                                        if ($1066) {
                                            $1067 = (8136 + ($1064 << 2) | 0);
                                            $1068 = HEAP32[$1067 >> 2] | 0;
                                            $1069 = ($storemerge$i$i808 | 0) > ($1068 | 0);
                                            if ($1069) {
                                                $1070 = $$sroa$336$19 << $1068;
                                                $1071 = $1070 | $1065;
                                                $1072 = (($storemerge$i$i808) - ($1068)) | 0;
                                                $$sroa$336$27 = $1071; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682620; $$sroa$771$6 = $1072;
                                                break;
                                            } else {
                                                $1073 = (($1068) - ($storemerge$i$i808)) | 0;
                                                $1074 = $$sroa$336$19 << $storemerge$i$i808;
                                                $1075 = $1065 >>> $1073;
                                                $1076 = $1075 | $1074;
                                                $1077 = $1076 >>> 24;
                                                $1078 = $1077 & 255;
                                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682620 >> 0] = $1078;
                                                $1079 = $1076 >>> 16;
                                                $1080 = $1079 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9662060 = HEAP32[$6 >> 2] | 0;
                                                $1081 = ((($$sroa$6907$0$$sroa$6907$16$9662060)) + 1 | 0);
                                                HEAP8[$1081 >> 0] = $1080;
                                                $1082 = $1076 >>> 8;
                                                $1083 = $1082 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9672061 = HEAP32[$6 >> 2] | 0;
                                                $1084 = ((($$sroa$6907$0$$sroa$6907$16$9672061)) + 2 | 0);
                                                HEAP8[$1084 >> 0] = $1083;
                                                $1085 = $1076 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9452062 = HEAP32[$6 >> 2] | 0;
                                                $1086 = ((($$sroa$6907$0$$sroa$6907$16$9452062)) + 3 | 0);
                                                HEAP8[$1086 >> 0] = $1085;
                                                $$sroa$6907$0$$sroa$6907$16$9602063 = HEAP32[$6 >> 2] | 0;
                                                $1087 = ((($$sroa$6907$0$$sroa$6907$16$9602063)) + 4 | 0);
                                                $1088 = $1087;
                                                HEAP32[$6 >> 2] = $1088;
                                                $1089 = 1 << $1073;
                                                $1090 = (($1089) + -1) | 0;
                                                $1091 = $1090 & $1065;
                                                $1092 = (32 - ($1073)) | 0;
                                                $$sroa$336$27 = $1091; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $1087; $$sroa$771$6 = $1092;
                                                break;
                                            }
                                        } else {
                                            $1093 = ($1065 >>> 0) > (65535);
                                            $1094 = $1063 >>> 15;
                                            $1095 = $1094 & 65535;
                                            $$$i801 = $1093 ? $1095 : $1065;
                                            $$2$i802 = $1093 ? 16 : 0;
                                            $1096 = $$$i801 & 65280;
                                            $1097 = ($1096 | 0) == (0);
                                            $1098 = $$$i801 >>> 8;
                                            $1099 = $$2$i802 | 8;
                                            $$119$i803 = $1097 ? $$$i801 : $1098;
                                            $$1$i804 = $1097 ? $$2$i802 : $1099;
                                            $1100 = (($$119$i803) + -1) | 0;
                                            $1101 = (8136 + ($1100 << 2) | 0);
                                            $1102 = HEAP32[$1101 >> 2] | 0;
                                            $1103 = $$1$i804 << 1;
                                            $1104 = (($1102) + ($1103)) | 0;
                                            $1105 = $1104 | 1;
                                            $1106 = ($storemerge$i$i808 | 0) > ($1105 | 0);
                                            if ($1106) {
                                                $1107 = $$sroa$336$19 << $1105;
                                                $1108 = $1107 | $1065;
                                                $1109 = (($storemerge$i$i808) - ($1105)) | 0;
                                                $$sroa$336$27 = $1108; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682620; $$sroa$771$6 = $1109;
                                                break;
                                            } else {
                                                $1110 = (($1105) - ($storemerge$i$i808)) | 0;
                                                $1111 = $$sroa$336$19 << $storemerge$i$i808;
                                                $1112 = $1065 >>> $1110;
                                                $1113 = $1112 | $1111;
                                                $1114 = $1113 >>> 24;
                                                $1115 = $1114 & 255;
                                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682620 >> 0] = $1115;
                                                $1116 = $1113 >>> 16;
                                                $1117 = $1116 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9711889 = HEAP32[$6 >> 2] | 0;
                                                $1118 = ((($$sroa$6907$0$$sroa$6907$16$9711889)) + 1 | 0);
                                                HEAP8[$1118 >> 0] = $1117;
                                                $1119 = $1113 >>> 8;
                                                $1120 = $1119 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9721890 = HEAP32[$6 >> 2] | 0;
                                                $1121 = ((($$sroa$6907$0$$sroa$6907$16$9721890)) + 2 | 0);
                                                HEAP8[$1121 >> 0] = $1120;
                                                $1122 = $1113 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$9731891 = HEAP32[$6 >> 2] | 0;
                                                $1123 = ((($$sroa$6907$0$$sroa$6907$16$9731891)) + 3 | 0);
                                                HEAP8[$1123 >> 0] = $1122;
                                                $$sroa$6907$0$$sroa$6907$16$9741892 = HEAP32[$6 >> 2] | 0;
                                                $1124 = ((($$sroa$6907$0$$sroa$6907$16$9741892)) + 4 | 0);
                                                $1125 = $1124;
                                                HEAP32[$6 >> 2] = $1125;
                                                $1126 = 1 << $1110;
                                                $1127 = (($1126) + -1) | 0;
                                                $1128 = $1127 & $1065;
                                                $1129 = (32 - ($1110)) | 0;
                                                $$sroa$336$27 = $1128; $$sroa$6907$0$$sroa$6907$16$$pre$i19682619 = $1124; $$sroa$771$6 = $1129;
                                                break;
                                            }
                                        }
                                    }
                                }
                            } while (0);
                            $1130 = ((($7)) + 32 | 0);
                            $1131 = HEAP32[$1130 >> 2] | 0;
                            $1132 = ($1131 | 0) == (0);
                            do {
                                if ($1132) {
                                    $1133 = ($$sroa$771$6 | 0) > (1);
                                    if ($1133) {
                                        $1134 = $$sroa$336$27 << 1;
                                        $1135 = $1134 | 1;
                                        $1136 = (($$sroa$771$6) + -1) | 0;
                                        $$sroa$336$35 = $1135; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682619; $$sroa$771$9 = $1136;
                                        break;
                                    } else {
                                        $1137 = (1 - ($$sroa$771$6)) | 0;
                                        $1138 = $$sroa$336$27 << $$sroa$771$6;
                                        $1139 = 1 >>> $1137;
                                        $1140 = $1138 | $1139;
                                        $1141 = $1140 >>> 24;
                                        $1142 = $1141 & 255;
                                        HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682619 >> 0] = $1142;
                                        $1143 = $1140 >>> 16;
                                        $1144 = $1143 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$10862055 = HEAP32[$6 >> 2] | 0;
                                        $1145 = ((($$sroa$6907$0$$sroa$6907$16$10862055)) + 1 | 0);
                                        HEAP8[$1145 >> 0] = $1144;
                                        $1146 = $1140 >>> 8;
                                        $1147 = $1146 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$10852056 = HEAP32[$6 >> 2] | 0;
                                        $1148 = ((($$sroa$6907$0$$sroa$6907$16$10852056)) + 2 | 0);
                                        HEAP8[$1148 >> 0] = $1147;
                                        $1149 = $1140 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$10842057 = HEAP32[$6 >> 2] | 0;
                                        $1150 = ((($$sroa$6907$0$$sroa$6907$16$10842057)) + 3 | 0);
                                        HEAP8[$1150 >> 0] = $1149;
                                        $$sroa$6907$0$$sroa$6907$16$10832058 = HEAP32[$6 >> 2] | 0;
                                        $1151 = ((($$sroa$6907$0$$sroa$6907$16$10832058)) + 4 | 0);
                                        $1152 = $1151;
                                        HEAP32[$6 >> 2] = $1152;
                                        $1153 = ($1137 | 0) != (0);
                                        $1154 = $1153 & 1;
                                        $1155 = (32 - ($1137)) | 0;
                                        $$sroa$336$35 = $1154; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $1151; $$sroa$771$9 = $1155;
                                        break;
                                    }
                                } else {
                                    $1156 = ($1131 | 0) > (0);
                                    if ($1156) {
                                        $1157 = $1131 << 1;
                                        $1158 = (($1157) + -1) | 0;
                                        $1159 = ($1158 >>> 0) < (256);
                                        if ($1159) {
                                            $1160 = (8136 + ($1158 << 2) | 0);
                                            $1161 = HEAP32[$1160 >> 2] | 0;
                                            $1162 = ($$sroa$771$6 | 0) > ($1161 | 0);
                                            if ($1162) {
                                                $1163 = $$sroa$336$27 << $1161;
                                                $1164 = $1163 | $1157;
                                                $1165 = (($$sroa$771$6) - ($1161)) | 0;
                                                $$sroa$336$35 = $1164; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682619; $$sroa$771$9 = $1165;
                                                break;
                                            } else {
                                                $1166 = (($1161) - ($$sroa$771$6)) | 0;
                                                $1167 = $$sroa$336$27 << $$sroa$771$6;
                                                $1168 = $1157 >>> $1166;
                                                $1169 = $1168 | $1167;
                                                $1170 = $1169 >>> 24;
                                                $1171 = $1170 & 255;
                                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682619 >> 0] = $1171;
                                                $1172 = $1169 >>> 16;
                                                $1173 = $1172 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10452050 = HEAP32[$6 >> 2] | 0;
                                                $1174 = ((($$sroa$6907$0$$sroa$6907$16$10452050)) + 1 | 0);
                                                HEAP8[$1174 >> 0] = $1173;
                                                $1175 = $1169 >>> 8;
                                                $1176 = $1175 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10472051 = HEAP32[$6 >> 2] | 0;
                                                $1177 = ((($$sroa$6907$0$$sroa$6907$16$10472051)) + 2 | 0);
                                                HEAP8[$1177 >> 0] = $1176;
                                                $1178 = $1169 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10482052 = HEAP32[$6 >> 2] | 0;
                                                $1179 = ((($$sroa$6907$0$$sroa$6907$16$10482052)) + 3 | 0);
                                                HEAP8[$1179 >> 0] = $1178;
                                                $$sroa$6907$0$$sroa$6907$16$10492053 = HEAP32[$6 >> 2] | 0;
                                                $1180 = ((($$sroa$6907$0$$sroa$6907$16$10492053)) + 4 | 0);
                                                $1181 = $1180;
                                                HEAP32[$6 >> 2] = $1181;
                                                $1182 = 1 << $1166;
                                                $1183 = (($1182) + -1) | 0;
                                                $1184 = $1183 & $1157;
                                                $1185 = (32 - ($1166)) | 0;
                                                $$sroa$336$35 = $1184; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $1180; $$sroa$771$9 = $1185;
                                                break;
                                            }
                                        } else {
                                            $1186 = ($1157 >>> 0) > (65535);
                                            $1187 = $1131 >>> 15;
                                            $1188 = $1187 & 65535;
                                            $$$i771 = $1186 ? $1188 : $1157;
                                            $$2$i772 = $1186 ? 16 : 0;
                                            $1189 = $$$i771 & 65280;
                                            $1190 = ($1189 | 0) == (0);
                                            $1191 = $$$i771 >>> 8;
                                            $1192 = $$2$i772 | 8;
                                            $$119$i773 = $1190 ? $$$i771 : $1191;
                                            $$1$i774 = $1190 ? $$2$i772 : $1192;
                                            $1193 = (($$119$i773) + -1) | 0;
                                            $1194 = (8136 + ($1193 << 2) | 0);
                                            $1195 = HEAP32[$1194 >> 2] | 0;
                                            $1196 = $$1$i774 << 1;
                                            $1197 = (($1195) + ($1196)) | 0;
                                            $1198 = $1197 | 1;
                                            $1199 = ($$sroa$771$6 | 0) > ($1198 | 0);
                                            if ($1199) {
                                                $1200 = $$sroa$336$27 << $1198;
                                                $1201 = $1200 | $1157;
                                                $1202 = (($$sroa$771$6) - ($1198)) | 0;
                                                $$sroa$336$35 = $1201; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682619; $$sroa$771$9 = $1202;
                                                break;
                                            } else {
                                                $1203 = (($1198) - ($$sroa$771$6)) | 0;
                                                $1204 = $$sroa$336$27 << $$sroa$771$6;
                                                $1205 = $1157 >>> $1203;
                                                $1206 = $1205 | $1204;
                                                $1207 = $1206 >>> 24;
                                                $1208 = $1207 & 255;
                                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682619 >> 0] = $1208;
                                                $1209 = $1206 >>> 16;
                                                $1210 = $1209 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10512045 = HEAP32[$6 >> 2] | 0;
                                                $1211 = ((($$sroa$6907$0$$sroa$6907$16$10512045)) + 1 | 0);
                                                HEAP8[$1211 >> 0] = $1210;
                                                $1212 = $1206 >>> 8;
                                                $1213 = $1212 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10522046 = HEAP32[$6 >> 2] | 0;
                                                $1214 = ((($$sroa$6907$0$$sroa$6907$16$10522046)) + 2 | 0);
                                                HEAP8[$1214 >> 0] = $1213;
                                                $1215 = $1206 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10532047 = HEAP32[$6 >> 2] | 0;
                                                $1216 = ((($$sroa$6907$0$$sroa$6907$16$10532047)) + 3 | 0);
                                                HEAP8[$1216 >> 0] = $1215;
                                                $$sroa$6907$0$$sroa$6907$16$10442048 = HEAP32[$6 >> 2] | 0;
                                                $1217 = ((($$sroa$6907$0$$sroa$6907$16$10442048)) + 4 | 0);
                                                $1218 = $1217;
                                                HEAP32[$6 >> 2] = $1218;
                                                $1219 = 1 << $1203;
                                                $1220 = (($1219) + -1) | 0;
                                                $1221 = $1220 & $1157;
                                                $1222 = (32 - ($1203)) | 0;
                                                $$sroa$336$35 = $1221; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $1217; $$sroa$771$9 = $1222;
                                                break;
                                            }
                                        }
                                    } else {
                                        $1223 = (0 - ($1131)) | 0;
                                        $1224 = $1223 << 1;
                                        $1225 = $1224 | 1;
                                        $1226 = ($1224 >>> 0) < (256);
                                        if ($1226) {
                                            $1227 = (8136 + ($1224 << 2) | 0);
                                            $1228 = HEAP32[$1227 >> 2] | 0;
                                            $1229 = ($$sroa$771$6 | 0) > ($1228 | 0);
                                            if ($1229) {
                                                $1230 = $$sroa$336$27 << $1228;
                                                $1231 = $1230 | $1225;
                                                $1232 = (($$sroa$771$6) - ($1228)) | 0;
                                                $$sroa$336$35 = $1231; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682619; $$sroa$771$9 = $1232;
                                                break;
                                            } else {
                                                $1233 = (($1228) - ($$sroa$771$6)) | 0;
                                                $1234 = $$sroa$336$27 << $$sroa$771$6;
                                                $1235 = $1225 >>> $1233;
                                                $1236 = $1235 | $1234;
                                                $1237 = $1236 >>> 24;
                                                $1238 = $1237 & 255;
                                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682619 >> 0] = $1238;
                                                $1239 = $1236 >>> 16;
                                                $1240 = $1239 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10562040 = HEAP32[$6 >> 2] | 0;
                                                $1241 = ((($$sroa$6907$0$$sroa$6907$16$10562040)) + 1 | 0);
                                                HEAP8[$1241 >> 0] = $1240;
                                                $1242 = $1236 >>> 8;
                                                $1243 = $1242 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10572041 = HEAP32[$6 >> 2] | 0;
                                                $1244 = ((($$sroa$6907$0$$sroa$6907$16$10572041)) + 2 | 0);
                                                HEAP8[$1244 >> 0] = $1243;
                                                $1245 = $1236 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10962042 = HEAP32[$6 >> 2] | 0;
                                                $1246 = ((($$sroa$6907$0$$sroa$6907$16$10962042)) + 3 | 0);
                                                HEAP8[$1246 >> 0] = $1245;
                                                $$sroa$6907$0$$sroa$6907$16$10592043 = HEAP32[$6 >> 2] | 0;
                                                $1247 = ((($$sroa$6907$0$$sroa$6907$16$10592043)) + 4 | 0);
                                                $1248 = $1247;
                                                HEAP32[$6 >> 2] = $1248;
                                                $1249 = 1 << $1233;
                                                $1250 = (($1249) + -1) | 0;
                                                $1251 = $1250 & $1225;
                                                $1252 = (32 - ($1233)) | 0;
                                                $$sroa$336$35 = $1251; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $1247; $$sroa$771$9 = $1252;
                                                break;
                                            }
                                        } else {
                                            $1253 = ($1225 >>> 0) > (65535);
                                            $1254 = $1223 >>> 15;
                                            $1255 = $1254 & 65535;
                                            $$$i780 = $1253 ? $1255 : $1225;
                                            $$2$i781 = $1253 ? 16 : 0;
                                            $1256 = $$$i780 & 65280;
                                            $1257 = ($1256 | 0) == (0);
                                            $1258 = $$$i780 >>> 8;
                                            $1259 = $$2$i781 | 8;
                                            $$119$i782 = $1257 ? $$$i780 : $1258;
                                            $$1$i783 = $1257 ? $$2$i781 : $1259;
                                            $1260 = (($$119$i782) + -1) | 0;
                                            $1261 = (8136 + ($1260 << 2) | 0);
                                            $1262 = HEAP32[$1261 >> 2] | 0;
                                            $1263 = $$1$i783 << 1;
                                            $1264 = (($1262) + ($1263)) | 0;
                                            $1265 = $1264 | 1;
                                            $1266 = ($$sroa$771$6 | 0) > ($1265 | 0);
                                            if ($1266) {
                                                $1267 = $$sroa$336$27 << $1265;
                                                $1268 = $1267 | $1225;
                                                $1269 = (($$sroa$771$6) - ($1265)) | 0;
                                                $$sroa$336$35 = $1268; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682619; $$sroa$771$9 = $1269;
                                                break;
                                            } else {
                                                $1270 = (($1265) - ($$sroa$771$6)) | 0;
                                                $1271 = $$sroa$336$27 << $$sroa$771$6;
                                                $1272 = $1225 >>> $1270;
                                                $1273 = $1272 | $1271;
                                                $1274 = $1273 >>> 24;
                                                $1275 = $1274 & 255;
                                                HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682619 >> 0] = $1275;
                                                $1276 = $1273 >>> 16;
                                                $1277 = $1276 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10611894 = HEAP32[$6 >> 2] | 0;
                                                $1278 = ((($$sroa$6907$0$$sroa$6907$16$10611894)) + 1 | 0);
                                                HEAP8[$1278 >> 0] = $1277;
                                                $1279 = $1273 >>> 8;
                                                $1280 = $1279 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10701895 = HEAP32[$6 >> 2] | 0;
                                                $1281 = ((($$sroa$6907$0$$sroa$6907$16$10701895)) + 2 | 0);
                                                HEAP8[$1281 >> 0] = $1280;
                                                $1282 = $1273 & 255;
                                                $$sroa$6907$0$$sroa$6907$16$10971896 = HEAP32[$6 >> 2] | 0;
                                                $1283 = ((($$sroa$6907$0$$sroa$6907$16$10971896)) + 3 | 0);
                                                HEAP8[$1283 >> 0] = $1282;
                                                $$sroa$6907$0$$sroa$6907$16$10981897 = HEAP32[$6 >> 2] | 0;
                                                $1284 = ((($$sroa$6907$0$$sroa$6907$16$10981897)) + 4 | 0);
                                                $1285 = $1284;
                                                HEAP32[$6 >> 2] = $1285;
                                                $1286 = 1 << $1270;
                                                $1287 = (($1286) + -1) | 0;
                                                $1288 = $1287 & $1225;
                                                $1289 = (32 - ($1270)) | 0;
                                                $$sroa$336$35 = $1288; $$sroa$6907$0$$sroa$6907$16$$pre$i19682618 = $1284; $$sroa$771$9 = $1289;
                                                break;
                                            }
                                        }
                                    }
                                }
                            } while (0);
                            $1290 = ((($7)) + 36 | 0);
                            $1291 = HEAP32[$1290 >> 2] | 0;
                            $1292 = (($1291) + 1) | 0;
                            $1293 = ($1291 >>> 0) < (256);
                            do {
                                if ($1293) {
                                    $1294 = (8136 + ($1291 << 2) | 0);
                                    $1295 = HEAP32[$1294 >> 2] | 0;
                                    $1296 = ($$sroa$771$9 | 0) > ($1295 | 0);
                                    if ($1296) {
                                        $1297 = $$sroa$336$35 << $1295;
                                        $1298 = $1297 | $1292;
                                        $1299 = (($$sroa$771$9) - ($1295)) | 0;
                                        $$sroa$336$39$ph = $1298; $$sroa$6907$0$$sroa$6907$16$$pre$i19682617 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682618; $$sroa$771$11$ph = $1299;
                                        break;
                                    } else {
                                        $1300 = (($1295) - ($$sroa$771$9)) | 0;
                                        $1301 = $$sroa$336$35 << $$sroa$771$9;
                                        $1302 = $1292 >>> $1300;
                                        $1303 = $1302 | $1301;
                                        $1304 = $1303 >>> 24;
                                        $1305 = $1304 & 255;
                                        HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682618 >> 0] = $1305;
                                        $1306 = $1303 >>> 16;
                                        $1307 = $1306 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$10812035 = HEAP32[$6 >> 2] | 0;
                                        $1308 = ((($$sroa$6907$0$$sroa$6907$16$10812035)) + 1 | 0);
                                        HEAP8[$1308 >> 0] = $1307;
                                        $1309 = $1303 >>> 8;
                                        $1310 = $1309 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$11602036 = HEAP32[$6 >> 2] | 0;
                                        $1311 = ((($$sroa$6907$0$$sroa$6907$16$11602036)) + 2 | 0);
                                        HEAP8[$1311 >> 0] = $1310;
                                        $1312 = $1303 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$10822037 = HEAP32[$6 >> 2] | 0;
                                        $1313 = ((($$sroa$6907$0$$sroa$6907$16$10822037)) + 3 | 0);
                                        HEAP8[$1313 >> 0] = $1312;
                                        $$sroa$6907$0$$sroa$6907$16$10942038 = HEAP32[$6 >> 2] | 0;
                                        $1314 = ((($$sroa$6907$0$$sroa$6907$16$10942038)) + 4 | 0);
                                        $1315 = $1314;
                                        HEAP32[$6 >> 2] = $1315;
                                        $1316 = 1 << $1300;
                                        $1317 = (($1316) + -1) | 0;
                                        $1318 = $1317 & $1292;
                                        $1319 = (32 - ($1300)) | 0;
                                        $$sroa$336$39$ph = $1318; $$sroa$6907$0$$sroa$6907$16$$pre$i19682617 = $1314; $$sroa$771$11$ph = $1319;
                                        break;
                                    }
                                } else {
                                    $1320 = ($1292 >>> 0) > (65535);
                                    $1321 = $1292 >>> 16;
                                    $$$i759 = $1320 ? $1321 : $1292;
                                    $$2$i760 = $1320 ? 16 : 0;
                                    $1322 = $$$i759 & 65280;
                                    $1323 = ($1322 | 0) == (0);
                                    $1324 = $$$i759 >>> 8;
                                    $1325 = $$2$i760 | 8;
                                    $$119$i761 = $1323 ? $$$i759 : $1324;
                                    $$1$i762 = $1323 ? $$2$i760 : $1325;
                                    $1326 = (($$119$i761) + -1) | 0;
                                    $1327 = (8136 + ($1326 << 2) | 0);
                                    $1328 = HEAP32[$1327 >> 2] | 0;
                                    $1329 = $$1$i762 << 1;
                                    $1330 = (($1328) + ($1329)) | 0;
                                    $1331 = $1330 | 1;
                                    $1332 = ($$sroa$771$9 | 0) > ($1331 | 0);
                                    if ($1332) {
                                        $1333 = $$sroa$336$35 << $1331;
                                        $1334 = $1333 | $1292;
                                        $1335 = (($$sroa$771$9) - ($1331)) | 0;
                                        $$sroa$336$39$ph = $1334; $$sroa$6907$0$$sroa$6907$16$$pre$i19682617 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682618; $$sroa$771$11$ph = $1335;
                                        break;
                                    } else {
                                        $1336 = (($1331) - ($$sroa$771$9)) | 0;
                                        $1337 = $$sroa$336$35 << $$sroa$771$9;
                                        $1338 = $1292 >>> $1336;
                                        $1339 = $1338 | $1337;
                                        $1340 = $1339 >>> 24;
                                        $1341 = $1340 & 255;
                                        HEAP8[$$sroa$6907$0$$sroa$6907$16$$pre$i19682618 >> 0] = $1341;
                                        $1342 = $1339 >>> 16;
                                        $1343 = $1342 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$10921899 = HEAP32[$6 >> 2] | 0;
                                        $1344 = ((($$sroa$6907$0$$sroa$6907$16$10921899)) + 1 | 0);
                                        HEAP8[$1344 >> 0] = $1343;
                                        $1345 = $1339 >>> 8;
                                        $1346 = $1345 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$10911900 = HEAP32[$6 >> 2] | 0;
                                        $1347 = ((($$sroa$6907$0$$sroa$6907$16$10911900)) + 2 | 0);
                                        HEAP8[$1347 >> 0] = $1346;
                                        $1348 = $1339 & 255;
                                        $$sroa$6907$0$$sroa$6907$16$10901901 = HEAP32[$6 >> 2] | 0;
                                        $1349 = ((($$sroa$6907$0$$sroa$6907$16$10901901)) + 3 | 0);
                                        HEAP8[$1349 >> 0] = $1348;
                                        $$sroa$6907$0$$sroa$6907$16$10891902 = HEAP32[$6 >> 2] | 0;
                                        $1350 = ((($$sroa$6907$0$$sroa$6907$16$10891902)) + 4 | 0);
                                        $1351 = $1350;
                                        HEAP32[$6 >> 2] = $1351;
                                        $1352 = 1 << $1336;
                                        $1353 = (($1352) + -1) | 0;
                                        $1354 = $1353 & $1292;
                                        $1355 = (32 - ($1336)) | 0;
                                        $$sroa$336$39$ph = $1354; $$sroa$6907$0$$sroa$6907$16$$pre$i19682617 = $1350; $$sroa$771$11$ph = $1355;
                                        break;
                                    }
                                }
                            } while (0);
                            $1356 = HEAP32[$1290 >> 2] | 0;
                            $1357 = ($1356 | 0) > (0);
                            if (!($1357)) {
                                $$sroa$336$48 = $$sroa$336$39$ph; $$sroa$6907$0$$sroa$6907$16$$pre$i19682614 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$100119232340 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$100619792464 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$100919332389 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$101619532525 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$102319742504 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$102619582568 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$103019382408 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$103319892356 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$103919482484 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$104219842426 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$106519992300 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$106919132288 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$107419082276 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$110419942326 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$116519182313 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$11682004 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$11731903 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$97819282372 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$98619692546 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$99219432445 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$99819632591 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$771$15 = $$sroa$771$11$ph;
                                break L316;
                            }
                            $$05742126 = 0; $$sroa$336$392125 = $$sroa$336$39$ph; $$sroa$6907$0$$sroa$6907$16$$pre$i19682615 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$100119232341 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$100619792465 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$100919332390 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$101619532526 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$102319742505 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$102619582569 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$103019382409 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$103319892357 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$103919482485 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$104219842427 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$106519992301 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$106919132289 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$107419082277 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$10952014 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$110419942327 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$11102009 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$11492024 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$11542019 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$116519182314 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$116820042266 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$117319032256 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$11772029 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$97819282373 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$98619692547 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$99219432446 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$6907$0$$sroa$6907$16$99819632592 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682617; $$sroa$771$112124 = $$sroa$771$11$ph;
                            while (1) {
                                $1358 = (((($7)) + 40 | 0) + ($$05742126) | 0);
                                $1359 = HEAP8[$1358 >> 0] | 0;
                                $1360 = $1359 << 24 >> 24;
                                $1361 = ($1359 << 24 >> 24) == (0);
                                do {
                                    if ($1361) {
                                        $1362 = ($$sroa$771$112124 | 0) > (1);
                                        if ($1362) {
                                            $1363 = $$sroa$336$392125 << 1;
                                            $1364 = $1363 | 1;
                                            $1365 = (($$sroa$771$112124) + -1) | 0;
                                            $$sroa$336$47 = $1364; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682615; $$sroa$6907$0$$sroa$6907$16$100119232342 = $$sroa$6907$0$$sroa$6907$16$100119232341; $$sroa$6907$0$$sroa$6907$16$100619792466 = $$sroa$6907$0$$sroa$6907$16$100619792465; $$sroa$6907$0$$sroa$6907$16$100919332391 = $$sroa$6907$0$$sroa$6907$16$100919332390; $$sroa$6907$0$$sroa$6907$16$101619532527 = $$sroa$6907$0$$sroa$6907$16$101619532526; $$sroa$6907$0$$sroa$6907$16$102319742506 = $$sroa$6907$0$$sroa$6907$16$102319742505; $$sroa$6907$0$$sroa$6907$16$102619582570 = $$sroa$6907$0$$sroa$6907$16$102619582569; $$sroa$6907$0$$sroa$6907$16$103019382410 = $$sroa$6907$0$$sroa$6907$16$103019382409; $$sroa$6907$0$$sroa$6907$16$103319892358 = $$sroa$6907$0$$sroa$6907$16$103319892357; $$sroa$6907$0$$sroa$6907$16$103919482486 = $$sroa$6907$0$$sroa$6907$16$103919482485; $$sroa$6907$0$$sroa$6907$16$104219842428 = $$sroa$6907$0$$sroa$6907$16$104219842427; $$sroa$6907$0$$sroa$6907$16$106519992302 = $$sroa$6907$0$$sroa$6907$16$106519992301; $$sroa$6907$0$$sroa$6907$16$106919132290 = $$sroa$6907$0$$sroa$6907$16$106919132289; $$sroa$6907$0$$sroa$6907$16$107419082278 = $$sroa$6907$0$$sroa$6907$16$107419082277; $$sroa$6907$0$$sroa$6907$16$109520142214 = $$sroa$6907$0$$sroa$6907$16$10952014; $$sroa$6907$0$$sroa$6907$16$110419942328 = $$sroa$6907$0$$sroa$6907$16$110419942327; $$sroa$6907$0$$sroa$6907$16$111020092205 = $$sroa$6907$0$$sroa$6907$16$11102009; $$sroa$6907$0$$sroa$6907$16$114920242232 = $$sroa$6907$0$$sroa$6907$16$11492024; $$sroa$6907$0$$sroa$6907$16$115420192223 = $$sroa$6907$0$$sroa$6907$16$11542019; $$sroa$6907$0$$sroa$6907$16$116519182315 = $$sroa$6907$0$$sroa$6907$16$116519182314; $$sroa$6907$0$$sroa$6907$16$116820042267 = $$sroa$6907$0$$sroa$6907$16$116820042266; $$sroa$6907$0$$sroa$6907$16$117319032257 = $$sroa$6907$0$$sroa$6907$16$117319032256; $$sroa$6907$0$$sroa$6907$16$117720292241 = $$sroa$6907$0$$sroa$6907$16$11772029; $$sroa$6907$0$$sroa$6907$16$97819282374 = $$sroa$6907$0$$sroa$6907$16$97819282373; $$sroa$6907$0$$sroa$6907$16$98619692548 = $$sroa$6907$0$$sroa$6907$16$98619692547; $$sroa$6907$0$$sroa$6907$16$99219432447 = $$sroa$6907$0$$sroa$6907$16$99219432446; $$sroa$6907$0$$sroa$6907$16$99819632593 = $$sroa$6907$0$$sroa$6907$16$99819632592; $$sroa$771$14 = $1365;
                                            break;
                                        } else {
                                            $1366 = (1 - ($$sroa$771$112124)) | 0;
                                            $1367 = $$sroa$336$392125 << $$sroa$771$112124;
                                            $1368 = 1 >>> $1366;
                                            $1369 = $1367 | $1368;
                                            $1370 = $1369 >>> 24;
                                            $1371 = $1370 & 255;
                                            HEAP8[$$sroa$6907$0$$sroa$6907$16$11772029 >> 0] = $1371;
                                            $1372 = $1369 >>> 16;
                                            $1373 = $1372 & 255;
                                            $$sroa$6907$0$$sroa$6907$16$11782030 = HEAP32[$6 >> 2] | 0;
                                            $1374 = ((($$sroa$6907$0$$sroa$6907$16$11782030)) + 1 | 0);
                                            HEAP8[$1374 >> 0] = $1373;
                                            $1375 = $1369 >>> 8;
                                            $1376 = $1375 & 255;
                                            $$sroa$6907$0$$sroa$6907$16$11592031 = HEAP32[$6 >> 2] | 0;
                                            $1377 = ((($$sroa$6907$0$$sroa$6907$16$11592031)) + 2 | 0);
                                            HEAP8[$1377 >> 0] = $1376;
                                            $1378 = $1369 & 255;
                                            $$sroa$6907$0$$sroa$6907$16$11792032 = HEAP32[$6 >> 2] | 0;
                                            $1379 = ((($$sroa$6907$0$$sroa$6907$16$11792032)) + 3 | 0);
                                            HEAP8[$1379 >> 0] = $1378;
                                            $$sroa$6907$0$$sroa$6907$16$11662033 = HEAP32[$6 >> 2] | 0;
                                            $1380 = ((($$sroa$6907$0$$sroa$6907$16$11662033)) + 4 | 0);
                                            $1381 = $1380;
                                            HEAP32[$6 >> 2] = $1381;
                                            $1382 = ($1366 | 0) != (0);
                                            $1383 = $1382 & 1;
                                            $1384 = (32 - ($1366)) | 0;
                                            $$sroa$336$47 = $1383; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $1380; $$sroa$6907$0$$sroa$6907$16$100119232342 = $1380; $$sroa$6907$0$$sroa$6907$16$100619792466 = $1380; $$sroa$6907$0$$sroa$6907$16$100919332391 = $1380; $$sroa$6907$0$$sroa$6907$16$101619532527 = $1380; $$sroa$6907$0$$sroa$6907$16$102319742506 = $1380; $$sroa$6907$0$$sroa$6907$16$102619582570 = $1380; $$sroa$6907$0$$sroa$6907$16$103019382410 = $1380; $$sroa$6907$0$$sroa$6907$16$103319892358 = $1380; $$sroa$6907$0$$sroa$6907$16$103919482486 = $1380; $$sroa$6907$0$$sroa$6907$16$104219842428 = $1380; $$sroa$6907$0$$sroa$6907$16$106519992302 = $1380; $$sroa$6907$0$$sroa$6907$16$106919132290 = $1380; $$sroa$6907$0$$sroa$6907$16$107419082278 = $1380; $$sroa$6907$0$$sroa$6907$16$109520142214 = $1380; $$sroa$6907$0$$sroa$6907$16$110419942328 = $1380; $$sroa$6907$0$$sroa$6907$16$111020092205 = $1380; $$sroa$6907$0$$sroa$6907$16$114920242232 = $1380; $$sroa$6907$0$$sroa$6907$16$115420192223 = $1380; $$sroa$6907$0$$sroa$6907$16$116519182315 = $1380; $$sroa$6907$0$$sroa$6907$16$116820042267 = $1380; $$sroa$6907$0$$sroa$6907$16$117319032257 = $1380; $$sroa$6907$0$$sroa$6907$16$117720292241 = $1380; $$sroa$6907$0$$sroa$6907$16$97819282374 = $1380; $$sroa$6907$0$$sroa$6907$16$98619692548 = $1380; $$sroa$6907$0$$sroa$6907$16$99219432447 = $1380; $$sroa$6907$0$$sroa$6907$16$99819632593 = $1380; $$sroa$771$14 = $1384;
                                            break;
                                        }
                                    } else {
                                        $1385 = ($1359 << 24 >> 24) > (0);
                                        if ($1385) {
                                            $1386 = $1360 << 1;
                                            $1387 = (($1386) + -1) | 0;
                                            $1388 = ($1387 >>> 0) < (256);
                                            if ($1388) {
                                                $1389 = (8136 + ($1387 << 2) | 0);
                                                $1390 = HEAP32[$1389 >> 2] | 0;
                                                $1391 = ($$sroa$771$112124 | 0) > ($1390 | 0);
                                                if ($1391) {
                                                    $1392 = $$sroa$336$392125 << $1390;
                                                    $1393 = $1392 | $1386;
                                                    $1394 = (($$sroa$771$112124) - ($1390)) | 0;
                                                    $$sroa$336$47 = $1393; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682615; $$sroa$6907$0$$sroa$6907$16$100119232342 = $$sroa$6907$0$$sroa$6907$16$100119232341; $$sroa$6907$0$$sroa$6907$16$100619792466 = $$sroa$6907$0$$sroa$6907$16$100619792465; $$sroa$6907$0$$sroa$6907$16$100919332391 = $$sroa$6907$0$$sroa$6907$16$100919332390; $$sroa$6907$0$$sroa$6907$16$101619532527 = $$sroa$6907$0$$sroa$6907$16$101619532526; $$sroa$6907$0$$sroa$6907$16$102319742506 = $$sroa$6907$0$$sroa$6907$16$102319742505; $$sroa$6907$0$$sroa$6907$16$102619582570 = $$sroa$6907$0$$sroa$6907$16$102619582569; $$sroa$6907$0$$sroa$6907$16$103019382410 = $$sroa$6907$0$$sroa$6907$16$103019382409; $$sroa$6907$0$$sroa$6907$16$103319892358 = $$sroa$6907$0$$sroa$6907$16$103319892357; $$sroa$6907$0$$sroa$6907$16$103919482486 = $$sroa$6907$0$$sroa$6907$16$103919482485; $$sroa$6907$0$$sroa$6907$16$104219842428 = $$sroa$6907$0$$sroa$6907$16$104219842427; $$sroa$6907$0$$sroa$6907$16$106519992302 = $$sroa$6907$0$$sroa$6907$16$106519992301; $$sroa$6907$0$$sroa$6907$16$106919132290 = $$sroa$6907$0$$sroa$6907$16$106919132289; $$sroa$6907$0$$sroa$6907$16$107419082278 = $$sroa$6907$0$$sroa$6907$16$107419082277; $$sroa$6907$0$$sroa$6907$16$109520142214 = $$sroa$6907$0$$sroa$6907$16$10952014; $$sroa$6907$0$$sroa$6907$16$110419942328 = $$sroa$6907$0$$sroa$6907$16$110419942327; $$sroa$6907$0$$sroa$6907$16$111020092205 = $$sroa$6907$0$$sroa$6907$16$11102009; $$sroa$6907$0$$sroa$6907$16$114920242232 = $$sroa$6907$0$$sroa$6907$16$11492024; $$sroa$6907$0$$sroa$6907$16$115420192223 = $$sroa$6907$0$$sroa$6907$16$11542019; $$sroa$6907$0$$sroa$6907$16$116519182315 = $$sroa$6907$0$$sroa$6907$16$116519182314; $$sroa$6907$0$$sroa$6907$16$116820042267 = $$sroa$6907$0$$sroa$6907$16$116820042266; $$sroa$6907$0$$sroa$6907$16$117319032257 = $$sroa$6907$0$$sroa$6907$16$117319032256; $$sroa$6907$0$$sroa$6907$16$117720292241 = $$sroa$6907$0$$sroa$6907$16$11772029; $$sroa$6907$0$$sroa$6907$16$97819282374 = $$sroa$6907$0$$sroa$6907$16$97819282373; $$sroa$6907$0$$sroa$6907$16$98619692548 = $$sroa$6907$0$$sroa$6907$16$98619692547; $$sroa$6907$0$$sroa$6907$16$99219432447 = $$sroa$6907$0$$sroa$6907$16$99219432446; $$sroa$6907$0$$sroa$6907$16$99819632593 = $$sroa$6907$0$$sroa$6907$16$99819632592; $$sroa$771$14 = $1394;
                                                    break;
                                                } else {
                                                    $1395 = (($1390) - ($$sroa$771$112124)) | 0;
                                                    $1396 = $$sroa$336$392125 << $$sroa$771$112124;
                                                    $1397 = $1386 >>> $1395;
                                                    $1398 = $1397 | $1396;
                                                    $1399 = $1398 >>> 24;
                                                    $1400 = $1399 & 255;
                                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$11492024 >> 0] = $1400;
                                                    $1401 = $1398 >>> 16;
                                                    $1402 = $1401 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11502025 = HEAP32[$6 >> 2] | 0;
                                                    $1403 = ((($$sroa$6907$0$$sroa$6907$16$11502025)) + 1 | 0);
                                                    HEAP8[$1403 >> 0] = $1402;
                                                    $1404 = $1398 >>> 8;
                                                    $1405 = $1404 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11512026 = HEAP32[$6 >> 2] | 0;
                                                    $1406 = ((($$sroa$6907$0$$sroa$6907$16$11512026)) + 2 | 0);
                                                    HEAP8[$1406 >> 0] = $1405;
                                                    $1407 = $1398 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11522027 = HEAP32[$6 >> 2] | 0;
                                                    $1408 = ((($$sroa$6907$0$$sroa$6907$16$11522027)) + 3 | 0);
                                                    HEAP8[$1408 >> 0] = $1407;
                                                    $$sroa$6907$0$$sroa$6907$16$11532028 = HEAP32[$6 >> 2] | 0;
                                                    $1409 = ((($$sroa$6907$0$$sroa$6907$16$11532028)) + 4 | 0);
                                                    $1410 = $1409;
                                                    HEAP32[$6 >> 2] = $1410;
                                                    $1411 = 1 << $1395;
                                                    $1412 = (($1411) + -1) | 0;
                                                    $1413 = $1412 & $1386;
                                                    $1414 = (32 - ($1395)) | 0;
                                                    $$sroa$336$47 = $1413; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $1409; $$sroa$6907$0$$sroa$6907$16$100119232342 = $1409; $$sroa$6907$0$$sroa$6907$16$100619792466 = $1409; $$sroa$6907$0$$sroa$6907$16$100919332391 = $1409; $$sroa$6907$0$$sroa$6907$16$101619532527 = $1409; $$sroa$6907$0$$sroa$6907$16$102319742506 = $1409; $$sroa$6907$0$$sroa$6907$16$102619582570 = $1409; $$sroa$6907$0$$sroa$6907$16$103019382410 = $1409; $$sroa$6907$0$$sroa$6907$16$103319892358 = $1409; $$sroa$6907$0$$sroa$6907$16$103919482486 = $1409; $$sroa$6907$0$$sroa$6907$16$104219842428 = $1409; $$sroa$6907$0$$sroa$6907$16$106519992302 = $1409; $$sroa$6907$0$$sroa$6907$16$106919132290 = $1409; $$sroa$6907$0$$sroa$6907$16$107419082278 = $1409; $$sroa$6907$0$$sroa$6907$16$109520142214 = $1409; $$sroa$6907$0$$sroa$6907$16$110419942328 = $1409; $$sroa$6907$0$$sroa$6907$16$111020092205 = $1409; $$sroa$6907$0$$sroa$6907$16$114920242232 = $1409; $$sroa$6907$0$$sroa$6907$16$115420192223 = $1409; $$sroa$6907$0$$sroa$6907$16$116519182315 = $1409; $$sroa$6907$0$$sroa$6907$16$116820042267 = $1409; $$sroa$6907$0$$sroa$6907$16$117319032257 = $1409; $$sroa$6907$0$$sroa$6907$16$117720292241 = $1409; $$sroa$6907$0$$sroa$6907$16$97819282374 = $1409; $$sroa$6907$0$$sroa$6907$16$98619692548 = $1409; $$sroa$6907$0$$sroa$6907$16$99219432447 = $1409; $$sroa$6907$0$$sroa$6907$16$99819632593 = $1409; $$sroa$771$14 = $1414;
                                                    break;
                                                }
                                            } else {
                                                $1415 = ($1386 >>> 0) > (65535);
                                                $1416 = $1360 >>> 15;
                                                $1417 = $1416 & 65535;
                                                $$$i741 = $1415 ? $1417 : $1386;
                                                $$2$i742 = $1415 ? 16 : 0;
                                                $1418 = $$$i741 & 65280;
                                                $1419 = ($1418 | 0) == (0);
                                                $1420 = $$$i741 >>> 8;
                                                $1421 = $$2$i742 | 8;
                                                $$119$i743 = $1419 ? $$$i741 : $1420;
                                                $$1$i744 = $1419 ? $$2$i742 : $1421;
                                                $1422 = (($$119$i743) + -1) | 0;
                                                $1423 = (8136 + ($1422 << 2) | 0);
                                                $1424 = HEAP32[$1423 >> 2] | 0;
                                                $1425 = $$1$i744 << 1;
                                                $1426 = (($1424) + ($1425)) | 0;
                                                $1427 = $1426 | 1;
                                                $1428 = ($$sroa$771$112124 | 0) > ($1427 | 0);
                                                if ($1428) {
                                                    $1429 = $$sroa$336$392125 << $1427;
                                                    $1430 = $1429 | $1386;
                                                    $1431 = (($$sroa$771$112124) - ($1427)) | 0;
                                                    $$sroa$336$47 = $1430; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682615; $$sroa$6907$0$$sroa$6907$16$100119232342 = $$sroa$6907$0$$sroa$6907$16$100119232341; $$sroa$6907$0$$sroa$6907$16$100619792466 = $$sroa$6907$0$$sroa$6907$16$100619792465; $$sroa$6907$0$$sroa$6907$16$100919332391 = $$sroa$6907$0$$sroa$6907$16$100919332390; $$sroa$6907$0$$sroa$6907$16$101619532527 = $$sroa$6907$0$$sroa$6907$16$101619532526; $$sroa$6907$0$$sroa$6907$16$102319742506 = $$sroa$6907$0$$sroa$6907$16$102319742505; $$sroa$6907$0$$sroa$6907$16$102619582570 = $$sroa$6907$0$$sroa$6907$16$102619582569; $$sroa$6907$0$$sroa$6907$16$103019382410 = $$sroa$6907$0$$sroa$6907$16$103019382409; $$sroa$6907$0$$sroa$6907$16$103319892358 = $$sroa$6907$0$$sroa$6907$16$103319892357; $$sroa$6907$0$$sroa$6907$16$103919482486 = $$sroa$6907$0$$sroa$6907$16$103919482485; $$sroa$6907$0$$sroa$6907$16$104219842428 = $$sroa$6907$0$$sroa$6907$16$104219842427; $$sroa$6907$0$$sroa$6907$16$106519992302 = $$sroa$6907$0$$sroa$6907$16$106519992301; $$sroa$6907$0$$sroa$6907$16$106919132290 = $$sroa$6907$0$$sroa$6907$16$106919132289; $$sroa$6907$0$$sroa$6907$16$107419082278 = $$sroa$6907$0$$sroa$6907$16$107419082277; $$sroa$6907$0$$sroa$6907$16$109520142214 = $$sroa$6907$0$$sroa$6907$16$10952014; $$sroa$6907$0$$sroa$6907$16$110419942328 = $$sroa$6907$0$$sroa$6907$16$110419942327; $$sroa$6907$0$$sroa$6907$16$111020092205 = $$sroa$6907$0$$sroa$6907$16$11102009; $$sroa$6907$0$$sroa$6907$16$114920242232 = $$sroa$6907$0$$sroa$6907$16$11492024; $$sroa$6907$0$$sroa$6907$16$115420192223 = $$sroa$6907$0$$sroa$6907$16$11542019; $$sroa$6907$0$$sroa$6907$16$116519182315 = $$sroa$6907$0$$sroa$6907$16$116519182314; $$sroa$6907$0$$sroa$6907$16$116820042267 = $$sroa$6907$0$$sroa$6907$16$116820042266; $$sroa$6907$0$$sroa$6907$16$117319032257 = $$sroa$6907$0$$sroa$6907$16$117319032256; $$sroa$6907$0$$sroa$6907$16$117720292241 = $$sroa$6907$0$$sroa$6907$16$11772029; $$sroa$6907$0$$sroa$6907$16$97819282374 = $$sroa$6907$0$$sroa$6907$16$97819282373; $$sroa$6907$0$$sroa$6907$16$98619692548 = $$sroa$6907$0$$sroa$6907$16$98619692547; $$sroa$6907$0$$sroa$6907$16$99219432447 = $$sroa$6907$0$$sroa$6907$16$99219432446; $$sroa$6907$0$$sroa$6907$16$99819632593 = $$sroa$6907$0$$sroa$6907$16$99819632592; $$sroa$771$14 = $1431;
                                                    break;
                                                } else {
                                                    $1432 = (($1427) - ($$sroa$771$112124)) | 0;
                                                    $1433 = $$sroa$336$392125 << $$sroa$771$112124;
                                                    $1434 = $1386 >>> $1432;
                                                    $1435 = $1434 | $1433;
                                                    $1436 = $1435 >>> 24;
                                                    $1437 = $1436 & 255;
                                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$11542019 >> 0] = $1437;
                                                    $1438 = $1435 >>> 16;
                                                    $1439 = $1438 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11552020 = HEAP32[$6 >> 2] | 0;
                                                    $1440 = ((($$sroa$6907$0$$sroa$6907$16$11552020)) + 1 | 0);
                                                    HEAP8[$1440 >> 0] = $1439;
                                                    $1441 = $1435 >>> 8;
                                                    $1442 = $1441 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11562021 = HEAP32[$6 >> 2] | 0;
                                                    $1443 = ((($$sroa$6907$0$$sroa$6907$16$11562021)) + 2 | 0);
                                                    HEAP8[$1443 >> 0] = $1442;
                                                    $1444 = $1435 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11572022 = HEAP32[$6 >> 2] | 0;
                                                    $1445 = ((($$sroa$6907$0$$sroa$6907$16$11572022)) + 3 | 0);
                                                    HEAP8[$1445 >> 0] = $1444;
                                                    $$sroa$6907$0$$sroa$6907$16$11482023 = HEAP32[$6 >> 2] | 0;
                                                    $1446 = ((($$sroa$6907$0$$sroa$6907$16$11482023)) + 4 | 0);
                                                    $1447 = $1446;
                                                    HEAP32[$6 >> 2] = $1447;
                                                    $1448 = 1 << $1432;
                                                    $1449 = (($1448) + -1) | 0;
                                                    $1450 = $1449 & $1386;
                                                    $1451 = (32 - ($1432)) | 0;
                                                    $$sroa$336$47 = $1450; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $1446; $$sroa$6907$0$$sroa$6907$16$100119232342 = $1446; $$sroa$6907$0$$sroa$6907$16$100619792466 = $1446; $$sroa$6907$0$$sroa$6907$16$100919332391 = $1446; $$sroa$6907$0$$sroa$6907$16$101619532527 = $1446; $$sroa$6907$0$$sroa$6907$16$102319742506 = $1446; $$sroa$6907$0$$sroa$6907$16$102619582570 = $1446; $$sroa$6907$0$$sroa$6907$16$103019382410 = $1446; $$sroa$6907$0$$sroa$6907$16$103319892358 = $1446; $$sroa$6907$0$$sroa$6907$16$103919482486 = $1446; $$sroa$6907$0$$sroa$6907$16$104219842428 = $1446; $$sroa$6907$0$$sroa$6907$16$106519992302 = $1446; $$sroa$6907$0$$sroa$6907$16$106919132290 = $1446; $$sroa$6907$0$$sroa$6907$16$107419082278 = $1446; $$sroa$6907$0$$sroa$6907$16$109520142214 = $1446; $$sroa$6907$0$$sroa$6907$16$110419942328 = $1446; $$sroa$6907$0$$sroa$6907$16$111020092205 = $1446; $$sroa$6907$0$$sroa$6907$16$114920242232 = $1446; $$sroa$6907$0$$sroa$6907$16$115420192223 = $1446; $$sroa$6907$0$$sroa$6907$16$116519182315 = $1446; $$sroa$6907$0$$sroa$6907$16$116820042267 = $1446; $$sroa$6907$0$$sroa$6907$16$117319032257 = $1446; $$sroa$6907$0$$sroa$6907$16$117720292241 = $1446; $$sroa$6907$0$$sroa$6907$16$97819282374 = $1446; $$sroa$6907$0$$sroa$6907$16$98619692548 = $1446; $$sroa$6907$0$$sroa$6907$16$99219432447 = $1446; $$sroa$6907$0$$sroa$6907$16$99819632593 = $1446; $$sroa$771$14 = $1451;
                                                    break;
                                                }
                                            }
                                        } else {
                                            $1452 = (0 - ($1360)) | 0;
                                            $1453 = $1452 << 1;
                                            $1454 = $1453 | 1;
                                            $1455 = ($1453 >>> 0) < (256);
                                            if ($1455) {
                                                $1456 = (8136 + ($1453 << 2) | 0);
                                                $1457 = HEAP32[$1456 >> 2] | 0;
                                                $1458 = ($$sroa$771$112124 | 0) > ($1457 | 0);
                                                if ($1458) {
                                                    $1459 = $$sroa$336$392125 << $1457;
                                                    $1460 = $1459 | $1454;
                                                    $1461 = (($$sroa$771$112124) - ($1457)) | 0;
                                                    $$sroa$336$47 = $1460; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682615; $$sroa$6907$0$$sroa$6907$16$100119232342 = $$sroa$6907$0$$sroa$6907$16$100119232341; $$sroa$6907$0$$sroa$6907$16$100619792466 = $$sroa$6907$0$$sroa$6907$16$100619792465; $$sroa$6907$0$$sroa$6907$16$100919332391 = $$sroa$6907$0$$sroa$6907$16$100919332390; $$sroa$6907$0$$sroa$6907$16$101619532527 = $$sroa$6907$0$$sroa$6907$16$101619532526; $$sroa$6907$0$$sroa$6907$16$102319742506 = $$sroa$6907$0$$sroa$6907$16$102319742505; $$sroa$6907$0$$sroa$6907$16$102619582570 = $$sroa$6907$0$$sroa$6907$16$102619582569; $$sroa$6907$0$$sroa$6907$16$103019382410 = $$sroa$6907$0$$sroa$6907$16$103019382409; $$sroa$6907$0$$sroa$6907$16$103319892358 = $$sroa$6907$0$$sroa$6907$16$103319892357; $$sroa$6907$0$$sroa$6907$16$103919482486 = $$sroa$6907$0$$sroa$6907$16$103919482485; $$sroa$6907$0$$sroa$6907$16$104219842428 = $$sroa$6907$0$$sroa$6907$16$104219842427; $$sroa$6907$0$$sroa$6907$16$106519992302 = $$sroa$6907$0$$sroa$6907$16$106519992301; $$sroa$6907$0$$sroa$6907$16$106919132290 = $$sroa$6907$0$$sroa$6907$16$106919132289; $$sroa$6907$0$$sroa$6907$16$107419082278 = $$sroa$6907$0$$sroa$6907$16$107419082277; $$sroa$6907$0$$sroa$6907$16$109520142214 = $$sroa$6907$0$$sroa$6907$16$10952014; $$sroa$6907$0$$sroa$6907$16$110419942328 = $$sroa$6907$0$$sroa$6907$16$110419942327; $$sroa$6907$0$$sroa$6907$16$111020092205 = $$sroa$6907$0$$sroa$6907$16$11102009; $$sroa$6907$0$$sroa$6907$16$114920242232 = $$sroa$6907$0$$sroa$6907$16$11492024; $$sroa$6907$0$$sroa$6907$16$115420192223 = $$sroa$6907$0$$sroa$6907$16$11542019; $$sroa$6907$0$$sroa$6907$16$116519182315 = $$sroa$6907$0$$sroa$6907$16$116519182314; $$sroa$6907$0$$sroa$6907$16$116820042267 = $$sroa$6907$0$$sroa$6907$16$116820042266; $$sroa$6907$0$$sroa$6907$16$117319032257 = $$sroa$6907$0$$sroa$6907$16$117319032256; $$sroa$6907$0$$sroa$6907$16$117720292241 = $$sroa$6907$0$$sroa$6907$16$11772029; $$sroa$6907$0$$sroa$6907$16$97819282374 = $$sroa$6907$0$$sroa$6907$16$97819282373; $$sroa$6907$0$$sroa$6907$16$98619692548 = $$sroa$6907$0$$sroa$6907$16$98619692547; $$sroa$6907$0$$sroa$6907$16$99219432447 = $$sroa$6907$0$$sroa$6907$16$99219432446; $$sroa$6907$0$$sroa$6907$16$99819632593 = $$sroa$6907$0$$sroa$6907$16$99819632592; $$sroa$771$14 = $1461;
                                                    break;
                                                } else {
                                                    $1462 = (($1457) - ($$sroa$771$112124)) | 0;
                                                    $1463 = $$sroa$336$392125 << $$sroa$771$112124;
                                                    $1464 = $1454 >>> $1462;
                                                    $1465 = $1464 | $1463;
                                                    $1466 = $1465 >>> 24;
                                                    $1467 = $1466 & 255;
                                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10952014 >> 0] = $1467;
                                                    $1468 = $1465 >>> 16;
                                                    $1469 = $1468 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11062015 = HEAP32[$6 >> 2] | 0;
                                                    $1470 = ((($$sroa$6907$0$$sroa$6907$16$11062015)) + 1 | 0);
                                                    HEAP8[$1470 >> 0] = $1469;
                                                    $1471 = $1465 >>> 8;
                                                    $1472 = $1471 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11072016 = HEAP32[$6 >> 2] | 0;
                                                    $1473 = ((($$sroa$6907$0$$sroa$6907$16$11072016)) + 2 | 0);
                                                    HEAP8[$1473 >> 0] = $1472;
                                                    $1474 = $1465 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11082017 = HEAP32[$6 >> 2] | 0;
                                                    $1475 = ((($$sroa$6907$0$$sroa$6907$16$11082017)) + 3 | 0);
                                                    HEAP8[$1475 >> 0] = $1474;
                                                    $$sroa$6907$0$$sroa$6907$16$11092018 = HEAP32[$6 >> 2] | 0;
                                                    $1476 = ((($$sroa$6907$0$$sroa$6907$16$11092018)) + 4 | 0);
                                                    $1477 = $1476;
                                                    HEAP32[$6 >> 2] = $1477;
                                                    $1478 = 1 << $1462;
                                                    $1479 = (($1478) + -1) | 0;
                                                    $1480 = $1479 & $1454;
                                                    $1481 = (32 - ($1462)) | 0;
                                                    $$sroa$336$47 = $1480; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $1476; $$sroa$6907$0$$sroa$6907$16$100119232342 = $1476; $$sroa$6907$0$$sroa$6907$16$100619792466 = $1476; $$sroa$6907$0$$sroa$6907$16$100919332391 = $1476; $$sroa$6907$0$$sroa$6907$16$101619532527 = $1476; $$sroa$6907$0$$sroa$6907$16$102319742506 = $1476; $$sroa$6907$0$$sroa$6907$16$102619582570 = $1476; $$sroa$6907$0$$sroa$6907$16$103019382410 = $1476; $$sroa$6907$0$$sroa$6907$16$103319892358 = $1476; $$sroa$6907$0$$sroa$6907$16$103919482486 = $1476; $$sroa$6907$0$$sroa$6907$16$104219842428 = $1476; $$sroa$6907$0$$sroa$6907$16$106519992302 = $1476; $$sroa$6907$0$$sroa$6907$16$106919132290 = $1476; $$sroa$6907$0$$sroa$6907$16$107419082278 = $1476; $$sroa$6907$0$$sroa$6907$16$109520142214 = $1476; $$sroa$6907$0$$sroa$6907$16$110419942328 = $1476; $$sroa$6907$0$$sroa$6907$16$111020092205 = $1476; $$sroa$6907$0$$sroa$6907$16$114920242232 = $1476; $$sroa$6907$0$$sroa$6907$16$115420192223 = $1476; $$sroa$6907$0$$sroa$6907$16$116519182315 = $1476; $$sroa$6907$0$$sroa$6907$16$116820042267 = $1476; $$sroa$6907$0$$sroa$6907$16$117319032257 = $1476; $$sroa$6907$0$$sroa$6907$16$117720292241 = $1476; $$sroa$6907$0$$sroa$6907$16$97819282374 = $1476; $$sroa$6907$0$$sroa$6907$16$98619692548 = $1476; $$sroa$6907$0$$sroa$6907$16$99219432447 = $1476; $$sroa$6907$0$$sroa$6907$16$99819632593 = $1476; $$sroa$771$14 = $1481;
                                                    break;
                                                }
                                            } else {
                                                $1482 = ($1454 >>> 0) > (65535);
                                                $1483 = $1452 >>> 15;
                                                $1484 = $1483 & 65535;
                                                $$$i750 = $1482 ? $1484 : $1454;
                                                $$2$i751 = $1482 ? 16 : 0;
                                                $1485 = $$$i750 & 65280;
                                                $1486 = ($1485 | 0) == (0);
                                                $1487 = $$$i750 >>> 8;
                                                $1488 = $$2$i751 | 8;
                                                $$119$i752 = $1486 ? $$$i750 : $1487;
                                                $$1$i753 = $1486 ? $$2$i751 : $1488;
                                                $1489 = (($$119$i752) + -1) | 0;
                                                $1490 = (8136 + ($1489 << 2) | 0);
                                                $1491 = HEAP32[$1490 >> 2] | 0;
                                                $1492 = $$1$i753 << 1;
                                                $1493 = (($1491) + ($1492)) | 0;
                                                $1494 = $1493 | 1;
                                                $1495 = ($$sroa$771$112124 | 0) > ($1494 | 0);
                                                if ($1495) {
                                                    $1496 = $$sroa$336$392125 << $1494;
                                                    $1497 = $1496 | $1454;
                                                    $1498 = (($$sroa$771$112124) - ($1494)) | 0;
                                                    $$sroa$336$47 = $1497; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682615; $$sroa$6907$0$$sroa$6907$16$100119232342 = $$sroa$6907$0$$sroa$6907$16$100119232341; $$sroa$6907$0$$sroa$6907$16$100619792466 = $$sroa$6907$0$$sroa$6907$16$100619792465; $$sroa$6907$0$$sroa$6907$16$100919332391 = $$sroa$6907$0$$sroa$6907$16$100919332390; $$sroa$6907$0$$sroa$6907$16$101619532527 = $$sroa$6907$0$$sroa$6907$16$101619532526; $$sroa$6907$0$$sroa$6907$16$102319742506 = $$sroa$6907$0$$sroa$6907$16$102319742505; $$sroa$6907$0$$sroa$6907$16$102619582570 = $$sroa$6907$0$$sroa$6907$16$102619582569; $$sroa$6907$0$$sroa$6907$16$103019382410 = $$sroa$6907$0$$sroa$6907$16$103019382409; $$sroa$6907$0$$sroa$6907$16$103319892358 = $$sroa$6907$0$$sroa$6907$16$103319892357; $$sroa$6907$0$$sroa$6907$16$103919482486 = $$sroa$6907$0$$sroa$6907$16$103919482485; $$sroa$6907$0$$sroa$6907$16$104219842428 = $$sroa$6907$0$$sroa$6907$16$104219842427; $$sroa$6907$0$$sroa$6907$16$106519992302 = $$sroa$6907$0$$sroa$6907$16$106519992301; $$sroa$6907$0$$sroa$6907$16$106919132290 = $$sroa$6907$0$$sroa$6907$16$106919132289; $$sroa$6907$0$$sroa$6907$16$107419082278 = $$sroa$6907$0$$sroa$6907$16$107419082277; $$sroa$6907$0$$sroa$6907$16$109520142214 = $$sroa$6907$0$$sroa$6907$16$10952014; $$sroa$6907$0$$sroa$6907$16$110419942328 = $$sroa$6907$0$$sroa$6907$16$110419942327; $$sroa$6907$0$$sroa$6907$16$111020092205 = $$sroa$6907$0$$sroa$6907$16$11102009; $$sroa$6907$0$$sroa$6907$16$114920242232 = $$sroa$6907$0$$sroa$6907$16$11492024; $$sroa$6907$0$$sroa$6907$16$115420192223 = $$sroa$6907$0$$sroa$6907$16$11542019; $$sroa$6907$0$$sroa$6907$16$116519182315 = $$sroa$6907$0$$sroa$6907$16$116519182314; $$sroa$6907$0$$sroa$6907$16$116820042267 = $$sroa$6907$0$$sroa$6907$16$116820042266; $$sroa$6907$0$$sroa$6907$16$117319032257 = $$sroa$6907$0$$sroa$6907$16$117319032256; $$sroa$6907$0$$sroa$6907$16$117720292241 = $$sroa$6907$0$$sroa$6907$16$11772029; $$sroa$6907$0$$sroa$6907$16$97819282374 = $$sroa$6907$0$$sroa$6907$16$97819282373; $$sroa$6907$0$$sroa$6907$16$98619692548 = $$sroa$6907$0$$sroa$6907$16$98619692547; $$sroa$6907$0$$sroa$6907$16$99219432447 = $$sroa$6907$0$$sroa$6907$16$99219432446; $$sroa$6907$0$$sroa$6907$16$99819632593 = $$sroa$6907$0$$sroa$6907$16$99819632592; $$sroa$771$14 = $1498;
                                                    break;
                                                } else {
                                                    $1499 = (($1494) - ($$sroa$771$112124)) | 0;
                                                    $1500 = $$sroa$336$392125 << $$sroa$771$112124;
                                                    $1501 = $1454 >>> $1499;
                                                    $1502 = $1501 | $1500;
                                                    $1503 = $1502 >>> 24;
                                                    $1504 = $1503 & 255;
                                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$11102009 >> 0] = $1504;
                                                    $1505 = $1502 >>> 16;
                                                    $1506 = $1505 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11112010 = HEAP32[$6 >> 2] | 0;
                                                    $1507 = ((($$sroa$6907$0$$sroa$6907$16$11112010)) + 1 | 0);
                                                    HEAP8[$1507 >> 0] = $1506;
                                                    $1508 = $1502 >>> 8;
                                                    $1509 = $1508 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$11122011 = HEAP32[$6 >> 2] | 0;
                                                    $1510 = ((($$sroa$6907$0$$sroa$6907$16$11122011)) + 2 | 0);
                                                    HEAP8[$1510 >> 0] = $1509;
                                                    $1511 = $1502 & 255;
                                                    $$sroa$6907$0$$sroa$6907$16$10882012 = HEAP32[$6 >> 2] | 0;
                                                    $1512 = ((($$sroa$6907$0$$sroa$6907$16$10882012)) + 3 | 0);
                                                    HEAP8[$1512 >> 0] = $1511;
                                                    $$sroa$6907$0$$sroa$6907$16$10792013 = HEAP32[$6 >> 2] | 0;
                                                    $1513 = ((($$sroa$6907$0$$sroa$6907$16$10792013)) + 4 | 0);
                                                    $1514 = $1513;
                                                    HEAP32[$6 >> 2] = $1514;
                                                    $1515 = 1 << $1499;
                                                    $1516 = (($1515) + -1) | 0;
                                                    $1517 = $1516 & $1454;
                                                    $1518 = (32 - ($1499)) | 0;
                                                    $$sroa$336$47 = $1517; $$sroa$6907$0$$sroa$6907$16$$pre$i19682616 = $1513; $$sroa$6907$0$$sroa$6907$16$100119232342 = $1513; $$sroa$6907$0$$sroa$6907$16$100619792466 = $1513; $$sroa$6907$0$$sroa$6907$16$100919332391 = $1513; $$sroa$6907$0$$sroa$6907$16$101619532527 = $1513; $$sroa$6907$0$$sroa$6907$16$102319742506 = $1513; $$sroa$6907$0$$sroa$6907$16$102619582570 = $1513; $$sroa$6907$0$$sroa$6907$16$103019382410 = $1513; $$sroa$6907$0$$sroa$6907$16$103319892358 = $1513; $$sroa$6907$0$$sroa$6907$16$103919482486 = $1513; $$sroa$6907$0$$sroa$6907$16$104219842428 = $1513; $$sroa$6907$0$$sroa$6907$16$106519992302 = $1513; $$sroa$6907$0$$sroa$6907$16$106919132290 = $1513; $$sroa$6907$0$$sroa$6907$16$107419082278 = $1513; $$sroa$6907$0$$sroa$6907$16$109520142214 = $1513; $$sroa$6907$0$$sroa$6907$16$110419942328 = $1513; $$sroa$6907$0$$sroa$6907$16$111020092205 = $1513; $$sroa$6907$0$$sroa$6907$16$114920242232 = $1513; $$sroa$6907$0$$sroa$6907$16$115420192223 = $1513; $$sroa$6907$0$$sroa$6907$16$116519182315 = $1513; $$sroa$6907$0$$sroa$6907$16$116820042267 = $1513; $$sroa$6907$0$$sroa$6907$16$117319032257 = $1513; $$sroa$6907$0$$sroa$6907$16$117720292241 = $1513; $$sroa$6907$0$$sroa$6907$16$97819282374 = $1513; $$sroa$6907$0$$sroa$6907$16$98619692548 = $1513; $$sroa$6907$0$$sroa$6907$16$99219432447 = $1513; $$sroa$6907$0$$sroa$6907$16$99819632593 = $1513; $$sroa$771$14 = $1518;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                } while (0);
                                $1519 = (($$05742126) + 1) | 0;
                                $1520 = HEAP32[$1290 >> 2] | 0;
                                $1521 = ($1519 | 0) < ($1520 | 0);
                                if ($1521) {
                                    $$05742126 = $1519; $$sroa$336$392125 = $$sroa$336$47; $$sroa$6907$0$$sroa$6907$16$$pre$i19682615 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682616; $$sroa$6907$0$$sroa$6907$16$100119232341 = $$sroa$6907$0$$sroa$6907$16$100119232342; $$sroa$6907$0$$sroa$6907$16$100619792465 = $$sroa$6907$0$$sroa$6907$16$100619792466; $$sroa$6907$0$$sroa$6907$16$100919332390 = $$sroa$6907$0$$sroa$6907$16$100919332391; $$sroa$6907$0$$sroa$6907$16$101619532526 = $$sroa$6907$0$$sroa$6907$16$101619532527; $$sroa$6907$0$$sroa$6907$16$102319742505 = $$sroa$6907$0$$sroa$6907$16$102319742506; $$sroa$6907$0$$sroa$6907$16$102619582569 = $$sroa$6907$0$$sroa$6907$16$102619582570; $$sroa$6907$0$$sroa$6907$16$103019382409 = $$sroa$6907$0$$sroa$6907$16$103019382410; $$sroa$6907$0$$sroa$6907$16$103319892357 = $$sroa$6907$0$$sroa$6907$16$103319892358; $$sroa$6907$0$$sroa$6907$16$103919482485 = $$sroa$6907$0$$sroa$6907$16$103919482486; $$sroa$6907$0$$sroa$6907$16$104219842427 = $$sroa$6907$0$$sroa$6907$16$104219842428; $$sroa$6907$0$$sroa$6907$16$106519992301 = $$sroa$6907$0$$sroa$6907$16$106519992302; $$sroa$6907$0$$sroa$6907$16$106919132289 = $$sroa$6907$0$$sroa$6907$16$106919132290; $$sroa$6907$0$$sroa$6907$16$107419082277 = $$sroa$6907$0$$sroa$6907$16$107419082278; $$sroa$6907$0$$sroa$6907$16$10952014 = $$sroa$6907$0$$sroa$6907$16$109520142214; $$sroa$6907$0$$sroa$6907$16$110419942327 = $$sroa$6907$0$$sroa$6907$16$110419942328; $$sroa$6907$0$$sroa$6907$16$11102009 = $$sroa$6907$0$$sroa$6907$16$111020092205; $$sroa$6907$0$$sroa$6907$16$11492024 = $$sroa$6907$0$$sroa$6907$16$114920242232; $$sroa$6907$0$$sroa$6907$16$11542019 = $$sroa$6907$0$$sroa$6907$16$115420192223; $$sroa$6907$0$$sroa$6907$16$116519182314 = $$sroa$6907$0$$sroa$6907$16$116519182315; $$sroa$6907$0$$sroa$6907$16$116820042266 = $$sroa$6907$0$$sroa$6907$16$116820042267; $$sroa$6907$0$$sroa$6907$16$117319032256 = $$sroa$6907$0$$sroa$6907$16$117319032257; $$sroa$6907$0$$sroa$6907$16$11772029 = $$sroa$6907$0$$sroa$6907$16$117720292241; $$sroa$6907$0$$sroa$6907$16$97819282373 = $$sroa$6907$0$$sroa$6907$16$97819282374; $$sroa$6907$0$$sroa$6907$16$98619692547 = $$sroa$6907$0$$sroa$6907$16$98619692548; $$sroa$6907$0$$sroa$6907$16$99219432446 = $$sroa$6907$0$$sroa$6907$16$99219432447; $$sroa$6907$0$$sroa$6907$16$99819632592 = $$sroa$6907$0$$sroa$6907$16$99819632593; $$sroa$771$112124 = $$sroa$771$14;
                                } else {
                                    $$sroa$336$48 = $$sroa$336$47; $$sroa$6907$0$$sroa$6907$16$$pre$i19682614 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682616; $$sroa$6907$0$$sroa$6907$16$100119232340 = $$sroa$6907$0$$sroa$6907$16$100119232342; $$sroa$6907$0$$sroa$6907$16$100619792464 = $$sroa$6907$0$$sroa$6907$16$100619792466; $$sroa$6907$0$$sroa$6907$16$100919332389 = $$sroa$6907$0$$sroa$6907$16$100919332391; $$sroa$6907$0$$sroa$6907$16$101619532525 = $$sroa$6907$0$$sroa$6907$16$101619532527; $$sroa$6907$0$$sroa$6907$16$102319742504 = $$sroa$6907$0$$sroa$6907$16$102319742506; $$sroa$6907$0$$sroa$6907$16$102619582568 = $$sroa$6907$0$$sroa$6907$16$102619582570; $$sroa$6907$0$$sroa$6907$16$103019382408 = $$sroa$6907$0$$sroa$6907$16$103019382410; $$sroa$6907$0$$sroa$6907$16$103319892356 = $$sroa$6907$0$$sroa$6907$16$103319892358; $$sroa$6907$0$$sroa$6907$16$103919482484 = $$sroa$6907$0$$sroa$6907$16$103919482486; $$sroa$6907$0$$sroa$6907$16$104219842426 = $$sroa$6907$0$$sroa$6907$16$104219842428; $$sroa$6907$0$$sroa$6907$16$106519992300 = $$sroa$6907$0$$sroa$6907$16$106519992302; $$sroa$6907$0$$sroa$6907$16$106919132288 = $$sroa$6907$0$$sroa$6907$16$106919132290; $$sroa$6907$0$$sroa$6907$16$107419082276 = $$sroa$6907$0$$sroa$6907$16$107419082278; $$sroa$6907$0$$sroa$6907$16$110419942326 = $$sroa$6907$0$$sroa$6907$16$110419942328; $$sroa$6907$0$$sroa$6907$16$116519182313 = $$sroa$6907$0$$sroa$6907$16$116519182315; $$sroa$6907$0$$sroa$6907$16$11682004 = $$sroa$6907$0$$sroa$6907$16$116820042267; $$sroa$6907$0$$sroa$6907$16$11731903 = $$sroa$6907$0$$sroa$6907$16$117319032257; $$sroa$6907$0$$sroa$6907$16$97819282372 = $$sroa$6907$0$$sroa$6907$16$97819282374; $$sroa$6907$0$$sroa$6907$16$98619692546 = $$sroa$6907$0$$sroa$6907$16$98619692548; $$sroa$6907$0$$sroa$6907$16$99219432445 = $$sroa$6907$0$$sroa$6907$16$99219432447; $$sroa$6907$0$$sroa$6907$16$99819632591 = $$sroa$6907$0$$sroa$6907$16$99819632593; $$sroa$771$15 = $$sroa$771$14;
                                    break;
                                }
                            }
                            break;
                        }
                        default: {
                            $$sroa$336$48 = $$sroa$336$15; $$sroa$6907$0$$sroa$6907$16$$pre$i19682614 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100119232340 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100619792464 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$100919332389 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$101619532525 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$102319742504 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$102619582568 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103019382408 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103319892356 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$103919482484 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$104219842426 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$106519992300 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$106919132288 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$107419082276 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$110419942326 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$116519182313 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$11682004 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$11731903 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$97819282372 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$98619692546 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$99219432445 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$6907$0$$sroa$6907$16$99819632591 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682621; $$sroa$771$15 = $$sroa$771$2;
                        }
                    }
                } while (0);
                $1522 = HEAP32[$410 >> 2] | 0;
                $1523 = (($1522) + 1) | 0;
                $1524 = ($1522 >>> 0) < (256);
                do {
                    if ($1524) {
                        $1525 = (8136 + ($1522 << 2) | 0);
                        $1526 = HEAP32[$1525 >> 2] | 0;
                        $1527 = ($$sroa$771$15 | 0) > ($1526 | 0);
                        if ($1527) {
                            $1528 = $$sroa$336$48 << $1526;
                            $1529 = $1528 | $1523;
                            $1530 = (($$sroa$771$15) - ($1526)) | 0;
                            $$sroa$336$51 = $1529; $$sroa$6907$0$$sroa$6907$16$$pre$i19682613 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682614; $$sroa$6907$0$$sroa$6907$16$100119232339 = $$sroa$6907$0$$sroa$6907$16$100119232340; $$sroa$6907$0$$sroa$6907$16$100619792463 = $$sroa$6907$0$$sroa$6907$16$100619792464; $$sroa$6907$0$$sroa$6907$16$100919332388 = $$sroa$6907$0$$sroa$6907$16$100919332389; $$sroa$6907$0$$sroa$6907$16$101619532524 = $$sroa$6907$0$$sroa$6907$16$101619532525; $$sroa$6907$0$$sroa$6907$16$102319742503 = $$sroa$6907$0$$sroa$6907$16$102319742504; $$sroa$6907$0$$sroa$6907$16$102619582567 = $$sroa$6907$0$$sroa$6907$16$102619582568; $$sroa$6907$0$$sroa$6907$16$103019382407 = $$sroa$6907$0$$sroa$6907$16$103019382408; $$sroa$6907$0$$sroa$6907$16$103319892355 = $$sroa$6907$0$$sroa$6907$16$103319892356; $$sroa$6907$0$$sroa$6907$16$103919482483 = $$sroa$6907$0$$sroa$6907$16$103919482484; $$sroa$6907$0$$sroa$6907$16$104219842425 = $$sroa$6907$0$$sroa$6907$16$104219842426; $$sroa$6907$0$$sroa$6907$16$106519992299 = $$sroa$6907$0$$sroa$6907$16$106519992300; $$sroa$6907$0$$sroa$6907$16$106919132287 = $$sroa$6907$0$$sroa$6907$16$106919132288; $$sroa$6907$0$$sroa$6907$16$10741908 = $$sroa$6907$0$$sroa$6907$16$107419082276; $$sroa$6907$0$$sroa$6907$16$110419942325 = $$sroa$6907$0$$sroa$6907$16$110419942326; $$sroa$6907$0$$sroa$6907$16$116519182312 = $$sroa$6907$0$$sroa$6907$16$116519182313; $$sroa$6907$0$$sroa$6907$16$97819282371 = $$sroa$6907$0$$sroa$6907$16$97819282372; $$sroa$6907$0$$sroa$6907$16$98619692545 = $$sroa$6907$0$$sroa$6907$16$98619692546; $$sroa$6907$0$$sroa$6907$16$99219432444 = $$sroa$6907$0$$sroa$6907$16$99219432445; $$sroa$6907$0$$sroa$6907$16$99819632590 = $$sroa$6907$0$$sroa$6907$16$99819632591; $$sroa$771$16 = $1530;
                            break;
                        } else {
                            $1531 = (($1526) - ($$sroa$771$15)) | 0;
                            $1532 = $$sroa$336$48 << $$sroa$771$15;
                            $1533 = $1523 >>> $1531;
                            $1534 = $1533 | $1532;
                            $1535 = $1534 >>> 24;
                            $1536 = $1535 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$11682004 >> 0] = $1536;
                            $1537 = $1534 >>> 16;
                            $1538 = $1537 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11692005 = HEAP32[$6 >> 2] | 0;
                            $1539 = ((($$sroa$6907$0$$sroa$6907$16$11692005)) + 1 | 0);
                            HEAP8[$1539 >> 0] = $1538;
                            $1540 = $1534 >>> 8;
                            $1541 = $1540 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11702006 = HEAP32[$6 >> 2] | 0;
                            $1542 = ((($$sroa$6907$0$$sroa$6907$16$11702006)) + 2 | 0);
                            HEAP8[$1542 >> 0] = $1541;
                            $1543 = $1534 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11712007 = HEAP32[$6 >> 2] | 0;
                            $1544 = ((($$sroa$6907$0$$sroa$6907$16$11712007)) + 3 | 0);
                            HEAP8[$1544 >> 0] = $1543;
                            $$sroa$6907$0$$sroa$6907$16$11722008 = HEAP32[$6 >> 2] | 0;
                            $1545 = ((($$sroa$6907$0$$sroa$6907$16$11722008)) + 4 | 0);
                            $1546 = $1545;
                            HEAP32[$6 >> 2] = $1546;
                            $1547 = 1 << $1531;
                            $1548 = (($1547) + -1) | 0;
                            $1549 = $1548 & $1523;
                            $1550 = (32 - ($1531)) | 0;
                            $$sroa$336$51 = $1549; $$sroa$6907$0$$sroa$6907$16$$pre$i19682613 = $1545; $$sroa$6907$0$$sroa$6907$16$100119232339 = $1545; $$sroa$6907$0$$sroa$6907$16$100619792463 = $1545; $$sroa$6907$0$$sroa$6907$16$100919332388 = $1545; $$sroa$6907$0$$sroa$6907$16$101619532524 = $1545; $$sroa$6907$0$$sroa$6907$16$102319742503 = $1545; $$sroa$6907$0$$sroa$6907$16$102619582567 = $1545; $$sroa$6907$0$$sroa$6907$16$103019382407 = $1545; $$sroa$6907$0$$sroa$6907$16$103319892355 = $1545; $$sroa$6907$0$$sroa$6907$16$103919482483 = $1545; $$sroa$6907$0$$sroa$6907$16$104219842425 = $1545; $$sroa$6907$0$$sroa$6907$16$106519992299 = $1545; $$sroa$6907$0$$sroa$6907$16$106919132287 = $1545; $$sroa$6907$0$$sroa$6907$16$10741908 = $1545; $$sroa$6907$0$$sroa$6907$16$110419942325 = $1545; $$sroa$6907$0$$sroa$6907$16$116519182312 = $1545; $$sroa$6907$0$$sroa$6907$16$97819282371 = $1545; $$sroa$6907$0$$sroa$6907$16$98619692545 = $1545; $$sroa$6907$0$$sroa$6907$16$99219432444 = $1545; $$sroa$6907$0$$sroa$6907$16$99819632590 = $1545; $$sroa$771$16 = $1550;
                            break;
                        }
                    } else {
                        $1551 = ($1523 >>> 0) > (65535);
                        $1552 = $1523 >>> 16;
                        $$$i731 = $1551 ? $1552 : $1523;
                        $$2$i732 = $1551 ? 16 : 0;
                        $1553 = $$$i731 & 65280;
                        $1554 = ($1553 | 0) == (0);
                        $1555 = $$$i731 >>> 8;
                        $1556 = $$2$i732 | 8;
                        $$119$i733 = $1554 ? $$$i731 : $1555;
                        $$1$i734 = $1554 ? $$2$i732 : $1556;
                        $1557 = (($$119$i733) + -1) | 0;
                        $1558 = (8136 + ($1557 << 2) | 0);
                        $1559 = HEAP32[$1558 >> 2] | 0;
                        $1560 = $$1$i734 << 1;
                        $1561 = (($1559) + ($1560)) | 0;
                        $1562 = $1561 | 1;
                        $1563 = ($$sroa$771$15 | 0) > ($1562 | 0);
                        if ($1563) {
                            $1564 = $$sroa$336$48 << $1562;
                            $1565 = $1564 | $1523;
                            $1566 = (($$sroa$771$15) - ($1562)) | 0;
                            $$sroa$336$51 = $1565; $$sroa$6907$0$$sroa$6907$16$$pre$i19682613 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682614; $$sroa$6907$0$$sroa$6907$16$100119232339 = $$sroa$6907$0$$sroa$6907$16$100119232340; $$sroa$6907$0$$sroa$6907$16$100619792463 = $$sroa$6907$0$$sroa$6907$16$100619792464; $$sroa$6907$0$$sroa$6907$16$100919332388 = $$sroa$6907$0$$sroa$6907$16$100919332389; $$sroa$6907$0$$sroa$6907$16$101619532524 = $$sroa$6907$0$$sroa$6907$16$101619532525; $$sroa$6907$0$$sroa$6907$16$102319742503 = $$sroa$6907$0$$sroa$6907$16$102319742504; $$sroa$6907$0$$sroa$6907$16$102619582567 = $$sroa$6907$0$$sroa$6907$16$102619582568; $$sroa$6907$0$$sroa$6907$16$103019382407 = $$sroa$6907$0$$sroa$6907$16$103019382408; $$sroa$6907$0$$sroa$6907$16$103319892355 = $$sroa$6907$0$$sroa$6907$16$103319892356; $$sroa$6907$0$$sroa$6907$16$103919482483 = $$sroa$6907$0$$sroa$6907$16$103919482484; $$sroa$6907$0$$sroa$6907$16$104219842425 = $$sroa$6907$0$$sroa$6907$16$104219842426; $$sroa$6907$0$$sroa$6907$16$106519992299 = $$sroa$6907$0$$sroa$6907$16$106519992300; $$sroa$6907$0$$sroa$6907$16$106919132287 = $$sroa$6907$0$$sroa$6907$16$106919132288; $$sroa$6907$0$$sroa$6907$16$10741908 = $$sroa$6907$0$$sroa$6907$16$107419082276; $$sroa$6907$0$$sroa$6907$16$110419942325 = $$sroa$6907$0$$sroa$6907$16$110419942326; $$sroa$6907$0$$sroa$6907$16$116519182312 = $$sroa$6907$0$$sroa$6907$16$116519182313; $$sroa$6907$0$$sroa$6907$16$97819282371 = $$sroa$6907$0$$sroa$6907$16$97819282372; $$sroa$6907$0$$sroa$6907$16$98619692545 = $$sroa$6907$0$$sroa$6907$16$98619692546; $$sroa$6907$0$$sroa$6907$16$99219432444 = $$sroa$6907$0$$sroa$6907$16$99219432445; $$sroa$6907$0$$sroa$6907$16$99819632590 = $$sroa$6907$0$$sroa$6907$16$99819632591; $$sroa$771$16 = $1566;
                            break;
                        } else {
                            $1567 = (($1562) - ($$sroa$771$15)) | 0;
                            $1568 = $$sroa$336$48 << $$sroa$771$15;
                            $1569 = $1523 >>> $1567;
                            $1570 = $1569 | $1568;
                            $1571 = $1570 >>> 24;
                            $1572 = $1571 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$11731903 >> 0] = $1572;
                            $1573 = $1570 >>> 16;
                            $1574 = $1573 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11801904 = HEAP32[$6 >> 2] | 0;
                            $1575 = ((($$sroa$6907$0$$sroa$6907$16$11801904)) + 1 | 0);
                            HEAP8[$1575 >> 0] = $1574;
                            $1576 = $1570 >>> 8;
                            $1577 = $1576 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11741905 = HEAP32[$6 >> 2] | 0;
                            $1578 = ((($$sroa$6907$0$$sroa$6907$16$11741905)) + 2 | 0);
                            HEAP8[$1578 >> 0] = $1577;
                            $1579 = $1570 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11751906 = HEAP32[$6 >> 2] | 0;
                            $1580 = ((($$sroa$6907$0$$sroa$6907$16$11751906)) + 3 | 0);
                            HEAP8[$1580 >> 0] = $1579;
                            $$sroa$6907$0$$sroa$6907$16$11761907 = HEAP32[$6 >> 2] | 0;
                            $1581 = ((($$sroa$6907$0$$sroa$6907$16$11761907)) + 4 | 0);
                            $1582 = $1581;
                            HEAP32[$6 >> 2] = $1582;
                            $1583 = 1 << $1567;
                            $1584 = (($1583) + -1) | 0;
                            $1585 = $1584 & $1523;
                            $1586 = (32 - ($1567)) | 0;
                            $$sroa$336$51 = $1585; $$sroa$6907$0$$sroa$6907$16$$pre$i19682613 = $1581; $$sroa$6907$0$$sroa$6907$16$100119232339 = $1581; $$sroa$6907$0$$sroa$6907$16$100619792463 = $1581; $$sroa$6907$0$$sroa$6907$16$100919332388 = $1581; $$sroa$6907$0$$sroa$6907$16$101619532524 = $1581; $$sroa$6907$0$$sroa$6907$16$102319742503 = $1581; $$sroa$6907$0$$sroa$6907$16$102619582567 = $1581; $$sroa$6907$0$$sroa$6907$16$103019382407 = $1581; $$sroa$6907$0$$sroa$6907$16$103319892355 = $1581; $$sroa$6907$0$$sroa$6907$16$103919482483 = $1581; $$sroa$6907$0$$sroa$6907$16$104219842425 = $1581; $$sroa$6907$0$$sroa$6907$16$106519992299 = $1581; $$sroa$6907$0$$sroa$6907$16$106919132287 = $1581; $$sroa$6907$0$$sroa$6907$16$10741908 = $1581; $$sroa$6907$0$$sroa$6907$16$110419942325 = $1581; $$sroa$6907$0$$sroa$6907$16$116519182312 = $1581; $$sroa$6907$0$$sroa$6907$16$97819282371 = $1581; $$sroa$6907$0$$sroa$6907$16$98619692545 = $1581; $$sroa$6907$0$$sroa$6907$16$99219432444 = $1581; $$sroa$6907$0$$sroa$6907$16$99819632590 = $1581; $$sroa$771$16 = $1586;
                            break;
                        }
                    }
                } while (0);
                $1587 = HEAP8[$436 >> 0] | 0;
                $1588 = $1587 & 255;
                $1589 = ($$sroa$771$16 | 0) > (1);
                if ($1589) {
                    $1590 = $$sroa$336$51 << 1;
                    $1591 = $1590 | $1588;
                    $1592 = (($$sroa$771$16) + -1) | 0;
                    $$sroa$336$52 = $1591; $$sroa$6907$0$$sroa$6907$16$$pre$i19682612 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682613; $$sroa$6907$0$$sroa$6907$16$100119232338 = $$sroa$6907$0$$sroa$6907$16$100119232339; $$sroa$6907$0$$sroa$6907$16$100619792462 = $$sroa$6907$0$$sroa$6907$16$100619792463; $$sroa$6907$0$$sroa$6907$16$100919332387 = $$sroa$6907$0$$sroa$6907$16$100919332388; $$sroa$6907$0$$sroa$6907$16$101619532523 = $$sroa$6907$0$$sroa$6907$16$101619532524; $$sroa$6907$0$$sroa$6907$16$102319742502 = $$sroa$6907$0$$sroa$6907$16$102319742503; $$sroa$6907$0$$sroa$6907$16$102619582566 = $$sroa$6907$0$$sroa$6907$16$102619582567; $$sroa$6907$0$$sroa$6907$16$103019382406 = $$sroa$6907$0$$sroa$6907$16$103019382407; $$sroa$6907$0$$sroa$6907$16$103319892354 = $$sroa$6907$0$$sroa$6907$16$103319892355; $$sroa$6907$0$$sroa$6907$16$103919482482 = $$sroa$6907$0$$sroa$6907$16$103919482483; $$sroa$6907$0$$sroa$6907$16$104219842424 = $$sroa$6907$0$$sroa$6907$16$104219842425; $$sroa$6907$0$$sroa$6907$16$10651999 = $$sroa$6907$0$$sroa$6907$16$106519992299; $$sroa$6907$0$$sroa$6907$16$10691913 = $$sroa$6907$0$$sroa$6907$16$106919132287; $$sroa$6907$0$$sroa$6907$16$110419942324 = $$sroa$6907$0$$sroa$6907$16$110419942325; $$sroa$6907$0$$sroa$6907$16$116519182311 = $$sroa$6907$0$$sroa$6907$16$116519182312; $$sroa$6907$0$$sroa$6907$16$97819282370 = $$sroa$6907$0$$sroa$6907$16$97819282371; $$sroa$6907$0$$sroa$6907$16$98619692544 = $$sroa$6907$0$$sroa$6907$16$98619692545; $$sroa$6907$0$$sroa$6907$16$99219432443 = $$sroa$6907$0$$sroa$6907$16$99219432444; $$sroa$6907$0$$sroa$6907$16$99819632589 = $$sroa$6907$0$$sroa$6907$16$99819632590; $storemerge$i$i726 = $1592;
                } else {
                    $1593 = (1 - ($$sroa$771$16)) | 0;
                    $1594 = $$sroa$336$51 << $$sroa$771$16;
                    $1595 = $1588 >>> $1593;
                    $1596 = $1595 | $1594;
                    $1597 = $1596 >>> 24;
                    $1598 = $1597 & 255;
                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10741908 >> 0] = $1598;
                    $1599 = $1596 >>> 16;
                    $1600 = $1599 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10751909 = HEAP32[$6 >> 2] | 0;
                    $1601 = ((($$sroa$6907$0$$sroa$6907$16$10751909)) + 1 | 0);
                    HEAP8[$1601 >> 0] = $1600;
                    $1602 = $1596 >>> 8;
                    $1603 = $1602 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10761910 = HEAP32[$6 >> 2] | 0;
                    $1604 = ((($$sroa$6907$0$$sroa$6907$16$10761910)) + 2 | 0);
                    HEAP8[$1604 >> 0] = $1603;
                    $1605 = $1596 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10771911 = HEAP32[$6 >> 2] | 0;
                    $1606 = ((($$sroa$6907$0$$sroa$6907$16$10771911)) + 3 | 0);
                    HEAP8[$1606 >> 0] = $1605;
                    $$sroa$6907$0$$sroa$6907$16$10781912 = HEAP32[$6 >> 2] | 0;
                    $1607 = ((($$sroa$6907$0$$sroa$6907$16$10781912)) + 4 | 0);
                    $1608 = $1607;
                    HEAP32[$6 >> 2] = $1608;
                    $1609 = 1 << $1593;
                    $1610 = (($1609) + 1) | 0;
                    $1611 = $1610 & $1588;
                    $1612 = (32 - ($1593)) | 0;
                    $$sroa$336$52 = $1611; $$sroa$6907$0$$sroa$6907$16$$pre$i19682612 = $1607; $$sroa$6907$0$$sroa$6907$16$100119232338 = $1607; $$sroa$6907$0$$sroa$6907$16$100619792462 = $1607; $$sroa$6907$0$$sroa$6907$16$100919332387 = $1607; $$sroa$6907$0$$sroa$6907$16$101619532523 = $1607; $$sroa$6907$0$$sroa$6907$16$102319742502 = $1607; $$sroa$6907$0$$sroa$6907$16$102619582566 = $1607; $$sroa$6907$0$$sroa$6907$16$103019382406 = $1607; $$sroa$6907$0$$sroa$6907$16$103319892354 = $1607; $$sroa$6907$0$$sroa$6907$16$103919482482 = $1607; $$sroa$6907$0$$sroa$6907$16$104219842424 = $1607; $$sroa$6907$0$$sroa$6907$16$10651999 = $1607; $$sroa$6907$0$$sroa$6907$16$10691913 = $1607; $$sroa$6907$0$$sroa$6907$16$110419942324 = $1607; $$sroa$6907$0$$sroa$6907$16$116519182311 = $1607; $$sroa$6907$0$$sroa$6907$16$97819282370 = $1607; $$sroa$6907$0$$sroa$6907$16$98619692544 = $1607; $$sroa$6907$0$$sroa$6907$16$99219432443 = $1607; $$sroa$6907$0$$sroa$6907$16$99819632589 = $1607; $storemerge$i$i726 = $1612;
                }
                $1613 = HEAP32[$442 >> 2] | 0;
                $1614 = (($1613) + -1) | 0;
                $1615 = ($1614 >>> 0) < (256);
                do {
                    if ($1615) {
                        $1616 = (8136 + ($1614 << 2) | 0);
                        $1617 = HEAP32[$1616 >> 2] | 0;
                        $1618 = ($storemerge$i$i726 | 0) > ($1617 | 0);
                        if ($1618) {
                            $1619 = $$sroa$336$52 << $1617;
                            $1620 = $1619 | $1613;
                            $1621 = (($storemerge$i$i726) - ($1617)) | 0;
                            $$sroa$336$55 = $1620; $$sroa$6907$0$$sroa$6907$16$$pre$i19682611 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682612; $$sroa$6907$0$$sroa$6907$16$100119232337 = $$sroa$6907$0$$sroa$6907$16$100119232338; $$sroa$6907$0$$sroa$6907$16$100619792461 = $$sroa$6907$0$$sroa$6907$16$100619792462; $$sroa$6907$0$$sroa$6907$16$100919332386 = $$sroa$6907$0$$sroa$6907$16$100919332387; $$sroa$6907$0$$sroa$6907$16$101619532522 = $$sroa$6907$0$$sroa$6907$16$101619532523; $$sroa$6907$0$$sroa$6907$16$102319742501 = $$sroa$6907$0$$sroa$6907$16$102319742502; $$sroa$6907$0$$sroa$6907$16$102619582565 = $$sroa$6907$0$$sroa$6907$16$102619582566; $$sroa$6907$0$$sroa$6907$16$103019382405 = $$sroa$6907$0$$sroa$6907$16$103019382406; $$sroa$6907$0$$sroa$6907$16$103319892353 = $$sroa$6907$0$$sroa$6907$16$103319892354; $$sroa$6907$0$$sroa$6907$16$103919482481 = $$sroa$6907$0$$sroa$6907$16$103919482482; $$sroa$6907$0$$sroa$6907$16$104219842423 = $$sroa$6907$0$$sroa$6907$16$104219842424; $$sroa$6907$0$$sroa$6907$16$11041994 = $$sroa$6907$0$$sroa$6907$16$110419942324; $$sroa$6907$0$$sroa$6907$16$11651918 = $$sroa$6907$0$$sroa$6907$16$116519182311; $$sroa$6907$0$$sroa$6907$16$97819282369 = $$sroa$6907$0$$sroa$6907$16$97819282370; $$sroa$6907$0$$sroa$6907$16$98619692543 = $$sroa$6907$0$$sroa$6907$16$98619692544; $$sroa$6907$0$$sroa$6907$16$99219432442 = $$sroa$6907$0$$sroa$6907$16$99219432443; $$sroa$6907$0$$sroa$6907$16$99819632588 = $$sroa$6907$0$$sroa$6907$16$99819632589; $$sroa$771$17 = $1621;
                            break;
                        } else {
                            $1622 = (($1617) - ($storemerge$i$i726)) | 0;
                            $1623 = $$sroa$336$52 << $storemerge$i$i726;
                            $1624 = $1613 >>> $1622;
                            $1625 = $1624 | $1623;
                            $1626 = $1625 >>> 24;
                            $1627 = $1626 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$10651999 >> 0] = $1627;
                            $1628 = $1625 >>> 16;
                            $1629 = $1628 & 255;
                            $$sroa$6907$0$$sroa$6907$16$10662000 = HEAP32[$6 >> 2] | 0;
                            $1630 = ((($$sroa$6907$0$$sroa$6907$16$10662000)) + 1 | 0);
                            HEAP8[$1630 >> 0] = $1629;
                            $1631 = $1625 >>> 8;
                            $1632 = $1631 & 255;
                            $$sroa$6907$0$$sroa$6907$16$10542001 = HEAP32[$6 >> 2] | 0;
                            $1633 = ((($$sroa$6907$0$$sroa$6907$16$10542001)) + 2 | 0);
                            HEAP8[$1633 >> 0] = $1632;
                            $1634 = $1625 & 255;
                            $$sroa$6907$0$$sroa$6907$16$10672002 = HEAP32[$6 >> 2] | 0;
                            $1635 = ((($$sroa$6907$0$$sroa$6907$16$10672002)) + 3 | 0);
                            HEAP8[$1635 >> 0] = $1634;
                            $$sroa$6907$0$$sroa$6907$16$10682003 = HEAP32[$6 >> 2] | 0;
                            $1636 = ((($$sroa$6907$0$$sroa$6907$16$10682003)) + 4 | 0);
                            $1637 = $1636;
                            HEAP32[$6 >> 2] = $1637;
                            $1638 = 1 << $1622;
                            $1639 = (($1638) + -1) | 0;
                            $1640 = $1639 & $1613;
                            $1641 = (32 - ($1622)) | 0;
                            $$sroa$336$55 = $1640; $$sroa$6907$0$$sroa$6907$16$$pre$i19682611 = $1636; $$sroa$6907$0$$sroa$6907$16$100119232337 = $1636; $$sroa$6907$0$$sroa$6907$16$100619792461 = $1636; $$sroa$6907$0$$sroa$6907$16$100919332386 = $1636; $$sroa$6907$0$$sroa$6907$16$101619532522 = $1636; $$sroa$6907$0$$sroa$6907$16$102319742501 = $1636; $$sroa$6907$0$$sroa$6907$16$102619582565 = $1636; $$sroa$6907$0$$sroa$6907$16$103019382405 = $1636; $$sroa$6907$0$$sroa$6907$16$103319892353 = $1636; $$sroa$6907$0$$sroa$6907$16$103919482481 = $1636; $$sroa$6907$0$$sroa$6907$16$104219842423 = $1636; $$sroa$6907$0$$sroa$6907$16$11041994 = $1636; $$sroa$6907$0$$sroa$6907$16$11651918 = $1636; $$sroa$6907$0$$sroa$6907$16$97819282369 = $1636; $$sroa$6907$0$$sroa$6907$16$98619692543 = $1636; $$sroa$6907$0$$sroa$6907$16$99219432442 = $1636; $$sroa$6907$0$$sroa$6907$16$99819632588 = $1636; $$sroa$771$17 = $1641;
                            break;
                        }
                    } else {
                        $1642 = ($1613 >>> 0) > (65535);
                        $1643 = $1613 >>> 16;
                        $$$i719 = $1642 ? $1643 : $1613;
                        $$2$i720 = $1642 ? 16 : 0;
                        $1644 = $$$i719 & 65280;
                        $1645 = ($1644 | 0) == (0);
                        $1646 = $$$i719 >>> 8;
                        $1647 = $$2$i720 | 8;
                        $$119$i721 = $1645 ? $$$i719 : $1646;
                        $$1$i722 = $1645 ? $$2$i720 : $1647;
                        $1648 = (($$119$i721) + -1) | 0;
                        $1649 = (8136 + ($1648 << 2) | 0);
                        $1650 = HEAP32[$1649 >> 2] | 0;
                        $1651 = $$1$i722 << 1;
                        $1652 = (($1650) + ($1651)) | 0;
                        $1653 = $1652 | 1;
                        $1654 = ($storemerge$i$i726 | 0) > ($1653 | 0);
                        if ($1654) {
                            $1655 = $$sroa$336$52 << $1653;
                            $1656 = $1655 | $1613;
                            $1657 = (($storemerge$i$i726) - ($1653)) | 0;
                            $$sroa$336$55 = $1656; $$sroa$6907$0$$sroa$6907$16$$pre$i19682611 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682612; $$sroa$6907$0$$sroa$6907$16$100119232337 = $$sroa$6907$0$$sroa$6907$16$100119232338; $$sroa$6907$0$$sroa$6907$16$100619792461 = $$sroa$6907$0$$sroa$6907$16$100619792462; $$sroa$6907$0$$sroa$6907$16$100919332386 = $$sroa$6907$0$$sroa$6907$16$100919332387; $$sroa$6907$0$$sroa$6907$16$101619532522 = $$sroa$6907$0$$sroa$6907$16$101619532523; $$sroa$6907$0$$sroa$6907$16$102319742501 = $$sroa$6907$0$$sroa$6907$16$102319742502; $$sroa$6907$0$$sroa$6907$16$102619582565 = $$sroa$6907$0$$sroa$6907$16$102619582566; $$sroa$6907$0$$sroa$6907$16$103019382405 = $$sroa$6907$0$$sroa$6907$16$103019382406; $$sroa$6907$0$$sroa$6907$16$103319892353 = $$sroa$6907$0$$sroa$6907$16$103319892354; $$sroa$6907$0$$sroa$6907$16$103919482481 = $$sroa$6907$0$$sroa$6907$16$103919482482; $$sroa$6907$0$$sroa$6907$16$104219842423 = $$sroa$6907$0$$sroa$6907$16$104219842424; $$sroa$6907$0$$sroa$6907$16$11041994 = $$sroa$6907$0$$sroa$6907$16$110419942324; $$sroa$6907$0$$sroa$6907$16$11651918 = $$sroa$6907$0$$sroa$6907$16$116519182311; $$sroa$6907$0$$sroa$6907$16$97819282369 = $$sroa$6907$0$$sroa$6907$16$97819282370; $$sroa$6907$0$$sroa$6907$16$98619692543 = $$sroa$6907$0$$sroa$6907$16$98619692544; $$sroa$6907$0$$sroa$6907$16$99219432442 = $$sroa$6907$0$$sroa$6907$16$99219432443; $$sroa$6907$0$$sroa$6907$16$99819632588 = $$sroa$6907$0$$sroa$6907$16$99819632589; $$sroa$771$17 = $1657;
                            break;
                        } else {
                            $1658 = (($1653) - ($storemerge$i$i726)) | 0;
                            $1659 = $$sroa$336$52 << $storemerge$i$i726;
                            $1660 = $1613 >>> $1658;
                            $1661 = $1660 | $1659;
                            $1662 = $1661 >>> 24;
                            $1663 = $1662 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$10691913 >> 0] = $1663;
                            $1664 = $1661 >>> 16;
                            $1665 = $1664 & 255;
                            $$sroa$6907$0$$sroa$6907$16$10621914 = HEAP32[$6 >> 2] | 0;
                            $1666 = ((($$sroa$6907$0$$sroa$6907$16$10621914)) + 1 | 0);
                            HEAP8[$1666 >> 0] = $1665;
                            $1667 = $1661 >>> 8;
                            $1668 = $1667 & 255;
                            $$sroa$6907$0$$sroa$6907$16$10711915 = HEAP32[$6 >> 2] | 0;
                            $1669 = ((($$sroa$6907$0$$sroa$6907$16$10711915)) + 2 | 0);
                            HEAP8[$1669 >> 0] = $1668;
                            $1670 = $1661 & 255;
                            $$sroa$6907$0$$sroa$6907$16$10721916 = HEAP32[$6 >> 2] | 0;
                            $1671 = ((($$sroa$6907$0$$sroa$6907$16$10721916)) + 3 | 0);
                            HEAP8[$1671 >> 0] = $1670;
                            $$sroa$6907$0$$sroa$6907$16$10731917 = HEAP32[$6 >> 2] | 0;
                            $1672 = ((($$sroa$6907$0$$sroa$6907$16$10731917)) + 4 | 0);
                            $1673 = $1672;
                            HEAP32[$6 >> 2] = $1673;
                            $1674 = 1 << $1658;
                            $1675 = (($1674) + -1) | 0;
                            $1676 = $1675 & $1613;
                            $1677 = (32 - ($1658)) | 0;
                            $$sroa$336$55 = $1676; $$sroa$6907$0$$sroa$6907$16$$pre$i19682611 = $1672; $$sroa$6907$0$$sroa$6907$16$100119232337 = $1672; $$sroa$6907$0$$sroa$6907$16$100619792461 = $1672; $$sroa$6907$0$$sroa$6907$16$100919332386 = $1672; $$sroa$6907$0$$sroa$6907$16$101619532522 = $1672; $$sroa$6907$0$$sroa$6907$16$102319742501 = $1672; $$sroa$6907$0$$sroa$6907$16$102619582565 = $1672; $$sroa$6907$0$$sroa$6907$16$103019382405 = $1672; $$sroa$6907$0$$sroa$6907$16$103319892353 = $1672; $$sroa$6907$0$$sroa$6907$16$103919482481 = $1672; $$sroa$6907$0$$sroa$6907$16$104219842423 = $1672; $$sroa$6907$0$$sroa$6907$16$11041994 = $1672; $$sroa$6907$0$$sroa$6907$16$11651918 = $1672; $$sroa$6907$0$$sroa$6907$16$97819282369 = $1672; $$sroa$6907$0$$sroa$6907$16$98619692543 = $1672; $$sroa$6907$0$$sroa$6907$16$99219432442 = $1672; $$sroa$6907$0$$sroa$6907$16$99819632588 = $1672; $$sroa$771$17 = $1677;
                            break;
                        }
                    }
                } while (0);
                $1678 = HEAP32[$458 >> 2] | 0;
                $1679 = (($1678) + -1) | 0;
                $1680 = ($1679 >>> 0) < (256);
                do {
                    if ($1680) {
                        $1681 = (8136 + ($1679 << 2) | 0);
                        $1682 = HEAP32[$1681 >> 2] | 0;
                        $1683 = ($$sroa$771$17 | 0) > ($1682 | 0);
                        if ($1683) {
                            $1684 = $$sroa$336$55 << $1682;
                            $1685 = $1684 | $1678;
                            $1686 = (($$sroa$771$17) - ($1682)) | 0;
                            $$sroa$336$58 = $1685; $$sroa$6907$0$$sroa$6907$16$$pre$i19682610 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682611; $$sroa$6907$0$$sroa$6907$16$10011923 = $$sroa$6907$0$$sroa$6907$16$100119232337; $$sroa$6907$0$$sroa$6907$16$100619792460 = $$sroa$6907$0$$sroa$6907$16$100619792461; $$sroa$6907$0$$sroa$6907$16$100919332385 = $$sroa$6907$0$$sroa$6907$16$100919332386; $$sroa$6907$0$$sroa$6907$16$101619532521 = $$sroa$6907$0$$sroa$6907$16$101619532522; $$sroa$6907$0$$sroa$6907$16$102319742500 = $$sroa$6907$0$$sroa$6907$16$102319742501; $$sroa$6907$0$$sroa$6907$16$102619582564 = $$sroa$6907$0$$sroa$6907$16$102619582565; $$sroa$6907$0$$sroa$6907$16$103019382404 = $$sroa$6907$0$$sroa$6907$16$103019382405; $$sroa$6907$0$$sroa$6907$16$103319892352 = $$sroa$6907$0$$sroa$6907$16$103319892353; $$sroa$6907$0$$sroa$6907$16$103919482480 = $$sroa$6907$0$$sroa$6907$16$103919482481; $$sroa$6907$0$$sroa$6907$16$104219842422 = $$sroa$6907$0$$sroa$6907$16$104219842423; $$sroa$6907$0$$sroa$6907$16$97819282368 = $$sroa$6907$0$$sroa$6907$16$97819282369; $$sroa$6907$0$$sroa$6907$16$98619692542 = $$sroa$6907$0$$sroa$6907$16$98619692543; $$sroa$6907$0$$sroa$6907$16$99219432441 = $$sroa$6907$0$$sroa$6907$16$99219432442; $$sroa$6907$0$$sroa$6907$16$99819632587 = $$sroa$6907$0$$sroa$6907$16$99819632588; $$sroa$771$18 = $1686;
                            break;
                        } else {
                            $1687 = (($1682) - ($$sroa$771$17)) | 0;
                            $1688 = $$sroa$336$55 << $$sroa$771$17;
                            $1689 = $1678 >>> $1687;
                            $1690 = $1689 | $1688;
                            $1691 = $1690 >>> 24;
                            $1692 = $1691 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$11041994 >> 0] = $1692;
                            $1693 = $1690 >>> 16;
                            $1694 = $1693 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11611995 = HEAP32[$6 >> 2] | 0;
                            $1695 = ((($$sroa$6907$0$$sroa$6907$16$11611995)) + 1 | 0);
                            HEAP8[$1695 >> 0] = $1694;
                            $1696 = $1690 >>> 8;
                            $1697 = $1696 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11621996 = HEAP32[$6 >> 2] | 0;
                            $1698 = ((($$sroa$6907$0$$sroa$6907$16$11621996)) + 2 | 0);
                            HEAP8[$1698 >> 0] = $1697;
                            $1699 = $1690 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11631997 = HEAP32[$6 >> 2] | 0;
                            $1700 = ((($$sroa$6907$0$$sroa$6907$16$11631997)) + 3 | 0);
                            HEAP8[$1700 >> 0] = $1699;
                            $$sroa$6907$0$$sroa$6907$16$11641998 = HEAP32[$6 >> 2] | 0;
                            $1701 = ((($$sroa$6907$0$$sroa$6907$16$11641998)) + 4 | 0);
                            $1702 = $1701;
                            HEAP32[$6 >> 2] = $1702;
                            $1703 = 1 << $1687;
                            $1704 = (($1703) + -1) | 0;
                            $1705 = $1704 & $1678;
                            $1706 = (32 - ($1687)) | 0;
                            $$sroa$336$58 = $1705; $$sroa$6907$0$$sroa$6907$16$$pre$i19682610 = $1701; $$sroa$6907$0$$sroa$6907$16$10011923 = $1701; $$sroa$6907$0$$sroa$6907$16$100619792460 = $1701; $$sroa$6907$0$$sroa$6907$16$100919332385 = $1701; $$sroa$6907$0$$sroa$6907$16$101619532521 = $1701; $$sroa$6907$0$$sroa$6907$16$102319742500 = $1701; $$sroa$6907$0$$sroa$6907$16$102619582564 = $1701; $$sroa$6907$0$$sroa$6907$16$103019382404 = $1701; $$sroa$6907$0$$sroa$6907$16$103319892352 = $1701; $$sroa$6907$0$$sroa$6907$16$103919482480 = $1701; $$sroa$6907$0$$sroa$6907$16$104219842422 = $1701; $$sroa$6907$0$$sroa$6907$16$97819282368 = $1701; $$sroa$6907$0$$sroa$6907$16$98619692542 = $1701; $$sroa$6907$0$$sroa$6907$16$99219432441 = $1701; $$sroa$6907$0$$sroa$6907$16$99819632587 = $1701; $$sroa$771$18 = $1706;
                            break;
                        }
                    } else {
                        $1707 = ($1678 >>> 0) > (65535);
                        $1708 = $1678 >>> 16;
                        $$$i710 = $1707 ? $1708 : $1678;
                        $$2$i711 = $1707 ? 16 : 0;
                        $1709 = $$$i710 & 65280;
                        $1710 = ($1709 | 0) == (0);
                        $1711 = $$$i710 >>> 8;
                        $1712 = $$2$i711 | 8;
                        $$119$i712 = $1710 ? $$$i710 : $1711;
                        $$1$i713 = $1710 ? $$2$i711 : $1712;
                        $1713 = (($$119$i712) + -1) | 0;
                        $1714 = (8136 + ($1713 << 2) | 0);
                        $1715 = HEAP32[$1714 >> 2] | 0;
                        $1716 = $$1$i713 << 1;
                        $1717 = (($1715) + ($1716)) | 0;
                        $1718 = $1717 | 1;
                        $1719 = ($$sroa$771$17 | 0) > ($1718 | 0);
                        if ($1719) {
                            $1720 = $$sroa$336$55 << $1718;
                            $1721 = $1720 | $1678;
                            $1722 = (($$sroa$771$17) - ($1718)) | 0;
                            $$sroa$336$58 = $1721; $$sroa$6907$0$$sroa$6907$16$$pre$i19682610 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682611; $$sroa$6907$0$$sroa$6907$16$10011923 = $$sroa$6907$0$$sroa$6907$16$100119232337; $$sroa$6907$0$$sroa$6907$16$100619792460 = $$sroa$6907$0$$sroa$6907$16$100619792461; $$sroa$6907$0$$sroa$6907$16$100919332385 = $$sroa$6907$0$$sroa$6907$16$100919332386; $$sroa$6907$0$$sroa$6907$16$101619532521 = $$sroa$6907$0$$sroa$6907$16$101619532522; $$sroa$6907$0$$sroa$6907$16$102319742500 = $$sroa$6907$0$$sroa$6907$16$102319742501; $$sroa$6907$0$$sroa$6907$16$102619582564 = $$sroa$6907$0$$sroa$6907$16$102619582565; $$sroa$6907$0$$sroa$6907$16$103019382404 = $$sroa$6907$0$$sroa$6907$16$103019382405; $$sroa$6907$0$$sroa$6907$16$103319892352 = $$sroa$6907$0$$sroa$6907$16$103319892353; $$sroa$6907$0$$sroa$6907$16$103919482480 = $$sroa$6907$0$$sroa$6907$16$103919482481; $$sroa$6907$0$$sroa$6907$16$104219842422 = $$sroa$6907$0$$sroa$6907$16$104219842423; $$sroa$6907$0$$sroa$6907$16$97819282368 = $$sroa$6907$0$$sroa$6907$16$97819282369; $$sroa$6907$0$$sroa$6907$16$98619692542 = $$sroa$6907$0$$sroa$6907$16$98619692543; $$sroa$6907$0$$sroa$6907$16$99219432441 = $$sroa$6907$0$$sroa$6907$16$99219432442; $$sroa$6907$0$$sroa$6907$16$99819632587 = $$sroa$6907$0$$sroa$6907$16$99819632588; $$sroa$771$18 = $1722;
                            break;
                        } else {
                            $1723 = (($1718) - ($$sroa$771$17)) | 0;
                            $1724 = $$sroa$336$55 << $$sroa$771$17;
                            $1725 = $1678 >>> $1723;
                            $1726 = $1725 | $1724;
                            $1727 = $1726 >>> 24;
                            $1728 = $1727 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$11651918 >> 0] = $1728;
                            $1729 = $1726 >>> 16;
                            $1730 = $1729 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11401919 = HEAP32[$6 >> 2] | 0;
                            $1731 = ((($$sroa$6907$0$$sroa$6907$16$11401919)) + 1 | 0);
                            HEAP8[$1731 >> 0] = $1730;
                            $1732 = $1726 >>> 8;
                            $1733 = $1732 & 255;
                            $$sroa$6907$0$$sroa$6907$16$11311920 = HEAP32[$6 >> 2] | 0;
                            $1734 = ((($$sroa$6907$0$$sroa$6907$16$11311920)) + 2 | 0);
                            HEAP8[$1734 >> 0] = $1733;
                            $1735 = $1726 & 255;
                            $$sroa$6907$0$$sroa$6907$16$10631921 = HEAP32[$6 >> 2] | 0;
                            $1736 = ((($$sroa$6907$0$$sroa$6907$16$10631921)) + 3 | 0);
                            HEAP8[$1736 >> 0] = $1735;
                            $$sroa$6907$0$$sroa$6907$16$10641922 = HEAP32[$6 >> 2] | 0;
                            $1737 = ((($$sroa$6907$0$$sroa$6907$16$10641922)) + 4 | 0);
                            $1738 = $1737;
                            HEAP32[$6 >> 2] = $1738;
                            $1739 = 1 << $1723;
                            $1740 = (($1739) + -1) | 0;
                            $1741 = $1740 & $1678;
                            $1742 = (32 - ($1723)) | 0;
                            $$sroa$336$58 = $1741; $$sroa$6907$0$$sroa$6907$16$$pre$i19682610 = $1737; $$sroa$6907$0$$sroa$6907$16$10011923 = $1737; $$sroa$6907$0$$sroa$6907$16$100619792460 = $1737; $$sroa$6907$0$$sroa$6907$16$100919332385 = $1737; $$sroa$6907$0$$sroa$6907$16$101619532521 = $1737; $$sroa$6907$0$$sroa$6907$16$102319742500 = $1737; $$sroa$6907$0$$sroa$6907$16$102619582564 = $1737; $$sroa$6907$0$$sroa$6907$16$103019382404 = $1737; $$sroa$6907$0$$sroa$6907$16$103319892352 = $1737; $$sroa$6907$0$$sroa$6907$16$103919482480 = $1737; $$sroa$6907$0$$sroa$6907$16$104219842422 = $1737; $$sroa$6907$0$$sroa$6907$16$97819282368 = $1737; $$sroa$6907$0$$sroa$6907$16$98619692542 = $1737; $$sroa$6907$0$$sroa$6907$16$99219432441 = $1737; $$sroa$6907$0$$sroa$6907$16$99819632587 = $1737; $$sroa$771$18 = $1742;
                            break;
                        }
                    }
                } while (0);
                $1743 = HEAP8[$509 >> 0] | 0;
                $1744 = $1743 & 255;
                $1745 = ($$sroa$771$18 | 0) > (1);
                if ($1745) {
                    $1746 = $$sroa$336$58 << 1;
                    $1747 = $1746 | $1744;
                    $1748 = (($$sroa$771$18) + -1) | 0;
                    $$sroa$336$59 = $1747; $$sroa$6907$0$$sroa$6907$16$$pre$i19682609 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682610; $$sroa$6907$0$$sroa$6907$16$100619792459 = $$sroa$6907$0$$sroa$6907$16$100619792460; $$sroa$6907$0$$sroa$6907$16$100919332384 = $$sroa$6907$0$$sroa$6907$16$100919332385; $$sroa$6907$0$$sroa$6907$16$101619532520 = $$sroa$6907$0$$sroa$6907$16$101619532521; $$sroa$6907$0$$sroa$6907$16$102319742499 = $$sroa$6907$0$$sroa$6907$16$102319742500; $$sroa$6907$0$$sroa$6907$16$102619582563 = $$sroa$6907$0$$sroa$6907$16$102619582564; $$sroa$6907$0$$sroa$6907$16$103019382403 = $$sroa$6907$0$$sroa$6907$16$103019382404; $$sroa$6907$0$$sroa$6907$16$10331989 = $$sroa$6907$0$$sroa$6907$16$103319892352; $$sroa$6907$0$$sroa$6907$16$103919482479 = $$sroa$6907$0$$sroa$6907$16$103919482480; $$sroa$6907$0$$sroa$6907$16$104219842421 = $$sroa$6907$0$$sroa$6907$16$104219842422; $$sroa$6907$0$$sroa$6907$16$97819282367 = $$sroa$6907$0$$sroa$6907$16$97819282368; $$sroa$6907$0$$sroa$6907$16$98619692541 = $$sroa$6907$0$$sroa$6907$16$98619692542; $$sroa$6907$0$$sroa$6907$16$99219432440 = $$sroa$6907$0$$sroa$6907$16$99219432441; $$sroa$6907$0$$sroa$6907$16$99819632586 = $$sroa$6907$0$$sroa$6907$16$99819632587; $1769 = $1743; $storemerge$i$i705 = $1748;
                } else {
                    $1749 = (1 - ($$sroa$771$18)) | 0;
                    $1750 = $$sroa$336$58 << $$sroa$771$18;
                    $1751 = $1744 >>> $1749;
                    $1752 = $1751 | $1750;
                    $1753 = $1752 >>> 24;
                    $1754 = $1753 & 255;
                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10011923 >> 0] = $1754;
                    $1755 = $1752 >>> 16;
                    $1756 = $1755 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10001924 = HEAP32[$6 >> 2] | 0;
                    $1757 = ((($$sroa$6907$0$$sroa$6907$16$10001924)) + 1 | 0);
                    HEAP8[$1757 >> 0] = $1756;
                    $1758 = $1752 >>> 8;
                    $1759 = $1758 & 255;
                    $$sroa$6907$0$$sroa$6907$16$9991925 = HEAP32[$6 >> 2] | 0;
                    $1760 = ((($$sroa$6907$0$$sroa$6907$16$9991925)) + 2 | 0);
                    HEAP8[$1760 >> 0] = $1759;
                    $1761 = $1752 & 255;
                    $$sroa$6907$0$$sroa$6907$16$9901926 = HEAP32[$6 >> 2] | 0;
                    $1762 = ((($$sroa$6907$0$$sroa$6907$16$9901926)) + 3 | 0);
                    HEAP8[$1762 >> 0] = $1761;
                    $$sroa$6907$0$$sroa$6907$16$9891927 = HEAP32[$6 >> 2] | 0;
                    $1763 = ((($$sroa$6907$0$$sroa$6907$16$9891927)) + 4 | 0);
                    $1764 = $1763;
                    HEAP32[$6 >> 2] = $1764;
                    $1765 = 1 << $1749;
                    $1766 = (($1765) + 1) | 0;
                    $1767 = $1766 & $1744;
                    $1768 = (32 - ($1749)) | 0;
                    $$pre2350 = HEAP8[$509 >> 0] | 0;
                    $$sroa$336$59 = $1767; $$sroa$6907$0$$sroa$6907$16$$pre$i19682609 = $1763; $$sroa$6907$0$$sroa$6907$16$100619792459 = $1763; $$sroa$6907$0$$sroa$6907$16$100919332384 = $1763; $$sroa$6907$0$$sroa$6907$16$101619532520 = $1763; $$sroa$6907$0$$sroa$6907$16$102319742499 = $1763; $$sroa$6907$0$$sroa$6907$16$102619582563 = $1763; $$sroa$6907$0$$sroa$6907$16$103019382403 = $1763; $$sroa$6907$0$$sroa$6907$16$10331989 = $1763; $$sroa$6907$0$$sroa$6907$16$103919482479 = $1763; $$sroa$6907$0$$sroa$6907$16$104219842421 = $1763; $$sroa$6907$0$$sroa$6907$16$97819282367 = $1763; $$sroa$6907$0$$sroa$6907$16$98619692541 = $1763; $$sroa$6907$0$$sroa$6907$16$99219432440 = $1763; $$sroa$6907$0$$sroa$6907$16$99819632586 = $1763; $1769 = $$pre2350; $storemerge$i$i705 = $1768;
                }
                $1770 = ($1769 << 24 >> 24) == (0);
                do {
                    if ($1770) {
                        $1771 = ((($7)) + 325 | 0);
                        $1772 = HEAP8[$1771 >> 0] | 0;
                        $1773 = $1772 & 255;
                        $1774 = ($storemerge$i$i705 | 0) > (1);
                        if ($1774) {
                            $1775 = $$sroa$336$59 << 1;
                            $1776 = $1775 | $1773;
                            $1777 = (($storemerge$i$i705) + -1) | 0;
                            $$sroa$336$61 = $1776; $$sroa$6907$0$$sroa$6907$16$$pre$i19682608 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682609; $$sroa$6907$0$$sroa$6907$16$100619792458 = $$sroa$6907$0$$sroa$6907$16$100619792459; $$sroa$6907$0$$sroa$6907$16$100919332383 = $$sroa$6907$0$$sroa$6907$16$100919332384; $$sroa$6907$0$$sroa$6907$16$101619532519 = $$sroa$6907$0$$sroa$6907$16$101619532520; $$sroa$6907$0$$sroa$6907$16$102319742498 = $$sroa$6907$0$$sroa$6907$16$102319742499; $$sroa$6907$0$$sroa$6907$16$102619582562 = $$sroa$6907$0$$sroa$6907$16$102619582563; $$sroa$6907$0$$sroa$6907$16$103019382402 = $$sroa$6907$0$$sroa$6907$16$103019382403; $$sroa$6907$0$$sroa$6907$16$103919482478 = $$sroa$6907$0$$sroa$6907$16$103919482479; $$sroa$6907$0$$sroa$6907$16$104219842420 = $$sroa$6907$0$$sroa$6907$16$104219842421; $$sroa$6907$0$$sroa$6907$16$9781928 = $$sroa$6907$0$$sroa$6907$16$97819282367; $$sroa$6907$0$$sroa$6907$16$98619692540 = $$sroa$6907$0$$sroa$6907$16$98619692541; $$sroa$6907$0$$sroa$6907$16$99219432439 = $$sroa$6907$0$$sroa$6907$16$99219432440; $$sroa$6907$0$$sroa$6907$16$99819632585 = $$sroa$6907$0$$sroa$6907$16$99819632586; $$sroa$771$19 = $1777;
                            break;
                        } else {
                            $1778 = (1 - ($storemerge$i$i705)) | 0;
                            $1779 = $$sroa$336$59 << $storemerge$i$i705;
                            $1780 = $1773 >>> $1778;
                            $1781 = $1780 | $1779;
                            $1782 = $1781 >>> 24;
                            $1783 = $1782 & 255;
                            HEAP8[$$sroa$6907$0$$sroa$6907$16$10331989 >> 0] = $1783;
                            $1784 = $1781 >>> 16;
                            $1785 = $1784 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9261990 = HEAP32[$6 >> 2] | 0;
                            $1786 = ((($$sroa$6907$0$$sroa$6907$16$9261990)) + 1 | 0);
                            HEAP8[$1786 >> 0] = $1785;
                            $1787 = $1781 >>> 8;
                            $1788 = $1787 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9251991 = HEAP32[$6 >> 2] | 0;
                            $1789 = ((($$sroa$6907$0$$sroa$6907$16$9251991)) + 2 | 0);
                            HEAP8[$1789 >> 0] = $1788;
                            $1790 = $1781 & 255;
                            $$sroa$6907$0$$sroa$6907$16$9241992 = HEAP32[$6 >> 2] | 0;
                            $1791 = ((($$sroa$6907$0$$sroa$6907$16$9241992)) + 3 | 0);
                            HEAP8[$1791 >> 0] = $1790;
                            $$sroa$6907$0$$sroa$6907$16$10351993 = HEAP32[$6 >> 2] | 0;
                            $1792 = ((($$sroa$6907$0$$sroa$6907$16$10351993)) + 4 | 0);
                            $1793 = $1792;
                            HEAP32[$6 >> 2] = $1793;
                            $1794 = 1 << $1778;
                            $1795 = (($1794) + 1) | 0;
                            $1796 = $1795 & $1773;
                            $1797 = (32 - ($1778)) | 0;
                            $$sroa$336$61 = $1796; $$sroa$6907$0$$sroa$6907$16$$pre$i19682608 = $1792; $$sroa$6907$0$$sroa$6907$16$100619792458 = $1792; $$sroa$6907$0$$sroa$6907$16$100919332383 = $1792; $$sroa$6907$0$$sroa$6907$16$101619532519 = $1792; $$sroa$6907$0$$sroa$6907$16$102319742498 = $1792; $$sroa$6907$0$$sroa$6907$16$102619582562 = $1792; $$sroa$6907$0$$sroa$6907$16$103019382402 = $1792; $$sroa$6907$0$$sroa$6907$16$103919482478 = $1792; $$sroa$6907$0$$sroa$6907$16$104219842420 = $1792; $$sroa$6907$0$$sroa$6907$16$9781928 = $1792; $$sroa$6907$0$$sroa$6907$16$98619692540 = $1792; $$sroa$6907$0$$sroa$6907$16$99219432439 = $1792; $$sroa$6907$0$$sroa$6907$16$99819632585 = $1792; $$sroa$771$19 = $1797;
                            break;
                        }
                    } else {
                        $$sroa$336$61 = $$sroa$336$59; $$sroa$6907$0$$sroa$6907$16$$pre$i19682608 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682609; $$sroa$6907$0$$sroa$6907$16$100619792458 = $$sroa$6907$0$$sroa$6907$16$100619792459; $$sroa$6907$0$$sroa$6907$16$100919332383 = $$sroa$6907$0$$sroa$6907$16$100919332384; $$sroa$6907$0$$sroa$6907$16$101619532519 = $$sroa$6907$0$$sroa$6907$16$101619532520; $$sroa$6907$0$$sroa$6907$16$102319742498 = $$sroa$6907$0$$sroa$6907$16$102319742499; $$sroa$6907$0$$sroa$6907$16$102619582562 = $$sroa$6907$0$$sroa$6907$16$102619582563; $$sroa$6907$0$$sroa$6907$16$103019382402 = $$sroa$6907$0$$sroa$6907$16$103019382403; $$sroa$6907$0$$sroa$6907$16$103919482478 = $$sroa$6907$0$$sroa$6907$16$103919482479; $$sroa$6907$0$$sroa$6907$16$104219842420 = $$sroa$6907$0$$sroa$6907$16$104219842421; $$sroa$6907$0$$sroa$6907$16$9781928 = $$sroa$6907$0$$sroa$6907$16$97819282367; $$sroa$6907$0$$sroa$6907$16$98619692540 = $$sroa$6907$0$$sroa$6907$16$98619692541; $$sroa$6907$0$$sroa$6907$16$99219432439 = $$sroa$6907$0$$sroa$6907$16$99219432440; $$sroa$6907$0$$sroa$6907$16$99819632585 = $$sroa$6907$0$$sroa$6907$16$99819632586; $$sroa$771$19 = $storemerge$i$i705;
                    }
                } while (0);
                $1798 = HEAP8[$535 >> 0] | 0;
                $1799 = $1798 & 255;
                $1800 = ($$sroa$771$19 | 0) > (1);
                if ($1800) {
                    $1801 = $$sroa$336$61 << 1;
                    $1802 = $1801 | $1799;
                    $1803 = (($$sroa$771$19) + -1) | 0;
                    $$sroa$336$62 = $1802; $$sroa$6907$0$$sroa$6907$16$$pre$i19682607 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682608; $$sroa$6907$0$$sroa$6907$16$100619792457 = $$sroa$6907$0$$sroa$6907$16$100619792458; $$sroa$6907$0$$sroa$6907$16$10091933 = $$sroa$6907$0$$sroa$6907$16$100919332383; $$sroa$6907$0$$sroa$6907$16$101619532518 = $$sroa$6907$0$$sroa$6907$16$101619532519; $$sroa$6907$0$$sroa$6907$16$102319742497 = $$sroa$6907$0$$sroa$6907$16$102319742498; $$sroa$6907$0$$sroa$6907$16$102619582561 = $$sroa$6907$0$$sroa$6907$16$102619582562; $$sroa$6907$0$$sroa$6907$16$103019382401 = $$sroa$6907$0$$sroa$6907$16$103019382402; $$sroa$6907$0$$sroa$6907$16$103919482477 = $$sroa$6907$0$$sroa$6907$16$103919482478; $$sroa$6907$0$$sroa$6907$16$104219842419 = $$sroa$6907$0$$sroa$6907$16$104219842420; $$sroa$6907$0$$sroa$6907$16$98619692539 = $$sroa$6907$0$$sroa$6907$16$98619692540; $$sroa$6907$0$$sroa$6907$16$99219432438 = $$sroa$6907$0$$sroa$6907$16$99219432439; $$sroa$6907$0$$sroa$6907$16$99819632584 = $$sroa$6907$0$$sroa$6907$16$99819632585; $storemerge$i$i699 = $1803;
                } else {
                    $1804 = (1 - ($$sroa$771$19)) | 0;
                    $1805 = $$sroa$336$61 << $$sroa$771$19;
                    $1806 = $1799 >>> $1804;
                    $1807 = $1806 | $1805;
                    $1808 = $1807 >>> 24;
                    $1809 = $1808 & 255;
                    HEAP8[$$sroa$6907$0$$sroa$6907$16$9781928 >> 0] = $1809;
                    $1810 = $1807 >>> 16;
                    $1811 = $1810 & 255;
                    $$sroa$6907$0$$sroa$6907$16$9791929 = HEAP32[$6 >> 2] | 0;
                    $1812 = ((($$sroa$6907$0$$sroa$6907$16$9791929)) + 1 | 0);
                    HEAP8[$1812 >> 0] = $1811;
                    $1813 = $1807 >>> 8;
                    $1814 = $1813 & 255;
                    $$sroa$6907$0$$sroa$6907$16$9881930 = HEAP32[$6 >> 2] | 0;
                    $1815 = ((($$sroa$6907$0$$sroa$6907$16$9881930)) + 2 | 0);
                    HEAP8[$1815 >> 0] = $1814;
                    $1816 = $1807 & 255;
                    $$sroa$6907$0$$sroa$6907$16$9911931 = HEAP32[$6 >> 2] | 0;
                    $1817 = ((($$sroa$6907$0$$sroa$6907$16$9911931)) + 3 | 0);
                    HEAP8[$1817 >> 0] = $1816;
                    $$sroa$6907$0$$sroa$6907$16$10031932 = HEAP32[$6 >> 2] | 0;
                    $1818 = ((($$sroa$6907$0$$sroa$6907$16$10031932)) + 4 | 0);
                    $1819 = $1818;
                    HEAP32[$6 >> 2] = $1819;
                    $1820 = 1 << $1804;
                    $1821 = (($1820) + 1) | 0;
                    $1822 = $1821 & $1799;
                    $1823 = (32 - ($1804)) | 0;
                    $$sroa$336$62 = $1822; $$sroa$6907$0$$sroa$6907$16$$pre$i19682607 = $1818; $$sroa$6907$0$$sroa$6907$16$100619792457 = $1818; $$sroa$6907$0$$sroa$6907$16$10091933 = $1818; $$sroa$6907$0$$sroa$6907$16$101619532518 = $1818; $$sroa$6907$0$$sroa$6907$16$102319742497 = $1818; $$sroa$6907$0$$sroa$6907$16$102619582561 = $1818; $$sroa$6907$0$$sroa$6907$16$103019382401 = $1818; $$sroa$6907$0$$sroa$6907$16$103919482477 = $1818; $$sroa$6907$0$$sroa$6907$16$104219842419 = $1818; $$sroa$6907$0$$sroa$6907$16$98619692539 = $1818; $$sroa$6907$0$$sroa$6907$16$99219432438 = $1818; $$sroa$6907$0$$sroa$6907$16$99819632584 = $1818; $storemerge$i$i699 = $1823;
                }
                $1824 = HEAP8[$562 >> 0] | 0;
                $1825 = $1824 & 255;
                $1826 = ($storemerge$i$i699 | 0) > (1);
                if ($1826) {
                    $1827 = $$sroa$336$62 << 1;
                    $1828 = $1827 | $1825;
                    $1829 = (($storemerge$i$i699) + -1) | 0;
                    $$sroa$336$63 = $1828; $$sroa$6907$0$$sroa$6907$16$$pre$i19682606 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682607; $$sroa$6907$0$$sroa$6907$16$100619792456 = $$sroa$6907$0$$sroa$6907$16$100619792457; $$sroa$6907$0$$sroa$6907$16$101619532517 = $$sroa$6907$0$$sroa$6907$16$101619532518; $$sroa$6907$0$$sroa$6907$16$102319742496 = $$sroa$6907$0$$sroa$6907$16$102319742497; $$sroa$6907$0$$sroa$6907$16$102619582560 = $$sroa$6907$0$$sroa$6907$16$102619582561; $$sroa$6907$0$$sroa$6907$16$10301938 = $$sroa$6907$0$$sroa$6907$16$103019382401; $$sroa$6907$0$$sroa$6907$16$103919482476 = $$sroa$6907$0$$sroa$6907$16$103919482477; $$sroa$6907$0$$sroa$6907$16$10421984 = $$sroa$6907$0$$sroa$6907$16$104219842419; $$sroa$6907$0$$sroa$6907$16$98619692538 = $$sroa$6907$0$$sroa$6907$16$98619692539; $$sroa$6907$0$$sroa$6907$16$99219432437 = $$sroa$6907$0$$sroa$6907$16$99219432438; $$sroa$6907$0$$sroa$6907$16$99819632583 = $$sroa$6907$0$$sroa$6907$16$99819632584; $1850 = $1824; $storemerge$i$i696 = $1829;
                } else {
                    $1830 = (1 - ($storemerge$i$i699)) | 0;
                    $1831 = $$sroa$336$62 << $storemerge$i$i699;
                    $1832 = $1825 >>> $1830;
                    $1833 = $1832 | $1831;
                    $1834 = $1833 >>> 24;
                    $1835 = $1834 & 255;
                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10091933 >> 0] = $1835;
                    $1836 = $1833 >>> 16;
                    $1837 = $1836 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10101934 = HEAP32[$6 >> 2] | 0;
                    $1838 = ((($$sroa$6907$0$$sroa$6907$16$10101934)) + 1 | 0);
                    HEAP8[$1838 >> 0] = $1837;
                    $1839 = $1833 >>> 8;
                    $1840 = $1839 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10111935 = HEAP32[$6 >> 2] | 0;
                    $1841 = ((($$sroa$6907$0$$sroa$6907$16$10111935)) + 2 | 0);
                    HEAP8[$1841 >> 0] = $1840;
                    $1842 = $1833 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10251936 = HEAP32[$6 >> 2] | 0;
                    $1843 = ((($$sroa$6907$0$$sroa$6907$16$10251936)) + 3 | 0);
                    HEAP8[$1843 >> 0] = $1842;
                    $$sroa$6907$0$$sroa$6907$16$9271937 = HEAP32[$6 >> 2] | 0;
                    $1844 = ((($$sroa$6907$0$$sroa$6907$16$9271937)) + 4 | 0);
                    $1845 = $1844;
                    HEAP32[$6 >> 2] = $1845;
                    $1846 = 1 << $1830;
                    $1847 = (($1846) + 1) | 0;
                    $1848 = $1847 & $1825;
                    $1849 = (32 - ($1830)) | 0;
                    $$pre2399 = HEAP8[$562 >> 0] | 0;
                    $$sroa$336$63 = $1848; $$sroa$6907$0$$sroa$6907$16$$pre$i19682606 = $1844; $$sroa$6907$0$$sroa$6907$16$100619792456 = $1844; $$sroa$6907$0$$sroa$6907$16$101619532517 = $1844; $$sroa$6907$0$$sroa$6907$16$102319742496 = $1844; $$sroa$6907$0$$sroa$6907$16$102619582560 = $1844; $$sroa$6907$0$$sroa$6907$16$10301938 = $1844; $$sroa$6907$0$$sroa$6907$16$103919482476 = $1844; $$sroa$6907$0$$sroa$6907$16$10421984 = $1844; $$sroa$6907$0$$sroa$6907$16$98619692538 = $1844; $$sroa$6907$0$$sroa$6907$16$99219432437 = $1844; $$sroa$6907$0$$sroa$6907$16$99819632583 = $1844; $1850 = $$pre2399; $storemerge$i$i696 = $1849;
                }
                $1851 = ($1850 << 24 >> 24) == (0);
                do {
                    if ($1851) {
                        $$sroa$336$76 = $$sroa$336$63; $$sroa$6907$0$$sroa$6907$16$$pre$i19682602 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682606; $$sroa$6907$0$$sroa$6907$16$10261958 = $$sroa$6907$0$$sroa$6907$16$102619582560; $$sroa$6907$0$$sroa$6907$16$99819632579 = $$sroa$6907$0$$sroa$6907$16$99819632583; $$sroa$771$24 = $storemerge$i$i696;
                    } else {
                        $1852 = ((($7)) + 300 | 0);
                        $1853 = HEAP32[$1852 >> 2] | 0;
                        $1854 = (($1853) + 1) | 0;
                        $1855 = ($1853 >>> 0) < (256);
                        do {
                            if ($1855) {
                                $1856 = (8136 + ($1853 << 2) | 0);
                                $1857 = HEAP32[$1856 >> 2] | 0;
                                $1858 = ($storemerge$i$i696 | 0) > ($1857 | 0);
                                if ($1858) {
                                    $1859 = $$sroa$336$63 << $1857;
                                    $1860 = $1859 | $1854;
                                    $1861 = (($storemerge$i$i696) - ($1857)) | 0;
                                    $$sroa$336$66 = $1860; $$sroa$6907$0$$sroa$6907$16$$pre$i19682605 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682606; $$sroa$6907$0$$sroa$6907$16$10061979 = $$sroa$6907$0$$sroa$6907$16$100619792456; $$sroa$6907$0$$sroa$6907$16$101619532516 = $$sroa$6907$0$$sroa$6907$16$101619532517; $$sroa$6907$0$$sroa$6907$16$102319742495 = $$sroa$6907$0$$sroa$6907$16$102319742496; $$sroa$6907$0$$sroa$6907$16$102619582559 = $$sroa$6907$0$$sroa$6907$16$102619582560; $$sroa$6907$0$$sroa$6907$16$103919482475 = $$sroa$6907$0$$sroa$6907$16$103919482476; $$sroa$6907$0$$sroa$6907$16$98619692537 = $$sroa$6907$0$$sroa$6907$16$98619692538; $$sroa$6907$0$$sroa$6907$16$9921943 = $$sroa$6907$0$$sroa$6907$16$99219432437; $$sroa$6907$0$$sroa$6907$16$99819632582 = $$sroa$6907$0$$sroa$6907$16$99819632583; $$sroa$771$20 = $1861;
                                    break;
                                } else {
                                    $1862 = (($1857) - ($storemerge$i$i696)) | 0;
                                    $1863 = $$sroa$336$63 << $storemerge$i$i696;
                                    $1864 = $1854 >>> $1862;
                                    $1865 = $1864 | $1863;
                                    $1866 = $1865 >>> 24;
                                    $1867 = $1866 & 255;
                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10421984 >> 0] = $1867;
                                    $1868 = $1865 >>> 16;
                                    $1869 = $1868 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10141985 = HEAP32[$6 >> 2] | 0;
                                    $1870 = ((($$sroa$6907$0$$sroa$6907$16$10141985)) + 1 | 0);
                                    HEAP8[$1870 >> 0] = $1869;
                                    $1871 = $1865 >>> 8;
                                    $1872 = $1871 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9591986 = HEAP32[$6 >> 2] | 0;
                                    $1873 = ((($$sroa$6907$0$$sroa$6907$16$9591986)) + 2 | 0);
                                    HEAP8[$1873 >> 0] = $1872;
                                    $1874 = $1865 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10411987 = HEAP32[$6 >> 2] | 0;
                                    $1875 = ((($$sroa$6907$0$$sroa$6907$16$10411987)) + 3 | 0);
                                    HEAP8[$1875 >> 0] = $1874;
                                    $$sroa$6907$0$$sroa$6907$16$10401988 = HEAP32[$6 >> 2] | 0;
                                    $1876 = ((($$sroa$6907$0$$sroa$6907$16$10401988)) + 4 | 0);
                                    $1877 = $1876;
                                    HEAP32[$6 >> 2] = $1877;
                                    $1878 = 1 << $1862;
                                    $1879 = (($1878) + -1) | 0;
                                    $1880 = $1879 & $1854;
                                    $1881 = (32 - ($1862)) | 0;
                                    $$sroa$336$66 = $1880; $$sroa$6907$0$$sroa$6907$16$$pre$i19682605 = $1876; $$sroa$6907$0$$sroa$6907$16$10061979 = $1876; $$sroa$6907$0$$sroa$6907$16$101619532516 = $1876; $$sroa$6907$0$$sroa$6907$16$102319742495 = $1876; $$sroa$6907$0$$sroa$6907$16$102619582559 = $1876; $$sroa$6907$0$$sroa$6907$16$103919482475 = $1876; $$sroa$6907$0$$sroa$6907$16$98619692537 = $1876; $$sroa$6907$0$$sroa$6907$16$9921943 = $1876; $$sroa$6907$0$$sroa$6907$16$99819632582 = $1876; $$sroa$771$20 = $1881;
                                    break;
                                }
                            } else {
                                $1882 = ($1854 >>> 0) > (65535);
                                $1883 = $1854 >>> 16;
                                $$$i689 = $1882 ? $1883 : $1854;
                                $$2$i690 = $1882 ? 16 : 0;
                                $1884 = $$$i689 & 65280;
                                $1885 = ($1884 | 0) == (0);
                                $1886 = $$$i689 >>> 8;
                                $1887 = $$2$i690 | 8;
                                $$119$i691 = $1885 ? $$$i689 : $1886;
                                $$1$i692 = $1885 ? $$2$i690 : $1887;
                                $1888 = (($$119$i691) + -1) | 0;
                                $1889 = (8136 + ($1888 << 2) | 0);
                                $1890 = HEAP32[$1889 >> 2] | 0;
                                $1891 = $$1$i692 << 1;
                                $1892 = (($1890) + ($1891)) | 0;
                                $1893 = $1892 | 1;
                                $1894 = ($storemerge$i$i696 | 0) > ($1893 | 0);
                                if ($1894) {
                                    $1895 = $$sroa$336$63 << $1893;
                                    $1896 = $1895 | $1854;
                                    $1897 = (($storemerge$i$i696) - ($1893)) | 0;
                                    $$sroa$336$66 = $1896; $$sroa$6907$0$$sroa$6907$16$$pre$i19682605 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682606; $$sroa$6907$0$$sroa$6907$16$10061979 = $$sroa$6907$0$$sroa$6907$16$100619792456; $$sroa$6907$0$$sroa$6907$16$101619532516 = $$sroa$6907$0$$sroa$6907$16$101619532517; $$sroa$6907$0$$sroa$6907$16$102319742495 = $$sroa$6907$0$$sroa$6907$16$102319742496; $$sroa$6907$0$$sroa$6907$16$102619582559 = $$sroa$6907$0$$sroa$6907$16$102619582560; $$sroa$6907$0$$sroa$6907$16$103919482475 = $$sroa$6907$0$$sroa$6907$16$103919482476; $$sroa$6907$0$$sroa$6907$16$98619692537 = $$sroa$6907$0$$sroa$6907$16$98619692538; $$sroa$6907$0$$sroa$6907$16$9921943 = $$sroa$6907$0$$sroa$6907$16$99219432437; $$sroa$6907$0$$sroa$6907$16$99819632582 = $$sroa$6907$0$$sroa$6907$16$99819632583; $$sroa$771$20 = $1897;
                                    break;
                                } else {
                                    $1898 = (($1893) - ($storemerge$i$i696)) | 0;
                                    $1899 = $$sroa$336$63 << $storemerge$i$i696;
                                    $1900 = $1854 >>> $1898;
                                    $1901 = $1900 | $1899;
                                    $1902 = $1901 >>> 24;
                                    $1903 = $1902 & 255;
                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10301938 >> 0] = $1903;
                                    $1904 = $1901 >>> 16;
                                    $1905 = $1904 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10181939 = HEAP32[$6 >> 2] | 0;
                                    $1906 = ((($$sroa$6907$0$$sroa$6907$16$10181939)) + 1 | 0);
                                    HEAP8[$1906 >> 0] = $1905;
                                    $1907 = $1901 >>> 8;
                                    $1908 = $1907 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10171940 = HEAP32[$6 >> 2] | 0;
                                    $1909 = ((($$sroa$6907$0$$sroa$6907$16$10171940)) + 2 | 0);
                                    HEAP8[$1909 >> 0] = $1908;
                                    $1910 = $1901 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10081941 = HEAP32[$6 >> 2] | 0;
                                    $1911 = ((($$sroa$6907$0$$sroa$6907$16$10081941)) + 3 | 0);
                                    HEAP8[$1911 >> 0] = $1910;
                                    $$sroa$6907$0$$sroa$6907$16$10071942 = HEAP32[$6 >> 2] | 0;
                                    $1912 = ((($$sroa$6907$0$$sroa$6907$16$10071942)) + 4 | 0);
                                    $1913 = $1912;
                                    HEAP32[$6 >> 2] = $1913;
                                    $1914 = 1 << $1898;
                                    $1915 = (($1914) + -1) | 0;
                                    $1916 = $1915 & $1854;
                                    $1917 = (32 - ($1898)) | 0;
                                    $$sroa$336$66 = $1916; $$sroa$6907$0$$sroa$6907$16$$pre$i19682605 = $1912; $$sroa$6907$0$$sroa$6907$16$10061979 = $1912; $$sroa$6907$0$$sroa$6907$16$101619532516 = $1912; $$sroa$6907$0$$sroa$6907$16$102319742495 = $1912; $$sroa$6907$0$$sroa$6907$16$102619582559 = $1912; $$sroa$6907$0$$sroa$6907$16$103919482475 = $1912; $$sroa$6907$0$$sroa$6907$16$98619692537 = $1912; $$sroa$6907$0$$sroa$6907$16$9921943 = $1912; $$sroa$6907$0$$sroa$6907$16$99819632582 = $1912; $$sroa$771$20 = $1917;
                                    break;
                                }
                            }
                        } while (0);
                        $1918 = ((($7)) + 308 | 0);
                        $1919 = HEAP32[$1918 >> 2] | 0;
                        $1920 = (($1919) + 1) | 0;
                        $1921 = ($1919 >>> 0) < (256);
                        do {
                            if ($1921) {
                                $1922 = (8136 + ($1919 << 2) | 0);
                                $1923 = HEAP32[$1922 >> 2] | 0;
                                $1924 = ($$sroa$771$20 | 0) > ($1923 | 0);
                                if ($1924) {
                                    $1925 = $$sroa$336$66 << $1923;
                                    $1926 = $1925 | $1920;
                                    $1927 = (($$sroa$771$20) - ($1923)) | 0;
                                    $$sroa$336$69 = $1926; $$sroa$6907$0$$sroa$6907$16$$pre$i19682604 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682605; $$sroa$6907$0$$sroa$6907$16$101619532515 = $$sroa$6907$0$$sroa$6907$16$101619532516; $$sroa$6907$0$$sroa$6907$16$10231974 = $$sroa$6907$0$$sroa$6907$16$102319742495; $$sroa$6907$0$$sroa$6907$16$102619582558 = $$sroa$6907$0$$sroa$6907$16$102619582559; $$sroa$6907$0$$sroa$6907$16$10391948 = $$sroa$6907$0$$sroa$6907$16$103919482475; $$sroa$6907$0$$sroa$6907$16$98619692536 = $$sroa$6907$0$$sroa$6907$16$98619692537; $$sroa$6907$0$$sroa$6907$16$99819632581 = $$sroa$6907$0$$sroa$6907$16$99819632582; $$sroa$771$21 = $1927;
                                    break;
                                } else {
                                    $1928 = (($1923) - ($$sroa$771$20)) | 0;
                                    $1929 = $$sroa$336$66 << $$sroa$771$20;
                                    $1930 = $1920 >>> $1928;
                                    $1931 = $1930 | $1929;
                                    $1932 = $1931 >>> 24;
                                    $1933 = $1932 & 255;
                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10061979 >> 0] = $1933;
                                    $1934 = $1931 >>> 16;
                                    $1935 = $1934 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9851980 = HEAP32[$6 >> 2] | 0;
                                    $1936 = ((($$sroa$6907$0$$sroa$6907$16$9851980)) + 1 | 0);
                                    HEAP8[$1936 >> 0] = $1935;
                                    $1937 = $1931 >>> 8;
                                    $1938 = $1937 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9841981 = HEAP32[$6 >> 2] | 0;
                                    $1939 = ((($$sroa$6907$0$$sroa$6907$16$9841981)) + 2 | 0);
                                    HEAP8[$1939 >> 0] = $1938;
                                    $1940 = $1931 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9831982 = HEAP32[$6 >> 2] | 0;
                                    $1941 = ((($$sroa$6907$0$$sroa$6907$16$9831982)) + 3 | 0);
                                    HEAP8[$1941 >> 0] = $1940;
                                    $$sroa$6907$0$$sroa$6907$16$9821983 = HEAP32[$6 >> 2] | 0;
                                    $1942 = ((($$sroa$6907$0$$sroa$6907$16$9821983)) + 4 | 0);
                                    $1943 = $1942;
                                    HEAP32[$6 >> 2] = $1943;
                                    $1944 = 1 << $1928;
                                    $1945 = (($1944) + -1) | 0;
                                    $1946 = $1945 & $1920;
                                    $1947 = (32 - ($1928)) | 0;
                                    $$sroa$336$69 = $1946; $$sroa$6907$0$$sroa$6907$16$$pre$i19682604 = $1942; $$sroa$6907$0$$sroa$6907$16$101619532515 = $1942; $$sroa$6907$0$$sroa$6907$16$10231974 = $1942; $$sroa$6907$0$$sroa$6907$16$102619582558 = $1942; $$sroa$6907$0$$sroa$6907$16$10391948 = $1942; $$sroa$6907$0$$sroa$6907$16$98619692536 = $1942; $$sroa$6907$0$$sroa$6907$16$99819632581 = $1942; $$sroa$771$21 = $1947;
                                    break;
                                }
                            } else {
                                $1948 = ($1920 >>> 0) > (65535);
                                $1949 = $1920 >>> 16;
                                $$$i680 = $1948 ? $1949 : $1920;
                                $$2$i681 = $1948 ? 16 : 0;
                                $1950 = $$$i680 & 65280;
                                $1951 = ($1950 | 0) == (0);
                                $1952 = $$$i680 >>> 8;
                                $1953 = $$2$i681 | 8;
                                $$119$i682 = $1951 ? $$$i680 : $1952;
                                $$1$i683 = $1951 ? $$2$i681 : $1953;
                                $1954 = (($$119$i682) + -1) | 0;
                                $1955 = (8136 + ($1954 << 2) | 0);
                                $1956 = HEAP32[$1955 >> 2] | 0;
                                $1957 = $$1$i683 << 1;
                                $1958 = (($1956) + ($1957)) | 0;
                                $1959 = $1958 | 1;
                                $1960 = ($$sroa$771$20 | 0) > ($1959 | 0);
                                if ($1960) {
                                    $1961 = $$sroa$336$66 << $1959;
                                    $1962 = $1961 | $1920;
                                    $1963 = (($$sroa$771$20) - ($1959)) | 0;
                                    $$sroa$336$69 = $1962; $$sroa$6907$0$$sroa$6907$16$$pre$i19682604 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682605; $$sroa$6907$0$$sroa$6907$16$101619532515 = $$sroa$6907$0$$sroa$6907$16$101619532516; $$sroa$6907$0$$sroa$6907$16$10231974 = $$sroa$6907$0$$sroa$6907$16$102319742495; $$sroa$6907$0$$sroa$6907$16$102619582558 = $$sroa$6907$0$$sroa$6907$16$102619582559; $$sroa$6907$0$$sroa$6907$16$10391948 = $$sroa$6907$0$$sroa$6907$16$103919482475; $$sroa$6907$0$$sroa$6907$16$98619692536 = $$sroa$6907$0$$sroa$6907$16$98619692537; $$sroa$6907$0$$sroa$6907$16$99819632581 = $$sroa$6907$0$$sroa$6907$16$99819632582; $$sroa$771$21 = $1963;
                                    break;
                                } else {
                                    $1964 = (($1959) - ($$sroa$771$20)) | 0;
                                    $1965 = $$sroa$336$66 << $$sroa$771$20;
                                    $1966 = $1920 >>> $1964;
                                    $1967 = $1966 | $1965;
                                    $1968 = $1967 >>> 24;
                                    $1969 = $1968 & 255;
                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$9921943 >> 0] = $1969;
                                    $1970 = $1967 >>> 16;
                                    $1971 = $1970 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9931944 = HEAP32[$6 >> 2] | 0;
                                    $1972 = ((($$sroa$6907$0$$sroa$6907$16$9931944)) + 1 | 0);
                                    HEAP8[$1972 >> 0] = $1971;
                                    $1973 = $1967 >>> 8;
                                    $1974 = $1973 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9941945 = HEAP32[$6 >> 2] | 0;
                                    $1975 = ((($$sroa$6907$0$$sroa$6907$16$9941945)) + 2 | 0);
                                    HEAP8[$1975 >> 0] = $1974;
                                    $1976 = $1967 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$9771946 = HEAP32[$6 >> 2] | 0;
                                    $1977 = ((($$sroa$6907$0$$sroa$6907$16$9771946)) + 3 | 0);
                                    HEAP8[$1977 >> 0] = $1976;
                                    $$sroa$6907$0$$sroa$6907$16$10121947 = HEAP32[$6 >> 2] | 0;
                                    $1978 = ((($$sroa$6907$0$$sroa$6907$16$10121947)) + 4 | 0);
                                    $1979 = $1978;
                                    HEAP32[$6 >> 2] = $1979;
                                    $1980 = 1 << $1964;
                                    $1981 = (($1980) + -1) | 0;
                                    $1982 = $1981 & $1920;
                                    $1983 = (32 - ($1964)) | 0;
                                    $$sroa$336$69 = $1982; $$sroa$6907$0$$sroa$6907$16$$pre$i19682604 = $1978; $$sroa$6907$0$$sroa$6907$16$101619532515 = $1978; $$sroa$6907$0$$sroa$6907$16$10231974 = $1978; $$sroa$6907$0$$sroa$6907$16$102619582558 = $1978; $$sroa$6907$0$$sroa$6907$16$10391948 = $1978; $$sroa$6907$0$$sroa$6907$16$98619692536 = $1978; $$sroa$6907$0$$sroa$6907$16$99819632581 = $1978; $$sroa$771$21 = $1983;
                                    break;
                                }
                            }
                        } while (0);
                        $1984 = ((($7)) + 304 | 0);
                        $1985 = HEAP32[$1984 >> 2] | 0;
                        $1986 = (($1985) + 1) | 0;
                        $1987 = ($1985 >>> 0) < (256);
                        do {
                            if ($1987) {
                                $1988 = (8136 + ($1985 << 2) | 0);
                                $1989 = HEAP32[$1988 >> 2] | 0;
                                $1990 = ($$sroa$771$21 | 0) > ($1989 | 0);
                                if ($1990) {
                                    $1991 = $$sroa$336$69 << $1989;
                                    $1992 = $1991 | $1986;
                                    $1993 = (($$sroa$771$21) - ($1989)) | 0;
                                    $$sroa$336$72 = $1992; $$sroa$6907$0$$sroa$6907$16$$pre$i19682603 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682604; $$sroa$6907$0$$sroa$6907$16$10161953 = $$sroa$6907$0$$sroa$6907$16$101619532515; $$sroa$6907$0$$sroa$6907$16$102619582557 = $$sroa$6907$0$$sroa$6907$16$102619582558; $$sroa$6907$0$$sroa$6907$16$9861969 = $$sroa$6907$0$$sroa$6907$16$98619692536; $$sroa$6907$0$$sroa$6907$16$99819632580 = $$sroa$6907$0$$sroa$6907$16$99819632581; $$sroa$771$22 = $1993;
                                    break;
                                } else {
                                    $1994 = (($1989) - ($$sroa$771$21)) | 0;
                                    $1995 = $$sroa$336$69 << $$sroa$771$21;
                                    $1996 = $1986 >>> $1994;
                                    $1997 = $1996 | $1995;
                                    $1998 = $1997 >>> 24;
                                    $1999 = $1998 & 255;
                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10231974 >> 0] = $1999;
                                    $2000 = $1997 >>> 16;
                                    $2001 = $2000 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10281975 = HEAP32[$6 >> 2] | 0;
                                    $2002 = ((($$sroa$6907$0$$sroa$6907$16$10281975)) + 1 | 0);
                                    HEAP8[$2002 >> 0] = $2001;
                                    $2003 = $1997 >>> 8;
                                    $2004 = $2003 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10291976 = HEAP32[$6 >> 2] | 0;
                                    $2005 = ((($$sroa$6907$0$$sroa$6907$16$10291976)) + 2 | 0);
                                    HEAP8[$2005 >> 0] = $2004;
                                    $2006 = $1997 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10241977 = HEAP32[$6 >> 2] | 0;
                                    $2007 = ((($$sroa$6907$0$$sroa$6907$16$10241977)) + 3 | 0);
                                    HEAP8[$2007 >> 0] = $2006;
                                    $$sroa$6907$0$$sroa$6907$16$9281978 = HEAP32[$6 >> 2] | 0;
                                    $2008 = ((($$sroa$6907$0$$sroa$6907$16$9281978)) + 4 | 0);
                                    $2009 = $2008;
                                    HEAP32[$6 >> 2] = $2009;
                                    $2010 = 1 << $1994;
                                    $2011 = (($2010) + -1) | 0;
                                    $2012 = $2011 & $1986;
                                    $2013 = (32 - ($1994)) | 0;
                                    $$sroa$336$72 = $2012; $$sroa$6907$0$$sroa$6907$16$$pre$i19682603 = $2008; $$sroa$6907$0$$sroa$6907$16$10161953 = $2008; $$sroa$6907$0$$sroa$6907$16$102619582557 = $2008; $$sroa$6907$0$$sroa$6907$16$9861969 = $2008; $$sroa$6907$0$$sroa$6907$16$99819632580 = $2008; $$sroa$771$22 = $2013;
                                    break;
                                }
                            } else {
                                $2014 = ($1986 >>> 0) > (65535);
                                $2015 = $1986 >>> 16;
                                $$$i671 = $2014 ? $2015 : $1986;
                                $$2$i672 = $2014 ? 16 : 0;
                                $2016 = $$$i671 & 65280;
                                $2017 = ($2016 | 0) == (0);
                                $2018 = $$$i671 >>> 8;
                                $2019 = $$2$i672 | 8;
                                $$119$i673 = $2017 ? $$$i671 : $2018;
                                $$1$i674 = $2017 ? $$2$i672 : $2019;
                                $2020 = (($$119$i673) + -1) | 0;
                                $2021 = (8136 + ($2020 << 2) | 0);
                                $2022 = HEAP32[$2021 >> 2] | 0;
                                $2023 = $$1$i674 << 1;
                                $2024 = (($2022) + ($2023)) | 0;
                                $2025 = $2024 | 1;
                                $2026 = ($$sroa$771$21 | 0) > ($2025 | 0);
                                if ($2026) {
                                    $2027 = $$sroa$336$69 << $2025;
                                    $2028 = $2027 | $1986;
                                    $2029 = (($$sroa$771$21) - ($2025)) | 0;
                                    $$sroa$336$72 = $2028; $$sroa$6907$0$$sroa$6907$16$$pre$i19682603 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682604; $$sroa$6907$0$$sroa$6907$16$10161953 = $$sroa$6907$0$$sroa$6907$16$101619532515; $$sroa$6907$0$$sroa$6907$16$102619582557 = $$sroa$6907$0$$sroa$6907$16$102619582558; $$sroa$6907$0$$sroa$6907$16$9861969 = $$sroa$6907$0$$sroa$6907$16$98619692536; $$sroa$6907$0$$sroa$6907$16$99819632580 = $$sroa$6907$0$$sroa$6907$16$99819632581; $$sroa$771$22 = $2029;
                                    break;
                                } else {
                                    $2030 = (($2025) - ($$sroa$771$21)) | 0;
                                    $2031 = $$sroa$336$69 << $$sroa$771$21;
                                    $2032 = $1986 >>> $2030;
                                    $2033 = $2032 | $2031;
                                    $2034 = $2033 >>> 24;
                                    $2035 = $2034 & 255;
                                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10391948 >> 0] = $2035;
                                    $2036 = $2033 >>> 16;
                                    $2037 = $2036 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10381949 = HEAP32[$6 >> 2] | 0;
                                    $2038 = ((($$sroa$6907$0$$sroa$6907$16$10381949)) + 1 | 0);
                                    HEAP8[$2038 >> 0] = $2037;
                                    $2039 = $2033 >>> 8;
                                    $2040 = $2039 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10341950 = HEAP32[$6 >> 2] | 0;
                                    $2041 = ((($$sroa$6907$0$$sroa$6907$16$10341950)) + 2 | 0);
                                    HEAP8[$2041 >> 0] = $2040;
                                    $2042 = $2033 & 255;
                                    $$sroa$6907$0$$sroa$6907$16$10321951 = HEAP32[$6 >> 2] | 0;
                                    $2043 = ((($$sroa$6907$0$$sroa$6907$16$10321951)) + 3 | 0);
                                    HEAP8[$2043 >> 0] = $2042;
                                    $$sroa$6907$0$$sroa$6907$16$10311952 = HEAP32[$6 >> 2] | 0;
                                    $2044 = ((($$sroa$6907$0$$sroa$6907$16$10311952)) + 4 | 0);
                                    $2045 = $2044;
                                    HEAP32[$6 >> 2] = $2045;
                                    $2046 = 1 << $2030;
                                    $2047 = (($2046) + -1) | 0;
                                    $2048 = $2047 & $1986;
                                    $2049 = (32 - ($2030)) | 0;
                                    $$sroa$336$72 = $2048; $$sroa$6907$0$$sroa$6907$16$$pre$i19682603 = $2044; $$sroa$6907$0$$sroa$6907$16$10161953 = $2044; $$sroa$6907$0$$sroa$6907$16$102619582557 = $2044; $$sroa$6907$0$$sroa$6907$16$9861969 = $2044; $$sroa$6907$0$$sroa$6907$16$99819632580 = $2044; $$sroa$771$22 = $2049;
                                    break;
                                }
                            }
                        } while (0);
                        $2050 = ((($7)) + 312 | 0);
                        $2051 = HEAP32[$2050 >> 2] | 0;
                        $2052 = (($2051) + 1) | 0;
                        $2053 = ($2051 >>> 0) < (256);
                        if ($2053) {
                            $2054 = (8136 + ($2051 << 2) | 0);
                            $2055 = HEAP32[$2054 >> 2] | 0;
                            $2056 = ($$sroa$771$22 | 0) > ($2055 | 0);
                            if ($2056) {
                                $2057 = $$sroa$336$72 << $2055;
                                $2058 = $2057 | $2052;
                                $2059 = (($$sroa$771$22) - ($2055)) | 0;
                                $$sroa$336$76 = $2058; $$sroa$6907$0$$sroa$6907$16$$pre$i19682602 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682603; $$sroa$6907$0$$sroa$6907$16$10261958 = $$sroa$6907$0$$sroa$6907$16$102619582557; $$sroa$6907$0$$sroa$6907$16$99819632579 = $$sroa$6907$0$$sroa$6907$16$99819632580; $$sroa$771$24 = $2059;
                                break;
                            } else {
                                $2060 = (($2055) - ($$sroa$771$22)) | 0;
                                $2061 = $$sroa$336$72 << $$sroa$771$22;
                                $2062 = $2052 >>> $2060;
                                $2063 = $2062 | $2061;
                                $2064 = $2063 >>> 24;
                                $2065 = $2064 & 255;
                                HEAP8[$$sroa$6907$0$$sroa$6907$16$9861969 >> 0] = $2065;
                                $2066 = $2063 >>> 16;
                                $2067 = $2066 & 255;
                                $$sroa$6907$0$$sroa$6907$16$10191970 = HEAP32[$6 >> 2] | 0;
                                $2068 = ((($$sroa$6907$0$$sroa$6907$16$10191970)) + 1 | 0);
                                HEAP8[$2068 >> 0] = $2067;
                                $2069 = $2063 >>> 8;
                                $2070 = $2069 & 255;
                                $$sroa$6907$0$$sroa$6907$16$10131971 = HEAP32[$6 >> 2] | 0;
                                $2071 = ((($$sroa$6907$0$$sroa$6907$16$10131971)) + 2 | 0);
                                HEAP8[$2071 >> 0] = $2070;
                                $2072 = $2063 & 255;
                                $$sroa$6907$0$$sroa$6907$16$10211972 = HEAP32[$6 >> 2] | 0;
                                $2073 = ((($$sroa$6907$0$$sroa$6907$16$10211972)) + 3 | 0);
                                HEAP8[$2073 >> 0] = $2072;
                                $$sroa$6907$0$$sroa$6907$16$10221973 = HEAP32[$6 >> 2] | 0;
                                $2074 = ((($$sroa$6907$0$$sroa$6907$16$10221973)) + 4 | 0);
                                $2075 = $2074;
                                HEAP32[$6 >> 2] = $2075;
                                $2076 = 1 << $2060;
                                $2077 = (($2076) + -1) | 0;
                                $2078 = $2077 & $2052;
                                $2079 = (32 - ($2060)) | 0;
                                $$sroa$336$76 = $2078; $$sroa$6907$0$$sroa$6907$16$$pre$i19682602 = $2074; $$sroa$6907$0$$sroa$6907$16$10261958 = $2074; $$sroa$6907$0$$sroa$6907$16$99819632579 = $2074; $$sroa$771$24 = $2079;
                                break;
                            }
                        } else {
                            $2080 = ($2052 >>> 0) > (65535);
                            $2081 = $2052 >>> 16;
                            $$$i = $2080 ? $2081 : $2052;
                            $$2$i = $2080 ? 16 : 0;
                            $2082 = $$$i & 65280;
                            $2083 = ($2082 | 0) == (0);
                            $2084 = $$$i >>> 8;
                            $2085 = $$2$i | 8;
                            $$119$i = $2083 ? $$$i : $2084;
                            $$1$i = $2083 ? $$2$i : $2085;
                            $2086 = (($$119$i) + -1) | 0;
                            $2087 = (8136 + ($2086 << 2) | 0);
                            $2088 = HEAP32[$2087 >> 2] | 0;
                            $2089 = $$1$i << 1;
                            $2090 = (($2088) + ($2089)) | 0;
                            $2091 = $2090 | 1;
                            $2092 = ($$sroa$771$22 | 0) > ($2091 | 0);
                            if ($2092) {
                                $2093 = $$sroa$336$72 << $2091;
                                $2094 = $2093 | $2052;
                                $2095 = (($$sroa$771$22) - ($2091)) | 0;
                                $$sroa$336$76 = $2094; $$sroa$6907$0$$sroa$6907$16$$pre$i19682602 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682603; $$sroa$6907$0$$sroa$6907$16$10261958 = $$sroa$6907$0$$sroa$6907$16$102619582557; $$sroa$6907$0$$sroa$6907$16$99819632579 = $$sroa$6907$0$$sroa$6907$16$99819632580; $$sroa$771$24 = $2095;
                                break;
                            } else {
                                $2096 = (($2091) - ($$sroa$771$22)) | 0;
                                $2097 = $$sroa$336$72 << $$sroa$771$22;
                                $2098 = $2052 >>> $2096;
                                $2099 = $2098 | $2097;
                                $2100 = $2099 >>> 24;
                                $2101 = $2100 & 255;
                                HEAP8[$$sroa$6907$0$$sroa$6907$16$10161953 >> 0] = $2101;
                                $2102 = $2099 >>> 16;
                                $2103 = $2102 & 255;
                                $$sroa$6907$0$$sroa$6907$16$9871954 = HEAP32[$6 >> 2] | 0;
                                $2104 = ((($$sroa$6907$0$$sroa$6907$16$9871954)) + 1 | 0);
                                HEAP8[$2104 >> 0] = $2103;
                                $2105 = $2099 >>> 8;
                                $2106 = $2105 & 255;
                                $$sroa$6907$0$$sroa$6907$16$10271955 = HEAP32[$6 >> 2] | 0;
                                $2107 = ((($$sroa$6907$0$$sroa$6907$16$10271955)) + 2 | 0);
                                HEAP8[$2107 >> 0] = $2106;
                                $2108 = $2099 & 255;
                                $$sroa$6907$0$$sroa$6907$16$9811956 = HEAP32[$6 >> 2] | 0;
                                $2109 = ((($$sroa$6907$0$$sroa$6907$16$9811956)) + 3 | 0);
                                HEAP8[$2109 >> 0] = $2108;
                                $$sroa$6907$0$$sroa$6907$16$9801957 = HEAP32[$6 >> 2] | 0;
                                $2110 = ((($$sroa$6907$0$$sroa$6907$16$9801957)) + 4 | 0);
                                $2111 = $2110;
                                HEAP32[$6 >> 2] = $2111;
                                $2112 = 1 << $2096;
                                $2113 = (($2112) + -1) | 0;
                                $2114 = $2113 & $2052;
                                $2115 = (32 - ($2096)) | 0;
                                $$sroa$336$76 = $2114; $$sroa$6907$0$$sroa$6907$16$$pre$i19682602 = $2110; $$sroa$6907$0$$sroa$6907$16$10261958 = $2110; $$sroa$6907$0$$sroa$6907$16$99819632579 = $2110; $$sroa$771$24 = $2115;
                                break;
                            }
                        }
                    }
                } while (0);
                $2116 = ($$sroa$771$24 | 0) > (1);
                if ($2116) {
                    $2117 = $$sroa$336$76 << 1;
                    $$sink = -1; $$sroa$336$77 = $2117; $$sroa$6907$0$$sroa$6907$16$$pre$i1968 = $$sroa$6907$0$$sroa$6907$16$$pre$i19682602; $$sroa$6907$0$$sroa$6907$16$9981963 = $$sroa$6907$0$$sroa$6907$16$99819632579;
                } else {
                    $2118 = $$sroa$336$76 << $$sroa$771$24;
                    $2119 = $2118 >>> 24;
                    $2120 = $2119 & 255;
                    HEAP8[$$sroa$6907$0$$sroa$6907$16$10261958 >> 0] = $2120;
                    $2121 = $2118 >>> 16;
                    $2122 = $2121 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10361959 = HEAP32[$6 >> 2] | 0;
                    $2123 = ((($$sroa$6907$0$$sroa$6907$16$10361959)) + 1 | 0);
                    HEAP8[$2123 >> 0] = $2122;
                    $2124 = $2118 >>> 8;
                    $2125 = $2124 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10151960 = HEAP32[$6 >> 2] | 0;
                    $2126 = ((($$sroa$6907$0$$sroa$6907$16$10151960)) + 2 | 0);
                    HEAP8[$2126 >> 0] = $2125;
                    $2127 = $2118 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10431961 = HEAP32[$6 >> 2] | 0;
                    $2128 = ((($$sroa$6907$0$$sroa$6907$16$10431961)) + 3 | 0);
                    HEAP8[$2128 >> 0] = $2127;
                    $$sroa$6907$0$$sroa$6907$16$10201962 = HEAP32[$6 >> 2] | 0;
                    $2129 = ((($$sroa$6907$0$$sroa$6907$16$10201962)) + 4 | 0);
                    $2130 = $2129;
                    HEAP32[$6 >> 2] = $2130;
                    $$sink = 31; $$sroa$336$77 = 0; $$sroa$6907$0$$sroa$6907$16$$pre$i1968 = $2129; $$sroa$6907$0$$sroa$6907$16$9981963 = $2129;
                }
                $2131 = (($$sink) + ($$sroa$771$24)) | 0;
                $2132 = ($2131 | 0) > (1);
                if ($2132) {
                    $2133 = $$sroa$336$77 << 1;
                    $2134 = $2133 | 1;
                    $2135 = (($2131) + -1) | 0;
                    $$pre$phi1$i$pre$phiZ2DZZ2D = $6; $$sroa$336$78 = $2134; $2158 = $$sroa$6907$0$$sroa$6907$16$$pre$i1968; $storemerge$i$i$i = $2135;
                } else {
                    $2136 = (1 - ($2131)) | 0;
                    $2137 = $$sroa$336$77 << $2131;
                    $2138 = 1 >>> $2136;
                    $2139 = $2138 | $2137;
                    $2140 = $2139 >>> 24;
                    $2141 = $2140 & 255;
                    HEAP8[$$sroa$6907$0$$sroa$6907$16$9981963 >> 0] = $2141;
                    $2142 = $2139 >>> 16;
                    $2143 = $2142 & 255;
                    $$sroa$6907$0$$sroa$6907$16$9951964 = HEAP32[$6 >> 2] | 0;
                    $2144 = ((($$sroa$6907$0$$sroa$6907$16$9951964)) + 1 | 0);
                    HEAP8[$2144 >> 0] = $2143;
                    $2145 = $2139 >>> 8;
                    $2146 = $2145 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10021965 = HEAP32[$6 >> 2] | 0;
                    $2147 = ((($$sroa$6907$0$$sroa$6907$16$10021965)) + 2 | 0);
                    HEAP8[$2147 >> 0] = $2146;
                    $2148 = $2139 & 255;
                    $$sroa$6907$0$$sroa$6907$16$10041966 = HEAP32[$6 >> 2] | 0;
                    $2149 = ((($$sroa$6907$0$$sroa$6907$16$10041966)) + 3 | 0);
                    HEAP8[$2149 >> 0] = $2148;
                    $$sroa$6907$0$$sroa$6907$16$10051967 = HEAP32[$6 >> 2] | 0;
                    $2150 = ((($$sroa$6907$0$$sroa$6907$16$10051967)) + 4 | 0);
                    $2151 = $2150;
                    HEAP32[$6 >> 2] = $2151;
                    $2152 = ($2136 | 0) != (0);
                    $2153 = $2152 & 1;
                    $2154 = (32 - ($2136)) | 0;
                    $$pre$phi1$i$pre$phiZ2DZZ2D = $6; $$sroa$336$78 = $2153; $2158 = $2150; $storemerge$i$i$i = $2154;
                }
                $2155 = $$sroa$336$78 << $storemerge$i$i$i;
                $2156 = $2155 >>> 24;
                $2157 = $2156 & 255;
                HEAP8[$2158 >> 0] = $2157;
                $2159 = $2155 >>> 16;
                $2160 = $2159 & 255;
                $2161 = HEAP32[$$pre$phi1$i$pre$phiZ2DZZ2D >> 2] | 0;
                $2162 = ((($2161)) + 1 | 0);
                HEAP8[$2162 >> 0] = $2160;
                $2163 = $2155 >>> 8;
                $2164 = $2163 & 255;
                $2165 = HEAP32[$$pre$phi1$i$pre$phiZ2DZZ2D >> 2] | 0;
                $2166 = ((($2165)) + 2 | 0);
                HEAP8[$2166 >> 0] = $2164;
                $2167 = $2155 & 255;
                $2168 = HEAP32[$$pre$phi1$i$pre$phiZ2DZZ2D >> 2] | 0;
                $2169 = ((($2168)) + 3 | 0);
                HEAP8[$2169 >> 0] = $2167;
                $2170 = (($storemerge$i$i$i | 0) / 8) & -1;
                $2171 = (4 - ($2170)) | 0;
                $2172 = HEAP32[$$pre$phi1$i$pre$phiZ2DZZ2D >> 2] | 0;
                $2173 = (($2172) + ($2171) | 0);
                HEAP32[$$pre$phi1$i$pre$phiZ2DZZ2D >> 2] = $2173;
                $$sroa$6907$0$$sroa$6907$16$997$cast = $2173;
                $2174 = (($$sroa$6907$0$$sroa$6907$16$997$cast) - ($655)) | 0;
                $2175 = (((((($0)) + 247216 | 0) + (($238 * 136) | 0) | 0)) + 5 | 0);
                __ZN7WelsDec9RBSP2EBSPEPhS0_i($2175, $653, $2174);
                $$sroa$6907$0$$sroa$6907$16$996 = HEAP32[$6 >> 2] | 0;
                $2176 = (5 - ($655)) | 0;
                $2177 = (($2176) + ($$sroa$6907$0$$sroa$6907$16$996)) | 0;
                $2178 = $2177 & 65535;
                $2179 = (((((($0)) + 247216 | 0) + (($238 * 136) | 0) | 0)) + 132 | 0);
                HEAP16[$2179 >> 1] = $2178;
                __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($652, $653, 27995);
            }
        } while (0);
        L533: do {
            if ($11) {
                switch ($42 << 24 >> 24) {
                    case 83: case 86: {
                        break;
                    }
                    default: {
                        break L533;
                    }
                }
                $2183 = (__ZN7WelsDec15DecodeSpsSvcExtEPNS_21TagWelsDecoderContextEPNS_12TagSubsetSpsEPN10WelsCommon15TagBitStringAuxE($0, $7, $1) | 0);
                $2184 = ($2183 | 0) == (0);
                if (!($2184)) {
                    $$47 = -1;
                    STACKTOP = sp; return ($$47 | 0);
                }
                $2185 = HEAP32[$12 >> 2] | 0;
                $2186 = $2185 >>> 31;
                $2187 = HEAP32[$15 >> 2] | 0;
                $2188 = HEAP32[$1 >> 2] | 0;
                $2189 = HEAP32[$18 >> 2] | 0;
                $2190 = $2185 << 1;
                HEAP32[$12 >> 2] = $2190;
                $2191 = HEAP32[$21 >> 2] | 0;
                $2192 = (($2191) + 1) | 0;
                HEAP32[$21 >> 2] = $2192;
                $2193 = ($2191 | 0) > (-1);
                $2194 = $2189;
                do {
                    if ($2193) {
                        $2195 = (($2189) - ($2188)) | 0;
                        $2196 = (($2187) + 1) | 0;
                        $2197 = (($2196) - ($2188)) | 0;
                        $2198 = ($2195 | 0) > ($2197 | 0);
                        if ($2198) {
                            $$47 = 11;
                            STACKTOP = sp; return ($$47 | 0);
                        } else {
                            $2199 = HEAP8[$2194 >> 0] | 0;
                            $2200 = $2199 & 255;
                            $2201 = $2200 << 8;
                            $2202 = ((($2194)) + 1 | 0);
                            $2203 = HEAP8[$2202 >> 0] | 0;
                            $2204 = $2203 & 255;
                            $2205 = $2201 | $2204;
                            $2206 = $2205 << $2192;
                            $2207 = $2206 | $2190;
                            HEAP32[$12 >> 2] = $2207;
                            $2208 = (($2191) + -15) | 0;
                            HEAP32[$21 >> 2] = $2208;
                            $2209 = ((($2194)) + 2 | 0);
                            HEAP32[$18 >> 2] = $2209;
                            break;
                        }
                    }
                } while (0);
                HEAP32[$8 >> 2] = $2186;
                $2210 = ((($7)) + 860 | 0);
                $2211 = $2186 & 255;
                HEAP8[$2210 >> 0] = $2211;
                label = 331;
            } else {
                label = 331;
            }
        } while (0);
        L545: do {
            if ((label | 0) == 331) {
                switch ($42 << 24 >> 24) {
                    case 83: case 86: {
                        break;
                    }
                    default: {
                        break L545;
                    }
                }
                $2212 = ((($0)) + 241949 | 0);
                HEAP8[$2212 >> 0] = 0;
            }
        } while (0);
        $2213 = HEAP32[$442 >> 2] | 0;
        $2214 = $2213 << 4;
        HEAP32[$2 >> 2] = $2214;
        $2215 = HEAP32[$458 >> 2] | 0;
        $2216 = $2215 << 4;
        HEAP32[$3 >> 2] = $2216;
        $2217 = (((($0)) + 209452 | 0) + (($238 * 864) | 0) | 0);
        $2218 = (((($0)) + 6192 | 0) + (($238 * 832) | 0) | 0);
        $$0 = $11 ? $2217 : $2218;
        $2219 = (__ZN7WelsDec14CheckSpsActiveEPNS_21TagWelsDecoderContextEPNS_6TagSpsEb($0, $$0, $11) | 0);
        if (!($2219)) {
            if ($11) {
                $2271 = (((($0)) + 209452 | 0) + (($238 * 864) | 0) | 0);
                _memcpy(($2271 | 0), ($7 | 0), 864) | 0;
                $2272 = (((($0)) + 242004 | 0) + ($238) | 0);
                HEAP8[$2272 >> 0] = 1;
                $2273 = ((($0)) + 241955 | 0);
                HEAP8[$2273 >> 0] = 1;
                $$47 = 0;
                STACKTOP = sp; return ($$47 | 0);
            } else {
                _memcpy(($2218 | 0), ($7 | 0), 832) | 0;
                $2274 = (((($0)) + 241972 | 0) + ($238) | 0);
                HEAP8[$2274 >> 0] = 1;
                $2275 = ((($0)) + 241954 | 0);
                HEAP8[$2275 >> 0] = 1;
                $$47 = 0;
                STACKTOP = sp; return ($$47 | 0);
            }
        }
        if ($11) {
            $2220 = (((($0)) + 209452 | 0) + (($238 * 864) | 0) | 0);
            $2221 = (_memcmp($2220, $7, 864) | 0);
            $2222 = ($2221 | 0) == (0);
            if ($2222) {
                $$47 = 0;
                STACKTOP = sp; return ($$47 | 0);
            }
            $2223 = ((($0)) + 241888 | 0);
            $2224 = HEAP32[$2223 >> 2] | 0;
            $2225 = ((($2224)) + 4 | 0);
            $2226 = HEAP32[$2225 >> 2] | 0;
            $2227 = ($2226 | 0) == (0);
            if (!($2227)) {
                $2228 = ((($0)) + 237100 | 0);
                _memcpy(($2228 | 0), ($7 | 0), 864) | 0;
                $2229 = ((($0)) + 317168 | 0);
                HEAP8[$2229 >> 0] = 1;
                $2230 = HEAP32[$2225 >> 2] | 0;
                $2231 = (($2230) + -1) | 0;
                $2232 = ((($2224)) + 20 | 0);
                HEAP32[$2232 >> 2] = $2231;
                $2233 = ((($0)) + 242336 | 0);
                $2234 = HEAP32[$2233 >> 2] | 0;
                $2235 = $2234 | 4;
                HEAP32[$2233 >> 2] = $2235;
                $$47 = 0;
                STACKTOP = sp; return ($$47 | 0);
            }
            $2236 = ((($0)) + 241924 | 0);
            $2237 = HEAP32[$2236 >> 2] | 0;
            $2238 = ($2237 | 0) == (0 | 0);
            do {
                if (!($2238)) {
                    $2239 = HEAP32[$2237 >> 2] | 0;
                    $2240 = HEAP32[$7 >> 2] | 0;
                    $2241 = ($2239 | 0) == ($2240 | 0);
                    if (!($2241)) {
                        break;
                    }
                    $2242 = ((($0)) + 237100 | 0);
                    _memcpy(($2242 | 0), ($7 | 0), 864) | 0;
                    $2243 = ((($0)) + 242336 | 0);
                    $2244 = HEAP32[$2243 >> 2] | 0;
                    $2245 = $2244 | 4;
                    HEAP32[$2243 >> 2] = $2245;
                    $$47 = 0;
                    STACKTOP = sp; return ($$47 | 0);
                }
            } while (0);
            _memcpy(($2220 | 0), ($7 | 0), 864) | 0;
            $$47 = 0;
            STACKTOP = sp; return ($$47 | 0);
        } else {
            $2246 = (_memcmp($2218, $7, 832) | 0);
            $2247 = ($2246 | 0) == (0);
            if ($2247) {
                $$47 = 0;
                STACKTOP = sp; return ($$47 | 0);
            }
            $2248 = ((($0)) + 241888 | 0);
            $2249 = HEAP32[$2248 >> 2] | 0;
            $2250 = ((($2249)) + 4 | 0);
            $2251 = HEAP32[$2250 >> 2] | 0;
            $2252 = ($2251 | 0) == (0);
            if (!($2252)) {
                $2253 = ((($0)) + 32816 | 0);
                _memcpy(($2253 | 0), ($7 | 0), 832) | 0;
                $2254 = ((($0)) + 242336 | 0);
                $2255 = HEAP32[$2254 >> 2] | 0;
                $2256 = $2255 | 2;
                HEAP32[$2254 >> 2] = $2256;
                $2257 = ((($0)) + 317168 | 0);
                HEAP8[$2257 >> 0] = 1;
                $2258 = HEAP32[$2250 >> 2] | 0;
                $2259 = (($2258) + -1) | 0;
                $2260 = ((($2249)) + 20 | 0);
                HEAP32[$2260 >> 2] = $2259;
                $$47 = 0;
                STACKTOP = sp; return ($$47 | 0);
            }
            $2261 = ((($0)) + 241924 | 0);
            $2262 = HEAP32[$2261 >> 2] | 0;
            $2263 = ($2262 | 0) == (0 | 0);
            do {
                if (!($2263)) {
                    $2264 = HEAP32[$2262 >> 2] | 0;
                    $2265 = HEAP32[$7 >> 2] | 0;
                    $2266 = ($2264 | 0) == ($2265 | 0);
                    if (!($2266)) {
                        break;
                    }
                    $2267 = ((($0)) + 32816 | 0);
                    _memcpy(($2267 | 0), ($7 | 0), 832) | 0;
                    $2268 = ((($0)) + 242336 | 0);
                    $2269 = HEAP32[$2268 >> 2] | 0;
                    $2270 = $2269 | 2;
                    HEAP32[$2268 >> 2] = $2270;
                    $$47 = 0;
                    STACKTOP = sp; return ($$47 | 0);
                }
            } while (0);
            _memcpy(($2218 | 0), ($7 | 0), 832) | 0;
            $$47 = 0;
            STACKTOP = sp; return ($$47 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec8ParsePpsEPNS_21TagWelsDecoderContextEPNS_6TagPpsEPN10WelsCommon15TagBitStringAuxEPhi($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0 = 0, $$0293 = 0, $$0294424 = 0, $$25 = 0, $$neg$i = 0, $$neg5$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
        var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
        var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
        var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
        var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
        var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
        var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
        var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
        var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
        var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
        var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
        var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
        var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
        var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
        var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
        var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
        var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
        var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
        var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
        var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond21 = 0, $or$cond = 0, $or$cond427 = 0, $storemerge$i = 0;
        var $storemerge$i$off = 0, $storemerge$i358 = 0, $storemerge$i358$off = 0, $storemerge$i361 = 0, $storemerge$i364 = 0, $suba$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 736 | 0;
        $vararg_buffer13 = sp + 40 | 0;
        $vararg_buffer10 = sp + 32 | 0;
        $vararg_buffer7 = sp + 24 | 0;
        $vararg_buffer4 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $5 = sp + 732 | 0;
        $6 = sp + 48 | 0;
        $7 = sp + 44 | 0;
        $8 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $7) | 0);
        $9 = ($8 | 0) == (0);
        if (!($9)) {
            $$25 = $8;
            STACKTOP = sp; return ($$25 | 0);
        }
        $10 = HEAP32[$7 >> 2] | 0;
        $11 = ($10 >>> 0) > (255);
        if ($11) {
            $$25 = 1005;
            STACKTOP = sp; return ($$25 | 0);
        }
        _memset(($6 | 0), 0, 684) | 0;
        $12 = ((($6)) + 4 | 0);
        HEAP32[$12 >> 2] = $10;
        $13 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $7) | 0);
        $14 = ($13 | 0) == (0);
        if (!($14)) {
            $$25 = $13;
            STACKTOP = sp; return ($$25 | 0);
        }
        $15 = HEAP32[$7 >> 2] | 0;
        HEAP32[$6 >> 2] = $15;
        $16 = ($15 | 0) > (31);
        if ($16) {
            $$25 = 1004;
            STACKTOP = sp; return ($$25 | 0);
        }
        $17 = ((($2)) + 20 | 0);
        $18 = HEAP32[$17 >> 2] | 0;
        $19 = $18 >>> 31;
        $20 = ((($2)) + 4 | 0);
        $21 = HEAP32[$20 >> 2] | 0;
        $22 = HEAP32[$2 >> 2] | 0;
        $23 = ((($2)) + 16 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = $18 << 1;
        HEAP32[$17 >> 2] = $25;
        $26 = ((($2)) + 24 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = (($27) + 1) | 0;
        HEAP32[$26 >> 2] = $28;
        $29 = ($27 | 0) > (-1);
        $30 = $24;
        do {
            if ($29) {
                $31 = (($24) - ($22)) | 0;
                $32 = (($21) + 1) | 0;
                $33 = (($32) - ($22)) | 0;
                $34 = ($31 | 0) > ($33 | 0);
                if ($34) {
                    $$25 = 11;
                    STACKTOP = sp; return ($$25 | 0);
                } else {
                    $35 = HEAP8[$30 >> 0] | 0;
                    $36 = $35 & 255;
                    $37 = $36 << 8;
                    $38 = ((($30)) + 1 | 0);
                    $39 = HEAP8[$38 >> 0] | 0;
                    $40 = $39 & 255;
                    $41 = $37 | $40;
                    $42 = $41 << $28;
                    $43 = $42 | $25;
                    HEAP32[$17 >> 2] = $43;
                    $44 = (($27) + -15) | 0;
                    HEAP32[$26 >> 2] = $44;
                    $45 = ((($30)) + 2 | 0);
                    HEAP32[$23 >> 2] = $45;
                    $46 = $45;
                    $50 = $43; $53 = $44; $55 = $46;
                    break;
                }
            } else {
                $50 = $25; $53 = $28; $55 = $24;
            }
        } while (0);
        HEAP32[$7 >> 2] = $19;
        $47 = ((($6)) + 176 | 0);
        $48 = $19 & 255;
        HEAP8[$47 >> 0] = $48;
        $49 = $50 >>> 31;
        $51 = $50 << 1;
        HEAP32[$17 >> 2] = $51;
        $52 = (($53) + 1) | 0;
        HEAP32[$26 >> 2] = $52;
        $54 = ($53 | 0) > (-1);
        $56 = $55;
        do {
            if ($54) {
                $57 = (($55) - ($22)) | 0;
                $58 = (($21) + 1) | 0;
                $59 = (($58) - ($22)) | 0;
                $60 = ($57 | 0) > ($59 | 0);
                if ($60) {
                    $$25 = 11;
                    STACKTOP = sp; return ($$25 | 0);
                } else {
                    $61 = HEAP8[$56 >> 0] | 0;
                    $62 = $61 & 255;
                    $63 = $62 << 8;
                    $64 = ((($56)) + 1 | 0);
                    $65 = HEAP8[$64 >> 0] | 0;
                    $66 = $65 & 255;
                    $67 = $63 | $66;
                    $68 = $67 << $52;
                    $69 = $68 | $51;
                    HEAP32[$17 >> 2] = $69;
                    $70 = (($53) + -15) | 0;
                    HEAP32[$26 >> 2] = $70;
                    $71 = ((($56)) + 2 | 0);
                    HEAP32[$23 >> 2] = $71;
                    break;
                }
            }
        } while (0);
        HEAP32[$7 >> 2] = $49;
        $72 = ((($6)) + 177 | 0);
        $73 = $49 & 255;
        HEAP8[$72 >> 0] = $73;
        $74 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $7) | 0);
        $75 = ($74 | 0) == (0);
        if (!($75)) {
            $$25 = $74;
            STACKTOP = sp; return ($$25 | 0);
        }
        $76 = HEAP32[$7 >> 2] | 0;
        $77 = (($76) + 1) | 0;
        $78 = ((($6)) + 8 | 0);
        HEAP32[$78 >> 2] = $77;
        $79 = ($77 >>> 0) > (8);
        if ($79) {
            $$25 = 1013;
            STACKTOP = sp; return ($$25 | 0);
        }
        $80 = ($77 >>> 0) > (1);
        L31: do {
            if ($80) {
                $81 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $7) | 0);
                $82 = ($81 | 0) == (0);
                if (!($82)) {
                    $$25 = $81;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $83 = HEAP32[$7 >> 2] | 0;
                $84 = ((($6)) + 12 | 0);
                HEAP32[$84 >> 2] = $83;
                $85 = ($83 >>> 0) > (1);
                if ($85) {
                    HEAP32[$vararg_buffer >> 2] = $83;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 26573, $vararg_buffer);
                    $$25 = 263204;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $cond21 = ($83 | 0) == (0);
                $86 = HEAP32[$78 >> 2] | 0;
                $87 = ($86 | 0) != (0);
                $or$cond427 = $cond21 & $87;
                if ($or$cond427) {
                    $$0294424 = 0;
                    while (1) {
                        $88 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $7) | 0);
                        $89 = ($88 | 0) == (0);
                        if (!($89)) {
                            $$25 = $88;
                            break;
                        }
                        $90 = HEAP32[$7 >> 2] | 0;
                        $91 = (($90) + 1) | 0;
                        $92 = (((($6)) + 16 | 0) + ($$0294424 << 2) | 0);
                        HEAP32[$92 >> 2] = $91;
                        $93 = (($$0294424) + 1) | 0;
                        $94 = HEAP32[$78 >> 2] | 0;
                        $95 = ($93 >>> 0) < ($94 >>> 0);
                        if ($95) {
                            $$0294424 = $93;
                        } else {
                            break L31;
                        }
                    }
                    STACKTOP = sp; return ($$25 | 0);
                }
            }
        } while (0);
        $96 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $7) | 0);
        $97 = ($96 | 0) == (0);
        if (!($97)) {
            $$25 = $96;
            STACKTOP = sp; return ($$25 | 0);
        }
        $98 = HEAP32[$7 >> 2] | 0;
        $99 = (($98) + 1) | 0;
        $100 = ((($6)) + 152 | 0);
        HEAP32[$100 >> 2] = $99;
        $101 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $7) | 0);
        $102 = ($101 | 0) == (0);
        if (!($102)) {
            $$25 = $101;
            STACKTOP = sp; return ($$25 | 0);
        }
        $103 = HEAP32[$7 >> 2] | 0;
        $104 = (($103) + 1) | 0;
        $105 = ((($6)) + 156 | 0);
        HEAP32[$105 >> 2] = $104;
        $106 = HEAP32[$100 >> 2] | 0;
        $107 = ($106 >>> 0) > (16);
        $108 = ($104 >>> 0) > (16);
        $or$cond = $108 | $107;
        if ($or$cond) {
            $$25 = 1010;
            STACKTOP = sp; return ($$25 | 0);
        }
        $109 = HEAP32[$17 >> 2] | 0;
        $110 = $109 >>> 31;
        $111 = HEAP32[$20 >> 2] | 0;
        $112 = HEAP32[$2 >> 2] | 0;
        $113 = HEAP32[$23 >> 2] | 0;
        $114 = $109 << 1;
        HEAP32[$17 >> 2] = $114;
        $115 = HEAP32[$26 >> 2] | 0;
        $116 = (($115) + 1) | 0;
        HEAP32[$26 >> 2] = $116;
        $117 = ($115 | 0) > (-1);
        $118 = $113;
        do {
            if ($117) {
                $119 = (($113) - ($112)) | 0;
                $120 = (($111) + 1) | 0;
                $121 = (($120) - ($112)) | 0;
                $122 = ($119 | 0) > ($121 | 0);
                if ($122) {
                    $$25 = 11;
                    STACKTOP = sp; return ($$25 | 0);
                } else {
                    $123 = HEAP8[$118 >> 0] | 0;
                    $124 = $123 & 255;
                    $125 = $124 << 8;
                    $126 = ((($118)) + 1 | 0);
                    $127 = HEAP8[$126 >> 0] | 0;
                    $128 = $127 & 255;
                    $129 = $125 | $128;
                    $130 = $129 << $116;
                    $131 = $130 | $114;
                    HEAP32[$17 >> 2] = $131;
                    $132 = (($115) + -15) | 0;
                    HEAP32[$26 >> 2] = $132;
                    $133 = ((($118)) + 2 | 0);
                    HEAP32[$23 >> 2] = $133;
                    $134 = $133;
                    $138 = $131; $141 = $132; $143 = $134;
                    break;
                }
            } else {
                $138 = $114; $141 = $116; $143 = $113;
            }
        } while (0);
        HEAP32[$7 >> 2] = $110;
        $135 = ((($6)) + 182 | 0);
        $136 = $110 & 255;
        HEAP8[$135 >> 0] = $136;
        $137 = $138 >>> 30;
        $139 = $138 << 2;
        HEAP32[$17 >> 2] = $139;
        $140 = (($141) + 2) | 0;
        HEAP32[$26 >> 2] = $140;
        $142 = ($141 | 0) > (-2);
        $144 = $143;
        do {
            if ($142) {
                $145 = (($143) - ($112)) | 0;
                $146 = (($111) + 1) | 0;
                $147 = (($146) - ($112)) | 0;
                $148 = ($145 | 0) > ($147 | 0);
                if ($148) {
                    $$25 = 11;
                    STACKTOP = sp; return ($$25 | 0);
                } else {
                    $149 = HEAP8[$144 >> 0] | 0;
                    $150 = $149 & 255;
                    $151 = $150 << 8;
                    $152 = ((($144)) + 1 | 0);
                    $153 = HEAP8[$152 >> 0] | 0;
                    $154 = $153 & 255;
                    $155 = $151 | $154;
                    $156 = $155 << $140;
                    $157 = $156 | $139;
                    HEAP32[$17 >> 2] = $157;
                    $158 = (($141) + -14) | 0;
                    HEAP32[$26 >> 2] = $158;
                    $159 = ((($144)) + 2 | 0);
                    HEAP32[$23 >> 2] = $159;
                    break;
                }
            }
        } while (0);
        HEAP32[$7 >> 2] = $137;
        $160 = $137 & 255;
        $161 = ((($6)) + 183 | 0);
        HEAP8[$161 >> 0] = $160;
        $162 = ($137 | 0) == (0);
        if (!($162)) {
            HEAP32[$vararg_buffer1 >> 2] = $137;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 26630, $vararg_buffer1);
            $$25 = 263211;
            STACKTOP = sp; return ($$25 | 0);
        }
        $163 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $5) | 0);
        $164 = ($163 | 0) == (0);
        if (!($164)) {
            $$25 = $163;
            STACKTOP = sp; return ($$25 | 0);
        }
        $165 = HEAP32[$5 >> 2] | 0;
        $166 = $165 & 1;
        $167 = ($166 | 0) == (0);
        $168 = $165 >>> 1;
        $169 = (0 - ($168)) | 0;
        $170 = (($165) + 1) | 0;
        $171 = $170 >>> 1;
        $storemerge$i361 = $167 ? $169 : $171;
        $172 = (($storemerge$i361) + 26) | 0;
        $173 = ((($6)) + 160 | 0);
        HEAP32[$173 >> 2] = $172;
        $174 = ($172 >>> 0) > (51);
        if ($174) {
            HEAP32[$vararg_buffer4 >> 2] = $172;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 26683, $vararg_buffer4);
            $$25 = 263174;
            STACKTOP = sp; return ($$25 | 0);
        }
        $175 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $5) | 0);
        $176 = ($175 | 0) == (0);
        if (!($176)) {
            $$25 = $175;
            STACKTOP = sp; return ($$25 | 0);
        }
        $177 = HEAP32[$5 >> 2] | 0;
        $178 = $177 & 1;
        $179 = ($178 | 0) == (0);
        $180 = $177 >>> 1;
        $181 = (0 - ($180)) | 0;
        $182 = (($177) + 1) | 0;
        $183 = $182 >>> 1;
        $storemerge$i364 = $179 ? $181 : $183;
        $184 = (($storemerge$i364) + 26) | 0;
        $185 = ((($6)) + 164 | 0);
        HEAP32[$185 >> 2] = $184;
        $186 = ($184 >>> 0) > (51);
        if ($186) {
            HEAP32[$vararg_buffer7 >> 2] = $184;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 26726, $vararg_buffer7);
            $$25 = 263172;
            STACKTOP = sp; return ($$25 | 0);
        }
        $187 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $5) | 0);
        $188 = ($187 | 0) == (0);
        if (!($188)) {
            $$25 = $187;
            STACKTOP = sp; return ($$25 | 0);
        }
        $189 = HEAP32[$5 >> 2] | 0;
        $190 = $189 & 1;
        $191 = ($190 | 0) == (0);
        $192 = $189 >>> 1;
        $193 = (0 - ($192)) | 0;
        $194 = (($189) + 1) | 0;
        $195 = $194 >>> 1;
        $storemerge$i358 = $191 ? $193 : $195;
        $196 = ((($6)) + 168 | 0);
        HEAP32[$196 >> 2] = $storemerge$i358;
        $storemerge$i358$off = (($storemerge$i358) + 12) | 0;
        $197 = ($storemerge$i358$off >>> 0) > (24);
        if ($197) {
            HEAP32[$vararg_buffer10 >> 2] = $storemerge$i358;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 26769, $vararg_buffer10);
            $$25 = 263173;
            STACKTOP = sp; return ($$25 | 0);
        }
        $198 = ((($6)) + 172 | 0);
        HEAP32[$198 >> 2] = $storemerge$i358;
        $199 = HEAP32[$17 >> 2] | 0;
        $200 = $199 >>> 31;
        $201 = HEAP32[$20 >> 2] | 0;
        $202 = HEAP32[$2 >> 2] | 0;
        $203 = HEAP32[$23 >> 2] | 0;
        $204 = $199 << 1;
        HEAP32[$17 >> 2] = $204;
        $205 = HEAP32[$26 >> 2] | 0;
        $206 = (($205) + 1) | 0;
        HEAP32[$26 >> 2] = $206;
        $207 = ($205 | 0) > (-1);
        $208 = $203;
        do {
            if ($207) {
                $209 = (($203) - ($202)) | 0;
                $210 = (($201) + 1) | 0;
                $211 = (($210) - ($202)) | 0;
                $212 = ($209 | 0) > ($211 | 0);
                if ($212) {
                    $$25 = 11;
                    STACKTOP = sp; return ($$25 | 0);
                } else {
                    $213 = HEAP8[$208 >> 0] | 0;
                    $214 = $213 & 255;
                    $215 = $214 << 8;
                    $216 = ((($208)) + 1 | 0);
                    $217 = HEAP8[$216 >> 0] | 0;
                    $218 = $217 & 255;
                    $219 = $215 | $218;
                    $220 = $219 << $206;
                    $221 = $220 | $204;
                    HEAP32[$17 >> 2] = $221;
                    $222 = (($205) + -15) | 0;
                    HEAP32[$26 >> 2] = $222;
                    $223 = ((($208)) + 2 | 0);
                    HEAP32[$23 >> 2] = $223;
                    $224 = $223;
                    $228 = $221; $231 = $222; $233 = $224;
                    break;
                }
            } else {
                $228 = $204; $231 = $206; $233 = $203;
            }
        } while (0);
        HEAP32[$7 >> 2] = $200;
        $225 = ((($6)) + 179 | 0);
        $226 = $200 & 255;
        HEAP8[$225 >> 0] = $226;
        $227 = $228 >>> 31;
        $229 = $228 << 1;
        HEAP32[$17 >> 2] = $229;
        $230 = (($231) + 1) | 0;
        HEAP32[$26 >> 2] = $230;
        $232 = ($231 | 0) > (-1);
        $234 = $233;
        do {
            if ($232) {
                $235 = (($233) - ($202)) | 0;
                $236 = (($201) + 1) | 0;
                $237 = (($236) - ($202)) | 0;
                $238 = ($235 | 0) > ($237 | 0);
                if ($238) {
                    $$25 = 11;
                    STACKTOP = sp; return ($$25 | 0);
                } else {
                    $239 = HEAP8[$234 >> 0] | 0;
                    $240 = $239 & 255;
                    $241 = $240 << 8;
                    $242 = ((($234)) + 1 | 0);
                    $243 = HEAP8[$242 >> 0] | 0;
                    $244 = $243 & 255;
                    $245 = $241 | $244;
                    $246 = $245 << $230;
                    $247 = $246 | $229;
                    HEAP32[$17 >> 2] = $247;
                    $248 = (($231) + -15) | 0;
                    HEAP32[$26 >> 2] = $248;
                    $249 = ((($234)) + 2 | 0);
                    HEAP32[$23 >> 2] = $249;
                    $250 = $249;
                    $254 = $247; $257 = $248; $259 = $250;
                    break;
                }
            } else {
                $254 = $229; $257 = $230; $259 = $233;
            }
        } while (0);
        HEAP32[$7 >> 2] = $227;
        $251 = ((($6)) + 180 | 0);
        $252 = $227 & 255;
        HEAP8[$251 >> 0] = $252;
        $253 = $254 >>> 31;
        $255 = $254 << 1;
        HEAP32[$17 >> 2] = $255;
        $256 = (($257) + 1) | 0;
        HEAP32[$26 >> 2] = $256;
        $258 = ($257 | 0) > (-1);
        $260 = $259;
        do {
            if ($258) {
                $261 = (($259) - ($202)) | 0;
                $262 = (($201) + 1) | 0;
                $263 = (($262) - ($202)) | 0;
                $264 = ($261 | 0) > ($263 | 0);
                if ($264) {
                    $$25 = 11;
                    STACKTOP = sp; return ($$25 | 0);
                } else {
                    $265 = HEAP8[$260 >> 0] | 0;
                    $266 = $265 & 255;
                    $267 = $266 << 8;
                    $268 = ((($260)) + 1 | 0);
                    $269 = HEAP8[$268 >> 0] | 0;
                    $270 = $269 & 255;
                    $271 = $267 | $270;
                    $272 = $271 << $256;
                    $273 = $272 | $255;
                    HEAP32[$17 >> 2] = $273;
                    $274 = (($257) + -15) | 0;
                    HEAP32[$26 >> 2] = $274;
                    $275 = ((($260)) + 2 | 0);
                    HEAP32[$23 >> 2] = $275;
                    $276 = $275;
                    $281 = $276; $283 = $274; $287 = $273;
                    break;
                }
            } else {
                $281 = $259; $283 = $256; $287 = $255;
            }
        } while (0);
        HEAP32[$7 >> 2] = $253;
        $277 = ((($6)) + 181 | 0);
        $278 = $253 & 255;
        HEAP8[$277 >> 0] = $278;
        $279 = ((($2)) + 8 | 0);
        $280 = HEAP32[$279 >> 2] | 0;
        $suba$i = (($202) - ($281)) | 0;
        $$neg$i = $suba$i << 3;
        $$neg5$i = (($280) + 16) | 0;
        $282 = (($$neg5$i) - ($283)) | 0;
        $284 = (($282) + ($$neg$i)) | 0;
        $285 = ($284 | 0) > (1);
        do {
            if ($285) {
                $286 = $287 >>> 31;
                $288 = $287 << 1;
                HEAP32[$17 >> 2] = $288;
                $289 = (($283) + 1) | 0;
                HEAP32[$26 >> 2] = $289;
                $290 = ($283 | 0) > (-1);
                $291 = $281;
                do {
                    if ($290) {
                        $292 = (($281) - ($202)) | 0;
                        $293 = (1 - ($202)) | 0;
                        $294 = (($293) + ($201)) | 0;
                        $295 = ($292 | 0) > ($294 | 0);
                        if ($295) {
                            $$25 = 11;
                            STACKTOP = sp; return ($$25 | 0);
                        } else {
                            $296 = HEAP8[$291 >> 0] | 0;
                            $297 = $296 & 255;
                            $298 = $297 << 8;
                            $299 = ((($291)) + 1 | 0);
                            $300 = HEAP8[$299 >> 0] | 0;
                            $301 = $300 & 255;
                            $302 = $298 | $301;
                            $303 = $302 << $289;
                            $304 = $303 | $288;
                            HEAP32[$17 >> 2] = $304;
                            $305 = (($283) + -15) | 0;
                            HEAP32[$26 >> 2] = $305;
                            $306 = ((($291)) + 2 | 0);
                            HEAP32[$23 >> 2] = $306;
                            $307 = $306;
                            $311 = $304; $314 = $305; $316 = $307;
                            break;
                        }
                    } else {
                        $311 = $288; $314 = $289; $316 = $281;
                    }
                } while (0);
                HEAP32[$7 >> 2] = $286;
                $308 = ((($6)) + 184 | 0);
                $309 = $286 & 255;
                HEAP8[$308 >> 0] = $309;
                $310 = $311 >>> 31;
                $312 = $311 << 1;
                HEAP32[$17 >> 2] = $312;
                $313 = (($314) + 1) | 0;
                HEAP32[$26 >> 2] = $313;
                $315 = ($314 | 0) > (-1);
                $317 = $316;
                do {
                    if ($315) {
                        $318 = (($316) - ($202)) | 0;
                        $319 = (($201) + 1) | 0;
                        $320 = (($319) - ($202)) | 0;
                        $321 = ($318 | 0) > ($320 | 0);
                        if ($321) {
                            $$25 = 11;
                            STACKTOP = sp; return ($$25 | 0);
                        } else {
                            $322 = HEAP8[$317 >> 0] | 0;
                            $323 = $322 & 255;
                            $324 = $323 << 8;
                            $325 = ((($317)) + 1 | 0);
                            $326 = HEAP8[$325 >> 0] | 0;
                            $327 = $326 & 255;
                            $328 = $324 | $327;
                            $329 = $328 << $313;
                            $330 = $329 | $312;
                            HEAP32[$17 >> 2] = $330;
                            $331 = (($314) + -15) | 0;
                            HEAP32[$26 >> 2] = $331;
                            $332 = ((($317)) + 2 | 0);
                            HEAP32[$23 >> 2] = $332;
                            break;
                        }
                    }
                } while (0);
                HEAP32[$7 >> 2] = $310;
                $333 = ($310 | 0) == (0);
                $334 = ((($6)) + 185 | 0);
                $335 = $310 & 255;
                HEAP8[$334 >> 0] = $335;
                do {
                    if (!($333)) {
                        $336 = HEAP32[$6 >> 2] | 0;
                        $337 = (((($0)) + 241972 | 0) + ($336) | 0);
                        $338 = HEAP8[$337 >> 0] | 0;
                        $339 = ($338 << 24 >> 24) == (0);
                        if ($339) {
                            $346 = ((($0)) + 562525 | 0);
                            HEAP8[$346 >> 0] = 1;
                            $347 = ((($6)) + 186 | 0);
                            $348 = ((($6)) + 198 | 0);
                            $349 = ((($6)) + 294 | 0);
                            $350 = (__ZN7WelsDec16ParseScalingListEPNS_6TagSpsEPN10WelsCommon15TagBitStringAuxEbPbPA16_hPA64_h(0, $2, 1, $347, $348, $349) | 0);
                            $351 = ($350 | 0) == (0);
                            if ($351) {
                                break;
                            } else {
                                $$25 = $350;
                            }
                            STACKTOP = sp; return ($$25 | 0);
                        } else {
                            $340 = (((($0)) + 6192 | 0) + (($336 * 832) | 0) | 0);
                            $341 = ((($6)) + 186 | 0);
                            $342 = ((($6)) + 198 | 0);
                            $343 = ((($6)) + 294 | 0);
                            $344 = (__ZN7WelsDec16ParseScalingListEPNS_6TagSpsEPN10WelsCommon15TagBitStringAuxEbPbPA16_hPA64_h($340, $2, 1, $341, $342, $343) | 0);
                            $345 = ($344 | 0) == (0);
                            if ($345) {
                                break;
                            } else {
                                $$25 = $344;
                            }
                            STACKTOP = sp; return ($$25 | 0);
                        }
                    }
                } while (0);
                $352 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $5) | 0);
                $353 = ($352 | 0) == (0);
                if (!($353)) {
                    $$25 = $352;
                    STACKTOP = sp; return ($$25 | 0);
                }
                $354 = HEAP32[$5 >> 2] | 0;
                $355 = $354 & 1;
                $356 = ($355 | 0) == (0);
                $357 = $354 >>> 1;
                $358 = (0 - ($357)) | 0;
                $359 = (($354) + 1) | 0;
                $360 = $359 >>> 1;
                $storemerge$i = $356 ? $358 : $360;
                HEAP32[$198 >> 2] = $storemerge$i;
                $storemerge$i$off = (($storemerge$i) + 12) | 0;
                $361 = ($storemerge$i$off >>> 0) > (24);
                if (!($361)) {
                    break;
                }
                HEAP32[$vararg_buffer13 >> 2] = $storemerge$i;
                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 26769, $vararg_buffer13);
                $$25 = 263173;
                STACKTOP = sp; return ($$25 | 0);
            }
        } while (0);
        $362 = ((($0)) + 241888 | 0);
        $363 = HEAP32[$362 >> 2] | 0;
        $364 = ((($363)) + 4 | 0);
        $365 = HEAP32[$364 >> 2] | 0;
        $366 = ($365 | 0) == (0);
        L141: do {
            if ($366) {
                $386 = (((($0)) + 33648 | 0) + (($10 * 684) | 0) | 0);
                _memcpy(($386 | 0), ($6 | 0), 684) | 0;
                $387 = (((($0)) + 242036 | 0) + ($10) | 0);
                HEAP8[$387 >> 0] = 1;
            } else {
                $367 = HEAP32[$363 >> 2] | 0;
                $368 = (($365) + -1) | 0;
                $369 = (($367) + ($368 << 2) | 0);
                $370 = HEAP32[$369 >> 2] | 0;
                $371 = ((($370)) + 92 | 0);
                $372 = HEAP32[$371 >> 2] | 0;
                $373 = (((($0)) + 33648 | 0) + (($10 * 684) | 0) | 0);
                $374 = ($372 | 0) == ($373 | 0);
                do {
                    if ($374) {
                        $375 = (_memcmp($372, $6, 684) | 0);
                        $376 = ($375 | 0) == (0);
                        if ($376) {
                            break;
                        }
                        $377 = ((($0)) + 208752 | 0);
                        _memcpy(($377 | 0), ($6 | 0), 684) | 0;
                        $378 = ((($0)) + 242336 | 0);
                        $379 = HEAP32[$378 >> 2] | 0;
                        $380 = $379 | 1;
                        HEAP32[$378 >> 2] = $380;
                        $381 = ((($0)) + 317168 | 0);
                        HEAP8[$381 >> 0] = 1;
                        $382 = HEAP32[$364 >> 2] | 0;
                        $383 = (($382) + -1) | 0;
                        $384 = ((($363)) + 20 | 0);
                        HEAP32[$384 >> 2] = $383;
                        break L141;
                    }
                } while (0);
                _memcpy(($373 | 0), ($6 | 0), 684) | 0;
                $385 = (((($0)) + 242036 | 0) + ($10) | 0);
                HEAP8[$385 >> 0] = 1;
            }
        } while (0);
        $388 = ((($0)) + 242344 | 0);
        $389 = HEAP8[$388 >> 0] | 0;
        $390 = ($389 << 24 >> 24) == (0);
        if ($390) {
            $$25 = 0;
            STACKTOP = sp; return ($$25 | 0);
        }
        $391 = ($4 | 0) > (123);
        if ($391) {
            $392 = ((($0)) + 116 | 0);
            $393 = HEAP32[$392 >> 2] | 0;
            $394 = $393 | 16384;
            HEAP32[$392 >> 2] = $394;
            $$25 = 262145;
            STACKTOP = sp; return ($$25 | 0);
        }
        $395 = (((((($0)) + 282032 | 0) + (($10 * 136) | 0) | 0)) + 128 | 0);
        HEAP32[$395 >> 2] = $10;
        $$0293 = 0;
        while (1) {
            $396 = (($4) - ($$0293)) | 0;
            $397 = (($396) + -1) | 0;
            $398 = (($3) + ($397) | 0);
            $399 = HEAP8[$398 >> 0] | 0;
            $400 = ($399 << 24 >> 24) == (0);
            $401 = (($$0293) + 1) | 0;
            if ($400) {
                $$0293 = $401;
            } else {
                break;
            }
        }
        $402 = $396 & 65535;
        $403 = (((((($0)) + 282032 | 0) + (($10 * 136) | 0) | 0)) + 132 | 0);
        HEAP16[$403 >> 1] = $402;
        $404 = HEAP8[$3 >> 0] | 0;
        $405 = ($404 << 24 >> 24) == (0);
        do {
            if ($405) {
                $406 = ((($3)) + 1 | 0);
                $407 = HEAP8[$406 >> 0] | 0;
                $408 = ($407 << 24 >> 24) == (0);
                if (!($408)) {
                    $$0 = 0;
                    break;
                }
                $409 = ((($3)) + 2 | 0);
                $410 = HEAP8[$409 >> 0] | 0;
                $411 = ($410 << 24 >> 24) == (1);
                if (!($411)) {
                    $$0 = 0;
                    break;
                }
                $412 = (((($0)) + 282032 | 0) + (($10 * 136) | 0) | 0);
                HEAP8[$412 >> 0] = 0;
                $413 = (($402) + 1) << 16 >> 16;
                HEAP16[$403 >> 1] = $413;
                $$0 = 1;
            } else {
                $$0 = 0;
            }
        } while (0);
        $414 = ((((($0)) + 282032 | 0) + (($10 * 136) | 0) | 0) + ($$0) | 0);
        _memcpy(($414 | 0), ($3 | 0), ($396 | 0)) | 0;
        $$25 = 0;
        STACKTOP = sp; return ($$25 | 0);
    }
    function __ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $$0$i$ph = 0, $$0$i7678 = 0, $$074 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
        var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 20 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = $3 >>> 24;
        $5 = ($4 | 0) == (0);
        do {
            if ($5) {
                $9 = $3 >>> 16;
                $10 = ($9 | 0) == (0);
                if (!($10)) {
                    $11 = (15630 + ($9) | 0);
                    $12 = HEAP8[$11 >> 0] | 0;
                    $13 = $12 & 255;
                    $14 = (($13) + 8) | 0;
                    $$0$i$ph = $14;
                    break;
                }
                $15 = $3 >>> 8;
                $16 = ($15 | 0) == (0);
                if (!($16)) {
                    $17 = (15630 + ($15) | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    $20 = (($19) + 16) | 0;
                    $$0$i$ph = $20;
                    break;
                }
                $21 = ($3 | 0) == (0);
                if ($21) {
                    $$0 = 12;
                    return ($$0 | 0);
                } else {
                    $22 = (15630 + ($3) | 0);
                    $23 = HEAP8[$22 >> 0] | 0;
                    $24 = $23 & 255;
                    $25 = (($24) + 24) | 0;
                    $$0$i$ph = $25;
                    break;
                }
            } else {
                $6 = (15630 + ($4) | 0);
                $7 = HEAP8[$6 >> 0] | 0;
                $8 = $7 & 255;
                $$0$i$ph = $8;
            }
        } while (0);
        $26 = ((($0)) + 4 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = HEAP32[$0 >> 2] | 0;
        $29 = (($27) - ($28)) | 0;
        $30 = ($$0$i$ph | 0) > (16);
        $31 = ((($0)) + 16 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = (($32) - ($28)) | 0;
        $34 = $32;
        do {
            if ($30) {
                $35 = $3 << 16;
                HEAP32[$2 >> 2] = $35;
                $36 = ((($0)) + 24 | 0);
                $37 = HEAP32[$36 >> 2] | 0;
                $38 = (($37) + 16) | 0;
                HEAP32[$36 >> 2] = $38;
                $39 = ($37 | 0) > (-16);
                do {
                    if ($39) {
                        $40 = (($29) + 1) | 0;
                        $41 = ($33 | 0) > ($40 | 0);
                        if ($41) {
                            $$0 = 11;
                            return ($$0 | 0);
                        } else {
                            $42 = HEAP8[$34 >> 0] | 0;
                            $43 = $42 & 255;
                            $44 = $43 << 8;
                            $45 = ((($34)) + 1 | 0);
                            $46 = HEAP8[$45 >> 0] | 0;
                            $47 = $46 & 255;
                            $48 = $44 | $47;
                            $49 = $48 << $38;
                            $50 = $49 | $35;
                            HEAP32[$2 >> 2] = $50;
                            HEAP32[$36 >> 2] = $37;
                            $51 = ((($34)) + 2 | 0);
                            HEAP32[$31 >> 2] = $51;
                            $52 = $51;
                            $55 = $50; $57 = $37; $60 = $52; $64 = $51;
                            break;
                        }
                    } else {
                        $55 = $35; $57 = $38; $60 = $32; $64 = $34;
                    }
                } while (0);
                $53 = (($$0$i$ph) + -15) | 0;
                $54 = $55 << $53;
                HEAP32[$2 >> 2] = $54;
                $56 = (($57) + ($53)) | 0;
                HEAP32[$36 >> 2] = $56;
                $58 = ($56 | 0) > (0);
                if ($58) {
                    $59 = (($60) - ($28)) | 0;
                    $61 = (($29) + 1) | 0;
                    $62 = ($59 | 0) > ($61 | 0);
                    if ($62) {
                        $$0 = 11;
                        return ($$0 | 0);
                    } else {
                        $63 = HEAP8[$64 >> 0] | 0;
                        $65 = $63 & 255;
                        $66 = $65 << 8;
                        $67 = ((($64)) + 1 | 0);
                        $68 = HEAP8[$67 >> 0] | 0;
                        $69 = $68 & 255;
                        $70 = $66 | $69;
                        $71 = $70 << $56;
                        $72 = $71 | $54;
                        HEAP32[$2 >> 2] = $72;
                        $73 = (($56) + -16) | 0;
                        HEAP32[$36 >> 2] = $73;
                        $74 = ((($64)) + 2 | 0);
                        HEAP32[$31 >> 2] = $74;
                        $75 = $74;
                        $$pre$phiZ2D = $36; $102 = $73; $105 = $75; $109 = $74; $99 = $72;
                        label = 20;
                        break;
                    }
                } else {
                    $$pre$phiZ2D = $36; $102 = $56; $105 = $60; $109 = $64; $99 = $54;
                    label = 20;
                }
            } else {
                $76 = (($$0$i$ph) + 1) | 0;
                $77 = $3 << $76;
                HEAP32[$2 >> 2] = $77;
                $78 = ((($0)) + 24 | 0);
                $79 = HEAP32[$78 >> 2] | 0;
                $80 = (($79) + ($76)) | 0;
                HEAP32[$78 >> 2] = $80;
                $81 = ($80 | 0) > (0);
                do {
                    if ($81) {
                        $82 = (($29) + 1) | 0;
                        $83 = ($33 | 0) > ($82 | 0);
                        if ($83) {
                            $$0 = 11;
                            return ($$0 | 0);
                        } else {
                            $84 = HEAP8[$34 >> 0] | 0;
                            $85 = $84 & 255;
                            $86 = $85 << 8;
                            $87 = ((($34)) + 1 | 0);
                            $88 = HEAP8[$87 >> 0] | 0;
                            $89 = $88 & 255;
                            $90 = $86 | $89;
                            $91 = $90 << $80;
                            $92 = $91 | $77;
                            HEAP32[$2 >> 2] = $92;
                            $93 = (($80) + -16) | 0;
                            HEAP32[$78 >> 2] = $93;
                            $94 = ((($34)) + 2 | 0);
                            HEAP32[$31 >> 2] = $94;
                            $95 = $94;
                            $123 = $94; $124 = $93; $125 = $95; $126 = $92;
                            break;
                        }
                    } else {
                        $123 = $34; $124 = $80; $125 = $32; $126 = $77;
                    }
                } while (0);
                $96 = ($$0$i$ph | 0) == (0);
                if ($96) {
                    $$0$i7678 = 0; $$074 = 0;
                } else {
                    $$pre$phiZ2D = $78; $102 = $124; $105 = $125; $109 = $123; $99 = $126;
                    label = 20;
                }
            }
        } while (0);
        do {
            if ((label | 0) == 20) {
                $97 = (32 - ($$0$i$ph)) | 0;
                $98 = $99 >>> $97;
                $100 = $99 << $$0$i$ph;
                HEAP32[$2 >> 2] = $100;
                $101 = (($102) + ($$0$i$ph)) | 0;
                HEAP32[$$pre$phiZ2D >> 2] = $101;
                $103 = ($101 | 0) > (0);
                if ($103) {
                    $104 = (($105) - ($28)) | 0;
                    $106 = (($29) + 1) | 0;
                    $107 = ($104 | 0) > ($106 | 0);
                    if ($107) {
                        $$0 = 11;
                        return ($$0 | 0);
                    } else {
                        $108 = HEAP8[$109 >> 0] | 0;
                        $110 = $108 & 255;
                        $111 = $110 << 8;
                        $112 = ((($109)) + 1 | 0);
                        $113 = HEAP8[$112 >> 0] | 0;
                        $114 = $113 & 255;
                        $115 = $111 | $114;
                        $116 = $115 << $101;
                        $117 = $116 | $100;
                        HEAP32[$2 >> 2] = $117;
                        $118 = (($101) + -16) | 0;
                        HEAP32[$$pre$phiZ2D >> 2] = $118;
                        $119 = ((($109)) + 2 | 0);
                        HEAP32[$31 >> 2] = $119;
                        $$0$i7678 = $$0$i$ph; $$074 = $98;
                        break;
                    }
                } else {
                    $$0$i7678 = $$0$i$ph; $$074 = $98;
                }
            }
        } while (0);
        $120 = 1 << $$0$i7678;
        $121 = (($120) + -1) | 0;
        $122 = (($121) + ($$074)) | 0;
        HEAP32[$1 >> 2] = $122;
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec16ParseScalingListEPNS_6TagSpsEPN10WelsCommon15TagBitStringAuxEbPbPA16_hPA64_h($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$03953$i = 0, $$03953$us$i = 0, $$04052$i = 0, $$04052$us$i = 0, $$04151$i = 0, $$04151$us$i = 0, $$069 = 0, $$070$off0 = 0, $$075115 = 0, $$1 = 0, $$142$i = 0, $$142$us$i = 0, $$188 = 0, $$2 = 0, $$289 = 0, $$3$ph = 0, $$374 = 0, $$390$ph = 0, $$off$i = 0, $$off$us$i = 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
        var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
        var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge$i$i = 0, $storemerge$i$us$i = 0, dest = 0, label = 0, sp = 0;
        var src = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $6 = sp + 16 | 0;
        $7 = sp;
        $8 = ($0 | 0) == (0 | 0);
        if ($8) {
            $$069 = 12; $$070$off0 = 0;
        } else {
            $9 = ((($0)) + 318 | 0);
            $10 = HEAP8[$9 >> 0] | 0;
            $11 = ($10 << 24 >> 24) != (3);
            $12 = $11 ? 8 : 12;
            if ($2) {
                $13 = ((($0)) + 335 | 0);
                $14 = HEAP8[$13 >> 0] | 0;
                $15 = ($14 << 24 >> 24) != (0);
                $$069 = $12; $$070$off0 = $15;
            } else {
                $$069 = $12; $$070$off0 = 0;
            }
        }
        $16 = ((($0)) + 348 | 0);
        $17 = $$070$off0 ? $16 : 26810;
        HEAP32[$7 >> 2] = $17;
        $18 = ((($0)) + 396 | 0);
        $19 = $$070$off0 ? $18 : (26826);
        $20 = ((($7)) + 4 | 0);
        HEAP32[$20 >> 2] = $19;
        $21 = ((($0)) + 444 | 0);
        $22 = $$070$off0 ? $21 : 26842;
        $23 = ((($7)) + 8 | 0);
        HEAP32[$23 >> 2] = $22;
        $24 = ((($0)) + 508 | 0);
        $25 = $$070$off0 ? $24 : (26906);
        $26 = ((($7)) + 12 | 0);
        HEAP32[$26 >> 2] = $25;
        $27 = ((($1)) + 20 | 0);
        $28 = ((($1)) + 4 | 0);
        $29 = ((($1)) + 16 | 0);
        $30 = ((($1)) + 24 | 0);
        $$075115 = 0;
        L5: while (1) {
            $31 = HEAP32[$27 >> 2] | 0;
            $32 = $31 >>> 31;
            $33 = HEAP32[$28 >> 2] | 0;
            $34 = HEAP32[$1 >> 2] | 0;
            $35 = HEAP32[$29 >> 2] | 0;
            $36 = $31 << 1;
            HEAP32[$27 >> 2] = $36;
            $37 = HEAP32[$30 >> 2] | 0;
            $38 = (($37) + 1) | 0;
            HEAP32[$30 >> 2] = $38;
            $39 = ($37 | 0) > (-1);
            $40 = $35;
            if ($39) {
                $41 = (($35) - ($34)) | 0;
                $42 = (($33) + 1) | 0;
                $43 = (($42) - ($34)) | 0;
                $44 = ($41 | 0) > ($43 | 0);
                if ($44) {
                    $$374 = 11;
                    label = 36;
                    break;
                }
                $45 = HEAP8[$40 >> 0] | 0;
                $46 = $45 & 255;
                $47 = $46 << 8;
                $48 = ((($40)) + 1 | 0);
                $49 = HEAP8[$48 >> 0] | 0;
                $50 = $49 & 255;
                $51 = $47 | $50;
                $52 = $51 << $38;
                $53 = $52 | $36;
                HEAP32[$27 >> 2] = $53;
                $54 = (($37) + -15) | 0;
                HEAP32[$30 >> 2] = $54;
                $55 = ((($40)) + 2 | 0);
                HEAP32[$29 >> 2] = $55;
            }
            $56 = (($3) + ($$075115) | 0);
            $57 = $32 & 255;
            HEAP8[$56 >> 0] = $57;
            $58 = ($32 | 0) == (0);
            $59 = ($$075115 >>> 0) < (6);
            L11: do {
                if ($58) {
                    if ($59) {
                        $123 = (($4) + ($$075115 << 4) | 0);
                        switch ($$075115 | 0) {
                            case 0: case 3: {
                                $126 = (($$075115 >>> 0) / 3) & -1;
                                $127 = (($7) + ($126 << 2) | 0);
                                $128 = HEAP32[$127 >> 2] | 0;
                                dest = $123; src = $128; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                                break L11;
                                break;
                            }
                            default: {
                                $124 = (($$075115) + -1) | 0;
                                $125 = (($4) + ($124 << 4) | 0);
                                dest = $123; src = $125; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                                break L11;
                            }
                        }
                    } else {
                        $129 = $$075115 | 1;
                        $130 = ($129 | 0) == (7);
                        $131 = (($$075115) + -6) | 0;
                        $132 = (($5) + ($131 << 6) | 0);
                        if ($130) {
                            $133 = $$075115 & 1;
                            $134 = $133 | 2;
                            $135 = (($7) + ($134 << 2) | 0);
                            $136 = HEAP32[$135 >> 2] | 0;
                            dest = $132; src = $136; stop = dest + 64 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                            break;
                        } else {
                            $137 = (($$075115) + -8) | 0;
                            $138 = (($5) + ($137 << 6) | 0);
                            dest = $132; src = $138; stop = dest + 64 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                            break;
                        }
                    }
                } else {
                    if ($59) {
                        $60 = (($4) + ($$075115 << 4) | 0);
                        $$03953$us$i = 0; $$04052$us$i = 8; $$04151$us$i = 8; $$188 = 0;
                        while (1) {
                            $61 = ($$04151$us$i | 0) == (0);
                            if ($61) {
                                $$142$us$i = 0; $$289 = $$188;
                            } else {
                                $62 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $6) | 0);
                                $63 = ($62 | 0) == (0);
                                if (!($63)) {
                                    label = 16;
                                    break L5;
                                }
                                $64 = HEAP32[$6 >> 2] | 0;
                                $65 = $64 & 1;
                                $66 = ($65 | 0) == (0);
                                $67 = $64 >>> 1;
                                $68 = (0 - ($67)) | 0;
                                $69 = (($64) + 1) | 0;
                                $70 = $69 >>> 1;
                                $storemerge$i$us$i = $66 ? $68 : $70;
                                $$off$us$i = (($storemerge$i$us$i) + 128) | 0;
                                $71 = ($$off$us$i >>> 0) > (255);
                                if ($71) {
                                    $$374 = 10013;
                                    label = 36;
                                    break L5;
                                }
                                $72 = $$04052$us$i | 256;
                                $73 = (($storemerge$i$us$i) + ($72)) | 0;
                                $74 = (($73 | 0) % 256) & -1;
                                $75 = $74 | $$03953$us$i;
                                $76 = ($75 | 0) == (0);
                                $77 = $76 & 1;
                                if ($76) {
                                    $$390$ph = $77;
                                    break;
                                } else {
                                    $$142$us$i = $74; $$289 = $77;
                                }
                            }
                            $78 = (26970 + ($$03953$us$i) | 0);
                            $79 = HEAP8[$78 >> 0] | 0;
                            $80 = $79 & 255;
                            $81 = ($$142$us$i | 0) == (0);
                            $82 = $81 ? $$04052$us$i : $$142$us$i;
                            $83 = $82 & 255;
                            $84 = ((($4) + ($$075115 << 4) | 0) + ($80) | 0);
                            HEAP8[$84 >> 0] = $83;
                            $85 = $82 & 255;
                            $86 = (($$03953$us$i) + 1) | 0;
                            $87 = ($$03953$us$i | 0) < (15);
                            if ($87) {
                                $$03953$us$i = $86; $$04052$us$i = $85; $$04151$us$i = $$142$us$i; $$188 = $$289;
                            } else {
                                $$390$ph = $$289;
                                break;
                            }
                        }
                        $88 = ($$390$ph << 24 >> 24) == (0);
                        if ($88) {
                            break;
                        }
                        $89 = (($$075115 >>> 0) / 3) & -1;
                        $90 = (26810 + ($89 << 4) | 0);
                        dest = $60; src = $90; stop = dest + 16 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                        break;
                    } else {
                        $91 = (($$075115) + -6) | 0;
                        $92 = (($5) + ($91 << 6) | 0);
                        $$03953$i = 0; $$04052$i = 8; $$04151$i = 8; $$1 = 0;
                        while (1) {
                            $93 = ($$04151$i | 0) == (0);
                            if ($93) {
                                $$142$i = 0; $$2 = $$1;
                            } else {
                                $94 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($1, $6) | 0);
                                $95 = ($94 | 0) == (0);
                                if (!($95)) {
                                    label = 22;
                                    break L5;
                                }
                                $96 = HEAP32[$6 >> 2] | 0;
                                $97 = $96 & 1;
                                $98 = ($97 | 0) == (0);
                                $99 = $96 >>> 1;
                                $100 = (0 - ($99)) | 0;
                                $101 = (($96) + 1) | 0;
                                $102 = $101 >>> 1;
                                $storemerge$i$i = $98 ? $100 : $102;
                                $$off$i = (($storemerge$i$i) + 128) | 0;
                                $103 = ($$off$i >>> 0) > (255);
                                if ($103) {
                                    $$374 = 10013;
                                    label = 36;
                                    break L5;
                                }
                                $104 = $$04052$i | 256;
                                $105 = (($storemerge$i$i) + ($104)) | 0;
                                $106 = (($105 | 0) % 256) & -1;
                                $107 = $106 | $$03953$i;
                                $108 = ($107 | 0) == (0);
                                $109 = $108 & 1;
                                if ($108) {
                                    $$3$ph = $109;
                                    break;
                                } else {
                                    $$142$i = $106; $$2 = $109;
                                }
                            }
                            $110 = (26986 + ($$03953$i) | 0);
                            $111 = HEAP8[$110 >> 0] | 0;
                            $112 = $111 & 255;
                            $113 = ($$142$i | 0) == (0);
                            $114 = $113 ? $$04052$i : $$142$i;
                            $115 = $114 & 255;
                            $116 = ((($5) + ($91 << 6) | 0) + ($112) | 0);
                            HEAP8[$116 >> 0] = $115;
                            $117 = $114 & 255;
                            $118 = (($$03953$i) + 1) | 0;
                            $119 = ($$03953$i | 0) < (63);
                            if ($119) {
                                $$03953$i = $118; $$04052$i = $117; $$04151$i = $$142$i; $$1 = $$2;
                            } else {
                                $$3$ph = $$2;
                                break;
                            }
                        }
                        $120 = ($$3$ph << 24 >> 24) == (0);
                        if ($120) {
                            break;
                        }
                        $121 = $91 & 1;
                        $122 = (26842 + ($121 << 6) | 0);
                        dest = $92; src = $122; stop = dest + 64 | 0; do { HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; dest = dest + 1 | 0; src = src + 1 | 0; } while ((dest | 0) < (stop | 0));
                        break;
                    }
                }
            } while (0);
            $139 = (($$075115) + 1) | 0;
            $140 = ($139 >>> 0) < ($$069 >>> 0);
            if ($140) {
                $$075115 = $139;
            } else {
                $$374 = 0;
                label = 36;
                break;
            }
        }
        if ((label | 0) == 16) {
            $$374 = $62;
            STACKTOP = sp; return ($$374 | 0);
        }
        else if ((label | 0) == 22) {
            $$374 = $94;
            STACKTOP = sp; return ($$374 | 0);
        }
        else if ((label | 0) == 36) {
            STACKTOP = sp; return ($$374 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec9RBSP2EBSPEPhS0_i($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$01923 = 0, $$02022 = 0, $$024 = 0, $$1 = 0, $$121 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = (($1) + ($2) | 0);
        $4 = ($2 | 0) > (0);
        if ($4) {
            $$01923 = $1; $$02022 = $0; $$024 = 0;
        } else {
            return;
        }
        while (1) {
            $5 = ($$024 | 0) == (2);
            if ($5) {
                $6 = HEAP8[$$01923 >> 0] | 0;
                $7 = ($6 & 255) < (4);
                if ($7) {
                    $8 = ((($$02022)) + 1 | 0);
                    HEAP8[$$02022 >> 0] = 3;
                    $$1 = 0; $$121 = $8;
                } else {
                    $$1 = 2; $$121 = $$02022;
                }
            } else {
                $$1 = $$024; $$121 = $$02022;
            }
            $9 = HEAP8[$$01923 >> 0] | 0;
            $10 = ($9 << 24 >> 24) == (0);
            $11 = (($$1) + 1) | 0;
            $$2 = $10 ? $11 : 0;
            $12 = ((($$01923)) + 1 | 0);
            $13 = ((($$121)) + 1 | 0);
            HEAP8[$$121 >> 0] = $9;
            $14 = ($12 >>> 0) < ($3 >>> 0);
            if ($14) {
                $$01923 = $12; $$02022 = $13; $$024 = $$2;
            } else {
                break;
            }
        }
        return;
    }
    function __ZN7WelsDec15DecodeSpsSvcExtEPNS_21TagWelsDecoderContextEPNS_12TagSubsetSpsEPN10WelsCommon15TagBitStringAuxE($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$16 = 0, $$lobit = 0, $$lobit267 = 0, $$lobit268 = 0, $$lobit269 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
        var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
        var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
        var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
        var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
        var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
        var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
        var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
        var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
        var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
        var $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
        var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
        var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge$i = 0, $storemerge$i$off = 0;
        var $storemerge$i175 = 0, $storemerge$i175$off = 0, $storemerge$i180 = 0, $storemerge$i180$off = 0, $storemerge$i185 = 0, $storemerge$i185$off = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $vararg_buffer10 = sp + 32 | 0;
        $vararg_buffer7 = sp + 24 | 0;
        $vararg_buffer4 = sp + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $3 = sp + 36 | 0;
        $4 = ((($1)) + 832 | 0);
        $5 = ((($2)) + 20 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ((($2)) + 4 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = HEAP32[$2 >> 2] | 0;
        $10 = ((($2)) + 16 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = $6 << 1;
        HEAP32[$5 >> 2] = $12;
        $13 = ((($2)) + 24 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = (($14) + 1) | 0;
        HEAP32[$13 >> 2] = $15;
        $16 = ($14 | 0) > (-1);
        $17 = $11;
        do {
            if ($16) {
                $18 = (($11) - ($9)) | 0;
                $19 = (($8) + 1) | 0;
                $20 = (($19) - ($9)) | 0;
                $21 = ($18 | 0) > ($20 | 0);
                if ($21) {
                    $$16 = 11;
                    STACKTOP = sp; return ($$16 | 0);
                } else {
                    $22 = HEAP8[$17 >> 0] | 0;
                    $23 = $22 & 255;
                    $24 = $23 << 8;
                    $25 = ((($17)) + 1 | 0);
                    $26 = HEAP8[$25 >> 0] | 0;
                    $27 = $26 & 255;
                    $28 = $24 | $27;
                    $29 = $28 << $15;
                    $30 = $29 | $12;
                    HEAP32[$5 >> 2] = $30;
                    $31 = (($14) + -15) | 0;
                    HEAP32[$13 >> 2] = $31;
                    $32 = ((($17)) + 2 | 0);
                    HEAP32[$10 >> 2] = $32;
                    break;
                }
            }
        } while (0);
        $33 = ((($1)) + 853 | 0);
        $$lobit = $6 >>> 31;
        $34 = $$lobit & 255;
        HEAP8[$33 >> 0] = $34;
        $35 = HEAP32[$5 >> 2] | 0;
        $36 = $35 >>> 30;
        $37 = HEAP32[$7 >> 2] | 0;
        $38 = HEAP32[$2 >> 2] | 0;
        $39 = HEAP32[$10 >> 2] | 0;
        $40 = $35 << 2;
        HEAP32[$5 >> 2] = $40;
        $41 = HEAP32[$13 >> 2] | 0;
        $42 = (($41) + 2) | 0;
        HEAP32[$13 >> 2] = $42;
        $43 = ($41 | 0) > (-2);
        $44 = $39;
        do {
            if ($43) {
                $45 = (($39) - ($38)) | 0;
                $46 = (($37) + 1) | 0;
                $47 = (($46) - ($38)) | 0;
                $48 = ($45 | 0) > ($47 | 0);
                if ($48) {
                    $$16 = 11;
                    STACKTOP = sp; return ($$16 | 0);
                } else {
                    $49 = HEAP8[$44 >> 0] | 0;
                    $50 = $49 & 255;
                    $51 = $50 << 8;
                    $52 = ((($44)) + 1 | 0);
                    $53 = HEAP8[$52 >> 0] | 0;
                    $54 = $53 & 255;
                    $55 = $51 | $54;
                    $56 = $55 << $42;
                    $57 = $56 | $40;
                    HEAP32[$5 >> 2] = $57;
                    $58 = (($41) + -14) | 0;
                    HEAP32[$13 >> 2] = $58;
                    $59 = ((($44)) + 2 | 0);
                    HEAP32[$10 >> 2] = $59;
                    break;
                }
            }
        } while (0);
        $60 = $36 & 255;
        $61 = ((($1)) + 848 | 0);
        HEAP8[$61 >> 0] = $60;
        $62 = ($36 | 0) == (3);
        if ($62) {
            HEAP32[$vararg_buffer >> 2] = 3;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28023, $vararg_buffer);
            $$16 = 263220;
            STACKTOP = sp; return ($$16 | 0);
        }
        $63 = ((($1)) + 849 | 0);
        HEAP8[$63 >> 0] = 0;
        $64 = ((($1)) + 850 | 0);
        HEAP8[$64 >> 0] = 1;
        $65 = HEAP32[$5 >> 2] | 0;
        $66 = $65 >>> 31;
        $67 = HEAP32[$7 >> 2] | 0;
        $68 = HEAP32[$2 >> 2] | 0;
        $69 = HEAP32[$10 >> 2] | 0;
        $70 = $65 << 1;
        HEAP32[$5 >> 2] = $70;
        $71 = HEAP32[$13 >> 2] | 0;
        $72 = (($71) + 1) | 0;
        HEAP32[$13 >> 2] = $72;
        $73 = ($71 | 0) > (-1);
        $74 = $69;
        do {
            if ($73) {
                $75 = (($69) - ($68)) | 0;
                $76 = (($67) + 1) | 0;
                $77 = (($76) - ($68)) | 0;
                $78 = ($75 | 0) > ($77 | 0);
                if ($78) {
                    $$16 = 11;
                    STACKTOP = sp; return ($$16 | 0);
                } else {
                    $79 = HEAP8[$74 >> 0] | 0;
                    $80 = $79 & 255;
                    $81 = $80 << 8;
                    $82 = ((($74)) + 1 | 0);
                    $83 = HEAP8[$82 >> 0] | 0;
                    $84 = $83 & 255;
                    $85 = $81 | $84;
                    $86 = $85 << $72;
                    $87 = $86 | $70;
                    HEAP32[$5 >> 2] = $87;
                    $88 = (($71) + -15) | 0;
                    HEAP32[$13 >> 2] = $88;
                    $89 = ((($74)) + 2 | 0);
                    HEAP32[$10 >> 2] = $89;
                    break;
                }
            }
        } while (0);
        $90 = $66 & 255;
        HEAP8[$63 >> 0] = $90;
        $91 = HEAP32[$5 >> 2] | 0;
        $92 = $91 >>> 30;
        $93 = HEAP32[$7 >> 2] | 0;
        $94 = HEAP32[$2 >> 2] | 0;
        $95 = HEAP32[$10 >> 2] | 0;
        $96 = $91 << 2;
        HEAP32[$5 >> 2] = $96;
        $97 = HEAP32[$13 >> 2] | 0;
        $98 = (($97) + 2) | 0;
        HEAP32[$13 >> 2] = $98;
        $99 = ($97 | 0) > (-2);
        $100 = $95;
        do {
            if ($99) {
                $101 = (($95) - ($94)) | 0;
                $102 = (($93) + 1) | 0;
                $103 = (($102) - ($94)) | 0;
                $104 = ($101 | 0) > ($103 | 0);
                if ($104) {
                    $$16 = 11;
                    STACKTOP = sp; return ($$16 | 0);
                } else {
                    $105 = HEAP8[$100 >> 0] | 0;
                    $106 = $105 & 255;
                    $107 = $106 << 8;
                    $108 = ((($100)) + 1 | 0);
                    $109 = HEAP8[$108 >> 0] | 0;
                    $110 = $109 & 255;
                    $111 = $107 | $110;
                    $112 = $111 << $98;
                    $113 = $112 | $96;
                    HEAP32[$5 >> 2] = $113;
                    $114 = (($97) + -14) | 0;
                    HEAP32[$13 >> 2] = $114;
                    $115 = ((($100)) + 2 | 0);
                    HEAP32[$10 >> 2] = $115;
                    break;
                }
            }
        } while (0);
        $116 = $92 & 255;
        HEAP8[$64 >> 0] = $116;
        $117 = HEAP8[$63 >> 0] | 0;
        $118 = ((($1)) + 851 | 0);
        HEAP8[$118 >> 0] = $117;
        $119 = ((($1)) + 852 | 0);
        HEAP8[$119 >> 0] = $116;
        ; HEAP32[$4 >> 2] = 0 | 0; HEAP32[$4 + 4 >> 2] = 0 | 0; HEAP32[$4 + 8 >> 2] = 0 | 0; HEAP32[$4 + 12 >> 2] = 0 | 0;
        $120 = HEAP8[$61 >> 0] | 0;
        $121 = ($120 << 24 >> 24) == (1);
        do {
            if ($121) {
                $122 = HEAP32[$5 >> 2] | 0;
                $123 = $122 >>> 31;
                $124 = HEAP32[$7 >> 2] | 0;
                $125 = HEAP32[$2 >> 2] | 0;
                $126 = HEAP32[$10 >> 2] | 0;
                $127 = $122 << 1;
                HEAP32[$5 >> 2] = $127;
                $128 = HEAP32[$13 >> 2] | 0;
                $129 = (($128) + 1) | 0;
                HEAP32[$13 >> 2] = $129;
                $130 = ($128 | 0) > (-1);
                $131 = $126;
                do {
                    if ($130) {
                        $132 = (($126) - ($125)) | 0;
                        $133 = (($124) + 1) | 0;
                        $134 = (($133) - ($125)) | 0;
                        $135 = ($132 | 0) > ($134 | 0);
                        if ($135) {
                            $$16 = 11;
                            STACKTOP = sp; return ($$16 | 0);
                        } else {
                            $136 = HEAP8[$131 >> 0] | 0;
                            $137 = $136 & 255;
                            $138 = $137 << 8;
                            $139 = ((($131)) + 1 | 0);
                            $140 = HEAP8[$139 >> 0] | 0;
                            $141 = $140 & 255;
                            $142 = $138 | $141;
                            $143 = $142 << $129;
                            $144 = $143 | $127;
                            HEAP32[$5 >> 2] = $144;
                            $145 = (($128) + -15) | 0;
                            HEAP32[$13 >> 2] = $145;
                            $146 = ((($131)) + 2 | 0);
                            HEAP32[$10 >> 2] = $146;
                            break;
                        }
                    }
                } while (0);
                $147 = $123 & 255;
                HEAP8[$118 >> 0] = $147;
                $148 = HEAP32[$5 >> 2] | 0;
                $149 = $148 >>> 30;
                $150 = HEAP32[$7 >> 2] | 0;
                $151 = HEAP32[$2 >> 2] | 0;
                $152 = HEAP32[$10 >> 2] | 0;
                $153 = $148 << 2;
                HEAP32[$5 >> 2] = $153;
                $154 = HEAP32[$13 >> 2] | 0;
                $155 = (($154) + 2) | 0;
                HEAP32[$13 >> 2] = $155;
                $156 = ($154 | 0) > (-2);
                $157 = $152;
                do {
                    if ($156) {
                        $158 = (($152) - ($151)) | 0;
                        $159 = (($150) + 1) | 0;
                        $160 = (($159) - ($151)) | 0;
                        $161 = ($158 | 0) > ($160 | 0);
                        if ($161) {
                            $$16 = 11;
                            STACKTOP = sp; return ($$16 | 0);
                        } else {
                            $162 = HEAP8[$157 >> 0] | 0;
                            $163 = $162 & 255;
                            $164 = $163 << 8;
                            $165 = ((($157)) + 1 | 0);
                            $166 = HEAP8[$165 >> 0] | 0;
                            $167 = $166 & 255;
                            $168 = $164 | $167;
                            $169 = $168 << $155;
                            $170 = $169 | $153;
                            HEAP32[$5 >> 2] = $170;
                            $171 = (($154) + -14) | 0;
                            HEAP32[$13 >> 2] = $171;
                            $172 = ((($157)) + 2 | 0);
                            HEAP32[$10 >> 2] = $172;
                            break;
                        }
                    }
                } while (0);
                $173 = $149 & 255;
                HEAP8[$119 >> 0] = $173;
                $174 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $3) | 0);
                $175 = ($174 | 0) == (0);
                if (!($175)) {
                    $$16 = $174;
                    STACKTOP = sp; return ($$16 | 0);
                }
                $176 = HEAP32[$3 >> 2] | 0;
                $177 = $176 & 1;
                $178 = ($177 | 0) == (0);
                $179 = $176 >>> 1;
                $180 = (0 - ($179)) | 0;
                $181 = (($176) + 1) | 0;
                $182 = $181 >>> 1;
                $storemerge$i185 = $178 ? $180 : $182;
                HEAP32[$4 >> 2] = $storemerge$i185;
                $storemerge$i185$off = (($storemerge$i185) + 32768) | 0;
                $183 = ($storemerge$i185$off >>> 0) > (65535);
                if ($183) {
                    HEAP32[$vararg_buffer1 >> 2] = $storemerge$i185;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28100, $vararg_buffer1);
                }
                $184 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $3) | 0);
                $185 = ($184 | 0) == (0);
                if (!($185)) {
                    $$16 = $184;
                    STACKTOP = sp; return ($$16 | 0);
                }
                $186 = HEAP32[$3 >> 2] | 0;
                $187 = $186 & 1;
                $188 = ($187 | 0) == (0);
                $189 = $186 >>> 1;
                $190 = (0 - ($189)) | 0;
                $191 = (($186) + 1) | 0;
                $192 = $191 >>> 1;
                $storemerge$i180 = $188 ? $190 : $192;
                $193 = ((($1)) + 836 | 0);
                HEAP32[$193 >> 2] = $storemerge$i180;
                $storemerge$i180$off = (($storemerge$i180) + 32768) | 0;
                $194 = ($storemerge$i180$off >>> 0) > (65535);
                if ($194) {
                    HEAP32[$vararg_buffer4 >> 2] = $storemerge$i180;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28151, $vararg_buffer4);
                }
                $195 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $3) | 0);
                $196 = ($195 | 0) == (0);
                if (!($196)) {
                    $$16 = $195;
                    STACKTOP = sp; return ($$16 | 0);
                }
                $197 = HEAP32[$3 >> 2] | 0;
                $198 = $197 & 1;
                $199 = ($198 | 0) == (0);
                $200 = $197 >>> 1;
                $201 = (0 - ($200)) | 0;
                $202 = (($197) + 1) | 0;
                $203 = $202 >>> 1;
                $storemerge$i175 = $199 ? $201 : $203;
                $204 = ((($1)) + 840 | 0);
                HEAP32[$204 >> 2] = $storemerge$i175;
                $storemerge$i175$off = (($storemerge$i175) + 32768) | 0;
                $205 = ($storemerge$i175$off >>> 0) > (65535);
                if ($205) {
                    HEAP32[$vararg_buffer7 >> 2] = $storemerge$i175;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28201, $vararg_buffer7);
                }
                $206 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($2, $3) | 0);
                $207 = ($206 | 0) == (0);
                if ($207) {
                    $208 = HEAP32[$3 >> 2] | 0;
                    $209 = $208 & 1;
                    $210 = ($209 | 0) == (0);
                    $211 = $208 >>> 1;
                    $212 = (0 - ($211)) | 0;
                    $213 = (($208) + 1) | 0;
                    $214 = $213 >>> 1;
                    $storemerge$i = $210 ? $212 : $214;
                    $215 = ((($1)) + 844 | 0);
                    HEAP32[$215 >> 2] = $storemerge$i;
                    $storemerge$i$off = (($storemerge$i) + 32768) | 0;
                    $216 = ($storemerge$i$off >>> 0) > (65535);
                    if (!($216)) {
                        break;
                    }
                    HEAP32[$vararg_buffer10 >> 2] = $storemerge$i;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28253, $vararg_buffer10);
                    break;
                } else {
                    $$16 = $206;
                    STACKTOP = sp; return ($$16 | 0);
                }
            }
        } while (0);
        $217 = HEAP32[$5 >> 2] | 0;
        $218 = HEAP32[$7 >> 2] | 0;
        $219 = HEAP32[$2 >> 2] | 0;
        $220 = HEAP32[$10 >> 2] | 0;
        $221 = $217 << 1;
        HEAP32[$5 >> 2] = $221;
        $222 = HEAP32[$13 >> 2] | 0;
        $223 = (($222) + 1) | 0;
        HEAP32[$13 >> 2] = $223;
        $224 = ($222 | 0) > (-1);
        $225 = $220;
        do {
            if ($224) {
                $226 = (($220) - ($219)) | 0;
                $227 = (($218) + 1) | 0;
                $228 = (($227) - ($219)) | 0;
                $229 = ($226 | 0) > ($228 | 0);
                if ($229) {
                    $$16 = 11;
                    STACKTOP = sp; return ($$16 | 0);
                } else {
                    $230 = HEAP8[$225 >> 0] | 0;
                    $231 = $230 & 255;
                    $232 = $231 << 8;
                    $233 = ((($225)) + 1 | 0);
                    $234 = HEAP8[$233 >> 0] | 0;
                    $235 = $234 & 255;
                    $236 = $232 | $235;
                    $237 = $236 << $223;
                    $238 = $237 | $221;
                    HEAP32[$5 >> 2] = $238;
                    $239 = (($222) + -15) | 0;
                    HEAP32[$13 >> 2] = $239;
                    $240 = ((($225)) + 2 | 0);
                    HEAP32[$10 >> 2] = $240;
                    break;
                }
            }
        } while (0);
        $241 = ($217 | 0) < (0);
        $242 = ((($1)) + 854 | 0);
        $$lobit267 = $217 >>> 31;
        $243 = $$lobit267 & 255;
        HEAP8[$242 >> 0] = $243;
        $244 = ((($1)) + 855 | 0);
        HEAP8[$244 >> 0] = 0;
        if ($241) {
            $245 = HEAP32[$5 >> 2] | 0;
            $246 = HEAP32[$7 >> 2] | 0;
            $247 = HEAP32[$2 >> 2] | 0;
            $248 = HEAP32[$10 >> 2] | 0;
            $249 = $245 << 1;
            HEAP32[$5 >> 2] = $249;
            $250 = HEAP32[$13 >> 2] | 0;
            $251 = (($250) + 1) | 0;
            HEAP32[$13 >> 2] = $251;
            $252 = ($250 | 0) > (-1);
            $253 = $248;
            do {
                if ($252) {
                    $254 = (($248) - ($247)) | 0;
                    $255 = (($246) + 1) | 0;
                    $256 = (($255) - ($247)) | 0;
                    $257 = ($254 | 0) > ($256 | 0);
                    if ($257) {
                        $$16 = 11;
                        STACKTOP = sp; return ($$16 | 0);
                    } else {
                        $258 = HEAP8[$253 >> 0] | 0;
                        $259 = $258 & 255;
                        $260 = $259 << 8;
                        $261 = ((($253)) + 1 | 0);
                        $262 = HEAP8[$261 >> 0] | 0;
                        $263 = $262 & 255;
                        $264 = $260 | $263;
                        $265 = $264 << $251;
                        $266 = $265 | $249;
                        HEAP32[$5 >> 2] = $266;
                        $267 = (($250) + -15) | 0;
                        HEAP32[$13 >> 2] = $267;
                        $268 = ((($253)) + 2 | 0);
                        HEAP32[$10 >> 2] = $268;
                        break;
                    }
                }
            } while (0);
            $$lobit269 = $245 >>> 31;
            $269 = $$lobit269 & 255;
            HEAP8[$244 >> 0] = $269;
        }
        $270 = HEAP32[$5 >> 2] | 0;
        $271 = HEAP32[$7 >> 2] | 0;
        $272 = HEAP32[$2 >> 2] | 0;
        $273 = HEAP32[$10 >> 2] | 0;
        $274 = $270 << 1;
        HEAP32[$5 >> 2] = $274;
        $275 = HEAP32[$13 >> 2] | 0;
        $276 = (($275) + 1) | 0;
        HEAP32[$13 >> 2] = $276;
        $277 = ($275 | 0) > (-1);
        $278 = $273;
        do {
            if ($277) {
                $279 = (($273) - ($272)) | 0;
                $280 = (($271) + 1) | 0;
                $281 = (($280) - ($272)) | 0;
                $282 = ($279 | 0) > ($281 | 0);
                if ($282) {
                    $$16 = 11;
                    STACKTOP = sp; return ($$16 | 0);
                } else {
                    $283 = HEAP8[$278 >> 0] | 0;
                    $284 = $283 & 255;
                    $285 = $284 << 8;
                    $286 = ((($278)) + 1 | 0);
                    $287 = HEAP8[$286 >> 0] | 0;
                    $288 = $287 & 255;
                    $289 = $285 | $288;
                    $290 = $289 << $276;
                    $291 = $290 | $274;
                    HEAP32[$5 >> 2] = $291;
                    $292 = (($275) + -15) | 0;
                    HEAP32[$13 >> 2] = $292;
                    $293 = ((($278)) + 2 | 0);
                    HEAP32[$10 >> 2] = $293;
                    break;
                }
            }
        } while (0);
        $294 = ((($1)) + 856 | 0);
        $$lobit268 = $270 >>> 31;
        $295 = $$lobit268 & 255;
        HEAP8[$294 >> 0] = $295;
        $$16 = 0;
        STACKTOP = sp; return ($$16 | 0);
    }
    function __ZN7WelsDec14CheckSpsActiveEPNS_21TagWelsDecoderContextEPNS_6TagSpsEb($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$07291 = 0, $$07488 = 0, $$11 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
        var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ((($0)) + 241892 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ($4 | 0) == ($1 | 0);
        if ($5) {
            $$11 = 1;
            return ($$11 | 0);
        }
        $6 = ((($0)) + 241896 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ($7 | 0) == ($1 | 0);
        if ($8) {
            $$11 = 1;
            return ($$11 | 0);
        }
        $57 = ((($0)) + 241900 | 0);
        $58 = HEAP32[$57 >> 2] | 0;
        $59 = ($58 | 0) == ($1 | 0);
        if ($59) {
            $$11 = 1;
            return ($$11 | 0);
        }
        $60 = ((($0)) + 241904 | 0);
        $61 = HEAP32[$60 >> 2] | 0;
        $62 = ($61 | 0) == ($1 | 0);
        if ($62) {
            $$11 = 1;
            return ($$11 | 0);
        }
        $63 = ((($0)) + 241908 | 0);
        $64 = HEAP32[$63 >> 2] | 0;
        $65 = ($64 | 0) == ($1 | 0);
        if ($65) {
            $$11 = 1;
            return ($$11 | 0);
        }
        $66 = ((($0)) + 241912 | 0);
        $67 = HEAP32[$66 >> 2] | 0;
        $68 = ($67 | 0) == ($1 | 0);
        if ($68) {
            $$11 = 1;
            return ($$11 | 0);
        }
        $69 = ((($0)) + 241916 | 0);
        $70 = HEAP32[$69 >> 2] | 0;
        $71 = ($70 | 0) == ($1 | 0);
        if ($71) {
            $$11 = 1;
            return ($$11 | 0);
        }
        $72 = ((($0)) + 241920 | 0);
        $73 = HEAP32[$72 >> 2] | 0;
        $74 = ($73 | 0) == ($1 | 0);
        if ($74) {
            $$11 = 1;
            return ($$11 | 0);
        }
        $75 = ((($1)) + 4 | 0);
        $76 = HEAP32[$75 >> 2] | 0;
        $77 = ($76 | 0) != (0);
        if ($2) {
            if (!($77)) {
                $$11 = 0;
                return ($$11 | 0);
            }
            $9 = ((($1)) + 8 | 0);
            $10 = HEAP32[$9 >> 2] | 0;
            $11 = ($10 | 0) == (0);
            if ($11) {
                $$11 = 0;
                return ($$11 | 0);
            }
            $12 = HEAP32[$1 >> 2] | 0;
            $13 = (((($0)) + 242004 | 0) + ($12) | 0);
            $14 = HEAP8[$13 >> 0] | 0;
            $15 = ($14 << 24 >> 24) == (0);
            if ($15) {
                $$11 = 0;
                return ($$11 | 0);
            }
            $16 = ((($0)) + 241888 | 0);
            $17 = HEAP32[$16 >> 2] | 0;
            $18 = ((($17)) + 4 | 0);
            $19 = HEAP32[$18 >> 2] | 0;
            $20 = ($19 | 0) > (0);
            if (!($20)) {
                $$11 = 0;
                return ($$11 | 0);
            }
            $21 = HEAP32[$17 >> 2] | 0;
            $$07488 = 0;
            while (1) {
                $22 = (($21) + ($$07488 << 2) | 0);
                $23 = HEAP32[$22 >> 2] | 0;
                $24 = ((($23)) + 3904 | 0);
                $25 = HEAP8[$24 >> 0] | 0;
                $26 = ($25 << 24 >> 24) == (0);
                if (!($26)) {
                    $27 = ((($23)) + 88 | 0);
                    $28 = HEAP32[$27 >> 2] | 0;
                    $29 = HEAP32[$28 >> 2] | 0;
                    $30 = ($29 | 0) == ($12 | 0);
                    if ($30) {
                        $$11 = 1;
                        label = 19;
                        break;
                    }
                }
                $31 = (($$07488) + 1) | 0;
                $32 = ($31 | 0) < ($19 | 0);
                if ($32) {
                    $$07488 = $31;
                } else {
                    $$11 = 0;
                    label = 19;
                    break;
                }
            }
            if ((label | 0) == 19) {
                return ($$11 | 0);
            }
        } else {
            if (!($77)) {
                $$11 = 0;
                return ($$11 | 0);
            }
            $33 = ((($1)) + 8 | 0);
            $34 = HEAP32[$33 >> 2] | 0;
            $35 = ($34 | 0) == (0);
            if ($35) {
                $$11 = 0;
                return ($$11 | 0);
            }
            $36 = HEAP32[$1 >> 2] | 0;
            $37 = (((($0)) + 241972 | 0) + ($36) | 0);
            $38 = HEAP8[$37 >> 0] | 0;
            $39 = ($38 << 24 >> 24) == (0);
            if ($39) {
                $$11 = 0;
                return ($$11 | 0);
            }
            $40 = ((($0)) + 241888 | 0);
            $41 = HEAP32[$40 >> 2] | 0;
            $42 = ((($41)) + 4 | 0);
            $43 = HEAP32[$42 >> 2] | 0;
            $44 = ($43 | 0) > (0);
            if (!($44)) {
                $$11 = 0;
                return ($$11 | 0);
            }
            $45 = HEAP32[$41 >> 2] | 0;
            $$07291 = 0;
            while (1) {
                $46 = (($45) + ($$07291 << 2) | 0);
                $47 = HEAP32[$46 >> 2] | 0;
                $48 = ((($47)) + 3904 | 0);
                $49 = HEAP8[$48 >> 0] | 0;
                $50 = ($49 << 24 >> 24) == (0);
                if ($50) {
                    $51 = ((($47)) + 88 | 0);
                    $52 = HEAP32[$51 >> 2] | 0;
                    $53 = HEAP32[$52 >> 2] | 0;
                    $54 = ($53 | 0) == ($36 | 0);
                    if ($54) {
                        $$11 = 1;
                        label = 19;
                        break;
                    }
                }
                $55 = (($$07291) + 1) | 0;
                $56 = ($55 | 0) < ($43 | 0);
                if ($56) {
                    $$07291 = $55;
                } else {
                    $$11 = 0;
                    label = 19;
                    break;
                }
            }
            if ((label | 0) == 19) {
                return ($$11 | 0);
            }
        }
        return (0) | 0;
    }
    function __ZN7WelsDec18DecodeNalHeaderExtEPNS_10TagNalUnitEPh($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$lobit = 0, $$lobit27 = 0, $$lobit28 = 0, $$lobit29 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = HEAP8[$1 >> 0] | 0;
        $3 = $2 & 255;
        $4 = ((($0)) + 12 | 0);
        $5 = $3 >>> 6;
        $$lobit = $5 & 1;
        $6 = $$lobit & 255;
        HEAP8[$4 >> 0] = $6;
        $7 = $3 & 63;
        $8 = $7 & 255;
        $9 = ((($0)) + 13 | 0);
        HEAP8[$9 >> 0] = $8;
        $10 = ((($1)) + 1 | 0);
        $11 = HEAP8[$10 >> 0] | 0;
        $12 = $11 & 255;
        $13 = ($11 & 255) >>> 7;
        $14 = ((($0)) + 14 | 0);
        HEAP8[$14 >> 0] = $13;
        $15 = $12 >>> 4;
        $16 = $15 & 7;
        $17 = $16 & 255;
        $18 = ((($0)) + 15 | 0);
        HEAP8[$18 >> 0] = $17;
        $19 = $12 & 15;
        $20 = $19 & 255;
        $21 = ((($0)) + 16 | 0);
        HEAP8[$21 >> 0] = $20;
        $22 = ((($1)) + 2 | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = $23 & 255;
        $25 = ($23 & 255) >>> 5;
        $26 = ((($0)) + 17 | 0);
        HEAP8[$26 >> 0] = $25;
        $27 = ((($0)) + 18 | 0);
        $28 = $24 >>> 4;
        $$lobit27 = $28 & 1;
        $29 = $$lobit27 & 255;
        HEAP8[$27 >> 0] = $29;
        $30 = ((($0)) + 19 | 0);
        $31 = $24 >>> 3;
        $$lobit28 = $31 & 1;
        $32 = $$lobit28 & 255;
        HEAP8[$30 >> 0] = $32;
        $33 = ((($0)) + 20 | 0);
        $34 = $24 >>> 2;
        $$lobit29 = $34 & 1;
        $35 = $$lobit29 & 255;
        HEAP8[$33 >> 0] = $35;
        $36 = $24 & 3;
        $37 = $36 & 255;
        $38 = ((($0)) + 21 | 0);
        HEAP8[$38 >> 0] = $37;
        $39 = $16 << 4;
        $40 = $39 | $19;
        $41 = $40 & 255;
        $42 = ((($0)) + 22 | 0);
        HEAP8[$42 >> 0] = $41;
        return;
    }
    function __ZN7WelsDec18ParsePrefixNalUnitEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$7 = 0, $$lobit = 0, $$lobit79 = 0, $$lobit80 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
        var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $brmerge = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 237969 | 0);
        $3 = HEAP8[$2 >> 0] | 0;
        $4 = ($3 << 24 >> 24) == (0);
        if ($4) {
            $$7 = 0;
            return ($$7 | 0);
        }
        $5 = ((($0)) + 237992 | 0);
        $6 = ((($1)) + 20 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($1)) + 4 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = HEAP32[$1 >> 2] | 0;
        $11 = ((($1)) + 16 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = $7 << 1;
        HEAP32[$6 >> 2] = $13;
        $14 = ((($1)) + 24 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = (($15) + 1) | 0;
        HEAP32[$14 >> 2] = $16;
        $17 = ($15 | 0) > (-1);
        $18 = $12;
        do {
            if ($17) {
                $19 = (($12) - ($10)) | 0;
                $20 = (($9) + 1) | 0;
                $21 = (($20) - ($10)) | 0;
                $22 = ($19 | 0) > ($21 | 0);
                if ($22) {
                    $$7 = 11;
                    return ($$7 | 0);
                } else {
                    $23 = HEAP8[$18 >> 0] | 0;
                    $24 = $23 & 255;
                    $25 = $24 << 8;
                    $26 = ((($18)) + 1 | 0);
                    $27 = HEAP8[$26 >> 0] | 0;
                    $28 = $27 & 255;
                    $29 = $25 | $28;
                    $30 = $29 << $16;
                    $31 = $30 | $13;
                    HEAP32[$6 >> 2] = $31;
                    $32 = (($15) + -15) | 0;
                    HEAP32[$14 >> 2] = $32;
                    $33 = ((($18)) + 2 | 0);
                    HEAP32[$11 >> 2] = $33;
                    break;
                }
            }
        } while (0);
        $34 = ($7 | 0) < (0);
        $35 = ((($0)) + 239052 | 0);
        $$lobit = $7 >>> 31;
        $36 = $$lobit & 255;
        HEAP8[$35 >> 0] = $36;
        $37 = ((($0)) + 237986 | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = ($38 << 24 >> 24) != (0);
        $brmerge = $34 | $39;
        if ($brmerge) {
            $40 = ((($0)) + 237980 | 0);
            $41 = HEAP8[$40 >> 0] | 0;
            $42 = ($41 << 24 >> 24) == (0);
            if ($42) {
                $43 = (__ZN7WelsDec22ParseRefBasePicMarkingEPN10WelsCommon15TagBitStringAuxEPNS_23TagRefBasePicMarkingSynE($1, $5) | 0);
                $44 = ($43 | 0) == (0);
                if (!($44)) {
                    $$7 = $43;
                    return ($$7 | 0);
                }
            }
        }
        $45 = HEAP32[$6 >> 2] | 0;
        $46 = HEAP32[$8 >> 2] | 0;
        $47 = HEAP32[$1 >> 2] | 0;
        $48 = HEAP32[$11 >> 2] | 0;
        $49 = $45 << 1;
        HEAP32[$6 >> 2] = $49;
        $50 = HEAP32[$14 >> 2] | 0;
        $51 = (($50) + 1) | 0;
        HEAP32[$14 >> 2] = $51;
        $52 = ($50 | 0) > (-1);
        $53 = $48;
        do {
            if ($52) {
                $54 = (($48) - ($47)) | 0;
                $55 = (($46) + 1) | 0;
                $56 = (($55) - ($47)) | 0;
                $57 = ($54 | 0) > ($56 | 0);
                if ($57) {
                    $$7 = 11;
                    return ($$7 | 0);
                } else {
                    $58 = HEAP8[$53 >> 0] | 0;
                    $59 = $58 & 255;
                    $60 = $59 << 8;
                    $61 = ((($53)) + 1 | 0);
                    $62 = HEAP8[$61 >> 0] | 0;
                    $63 = $62 & 255;
                    $64 = $60 | $63;
                    $65 = $64 << $51;
                    $66 = $65 | $49;
                    HEAP32[$6 >> 2] = $66;
                    $67 = (($50) + -15) | 0;
                    HEAP32[$14 >> 2] = $67;
                    $68 = ((($53)) + 2 | 0);
                    HEAP32[$11 >> 2] = $68;
                    break;
                }
            }
        } while (0);
        $69 = ($45 | 0) < (0);
        $70 = ((($5)) + 1061 | 0);
        $$lobit79 = $45 >>> 31;
        $71 = $$lobit79 & 255;
        HEAP8[$70 >> 0] = $71;
        if (!($69)) {
            $$7 = 0;
            return ($$7 | 0);
        }
        $72 = HEAP32[$6 >> 2] | 0;
        $73 = HEAP32[$8 >> 2] | 0;
        $74 = HEAP32[$1 >> 2] | 0;
        $75 = HEAP32[$11 >> 2] | 0;
        $76 = $72 << 1;
        HEAP32[$6 >> 2] = $76;
        $77 = HEAP32[$14 >> 2] | 0;
        $78 = (($77) + 1) | 0;
        HEAP32[$14 >> 2] = $78;
        $79 = ($77 | 0) > (-1);
        $80 = $75;
        do {
            if ($79) {
                $81 = (($75) - ($74)) | 0;
                $82 = (($73) + 1) | 0;
                $83 = (($82) - ($74)) | 0;
                $84 = ($81 | 0) > ($83 | 0);
                if ($84) {
                    $$7 = 11;
                    return ($$7 | 0);
                } else {
                    $85 = HEAP8[$80 >> 0] | 0;
                    $86 = $85 & 255;
                    $87 = $86 << 8;
                    $88 = ((($80)) + 1 | 0);
                    $89 = HEAP8[$88 >> 0] | 0;
                    $90 = $89 & 255;
                    $91 = $87 | $90;
                    $92 = $91 << $78;
                    $93 = $92 | $76;
                    HEAP32[$6 >> 2] = $93;
                    $94 = (($77) + -15) | 0;
                    HEAP32[$14 >> 2] = $94;
                    $95 = ((($80)) + 2 | 0);
                    HEAP32[$11 >> 2] = $95;
                    break;
                }
            }
        } while (0);
        $96 = ((($5)) + 1062 | 0);
        $$lobit80 = $72 >>> 31;
        $97 = $$lobit80 & 255;
        HEAP8[$96 >> 0] = $97;
        $$7 = 0;
        return ($$7 | 0);
    }
    function __ZN7WelsDec13MemGetNextNalEPPNS_14TagAccessUnitsEPN10WelsCommon12CMemoryAlignE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$1 = 0, $$121 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        $2 = HEAP32[$0 >> 2] | 0;
        $3 = ((($2)) + 4 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($2)) + 12 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ($4 >>> 0) < ($6 >>> 0);
        do {
            if ($7) {
                $$121 = $2; $15 = $4;
            } else {
                $8 = (($6) + 16) | 0;
                $9 = (__ZN7WelsDec17ExpandNalUnitListEPPNS_14TagAccessUnitsEiiPN10WelsCommon12CMemoryAlignE($0, $6, $8, $1) | 0);
                $10 = ($9 | 0) == (0);
                if ($10) {
                    $11 = HEAP32[$0 >> 2] | 0;
                    $$phi$trans$insert = ((($11)) + 4 | 0);
                    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
                    $$121 = $11; $15 = $$pre;
                    break;
                } else {
                    $$1 = 0;
                    return ($$1 | 0);
                }
            }
        } while (0);
        $12 = HEAP32[$$121 >> 2] | 0;
        $13 = ((($$121)) + 4 | 0);
        $14 = (($15) + 1) | 0;
        HEAP32[$13 >> 2] = $14;
        $16 = (($12) + ($15 << 2) | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        _memset(($17 | 0), 0, 3920) | 0;
        $$1 = $17;
        return ($$1 | 0);
    }
    function __ZN7WelsDec20ForceClearCurrentNalEPNS_14TagAccessUnitsE($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 4 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = ($2 | 0) == (0);
        if ($3) {
            return;
        }
        $4 = (($2) + -1) | 0;
        HEAP32[$1 >> 2] = $4;
        return;
    }
    function __ZN7WelsDec26PrefetchNalHeaderExtSyntaxEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitES3_($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $$061 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
        var $9 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($1 | 0) == (0 | 0);
        $4 = ($2 | 0) == (0 | 0);
        $or$cond = $3 | $4;
        if ($or$cond) {
            $$0 = 0;
            return ($$0 | 0);
        }
        $5 = ((($2)) + 24 | 0);
        $6 = ((($1)) + 100 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (((($0)) + 33648 | 0) + (($7 * 684) | 0) | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = ((($2)) + 15 | 0);
        $11 = HEAP8[$10 >> 0] | 0;
        $12 = ((($1)) + 15 | 0);
        HEAP8[$12 >> 0] = $11;
        $13 = ((($2)) + 16 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = ((($1)) + 16 | 0);
        HEAP8[$15 >> 0] = $14;
        $16 = ((($2)) + 17 | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = ((($1)) + 17 | 0);
        HEAP8[$18 >> 0] = $17;
        $19 = ((($2)) + 13 | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = ((($1)) + 13 | 0);
        HEAP8[$21 >> 0] = $20;
        $22 = ((($2)) + 12 | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = ((($1)) + 12 | 0);
        HEAP8[$24 >> 0] = $23;
        $25 = ((($2)) + 14 | 0);
        $26 = HEAP8[$25 >> 0] | 0;
        $27 = ((($1)) + 14 | 0);
        HEAP8[$27 >> 0] = $26;
        $28 = ((($2)) + 19 | 0);
        $29 = HEAP8[$28 >> 0] | 0;
        $30 = ((($1)) + 19 | 0);
        HEAP8[$30 >> 0] = $29;
        $31 = ((($2)) + 20 | 0);
        $32 = HEAP8[$31 >> 0] | 0;
        $33 = ((($1)) + 20 | 0);
        HEAP8[$33 >> 0] = $32;
        $34 = ((($2)) + 18 | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = ((($1)) + 18 | 0);
        HEAP8[$36 >> 0] = $35;
        $37 = ((($2)) + 22 | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = ((($1)) + 22 | 0);
        HEAP8[$39 >> 0] = $38;
        $40 = ((($2)) + 1084 | 0);
        $41 = HEAP8[$40 >> 0] | 0;
        $42 = ((($1)) + 3853 | 0);
        HEAP8[$42 >> 0] = $41;
        $43 = ((($1)) + 2792 | 0);
        _memcpy(($43 | 0), ($5 | 0), 1060) | 0;
        $44 = ((($1)) + 3848 | 0);
        $45 = HEAP8[$44 >> 0] | 0;
        $46 = ($45 << 24 >> 24) == (0);
        if ($46) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $47 = ((($1)) + 28 | 0);
        $48 = (((((($0)) + 6192 | 0) + (($9 * 832) | 0) | 0)) + 16 | 0);
        $$061 = 0;
        L7: while (1) {
            $49 = (((($1)) + 2792 | 0) + ($$061 << 4) | 0);
            $50 = HEAP32[$49 >> 2] | 0;
            switch ($50 | 0) {
                case 0: {
                    $$0 = 1;
                    label = 7;
                    break L7;
                    break;
                }
                case 1: {
                    $51 = HEAP32[$47 >> 2] | 0;
                    $52 = (((((($1)) + 2792 | 0) + ($$061 << 4) | 0)) + 8 | 0);
                    $53 = HEAP32[$52 >> 2] | 0;
                    $54 = (($51) - ($53)) | 0;
                    $55 = HEAP32[$48 >> 2] | 0;
                    $56 = 1 << $55;
                    $57 = (($56) + -1) | 0;
                    $58 = $57 & $54;
                    $59 = (((((($1)) + 2792 | 0) + ($$061 << 4) | 0)) + 4 | 0);
                    HEAP32[$59 >> 2] = $58;
                    break;
                }
                default: {
                }
            }
            $60 = (($$061) + 1) | 0;
            $61 = ($$061 | 0) < (65);
            if ($61) {
                $$061 = $60;
            } else {
                $$0 = 1;
                label = 7;
                break;
            }
        }
        if ((label | 0) == 7) {
            return ($$0 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec23ParseSliceHeaderSyntaxsEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEb($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$$i = 0, $$0604 = 0, $$0605 = 0, $$49 = 0, $$648 = 0, $$708 = 0, $$not = 0, $$not649 = 0, $$not667 = 0, $$off = 0, $$off859 = 0, $$pr = 0, $$pr$pre = 0, $$pr836 = 0, $$pre = 0, $$sink = 0, $$sink$i = 0, $$sink653 = 0, $$sink654 = 0, $$sink655 = 0;
        var $$sink857 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
        var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
        var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
        var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
        var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
        var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
        var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
        var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
        var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
        var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
        var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
        var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
        var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
        var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
        var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
        var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
        var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
        var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
        var $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
        var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
        var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
        var $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
        var $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
        var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
        var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
        var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
        var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
        var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
        var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0;
        var $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
        var $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0;
        var $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
        var $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
        var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
        var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0;
        var $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0;
        var $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0;
        var $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0;
        var $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0;
        var $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0;
        var $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0;
        var $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0;
        var $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0;
        var $875 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $addconv646 = 0, $brmerge668 = 0, $brmerge671$not = 0, $brmerge672 = 0, $or$cond = 0, $or$cond650 = 0;
        var $or$cond651 = 0, $or$cond707 = 0, $or$cond710 = 0, $storemerge$i = 0, $storemerge$i$off = 0, $storemerge$i733 = 0, $storemerge$i733$off = 0, $storemerge$i736 = 0, $storemerge$i739 = 0, $storemerge$i742 = 0, $storemerge$i749 = 0, $storemerge$i752 = 0, $storemerge$i752$off = 0, $storemerge$i755 = 0, $storemerge$i755$off = 0, $sum = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0;
        var $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer24 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0;
        var $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_ptr1 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr88 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 1344 | 0;
        $vararg_buffer85 = sp + 264 | 0;
        $vararg_buffer83 = sp + 256 | 0;
        $vararg_buffer80 = sp + 248 | 0;
        $vararg_buffer77 = sp + 240 | 0;
        $vararg_buffer74 = sp + 232 | 0;
        $vararg_buffer71 = sp + 224 | 0;
        $vararg_buffer68 = sp + 216 | 0;
        $vararg_buffer65 = sp + 208 | 0;
        $vararg_buffer63 = sp + 200 | 0;
        $vararg_buffer60 = sp + 192 | 0;
        $vararg_buffer57 = sp + 184 | 0;
        $vararg_buffer55 = sp + 176 | 0;
        $vararg_buffer53 = sp + 168 | 0;
        $vararg_buffer51 = sp + 160 | 0;
        $vararg_buffer49 = sp + 152 | 0;
        $vararg_buffer46 = sp + 144 | 0;
        $vararg_buffer43 = sp + 136 | 0;
        $vararg_buffer40 = sp + 128 | 0;
        $vararg_buffer37 = sp + 120 | 0;
        $vararg_buffer34 = sp + 112 | 0;
        $vararg_buffer31 = sp + 104 | 0;
        $vararg_buffer29 = sp + 96 | 0;
        $vararg_buffer24 = sp + 80 | 0;
        $vararg_buffer19 = sp + 64 | 0;
        $vararg_buffer17 = sp + 56 | 0;
        $vararg_buffer12 = sp + 40 | 0;
        $vararg_buffer10 = sp + 32 | 0;
        $vararg_buffer7 = sp + 24 | 0;
        $vararg_buffer4 = sp + 16 | 0;
        $vararg_buffer2 = sp + 8 | 0;
        $vararg_buffer = sp;
        $3 = sp + 276 | 0;
        $4 = sp + 272 | 0;
        $5 = ((($0)) + 241888 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ((($6)) + 4 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = (($9) + -1) | 0;
        $11 = (($7) + ($10 << 2) | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = ($12 | 0) == (0 | 0);
        if ($13) {
            $$49 = 1;
            STACKTOP = sp; return ($$49 | 0);
        }
        $14 = $2 & 1;
        $15 = ((($12)) + 24 | 0);
        $16 = ((($12)) + 4 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ((($12)) + 3853 | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = ((($12)) + 2792 | 0);
        _memcpy(($3 | 0), ($20 | 0), 1060) | 0;
        _memset(($15 | 0), 0, 3844) | 0;
        HEAP8[$18 >> 0] = $19;
        _memcpy(($20 | 0), ($3 | 0), 1060) | 0;
        $21 = ((($12)) + 3904 | 0);
        HEAP8[$21 >> 0] = $14;
        $22 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
        $23 = ($22 | 0) == (0);
        if (!($23)) {
            $$49 = $22;
            STACKTOP = sp; return ($$49 | 0);
        }
        $24 = HEAP32[$4 >> 2] | 0;
        HEAP32[$15 >> 2] = $24;
        $25 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
        $26 = ($25 | 0) == (0);
        if (!($26)) {
            $$49 = $25;
            STACKTOP = sp; return ($$49 | 0);
        }
        $27 = HEAP32[$4 >> 2] | 0;
        $28 = $27 & 255;
        $29 = ($28 >>> 0) > (9);
        if ($29) {
            $30 = HEAP32[$15 >> 2] | 0;
            HEAP32[$vararg_buffer >> 2] = $28;
            $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
            HEAP32[$vararg_ptr1 >> 2] = $30;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 28980, $vararg_buffer);
            $$49 = 328757;
            STACKTOP = sp; return ($$49 | 0);
        }
        $31 = ($28 >>> 0) > (4);
        $32 = (($27) + 251) | 0;
        $$648 = $31 ? $32 : $27;
        $33 = $$648 & 255;
        $34 = ($33 | 0) == (1);
        if ($34) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29022, $vararg_buffer2);
            $$49 = 328746;
            STACKTOP = sp; return ($$49 | 0);
        }
        $35 = ($17 | 0) == (5);
        $$not649 = $35 ^ 1;
        $36 = ($33 | 0) == (2);
        $or$cond650 = $36 | $$not649;
        if (!($or$cond650)) {
            HEAP32[$vararg_buffer4 >> 2] = $33;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29072, $vararg_buffer4);
            $$49 = 328757;
            STACKTOP = sp; return ($$49 | 0);
        }
        $37 = ($33 >>> 0) > (2);
        $or$cond651 = $37 & $2;
        if ($or$cond651) {
            HEAP32[$vararg_buffer7 >> 2] = $33;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29112, $vararg_buffer7);
            $$49 = 328757;
            STACKTOP = sp; return ($$49 | 0);
        }
        $38 = ((($12)) + 2756 | 0);
        HEAP32[$38 >> 2] = $33;
        $39 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
        $40 = ($39 | 0) == (0);
        if (!($40)) {
            $$49 = $39;
            STACKTOP = sp; return ($$49 | 0);
        }
        $41 = HEAP32[$4 >> 2] | 0;
        $42 = ($41 | 0) > (255);
        if ($42) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29136, $vararg_buffer10);
            $$49 = 328685;
            STACKTOP = sp; return ($$49 | 0);
        }
        $43 = (((($0)) + 242036 | 0) + ($41) | 0);
        $44 = HEAP8[$43 >> 0] | 0;
        $45 = ($44 << 24 >> 24) == (0);
        if ($45) {
            $46 = ((($0)) + 512316 | 0);
            $47 = HEAP32[$46 >> 2] | 0;
            $48 = (($47) + 1) | 0;
            HEAP32[$46 >> 2] = $48;
            $49 = ((($0)) + 242292 | 0);
            $50 = HEAP32[$49 >> 2] | 0;
            $51 = ($50 | 0) == ($41 | 0);
            $52 = ((($0)) + 242296 | 0);
            $53 = HEAP32[$52 >> 2] | 0;
            if ($51) {
                $54 = (($53) + 1) | 0;
                $$sink653 = $54;
            } else {
                HEAP32[$vararg_buffer12 >> 2] = $41;
                $vararg_ptr15 = ((($vararg_buffer12)) + 4 | 0);
                HEAP32[$vararg_ptr15 >> 2] = $50;
                $vararg_ptr16 = ((($vararg_buffer12)) + 8 | 0);
                HEAP32[$vararg_ptr16 >> 2] = $53;
                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 29156, $vararg_buffer12);
                HEAP32[$49 >> 2] = $41;
                $$sink653 = 0;
            }
            HEAP32[$52 >> 2] = $$sink653;
            $55 = ((($0)) + 116 | 0);
            $56 = HEAP32[$55 >> 2] | 0;
            $57 = $56 | 16;
            HEAP32[$55 >> 2] = $57;
            $$49 = 328717;
            STACKTOP = sp; return ($$49 | 0);
        }
        $58 = ((($0)) + 242292 | 0);
        HEAP32[$58 >> 2] = -1;
        $59 = (((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0);
        $60 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 8 | 0);
        $61 = HEAP32[$60 >> 2] | 0;
        $62 = ($61 | 0) == (0);
        if ($62) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29217, $vararg_buffer17);
            $63 = ((($0)) + 116 | 0);
            $64 = HEAP32[$63 >> 2] | 0;
            $65 = $64 | 16;
            HEAP32[$63 >> 2] = $65;
            $$49 = 328682;
            STACKTOP = sp; return ($$49 | 0);
        }
        $66 = HEAP32[$59 >> 2] | 0;
        do {
            if ($2) {
                $67 = (((($0)) + 209452 | 0) + (($66 * 864) | 0) | 0);
                $68 = (((($0)) + 242004 | 0) + ($66) | 0);
                $69 = HEAP8[$68 >> 0] | 0;
                $70 = ($69 << 24 >> 24) == (0);
                if (!($70)) {
                    $85 = ((($0)) + 242308 | 0);
                    HEAP32[$85 >> 2] = -1;
                    $$0604 = $67; $$0605 = $67;
                    break;
                }
                $71 = ((($0)) + 512312 | 0);
                $72 = HEAP32[$71 >> 2] | 0;
                $73 = (($72) + 1) | 0;
                HEAP32[$71 >> 2] = $73;
                $74 = ((($0)) + 242308 | 0);
                $75 = HEAP32[$74 >> 2] | 0;
                $76 = HEAP32[$59 >> 2] | 0;
                $77 = ($75 | 0) == ($76 | 0);
                $78 = ((($0)) + 242312 | 0);
                $79 = HEAP32[$78 >> 2] | 0;
                if ($77) {
                    $81 = (($79) + 1) | 0;
                    $$sink654 = $81;
                } else {
                    HEAP32[$vararg_buffer19 >> 2] = $76;
                    $vararg_ptr22 = ((($vararg_buffer19)) + 4 | 0);
                    HEAP32[$vararg_ptr22 >> 2] = $75;
                    $vararg_ptr23 = ((($vararg_buffer19)) + 8 | 0);
                    HEAP32[$vararg_ptr23 >> 2] = $79;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 1, 29240, $vararg_buffer19);
                    $80 = HEAP32[$59 >> 2] | 0;
                    HEAP32[$74 >> 2] = $80;
                    $$sink654 = 0;
                }
                HEAP32[$78 >> 2] = $$sink654;
                $82 = ((($0)) + 116 | 0);
                $83 = HEAP32[$82 >> 2] | 0;
                $84 = $83 | 16;
                HEAP32[$82 >> 2] = $84;
                $$49 = 328716;
                STACKTOP = sp; return ($$49 | 0);
            } else {
                $86 = (((($0)) + 241972 | 0) + ($66) | 0);
                $87 = HEAP8[$86 >> 0] | 0;
                $88 = ($87 << 24 >> 24) == (0);
                if (!($88)) {
                    $103 = ((($0)) + 242300 | 0);
                    HEAP32[$103 >> 2] = -1;
                    $104 = HEAP32[$59 >> 2] | 0;
                    $105 = (((($0)) + 6192 | 0) + (($104 * 832) | 0) | 0);
                    $$0604 = 0; $$0605 = $105;
                    break;
                }
                $89 = ((($0)) + 512308 | 0);
                $90 = HEAP32[$89 >> 2] | 0;
                $91 = (($90) + 1) | 0;
                HEAP32[$89 >> 2] = $91;
                $92 = ((($0)) + 242300 | 0);
                $93 = HEAP32[$92 >> 2] | 0;
                $94 = HEAP32[$59 >> 2] | 0;
                $95 = ($93 | 0) == ($94 | 0);
                $96 = ((($0)) + 242304 | 0);
                $97 = HEAP32[$96 >> 2] | 0;
                if ($95) {
                    $99 = (($97) + 1) | 0;
                    $$sink655 = $99;
                } else {
                    HEAP32[$vararg_buffer24 >> 2] = $94;
                    $vararg_ptr27 = ((($vararg_buffer24)) + 4 | 0);
                    HEAP32[$vararg_ptr27 >> 2] = $93;
                    $vararg_ptr28 = ((($vararg_buffer24)) + 8 | 0);
                    HEAP32[$vararg_ptr28 >> 2] = $97;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 1, 29305, $vararg_buffer24);
                    $98 = HEAP32[$59 >> 2] | 0;
                    HEAP32[$92 >> 2] = $98;
                    $$sink655 = 0;
                }
                HEAP32[$96 >> 2] = $$sink655;
                $100 = ((($0)) + 116 | 0);
                $101 = HEAP32[$100 >> 2] | 0;
                $102 = $101 | 16;
                HEAP32[$100 >> 2] = $102;
                $$49 = 328716;
                STACKTOP = sp; return ($$49 | 0);
            }
        } while (0);
        $106 = ((($12)) + 100 | 0);
        HEAP32[$106 >> 2] = $41;
        $107 = HEAP32[$59 >> 2] | 0;
        $108 = ((($12)) + 96 | 0);
        HEAP32[$108 >> 2] = $107;
        $109 = ((($12)) + 92 | 0);
        HEAP32[$109 >> 2] = $59;
        $110 = ((($12)) + 88 | 0);
        HEAP32[$110 >> 2] = $$0605;
        $111 = ((($12)) + 2768 | 0);
        HEAP32[$111 >> 2] = $$0604;
        $$not = $2 ^ 1;
        $or$cond = $35 & $$not;
        if ($2) {
            $112 = ((($12)) + 12 | 0);
            $113 = HEAP8[$112 >> 0] | 0;
            $114 = ($113 << 24 >> 24) != (0);
            $116 = $114;
        } else {
            $116 = $or$cond;
        }
        $115 = $116 & 1;
        $117 = ((($12)) + 104 | 0);
        HEAP8[$117 >> 0] = $115;
        $118 = ((($$0605)) + 16 | 0);
        $119 = HEAP32[$118 >> 2] | 0;
        $120 = ($119 | 0) == (0);
        if ($120) {
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29366, $vararg_buffer29);
            $$49 = 328682;
            STACKTOP = sp; return ($$49 | 0);
        }
        $121 = HEAP32[$15 >> 2] | 0;
        $122 = ((($$0605)) + 12 | 0);
        $123 = HEAP32[$122 >> 2] | 0;
        $124 = ($121 >>> 0) > ($123 >>> 0);
        if ($124) {
            HEAP32[$vararg_buffer31 >> 2] = $121;
            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 29394, $vararg_buffer31);
            $$49 = 328700;
            STACKTOP = sp; return ($$49 | 0);
        }
        $125 = ((($1)) + 20 | 0);
        $126 = HEAP32[$125 >> 2] | 0;
        $127 = (32 - ($119)) | 0;
        $128 = $126 >>> $127;
        $129 = ((($1)) + 4 | 0);
        $130 = HEAP32[$129 >> 2] | 0;
        $131 = HEAP32[$1 >> 2] | 0;
        $132 = ((($1)) + 16 | 0);
        $133 = HEAP32[$132 >> 2] | 0;
        $134 = $126 << $119;
        HEAP32[$125 >> 2] = $134;
        $135 = ((($1)) + 24 | 0);
        $136 = HEAP32[$135 >> 2] | 0;
        $137 = (($136) + ($119)) | 0;
        HEAP32[$135 >> 2] = $137;
        $138 = ($137 | 0) > (0);
        $139 = $133;
        do {
            if ($138) {
                $140 = (($133) - ($131)) | 0;
                $141 = (($130) + 1) | 0;
                $142 = (($141) - ($131)) | 0;
                $143 = ($140 | 0) > ($142 | 0);
                if ($143) {
                    $$49 = 11;
                    STACKTOP = sp; return ($$49 | 0);
                } else {
                    $144 = HEAP8[$139 >> 0] | 0;
                    $145 = $144 & 255;
                    $146 = $145 << 8;
                    $147 = ((($139)) + 1 | 0);
                    $148 = HEAP8[$147 >> 0] | 0;
                    $149 = $148 & 255;
                    $150 = $146 | $149;
                    $151 = $150 << $137;
                    $152 = $151 | $134;
                    HEAP32[$125 >> 2] = $152;
                    $153 = (($137) + -16) | 0;
                    HEAP32[$135 >> 2] = $153;
                    $154 = ((($139)) + 2 | 0);
                    HEAP32[$132 >> 2] = $154;
                    break;
                }
            }
        } while (0);
        HEAP32[$4 >> 2] = $128;
        $155 = ((($12)) + 28 | 0);
        HEAP32[$155 >> 2] = $128;
        $156 = ((($12)) + 2761 | 0);
        HEAP8[$156 >> 0] = 0;
        $157 = ((($12)) + 2762 | 0);
        HEAP8[$157 >> 0] = 0;
        $158 = ((($$0605)) + 324 | 0);
        $159 = HEAP8[$158 >> 0] | 0;
        $160 = ($159 << 24 >> 24) == (0);
        if ($160) {
            HEAP32[$vararg_buffer34 >> 2] = 0;
            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29430, $vararg_buffer34);
            $$49 = 328741;
            STACKTOP = sp; return ($$49 | 0);
        }
        $161 = ((($$0605)) + 4 | 0);
        $162 = HEAP32[$161 >> 2] | 0;
        $163 = ((($12)) + 1156 | 0);
        HEAP32[$163 >> 2] = $162;
        $164 = ((($$0605)) + 8 | 0);
        $165 = HEAP32[$164 >> 2] | 0;
        $166 = ((($12)) + 1160 | 0);
        HEAP32[$166 >> 2] = $165;
        do {
            if ($116) {
                $167 = ($128 | 0) == (0);
                if (!($167)) {
                    HEAP32[$vararg_buffer37 >> 2] = $128;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29498, $vararg_buffer37);
                    $$49 = 328695;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $168 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
                $169 = ($168 | 0) == (0);
                if (!($169)) {
                    $$49 = $168;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $170 = HEAP32[$4 >> 2] | 0;
                $171 = ($170 >>> 0) > (65535);
                if (!($171)) {
                    $172 = $170 & 65535;
                    $173 = ((($12)) + 2752 | 0);
                    HEAP16[$173 >> 1] = $172;
                    $174 = ((($0)) + 242332 | 0);
                    HEAP16[$174 >> 1] = $172;
                    break;
                }
                HEAP32[$vararg_buffer40 >> 2] = $170;
                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 29579, $vararg_buffer40);
                $$49 = 328696;
                STACKTOP = sp; return ($$49 | 0);
            }
        } while (0);
        $175 = ((($12)) + 36 | 0);
        HEAP32[$175 >> 2] = 0;
        $176 = ((($12)) + 44 | 0);
        HEAP32[$176 >> 2] = 0;
        $177 = ((($12)) + 40 | 0);
        HEAP32[$177 >> 2] = 0;
        $178 = ((($$0605)) + 20 | 0);
        $179 = HEAP32[$178 >> 2] | 0;
        L100: do {
            switch ($179 | 0) {
                case 0: {
                    $180 = ((($$0605)) + 24 | 0);
                    $181 = HEAP32[$180 >> 2] | 0;
                    $182 = HEAP32[$125 >> 2] | 0;
                    $183 = (32 - ($181)) | 0;
                    $184 = $182 >>> $183;
                    $185 = HEAP32[$129 >> 2] | 0;
                    $186 = HEAP32[$1 >> 2] | 0;
                    $187 = HEAP32[$132 >> 2] | 0;
                    $188 = $182 << $181;
                    HEAP32[$125 >> 2] = $188;
                    $189 = HEAP32[$135 >> 2] | 0;
                    $190 = (($189) + ($181)) | 0;
                    HEAP32[$135 >> 2] = $190;
                    $191 = ($190 | 0) > (0);
                    $192 = $187;
                    do {
                        if ($191) {
                            $193 = (($187) - ($186)) | 0;
                            $194 = (($185) + 1) | 0;
                            $195 = (($194) - ($186)) | 0;
                            $196 = ($193 | 0) > ($195 | 0);
                            if ($196) {
                                $$49 = 11;
                                STACKTOP = sp; return ($$49 | 0);
                            } else {
                                $197 = HEAP8[$192 >> 0] | 0;
                                $198 = $197 & 255;
                                $199 = $198 << 8;
                                $200 = ((($192)) + 1 | 0);
                                $201 = HEAP8[$200 >> 0] | 0;
                                $202 = $201 & 255;
                                $203 = $199 | $202;
                                $204 = $203 << $190;
                                $205 = $204 | $188;
                                HEAP32[$125 >> 2] = $205;
                                $206 = (($190) + -16) | 0;
                                HEAP32[$135 >> 2] = $206;
                                $207 = ((($192)) + 2 | 0);
                                HEAP32[$132 >> 2] = $207;
                                break;
                            }
                        }
                    } while (0);
                    HEAP32[$4 >> 2] = $184;
                    $208 = ((($12)) + 32 | 0);
                    HEAP32[$208 >> 2] = $184;
                    $209 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 177 | 0);
                    $210 = HEAP8[$209 >> 0] | 0;
                    $211 = ($210 << 24 >> 24) == (0);
                    if ($211) {
                        break L100;
                    }
                    $212 = HEAP8[$156 >> 0] | 0;
                    $213 = ($212 << 24 >> 24) == (0);
                    if (!($213)) {
                        break L100;
                    }
                    $214 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $3) | 0);
                    $215 = ($214 | 0) == (0);
                    if ($215) {
                        $216 = HEAP32[$3 >> 2] | 0;
                        $217 = $216 & 1;
                        $218 = ($217 | 0) == (0);
                        $219 = $216 >>> 1;
                        $220 = (0 - ($219)) | 0;
                        $221 = (($216) + 1) | 0;
                        $222 = $221 >>> 1;
                        $storemerge$i736 = $218 ? $220 : $222;
                        HEAP32[$175 >> 2] = $storemerge$i736;
                        break L100;
                    }
                    $$49 = $214;
                    STACKTOP = sp; return ($$49 | 0);
                    break;
                }
                case 1: {
                    $223 = ((($$0605)) + 322 | 0);
                    $224 = HEAP8[$223 >> 0] | 0;
                    $225 = ($224 << 24 >> 24) == (0);
                    if ($225) {
                        $226 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $3) | 0);
                        $227 = ($226 | 0) == (0);
                        if (!($227)) {
                            $$49 = $226;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        $228 = HEAP32[$3 >> 2] | 0;
                        $229 = $228 & 1;
                        $230 = ($229 | 0) == (0);
                        $231 = $228 >>> 1;
                        $232 = (0 - ($231)) | 0;
                        $233 = (($228) + 1) | 0;
                        $234 = $233 >>> 1;
                        $storemerge$i739 = $230 ? $232 : $234;
                        HEAP32[$177 >> 2] = $storemerge$i739;
                        $235 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 177 | 0);
                        $236 = HEAP8[$235 >> 0] | 0;
                        $237 = ($236 << 24 >> 24) == (0);
                        if ($237) {
                            break L100;
                        }
                        $238 = HEAP8[$156 >> 0] | 0;
                        $239 = ($238 << 24 >> 24) == (0);
                        if (!($239)) {
                            break L100;
                        }
                        $240 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $3) | 0);
                        $241 = ($240 | 0) == (0);
                        if ($241) {
                            $242 = HEAP32[$3 >> 2] | 0;
                            $243 = $242 & 1;
                            $244 = ($243 | 0) == (0);
                            $245 = $242 >>> 1;
                            $246 = (0 - ($245)) | 0;
                            $247 = (($242) + 1) | 0;
                            $248 = $247 >>> 1;
                            $storemerge$i742 = $244 ? $246 : $248;
                            HEAP32[$176 >> 2] = $storemerge$i742;
                            break L100;
                        }
                        $$49 = $240;
                        STACKTOP = sp; return ($$49 | 0);
                    }
                    break;
                }
                default: {
                }
            }
        } while (0);
        $249 = ((($12)) + 48 | 0);
        HEAP32[$249 >> 2] = 0;
        $250 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 181 | 0);
        $251 = HEAP8[$250 >> 0] | 0;
        $252 = ($251 << 24 >> 24) == (0);
        do {
            if (!($252)) {
                $253 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
                $254 = ($253 | 0) == (0);
                if (!($254)) {
                    $$49 = $253;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $255 = HEAP32[$4 >> 2] | 0;
                $256 = ($255 >>> 0) > (127);
                if (!($256)) {
                    HEAP32[$249 >> 2] = $255;
                    break;
                }
                HEAP32[$vararg_buffer43 >> 2] = $255;
                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 29608, $vararg_buffer43);
                $$49 = 328697;
                STACKTOP = sp; return ($$49 | 0);
            }
        } while (0);
        $257 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 152 | 0);
        $258 = HEAP32[$257 >> 2] | 0;
        $259 = ((($12)) + 52 | 0);
        HEAP32[$259 >> 2] = $258;
        $260 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 156 | 0);
        $261 = HEAP32[$260 >> 2] | 0;
        $262 = ((($12)) + 56 | 0);
        HEAP32[$262 >> 2] = $261;
        $263 = ($33 | 0) == (0);
        if ($2) {
            $264 = ((($12)) + 16 | 0);
            $265 = HEAP8[$264 >> 0] | 0;
            $266 = ($265 << 24 >> 24) == (0);
            $267 = $263 & $266;
            if ($267) {
                label = 78;
            } else {
                $$pr = $258;
                label = 87;
            }
        } else {
            if ($263) {
                label = 78;
            } else {
                $$pr = $258;
                label = 87;
            }
        }
        do {
            if ((label | 0) == 78) {
                $268 = HEAP32[$125 >> 2] | 0;
                $269 = $268 >>> 31;
                $270 = HEAP32[$129 >> 2] | 0;
                $271 = HEAP32[$1 >> 2] | 0;
                $272 = HEAP32[$132 >> 2] | 0;
                $273 = $268 << 1;
                HEAP32[$125 >> 2] = $273;
                $274 = HEAP32[$135 >> 2] | 0;
                $275 = (($274) + 1) | 0;
                HEAP32[$135 >> 2] = $275;
                $276 = ($274 | 0) > (-1);
                $277 = $272;
                do {
                    if ($276) {
                        $278 = (($272) - ($271)) | 0;
                        $279 = (($270) + 1) | 0;
                        $280 = (($279) - ($271)) | 0;
                        $281 = ($278 | 0) > ($280 | 0);
                        if ($281) {
                            $$49 = 11;
                            STACKTOP = sp; return ($$49 | 0);
                        } else {
                            $282 = HEAP8[$277 >> 0] | 0;
                            $283 = $282 & 255;
                            $284 = $283 << 8;
                            $285 = ((($277)) + 1 | 0);
                            $286 = HEAP8[$285 >> 0] | 0;
                            $287 = $286 & 255;
                            $288 = $284 | $287;
                            $289 = $288 << $275;
                            $290 = $289 | $273;
                            HEAP32[$125 >> 2] = $290;
                            $291 = (($274) + -15) | 0;
                            HEAP32[$135 >> 2] = $291;
                            $292 = ((($277)) + 2 | 0);
                            HEAP32[$132 >> 2] = $292;
                            break;
                        }
                    }
                } while (0);
                HEAP32[$4 >> 2] = $269;
                $293 = ($269 | 0) == (0);
                $294 = ((($12)) + 2760 | 0);
                $295 = $269 & 255;
                HEAP8[$294 >> 0] = $295;
                if ($293) {
                    $$pr$pre = HEAP32[$259 >> 2] | 0;
                    $$pr = $$pr$pre;
                    label = 87;
                    break;
                }
                $296 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
                $297 = ($296 | 0) == (0);
                if (!($297)) {
                    $$49 = $296;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $298 = HEAP32[$4 >> 2] | 0;
                $299 = ($298 >>> 0) > (15);
                if (!($299)) {
                    $300 = (($298) + 1) | 0;
                    HEAP32[$259 >> 2] = $300;
                    label = 88;
                    break;
                }
                HEAP32[$vararg_buffer46 >> 2] = $298;
                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 29644, $vararg_buffer46);
                $$49 = 328701;
                STACKTOP = sp; return ($$49 | 0);
            }
        } while (0);
        if ((label | 0) == 87) {
            $301 = ($$pr | 0) > (16);
            if (!($301)) {
                label = 88;
            }
        }
        do {
            if ((label | 0) == 88) {
                $302 = HEAP32[$262 >> 2] | 0;
                $303 = ($302 | 0) > (16);
                if ($303) {
                    break;
                }
                $304 = (__ZN7WelsDec25ParseRefPicListReorderingEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersE($1, $15) | 0);
                $305 = ($304 | 0) == (0);
                if (!($305)) {
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29710, $vararg_buffer51);
                    $$49 = $304;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $306 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 182 | 0);
                $307 = HEAP8[$306 >> 0] | 0;
                $308 = ($307 << 24 >> 24) == (0);
                $$not667 = $263 ^ 1;
                $brmerge668 = $308 | $$not667;
                do {
                    if (!($brmerge668)) {
                        $309 = (__ZN7WelsDec22ParsePredWeightedTableEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersE($1, $15) | 0);
                        $310 = ($309 | 0) == (0);
                        if ($310) {
                            break;
                        }
                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29752, $vararg_buffer53);
                        $$49 = $309;
                        STACKTOP = sp; return ($$49 | 0);
                    }
                } while (0);
                if ($2) {
                    $311 = ((($12)) + 14 | 0);
                    $312 = HEAP8[$311 >> 0] | 0;
                    $313 = ($312 << 24 >> 24) == (0);
                    if ($313) {
                        $314 = ((($12)) + 16 | 0);
                        $315 = HEAP8[$314 >> 0] | 0;
                        $316 = ($315 << 24 >> 24) == (0);
                        $$708 = $316 & 1;
                        $$sink = $$708;
                    } else {
                        $$sink = 0;
                    }
                    $317 = ((($12)) + 3852 | 0);
                    HEAP8[$317 >> 0] = $$sink;
                }
                $318 = ((($12)) + 1 | 0);
                $319 = HEAP8[$318 >> 0] | 0;
                $320 = ($319 << 24 >> 24) == (0);
                do {
                    if (!($320)) {
                        $321 = (__ZN7WelsDec21ParseDecRefPicMarkingEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersEPNS_6TagSpsEb(0, $1, $15, $$0605, $116) | 0);
                        $322 = ($321 | 0) == (0);
                        if (!($322)) {
                            $$49 = $321;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        if (!($2)) {
                            break;
                        }
                        $323 = ((($$0604)) + 856 | 0);
                        $324 = HEAP8[$323 >> 0] | 0;
                        $325 = ($324 << 24 >> 24) == (0);
                        if (!($325)) {
                            break;
                        }
                        $326 = HEAP32[$125 >> 2] | 0;
                        $327 = $326 >>> 31;
                        $328 = HEAP32[$129 >> 2] | 0;
                        $329 = HEAP32[$1 >> 2] | 0;
                        $330 = HEAP32[$132 >> 2] | 0;
                        $331 = $326 << 1;
                        HEAP32[$125 >> 2] = $331;
                        $332 = HEAP32[$135 >> 2] | 0;
                        $333 = (($332) + 1) | 0;
                        HEAP32[$135 >> 2] = $333;
                        $334 = ($332 | 0) > (-1);
                        $335 = $330;
                        do {
                            if ($334) {
                                $336 = (($330) - ($329)) | 0;
                                $337 = (($328) + 1) | 0;
                                $338 = (($337) - ($329)) | 0;
                                $339 = ($336 | 0) > ($338 | 0);
                                if ($339) {
                                    $$49 = 11;
                                    STACKTOP = sp; return ($$49 | 0);
                                } else {
                                    $340 = HEAP8[$335 >> 0] | 0;
                                    $341 = $340 & 255;
                                    $342 = $341 << 8;
                                    $343 = ((($335)) + 1 | 0);
                                    $344 = HEAP8[$343 >> 0] | 0;
                                    $345 = $344 & 255;
                                    $346 = $342 | $345;
                                    $347 = $346 << $333;
                                    $348 = $347 | $331;
                                    HEAP32[$125 >> 2] = $348;
                                    $349 = (($332) + -15) | 0;
                                    HEAP32[$135 >> 2] = $349;
                                    $350 = ((($335)) + 2 | 0);
                                    HEAP32[$132 >> 2] = $350;
                                    break;
                                }
                            }
                        } while (0);
                        HEAP32[$4 >> 2] = $327;
                        $351 = ($327 | 0) == (0);
                        $352 = $327 & 255;
                        HEAP8[$18 >> 0] = $352;
                        $353 = ((($12)) + 18 | 0);
                        $354 = HEAP8[$353 >> 0] | 0;
                        $355 = ($354 << 24 >> 24) == (0);
                        $brmerge671$not = $351 & $355;
                        $brmerge672 = $116 | $brmerge671$not;
                        if ($brmerge672) {
                            break;
                        }
                        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29789, $vararg_buffer55);
                        $$49 = 328742;
                        STACKTOP = sp; return ($$49 | 0);
                    }
                } while (0);
                $356 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 176 | 0);
                $357 = HEAP8[$356 >> 0] | 0;
                $358 = ($357 << 24 >> 24) == (0);
                L194: do {
                    if (!($358)) {
                        $359 = HEAP32[$38 >> 2] | 0;
                        switch ($359 | 0) {
                            case 4: case 2: {
                                $365 = ((($12)) + 1152 | 0);
                                HEAP32[$365 >> 2] = 0;
                                break L194;
                                break;
                            }
                            default: {
                            }
                        }
                        $360 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
                        $361 = ($360 | 0) == (0);
                        if (!($361)) {
                            $$49 = $360;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        $362 = HEAP32[$4 >> 2] | 0;
                        $363 = ((($12)) + 1152 | 0);
                        HEAP32[$363 >> 2] = $362;
                        $364 = ($362 | 0) > (2);
                        if (!($364)) {
                            break;
                        }
                        HEAP32[$vararg_buffer57 >> 2] = $362;
                        __Z7WelsLogP13TagLogContextiPKcz($0, 1, 29878, $vararg_buffer57);
                        $$49 = 1026;
                        STACKTOP = sp; return ($$49 | 0);
                    }
                } while (0);
                $366 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $3) | 0);
                $367 = ($366 | 0) == (0);
                if (!($367)) {
                    $$49 = $366;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $368 = HEAP32[$3 >> 2] | 0;
                $369 = $368 & 1;
                $370 = ($369 | 0) == (0);
                $371 = $368 >>> 1;
                $372 = (0 - ($371)) | 0;
                $373 = (($368) + 1) | 0;
                $374 = $373 >>> 1;
                $storemerge$i749 = $370 ? $372 : $374;
                $375 = ((($12)) + 60 | 0);
                HEAP32[$375 >> 2] = $storemerge$i749;
                $376 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 160 | 0);
                $377 = HEAP32[$376 >> 2] | 0;
                $378 = (($377) + ($storemerge$i749)) | 0;
                $379 = ((($12)) + 64 | 0);
                HEAP32[$379 >> 2] = $378;
                $380 = ($378 >>> 0) > (51);
                if ($380) {
                    HEAP32[$vararg_buffer60 >> 2] = $378;
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29911, $vararg_buffer60);
                    $$49 = 328707;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $$off = (($33) + -3) | 0;
                $switch = ($$off >>> 0) < (2);
                $or$cond710 = $switch & $$not;
                if ($or$cond710) {
                    __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29930, $vararg_buffer63);
                    $$49 = 328744;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $381 = ((($12)) + 72 | 0);
                HEAP32[$381 >> 2] = 0;
                $382 = ((($12)) + 76 | 0);
                HEAP32[$382 >> 2] = 0;
                $383 = ((($12)) + 80 | 0);
                HEAP32[$383 >> 2] = 0;
                $384 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 179 | 0);
                $385 = HEAP8[$384 >> 0] | 0;
                $386 = ($385 << 24 >> 24) == (0);
                do {
                    if (!($386)) {
                        $387 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
                        $388 = ($387 | 0) == (0);
                        if (!($388)) {
                            $$49 = $387;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        $389 = HEAP32[$4 >> 2] | 0;
                        HEAP32[$381 >> 2] = $389;
                        $390 = ($389 >>> 0) > (6);
                        if ($390) {
                            HEAP32[$vararg_buffer65 >> 2] = $389;
                            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29950, $vararg_buffer65);
                            $$49 = 1034;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        $391 = ($389 | 0) == (1);
                        if ($391) {
                            break;
                        }
                        $392 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $3) | 0);
                        $393 = ($392 | 0) == (0);
                        if (!($393)) {
                            $$49 = $392;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        $394 = HEAP32[$3 >> 2] | 0;
                        $395 = $394 & 1;
                        $396 = ($395 | 0) == (0);
                        $397 = $394 >>> 1;
                        $398 = (0 - ($397)) | 0;
                        $399 = (($394) + 1) | 0;
                        $400 = $399 >>> 1;
                        $storemerge$i752 = $396 ? $398 : $400;
                        $401 = $storemerge$i752 << 1;
                        HEAP32[$382 >> 2] = $401;
                        $storemerge$i752$off = (($storemerge$i752) + 6) | 0;
                        $402 = ($storemerge$i752$off >>> 0) > (12);
                        if ($402) {
                            HEAP32[$vararg_buffer68 >> 2] = $401;
                            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 30002, $vararg_buffer68);
                            $$49 = 328702;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        $403 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $3) | 0);
                        $404 = ($403 | 0) == (0);
                        if (!($404)) {
                            $$49 = $403;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        $405 = HEAP32[$3 >> 2] | 0;
                        $406 = $405 & 1;
                        $407 = ($406 | 0) == (0);
                        $408 = $405 >>> 1;
                        $409 = (0 - ($408)) | 0;
                        $410 = (($405) + 1) | 0;
                        $411 = $410 >>> 1;
                        $storemerge$i755 = $407 ? $409 : $411;
                        $412 = $storemerge$i755 << 1;
                        HEAP32[$383 >> 2] = $412;
                        $storemerge$i755$off = (($storemerge$i755) + 6) | 0;
                        $413 = ($storemerge$i755$off >>> 0) > (12);
                        if (!($413)) {
                            break;
                        }
                        HEAP32[$vararg_buffer71 >> 2] = $412;
                        __Z7WelsLogP13TagLogContextiPKcz($0, 1, 30051, $vararg_buffer71);
                        $$49 = 328703;
                        STACKTOP = sp; return ($$49 | 0);
                    }
                } while (0);
                $414 = HEAP32[$60 >> 2] | 0;
                $415 = ($414 >>> 0) > (1);
                do {
                    if ($415) {
                        $416 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 12 | 0);
                        $417 = HEAP32[$416 >> 2] | 0;
                        $$off859 = (($417) + -3) | 0;
                        $418 = ($$off859 >>> 0) < (3);
                        if (!($418)) {
                            break;
                        }
                        $419 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 112 | 0);
                        $420 = HEAP32[$419 >> 2] | 0;
                        $421 = ($420 | 0) == (0);
                        if ($421) {
                            $$sink857 = 0;
                        } else {
                            $422 = (((((($0)) + 33648 | 0) + (($41 * 684) | 0) | 0)) + 116 | 0);
                            $423 = HEAP32[$422 >> 2] | 0;
                            $424 = (($423 >>> 0) / ($420 >>> 0)) & -1;
                            $425 = (($424) + 1) | 0;
                            $426 = (+($425 >>> 0));
                            $427 = (+Math_log((+$426)));
                            $428 = (+Math_ceil((+$427)));
                            $429 = (~~(($428)));
                            $430 = HEAP32[$125 >> 2] | 0;
                            $431 = (32 - ($429)) | 0;
                            $432 = $430 >>> $431;
                            $433 = HEAP32[$129 >> 2] | 0;
                            $434 = HEAP32[$1 >> 2] | 0;
                            $435 = HEAP32[$132 >> 2] | 0;
                            $436 = $430 << $429;
                            HEAP32[$125 >> 2] = $436;
                            $437 = HEAP32[$135 >> 2] | 0;
                            $438 = (($437) + ($429)) | 0;
                            HEAP32[$135 >> 2] = $438;
                            $439 = ($438 | 0) > (0);
                            $440 = $435;
                            do {
                                if ($439) {
                                    $441 = (($435) - ($434)) | 0;
                                    $442 = (($433) + 1) | 0;
                                    $443 = (($442) - ($434)) | 0;
                                    $444 = ($441 | 0) > ($443 | 0);
                                    if ($444) {
                                        $$49 = 11;
                                        STACKTOP = sp; return ($$49 | 0);
                                    } else {
                                        $445 = HEAP8[$440 >> 0] | 0;
                                        $446 = $445 & 255;
                                        $447 = $446 << 8;
                                        $448 = ((($440)) + 1 | 0);
                                        $449 = HEAP8[$448 >> 0] | 0;
                                        $450 = $449 & 255;
                                        $451 = $447 | $450;
                                        $452 = $451 << $438;
                                        $453 = $452 | $436;
                                        HEAP32[$125 >> 2] = $453;
                                        $454 = (($438) + -16) | 0;
                                        HEAP32[$135 >> 2] = $454;
                                        $455 = ((($440)) + 2 | 0);
                                        HEAP32[$132 >> 2] = $455;
                                        break;
                                    }
                                }
                            } while (0);
                            HEAP32[$4 >> 2] = $432;
                            $$sink857 = $432;
                        }
                        $456 = ((($12)) + 84 | 0);
                        HEAP32[$456 >> 2] = $$sink857;
                    }
                } while (0);
                if (!($2)) {
                    $457 = ((($12)) + 14 | 0);
                    $458 = HEAP8[$457 >> 0] | 0;
                    $459 = ($458 << 24 >> 24) == (0);
                    if ($459) {
                        $460 = ((($12)) + 16 | 0);
                        $461 = HEAP8[$460 >> 0] | 0;
                        $462 = ($461 << 24 >> 24) == (0);
                        $$$i = $462 & 1;
                        $$sink$i = $$$i;
                    } else {
                        $$sink$i = 0;
                    }
                    $463 = ((($12)) + 3852 | 0);
                    HEAP8[$463 >> 0] = $$sink$i;
                    $464 = ((($12)) + 3865 | 0);
                    HEAP8[$464 >> 0] = -1;
                    $465 = ((($12)) + 2772 | 0);
                    HEAP32[$465 >> 2] = 0;
                    $466 = ((($12)) + 2776 | 0);
                    HEAP32[$466 >> 2] = 0;
                    $467 = ((($12)) + 2780 | 0);
                    HEAP32[$467 >> 2] = 0;
                    $468 = ((($12)) + 3854 | 0);
                    HEAP8[$468 >> 0] = 0;
                    $469 = ((($12)) + 3863 | 0);
                    HEAP8[$469 >> 0] = 0;
                    $470 = ((($12)) + 3864 | 0);
                    HEAP8[$470 >> 0] = 1;
                    $471 = HEAP32[$163 >> 2] | 0;
                    $472 = $471 << 4;
                    $473 = ((($12)) + 2784 | 0);
                    HEAP32[$473 >> 2] = $472;
                    $474 = HEAP32[$166 >> 2] | 0;
                    $475 = $474 << 4;
                    $476 = ((($12)) + 2788 | 0);
                    HEAP32[$476 >> 2] = $475;
                    $477 = ((($12)) + 3855 | 0);
                    $478 = ((($12)) + 3866 | 0);
                    HEAP8[$478 >> 0] = 0;
                    $479 = ((($12)) + 3867 | 0);
                    $480 = $477;
                    $481 = $480;
                    HEAP8[$481 >> 0] = 0 & 255; HEAP8[$481 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$481 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$481 + 3 >> 0] = 0 >> 24;
                    $482 = (($480) + 4) | 0;
                    $483 = $482;
                    HEAP8[$483 >> 0] = 0 & 255; HEAP8[$483 + 1 >> 0] = (0 >> 8) & 255; HEAP8[$483 + 2 >> 0] = (0 >> 16) & 255; HEAP8[$483 + 3 >> 0] = 0 >> 24;
                    HEAP8[$479 >> 0] = 15;
                    $$49 = 0;
                    STACKTOP = sp; return ($$49 | 0);
                }
                HEAP32[$111 >> 2] = $$0604;
                $484 = ((($12)) + 14 | 0);
                $485 = HEAP8[$484 >> 0] | 0;
                $486 = ($485 << 24 >> 24) == (0);
                if ($486) {
                    $487 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
                    $488 = ($487 | 0) == (0);
                    if (!($488)) {
                        $$49 = $487;
                        STACKTOP = sp; return ($$49 | 0);
                    }
                    $489 = HEAP32[$4 >> 2] | 0;
                    $490 = $489 & 255;
                    $491 = ((($12)) + 3865 | 0);
                    HEAP8[$491 >> 0] = $490;
                    $492 = ((($$0604)) + 853 | 0);
                    $493 = HEAP8[$492 >> 0] | 0;
                    $494 = ($493 << 24 >> 24) == (0);
                    do {
                        if (!($494)) {
                            $495 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $4) | 0);
                            $496 = ($495 | 0) == (0);
                            if (!($496)) {
                                $$49 = $495;
                                STACKTOP = sp; return ($$49 | 0);
                            }
                            $497 = HEAP32[$4 >> 2] | 0;
                            $498 = ((($12)) + 2772 | 0);
                            HEAP32[$498 >> 2] = $497;
                            $499 = ($497 >>> 0) > (6);
                            if ($499) {
                                HEAP32[$vararg_buffer74 >> 2] = $497;
                                __Z7WelsLogP13TagLogContextiPKcz($0, 2, 30096, $vararg_buffer74);
                                $$49 = 1034;
                                STACKTOP = sp; return ($$49 | 0);
                            }
                            $500 = ($497 | 0) == (1);
                            if ($500) {
                                break;
                            }
                            $501 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $3) | 0);
                            $502 = ($501 | 0) == (0);
                            if (!($502)) {
                                $$49 = $501;
                                STACKTOP = sp; return ($$49 | 0);
                            }
                            $503 = HEAP32[$3 >> 2] | 0;
                            $504 = $503 & 1;
                            $505 = ($504 | 0) == (0);
                            $506 = $503 >>> 1;
                            $507 = (0 - ($506)) | 0;
                            $508 = (($503) + 1) | 0;
                            $509 = $508 >>> 1;
                            $storemerge$i733 = $505 ? $507 : $509;
                            $510 = $storemerge$i733 << 1;
                            $511 = ((($12)) + 2776 | 0);
                            HEAP32[$511 >> 2] = $510;
                            $storemerge$i733$off = (($storemerge$i733) + 6) | 0;
                            $512 = ($storemerge$i733$off >>> 0) > (12);
                            if ($512) {
                                HEAP32[$vararg_buffer77 >> 2] = $510;
                                __Z7WelsLogP13TagLogContextiPKcz($0, 1, 30160, $vararg_buffer77);
                                $$49 = 328702;
                                STACKTOP = sp; return ($$49 | 0);
                            }
                            $513 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $3) | 0);
                            $514 = ($513 | 0) == (0);
                            if (!($514)) {
                                $$49 = $513;
                                STACKTOP = sp; return ($$49 | 0);
                            }
                            $515 = HEAP32[$3 >> 2] | 0;
                            $516 = $515 & 1;
                            $517 = ($516 | 0) == (0);
                            $518 = $515 >>> 1;
                            $519 = (0 - ($518)) | 0;
                            $520 = (($515) + 1) | 0;
                            $521 = $520 >>> 1;
                            $storemerge$i = $517 ? $519 : $521;
                            $522 = $storemerge$i << 1;
                            $523 = ((($12)) + 2780 | 0);
                            HEAP32[$523 >> 2] = $522;
                            $storemerge$i$off = (($storemerge$i) + 6) | 0;
                            $524 = ($storemerge$i$off >>> 0) > (12);
                            if (!($524)) {
                                break;
                            }
                            HEAP32[$vararg_buffer80 >> 2] = $522;
                            __Z7WelsLogP13TagLogContextiPKcz($0, 1, 30215, $vararg_buffer80);
                            $$49 = 328703;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                    } while (0);
                    $525 = ((($$0604)) + 851 | 0);
                    $526 = HEAP8[$525 >> 0] | 0;
                    $527 = ((($12)) + 3863 | 0);
                    HEAP8[$527 >> 0] = $526;
                    $528 = ((($$0604)) + 852 | 0);
                    $529 = HEAP8[$528 >> 0] | 0;
                    $530 = ((($12)) + 3864 | 0);
                    HEAP8[$530 >> 0] = $529;
                    $531 = HEAP32[$125 >> 2] | 0;
                    $532 = $531 >>> 31;
                    $533 = HEAP32[$129 >> 2] | 0;
                    $534 = HEAP32[$1 >> 2] | 0;
                    $535 = HEAP32[$132 >> 2] | 0;
                    $536 = $531 << 1;
                    HEAP32[$125 >> 2] = $536;
                    $537 = HEAP32[$135 >> 2] | 0;
                    $538 = (($537) + 1) | 0;
                    HEAP32[$135 >> 2] = $538;
                    $539 = ($537 | 0) > (-1);
                    $540 = $535;
                    do {
                        if ($539) {
                            $541 = (($535) - ($534)) | 0;
                            $542 = (($533) + 1) | 0;
                            $543 = (($542) - ($534)) | 0;
                            $544 = ($541 | 0) > ($543 | 0);
                            if ($544) {
                                $$49 = 11;
                                STACKTOP = sp; return ($$49 | 0);
                            } else {
                                $545 = HEAP8[$540 >> 0] | 0;
                                $546 = $545 & 255;
                                $547 = $546 << 8;
                                $548 = ((($540)) + 1 | 0);
                                $549 = HEAP8[$548 >> 0] | 0;
                                $550 = $549 & 255;
                                $551 = $547 | $550;
                                $552 = $551 << $538;
                                $553 = $552 | $536;
                                HEAP32[$125 >> 2] = $553;
                                $554 = (($537) + -15) | 0;
                                HEAP32[$135 >> 2] = $554;
                                $555 = ((($540)) + 2 | 0);
                                HEAP32[$132 >> 2] = $555;
                                break;
                            }
                        }
                    } while (0);
                    HEAP32[$4 >> 2] = $532;
                    $556 = ((($12)) + 3854 | 0);
                    $557 = $532 & 255;
                    HEAP8[$556 >> 0] = $557;
                    $558 = ((($$0604)) + 832 | 0);
                    $559 = HEAP32[$558 >> 2] | 0;
                    $560 = ((($$0604)) + 836 | 0);
                    $561 = HEAP32[$560 >> 2] | 0;
                    $562 = HEAP8[$158 >> 0] | 0;
                    $563 = $562 & 255;
                    $564 = (2 - ($563)) | 0;
                    $565 = ((($$0604)) + 840 | 0);
                    $566 = HEAP32[$565 >> 2] | 0;
                    $567 = ((($$0604)) + 844 | 0);
                    $568 = HEAP32[$567 >> 2] | 0;
                    $569 = HEAP32[$163 >> 2] | 0;
                    $570 = $569 << 4;
                    $sum = (($566) + ($559)) | 0;
                    $571 = (($570) - ($sum)) | 0;
                    $572 = ((($12)) + 2784 | 0);
                    HEAP32[$572 >> 2] = $571;
                    $573 = HEAP32[$166 >> 2] | 0;
                    $574 = $573 << 4;
                    $575 = (($568) + ($561)) | 0;
                    $576 = Math_imul($575, $564) | 0;
                    $577 = HEAP8[$156 >> 0] | 0;
                    $addconv646 = (($577) + 1) << 24 >> 24;
                    $578 = $addconv646 & 255;
                    $579 = (($576 | 0) / ($578 | 0)) & -1;
                    $580 = (($574) - ($579)) | 0;
                    $581 = ((($12)) + 2788 | 0);
                    HEAP32[$581 >> 2] = $580;
                    $$pre = HEAP8[$484 >> 0] | 0;
                    $590 = $$pre;
                } else {
                    $582 = ((($12)) + 3865 | 0);
                    HEAP8[$582 >> 0] = -1;
                    $590 = $485;
                }
                $583 = ((($12)) + 3855 | 0);
                $584 = ((($12)) + 3856 | 0);
                $585 = ((($12)) + 3857 | 0);
                $586 = ((($12)) + 3858 | 0);
                $587 = ((($12)) + 3859 | 0);
                $588 = ((($12)) + 3860 | 0);
                $589 = ((($12)) + 3861 | 0);
                $591 = ($590 << 24 >> 24) == (0);
                ; HEAP8[$583 >> 0] = 0 | 0; HEAP8[$583 + 1 >> 0] = 0 | 0; HEAP8[$583 + 2 >> 0] = 0 | 0; HEAP8[$583 + 3 >> 0] = 0 | 0; HEAP8[$583 + 4 >> 0] = 0 | 0; HEAP8[$583 + 5 >> 0] = 0 | 0; HEAP8[$583 + 6 >> 0] = 0 | 0;
                do {
                    if ($591) {
                        $593 = ((($$0604)) + 854 | 0);
                        $594 = HEAP8[$593 >> 0] | 0;
                        $595 = ((($12)) + 3862 | 0);
                        HEAP8[$595 >> 0] = $594;
                        $596 = HEAP32[$125 >> 2] | 0;
                        $597 = $596 >>> 31;
                        $598 = HEAP32[$129 >> 2] | 0;
                        $599 = HEAP32[$1 >> 2] | 0;
                        $600 = HEAP32[$132 >> 2] | 0;
                        $601 = $596 << 1;
                        HEAP32[$125 >> 2] = $601;
                        $602 = HEAP32[$135 >> 2] | 0;
                        $603 = (($602) + 1) | 0;
                        HEAP32[$135 >> 2] = $603;
                        $604 = ($602 | 0) > (-1);
                        $605 = $600;
                        do {
                            if ($604) {
                                $606 = (($600) - ($599)) | 0;
                                $607 = (($598) + 1) | 0;
                                $608 = (($607) - ($599)) | 0;
                                $609 = ($606 | 0) > ($608 | 0);
                                if ($609) {
                                    $$49 = 11;
                                    STACKTOP = sp; return ($$49 | 0);
                                } else {
                                    $610 = HEAP8[$605 >> 0] | 0;
                                    $611 = $610 & 255;
                                    $612 = $611 << 8;
                                    $613 = ((($605)) + 1 | 0);
                                    $614 = HEAP8[$613 >> 0] | 0;
                                    $615 = $614 & 255;
                                    $616 = $612 | $615;
                                    $617 = $616 << $603;
                                    $618 = $617 | $601;
                                    HEAP32[$125 >> 2] = $618;
                                    $619 = (($602) + -15) | 0;
                                    HEAP32[$135 >> 2] = $619;
                                    $620 = ((($605)) + 2 | 0);
                                    HEAP32[$132 >> 2] = $620;
                                    break;
                                }
                            }
                        } while (0);
                        HEAP32[$4 >> 2] = $597;
                        $621 = ($597 | 0) == (0);
                        $622 = $597 & 255;
                        HEAP8[$583 >> 0] = $622;
                        if (!($621)) {
                            __Z7WelsLogP13TagLogContextiPKcz($0, 2, 30272, $vararg_buffer83);
                            $$49 = 328748;
                            STACKTOP = sp; return ($$49 | 0);
                        }
                        $623 = HEAP32[$125 >> 2] | 0;
                        $624 = $623 >>> 31;
                        $625 = HEAP32[$129 >> 2] | 0;
                        $626 = HEAP32[$1 >> 2] | 0;
                        $627 = HEAP32[$132 >> 2] | 0;
                        $628 = $623 << 1;
                        HEAP32[$125 >> 2] = $628;
                        $629 = HEAP32[$135 >> 2] | 0;
                        $630 = (($629) + 1) | 0;
                        HEAP32[$135 >> 2] = $630;
                        $631 = ($629 | 0) > (-1);
                        $632 = $627;
                        do {
                            if ($631) {
                                $633 = (($627) - ($626)) | 0;
                                $634 = (($625) + 1) | 0;
                                $635 = (($634) - ($626)) | 0;
                                $636 = ($633 | 0) > ($635 | 0);
                                if ($636) {
                                    $$49 = 11;
                                    STACKTOP = sp; return ($$49 | 0);
                                } else {
                                    $637 = HEAP8[$632 >> 0] | 0;
                                    $638 = $637 & 255;
                                    $639 = $638 << 8;
                                    $640 = ((($632)) + 1 | 0);
                                    $641 = HEAP8[$640 >> 0] | 0;
                                    $642 = $641 & 255;
                                    $643 = $639 | $642;
                                    $644 = $643 << $630;
                                    $645 = $644 | $628;
                                    HEAP32[$125 >> 2] = $645;
                                    $646 = (($629) + -15) | 0;
                                    HEAP32[$135 >> 2] = $646;
                                    $647 = ((($632)) + 2 | 0);
                                    HEAP32[$132 >> 2] = $647;
                                    break;
                                }
                            }
                        } while (0);
                        HEAP32[$4 >> 2] = $624;
                        $648 = ($624 | 0) == (0);
                        $649 = $624 & 255;
                        HEAP8[$584 >> 0] = $649;
                        if ($648) {
                            $650 = HEAP32[$125 >> 2] | 0;
                            $651 = $650 >>> 31;
                            $652 = HEAP32[$129 >> 2] | 0;
                            $653 = HEAP32[$1 >> 2] | 0;
                            $654 = HEAP32[$132 >> 2] | 0;
                            $655 = $650 << 1;
                            HEAP32[$125 >> 2] = $655;
                            $656 = HEAP32[$135 >> 2] | 0;
                            $657 = (($656) + 1) | 0;
                            HEAP32[$135 >> 2] = $657;
                            $658 = ($656 | 0) > (-1);
                            $659 = $654;
                            do {
                                if ($658) {
                                    $660 = (($654) - ($653)) | 0;
                                    $661 = (($652) + 1) | 0;
                                    $662 = (($661) - ($653)) | 0;
                                    $663 = ($660 | 0) > ($662 | 0);
                                    if ($663) {
                                        $$49 = 11;
                                        STACKTOP = sp; return ($$49 | 0);
                                    } else {
                                        $664 = HEAP8[$659 >> 0] | 0;
                                        $665 = $664 & 255;
                                        $666 = $665 << 8;
                                        $667 = ((($659)) + 1 | 0);
                                        $668 = HEAP8[$667 >> 0] | 0;
                                        $669 = $668 & 255;
                                        $670 = $666 | $669;
                                        $671 = $670 << $657;
                                        $672 = $671 | $655;
                                        HEAP32[$125 >> 2] = $672;
                                        $673 = (($656) + -15) | 0;
                                        HEAP32[$135 >> 2] = $673;
                                        $674 = ((($659)) + 2 | 0);
                                        HEAP32[$132 >> 2] = $674;
                                        break;
                                    }
                                }
                            } while (0);
                            HEAP32[$4 >> 2] = $651;
                            $675 = $651 & 255;
                            HEAP8[$585 >> 0] = $675;
                            $676 = $675;
                        } else {
                            $$pr836 = HEAP8[$585 >> 0] | 0;
                            $676 = $$pr836;
                        }
                        $677 = ($676 << 24 >> 24) == (0);
                        do {
                            if ($677) {
                                $678 = HEAP32[$125 >> 2] | 0;
                                $679 = $678 >>> 31;
                                $680 = HEAP32[$129 >> 2] | 0;
                                $681 = HEAP32[$1 >> 2] | 0;
                                $682 = HEAP32[$132 >> 2] | 0;
                                $683 = $678 << 1;
                                HEAP32[$125 >> 2] = $683;
                                $684 = HEAP32[$135 >> 2] | 0;
                                $685 = (($684) + 1) | 0;
                                HEAP32[$135 >> 2] = $685;
                                $686 = ($684 | 0) > (-1);
                                $687 = $682;
                                do {
                                    if ($686) {
                                        $688 = (($682) - ($681)) | 0;
                                        $689 = (($680) + 1) | 0;
                                        $690 = (($689) - ($681)) | 0;
                                        $691 = ($688 | 0) > ($690 | 0);
                                        if ($691) {
                                            $$49 = 11;
                                            STACKTOP = sp; return ($$49 | 0);
                                        } else {
                                            $692 = HEAP8[$687 >> 0] | 0;
                                            $693 = $692 & 255;
                                            $694 = $693 << 8;
                                            $695 = ((($687)) + 1 | 0);
                                            $696 = HEAP8[$695 >> 0] | 0;
                                            $697 = $696 & 255;
                                            $698 = $694 | $697;
                                            $699 = $698 << $685;
                                            $700 = $699 | $683;
                                            HEAP32[$125 >> 2] = $700;
                                            $701 = (($684) + -15) | 0;
                                            HEAP32[$135 >> 2] = $701;
                                            $702 = ((($687)) + 2 | 0);
                                            HEAP32[$132 >> 2] = $702;
                                            break;
                                        }
                                    }
                                } while (0);
                                HEAP32[$4 >> 2] = $679;
                                $703 = ($679 | 0) == (0);
                                $704 = $679 & 255;
                                HEAP8[$586 >> 0] = $704;
                                if (!($703)) {
                                    break;
                                }
                                $705 = HEAP32[$125 >> 2] | 0;
                                $706 = $705 >>> 31;
                                $707 = HEAP32[$129 >> 2] | 0;
                                $708 = HEAP32[$1 >> 2] | 0;
                                $709 = HEAP32[$132 >> 2] | 0;
                                $710 = $705 << 1;
                                HEAP32[$125 >> 2] = $710;
                                $711 = HEAP32[$135 >> 2] | 0;
                                $712 = (($711) + 1) | 0;
                                HEAP32[$135 >> 2] = $712;
                                $713 = ($711 | 0) > (-1);
                                $714 = $709;
                                do {
                                    if ($713) {
                                        $715 = (($709) - ($708)) | 0;
                                        $716 = (($707) + 1) | 0;
                                        $717 = (($716) - ($708)) | 0;
                                        $718 = ($715 | 0) > ($717 | 0);
                                        if ($718) {
                                            $$49 = 11;
                                            STACKTOP = sp; return ($$49 | 0);
                                        } else {
                                            $719 = HEAP8[$714 >> 0] | 0;
                                            $720 = $719 & 255;
                                            $721 = $720 << 8;
                                            $722 = ((($714)) + 1 | 0);
                                            $723 = HEAP8[$722 >> 0] | 0;
                                            $724 = $723 & 255;
                                            $725 = $721 | $724;
                                            $726 = $725 << $712;
                                            $727 = $726 | $710;
                                            HEAP32[$125 >> 2] = $727;
                                            $728 = (($711) + -15) | 0;
                                            HEAP32[$135 >> 2] = $728;
                                            $729 = ((($714)) + 2 | 0);
                                            HEAP32[$132 >> 2] = $729;
                                            break;
                                        }
                                    }
                                } while (0);
                                HEAP32[$4 >> 2] = $706;
                                $730 = $706 & 255;
                                HEAP8[$587 >> 0] = $730;
                            }
                        } while (0);
                        $731 = HEAP32[$125 >> 2] | 0;
                        $732 = $731 >>> 31;
                        $733 = HEAP32[$129 >> 2] | 0;
                        $734 = HEAP32[$1 >> 2] | 0;
                        $735 = HEAP32[$132 >> 2] | 0;
                        $736 = $731 << 1;
                        HEAP32[$125 >> 2] = $736;
                        $737 = HEAP32[$135 >> 2] | 0;
                        $738 = (($737) + 1) | 0;
                        HEAP32[$135 >> 2] = $738;
                        $739 = ($737 | 0) > (-1);
                        $740 = $735;
                        do {
                            if ($739) {
                                $741 = (($735) - ($734)) | 0;
                                $742 = (($733) + 1) | 0;
                                $743 = (($742) - ($734)) | 0;
                                $744 = ($741 | 0) > ($743 | 0);
                                if ($744) {
                                    $$49 = 11;
                                    STACKTOP = sp; return ($$49 | 0);
                                } else {
                                    $745 = HEAP8[$740 >> 0] | 0;
                                    $746 = $745 & 255;
                                    $747 = $746 << 8;
                                    $748 = ((($740)) + 1 | 0);
                                    $749 = HEAP8[$748 >> 0] | 0;
                                    $750 = $749 & 255;
                                    $751 = $747 | $750;
                                    $752 = $751 << $738;
                                    $753 = $752 | $736;
                                    HEAP32[$125 >> 2] = $753;
                                    $754 = (($737) + -15) | 0;
                                    HEAP32[$135 >> 2] = $754;
                                    $755 = ((($740)) + 2 | 0);
                                    HEAP32[$132 >> 2] = $755;
                                    break;
                                }
                            }
                        } while (0);
                        HEAP32[$4 >> 2] = $732;
                        $756 = ($732 | 0) == (0);
                        $757 = $732 & 255;
                        HEAP8[$588 >> 0] = $757;
                        if ($756) {
                            $758 = HEAP32[$125 >> 2] | 0;
                            $759 = $758 >>> 31;
                            $760 = HEAP32[$129 >> 2] | 0;
                            $761 = HEAP32[$1 >> 2] | 0;
                            $762 = HEAP32[$132 >> 2] | 0;
                            $763 = $758 << 1;
                            HEAP32[$125 >> 2] = $763;
                            $764 = HEAP32[$135 >> 2] | 0;
                            $765 = (($764) + 1) | 0;
                            HEAP32[$135 >> 2] = $765;
                            $766 = ($764 | 0) > (-1);
                            $767 = $762;
                            do {
                                if ($766) {
                                    $768 = (($762) - ($761)) | 0;
                                    $769 = (($760) + 1) | 0;
                                    $770 = (($769) - ($761)) | 0;
                                    $771 = ($768 | 0) > ($770 | 0);
                                    if ($771) {
                                        $$49 = 11;
                                        STACKTOP = sp; return ($$49 | 0);
                                    } else {
                                        $772 = HEAP8[$767 >> 0] | 0;
                                        $773 = $772 & 255;
                                        $774 = $773 << 8;
                                        $775 = ((($767)) + 1 | 0);
                                        $776 = HEAP8[$775 >> 0] | 0;
                                        $777 = $776 & 255;
                                        $778 = $774 | $777;
                                        $779 = $778 << $765;
                                        $780 = $779 | $763;
                                        HEAP32[$125 >> 2] = $780;
                                        $781 = (($764) + -15) | 0;
                                        HEAP32[$135 >> 2] = $781;
                                        $782 = ((($767)) + 2 | 0);
                                        HEAP32[$132 >> 2] = $782;
                                        break;
                                    }
                                }
                            } while (0);
                            HEAP32[$4 >> 2] = $759;
                            $783 = $759 & 255;
                            HEAP8[$589 >> 0] = $783;
                        }
                        $784 = ((($$0604)) + 855 | 0);
                        $785 = HEAP8[$784 >> 0] | 0;
                        $786 = ($785 << 24 >> 24) == (0);
                        if ($786) {
                            break;
                        }
                        $787 = HEAP32[$125 >> 2] | 0;
                        $788 = $787 >>> 31;
                        $789 = HEAP32[$129 >> 2] | 0;
                        $790 = HEAP32[$1 >> 2] | 0;
                        $791 = HEAP32[$132 >> 2] | 0;
                        $792 = $787 << 1;
                        HEAP32[$125 >> 2] = $792;
                        $793 = HEAP32[$135 >> 2] | 0;
                        $794 = (($793) + 1) | 0;
                        HEAP32[$135 >> 2] = $794;
                        $795 = ($793 | 0) > (-1);
                        $796 = $791;
                        do {
                            if ($795) {
                                $797 = (($791) - ($790)) | 0;
                                $798 = (($789) + 1) | 0;
                                $799 = (($798) - ($790)) | 0;
                                $800 = ($797 | 0) > ($799 | 0);
                                if ($800) {
                                    $$49 = 11;
                                    STACKTOP = sp; return ($$49 | 0);
                                } else {
                                    $801 = HEAP8[$796 >> 0] | 0;
                                    $802 = $801 & 255;
                                    $803 = $802 << 8;
                                    $804 = ((($796)) + 1 | 0);
                                    $805 = HEAP8[$804 >> 0] | 0;
                                    $806 = $805 & 255;
                                    $807 = $803 | $806;
                                    $808 = $807 << $794;
                                    $809 = $808 | $792;
                                    HEAP32[$125 >> 2] = $809;
                                    $810 = (($793) + -15) | 0;
                                    HEAP32[$135 >> 2] = $810;
                                    $811 = ((($796)) + 2 | 0);
                                    HEAP32[$132 >> 2] = $811;
                                    break;
                                }
                            }
                        } while (0);
                        HEAP32[$4 >> 2] = $788;
                        $812 = $788 & 255;
                        HEAP8[$595 >> 0] = $812;
                    } else {
                        $592 = ((($12)) + 3862 | 0);
                        HEAP8[$592 >> 0] = 0;
                    }
                } while (0);
                $813 = ((($$0604)) + 856 | 0);
                $814 = HEAP8[$813 >> 0] | 0;
                $815 = ($814 << 24 >> 24) == (0);
                if (!($815)) {
                    $874 = ((($12)) + 3866 | 0);
                    HEAP8[$874 >> 0] = 0;
                    $875 = ((($12)) + 3867 | 0);
                    HEAP8[$875 >> 0] = 15;
                    $$49 = 0;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $816 = HEAP32[$125 >> 2] | 0;
                $817 = $816 >>> 28;
                $818 = HEAP32[$129 >> 2] | 0;
                $819 = HEAP32[$1 >> 2] | 0;
                $820 = HEAP32[$132 >> 2] | 0;
                $821 = $816 << 4;
                HEAP32[$125 >> 2] = $821;
                $822 = HEAP32[$135 >> 2] | 0;
                $823 = (($822) + 4) | 0;
                HEAP32[$135 >> 2] = $823;
                $824 = ($822 | 0) > (-4);
                $825 = $820;
                do {
                    if ($824) {
                        $826 = (($820) - ($819)) | 0;
                        $827 = (($818) + 1) | 0;
                        $828 = (($827) - ($819)) | 0;
                        $829 = ($826 | 0) > ($828 | 0);
                        if ($829) {
                            $$49 = 11;
                            STACKTOP = sp; return ($$49 | 0);
                        } else {
                            $830 = HEAP8[$825 >> 0] | 0;
                            $831 = $830 & 255;
                            $832 = $831 << 8;
                            $833 = ((($825)) + 1 | 0);
                            $834 = HEAP8[$833 >> 0] | 0;
                            $835 = $834 & 255;
                            $836 = $832 | $835;
                            $837 = $836 << $823;
                            $838 = $837 | $821;
                            HEAP32[$125 >> 2] = $838;
                            $839 = (($822) + -12) | 0;
                            HEAP32[$135 >> 2] = $839;
                            $840 = ((($825)) + 2 | 0);
                            HEAP32[$132 >> 2] = $840;
                            break;
                        }
                    }
                } while (0);
                HEAP32[$4 >> 2] = $817;
                $841 = $817 & 255;
                $842 = ((($12)) + 3866 | 0);
                HEAP8[$842 >> 0] = $841;
                $843 = HEAP32[$125 >> 2] | 0;
                $844 = $843 >>> 28;
                $845 = HEAP32[$129 >> 2] | 0;
                $846 = HEAP32[$1 >> 2] | 0;
                $847 = HEAP32[$132 >> 2] | 0;
                $848 = $843 << 4;
                HEAP32[$125 >> 2] = $848;
                $849 = HEAP32[$135 >> 2] | 0;
                $850 = (($849) + 4) | 0;
                HEAP32[$135 >> 2] = $850;
                $851 = ($849 | 0) > (-4);
                $852 = $847;
                do {
                    if ($851) {
                        $853 = (($847) - ($846)) | 0;
                        $854 = (($845) + 1) | 0;
                        $855 = (($854) - ($846)) | 0;
                        $856 = ($853 | 0) > ($855 | 0);
                        if ($856) {
                            $$49 = 11;
                            STACKTOP = sp; return ($$49 | 0);
                        } else {
                            $857 = HEAP8[$852 >> 0] | 0;
                            $858 = $857 & 255;
                            $859 = $858 << 8;
                            $860 = ((($852)) + 1 | 0);
                            $861 = HEAP8[$860 >> 0] | 0;
                            $862 = $861 & 255;
                            $863 = $859 | $862;
                            $864 = $863 << $850;
                            $865 = $864 | $848;
                            HEAP32[$125 >> 2] = $865;
                            $866 = (($849) + -12) | 0;
                            HEAP32[$135 >> 2] = $866;
                            $867 = ((($852)) + 2 | 0);
                            HEAP32[$132 >> 2] = $867;
                            break;
                        }
                    }
                } while (0);
                HEAP32[$4 >> 2] = $844;
                $868 = $844 & 255;
                $869 = ((($12)) + 3867 | 0);
                HEAP8[$869 >> 0] = $868;
                $870 = HEAP8[$842 >> 0] | 0;
                $871 = ($870 << 24 >> 24) == (0);
                $872 = ($844 | 0) == (15);
                $or$cond707 = $872 & $871;
                if ($or$cond707) {
                    $$49 = 0;
                    STACKTOP = sp; return ($$49 | 0);
                }
                $873 = $870 & 255;
                HEAP32[$vararg_buffer85 >> 2] = $873;
                $vararg_ptr88 = ((($vararg_buffer85)) + 4 | 0);
                HEAP32[$vararg_ptr88 >> 2] = $844;
                __Z7WelsLogP13TagLogContextiPKcz($0, 2, 30307, $vararg_buffer85);
                $$49 = 328745;
                STACKTOP = sp; return ($$49 | 0);
            }
        } while (0);
        __Z7WelsLogP13TagLogContextiPKcz($0, 2, 29691, $vararg_buffer49);
        $$49 = 328690;
        STACKTOP = sp; return ($$49 | 0);
    }
    function __ZN7WelsDec23CheckAccessUnitBoundaryEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitES3_PNS_6TagSpsE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($1)) + 15 | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = (((($0)) + 241892 | 0) + ($6 << 2) | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ($8 | 0) == (0 | 0);
        $10 = ($8 | 0) == ($3 | 0);
        $or$cond = $9 | $10;
        if (!($or$cond)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $11 = ((($2)) + 17 | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = ((($1)) + 17 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = ($12 << 24 >> 24) == ($14 << 24 >> 24);
        if (!($15)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $16 = ((($2)) + 28 | 0);
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = ((($1)) + 28 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = ($17 | 0) == ($19 | 0);
        if (!($20)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $21 = ((($2)) + 48 | 0);
        $22 = HEAP32[$21 >> 2] | 0;
        $23 = ((($1)) + 48 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = ($22 | 0) > ($24 | 0);
        if ($25) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $26 = ((($2)) + 15 | 0);
        $27 = HEAP8[$26 >> 0] | 0;
        $28 = ($27 & 255) > ($5 & 255);
        if ($28) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $29 = ($27 << 24 >> 24) == ($5 << 24 >> 24);
        if ($29) {
            $30 = ((($2)) + 100 | 0);
            $31 = HEAP32[$30 >> 2] | 0;
            $32 = ((($1)) + 100 | 0);
            $33 = HEAP32[$32 >> 2] | 0;
            $34 = ($31 | 0) == ($33 | 0);
            if (!($34)) {
                $$0 = 1;
                return ($$0 | 0);
            }
        }
        $35 = ((($2)) + 2761 | 0);
        $36 = HEAP8[$35 >> 0] | 0;
        $37 = ((($1)) + 2761 | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = ($36 << 24 >> 24) == ($38 << 24 >> 24);
        if (!($39)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $40 = ((($2)) + 2762 | 0);
        $41 = HEAP8[$40 >> 0] | 0;
        $42 = ((($1)) + 2762 | 0);
        $43 = HEAP8[$42 >> 0] | 0;
        $44 = ($41 << 24 >> 24) == ($43 << 24 >> 24);
        if (!($44)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $45 = ((($2)) + 1 | 0);
        $46 = HEAP8[$45 >> 0] | 0;
        $47 = ($46 << 24 >> 24) != (0);
        $48 = ((($1)) + 1 | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = ($49 << 24 >> 24) != (0);
        $51 = $47 ^ $50;
        if ($51) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $52 = ((($2)) + 12 | 0);
        $53 = HEAP8[$52 >> 0] | 0;
        $54 = ((($1)) + 12 | 0);
        $55 = HEAP8[$54 >> 0] | 0;
        $56 = ($53 << 24 >> 24) == ($55 << 24 >> 24);
        if (!($56)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $57 = ($53 << 24 >> 24) == (0);
        if (!($57)) {
            $58 = ((($2)) + 2752 | 0);
            $59 = HEAP16[$58 >> 1] | 0;
            $60 = ((($1)) + 2752 | 0);
            $61 = HEAP16[$60 >> 1] | 0;
            $62 = ($59 << 16 >> 16) == ($61 << 16 >> 16);
            if (!($62)) {
                $$0 = 1;
                return ($$0 | 0);
            }
        }
        $63 = ((($3)) + 20 | 0);
        $64 = HEAP32[$63 >> 2] | 0;
        switch ($64 | 0) {
            case 0: {
                $65 = ((($2)) + 32 | 0);
                $66 = HEAP32[$65 >> 2] | 0;
                $67 = ((($1)) + 32 | 0);
                $68 = HEAP32[$67 >> 2] | 0;
                $69 = ($66 | 0) == ($68 | 0);
                if (!($69)) {
                    $$0 = 1;
                    return ($$0 | 0);
                }
                $70 = ((($2)) + 36 | 0);
                $71 = HEAP32[$70 >> 2] | 0;
                $72 = ((($1)) + 36 | 0);
                $73 = HEAP32[$72 >> 2] | 0;
                $74 = ($71 | 0) == ($73 | 0);
                if (!($74)) {
                    $$0 = 1;
                    return ($$0 | 0);
                }
                break;
            }
            case 1: {
                $75 = ((($2)) + 40 | 0);
                $76 = HEAP32[$75 >> 2] | 0;
                $77 = ((($1)) + 40 | 0);
                $78 = HEAP32[$77 >> 2] | 0;
                $79 = ($76 | 0) == ($78 | 0);
                if (!($79)) {
                    $$0 = 1;
                    return ($$0 | 0);
                }
                $80 = ((($2)) + 44 | 0);
                $81 = HEAP32[$80 >> 2] | 0;
                $82 = ((($1)) + 44 | 0);
                $83 = HEAP32[$82 >> 2] | 0;
                $84 = ($81 | 0) == ($83 | 0);
                if (!($84)) {
                    $$0 = 1;
                    return ($$0 | 0);
                }
                break;
            }
            default: {
            }
        }
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $$0$i$ph = 0, $$0$i7678 = 0, $$074 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
        var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 20 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = $3 >>> 24;
        $5 = ($4 | 0) == (0);
        do {
            if ($5) {
                $9 = $3 >>> 16;
                $10 = ($9 | 0) == (0);
                if (!($10)) {
                    $11 = (15630 + ($9) | 0);
                    $12 = HEAP8[$11 >> 0] | 0;
                    $13 = $12 & 255;
                    $14 = (($13) + 8) | 0;
                    $$0$i$ph = $14;
                    break;
                }
                $15 = $3 >>> 8;
                $16 = ($15 | 0) == (0);
                if (!($16)) {
                    $17 = (15630 + ($15) | 0);
                    $18 = HEAP8[$17 >> 0] | 0;
                    $19 = $18 & 255;
                    $20 = (($19) + 16) | 0;
                    $$0$i$ph = $20;
                    break;
                }
                $21 = ($3 | 0) == (0);
                if ($21) {
                    $$0 = 12;
                    return ($$0 | 0);
                } else {
                    $22 = (15630 + ($3) | 0);
                    $23 = HEAP8[$22 >> 0] | 0;
                    $24 = $23 & 255;
                    $25 = (($24) + 24) | 0;
                    $$0$i$ph = $25;
                    break;
                }
            } else {
                $6 = (15630 + ($4) | 0);
                $7 = HEAP8[$6 >> 0] | 0;
                $8 = $7 & 255;
                $$0$i$ph = $8;
            }
        } while (0);
        $26 = ((($0)) + 4 | 0);
        $27 = HEAP32[$26 >> 2] | 0;
        $28 = HEAP32[$0 >> 2] | 0;
        $29 = (($27) - ($28)) | 0;
        $30 = ($$0$i$ph | 0) > (16);
        $31 = ((($0)) + 16 | 0);
        $32 = HEAP32[$31 >> 2] | 0;
        $33 = (($32) - ($28)) | 0;
        $34 = $32;
        do {
            if ($30) {
                $35 = $3 << 16;
                HEAP32[$2 >> 2] = $35;
                $36 = ((($0)) + 24 | 0);
                $37 = HEAP32[$36 >> 2] | 0;
                $38 = (($37) + 16) | 0;
                HEAP32[$36 >> 2] = $38;
                $39 = ($37 | 0) > (-16);
                do {
                    if ($39) {
                        $40 = (($29) + 1) | 0;
                        $41 = ($33 | 0) > ($40 | 0);
                        if ($41) {
                            $$0 = 11;
                            return ($$0 | 0);
                        } else {
                            $42 = HEAP8[$34 >> 0] | 0;
                            $43 = $42 & 255;
                            $44 = $43 << 8;
                            $45 = ((($34)) + 1 | 0);
                            $46 = HEAP8[$45 >> 0] | 0;
                            $47 = $46 & 255;
                            $48 = $44 | $47;
                            $49 = $48 << $38;
                            $50 = $49 | $35;
                            HEAP32[$2 >> 2] = $50;
                            HEAP32[$36 >> 2] = $37;
                            $51 = ((($34)) + 2 | 0);
                            HEAP32[$31 >> 2] = $51;
                            $52 = $51;
                            $55 = $50; $57 = $37; $60 = $52; $64 = $51;
                            break;
                        }
                    } else {
                        $55 = $35; $57 = $38; $60 = $32; $64 = $34;
                    }
                } while (0);
                $53 = (($$0$i$ph) + -15) | 0;
                $54 = $55 << $53;
                HEAP32[$2 >> 2] = $54;
                $56 = (($57) + ($53)) | 0;
                HEAP32[$36 >> 2] = $56;
                $58 = ($56 | 0) > (0);
                if ($58) {
                    $59 = (($60) - ($28)) | 0;
                    $61 = (($29) + 1) | 0;
                    $62 = ($59 | 0) > ($61 | 0);
                    if ($62) {
                        $$0 = 11;
                        return ($$0 | 0);
                    } else {
                        $63 = HEAP8[$64 >> 0] | 0;
                        $65 = $63 & 255;
                        $66 = $65 << 8;
                        $67 = ((($64)) + 1 | 0);
                        $68 = HEAP8[$67 >> 0] | 0;
                        $69 = $68 & 255;
                        $70 = $66 | $69;
                        $71 = $70 << $56;
                        $72 = $71 | $54;
                        HEAP32[$2 >> 2] = $72;
                        $73 = (($56) + -16) | 0;
                        HEAP32[$36 >> 2] = $73;
                        $74 = ((($64)) + 2 | 0);
                        HEAP32[$31 >> 2] = $74;
                        $75 = $74;
                        $$pre$phiZ2D = $36; $102 = $73; $105 = $75; $109 = $74; $99 = $72;
                        label = 20;
                        break;
                    }
                } else {
                    $$pre$phiZ2D = $36; $102 = $56; $105 = $60; $109 = $64; $99 = $54;
                    label = 20;
                }
            } else {
                $76 = (($$0$i$ph) + 1) | 0;
                $77 = $3 << $76;
                HEAP32[$2 >> 2] = $77;
                $78 = ((($0)) + 24 | 0);
                $79 = HEAP32[$78 >> 2] | 0;
                $80 = (($79) + ($76)) | 0;
                HEAP32[$78 >> 2] = $80;
                $81 = ($80 | 0) > (0);
                do {
                    if ($81) {
                        $82 = (($29) + 1) | 0;
                        $83 = ($33 | 0) > ($82 | 0);
                        if ($83) {
                            $$0 = 11;
                            return ($$0 | 0);
                        } else {
                            $84 = HEAP8[$34 >> 0] | 0;
                            $85 = $84 & 255;
                            $86 = $85 << 8;
                            $87 = ((($34)) + 1 | 0);
                            $88 = HEAP8[$87 >> 0] | 0;
                            $89 = $88 & 255;
                            $90 = $86 | $89;
                            $91 = $90 << $80;
                            $92 = $91 | $77;
                            HEAP32[$2 >> 2] = $92;
                            $93 = (($80) + -16) | 0;
                            HEAP32[$78 >> 2] = $93;
                            $94 = ((($34)) + 2 | 0);
                            HEAP32[$31 >> 2] = $94;
                            $95 = $94;
                            $123 = $94; $124 = $93; $125 = $95; $126 = $92;
                            break;
                        }
                    } else {
                        $123 = $34; $124 = $80; $125 = $32; $126 = $77;
                    }
                } while (0);
                $96 = ($$0$i$ph | 0) == (0);
                if ($96) {
                    $$0$i7678 = 0; $$074 = 0;
                } else {
                    $$pre$phiZ2D = $78; $102 = $124; $105 = $125; $109 = $123; $99 = $126;
                    label = 20;
                }
            }
        } while (0);
        do {
            if ((label | 0) == 20) {
                $97 = (32 - ($$0$i$ph)) | 0;
                $98 = $99 >>> $97;
                $100 = $99 << $$0$i$ph;
                HEAP32[$2 >> 2] = $100;
                $101 = (($102) + ($$0$i$ph)) | 0;
                HEAP32[$$pre$phiZ2D >> 2] = $101;
                $103 = ($101 | 0) > (0);
                if ($103) {
                    $104 = (($105) - ($28)) | 0;
                    $106 = (($29) + 1) | 0;
                    $107 = ($104 | 0) > ($106 | 0);
                    if ($107) {
                        $$0 = 11;
                        return ($$0 | 0);
                    } else {
                        $108 = HEAP8[$109 >> 0] | 0;
                        $110 = $108 & 255;
                        $111 = $110 << 8;
                        $112 = ((($109)) + 1 | 0);
                        $113 = HEAP8[$112 >> 0] | 0;
                        $114 = $113 & 255;
                        $115 = $111 | $114;
                        $116 = $115 << $101;
                        $117 = $116 | $100;
                        HEAP32[$2 >> 2] = $117;
                        $118 = (($101) + -16) | 0;
                        HEAP32[$$pre$phiZ2D >> 2] = $118;
                        $119 = ((($109)) + 2 | 0);
                        HEAP32[$31 >> 2] = $119;
                        $$0$i7678 = $$0$i$ph; $$074 = $98;
                        break;
                    }
                } else {
                    $$0$i7678 = $$0$i$ph; $$074 = $98;
                }
            }
        } while (0);
        $120 = 1 << $$0$i7678;
        $121 = (($120) + -1) | 0;
        $122 = (($121) + ($$074)) | 0;
        HEAP32[$1 >> 2] = $122;
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec25ParseRefPicListReorderingEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$089110 = 0, $$089110$us = 0, $$089110$us$1 = 0, $$10 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
        var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
        var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
        var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
        var $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
        var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
        var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
        var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
        var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond7 = 0, $or$cond7$us = 0, $or$cond7$us$1 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $2 = sp;
        $3 = ((($1)) + 2732 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($1)) + 64 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        switch ($4 | 0) {
            case 2: case 4: {
                $$10 = 0;
                STACKTOP = sp; return ($$10 | 0);
                break;
            }
            default: {
            }
        }
        $7 = ((($0)) + 20 | 0);
        $8 = ((($0)) + 4 | 0);
        $9 = ((($0)) + 16 | 0);
        $10 = ((($0)) + 24 | 0);
        $11 = ($4 | 0) == (1);
        $12 = ((($6)) + 16 | 0);
        $13 = HEAP32[$7 >> 2] | 0;
        $14 = $13 >>> 31;
        $15 = HEAP32[$8 >> 2] | 0;
        $16 = HEAP32[$0 >> 2] | 0;
        $17 = HEAP32[$9 >> 2] | 0;
        $18 = $13 << 1;
        HEAP32[$7 >> 2] = $18;
        $19 = HEAP32[$10 >> 2] | 0;
        $20 = (($19) + 1) | 0;
        HEAP32[$10 >> 2] = $20;
        $21 = ($19 | 0) > (-1);
        $22 = $17;
        if (!($11)) {
            do {
                if ($21) {
                    $79 = (($17) - ($16)) | 0;
                    $80 = (($15) + 1) | 0;
                    $81 = (($80) - ($16)) | 0;
                    $82 = ($79 | 0) > ($81 | 0);
                    if ($82) {
                        $$10 = 11;
                        STACKTOP = sp; return ($$10 | 0);
                    } else {
                        $83 = HEAP8[$22 >> 0] | 0;
                        $84 = $83 & 255;
                        $85 = $84 << 8;
                        $86 = ((($22)) + 1 | 0);
                        $87 = HEAP8[$86 >> 0] | 0;
                        $88 = $87 & 255;
                        $89 = $85 | $88;
                        $90 = $89 << $20;
                        $91 = $90 | $18;
                        HEAP32[$7 >> 2] = $91;
                        $92 = (($19) + -15) | 0;
                        HEAP32[$10 >> 2] = $92;
                        $93 = ((($22)) + 2 | 0);
                        HEAP32[$9 >> 2] = $93;
                        break;
                    }
                }
            } while (0);
            HEAP32[$2 >> 2] = $14;
            $94 = ($14 | 0) == (0);
            $95 = ((($1)) + 340 | 0);
            $96 = $14 & 255;
            HEAP8[$95 >> 0] = $96;
            if ($94) {
                $$10 = 0;
                STACKTOP = sp; return ($$10 | 0);
            }
            $97 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
            $98 = ($97 | 0) == (0);
            if (!($98)) {
                $$10 = $97;
                STACKTOP = sp; return ($$10 | 0);
            }
            $99 = ((($1)) + 28 | 0);
            $$089110 = 0;
            while (1) {
                $100 = HEAP32[$2 >> 2] | 0;
                $101 = ($$089110 | 0) > (15);
                $102 = ($100 >>> 0) > (3);
                $or$cond7 = $101 | $102;
                if ($or$cond7) {
                    $$10 = 328759;
                    label = 38;
                    break;
                }
                $103 = $100 & 65535;
                $104 = (((((($1)) + 84 | 0) + ($$089110 << 3) | 0)) + 6 | 0);
                HEAP16[$104 >> 1] = $103;
                $105 = ($100 | 0) == (3);
                if ($105) {
                    $$10 = 0;
                    label = 38;
                    break;
                }
                $106 = HEAP32[$99 >> 2] | 0;
                $107 = ($$089110 | 0) < ($106 | 0);
                if (!($107)) {
                    $$10 = 328759;
                    label = 38;
                    break;
                }
                $108 = ($100 >>> 0) < (2);
                if ($108) {
                    $109 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                    $110 = ($109 | 0) == (0);
                    if (!($110)) {
                        $$10 = $109;
                        label = 38;
                        break;
                    }
                    $111 = HEAP32[$2 >> 2] | 0;
                    $112 = HEAP32[$12 >> 2] | 0;
                    $113 = 1 << $112;
                    $114 = ($111 >>> 0) > ($113 >>> 0);
                    if ($114) {
                        $$10 = 328759;
                        label = 38;
                        break;
                    }
                    $115 = (((($1)) + 84 | 0) + ($$089110 << 3) | 0);
                    HEAP32[$115 >> 2] = $111;
                } else {
                    $116 = ($100 | 0) == (2);
                    if ($116) {
                        $117 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                        $118 = ($117 | 0) == (0);
                        if (!($118)) {
                            $$10 = $117;
                            label = 38;
                            break;
                        }
                        $119 = HEAP32[$2 >> 2] | 0;
                        $120 = $119 & 65535;
                        $121 = (((((($1)) + 84 | 0) + ($$089110 << 3) | 0)) + 4 | 0);
                        HEAP16[$121 >> 1] = $120;
                    }
                }
                $122 = (($$089110) + 1) | 0;
                $123 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                $124 = ($123 | 0) == (0);
                if ($124) {
                    $$089110 = $122;
                } else {
                    $$10 = $123;
                    label = 38;
                    break;
                }
            }
            if ((label | 0) == 38) {
                STACKTOP = sp; return ($$10 | 0);
            }
        }
        do {
            if ($21) {
                $23 = (($17) - ($16)) | 0;
                $24 = (($15) + 1) | 0;
                $25 = (($24) - ($16)) | 0;
                $26 = ($23 | 0) > ($25 | 0);
                if ($26) {
                    $$10 = 11;
                    STACKTOP = sp; return ($$10 | 0);
                } else {
                    $27 = HEAP8[$22 >> 0] | 0;
                    $28 = $27 & 255;
                    $29 = $28 << 8;
                    $30 = ((($22)) + 1 | 0);
                    $31 = HEAP8[$30 >> 0] | 0;
                    $32 = $31 & 255;
                    $33 = $29 | $32;
                    $34 = $33 << $20;
                    $35 = $34 | $18;
                    HEAP32[$7 >> 2] = $35;
                    $36 = (($19) + -15) | 0;
                    HEAP32[$10 >> 2] = $36;
                    $37 = ((($22)) + 2 | 0);
                    HEAP32[$9 >> 2] = $37;
                    break;
                }
            }
        } while (0);
        HEAP32[$2 >> 2] = $14;
        $38 = ($14 | 0) == (0);
        $39 = ((($1)) + 340 | 0);
        $40 = $14 & 255;
        HEAP8[$39 >> 0] = $40;
        L46: do {
            if (!($38)) {
                $77 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                $78 = ($77 | 0) == (0);
                if (!($78)) {
                    $$10 = $77;
                    STACKTOP = sp; return ($$10 | 0);
                }
                $48 = ((($1)) + 28 | 0);
                $$089110$us = 0;
                while (1) {
                    $41 = HEAP32[$2 >> 2] | 0;
                    $42 = ($$089110$us | 0) > (15);
                    $43 = ($41 >>> 0) > (3);
                    $or$cond7$us = $42 | $43;
                    if ($or$cond7$us) {
                        $$10 = 328759;
                        label = 38;
                        break;
                    }
                    $44 = $41 & 65535;
                    $45 = (((((($1)) + 84 | 0) + ($$089110$us << 3) | 0)) + 6 | 0);
                    HEAP16[$45 >> 1] = $44;
                    $46 = ($41 | 0) == (3);
                    if ($46) {
                        break L46;
                    }
                    $47 = HEAP32[$48 >> 2] | 0;
                    $49 = ($$089110$us | 0) < ($47 | 0);
                    if (!($49)) {
                        $$10 = 328759;
                        label = 38;
                        break;
                    }
                    $50 = ($41 >>> 0) < (2);
                    if ($50) {
                        $57 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                        $58 = ($57 | 0) == (0);
                        if (!($58)) {
                            $$10 = $57;
                            label = 38;
                            break;
                        }
                        $59 = HEAP32[$2 >> 2] | 0;
                        $60 = HEAP32[$12 >> 2] | 0;
                        $61 = 1 << $60;
                        $62 = ($59 >>> 0) > ($61 >>> 0);
                        if ($62) {
                            $$10 = 328759;
                            label = 38;
                            break;
                        }
                        $63 = (((($1)) + 84 | 0) + ($$089110$us << 3) | 0);
                        HEAP32[$63 >> 2] = $59;
                    } else {
                        $51 = ($41 | 0) == (2);
                        if ($51) {
                            $52 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                            $53 = ($52 | 0) == (0);
                            if (!($53)) {
                                $$10 = $52;
                                label = 38;
                                break;
                            }
                            $54 = HEAP32[$2 >> 2] | 0;
                            $55 = $54 & 65535;
                            $56 = (((((($1)) + 84 | 0) + ($$089110$us << 3) | 0)) + 4 | 0);
                            HEAP16[$56 >> 1] = $55;
                        }
                    }
                    $64 = (($$089110$us) + 1) | 0;
                    $65 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                    $66 = ($65 | 0) == (0);
                    if ($66) {
                        $$089110$us = $64;
                    } else {
                        $$10 = $65;
                        label = 38;
                        break;
                    }
                }
                if ((label | 0) == 38) {
                    STACKTOP = sp; return ($$10 | 0);
                }
            }
        } while (0);
        $67 = HEAP32[$7 >> 2] | 0;
        $68 = $67 >>> 31;
        $69 = HEAP32[$8 >> 2] | 0;
        $70 = HEAP32[$0 >> 2] | 0;
        $71 = HEAP32[$9 >> 2] | 0;
        $72 = $67 << 1;
        HEAP32[$7 >> 2] = $72;
        $73 = HEAP32[$10 >> 2] | 0;
        $74 = (($73) + 1) | 0;
        HEAP32[$10 >> 2] = $74;
        $75 = ($73 | 0) > (-1);
        $76 = $71;
        do {
            if ($75) {
                $125 = (($71) - ($70)) | 0;
                $126 = (($69) + 1) | 0;
                $127 = (($126) - ($70)) | 0;
                $128 = ($125 | 0) > ($127 | 0);
                if ($128) {
                    $$10 = 11;
                    STACKTOP = sp; return ($$10 | 0);
                } else {
                    $129 = HEAP8[$76 >> 0] | 0;
                    $130 = $129 & 255;
                    $131 = $130 << 8;
                    $132 = ((($76)) + 1 | 0);
                    $133 = HEAP8[$132 >> 0] | 0;
                    $134 = $133 & 255;
                    $135 = $131 | $134;
                    $136 = $135 << $74;
                    $137 = $136 | $72;
                    HEAP32[$7 >> 2] = $137;
                    $138 = (($73) + -15) | 0;
                    HEAP32[$10 >> 2] = $138;
                    $139 = ((($76)) + 2 | 0);
                    HEAP32[$9 >> 2] = $139;
                    break;
                }
            }
        } while (0);
        HEAP32[$2 >> 2] = $68;
        $140 = ($68 | 0) == (0);
        $141 = ((($1)) + 341 | 0);
        $142 = $68 & 255;
        HEAP8[$141 >> 0] = $142;
        if ($140) {
            $$10 = 0;
            STACKTOP = sp; return ($$10 | 0);
        }
        $143 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
        $144 = ($143 | 0) == (0);
        if (!($144)) {
            $$10 = $143;
            STACKTOP = sp; return ($$10 | 0);
        }
        $145 = ((($1)) + 32 | 0);
        $$089110$us$1 = 0;
        while (1) {
            $146 = HEAP32[$2 >> 2] | 0;
            $147 = ($$089110$us$1 | 0) > (15);
            $148 = ($146 >>> 0) > (3);
            $or$cond7$us$1 = $147 | $148;
            if ($or$cond7$us$1) {
                $$10 = 328759;
                label = 38;
                break;
            }
            $149 = $146 & 65535;
            $150 = (((((($1)) + 212 | 0) + ($$089110$us$1 << 3) | 0)) + 6 | 0);
            HEAP16[$150 >> 1] = $149;
            $151 = ($146 | 0) == (3);
            if ($151) {
                $$10 = 0;
                label = 38;
                break;
            }
            $152 = HEAP32[$145 >> 2] | 0;
            $153 = ($$089110$us$1 | 0) < ($152 | 0);
            if (!($153)) {
                $$10 = 328759;
                label = 38;
                break;
            }
            $154 = ($146 >>> 0) < (2);
            if ($154) {
                $161 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                $162 = ($161 | 0) == (0);
                if (!($162)) {
                    $$10 = $161;
                    label = 38;
                    break;
                }
                $163 = HEAP32[$2 >> 2] | 0;
                $164 = HEAP32[$12 >> 2] | 0;
                $165 = 1 << $164;
                $166 = ($163 >>> 0) > ($165 >>> 0);
                if ($166) {
                    $$10 = 328759;
                    label = 38;
                    break;
                }
                $167 = (((($1)) + 212 | 0) + ($$089110$us$1 << 3) | 0);
                HEAP32[$167 >> 2] = $163;
            } else {
                $155 = ($146 | 0) == (2);
                if ($155) {
                    $156 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                    $157 = ($156 | 0) == (0);
                    if (!($157)) {
                        $$10 = $156;
                        label = 38;
                        break;
                    }
                    $158 = HEAP32[$2 >> 2] | 0;
                    $159 = $158 & 65535;
                    $160 = (((((($1)) + 212 | 0) + ($$089110$us$1 << 3) | 0)) + 4 | 0);
                    HEAP16[$160 >> 1] = $159;
                }
            }
            $168 = (($$089110$us$1) + 1) | 0;
            $169 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
            $170 = ($169 | 0) == (0);
            if ($170) {
                $$089110$us$1 = $168;
            } else {
                $$10 = $169;
                label = 38;
                break;
            }
        }
        if ((label | 0) == 38) {
            STACKTOP = sp; return ($$10 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec22ParsePredWeightedTableEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0135213 = 0, $$15 = 0, $$lcssa = 0, $$lcssa229 = 0, $$off = 0, $$off$1 = 0, $$off136 = 0, $$off136$1 = 0, $$off137 = 0, $$off138 = 0, $$sink = 0, $$sink17 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
        var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
        var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
        var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0;
        var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
        var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
        var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
        var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge$i = 0, $storemerge$i$1 = 0, $storemerge$i$1$sink = 0, $storemerge$i147 = 0, $storemerge$i150 = 0, $storemerge$i155 = 0, $storemerge$i155$1 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $2 = sp + 4 | 0;
        $3 = sp;
        $4 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $3) | 0);
        $5 = ($4 | 0) == (0);
        if (!($5)) {
            $$15 = $4;
            STACKTOP = sp; return ($$15 | 0);
        }
        $6 = HEAP32[$3 >> 2] | 0;
        $7 = ($6 >>> 0) > (7);
        if ($7) {
            $$15 = 328733;
            STACKTOP = sp; return ($$15 | 0);
        }
        $8 = ((($1)) + 344 | 0);
        HEAP32[$8 >> 2] = $6;
        $9 = ((($1)) + 64 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($10)) + 319 | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = ($12 << 24 >> 24) == (0);
        do {
            if (!($13)) {
                $14 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $3) | 0);
                $15 = ($14 | 0) == (0);
                if (!($15)) {
                    $$15 = $14;
                    STACKTOP = sp; return ($$15 | 0);
                }
                $16 = HEAP32[$3 >> 2] | 0;
                $17 = ($16 >>> 0) > (7);
                if ($17) {
                    $$15 = 328734;
                    STACKTOP = sp; return ($$15 | 0);
                } else {
                    $18 = ((($1)) + 348 | 0);
                    HEAP32[$18 >> 2] = $16;
                    break;
                }
            }
        } while (0);
        $19 = ((($1)) + 28 | 0);
        $20 = HEAP32[$19 >> 2] | 0;
        $21 = ($20 | 0) > (0);
        if (!($21)) {
            $$15 = 0;
            STACKTOP = sp; return ($$15 | 0);
        }
        $22 = ((($0)) + 20 | 0);
        $23 = ((($0)) + 4 | 0);
        $24 = ((($0)) + 16 | 0);
        $25 = ((($0)) + 24 | 0);
        $26 = ((($1)) + 348 | 0);
        $$0135213 = 0;
        while (1) {
            $27 = HEAP32[$22 >> 2] | 0;
            $28 = $27 >>> 31;
            $29 = HEAP32[$23 >> 2] | 0;
            $30 = HEAP32[$0 >> 2] | 0;
            $31 = HEAP32[$24 >> 2] | 0;
            $32 = $27 << 1;
            HEAP32[$22 >> 2] = $32;
            $33 = HEAP32[$25 >> 2] | 0;
            $34 = (($33) + 1) | 0;
            HEAP32[$25 >> 2] = $34;
            $35 = ($33 | 0) > (-1);
            $36 = $31;
            if ($35) {
                $37 = (($31) - ($30)) | 0;
                $38 = (($29) + 1) | 0;
                $39 = (($38) - ($30)) | 0;
                $40 = ($37 | 0) > ($39 | 0);
                if ($40) {
                    $$15 = 11;
                    label = 35;
                    break;
                }
                $41 = HEAP8[$36 >> 0] | 0;
                $42 = $41 & 255;
                $43 = $42 << 8;
                $44 = ((($36)) + 1 | 0);
                $45 = HEAP8[$44 >> 0] | 0;
                $46 = $45 & 255;
                $47 = $43 | $46;
                $48 = $47 << $34;
                $49 = $48 | $32;
                HEAP32[$22 >> 2] = $49;
                $50 = (($33) + -15) | 0;
                HEAP32[$25 >> 2] = $50;
                $51 = ((($36)) + 2 | 0);
                HEAP32[$24 >> 2] = $51;
            }
            HEAP32[$3 >> 2] = $28;
            $52 = ($28 | 0) == (0);
            if ($52) {
                $74 = HEAP32[$8 >> 2] | 0;
                $75 = 1 << $74;
                $76 = (((($1)) + 352 | 0) + ($$0135213 << 2) | 0);
                HEAP32[$76 >> 2] = $75;
                $$sink = 0;
            } else {
                $53 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                $54 = ($53 | 0) == (0);
                if (!($54)) {
                    label = 14;
                    break;
                }
                $55 = HEAP32[$2 >> 2] | 0;
                $56 = $55 & 1;
                $57 = ($56 | 0) == (0);
                $58 = $55 >>> 1;
                $59 = (0 - ($58)) | 0;
                $60 = (($55) + 1) | 0;
                $61 = $60 >>> 1;
                $storemerge$i147 = $57 ? $59 : $61;
                $$off137 = (($storemerge$i147) + 128) | 0;
                $62 = ($$off137 >>> 0) > (255);
                if ($62) {
                    $$15 = 328735;
                    label = 35;
                    break;
                }
                $63 = (((($1)) + 352 | 0) + ($$0135213 << 2) | 0);
                HEAP32[$63 >> 2] = $storemerge$i147;
                $64 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                $65 = ($64 | 0) == (0);
                if (!($65)) {
                    label = 17;
                    break;
                }
                $66 = HEAP32[$2 >> 2] | 0;
                $67 = $66 & 1;
                $68 = ($67 | 0) == (0);
                $69 = $66 >>> 1;
                $70 = (0 - ($69)) | 0;
                $71 = (($66) + 1) | 0;
                $72 = $71 >>> 1;
                $storemerge$i150 = $68 ? $70 : $72;
                $$off138 = (($storemerge$i150) + 128) | 0;
                $73 = ($$off138 >>> 0) > (255);
                if ($73) {
                    $$15 = 328737;
                    label = 35;
                    break;
                } else {
                    $$sink = $storemerge$i150;
                }
            }
            $$sink17 = (((($1)) + 416 | 0) + ($$0135213 << 2) | 0);
            HEAP32[$$sink17 >> 2] = $$sink;
            $77 = HEAP32[$9 >> 2] | 0;
            $78 = ((($77)) + 319 | 0);
            $79 = HEAP8[$78 >> 0] | 0;
            $80 = ($79 << 24 >> 24) == (0);
            if (!($80)) {
                $81 = HEAP32[$22 >> 2] | 0;
                $82 = $81 >>> 31;
                $83 = HEAP32[$23 >> 2] | 0;
                $84 = HEAP32[$0 >> 2] | 0;
                $85 = HEAP32[$24 >> 2] | 0;
                $86 = $81 << 1;
                HEAP32[$22 >> 2] = $86;
                $87 = HEAP32[$25 >> 2] | 0;
                $88 = (($87) + 1) | 0;
                HEAP32[$25 >> 2] = $88;
                $89 = ($87 | 0) > (-1);
                $90 = $85;
                if ($89) {
                    $91 = (($85) - ($84)) | 0;
                    $92 = (($83) + 1) | 0;
                    $93 = (($92) - ($84)) | 0;
                    $94 = ($91 | 0) > ($93 | 0);
                    if ($94) {
                        $$15 = 11;
                        label = 35;
                        break;
                    }
                    $95 = HEAP8[$90 >> 0] | 0;
                    $96 = $95 & 255;
                    $97 = $96 << 8;
                    $98 = ((($90)) + 1 | 0);
                    $99 = HEAP8[$98 >> 0] | 0;
                    $100 = $99 & 255;
                    $101 = $97 | $100;
                    $102 = $101 << $88;
                    $103 = $102 | $86;
                    HEAP32[$22 >> 2] = $103;
                    $104 = (($87) + -15) | 0;
                    HEAP32[$25 >> 2] = $104;
                    $105 = ((($90)) + 2 | 0);
                    HEAP32[$24 >> 2] = $105;
                }
                HEAP32[$3 >> 2] = $82;
                $106 = ($82 | 0) == (0);
                if ($106) {
                    $109 = HEAP32[$26 >> 2] | 0;
                    $110 = 1 << $109;
                    $111 = (((($1)) + 480 | 0) + ($$0135213 << 3) | 0);
                    HEAP32[$111 >> 2] = $110;
                    $112 = (((($1)) + 608 | 0) + ($$0135213 << 3) | 0);
                    HEAP32[$112 >> 2] = 0;
                    $113 = (((((($1)) + 480 | 0) + ($$0135213 << 3) | 0)) + 4 | 0);
                    HEAP32[$113 >> 2] = $110;
                    $storemerge$i$1$sink = 0;
                } else {
                    $107 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                    $108 = ($107 | 0) == (0);
                    if (!($108)) {
                        $$lcssa = $107;
                        label = 27;
                        break;
                    }
                    $114 = HEAP32[$2 >> 2] | 0;
                    $115 = $114 & 1;
                    $116 = ($115 | 0) == (0);
                    $117 = $114 >>> 1;
                    $118 = (0 - ($117)) | 0;
                    $119 = (($114) + 1) | 0;
                    $120 = $119 >>> 1;
                    $storemerge$i155 = $116 ? $118 : $120;
                    $$off = (($storemerge$i155) + 128) | 0;
                    $121 = ($$off >>> 0) > (255);
                    if ($121) {
                        $$15 = 328736;
                        label = 35;
                        break;
                    }
                    $122 = (((($1)) + 480 | 0) + ($$0135213 << 3) | 0);
                    HEAP32[$122 >> 2] = $storemerge$i155;
                    $123 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                    $124 = ($123 | 0) == (0);
                    if (!($124)) {
                        $$lcssa229 = $123;
                        label = 30;
                        break;
                    }
                    $125 = HEAP32[$2 >> 2] | 0;
                    $126 = $125 & 1;
                    $127 = ($126 | 0) == (0);
                    $128 = $125 >>> 1;
                    $129 = (0 - ($128)) | 0;
                    $130 = (($125) + 1) | 0;
                    $131 = $130 >>> 1;
                    $storemerge$i = $127 ? $129 : $131;
                    $$off136 = (($storemerge$i) + 128) | 0;
                    $132 = ($$off136 >>> 0) > (255);
                    if ($132) {
                        $$15 = 328738;
                        label = 35;
                        break;
                    }
                    $133 = (((($1)) + 608 | 0) + ($$0135213 << 3) | 0);
                    HEAP32[$133 >> 2] = $storemerge$i;
                    $134 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                    $135 = ($134 | 0) == (0);
                    if (!($135)) {
                        $$lcssa = $134;
                        label = 27;
                        break;
                    }
                    $140 = HEAP32[$2 >> 2] | 0;
                    $141 = $140 & 1;
                    $142 = ($141 | 0) == (0);
                    $143 = $140 >>> 1;
                    $144 = (0 - ($143)) | 0;
                    $145 = (($140) + 1) | 0;
                    $146 = $145 >>> 1;
                    $storemerge$i155$1 = $142 ? $144 : $146;
                    $$off$1 = (($storemerge$i155$1) + 128) | 0;
                    $147 = ($$off$1 >>> 0) > (255);
                    if ($147) {
                        $$15 = 328736;
                        label = 35;
                        break;
                    }
                    $148 = (((((($1)) + 480 | 0) + ($$0135213 << 3) | 0)) + 4 | 0);
                    HEAP32[$148 >> 2] = $storemerge$i155$1;
                    $149 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($0, $2) | 0);
                    $150 = ($149 | 0) == (0);
                    if (!($150)) {
                        $$lcssa229 = $149;
                        label = 30;
                        break;
                    }
                    $151 = HEAP32[$2 >> 2] | 0;
                    $152 = $151 & 1;
                    $153 = ($152 | 0) == (0);
                    $154 = $151 >>> 1;
                    $155 = (0 - ($154)) | 0;
                    $156 = (($151) + 1) | 0;
                    $157 = $156 >>> 1;
                    $storemerge$i$1 = $153 ? $155 : $157;
                    $$off136$1 = (($storemerge$i$1) + 128) | 0;
                    $158 = ($$off136$1 >>> 0) > (255);
                    if ($158) {
                        $$15 = 328738;
                        label = 35;
                        break;
                    } else {
                        $storemerge$i$1$sink = $storemerge$i$1;
                    }
                }
                $136 = (((((($1)) + 608 | 0) + ($$0135213 << 3) | 0)) + 4 | 0);
                HEAP32[$136 >> 2] = $storemerge$i$1$sink;
            }
            $137 = (($$0135213) + 1) | 0;
            $138 = HEAP32[$19 >> 2] | 0;
            $139 = ($137 | 0) < ($138 | 0);
            if ($139) {
                $$0135213 = $137;
            } else {
                $$15 = 0;
                label = 35;
                break;
            }
        }
        if ((label | 0) == 14) {
            $$15 = $53;
            STACKTOP = sp; return ($$15 | 0);
        }
        else if ((label | 0) == 17) {
            $$15 = $64;
            STACKTOP = sp; return ($$15 | 0);
        }
        else if ((label | 0) == 27) {
            $$15 = $$lcssa;
            STACKTOP = sp; return ($$15 | 0);
        }
        else if ((label | 0) == 30) {
            $$15 = $$lcssa229;
            STACKTOP = sp; return ($$15 | 0);
        }
        else if ((label | 0) == 35) {
            STACKTOP = sp; return ($$15 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec21ParseDecRefPicMarkingEPNS_21TagWelsDecoderContextEPN10WelsCommon15TagBitStringAuxEPNS_15TagSliceHeadersEPNS_6TagSpsEb($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0$i$i = 0, $$0108 = 0, $$13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $5 = sp;
        $6 = ((($1)) + 20 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = $7 >>> 31;
        $9 = ((($1)) + 4 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = HEAP32[$1 >> 2] | 0;
        $12 = ((($1)) + 16 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = $7 << 1;
        HEAP32[$6 >> 2] = $14;
        $15 = ((($1)) + 24 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = (($16) + 1) | 0;
        HEAP32[$15 >> 2] = $17;
        $18 = ($16 | 0) > (-1);
        $19 = $13;
        if ($18) {
            $20 = (($13) - ($11)) | 0;
            $21 = (($10) + 1) | 0;
            $22 = (($21) - ($11)) | 0;
            $23 = ($20 | 0) > ($22 | 0);
            if ($23) {
                $$0$i$i = 11;
            } else {
                $24 = HEAP8[$19 >> 0] | 0;
                $25 = $24 & 255;
                $26 = $25 << 8;
                $27 = ((($19)) + 1 | 0);
                $28 = HEAP8[$27 >> 0] | 0;
                $29 = $28 & 255;
                $30 = $26 | $29;
                $31 = $30 << $17;
                $32 = $31 | $14;
                HEAP32[$6 >> 2] = $32;
                $33 = (($16) + -15) | 0;
                HEAP32[$15 >> 2] = $33;
                $34 = ((($19)) + 2 | 0);
                HEAP32[$12 >> 2] = $34;
                label = 4;
            }
        } else {
            label = 4;
        }
        if ((label | 0) == 4) {
            HEAP32[$5 >> 2] = $8;
            $$0$i$i = 0;
        }
        $35 = ($$0$i$i | 0) == (0);
        if ($4) {
            if (!($35)) {
                $$13 = $$0$i$i;
                STACKTOP = sp; return ($$13 | 0);
            }
            $36 = ((($2)) + 2724 | 0);
            $37 = $8 & 255;
            HEAP8[$36 >> 0] = $37;
            $38 = HEAP32[$6 >> 2] | 0;
            $39 = $38 >>> 31;
            $40 = HEAP32[$9 >> 2] | 0;
            $41 = HEAP32[$1 >> 2] | 0;
            $42 = HEAP32[$12 >> 2] | 0;
            $43 = $38 << 1;
            HEAP32[$6 >> 2] = $43;
            $44 = HEAP32[$15 >> 2] | 0;
            $45 = (($44) + 1) | 0;
            HEAP32[$15 >> 2] = $45;
            $46 = ($44 | 0) > (-1);
            $47 = $42;
            do {
                if ($46) {
                    $48 = (($42) - ($41)) | 0;
                    $49 = (($40) + 1) | 0;
                    $50 = (($49) - ($41)) | 0;
                    $51 = ($48 | 0) > ($50 | 0);
                    if ($51) {
                        $$13 = 11;
                        STACKTOP = sp; return ($$13 | 0);
                    } else {
                        $52 = HEAP8[$47 >> 0] | 0;
                        $53 = $52 & 255;
                        $54 = $53 << 8;
                        $55 = ((($47)) + 1 | 0);
                        $56 = HEAP8[$55 >> 0] | 0;
                        $57 = $56 & 255;
                        $58 = $54 | $57;
                        $59 = $58 << $45;
                        $60 = $59 | $43;
                        HEAP32[$6 >> 2] = $60;
                        $61 = (($44) + -15) | 0;
                        HEAP32[$15 >> 2] = $61;
                        $62 = ((($47)) + 2 | 0);
                        HEAP32[$12 >> 2] = $62;
                        break;
                    }
                }
            } while (0);
            HEAP32[$5 >> 2] = $39;
            $63 = ((($2)) + 2725 | 0);
            $64 = $39 & 255;
            HEAP8[$63 >> 0] = $64;
            $$13 = 0;
            STACKTOP = sp; return ($$13 | 0);
        }
        if (!($35)) {
            $$13 = $$0$i$i;
            STACKTOP = sp; return ($$13 | 0);
        }
        $65 = ($8 | 0) == (0);
        $66 = ((($2)) + 2726 | 0);
        $67 = $8 & 255;
        HEAP8[$66 >> 0] = $67;
        if ($65) {
            $$13 = 0;
            STACKTOP = sp; return ($$13 | 0);
        }
        $68 = ((($2)) + 4 | 0);
        $69 = ((($3)) + 16 | 0);
        $$0108 = 0;
        L26: while (1) {
            $70 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $5) | 0);
            $71 = ($70 | 0) == (0);
            if (!($71)) {
                $$13 = $70;
                label = 27;
                break;
            }
            $72 = HEAP32[$5 >> 2] | 0;
            $73 = (((($2)) + 1140 | 0) + (($$0108 * 24) | 0) | 0);
            HEAP32[$73 >> 2] = $72;
            $74 = ($72 | 0) == (0);
            if ($74) {
                $$13 = 0;
                label = 27;
                break;
            }
            $75 = $72 | 2;
            $76 = ($75 | 0) == (3);
            L30: do {
                if ($76) {
                    $77 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $5) | 0);
                    $78 = ($77 | 0) == (0);
                    if (!($78)) {
                        $$13 = $77;
                        label = 27;
                        break L26;
                    }
                    $79 = HEAP32[$5 >> 2] | 0;
                    $80 = (($79) + 1) | 0;
                    $81 = (((((($2)) + 1140 | 0) + (($$0108 * 24) | 0) | 0)) + 8 | 0);
                    HEAP32[$81 >> 2] = $80;
                    $82 = HEAP32[$68 >> 2] | 0;
                    $83 = (($82) - ($80)) | 0;
                    $84 = HEAP32[$69 >> 2] | 0;
                    $85 = 1 << $84;
                    $86 = (($85) + -1) | 0;
                    $87 = $86 & $83;
                    $88 = (((((($2)) + 1140 | 0) + (($$0108 * 24) | 0) | 0)) + 4 | 0);
                    HEAP32[$88 >> 2] = $87;
                    switch ($72 | 0) {
                        case 3: case 6: {
                            label = 22;
                            break;
                        }
                        case 4: {
                            label = 24;
                            break;
                        }
                        default: {
                        }
                    }
                } else {
                    switch ($72 | 0) {
                        case 3: case 6: {
                            label = 22;
                            break L30;
                            break;
                        }
                        case 4: {
                            label = 24;
                            break L30;
                            break;
                        }
                        case 2: {
                            break;
                        }
                        default: {
                            break L30;
                        }
                    }
                    $89 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $5) | 0);
                    $90 = ($89 | 0) == (0);
                    if (!($90)) {
                        $$13 = $89;
                        label = 27;
                        break L26;
                    }
                    $91 = HEAP32[$5 >> 2] | 0;
                    $92 = (((((($2)) + 1140 | 0) + (($$0108 * 24) | 0) | 0)) + 12 | 0);
                    HEAP32[$92 >> 2] = $91;
                }
            } while (0);
            if ((label | 0) == 22) {
                label = 0;
                $93 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $5) | 0);
                $94 = ($93 | 0) == (0);
                if (!($94)) {
                    $$13 = $93;
                    label = 27;
                    break;
                }
                $95 = HEAP32[$5 >> 2] | 0;
                $96 = (((((($2)) + 1140 | 0) + (($$0108 * 24) | 0) | 0)) + 16 | 0);
                HEAP32[$96 >> 2] = $95;
            }
            else if ((label | 0) == 24) {
                label = 0;
                $97 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj_588($1, $5) | 0);
                $98 = ($97 | 0) == (0);
                if (!($98)) {
                    $$13 = $97;
                    label = 27;
                    break;
                }
                $99 = HEAP32[$5 >> 2] | 0;
                $100 = (($99) + -1) | 0;
                $101 = (((((($2)) + 1140 | 0) + (($$0108 * 24) | 0) | 0)) + 20 | 0);
                HEAP32[$101 >> 2] = $100;
            }
            $102 = (($$0108) + 1) | 0;
            $103 = ($$0108 | 0) < (65);
            if ($103) {
                $$0108 = $102;
            } else {
                $$13 = 0;
                label = 27;
                break;
            }
        }
        if ((label | 0) == 27) {
            STACKTOP = sp; return ($$13 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec17ExpandNalUnitListEPPNS_14TagAccessUnitsEiiPN10WelsCommon12CMemoryAlignE($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$0 = 0, $$046$i33 = 0, $$1 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond32 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ($2 | 0) > ($1 | 0);
        if (!($4)) {
            $$1 = 1;
            return ($$1 | 0);
        }
        $5 = $2 << 2;
        $6 = ($2 | 0) == (0);
        if ($6) {
            $$1 = 1;
            return ($$1 | 0);
        }
        $7 = (($5) + 28) | 0;
        $8 = ($2 * 3920) | 0;
        $9 = (($7) + ($8)) | 0;
        $10 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($3, $9, 22066) | 0);
        $11 = ($10 | 0) == (0 | 0);
        if ($11) {
            $$1 = 1;
            return ($$1 | 0);
        }
        $12 = ((($10)) + 28 | 0);
        HEAP32[$10 >> 2] = $12;
        $13 = (($12) + ($5) | 0);
        HEAP32[$12 >> 2] = $13;
        $exitcond32 = ($2 | 0) == (1);
        if (!($exitcond32)) {
            $$046$i33 = $13; $16 = 1;
            while (1) {
                $14 = ((($$046$i33)) + 3920 | 0);
                $$pre = HEAP32[$10 >> 2] | 0;
                $15 = (($$pre) + ($16 << 2) | 0);
                HEAP32[$15 >> 2] = $14;
                $17 = (($16) + 1) | 0;
                $exitcond = ($17 | 0) == ($2 | 0);
                if ($exitcond) {
                    break;
                } else {
                    $$046$i33 = $14; $16 = $17;
                }
            }
        }
        $18 = $10;
        $19 = ((($10)) + 12 | 0);
        HEAP32[$19 >> 2] = $2;
        $20 = ((($10)) + 4 | 0);
        HEAP32[$20 >> 2] = 0;
        $21 = ((($10)) + 8 | 0);
        HEAP32[$21 >> 2] = 0;
        $22 = ((($10)) + 16 | 0);
        HEAP32[$22 >> 2] = 0;
        $23 = ((($10)) + 20 | 0);
        HEAP32[$23 >> 2] = 0;
        $24 = ((($10)) + 24 | 0);
        HEAP8[$24 >> 0] = 0;
        $$0 = 0;
        while (1) {
            $25 = HEAP32[$10 >> 2] | 0;
            $26 = (($25) + ($$0 << 2) | 0);
            $27 = HEAP32[$26 >> 2] | 0;
            $28 = HEAP32[$0 >> 2] | 0;
            $29 = HEAP32[$28 >> 2] | 0;
            $30 = (($29) + ($$0 << 2) | 0);
            $31 = HEAP32[$30 >> 2] | 0;
            _memcpy(($27 | 0), ($31 | 0), 3920) | 0;
            $32 = (($$0) + 1) | 0;
            $33 = ($32 | 0) < ($1 | 0);
            if ($33) {
                $$0 = $32;
            } else {
                break;
            }
        }
        HEAP32[$19 >> 2] = $2;
        $34 = HEAP32[$0 >> 2] | 0;
        $35 = ((($34)) + 4 | 0);
        $36 = HEAP32[$35 >> 2] | 0;
        HEAP32[$20 >> 2] = $36;
        $37 = HEAP32[$0 >> 2] | 0;
        $38 = ((($37)) + 8 | 0);
        $39 = HEAP32[$38 >> 2] | 0;
        HEAP32[$21 >> 2] = $39;
        $40 = HEAP32[$0 >> 2] | 0;
        $41 = ((($40)) + 20 | 0);
        $42 = HEAP32[$41 >> 2] | 0;
        HEAP32[$23 >> 2] = $42;
        $43 = HEAP32[$0 >> 2] | 0;
        $44 = ((($43)) + 24 | 0);
        $45 = HEAP8[$44 >> 0] | 0;
        HEAP8[$24 >> 0] = $45;
        $46 = HEAP32[$0 >> 2] | 0;
        $47 = ($46 | 0) == (0 | 0);
        if (!($47)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($3, $46, 22066);
            HEAP32[$0 >> 2] = 0;
        }
        HEAP32[$0 >> 2] = $18;
        $$1 = 0;
        return ($$1 | 0);
    }
    function __ZN7WelsDec22ParseRefBasePicMarkingEPN10WelsCommon15TagBitStringAuxEPNS_23TagRefBasePicMarkingSynE($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$056 = 0, $$9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $2 = sp;
        $3 = ((($0)) + 20 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = $4 >>> 31;
        $6 = ((($0)) + 4 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = HEAP32[$0 >> 2] | 0;
        $9 = ((($0)) + 16 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = $4 << 1;
        HEAP32[$3 >> 2] = $11;
        $12 = ((($0)) + 24 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = (($13) + 1) | 0;
        HEAP32[$12 >> 2] = $14;
        $15 = ($13 | 0) > (-1);
        $16 = $10;
        do {
            if ($15) {
                $17 = (($10) - ($8)) | 0;
                $18 = (($7) + 1) | 0;
                $19 = (($18) - ($8)) | 0;
                $20 = ($17 | 0) > ($19 | 0);
                if ($20) {
                    $$9 = 11;
                    STACKTOP = sp; return ($$9 | 0);
                } else {
                    $21 = HEAP8[$16 >> 0] | 0;
                    $22 = $21 & 255;
                    $23 = $22 << 8;
                    $24 = ((($16)) + 1 | 0);
                    $25 = HEAP8[$24 >> 0] | 0;
                    $26 = $25 & 255;
                    $27 = $23 | $26;
                    $28 = $27 << $14;
                    $29 = $28 | $11;
                    HEAP32[$3 >> 2] = $29;
                    $30 = (($13) + -15) | 0;
                    HEAP32[$12 >> 2] = $30;
                    $31 = ((($16)) + 2 | 0);
                    HEAP32[$9 >> 2] = $31;
                    break;
                }
            }
        } while (0);
        HEAP32[$2 >> 2] = $5;
        $32 = ($5 | 0) == (0);
        $33 = $5 & 255;
        $34 = ((($1)) + 1056 | 0);
        HEAP8[$34 >> 0] = $33;
        if ($32) {
            $$9 = 0;
            STACKTOP = sp; return ($$9 | 0);
        } else {
            $$056 = 0;
        }
        L9: while (1) {
            $35 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($0, $2) | 0);
            $36 = ($35 | 0) == (0);
            if (!($36)) {
                $$9 = $35;
                label = 12;
                break;
            }
            $37 = HEAP32[$2 >> 2] | 0;
            $38 = (($1) + ($$056 << 4) | 0);
            HEAP32[$38 >> 2] = $37;
            switch ($37 | 0) {
                case 0: {
                    $$9 = 0;
                    label = 12;
                    break L9;
                    break;
                }
                case 1: {
                    $39 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($0, $2) | 0);
                    $40 = ($39 | 0) == (0);
                    if (!($40)) {
                        $$9 = $39;
                        label = 12;
                        break L9;
                    }
                    $41 = HEAP32[$2 >> 2] | 0;
                    $42 = (($41) + 1) | 0;
                    $43 = (((($1) + ($$056 << 4) | 0)) + 8 | 0);
                    HEAP32[$43 >> 2] = $42;
                    $44 = (((($1) + ($$056 << 4) | 0)) + 4 | 0);
                    HEAP32[$44 >> 2] = 0;
                    break;
                }
                case 2: {
                    $45 = (__ZN7WelsDecL7BsGetUeEPN10WelsCommon15TagBitStringAuxEPj($0, $2) | 0);
                    $46 = ($45 | 0) == (0);
                    if (!($46)) {
                        $$9 = $45;
                        label = 12;
                        break L9;
                    }
                    $47 = HEAP32[$2 >> 2] | 0;
                    $48 = (((($1) + ($$056 << 4) | 0)) + 12 | 0);
                    HEAP32[$48 >> 2] = $47;
                    break;
                }
                default: {
                }
            }
            $49 = (($$056) + 1) | 0;
            $50 = ($$056 | 0) < (65);
            if ($50) {
                $$056 = $49;
            } else {
                $$9 = 0;
                label = 12;
                break;
            }
        }
        if ((label | 0) == 12) {
            STACKTOP = sp; return ($$9 | 0);
        }
        return (0) | 0;
    }
    function __ZN7WelsDec14ExpandBsBufferEPNS_21TagWelsDecoderContextEi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$ = 0, $$05960 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
        var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($0 | 0) == (0 | 0);
        if ($2) {
            $$1 = 3;
            return ($$1 | 0);
        }
        $3 = ($1 * 3) | 0;
        $4 = ((($0)) + 6172 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = $5 << 1;
        $7 = ($3 | 0) > ($6 | 0);
        $$ = $7 ? $3 : $6;
        $8 = ((($0)) + 562528 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($9, $$, 30437) | 0);
        $11 = ($10 | 0) == (0 | 0);
        if ($11) {
            $$1 = 1;
            return ($$1 | 0);
        }
        $12 = ((($0)) + 241888 | 0);
        $13 = HEAP32[$12 >> 2] | 0;
        $14 = ((($0)) + 16 | 0);
        $$05960 = 0; $31 = $13;
        while (1) {
            $30 = HEAP32[$31 >> 2] | 0;
            $32 = (($30) + ($$05960 << 2) | 0);
            $33 = HEAP32[$32 >> 2] | 0;
            $34 = ((($33)) + 3868 | 0);
            $35 = HEAP32[$34 >> 2] | 0;
            $36 = HEAP32[$14 >> 2] | 0;
            $37 = (($35) - ($36)) | 0;
            $38 = (($10) + ($37) | 0);
            HEAP32[$34 >> 2] = $38;
            $39 = ((($33)) + 3872 | 0);
            $40 = HEAP32[$39 >> 2] | 0;
            $41 = HEAP32[$14 >> 2] | 0;
            $42 = (($40) - ($41)) | 0;
            $43 = (($10) + ($42) | 0);
            HEAP32[$39 >> 2] = $43;
            $44 = ((($33)) + 3884 | 0);
            $45 = HEAP32[$44 >> 2] | 0;
            $46 = HEAP32[$14 >> 2] | 0;
            $47 = (($45) - ($46)) | 0;
            $48 = (($10) + ($47) | 0);
            HEAP32[$44 >> 2] = $48;
            $49 = (($$05960) + 1) | 0;
            $50 = HEAP32[$12 >> 2] | 0;
            $51 = ((($50)) + 8 | 0);
            $52 = HEAP32[$51 >> 2] | 0;
            $53 = ($49 >>> 0) > ($52 >>> 0);
            if ($53) {
                break;
            } else {
                $$05960 = $49; $31 = $50;
            }
        }
        $15 = ((($0)) + 16 | 0);
        $16 = HEAP32[$15 >> 2] | 0;
        $17 = HEAP32[$4 >> 2] | 0;
        _memcpy(($10 | 0), ($16 | 0), ($17 | 0)) | 0;
        HEAP32[$4 >> 2] = $$;
        $18 = ((($0)) + 24 | 0);
        $19 = HEAP32[$18 >> 2] | 0;
        $20 = HEAP32[$15 >> 2] | 0;
        $21 = (($19) - ($20)) | 0;
        $22 = (($10) + ($21) | 0);
        HEAP32[$18 >> 2] = $22;
        $23 = ((($0)) + 28 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = (($24) - ($20)) | 0;
        $26 = (($10) + ($25) | 0);
        HEAP32[$23 >> 2] = $26;
        $27 = (($10) + ($$) | 0);
        $28 = ((($0)) + 20 | 0);
        HEAP32[$28 >> 2] = $27;
        $29 = $20;
        __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($9, $29, 30437);
        HEAP32[$15 >> 2] = $10;
        $$1 = 0;
        return ($$1 | 0);
    }
    function __ZN7WelsDec32ForceResetParaSetStatusAndAUListEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 241954 | 0);
        HEAP8[$1 >> 0] = 0;
        $2 = ((($0)) + 241955 | 0);
        HEAP8[$2 >> 0] = 0;
        $3 = ((($0)) + 241956 | 0);
        HEAP8[$3 >> 0] = 0;
        $4 = ((($0)) + 241888 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($5)) + 4 | 0);
        HEAP32[$6 >> 2] = 0;
        $7 = HEAP32[$4 >> 2] | 0;
        $8 = ((($7)) + 8 | 0);
        HEAP32[$8 >> 2] = 0;
        $9 = HEAP32[$4 >> 2] | 0;
        $10 = ((($9)) + 16 | 0);
        HEAP32[$10 >> 2] = 0;
        $11 = HEAP32[$4 >> 2] | 0;
        $12 = ((($11)) + 20 | 0);
        HEAP32[$12 >> 2] = 0;
        $13 = HEAP32[$4 >> 2] | 0;
        $14 = ((($13)) + 24 | 0);
        HEAP8[$14 >> 0] = 0;
        return;
    }
    function _ResetDecStatNums($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        $1 = HEAP32[$0 >> 2] | 0;
        $2 = ((($0)) + 4 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($0)) + 56 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ((($0)) + 8 | 0);
        dest = $6; stop = dest + 76 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        HEAP32[$0 >> 2] = $1;
        HEAP32[$2 >> 2] = $3;
        HEAP32[$4 >> 2] = $5;
        return;
    }
    function __ZN7WelsDec12CWelsDecoder11InitDecoderEb($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $2 = ((($0)) + 8 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($3)) + 12 | 0);
        HEAP32[$vararg_buffer >> 2] = 21262;
        __Z7WelsLogP13TagLogContextiPKcz($4, 4, 30621, $vararg_buffer);
        $5 = ((($0)) + 4 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = ($6 | 0) == (0 | 0);
        if (!($7)) {
            __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($0);
        }
        $8 = (__ZN10WelsCommon11WelsMalloczEjPKc(562536, 21345) | 0);
        HEAP32[$5 >> 2] = $8;
        $9 = ($8 | 0) == (0 | 0);
        if ($9) {
            $$1 = 3;
            STACKTOP = sp; return ($$1 | 0);
        }
        $10 = (__Znwj(12) | 0);
        __ZN10WelsCommon12CMemoryAlignC2Ej($10, 16);
        $11 = HEAP32[$5 >> 2] | 0;
        $12 = ((($11)) + 562528 | 0);
        HEAP32[$12 >> 2] = $10;
        $13 = HEAP32[$5 >> 2] | 0;
        $14 = ((($13)) + 562528 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = ($15 | 0) == (0 | 0);
        if ($16) {
            __ZN7WelsDec12CWelsDecoder13UninitDecoderEv($0);
            $$1 = 1;
            STACKTOP = sp; return ($$1 | 0);
        } else {
            $17 = HEAP32[$2 >> 2] | 0;
            $18 = ((($17)) + 12 | 0);
            $19 = (_WelsInitDecoder($13, $1, $18) | 0);
            $$1 = $19;
            STACKTOP = sp; return ($$1 | 0);
        }
        return (0) | 0;
    }
    function _DecoderConfigParam($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$ = 0, $$2 = 0, $$35 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer1 = sp + 8 | 0;
        $vararg_buffer = sp;
        $2 = ($0 | 0) == (0 | 0);
        $3 = ($1 | 0) == (0 | 0);
        $or$cond = $2 | $3;
        if ($or$cond) {
            $$2 = 1;
            STACKTOP = sp; return ($$2 | 0);
        }
        $4 = ((($0)) + 562528 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($5, 32, 30591) | 0);
        $7 = ((($0)) + 48 | 0);
        HEAP32[$7 >> 2] = $6;
        $8 = ($6 | 0) == (0 | 0);
        if ($8) {
            $$2 = 1;
            STACKTOP = sp; return ($$2 | 0);
        }
        ; HEAP32[$6 >> 2] = HEAP32[$1 >> 2] | 0; HEAP32[$6 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 0; HEAP32[$6 + 8 >> 2] = HEAP32[$1 + 8 >> 2] | 0; HEAP32[$6 + 12 >> 2] = HEAP32[$1 + 12 >> 2] | 0; HEAP32[$6 + 16 >> 2] = HEAP32[$1 + 16 >> 2] | 0; HEAP32[$6 + 20 >> 2] = HEAP32[$1 + 20 >> 2] | 0; HEAP32[$6 + 24 >> 2] = HEAP32[$1 + 24 >> 2] | 0; HEAP32[$6 + 28 >> 2] = HEAP32[$1 + 28 >> 2] | 0;
        $9 = HEAP32[$7 >> 2] | 0;
        $10 = ((($9)) + 4 | 0);
        $11 = HEAP32[$10 >> 2] | 0;
        $12 = ((($0)) + 56 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = ((($0)) + 242344 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = ($14 << 24 >> 24) == (0);
        L7: do {
            if ($15) {
                $16 = HEAP32[$10 >> 2] | 0;
                HEAP32[$12 >> 2] = $16;
                $17 = ($9 | 0) == (0 | 0);
                if (!($17)) {
                    HEAP32[$10 >> 2] = $16;
                }
                switch ($16 | 0) {
                    case 23: {
                        break L7;
                        break;
                    }
                    case 25: {
                        HEAP32[$12 >> 2] = 23;
                        $18 = HEAP32[$7 >> 2] | 0;
                        $19 = ((($18)) + 4 | 0);
                        HEAP32[$19 >> 2] = 23;
                        break L7;
                        break;
                    }
                    default: {
                    }
                }
                __Z7WelsLogP13TagLogContextiPKcz($0, 2, 22492, $vararg_buffer);
                HEAP32[$12 >> 2] = 23;
                $20 = HEAP32[$7 >> 2] | 0;
                $21 = ((($20)) + 4 | 0);
                HEAP32[$21 >> 2] = 23;
                $$2 = 5;
                STACKTOP = sp; return ($$2 | 0);
            }
        } while (0);
        $22 = HEAP32[$7 >> 2] | 0;
        $23 = ((($22)) + 16 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = ((($0)) + 242340 | 0);
        $26 = HEAP8[$13 >> 0] | 0;
        $27 = ($26 << 24 >> 24) == (0);
        $$35 = $27 ? $24 : 0;
        HEAP32[$25 >> 2] = $$35;
        __ZN7WelsDec12InitErrorConEPNS_21TagWelsDecoderContextE($0);
        $28 = HEAP32[$7 >> 2] | 0;
        $29 = ((($28)) + 28 | 0);
        $30 = HEAP32[$29 >> 2] | 0;
        $31 = ($30 | 0) != (0);
        $$ = $31 & 1;
        $32 = ((($0)) + 60 | 0);
        HEAP32[$32 >> 2] = $$;
        HEAP32[$vararg_buffer1 >> 2] = $$;
        __Z7WelsLogP13TagLogContextiPKcz($0, 4, 30606, $vararg_buffer1);
        $$2 = 0;
        STACKTOP = sp; return ($$2 | 0);
    }
    function __ZN10WelsCommon11WelsMalloczEjPKc($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (($0) + 23) | 0;
        $3 = (_malloc($2) | 0);
        $4 = ($3 | 0) == (0 | 0);
        $5 = ((($3)) + 23 | 0);
        $6 = $5;
        $7 = $6 & 15;
        $8 = (0 - ($7)) | 0;
        $9 = (($5) + ($8) | 0);
        if ($4) {
            $$0 = 0;
            return ($$0 | 0);
        }
        $10 = ((($9)) + -8 | 0);
        $11 = ((($9)) + -4 | 0);
        HEAP32[$11 >> 2] = $3;
        HEAP32[$10 >> 2] = $0;
        _memset(($9 | 0), 0, ($0 | 0)) | 0;
        $$0 = $9;
        return ($$0 | 0);
    }
    function _WelsInitDecoder($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $3 = sp;
        $4 = ($0 | 0) == (0 | 0);
        if ($4) {
            $$0 = 3;
            STACKTOP = sp; return ($$0 | 0);
        }
        $5 = $1 & 1;
        $6 = ((($0)) + 562528 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        HEAP32[$3 >> 2] = 1;
        $8 = ((($0)) + 12 | 0);
        _memset(($8 | 0), 0, 562524) | 0;
        ; HEAP32[$0 >> 2] = HEAP32[$2 >> 2] | 0; HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2] | 0; HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2] | 0;
        HEAP32[$6 >> 2] = $7;
        HEAP32[$8 >> 2] = 0;
        $9 = ((($0)) + 56 | 0);
        HEAP32[$9 >> 2] = 23;
        $10 = ((($0)) + 64 | 0);
        HEAP8[$10 >> 0] = 0;
        $11 = ((($0)) + 52 | 0);
        HEAP32[$11 >> 2] = 0;
        $12 = ((($0)) + 317168 | 0);
        HEAP8[$12 >> 0] = 0;
        $13 = ((($0)) + 511308 | 0);
        HEAP8[$13 >> 0] = 0;
        $14 = (_WelsCPUFeatureDetect($3) | 0);
        HEAP32[$11 >> 2] = $14;
        $15 = ((($0)) + 68 | 0);
        $16 = ((($0)) + 84 | 0);
        ; HEAP32[$15 >> 2] = 0 | 0; HEAP32[$15 + 4 >> 2] = 0 | 0; HEAP32[$15 + 8 >> 2] = 0 | 0; HEAP32[$15 + 12 >> 2] = 0 | 0;
        HEAP8[$16 >> 0] = 1;
        $17 = ((($0)) + 104 | 0);
        HEAP32[$17 >> 2] = -1;
        $18 = ((($0)) + 108 | 0);
        HEAP32[$18 >> 2] = -1;
        $19 = ((($0)) + 116 | 0);
        HEAP32[$19 >> 2] = 0;
        $20 = ((($0)) + 5464 | 0);
        HEAP32[$20 >> 2] = 0;
        __ZN7WelsDec15WelsResetRefPicEPNS_21TagWelsDecoderContextE($0);
        $21 = ((($0)) + 5244 | 0);
        HEAP32[$21 >> 2] = 0;
        $22 = ((($0)) + 209440 | 0);
        HEAP32[$22 >> 2] = 0;
        $23 = ((($0)) + 209444 | 0);
        HEAP32[$23 >> 2] = 0;
        $24 = ((($0)) + 241949 | 0);
        HEAP8[$24 >> 0] = 1;
        $25 = ((($0)) + 242340 | 0);
        HEAP32[$25 >> 2] = 7;
        $26 = ((($0)) + 316852 | 0);
        HEAP32[$26 >> 2] = 0;
        $27 = ((($0)) + 512304 | 0);
        HEAP32[$27 >> 2] = -1;
        $28 = ((($0)) + 562525 | 0);
        HEAP8[$28 >> 0] = 0;
        $29 = ((($0)) + 562526 | 0);
        HEAP8[$29 >> 0] = 0;
        $30 = ((($0)) + 241960 | 0);
        HEAP32[$30 >> 2] = 0;
        $31 = ((($0)) + 241964 | 0);
        HEAP32[$31 >> 2] = 0;
        $32 = ((($0)) + 241968 | 0);
        HEAP32[$32 >> 2] = 0;
        $33 = ((($0)) + 242296 | 0);
        HEAP32[$33 >> 2] = 0;
        $34 = ((($0)) + 242292 | 0);
        HEAP32[$34 >> 2] = -1;
        $35 = ((($0)) + 242304 | 0);
        HEAP32[$35 >> 2] = 0;
        $36 = ((($0)) + 242300 | 0);
        HEAP32[$36 >> 2] = -1;
        $37 = ((($0)) + 242312 | 0);
        HEAP32[$37 >> 2] = 0;
        $38 = ((($0)) + 242308 | 0);
        HEAP32[$38 >> 2] = -1;
        $39 = ((($0)) + 242344 | 0);
        HEAP8[$39 >> 0] = $5;
        $40 = (__ZN7WelsDec15WelsOpenDecoderEPNS_21TagWelsDecoderContextE($0) | 0);
        $$0 = $40;
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN7WelsDec15WelsOpenDecoderEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
        var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
        var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
        var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
        var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 316972 | 0);
        $2 = ((($0)) + 52 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        __ZN10WelsCommon10InitMcFuncEP9TagMcFuncj($1, $3);
        $4 = ((($0)) + 317112 | 0);
        $5 = HEAP32[$2 >> 2] | 0;
        _InitExpandPictureFunc($4, $5);
        $6 = ((($0)) + 316856 | 0);
        HEAP32[$6 >> 2] = 5;
        $7 = ((($0)) + 316860 | 0);
        HEAP32[$7 >> 2] = 6;
        $8 = ((($0)) + 316864 | 0);
        HEAP32[$8 >> 2] = 7;
        $9 = ((($0)) + 316868 | 0);
        HEAP32[$9 >> 2] = 8;
        $10 = ((($0)) + 316872 | 0);
        HEAP32[$10 >> 2] = 9;
        $11 = ((($0)) + 316876 | 0);
        HEAP32[$11 >> 2] = 10;
        $12 = ((($0)) + 316880 | 0);
        HEAP32[$12 >> 2] = 11;
        $13 = ((($0)) + 316884 | 0);
        HEAP32[$13 >> 2] = 12;
        $14 = ((($0)) + 316888 | 0);
        HEAP32[$14 >> 2] = 13;
        $15 = ((($0)) + 316892 | 0);
        HEAP32[$15 >> 2] = 14;
        $16 = ((($0)) + 316920 | 0);
        HEAP32[$16 >> 2] = 15;
        $17 = ((($0)) + 316924 | 0);
        HEAP32[$17 >> 2] = 16;
        $18 = ((($0)) + 316928 | 0);
        HEAP32[$18 >> 2] = 17;
        $19 = ((($0)) + 316896 | 0);
        HEAP32[$19 >> 2] = 18;
        $20 = ((($0)) + 316932 | 0);
        HEAP32[$20 >> 2] = 19;
        $21 = ((($0)) + 316900 | 0);
        HEAP32[$21 >> 2] = 20;
        $22 = ((($0)) + 316912 | 0);
        HEAP32[$22 >> 2] = 21;
        $23 = ((($0)) + 316936 | 0);
        HEAP32[$23 >> 2] = 22;
        $24 = ((($0)) + 316904 | 0);
        HEAP32[$24 >> 2] = 23;
        $25 = ((($0)) + 316916 | 0);
        HEAP32[$25 >> 2] = 24;
        $26 = ((($0)) + 316908 | 0);
        HEAP32[$26 >> 2] = 25;
        $27 = ((($0)) + 316996 | 0);
        HEAP32[$27 >> 2] = 9;
        $28 = ((($0)) + 317000 | 0);
        HEAP32[$28 >> 2] = 10;
        $29 = ((($0)) + 317004 | 0);
        HEAP32[$29 >> 2] = 11;
        $30 = ((($0)) + 317032 | 0);
        HEAP32[$30 >> 2] = 12;
        $31 = ((($0)) + 317036 | 0);
        HEAP32[$31 >> 2] = 13;
        $32 = ((($0)) + 317040 | 0);
        HEAP32[$32 >> 2] = 14;
        $33 = ((($0)) + 317008 | 0);
        HEAP32[$33 >> 2] = 15;
        $34 = ((($0)) + 317044 | 0);
        HEAP32[$34 >> 2] = 16;
        $35 = ((($0)) + 317012 | 0);
        HEAP32[$35 >> 2] = 17;
        $36 = ((($0)) + 317024 | 0);
        HEAP32[$36 >> 2] = 18;
        $37 = ((($0)) + 317048 | 0);
        HEAP32[$37 >> 2] = 19;
        $38 = ((($0)) + 317016 | 0);
        HEAP32[$38 >> 2] = 20;
        $39 = ((($0)) + 317028 | 0);
        HEAP32[$39 >> 2] = 21;
        $40 = ((($0)) + 317020 | 0);
        HEAP32[$40 >> 2] = 22;
        $41 = ((($0)) + 316940 | 0);
        HEAP32[$41 >> 2] = 26;
        $42 = ((($0)) + 316944 | 0);
        HEAP32[$42 >> 2] = 27;
        $43 = ((($0)) + 316948 | 0);
        HEAP32[$43 >> 2] = 28;
        $44 = ((($0)) + 316952 | 0);
        HEAP32[$44 >> 2] = 29;
        $45 = ((($0)) + 316956 | 0);
        HEAP32[$45 >> 2] = 30;
        $46 = ((($0)) + 316960 | 0);
        HEAP32[$46 >> 2] = 31;
        $47 = ((($0)) + 316964 | 0);
        HEAP32[$47 >> 2] = 32;
        $48 = ((($0)) + 316968 | 0);
        HEAP32[$48 >> 2] = 3;
        $49 = ((($0)) + 317052 | 0);
        HEAP32[$49 >> 2] = 4;
        $50 = ((($0)) + 317064 | 0);
        $51 = HEAP32[$2 >> 2] | 0;
        __ZN7WelsDec14DeblockingInitEPNS_17TagDeblockingFuncEi($50, $51);
        $52 = ((($0)) + 317124 | 0);
        $53 = HEAP32[$2 >> 2] | 0;
        __ZN7WelsDec17WelsBlockFuncInitEPNS_12TagBlockFuncEi($52, $53);
        $54 = ((($0)) + 5992 | 0);
        HEAP32[$54 >> 2] = 15886;
        $55 = ((($0)) + 5864 | 0);
        HEAP32[$55 >> 2] = 16398;
        $56 = ((($0)) + 5868 | 0);
        HEAP32[$56 >> 2] = 17438;
        $57 = ((($0)) + 5872 | 0);
        HEAP32[$57 >> 2] = 18102;
        $58 = ((($0)) + 5876 | 0);
        HEAP32[$58 >> 2] = 18662;
        $59 = ((($0)) + 5896 | 0);
        HEAP32[$59 >> 2] = 16910;
        $60 = ((($0)) + 5900 | 0);
        HEAP32[$60 >> 2] = 17422;
        $61 = ((($0)) + 5904 | 0);
        HEAP32[$61 >> 2] = 17430;
        $62 = ((($0)) + 5908 | 0);
        HEAP32[$62 >> 2] = 17434;
        $63 = ((($0)) + 5928 | 0);
        HEAP32[$63 >> 2] = 17950;
        $64 = ((($0)) + 5932 | 0);
        HEAP32[$64 >> 2] = 18078;
        $65 = ((($0)) + 5936 | 0);
        HEAP32[$65 >> 2] = 18094;
        $66 = ((($0)) + 5940 | 0);
        HEAP32[$66 >> 2] = 18098;
        $67 = ((($0)) + 5960 | 0);
        HEAP32[$67 >> 2] = 18614;
        $68 = ((($0)) + 5964 | 0);
        HEAP32[$68 >> 2] = 18622;
        $69 = ((($0)) + 5968 | 0);
        HEAP32[$69 >> 2] = 18630;
        $70 = ((($0)) + 5972 | 0);
        HEAP32[$70 >> 2] = 18638;
        $71 = ((($0)) + 5976 | 0);
        HEAP32[$71 >> 2] = 18646;
        $72 = ((($0)) + 5980 | 0);
        HEAP32[$72 >> 2] = 18650;
        $73 = ((($0)) + 5984 | 0);
        HEAP32[$73 >> 2] = 18654;
        $74 = ((($0)) + 5988 | 0);
        HEAP32[$74 >> 2] = 18658;
        $75 = ((($0)) + 5996 | 0);
        HEAP32[$75 >> 2] = 21072;
        $76 = ((($0)) + 6000 | 0);
        HEAP32[$76 >> 2] = 21076;
        $77 = ((($0)) + 6004 | 0);
        HEAP32[$77 >> 2] = 21084;
        $78 = ((($0)) + 6008 | 0);
        HEAP32[$78 >> 2] = 21092;
        $79 = ((($0)) + 6012 | 0);
        HEAP32[$79 >> 2] = 21108;
        $80 = ((($0)) + 6016 | 0);
        HEAP32[$80 >> 2] = 21124;
        $81 = ((($0)) + 6020 | 0);
        HEAP32[$81 >> 2] = 21140;
        $82 = ((($0)) + 6024 | 0);
        HEAP32[$82 >> 2] = 18950;
        $83 = ((($0)) + 6028 | 0);
        HEAP32[$83 >> 2] = 19974;
        $84 = ((($0)) + 6032 | 0);
        HEAP32[$84 >> 2] = 20102;
        $85 = ((($0)) + 6036 | 0);
        HEAP32[$85 >> 2] = 20230;
        $86 = ((($0)) + 6040 | 0);
        HEAP32[$86 >> 2] = 20294;
        $87 = ((($0)) + 6044 | 0);
        HEAP32[$87 >> 2] = 20358;
        $88 = ((($0)) + 6048 | 0);
        HEAP32[$88 >> 2] = 20486;
        $89 = ((($0)) + 6052 | 0);
        HEAP32[$89 >> 2] = 20614;
        $90 = ((($0)) + 6056 | 0);
        HEAP32[$90 >> 2] = 20742;
        $91 = ((($0)) + 6060 | 0);
        HEAP32[$91 >> 2] = 20870;
        $92 = ((($0)) + 6064 | 0);
        HEAP32[$92 >> 2] = 20934;
        $93 = ((($0)) + 6068 | 0);
        HEAP32[$93 >> 2] = 20966;
        $94 = ((($0)) + 6072 | 0);
        HEAP32[$94 >> 2] = 20998;
        $95 = ((($0)) + 6076 | 0);
        HEAP32[$95 >> 2] = 21014;
        $96 = ((($0)) + 6080 | 0);
        HEAP32[$96 >> 2] = 21022;
        $97 = ((($0)) + 6084 | 0);
        HEAP32[$97 >> 2] = 21041;
        $98 = ((($0)) + 6088 | 0);
        HEAP32[$98 >> 2] = 21057;
        $99 = ((($0)) + 6092 | 0);
        HEAP32[$99 >> 2] = 21065;
        $100 = (__ZN7WelsDec14WelsInitMemoryEPNS_21TagWelsDecoderContextE($0) | 0);
        $101 = ($100 | 0) == (0);
        if (!($101)) {
            return ($100 | 0);
        }
        $102 = ((($0)) + 242324 | 0);
        HEAP8[$102 >> 0] = 1;
        $103 = ((($0)) + 242334 | 0);
        HEAP8[$103 >> 0] = 1;
        $104 = ((($0)) + 317169 | 0);
        HEAP8[$104 >> 0] = 1;
        $105 = ((($0)) + 317172 | 0);
        HEAP32[$105 >> 2] = 0;
        $106 = ((($0)) + 242346 | 0);
        HEAP8[$106 >> 0] = 1;
        return ($100 | 0);
    }
    function __ZN7WelsDec21WelsI16x16LumaPredV_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
        var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
        var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
        var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
        var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
        var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 * 15) | 0;
        $3 = (0 - ($1)) | 0;
        $4 = (($0) + ($3) | 0);
        $5 = $4;
        $6 = $5;
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (($5) + 4) | 0;
        $9 = $8;
        $10 = HEAP32[$9 >> 2] | 0;
        $11 = ((($4)) + 8 | 0);
        $12 = $11;
        $13 = $12;
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = (($12) + 4) | 0;
        $16 = $15;
        $17 = HEAP32[$16 >> 2] | 0;
        $18 = (($0) + ($2) | 0);
        $19 = $18;
        $20 = $19;
        HEAP32[$20 >> 2] = $7;
        $21 = (($19) + 4) | 0;
        $22 = $21;
        HEAP32[$22 >> 2] = $10;
        $23 = ((($18)) + 8 | 0);
        $24 = $23;
        $25 = $24;
        HEAP32[$25 >> 2] = $14;
        $26 = (($24) + 4) | 0;
        $27 = $26;
        HEAP32[$27 >> 2] = $17;
        $28 = ($1 * 14) | 0;
        $29 = (($0) + ($28) | 0);
        $30 = $29;
        $31 = $30;
        HEAP32[$31 >> 2] = $7;
        $32 = (($30) + 4) | 0;
        $33 = $32;
        HEAP32[$33 >> 2] = $10;
        $34 = ((($29)) + 8 | 0);
        $35 = $34;
        $36 = $35;
        HEAP32[$36 >> 2] = $14;
        $37 = (($35) + 4) | 0;
        $38 = $37;
        HEAP32[$38 >> 2] = $17;
        $39 = ($1 * 13) | 0;
        $40 = (($0) + ($39) | 0);
        $41 = $40;
        $42 = $41;
        HEAP32[$42 >> 2] = $7;
        $43 = (($41) + 4) | 0;
        $44 = $43;
        HEAP32[$44 >> 2] = $10;
        $45 = ((($40)) + 8 | 0);
        $46 = $45;
        $47 = $46;
        HEAP32[$47 >> 2] = $14;
        $48 = (($46) + 4) | 0;
        $49 = $48;
        HEAP32[$49 >> 2] = $17;
        $50 = ($1 * 12) | 0;
        $51 = (($0) + ($50) | 0);
        $52 = $51;
        $53 = $52;
        HEAP32[$53 >> 2] = $7;
        $54 = (($52) + 4) | 0;
        $55 = $54;
        HEAP32[$55 >> 2] = $10;
        $56 = ((($51)) + 8 | 0);
        $57 = $56;
        $58 = $57;
        HEAP32[$58 >> 2] = $14;
        $59 = (($57) + 4) | 0;
        $60 = $59;
        HEAP32[$60 >> 2] = $17;
        $61 = ($1 * 11) | 0;
        $62 = (($0) + ($61) | 0);
        $63 = $62;
        $64 = $63;
        HEAP32[$64 >> 2] = $7;
        $65 = (($63) + 4) | 0;
        $66 = $65;
        HEAP32[$66 >> 2] = $10;
        $67 = ((($62)) + 8 | 0);
        $68 = $67;
        $69 = $68;
        HEAP32[$69 >> 2] = $14;
        $70 = (($68) + 4) | 0;
        $71 = $70;
        HEAP32[$71 >> 2] = $17;
        $72 = ($1 * 10) | 0;
        $73 = (($0) + ($72) | 0);
        $74 = $73;
        $75 = $74;
        HEAP32[$75 >> 2] = $7;
        $76 = (($74) + 4) | 0;
        $77 = $76;
        HEAP32[$77 >> 2] = $10;
        $78 = ((($73)) + 8 | 0);
        $79 = $78;
        $80 = $79;
        HEAP32[$80 >> 2] = $14;
        $81 = (($79) + 4) | 0;
        $82 = $81;
        HEAP32[$82 >> 2] = $17;
        $83 = ($1 * 9) | 0;
        $84 = (($0) + ($83) | 0);
        $85 = $84;
        $86 = $85;
        HEAP32[$86 >> 2] = $7;
        $87 = (($85) + 4) | 0;
        $88 = $87;
        HEAP32[$88 >> 2] = $10;
        $89 = ((($84)) + 8 | 0);
        $90 = $89;
        $91 = $90;
        HEAP32[$91 >> 2] = $14;
        $92 = (($90) + 4) | 0;
        $93 = $92;
        HEAP32[$93 >> 2] = $17;
        $94 = $1 << 3;
        $95 = (($0) + ($94) | 0);
        $96 = $95;
        $97 = $96;
        HEAP32[$97 >> 2] = $7;
        $98 = (($96) + 4) | 0;
        $99 = $98;
        HEAP32[$99 >> 2] = $10;
        $100 = ((($95)) + 8 | 0);
        $101 = $100;
        $102 = $101;
        HEAP32[$102 >> 2] = $14;
        $103 = (($101) + 4) | 0;
        $104 = $103;
        HEAP32[$104 >> 2] = $17;
        $105 = ($1 * 7) | 0;
        $106 = (($0) + ($105) | 0);
        $107 = $106;
        $108 = $107;
        HEAP32[$108 >> 2] = $7;
        $109 = (($107) + 4) | 0;
        $110 = $109;
        HEAP32[$110 >> 2] = $10;
        $111 = ((($106)) + 8 | 0);
        $112 = $111;
        $113 = $112;
        HEAP32[$113 >> 2] = $14;
        $114 = (($112) + 4) | 0;
        $115 = $114;
        HEAP32[$115 >> 2] = $17;
        $116 = ($1 * 6) | 0;
        $117 = (($0) + ($116) | 0);
        $118 = $117;
        $119 = $118;
        HEAP32[$119 >> 2] = $7;
        $120 = (($118) + 4) | 0;
        $121 = $120;
        HEAP32[$121 >> 2] = $10;
        $122 = ((($117)) + 8 | 0);
        $123 = $122;
        $124 = $123;
        HEAP32[$124 >> 2] = $14;
        $125 = (($123) + 4) | 0;
        $126 = $125;
        HEAP32[$126 >> 2] = $17;
        $127 = ($1 * 5) | 0;
        $128 = (($0) + ($127) | 0);
        $129 = $128;
        $130 = $129;
        HEAP32[$130 >> 2] = $7;
        $131 = (($129) + 4) | 0;
        $132 = $131;
        HEAP32[$132 >> 2] = $10;
        $133 = ((($128)) + 8 | 0);
        $134 = $133;
        $135 = $134;
        HEAP32[$135 >> 2] = $14;
        $136 = (($134) + 4) | 0;
        $137 = $136;
        HEAP32[$137 >> 2] = $17;
        $138 = $1 << 2;
        $139 = (($0) + ($138) | 0);
        $140 = $139;
        $141 = $140;
        HEAP32[$141 >> 2] = $7;
        $142 = (($140) + 4) | 0;
        $143 = $142;
        HEAP32[$143 >> 2] = $10;
        $144 = ((($139)) + 8 | 0);
        $145 = $144;
        $146 = $145;
        HEAP32[$146 >> 2] = $14;
        $147 = (($145) + 4) | 0;
        $148 = $147;
        HEAP32[$148 >> 2] = $17;
        $149 = ($1 * 3) | 0;
        $150 = (($0) + ($149) | 0);
        $151 = $150;
        $152 = $151;
        HEAP32[$152 >> 2] = $7;
        $153 = (($151) + 4) | 0;
        $154 = $153;
        HEAP32[$154 >> 2] = $10;
        $155 = ((($150)) + 8 | 0);
        $156 = $155;
        $157 = $156;
        HEAP32[$157 >> 2] = $14;
        $158 = (($156) + 4) | 0;
        $159 = $158;
        HEAP32[$159 >> 2] = $17;
        $160 = $1 << 1;
        $161 = (($0) + ($160) | 0);
        $162 = $161;
        $163 = $162;
        HEAP32[$163 >> 2] = $7;
        $164 = (($162) + 4) | 0;
        $165 = $164;
        HEAP32[$165 >> 2] = $10;
        $166 = ((($161)) + 8 | 0);
        $167 = $166;
        $168 = $167;
        HEAP32[$168 >> 2] = $14;
        $169 = (($167) + 4) | 0;
        $170 = $169;
        HEAP32[$170 >> 2] = $17;
        $171 = (($0) + ($1) | 0);
        $172 = $171;
        $173 = $172;
        HEAP32[$173 >> 2] = $7;
        $174 = (($172) + 4) | 0;
        $175 = $174;
        HEAP32[$175 >> 2] = $10;
        $176 = ((($171)) + 8 | 0);
        $177 = $176;
        $178 = $177;
        HEAP32[$178 >> 2] = $14;
        $179 = (($177) + 4) | 0;
        $180 = $179;
        HEAP32[$180 >> 2] = $17;
        $181 = $0;
        $182 = $181;
        HEAP32[$182 >> 2] = $7;
        $183 = (($181) + 4) | 0;
        $184 = $183;
        HEAP32[$184 >> 2] = $10;
        $185 = ((($0)) + 8 | 0);
        $186 = $185;
        $187 = $186;
        HEAP32[$187 >> 2] = $14;
        $188 = (($186) + 4) | 0;
        $189 = $188;
        HEAP32[$189 >> 2] = $17;
        return;
    }
    function __ZN7WelsDec21WelsI16x16LumaPredH_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
        var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
        var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
        var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
        var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
        var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
        var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
        var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
        var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
        var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 * 15) | 0;
        $3 = (($2) + -1) | 0;
        $4 = (($0) + ($3) | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = (___muldi3(($6 | 0), 0, 16843009, 16843009) | 0);
        $8 = tempRet0;
        $9 = (($0) + ($2) | 0);
        $10 = $9;
        $11 = $10;
        HEAP32[$11 >> 2] = $7;
        $12 = (($10) + 4) | 0;
        $13 = $12;
        HEAP32[$13 >> 2] = $8;
        $14 = ((($9)) + 8 | 0);
        $15 = $14;
        $16 = $15;
        HEAP32[$16 >> 2] = $7;
        $17 = (($15) + 4) | 0;
        $18 = $17;
        HEAP32[$18 >> 2] = $8;
        $19 = ($1 * 14) | 0;
        $20 = (($19) + -1) | 0;
        $21 = (($0) + ($20) | 0);
        $22 = HEAP8[$21 >> 0] | 0;
        $23 = $22 & 255;
        $24 = (___muldi3(($23 | 0), 0, 16843009, 16843009) | 0);
        $25 = tempRet0;
        $26 = (($0) + ($19) | 0);
        $27 = $26;
        $28 = $27;
        HEAP32[$28 >> 2] = $24;
        $29 = (($27) + 4) | 0;
        $30 = $29;
        HEAP32[$30 >> 2] = $25;
        $31 = ((($26)) + 8 | 0);
        $32 = $31;
        $33 = $32;
        HEAP32[$33 >> 2] = $24;
        $34 = (($32) + 4) | 0;
        $35 = $34;
        HEAP32[$35 >> 2] = $25;
        $36 = ($1 * 13) | 0;
        $37 = (($36) + -1) | 0;
        $38 = (($0) + ($37) | 0);
        $39 = HEAP8[$38 >> 0] | 0;
        $40 = $39 & 255;
        $41 = (___muldi3(($40 | 0), 0, 16843009, 16843009) | 0);
        $42 = tempRet0;
        $43 = (($0) + ($36) | 0);
        $44 = $43;
        $45 = $44;
        HEAP32[$45 >> 2] = $41;
        $46 = (($44) + 4) | 0;
        $47 = $46;
        HEAP32[$47 >> 2] = $42;
        $48 = ((($43)) + 8 | 0);
        $49 = $48;
        $50 = $49;
        HEAP32[$50 >> 2] = $41;
        $51 = (($49) + 4) | 0;
        $52 = $51;
        HEAP32[$52 >> 2] = $42;
        $53 = ($1 * 12) | 0;
        $54 = (($53) + -1) | 0;
        $55 = (($0) + ($54) | 0);
        $56 = HEAP8[$55 >> 0] | 0;
        $57 = $56 & 255;
        $58 = (___muldi3(($57 | 0), 0, 16843009, 16843009) | 0);
        $59 = tempRet0;
        $60 = (($0) + ($53) | 0);
        $61 = $60;
        $62 = $61;
        HEAP32[$62 >> 2] = $58;
        $63 = (($61) + 4) | 0;
        $64 = $63;
        HEAP32[$64 >> 2] = $59;
        $65 = ((($60)) + 8 | 0);
        $66 = $65;
        $67 = $66;
        HEAP32[$67 >> 2] = $58;
        $68 = (($66) + 4) | 0;
        $69 = $68;
        HEAP32[$69 >> 2] = $59;
        $70 = ($1 * 11) | 0;
        $71 = (($70) + -1) | 0;
        $72 = (($0) + ($71) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = (___muldi3(($74 | 0), 0, 16843009, 16843009) | 0);
        $76 = tempRet0;
        $77 = (($0) + ($70) | 0);
        $78 = $77;
        $79 = $78;
        HEAP32[$79 >> 2] = $75;
        $80 = (($78) + 4) | 0;
        $81 = $80;
        HEAP32[$81 >> 2] = $76;
        $82 = ((($77)) + 8 | 0);
        $83 = $82;
        $84 = $83;
        HEAP32[$84 >> 2] = $75;
        $85 = (($83) + 4) | 0;
        $86 = $85;
        HEAP32[$86 >> 2] = $76;
        $87 = ($1 * 10) | 0;
        $88 = (($87) + -1) | 0;
        $89 = (($0) + ($88) | 0);
        $90 = HEAP8[$89 >> 0] | 0;
        $91 = $90 & 255;
        $92 = (___muldi3(($91 | 0), 0, 16843009, 16843009) | 0);
        $93 = tempRet0;
        $94 = (($0) + ($87) | 0);
        $95 = $94;
        $96 = $95;
        HEAP32[$96 >> 2] = $92;
        $97 = (($95) + 4) | 0;
        $98 = $97;
        HEAP32[$98 >> 2] = $93;
        $99 = ((($94)) + 8 | 0);
        $100 = $99;
        $101 = $100;
        HEAP32[$101 >> 2] = $92;
        $102 = (($100) + 4) | 0;
        $103 = $102;
        HEAP32[$103 >> 2] = $93;
        $104 = ($1 * 9) | 0;
        $105 = (($104) + -1) | 0;
        $106 = (($0) + ($105) | 0);
        $107 = HEAP8[$106 >> 0] | 0;
        $108 = $107 & 255;
        $109 = (___muldi3(($108 | 0), 0, 16843009, 16843009) | 0);
        $110 = tempRet0;
        $111 = (($0) + ($104) | 0);
        $112 = $111;
        $113 = $112;
        HEAP32[$113 >> 2] = $109;
        $114 = (($112) + 4) | 0;
        $115 = $114;
        HEAP32[$115 >> 2] = $110;
        $116 = ((($111)) + 8 | 0);
        $117 = $116;
        $118 = $117;
        HEAP32[$118 >> 2] = $109;
        $119 = (($117) + 4) | 0;
        $120 = $119;
        HEAP32[$120 >> 2] = $110;
        $121 = $1 << 3;
        $122 = (($121) + -1) | 0;
        $123 = (($0) + ($122) | 0);
        $124 = HEAP8[$123 >> 0] | 0;
        $125 = $124 & 255;
        $126 = (___muldi3(($125 | 0), 0, 16843009, 16843009) | 0);
        $127 = tempRet0;
        $128 = (($0) + ($121) | 0);
        $129 = $128;
        $130 = $129;
        HEAP32[$130 >> 2] = $126;
        $131 = (($129) + 4) | 0;
        $132 = $131;
        HEAP32[$132 >> 2] = $127;
        $133 = ((($128)) + 8 | 0);
        $134 = $133;
        $135 = $134;
        HEAP32[$135 >> 2] = $126;
        $136 = (($134) + 4) | 0;
        $137 = $136;
        HEAP32[$137 >> 2] = $127;
        $138 = ($1 * 7) | 0;
        $139 = (($138) + -1) | 0;
        $140 = (($0) + ($139) | 0);
        $141 = HEAP8[$140 >> 0] | 0;
        $142 = $141 & 255;
        $143 = (___muldi3(($142 | 0), 0, 16843009, 16843009) | 0);
        $144 = tempRet0;
        $145 = (($0) + ($138) | 0);
        $146 = $145;
        $147 = $146;
        HEAP32[$147 >> 2] = $143;
        $148 = (($146) + 4) | 0;
        $149 = $148;
        HEAP32[$149 >> 2] = $144;
        $150 = ((($145)) + 8 | 0);
        $151 = $150;
        $152 = $151;
        HEAP32[$152 >> 2] = $143;
        $153 = (($151) + 4) | 0;
        $154 = $153;
        HEAP32[$154 >> 2] = $144;
        $155 = ($1 * 6) | 0;
        $156 = (($155) + -1) | 0;
        $157 = (($0) + ($156) | 0);
        $158 = HEAP8[$157 >> 0] | 0;
        $159 = $158 & 255;
        $160 = (___muldi3(($159 | 0), 0, 16843009, 16843009) | 0);
        $161 = tempRet0;
        $162 = (($0) + ($155) | 0);
        $163 = $162;
        $164 = $163;
        HEAP32[$164 >> 2] = $160;
        $165 = (($163) + 4) | 0;
        $166 = $165;
        HEAP32[$166 >> 2] = $161;
        $167 = ((($162)) + 8 | 0);
        $168 = $167;
        $169 = $168;
        HEAP32[$169 >> 2] = $160;
        $170 = (($168) + 4) | 0;
        $171 = $170;
        HEAP32[$171 >> 2] = $161;
        $172 = ($1 * 5) | 0;
        $173 = (($172) + -1) | 0;
        $174 = (($0) + ($173) | 0);
        $175 = HEAP8[$174 >> 0] | 0;
        $176 = $175 & 255;
        $177 = (___muldi3(($176 | 0), 0, 16843009, 16843009) | 0);
        $178 = tempRet0;
        $179 = (($0) + ($172) | 0);
        $180 = $179;
        $181 = $180;
        HEAP32[$181 >> 2] = $177;
        $182 = (($180) + 4) | 0;
        $183 = $182;
        HEAP32[$183 >> 2] = $178;
        $184 = ((($179)) + 8 | 0);
        $185 = $184;
        $186 = $185;
        HEAP32[$186 >> 2] = $177;
        $187 = (($185) + 4) | 0;
        $188 = $187;
        HEAP32[$188 >> 2] = $178;
        $189 = $1 << 2;
        $190 = (($189) + -1) | 0;
        $191 = (($0) + ($190) | 0);
        $192 = HEAP8[$191 >> 0] | 0;
        $193 = $192 & 255;
        $194 = (___muldi3(($193 | 0), 0, 16843009, 16843009) | 0);
        $195 = tempRet0;
        $196 = (($0) + ($189) | 0);
        $197 = $196;
        $198 = $197;
        HEAP32[$198 >> 2] = $194;
        $199 = (($197) + 4) | 0;
        $200 = $199;
        HEAP32[$200 >> 2] = $195;
        $201 = ((($196)) + 8 | 0);
        $202 = $201;
        $203 = $202;
        HEAP32[$203 >> 2] = $194;
        $204 = (($202) + 4) | 0;
        $205 = $204;
        HEAP32[$205 >> 2] = $195;
        $206 = ($1 * 3) | 0;
        $207 = (($206) + -1) | 0;
        $208 = (($0) + ($207) | 0);
        $209 = HEAP8[$208 >> 0] | 0;
        $210 = $209 & 255;
        $211 = (___muldi3(($210 | 0), 0, 16843009, 16843009) | 0);
        $212 = tempRet0;
        $213 = (($0) + ($206) | 0);
        $214 = $213;
        $215 = $214;
        HEAP32[$215 >> 2] = $211;
        $216 = (($214) + 4) | 0;
        $217 = $216;
        HEAP32[$217 >> 2] = $212;
        $218 = ((($213)) + 8 | 0);
        $219 = $218;
        $220 = $219;
        HEAP32[$220 >> 2] = $211;
        $221 = (($219) + 4) | 0;
        $222 = $221;
        HEAP32[$222 >> 2] = $212;
        $223 = $1 << 1;
        $224 = (($223) + -1) | 0;
        $225 = (($0) + ($224) | 0);
        $226 = HEAP8[$225 >> 0] | 0;
        $227 = $226 & 255;
        $228 = (___muldi3(($227 | 0), 0, 16843009, 16843009) | 0);
        $229 = tempRet0;
        $230 = (($0) + ($223) | 0);
        $231 = $230;
        $232 = $231;
        HEAP32[$232 >> 2] = $228;
        $233 = (($231) + 4) | 0;
        $234 = $233;
        HEAP32[$234 >> 2] = $229;
        $235 = ((($230)) + 8 | 0);
        $236 = $235;
        $237 = $236;
        HEAP32[$237 >> 2] = $228;
        $238 = (($236) + 4) | 0;
        $239 = $238;
        HEAP32[$239 >> 2] = $229;
        $240 = (($1) + -1) | 0;
        $241 = (($0) + ($240) | 0);
        $242 = HEAP8[$241 >> 0] | 0;
        $243 = $242 & 255;
        $244 = (___muldi3(($243 | 0), 0, 16843009, 16843009) | 0);
        $245 = tempRet0;
        $246 = (($0) + ($1) | 0);
        $247 = $246;
        $248 = $247;
        HEAP32[$248 >> 2] = $244;
        $249 = (($247) + 4) | 0;
        $250 = $249;
        HEAP32[$250 >> 2] = $245;
        $251 = ((($246)) + 8 | 0);
        $252 = $251;
        $253 = $252;
        HEAP32[$253 >> 2] = $244;
        $254 = (($252) + 4) | 0;
        $255 = $254;
        HEAP32[$255 >> 2] = $245;
        $256 = ((($0)) + -1 | 0);
        $257 = HEAP8[$256 >> 0] | 0;
        $258 = $257 & 255;
        $259 = (___muldi3(($258 | 0), 0, 16843009, 16843009) | 0);
        $260 = tempRet0;
        $261 = $0;
        $262 = $261;
        HEAP32[$262 >> 2] = $259;
        $263 = (($261) + 4) | 0;
        $264 = $263;
        HEAP32[$264 >> 2] = $260;
        $265 = ((($0)) + 8 | 0);
        $266 = $265;
        $267 = $266;
        HEAP32[$267 >> 2] = $259;
        $268 = (($266) + 4) | 0;
        $269 = $268;
        HEAP32[$269 >> 2] = $260;
        return;
    }
    function __ZN7WelsDec22WelsI16x16LumaPredDc_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
        var $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 * 15) | 0;
        $3 = (($2) + -1) | 0;
        $4 = (($0) + ($3) | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = (15 - ($1)) | 0;
        $8 = (($0) + ($7) | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = $9 & 255;
        $11 = (($6) + ($10)) | 0;
        $12 = ($1 * 14) | 0;
        $13 = (($12) + -1) | 0;
        $14 = (($0) + ($13) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = $15 & 255;
        $17 = (14 - ($1)) | 0;
        $18 = (($0) + ($17) | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = $19 & 255;
        $21 = (($11) + ($16)) | 0;
        $22 = (($21) + ($20)) | 0;
        $23 = ($1 * 13) | 0;
        $24 = (($23) + -1) | 0;
        $25 = (($0) + ($24) | 0);
        $26 = HEAP8[$25 >> 0] | 0;
        $27 = $26 & 255;
        $28 = (13 - ($1)) | 0;
        $29 = (($0) + ($28) | 0);
        $30 = HEAP8[$29 >> 0] | 0;
        $31 = $30 & 255;
        $32 = (($22) + ($27)) | 0;
        $33 = (($32) + ($31)) | 0;
        $34 = ($1 * 12) | 0;
        $35 = (($34) + -1) | 0;
        $36 = (($0) + ($35) | 0);
        $37 = HEAP8[$36 >> 0] | 0;
        $38 = $37 & 255;
        $39 = (12 - ($1)) | 0;
        $40 = (($0) + ($39) | 0);
        $41 = HEAP8[$40 >> 0] | 0;
        $42 = $41 & 255;
        $43 = (($33) + ($38)) | 0;
        $44 = (($43) + ($42)) | 0;
        $45 = ($1 * 11) | 0;
        $46 = (($45) + -1) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = HEAP8[$47 >> 0] | 0;
        $49 = $48 & 255;
        $50 = (11 - ($1)) | 0;
        $51 = (($0) + ($50) | 0);
        $52 = HEAP8[$51 >> 0] | 0;
        $53 = $52 & 255;
        $54 = (($44) + ($49)) | 0;
        $55 = (($54) + ($53)) | 0;
        $56 = ($1 * 10) | 0;
        $57 = (($56) + -1) | 0;
        $58 = (($0) + ($57) | 0);
        $59 = HEAP8[$58 >> 0] | 0;
        $60 = $59 & 255;
        $61 = (10 - ($1)) | 0;
        $62 = (($0) + ($61) | 0);
        $63 = HEAP8[$62 >> 0] | 0;
        $64 = $63 & 255;
        $65 = (($55) + ($60)) | 0;
        $66 = (($65) + ($64)) | 0;
        $67 = ($1 * 9) | 0;
        $68 = (($67) + -1) | 0;
        $69 = (($0) + ($68) | 0);
        $70 = HEAP8[$69 >> 0] | 0;
        $71 = $70 & 255;
        $72 = (9 - ($1)) | 0;
        $73 = (($0) + ($72) | 0);
        $74 = HEAP8[$73 >> 0] | 0;
        $75 = $74 & 255;
        $76 = (($66) + ($71)) | 0;
        $77 = (($76) + ($75)) | 0;
        $78 = $1 << 3;
        $79 = (($78) + -1) | 0;
        $80 = (($0) + ($79) | 0);
        $81 = HEAP8[$80 >> 0] | 0;
        $82 = $81 & 255;
        $83 = (8 - ($1)) | 0;
        $84 = (($0) + ($83) | 0);
        $85 = HEAP8[$84 >> 0] | 0;
        $86 = $85 & 255;
        $87 = (($77) + ($82)) | 0;
        $88 = (($87) + ($86)) | 0;
        $89 = ($1 * 7) | 0;
        $90 = (($89) + -1) | 0;
        $91 = (($0) + ($90) | 0);
        $92 = HEAP8[$91 >> 0] | 0;
        $93 = $92 & 255;
        $94 = (7 - ($1)) | 0;
        $95 = (($0) + ($94) | 0);
        $96 = HEAP8[$95 >> 0] | 0;
        $97 = $96 & 255;
        $98 = (($88) + ($93)) | 0;
        $99 = (($98) + ($97)) | 0;
        $100 = ($1 * 6) | 0;
        $101 = (($100) + -1) | 0;
        $102 = (($0) + ($101) | 0);
        $103 = HEAP8[$102 >> 0] | 0;
        $104 = $103 & 255;
        $105 = (6 - ($1)) | 0;
        $106 = (($0) + ($105) | 0);
        $107 = HEAP8[$106 >> 0] | 0;
        $108 = $107 & 255;
        $109 = (($99) + ($104)) | 0;
        $110 = (($109) + ($108)) | 0;
        $111 = ($1 * 5) | 0;
        $112 = (($111) + -1) | 0;
        $113 = (($0) + ($112) | 0);
        $114 = HEAP8[$113 >> 0] | 0;
        $115 = $114 & 255;
        $116 = (5 - ($1)) | 0;
        $117 = (($0) + ($116) | 0);
        $118 = HEAP8[$117 >> 0] | 0;
        $119 = $118 & 255;
        $120 = (($110) + ($115)) | 0;
        $121 = (($120) + ($119)) | 0;
        $122 = $1 << 2;
        $123 = (($122) + -1) | 0;
        $124 = (($0) + ($123) | 0);
        $125 = HEAP8[$124 >> 0] | 0;
        $126 = $125 & 255;
        $127 = (4 - ($1)) | 0;
        $128 = (($0) + ($127) | 0);
        $129 = HEAP8[$128 >> 0] | 0;
        $130 = $129 & 255;
        $131 = (($121) + ($126)) | 0;
        $132 = (($131) + ($130)) | 0;
        $133 = ($1 * 3) | 0;
        $134 = (($133) + -1) | 0;
        $135 = (($0) + ($134) | 0);
        $136 = HEAP8[$135 >> 0] | 0;
        $137 = $136 & 255;
        $138 = (3 - ($1)) | 0;
        $139 = (($0) + ($138) | 0);
        $140 = HEAP8[$139 >> 0] | 0;
        $141 = $140 & 255;
        $142 = (($132) + ($137)) | 0;
        $143 = (($142) + ($141)) | 0;
        $144 = $1 << 1;
        $145 = (($144) + -1) | 0;
        $146 = (($0) + ($145) | 0);
        $147 = HEAP8[$146 >> 0] | 0;
        $148 = $147 & 255;
        $149 = (2 - ($1)) | 0;
        $150 = (($0) + ($149) | 0);
        $151 = HEAP8[$150 >> 0] | 0;
        $152 = $151 & 255;
        $153 = (($143) + ($148)) | 0;
        $154 = (($153) + ($152)) | 0;
        $155 = (($1) + -1) | 0;
        $156 = (($0) + ($155) | 0);
        $157 = HEAP8[$156 >> 0] | 0;
        $158 = $157 & 255;
        $159 = (1 - ($1)) | 0;
        $160 = (($0) + ($159) | 0);
        $161 = HEAP8[$160 >> 0] | 0;
        $162 = $161 & 255;
        $163 = (($154) + ($158)) | 0;
        $164 = (($163) + ($162)) | 0;
        $165 = ((($0)) + -1 | 0);
        $166 = HEAP8[$165 >> 0] | 0;
        $167 = $166 & 255;
        $168 = (0 - ($1)) | 0;
        $169 = (($0) + ($168) | 0);
        $170 = HEAP8[$169 >> 0] | 0;
        $171 = $170 & 255;
        $172 = (($164) + ($167)) | 0;
        $173 = (($172) + ($171)) | 0;
        $174 = (($173) + 16) | 0;
        $175 = $174 >>> 5;
        $176 = $175 & 255;
        $177 = (($0) + ($2) | 0);
        _memset(($177 | 0), ($176 | 0), 16) | 0;
        $178 = (($0) + ($12) | 0);
        _memset(($178 | 0), ($176 | 0), 16) | 0;
        $179 = (($0) + ($23) | 0);
        _memset(($179 | 0), ($176 | 0), 16) | 0;
        $180 = (($0) + ($34) | 0);
        _memset(($180 | 0), ($176 | 0), 16) | 0;
        $181 = (($0) + ($45) | 0);
        _memset(($181 | 0), ($176 | 0), 16) | 0;
        $182 = (($0) + ($56) | 0);
        _memset(($182 | 0), ($176 | 0), 16) | 0;
        $183 = (($0) + ($67) | 0);
        _memset(($183 | 0), ($176 | 0), 16) | 0;
        $184 = (($0) + ($78) | 0);
        _memset(($184 | 0), ($176 | 0), 16) | 0;
        $185 = (($0) + ($89) | 0);
        _memset(($185 | 0), ($176 | 0), 16) | 0;
        $186 = (($0) + ($100) | 0);
        _memset(($186 | 0), ($176 | 0), 16) | 0;
        $187 = (($0) + ($111) | 0);
        _memset(($187 | 0), ($176 | 0), 16) | 0;
        $188 = (($0) + ($122) | 0);
        _memset(($188 | 0), ($176 | 0), 16) | 0;
        $189 = (($0) + ($133) | 0);
        _memset(($189 | 0), ($176 | 0), 16) | 0;
        $190 = (($0) + ($144) | 0);
        _memset(($190 | 0), ($176 | 0), 16) | 0;
        $191 = (($0) + ($1) | 0);
        _memset(($191 | 0), ($176 | 0), 16) | 0;
        _memset(($0 | 0), ($176 | 0), 16) | 0;
        return;
    }
    function __ZN7WelsDec25WelsI16x16LumaPredPlane_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$063 = 0, $$162 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
        var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
        var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
        var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
        var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
        var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
        var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
        var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
        var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
        var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (0 - ($1)) | 0;
        $3 = (($0) + ($2) | 0);
        $4 = ((($0)) + -1 | 0);
        $5 = ((($3)) + 8 | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = $6 & 255;
        $8 = ((($3)) + 6 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = $9 & 255;
        $11 = (($7) - ($10)) | 0;
        $12 = $1 << 3;
        $13 = (($4) + ($12) | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = $14 & 255;
        $16 = ($1 * 6) | 0;
        $17 = (($4) + ($16) | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = $18 & 255;
        $20 = (($15) - ($19)) | 0;
        $21 = ((($3)) + 9 | 0);
        $22 = HEAP8[$21 >> 0] | 0;
        $23 = $22 & 255;
        $24 = ((($3)) + 5 | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 & 255;
        $27 = (($23) - ($26)) | 0;
        $28 = $27 << 1;
        $29 = (($28) + ($11)) | 0;
        $30 = ($1 * 9) | 0;
        $31 = (($4) + ($30) | 0);
        $32 = HEAP8[$31 >> 0] | 0;
        $33 = $32 & 255;
        $34 = ($1 * 5) | 0;
        $35 = (($4) + ($34) | 0);
        $36 = HEAP8[$35 >> 0] | 0;
        $37 = $36 & 255;
        $38 = (($33) - ($37)) | 0;
        $39 = $38 << 1;
        $40 = (($39) + ($20)) | 0;
        $41 = ((($3)) + 10 | 0);
        $42 = HEAP8[$41 >> 0] | 0;
        $43 = $42 & 255;
        $44 = ((($3)) + 4 | 0);
        $45 = HEAP8[$44 >> 0] | 0;
        $46 = $45 & 255;
        $47 = (($43) - ($46)) | 0;
        $48 = ($47 * 3) | 0;
        $49 = (($48) + ($29)) | 0;
        $50 = ($1 * 10) | 0;
        $51 = (($4) + ($50) | 0);
        $52 = HEAP8[$51 >> 0] | 0;
        $53 = $52 & 255;
        $54 = $1 << 2;
        $55 = (($4) + ($54) | 0);
        $56 = HEAP8[$55 >> 0] | 0;
        $57 = $56 & 255;
        $58 = (($53) - ($57)) | 0;
        $59 = ($58 * 3) | 0;
        $60 = (($59) + ($40)) | 0;
        $61 = ((($3)) + 11 | 0);
        $62 = HEAP8[$61 >> 0] | 0;
        $63 = $62 & 255;
        $64 = ((($3)) + 3 | 0);
        $65 = HEAP8[$64 >> 0] | 0;
        $66 = $65 & 255;
        $67 = (($63) - ($66)) | 0;
        $68 = $67 << 2;
        $69 = (($68) + ($49)) | 0;
        $70 = ($1 * 11) | 0;
        $71 = (($4) + ($70) | 0);
        $72 = HEAP8[$71 >> 0] | 0;
        $73 = $72 & 255;
        $74 = ($1 * 3) | 0;
        $75 = (($4) + ($74) | 0);
        $76 = HEAP8[$75 >> 0] | 0;
        $77 = $76 & 255;
        $78 = (($73) - ($77)) | 0;
        $79 = $78 << 2;
        $80 = (($79) + ($60)) | 0;
        $81 = ((($3)) + 12 | 0);
        $82 = HEAP8[$81 >> 0] | 0;
        $83 = $82 & 255;
        $84 = ((($3)) + 2 | 0);
        $85 = HEAP8[$84 >> 0] | 0;
        $86 = $85 & 255;
        $87 = (($83) - ($86)) | 0;
        $88 = ($87 * 5) | 0;
        $89 = (($88) + ($69)) | 0;
        $90 = ($1 * 12) | 0;
        $91 = (($4) + ($90) | 0);
        $92 = HEAP8[$91 >> 0] | 0;
        $93 = $92 & 255;
        $94 = $1 << 1;
        $95 = (($4) + ($94) | 0);
        $96 = HEAP8[$95 >> 0] | 0;
        $97 = $96 & 255;
        $98 = (($93) - ($97)) | 0;
        $99 = ($98 * 5) | 0;
        $100 = (($99) + ($80)) | 0;
        $101 = ((($3)) + 13 | 0);
        $102 = HEAP8[$101 >> 0] | 0;
        $103 = $102 & 255;
        $104 = ((($3)) + 1 | 0);
        $105 = HEAP8[$104 >> 0] | 0;
        $106 = $105 & 255;
        $107 = (($103) - ($106)) | 0;
        $108 = ($107 * 6) | 0;
        $109 = (($108) + ($89)) | 0;
        $110 = ($1 * 13) | 0;
        $111 = (($4) + ($110) | 0);
        $112 = HEAP8[$111 >> 0] | 0;
        $113 = $112 & 255;
        $114 = (($4) + ($1) | 0);
        $115 = HEAP8[$114 >> 0] | 0;
        $116 = $115 & 255;
        $117 = (($113) - ($116)) | 0;
        $118 = ($117 * 6) | 0;
        $119 = (($118) + ($100)) | 0;
        $120 = ((($3)) + 14 | 0);
        $121 = HEAP8[$120 >> 0] | 0;
        $122 = $121 & 255;
        $123 = HEAP8[$3 >> 0] | 0;
        $124 = $123 & 255;
        $125 = (($122) - ($124)) | 0;
        $126 = ($125 * 7) | 0;
        $127 = (($126) + ($109)) | 0;
        $128 = ($1 * 14) | 0;
        $129 = (($4) + ($128) | 0);
        $130 = HEAP8[$129 >> 0] | 0;
        $131 = $130 & 255;
        $132 = HEAP8[$4 >> 0] | 0;
        $133 = $132 & 255;
        $134 = (($131) - ($133)) | 0;
        $135 = ($134 * 7) | 0;
        $136 = (($135) + ($119)) | 0;
        $137 = ((($3)) + 15 | 0);
        $138 = HEAP8[$137 >> 0] | 0;
        $139 = $138 & 255;
        $140 = ((($3)) + -1 | 0);
        $141 = HEAP8[$140 >> 0] | 0;
        $142 = $141 & 255;
        $143 = (($139) - ($142)) | 0;
        $144 = $143 << 3;
        $145 = (($144) + ($127)) | 0;
        $146 = ($1 * 15) | 0;
        $147 = (($4) + ($146) | 0);
        $148 = HEAP8[$147 >> 0] | 0;
        $149 = $148 & 255;
        $150 = (0 - ($1)) | 0;
        $151 = (($4) + ($150) | 0);
        $152 = HEAP8[$151 >> 0] | 0;
        $153 = $152 & 255;
        $154 = (($149) - ($153)) | 0;
        $155 = $154 << 3;
        $156 = (($155) + ($136)) | 0;
        $157 = (($139) + ($149)) | 0;
        $158 = $157 << 4;
        $159 = ($145 * 5) | 0;
        $160 = (($159) + 32) | 0;
        $161 = $160 >> 6;
        $162 = ($156 * 5) | 0;
        $163 = (($162) + 32) | 0;
        $164 = $163 >> 6;
        $165 = (($158) + 16) | 0;
        $166 = Math_imul($161, -7) | 0;
        $167 = Math_imul($161, -6) | 0;
        $168 = Math_imul($161, -5) | 0;
        $169 = Math_imul($161, -4) | 0;
        $170 = Math_imul($161, -3) | 0;
        $171 = Math_imul($161, -2) | 0;
        $172 = $161 << 1;
        $173 = ($161 * 3) | 0;
        $174 = $161 << 2;
        $175 = ($161 * 5) | 0;
        $176 = ($161 * 6) | 0;
        $177 = ($161 * 7) | 0;
        $178 = $161 << 3;
        $$063 = $0; $$162 = 0;
        while (1) {
            $179 = (($$162) + -7) | 0;
            $180 = Math_imul($179, $164) | 0;
            $181 = (($165) + ($180)) | 0;
            $182 = (($181) + ($166)) | 0;
            $183 = $182 >> 5;
            $184 = ($183 >>> 0) > (255);
            $185 = (0 - ($183)) | 0;
            $186 = $185 >> 31;
            $187 = $184 ? $186 : $183;
            $188 = $187 & 255;
            HEAP8[$$063 >> 0] = $188;
            $189 = (($181) + ($167)) | 0;
            $190 = $189 >> 5;
            $191 = ($190 >>> 0) > (255);
            $192 = (0 - ($190)) | 0;
            $193 = $192 >> 31;
            $194 = $191 ? $193 : $190;
            $195 = $194 & 255;
            $196 = ((($$063)) + 1 | 0);
            HEAP8[$196 >> 0] = $195;
            $197 = (($181) + ($168)) | 0;
            $198 = $197 >> 5;
            $199 = ($198 >>> 0) > (255);
            $200 = (0 - ($198)) | 0;
            $201 = $200 >> 31;
            $202 = $199 ? $201 : $198;
            $203 = $202 & 255;
            $204 = ((($$063)) + 2 | 0);
            HEAP8[$204 >> 0] = $203;
            $205 = (($181) + ($169)) | 0;
            $206 = $205 >> 5;
            $207 = ($206 >>> 0) > (255);
            $208 = (0 - ($206)) | 0;
            $209 = $208 >> 31;
            $210 = $207 ? $209 : $206;
            $211 = $210 & 255;
            $212 = ((($$063)) + 3 | 0);
            HEAP8[$212 >> 0] = $211;
            $213 = (($181) + ($170)) | 0;
            $214 = $213 >> 5;
            $215 = ($214 >>> 0) > (255);
            $216 = (0 - ($214)) | 0;
            $217 = $216 >> 31;
            $218 = $215 ? $217 : $214;
            $219 = $218 & 255;
            $220 = ((($$063)) + 4 | 0);
            HEAP8[$220 >> 0] = $219;
            $221 = (($181) + ($171)) | 0;
            $222 = $221 >> 5;
            $223 = ($222 >>> 0) > (255);
            $224 = (0 - ($222)) | 0;
            $225 = $224 >> 31;
            $226 = $223 ? $225 : $222;
            $227 = $226 & 255;
            $228 = ((($$063)) + 5 | 0);
            HEAP8[$228 >> 0] = $227;
            $229 = (($181) - ($161)) | 0;
            $230 = $229 >> 5;
            $231 = ($230 >>> 0) > (255);
            $232 = (0 - ($230)) | 0;
            $233 = $232 >> 31;
            $234 = $231 ? $233 : $230;
            $235 = $234 & 255;
            $236 = ((($$063)) + 6 | 0);
            HEAP8[$236 >> 0] = $235;
            $237 = $181 >> 5;
            $238 = ($237 >>> 0) > (255);
            $239 = (0 - ($237)) | 0;
            $240 = $239 >> 31;
            $241 = $238 ? $240 : $237;
            $242 = $241 & 255;
            $243 = ((($$063)) + 7 | 0);
            HEAP8[$243 >> 0] = $242;
            $244 = (($181) + ($161)) | 0;
            $245 = $244 >> 5;
            $246 = ($245 >>> 0) > (255);
            $247 = (0 - ($245)) | 0;
            $248 = $247 >> 31;
            $249 = $246 ? $248 : $245;
            $250 = $249 & 255;
            $251 = ((($$063)) + 8 | 0);
            HEAP8[$251 >> 0] = $250;
            $252 = (($181) + ($172)) | 0;
            $253 = $252 >> 5;
            $254 = ($253 >>> 0) > (255);
            $255 = (0 - ($253)) | 0;
            $256 = $255 >> 31;
            $257 = $254 ? $256 : $253;
            $258 = $257 & 255;
            $259 = ((($$063)) + 9 | 0);
            HEAP8[$259 >> 0] = $258;
            $260 = (($181) + ($173)) | 0;
            $261 = $260 >> 5;
            $262 = ($261 >>> 0) > (255);
            $263 = (0 - ($261)) | 0;
            $264 = $263 >> 31;
            $265 = $262 ? $264 : $261;
            $266 = $265 & 255;
            $267 = ((($$063)) + 10 | 0);
            HEAP8[$267 >> 0] = $266;
            $268 = (($181) + ($174)) | 0;
            $269 = $268 >> 5;
            $270 = ($269 >>> 0) > (255);
            $271 = (0 - ($269)) | 0;
            $272 = $271 >> 31;
            $273 = $270 ? $272 : $269;
            $274 = $273 & 255;
            $275 = ((($$063)) + 11 | 0);
            HEAP8[$275 >> 0] = $274;
            $276 = (($181) + ($175)) | 0;
            $277 = $276 >> 5;
            $278 = ($277 >>> 0) > (255);
            $279 = (0 - ($277)) | 0;
            $280 = $279 >> 31;
            $281 = $278 ? $280 : $277;
            $282 = $281 & 255;
            $283 = ((($$063)) + 12 | 0);
            HEAP8[$283 >> 0] = $282;
            $284 = (($181) + ($176)) | 0;
            $285 = $284 >> 5;
            $286 = ($285 >>> 0) > (255);
            $287 = (0 - ($285)) | 0;
            $288 = $287 >> 31;
            $289 = $286 ? $288 : $285;
            $290 = $289 & 255;
            $291 = ((($$063)) + 13 | 0);
            HEAP8[$291 >> 0] = $290;
            $292 = (($181) + ($177)) | 0;
            $293 = $292 >> 5;
            $294 = ($293 >>> 0) > (255);
            $295 = (0 - ($293)) | 0;
            $296 = $295 >> 31;
            $297 = $294 ? $296 : $293;
            $298 = $297 & 255;
            $299 = ((($$063)) + 14 | 0);
            HEAP8[$299 >> 0] = $298;
            $300 = (($181) + ($178)) | 0;
            $301 = $300 >> 5;
            $302 = ($301 >>> 0) > (255);
            $303 = (0 - ($301)) | 0;
            $304 = $303 >> 31;
            $305 = $302 ? $304 : $301;
            $306 = $305 & 255;
            $307 = ((($$063)) + 15 | 0);
            HEAP8[$307 >> 0] = $306;
            $308 = (($$063) + ($1) | 0);
            $309 = (($$162) + 1) | 0;
            $exitcond = ($309 | 0) == (16);
            if ($exitcond) {
                break;
            } else {
                $$063 = $308; $$162 = $309;
            }
        }
        return;
    }
    function __ZN7WelsDec26WelsI16x16LumaPredDcLeft_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$mask = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
        var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
        var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
        var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
        var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
        var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
        var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
        var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
        var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
        var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
        var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 * 15) | 0;
        $3 = (($2) + -1) | 0;
        $4 = (($0) + ($3) | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = ($1 * 14) | 0;
        $8 = (($7) + -1) | 0;
        $9 = (($0) + ($8) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = $10 & 255;
        $12 = (($6) + ($11)) | 0;
        $13 = ($1 * 13) | 0;
        $14 = (($13) + -1) | 0;
        $15 = (($0) + ($14) | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = $16 & 255;
        $18 = (($12) + ($17)) | 0;
        $19 = ($1 * 12) | 0;
        $20 = (($19) + -1) | 0;
        $21 = (($0) + ($20) | 0);
        $22 = HEAP8[$21 >> 0] | 0;
        $23 = $22 & 255;
        $24 = (($18) + ($23)) | 0;
        $25 = ($1 * 11) | 0;
        $26 = (($25) + -1) | 0;
        $27 = (($0) + ($26) | 0);
        $28 = HEAP8[$27 >> 0] | 0;
        $29 = $28 & 255;
        $30 = (($24) + ($29)) | 0;
        $31 = ($1 * 10) | 0;
        $32 = (($31) + -1) | 0;
        $33 = (($0) + ($32) | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = $34 & 255;
        $36 = (($30) + ($35)) | 0;
        $37 = ($1 * 9) | 0;
        $38 = (($37) + -1) | 0;
        $39 = (($0) + ($38) | 0);
        $40 = HEAP8[$39 >> 0] | 0;
        $41 = $40 & 255;
        $42 = (($36) + ($41)) | 0;
        $43 = $1 << 3;
        $44 = (($43) + -1) | 0;
        $45 = (($0) + ($44) | 0);
        $46 = HEAP8[$45 >> 0] | 0;
        $47 = $46 & 255;
        $48 = (($42) + ($47)) | 0;
        $49 = ($1 * 7) | 0;
        $50 = (($49) + -1) | 0;
        $51 = (($0) + ($50) | 0);
        $52 = HEAP8[$51 >> 0] | 0;
        $53 = $52 & 255;
        $54 = (($48) + ($53)) | 0;
        $55 = ($1 * 6) | 0;
        $56 = (($55) + -1) | 0;
        $57 = (($0) + ($56) | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = $58 & 255;
        $60 = (($54) + ($59)) | 0;
        $61 = ($1 * 5) | 0;
        $62 = (($61) + -1) | 0;
        $63 = (($0) + ($62) | 0);
        $64 = HEAP8[$63 >> 0] | 0;
        $65 = $64 & 255;
        $66 = (($60) + ($65)) | 0;
        $67 = $1 << 2;
        $68 = (($67) + -1) | 0;
        $69 = (($0) + ($68) | 0);
        $70 = HEAP8[$69 >> 0] | 0;
        $71 = $70 & 255;
        $72 = (($66) + ($71)) | 0;
        $73 = ($1 * 3) | 0;
        $74 = (($73) + -1) | 0;
        $75 = (($0) + ($74) | 0);
        $76 = HEAP8[$75 >> 0] | 0;
        $77 = $76 & 255;
        $78 = (($72) + ($77)) | 0;
        $79 = $1 << 1;
        $80 = (($79) + -1) | 0;
        $81 = (($0) + ($80) | 0);
        $82 = HEAP8[$81 >> 0] | 0;
        $83 = $82 & 255;
        $84 = (($78) + ($83)) | 0;
        $85 = (($1) + -1) | 0;
        $86 = (($0) + ($85) | 0);
        $87 = HEAP8[$86 >> 0] | 0;
        $88 = $87 & 255;
        $89 = (($84) + ($88)) | 0;
        $90 = ((($0)) + -1 | 0);
        $91 = HEAP8[$90 >> 0] | 0;
        $92 = $91 & 255;
        $93 = (($89) + ($92)) | 0;
        $94 = (($93) + 8) | 0;
        $95 = $94 >>> 4;
        $$mask = $95 & 255;
        $96 = (___muldi3(($$mask | 0), 0, 16843009, 16843009) | 0);
        $97 = tempRet0;
        $98 = (($0) + ($2) | 0);
        $99 = $98;
        $100 = $99;
        HEAP32[$100 >> 2] = $96;
        $101 = (($99) + 4) | 0;
        $102 = $101;
        HEAP32[$102 >> 2] = $97;
        $103 = ((($98)) + 8 | 0);
        $104 = $103;
        $105 = $104;
        HEAP32[$105 >> 2] = $96;
        $106 = (($104) + 4) | 0;
        $107 = $106;
        HEAP32[$107 >> 2] = $97;
        $108 = (($0) + ($7) | 0);
        $109 = $108;
        $110 = $109;
        HEAP32[$110 >> 2] = $96;
        $111 = (($109) + 4) | 0;
        $112 = $111;
        HEAP32[$112 >> 2] = $97;
        $113 = ((($108)) + 8 | 0);
        $114 = $113;
        $115 = $114;
        HEAP32[$115 >> 2] = $96;
        $116 = (($114) + 4) | 0;
        $117 = $116;
        HEAP32[$117 >> 2] = $97;
        $118 = (($0) + ($13) | 0);
        $119 = $118;
        $120 = $119;
        HEAP32[$120 >> 2] = $96;
        $121 = (($119) + 4) | 0;
        $122 = $121;
        HEAP32[$122 >> 2] = $97;
        $123 = ((($118)) + 8 | 0);
        $124 = $123;
        $125 = $124;
        HEAP32[$125 >> 2] = $96;
        $126 = (($124) + 4) | 0;
        $127 = $126;
        HEAP32[$127 >> 2] = $97;
        $128 = (($0) + ($19) | 0);
        $129 = $128;
        $130 = $129;
        HEAP32[$130 >> 2] = $96;
        $131 = (($129) + 4) | 0;
        $132 = $131;
        HEAP32[$132 >> 2] = $97;
        $133 = ((($128)) + 8 | 0);
        $134 = $133;
        $135 = $134;
        HEAP32[$135 >> 2] = $96;
        $136 = (($134) + 4) | 0;
        $137 = $136;
        HEAP32[$137 >> 2] = $97;
        $138 = (($0) + ($25) | 0);
        $139 = $138;
        $140 = $139;
        HEAP32[$140 >> 2] = $96;
        $141 = (($139) + 4) | 0;
        $142 = $141;
        HEAP32[$142 >> 2] = $97;
        $143 = ((($138)) + 8 | 0);
        $144 = $143;
        $145 = $144;
        HEAP32[$145 >> 2] = $96;
        $146 = (($144) + 4) | 0;
        $147 = $146;
        HEAP32[$147 >> 2] = $97;
        $148 = (($0) + ($31) | 0);
        $149 = $148;
        $150 = $149;
        HEAP32[$150 >> 2] = $96;
        $151 = (($149) + 4) | 0;
        $152 = $151;
        HEAP32[$152 >> 2] = $97;
        $153 = ((($148)) + 8 | 0);
        $154 = $153;
        $155 = $154;
        HEAP32[$155 >> 2] = $96;
        $156 = (($154) + 4) | 0;
        $157 = $156;
        HEAP32[$157 >> 2] = $97;
        $158 = (($0) + ($37) | 0);
        $159 = $158;
        $160 = $159;
        HEAP32[$160 >> 2] = $96;
        $161 = (($159) + 4) | 0;
        $162 = $161;
        HEAP32[$162 >> 2] = $97;
        $163 = ((($158)) + 8 | 0);
        $164 = $163;
        $165 = $164;
        HEAP32[$165 >> 2] = $96;
        $166 = (($164) + 4) | 0;
        $167 = $166;
        HEAP32[$167 >> 2] = $97;
        $168 = (($0) + ($43) | 0);
        $169 = $168;
        $170 = $169;
        HEAP32[$170 >> 2] = $96;
        $171 = (($169) + 4) | 0;
        $172 = $171;
        HEAP32[$172 >> 2] = $97;
        $173 = ((($168)) + 8 | 0);
        $174 = $173;
        $175 = $174;
        HEAP32[$175 >> 2] = $96;
        $176 = (($174) + 4) | 0;
        $177 = $176;
        HEAP32[$177 >> 2] = $97;
        $178 = (($0) + ($49) | 0);
        $179 = $178;
        $180 = $179;
        HEAP32[$180 >> 2] = $96;
        $181 = (($179) + 4) | 0;
        $182 = $181;
        HEAP32[$182 >> 2] = $97;
        $183 = ((($178)) + 8 | 0);
        $184 = $183;
        $185 = $184;
        HEAP32[$185 >> 2] = $96;
        $186 = (($184) + 4) | 0;
        $187 = $186;
        HEAP32[$187 >> 2] = $97;
        $188 = (($0) + ($55) | 0);
        $189 = $188;
        $190 = $189;
        HEAP32[$190 >> 2] = $96;
        $191 = (($189) + 4) | 0;
        $192 = $191;
        HEAP32[$192 >> 2] = $97;
        $193 = ((($188)) + 8 | 0);
        $194 = $193;
        $195 = $194;
        HEAP32[$195 >> 2] = $96;
        $196 = (($194) + 4) | 0;
        $197 = $196;
        HEAP32[$197 >> 2] = $97;
        $198 = (($0) + ($61) | 0);
        $199 = $198;
        $200 = $199;
        HEAP32[$200 >> 2] = $96;
        $201 = (($199) + 4) | 0;
        $202 = $201;
        HEAP32[$202 >> 2] = $97;
        $203 = ((($198)) + 8 | 0);
        $204 = $203;
        $205 = $204;
        HEAP32[$205 >> 2] = $96;
        $206 = (($204) + 4) | 0;
        $207 = $206;
        HEAP32[$207 >> 2] = $97;
        $208 = (($0) + ($67) | 0);
        $209 = $208;
        $210 = $209;
        HEAP32[$210 >> 2] = $96;
        $211 = (($209) + 4) | 0;
        $212 = $211;
        HEAP32[$212 >> 2] = $97;
        $213 = ((($208)) + 8 | 0);
        $214 = $213;
        $215 = $214;
        HEAP32[$215 >> 2] = $96;
        $216 = (($214) + 4) | 0;
        $217 = $216;
        HEAP32[$217 >> 2] = $97;
        $218 = (($0) + ($73) | 0);
        $219 = $218;
        $220 = $219;
        HEAP32[$220 >> 2] = $96;
        $221 = (($219) + 4) | 0;
        $222 = $221;
        HEAP32[$222 >> 2] = $97;
        $223 = ((($218)) + 8 | 0);
        $224 = $223;
        $225 = $224;
        HEAP32[$225 >> 2] = $96;
        $226 = (($224) + 4) | 0;
        $227 = $226;
        HEAP32[$227 >> 2] = $97;
        $228 = (($0) + ($79) | 0);
        $229 = $228;
        $230 = $229;
        HEAP32[$230 >> 2] = $96;
        $231 = (($229) + 4) | 0;
        $232 = $231;
        HEAP32[$232 >> 2] = $97;
        $233 = ((($228)) + 8 | 0);
        $234 = $233;
        $235 = $234;
        HEAP32[$235 >> 2] = $96;
        $236 = (($234) + 4) | 0;
        $237 = $236;
        HEAP32[$237 >> 2] = $97;
        $238 = (($0) + ($1) | 0);
        $239 = $238;
        $240 = $239;
        HEAP32[$240 >> 2] = $96;
        $241 = (($239) + 4) | 0;
        $242 = $241;
        HEAP32[$242 >> 2] = $97;
        $243 = ((($238)) + 8 | 0);
        $244 = $243;
        $245 = $244;
        HEAP32[$245 >> 2] = $96;
        $246 = (($244) + 4) | 0;
        $247 = $246;
        HEAP32[$247 >> 2] = $97;
        $248 = $0;
        $249 = $248;
        HEAP32[$249 >> 2] = $96;
        $250 = (($248) + 4) | 0;
        $251 = $250;
        HEAP32[$251 >> 2] = $97;
        $252 = ((($0)) + 8 | 0);
        $253 = $252;
        $254 = $253;
        HEAP32[$254 >> 2] = $96;
        $255 = (($253) + 4) | 0;
        $256 = $255;
        HEAP32[$256 >> 2] = $97;
        return;
    }
    function __ZN7WelsDec25WelsI16x16LumaPredDcTop_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
        var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
        var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
        var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
        var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (15 - ($1)) | 0;
        $3 = (($0) + ($2) | 0);
        $4 = HEAP8[$3 >> 0] | 0;
        $5 = $4 & 255;
        $6 = (14 - ($1)) | 0;
        $7 = (($0) + ($6) | 0);
        $8 = HEAP8[$7 >> 0] | 0;
        $9 = $8 & 255;
        $10 = (($5) + ($9)) | 0;
        $11 = (13 - ($1)) | 0;
        $12 = (($0) + ($11) | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = $13 & 255;
        $15 = (($10) + ($14)) | 0;
        $16 = (12 - ($1)) | 0;
        $17 = (($0) + ($16) | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = $18 & 255;
        $20 = (($15) + ($19)) | 0;
        $21 = (11 - ($1)) | 0;
        $22 = (($0) + ($21) | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = $23 & 255;
        $25 = (($20) + ($24)) | 0;
        $26 = (10 - ($1)) | 0;
        $27 = (($0) + ($26) | 0);
        $28 = HEAP8[$27 >> 0] | 0;
        $29 = $28 & 255;
        $30 = (($25) + ($29)) | 0;
        $31 = (9 - ($1)) | 0;
        $32 = (($0) + ($31) | 0);
        $33 = HEAP8[$32 >> 0] | 0;
        $34 = $33 & 255;
        $35 = (($30) + ($34)) | 0;
        $36 = (8 - ($1)) | 0;
        $37 = (($0) + ($36) | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = $38 & 255;
        $40 = (($35) + ($39)) | 0;
        $41 = (7 - ($1)) | 0;
        $42 = (($0) + ($41) | 0);
        $43 = HEAP8[$42 >> 0] | 0;
        $44 = $43 & 255;
        $45 = (($40) + ($44)) | 0;
        $46 = (6 - ($1)) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = HEAP8[$47 >> 0] | 0;
        $49 = $48 & 255;
        $50 = (($45) + ($49)) | 0;
        $51 = (5 - ($1)) | 0;
        $52 = (($0) + ($51) | 0);
        $53 = HEAP8[$52 >> 0] | 0;
        $54 = $53 & 255;
        $55 = (($50) + ($54)) | 0;
        $56 = (4 - ($1)) | 0;
        $57 = (($0) + ($56) | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = $58 & 255;
        $60 = (($55) + ($59)) | 0;
        $61 = (3 - ($1)) | 0;
        $62 = (($0) + ($61) | 0);
        $63 = HEAP8[$62 >> 0] | 0;
        $64 = $63 & 255;
        $65 = (($60) + ($64)) | 0;
        $66 = (2 - ($1)) | 0;
        $67 = (($0) + ($66) | 0);
        $68 = HEAP8[$67 >> 0] | 0;
        $69 = $68 & 255;
        $70 = (($65) + ($69)) | 0;
        $71 = (1 - ($1)) | 0;
        $72 = (($0) + ($71) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = (($70) + ($74)) | 0;
        $76 = (0 - ($1)) | 0;
        $77 = (($0) + ($76) | 0);
        $78 = HEAP8[$77 >> 0] | 0;
        $79 = $78 & 255;
        $80 = (($75) + ($79)) | 0;
        $81 = ($1 * 15) | 0;
        $82 = (($80) + 8) | 0;
        $83 = $82 >>> 4;
        $84 = $83 & 255;
        $85 = (($0) + ($81) | 0);
        _memset(($85 | 0), ($84 | 0), 16) | 0;
        $86 = ($1 * 14) | 0;
        $87 = (($0) + ($86) | 0);
        _memset(($87 | 0), ($84 | 0), 16) | 0;
        $88 = ($1 * 13) | 0;
        $89 = (($0) + ($88) | 0);
        _memset(($89 | 0), ($84 | 0), 16) | 0;
        $90 = ($1 * 12) | 0;
        $91 = (($0) + ($90) | 0);
        _memset(($91 | 0), ($84 | 0), 16) | 0;
        $92 = ($1 * 11) | 0;
        $93 = (($0) + ($92) | 0);
        _memset(($93 | 0), ($84 | 0), 16) | 0;
        $94 = ($1 * 10) | 0;
        $95 = (($0) + ($94) | 0);
        _memset(($95 | 0), ($84 | 0), 16) | 0;
        $96 = ($1 * 9) | 0;
        $97 = (($0) + ($96) | 0);
        _memset(($97 | 0), ($84 | 0), 16) | 0;
        $98 = $1 << 3;
        $99 = (($0) + ($98) | 0);
        _memset(($99 | 0), ($84 | 0), 16) | 0;
        $100 = ($1 * 7) | 0;
        $101 = (($0) + ($100) | 0);
        _memset(($101 | 0), ($84 | 0), 16) | 0;
        $102 = ($1 * 6) | 0;
        $103 = (($0) + ($102) | 0);
        _memset(($103 | 0), ($84 | 0), 16) | 0;
        $104 = ($1 * 5) | 0;
        $105 = (($0) + ($104) | 0);
        _memset(($105 | 0), ($84 | 0), 16) | 0;
        $106 = $1 << 2;
        $107 = (($0) + ($106) | 0);
        _memset(($107 | 0), ($84 | 0), 16) | 0;
        $108 = ($1 * 3) | 0;
        $109 = (($0) + ($108) | 0);
        _memset(($109 | 0), ($84 | 0), 16) | 0;
        $110 = $1 << 1;
        $111 = (($0) + ($110) | 0);
        _memset(($111 | 0), ($84 | 0), 16) | 0;
        $112 = (($0) + ($1) | 0);
        _memset(($112 | 0), ($84 | 0), 16) | 0;
        _memset(($0 | 0), ($84 | 0), 16) | 0;
        return;
    }
    function __ZN7WelsDec24WelsI16x16LumaPredDcNA_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
        var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
        var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
        var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
        var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 * 15) | 0;
        $3 = (($0) + ($2) | 0);
        $4 = $3;
        $5 = $4;
        HEAP32[$5 >> 2] = -2139062144;
        $6 = (($4) + 4) | 0;
        $7 = $6;
        HEAP32[$7 >> 2] = -2139062144;
        $8 = ((($3)) + 8 | 0);
        $9 = $8;
        $10 = $9;
        HEAP32[$10 >> 2] = -2139062144;
        $11 = (($9) + 4) | 0;
        $12 = $11;
        HEAP32[$12 >> 2] = -2139062144;
        $13 = ($1 * 14) | 0;
        $14 = (($0) + ($13) | 0);
        $15 = $14;
        $16 = $15;
        HEAP32[$16 >> 2] = -2139062144;
        $17 = (($15) + 4) | 0;
        $18 = $17;
        HEAP32[$18 >> 2] = -2139062144;
        $19 = ((($14)) + 8 | 0);
        $20 = $19;
        $21 = $20;
        HEAP32[$21 >> 2] = -2139062144;
        $22 = (($20) + 4) | 0;
        $23 = $22;
        HEAP32[$23 >> 2] = -2139062144;
        $24 = ($1 * 13) | 0;
        $25 = (($0) + ($24) | 0);
        $26 = $25;
        $27 = $26;
        HEAP32[$27 >> 2] = -2139062144;
        $28 = (($26) + 4) | 0;
        $29 = $28;
        HEAP32[$29 >> 2] = -2139062144;
        $30 = ((($25)) + 8 | 0);
        $31 = $30;
        $32 = $31;
        HEAP32[$32 >> 2] = -2139062144;
        $33 = (($31) + 4) | 0;
        $34 = $33;
        HEAP32[$34 >> 2] = -2139062144;
        $35 = ($1 * 12) | 0;
        $36 = (($0) + ($35) | 0);
        $37 = $36;
        $38 = $37;
        HEAP32[$38 >> 2] = -2139062144;
        $39 = (($37) + 4) | 0;
        $40 = $39;
        HEAP32[$40 >> 2] = -2139062144;
        $41 = ((($36)) + 8 | 0);
        $42 = $41;
        $43 = $42;
        HEAP32[$43 >> 2] = -2139062144;
        $44 = (($42) + 4) | 0;
        $45 = $44;
        HEAP32[$45 >> 2] = -2139062144;
        $46 = ($1 * 11) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = $47;
        $49 = $48;
        HEAP32[$49 >> 2] = -2139062144;
        $50 = (($48) + 4) | 0;
        $51 = $50;
        HEAP32[$51 >> 2] = -2139062144;
        $52 = ((($47)) + 8 | 0);
        $53 = $52;
        $54 = $53;
        HEAP32[$54 >> 2] = -2139062144;
        $55 = (($53) + 4) | 0;
        $56 = $55;
        HEAP32[$56 >> 2] = -2139062144;
        $57 = ($1 * 10) | 0;
        $58 = (($0) + ($57) | 0);
        $59 = $58;
        $60 = $59;
        HEAP32[$60 >> 2] = -2139062144;
        $61 = (($59) + 4) | 0;
        $62 = $61;
        HEAP32[$62 >> 2] = -2139062144;
        $63 = ((($58)) + 8 | 0);
        $64 = $63;
        $65 = $64;
        HEAP32[$65 >> 2] = -2139062144;
        $66 = (($64) + 4) | 0;
        $67 = $66;
        HEAP32[$67 >> 2] = -2139062144;
        $68 = ($1 * 9) | 0;
        $69 = (($0) + ($68) | 0);
        $70 = $69;
        $71 = $70;
        HEAP32[$71 >> 2] = -2139062144;
        $72 = (($70) + 4) | 0;
        $73 = $72;
        HEAP32[$73 >> 2] = -2139062144;
        $74 = ((($69)) + 8 | 0);
        $75 = $74;
        $76 = $75;
        HEAP32[$76 >> 2] = -2139062144;
        $77 = (($75) + 4) | 0;
        $78 = $77;
        HEAP32[$78 >> 2] = -2139062144;
        $79 = $1 << 3;
        $80 = (($0) + ($79) | 0);
        $81 = $80;
        $82 = $81;
        HEAP32[$82 >> 2] = -2139062144;
        $83 = (($81) + 4) | 0;
        $84 = $83;
        HEAP32[$84 >> 2] = -2139062144;
        $85 = ((($80)) + 8 | 0);
        $86 = $85;
        $87 = $86;
        HEAP32[$87 >> 2] = -2139062144;
        $88 = (($86) + 4) | 0;
        $89 = $88;
        HEAP32[$89 >> 2] = -2139062144;
        $90 = ($1 * 7) | 0;
        $91 = (($0) + ($90) | 0);
        $92 = $91;
        $93 = $92;
        HEAP32[$93 >> 2] = -2139062144;
        $94 = (($92) + 4) | 0;
        $95 = $94;
        HEAP32[$95 >> 2] = -2139062144;
        $96 = ((($91)) + 8 | 0);
        $97 = $96;
        $98 = $97;
        HEAP32[$98 >> 2] = -2139062144;
        $99 = (($97) + 4) | 0;
        $100 = $99;
        HEAP32[$100 >> 2] = -2139062144;
        $101 = ($1 * 6) | 0;
        $102 = (($0) + ($101) | 0);
        $103 = $102;
        $104 = $103;
        HEAP32[$104 >> 2] = -2139062144;
        $105 = (($103) + 4) | 0;
        $106 = $105;
        HEAP32[$106 >> 2] = -2139062144;
        $107 = ((($102)) + 8 | 0);
        $108 = $107;
        $109 = $108;
        HEAP32[$109 >> 2] = -2139062144;
        $110 = (($108) + 4) | 0;
        $111 = $110;
        HEAP32[$111 >> 2] = -2139062144;
        $112 = ($1 * 5) | 0;
        $113 = (($0) + ($112) | 0);
        $114 = $113;
        $115 = $114;
        HEAP32[$115 >> 2] = -2139062144;
        $116 = (($114) + 4) | 0;
        $117 = $116;
        HEAP32[$117 >> 2] = -2139062144;
        $118 = ((($113)) + 8 | 0);
        $119 = $118;
        $120 = $119;
        HEAP32[$120 >> 2] = -2139062144;
        $121 = (($119) + 4) | 0;
        $122 = $121;
        HEAP32[$122 >> 2] = -2139062144;
        $123 = $1 << 2;
        $124 = (($0) + ($123) | 0);
        $125 = $124;
        $126 = $125;
        HEAP32[$126 >> 2] = -2139062144;
        $127 = (($125) + 4) | 0;
        $128 = $127;
        HEAP32[$128 >> 2] = -2139062144;
        $129 = ((($124)) + 8 | 0);
        $130 = $129;
        $131 = $130;
        HEAP32[$131 >> 2] = -2139062144;
        $132 = (($130) + 4) | 0;
        $133 = $132;
        HEAP32[$133 >> 2] = -2139062144;
        $134 = ($1 * 3) | 0;
        $135 = (($0) + ($134) | 0);
        $136 = $135;
        $137 = $136;
        HEAP32[$137 >> 2] = -2139062144;
        $138 = (($136) + 4) | 0;
        $139 = $138;
        HEAP32[$139 >> 2] = -2139062144;
        $140 = ((($135)) + 8 | 0);
        $141 = $140;
        $142 = $141;
        HEAP32[$142 >> 2] = -2139062144;
        $143 = (($141) + 4) | 0;
        $144 = $143;
        HEAP32[$144 >> 2] = -2139062144;
        $145 = $1 << 1;
        $146 = (($0) + ($145) | 0);
        $147 = $146;
        $148 = $147;
        HEAP32[$148 >> 2] = -2139062144;
        $149 = (($147) + 4) | 0;
        $150 = $149;
        HEAP32[$150 >> 2] = -2139062144;
        $151 = ((($146)) + 8 | 0);
        $152 = $151;
        $153 = $152;
        HEAP32[$153 >> 2] = -2139062144;
        $154 = (($152) + 4) | 0;
        $155 = $154;
        HEAP32[$155 >> 2] = -2139062144;
        $156 = (($0) + ($1) | 0);
        $157 = $156;
        $158 = $157;
        HEAP32[$158 >> 2] = -2139062144;
        $159 = (($157) + 4) | 0;
        $160 = $159;
        HEAP32[$160 >> 2] = -2139062144;
        $161 = ((($156)) + 8 | 0);
        $162 = $161;
        $163 = $162;
        HEAP32[$163 >> 2] = -2139062144;
        $164 = (($162) + 4) | 0;
        $165 = $164;
        HEAP32[$165 >> 2] = -2139062144;
        $166 = $0;
        $167 = $166;
        HEAP32[$167 >> 2] = -2139062144;
        $168 = (($166) + 4) | 0;
        $169 = $168;
        HEAP32[$169 >> 2] = -2139062144;
        $170 = ((($0)) + 8 | 0);
        $171 = $170;
        $172 = $171;
        HEAP32[$172 >> 2] = -2139062144;
        $173 = (($171) + 4) | 0;
        $174 = $173;
        HEAP32[$174 >> 2] = -2139062144;
        return;
    }
    function __ZN7WelsDec19WelsI4x4LumaPredV_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (0 - ($1)) | 0;
        $3 = (($0) + ($2) | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        HEAP32[$0 >> 2] = $4;
        $5 = (($0) + ($1) | 0);
        HEAP32[$5 >> 2] = $4;
        $6 = $1 << 1;
        $7 = (($0) + ($6) | 0);
        HEAP32[$7 >> 2] = $4;
        $8 = (($7) + ($1) | 0);
        HEAP32[$8 >> 2] = $4;
        return;
    }
    function __ZN7WelsDec19WelsI4x4LumaPredH_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
        var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = ((($0)) + -1 | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = Math_imul($6, 16843009) | 0;
        $8 = (($1) + -1) | 0;
        $9 = (($0) + ($8) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = $10 & 255;
        $12 = Math_imul($11, 16843009) | 0;
        $13 = (($2) + -1) | 0;
        $14 = (($0) + ($13) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = $15 & 255;
        $17 = Math_imul($16, 16843009) | 0;
        $18 = (($3) + -1) | 0;
        $19 = (($0) + ($18) | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = $20 & 255;
        $22 = Math_imul($21, 16843009) | 0;
        HEAP32[$0 >> 2] = $7;
        $23 = (($0) + ($1) | 0);
        HEAP32[$23 >> 2] = $12;
        $24 = (($0) + ($2) | 0);
        HEAP32[$24 >> 2] = $17;
        $25 = (($0) + ($3) | 0);
        HEAP32[$25 >> 2] = $22;
        return;
    }
    function __ZN7WelsDec20WelsI4x4LumaPredDc_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = ((($0)) + -1 | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = (($1) + -1) | 0;
        $8 = (($0) + ($7) | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = $9 & 255;
        $11 = (($2) + -1) | 0;
        $12 = (($0) + ($11) | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = $13 & 255;
        $15 = (($3) + -1) | 0;
        $16 = (($0) + ($15) | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = $17 & 255;
        $19 = (0 - ($1)) | 0;
        $20 = (($0) + ($19) | 0);
        $21 = HEAP8[$20 >> 0] | 0;
        $22 = $21 & 255;
        $23 = (1 - ($1)) | 0;
        $24 = (($0) + ($23) | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 & 255;
        $27 = (2 - ($1)) | 0;
        $28 = (($0) + ($27) | 0);
        $29 = HEAP8[$28 >> 0] | 0;
        $30 = $29 & 255;
        $31 = (3 - ($1)) | 0;
        $32 = (($0) + ($31) | 0);
        $33 = HEAP8[$32 >> 0] | 0;
        $34 = $33 & 255;
        $35 = (($6) + 4) | 0;
        $36 = (($35) + ($10)) | 0;
        $37 = (($36) + ($14)) | 0;
        $38 = (($37) + ($18)) | 0;
        $39 = (($38) + ($22)) | 0;
        $40 = (($39) + ($26)) | 0;
        $41 = (($40) + ($30)) | 0;
        $42 = (($41) + ($34)) | 0;
        $43 = $42 >>> 3;
        $44 = $43 & 255;
        $45 = Math_imul($44, 16843009) | 0;
        HEAP32[$0 >> 2] = $45;
        $46 = (($0) + ($1) | 0);
        HEAP32[$46 >> 2] = $45;
        $47 = (($0) + ($2) | 0);
        HEAP32[$47 >> 2] = $45;
        $48 = (($0) + ($3) | 0);
        HEAP32[$48 >> 2] = $45;
        return;
    }
    function __ZN7WelsDec24WelsI4x4LumaPredDcLeft_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = ((($0)) + -1 | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = (($1) + -1) | 0;
        $8 = (($0) + ($7) | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = $9 & 255;
        $11 = (($2) + -1) | 0;
        $12 = (($0) + ($11) | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = $13 & 255;
        $15 = (($3) + -1) | 0;
        $16 = (($0) + ($15) | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = $17 & 255;
        $19 = (($6) + 2) | 0;
        $20 = (($19) + ($10)) | 0;
        $21 = (($20) + ($14)) | 0;
        $22 = (($21) + ($18)) | 0;
        $23 = $22 >>> 2;
        $24 = $23 & 255;
        $25 = Math_imul($24, 16843009) | 0;
        HEAP32[$0 >> 2] = $25;
        $26 = (($0) + ($1) | 0);
        HEAP32[$26 >> 2] = $25;
        $27 = (($0) + ($2) | 0);
        HEAP32[$27 >> 2] = $25;
        $28 = (($0) + ($3) | 0);
        HEAP32[$28 >> 2] = $25;
        return;
    }
    function __ZN7WelsDec23WelsI4x4LumaPredDcTop_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = (0 - ($1)) | 0;
        $5 = (($0) + ($4) | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = $6 & 255;
        $8 = (1 - ($1)) | 0;
        $9 = (($0) + ($8) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = $10 & 255;
        $12 = (2 - ($1)) | 0;
        $13 = (($0) + ($12) | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = $14 & 255;
        $16 = (3 - ($1)) | 0;
        $17 = (($0) + ($16) | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = $18 & 255;
        $20 = (($7) + 2) | 0;
        $21 = (($20) + ($11)) | 0;
        $22 = (($21) + ($15)) | 0;
        $23 = (($22) + ($19)) | 0;
        $24 = $23 >>> 2;
        $25 = $24 & 255;
        $26 = Math_imul($25, 16843009) | 0;
        HEAP32[$0 >> 2] = $26;
        $27 = (($0) + ($1) | 0);
        HEAP32[$27 >> 2] = $26;
        $28 = (($0) + ($2) | 0);
        HEAP32[$28 >> 2] = $26;
        $29 = (($0) + ($3) | 0);
        HEAP32[$29 >> 2] = $26;
        return;
    }
    function __ZN7WelsDec22WelsI4x4LumaPredDcNA_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = -2139062144;
        $2 = (($0) + ($1) | 0);
        HEAP32[$2 >> 2] = -2139062144;
        $3 = $1 << 1;
        $4 = (($0) + ($3) | 0);
        HEAP32[$4 >> 2] = -2139062144;
        $5 = (($4) + ($1) | 0);
        HEAP32[$5 >> 2] = -2139062144;
        return;
    }
    function __ZN7WelsDec21WelsI4x4LumaPredDDL_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = 0, $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = 0, $$sroa$0$1$sroa_idx75 = 0, $$sroa$0$2$$sroa$0$2$$sroa$0$2$ = 0, $$sroa$0$2$sroa_idx76 = 0, $$sroa$0$3$$sroa$0$3$$sroa$0$3$ = 0, $$sroa$0$3$sroa_idx77 = 0, $$sroa$0$4$sroa_idx = 0, $$sroa$0$5$sroa_idx = 0, $$sroa$0$6$sroa_idx = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
        var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
        var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
        var $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $$sroa$0 = sp;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = (0 - ($1)) | 0;
        $5 = (($0) + ($4) | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = ((($5)) + 1 | 0);
        $8 = HEAP8[$7 >> 0] | 0;
        $9 = ((($5)) + 2 | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = ((($5)) + 3 | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = ((($5)) + 4 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = ((($5)) + 5 | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = ((($5)) + 6 | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = ((($5)) + 7 | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = $6 & 255;
        $22 = (($21) + 2) | 0;
        $23 = $10 & 255;
        $24 = (($22) + ($23)) | 0;
        $25 = $8 & 255;
        $26 = $25 << 1;
        $27 = (($24) + ($26)) | 0;
        $28 = $27 >>> 2;
        $29 = $28 & 255;
        $30 = (($25) + 2) | 0;
        $31 = $12 & 255;
        $32 = (($30) + ($31)) | 0;
        $33 = $23 << 1;
        $34 = (($32) + ($33)) | 0;
        $35 = $34 >>> 2;
        $36 = $35 & 255;
        $37 = (($23) + 2) | 0;
        $38 = $14 & 255;
        $39 = (($37) + ($38)) | 0;
        $40 = $31 << 1;
        $41 = (($39) + ($40)) | 0;
        $42 = $41 >>> 2;
        $43 = $42 & 255;
        $44 = (($31) + 2) | 0;
        $45 = $16 & 255;
        $46 = (($44) + ($45)) | 0;
        $47 = $38 << 1;
        $48 = (($46) + ($47)) | 0;
        $49 = $48 >>> 2;
        $50 = $49 & 255;
        $51 = (($38) + 2) | 0;
        $52 = $18 & 255;
        $53 = (($51) + ($52)) | 0;
        $54 = $45 << 1;
        $55 = (($53) + ($54)) | 0;
        $56 = $55 >>> 2;
        $57 = $56 & 255;
        $58 = (($45) + 2) | 0;
        $59 = $20 & 255;
        $60 = (($58) + ($59)) | 0;
        $61 = $52 << 1;
        $62 = (($60) + ($61)) | 0;
        $63 = $62 >>> 2;
        $64 = $63 & 255;
        $65 = (($52) + 2) | 0;
        $66 = (($65) + ($59)) | 0;
        $67 = $59 << 1;
        $68 = (($66) + ($67)) | 0;
        $69 = $68 >>> 2;
        $70 = $69 & 255;
        HEAP8[$$sroa$0 >> 0] = $29;
        $$sroa$0$1$sroa_idx75 = ((($$sroa$0)) + 1 | 0);
        HEAP8[$$sroa$0$1$sroa_idx75 >> 0] = $36;
        $$sroa$0$2$sroa_idx76 = ((($$sroa$0)) + 2 | 0);
        HEAP8[$$sroa$0$2$sroa_idx76 >> 0] = $43;
        $$sroa$0$3$sroa_idx77 = ((($$sroa$0)) + 3 | 0);
        HEAP8[$$sroa$0$3$sroa_idx77 >> 0] = $50;
        $$sroa$0$4$sroa_idx = ((($$sroa$0)) + 4 | 0);
        HEAP8[$$sroa$0$4$sroa_idx >> 0] = $57;
        $$sroa$0$5$sroa_idx = ((($$sroa$0)) + 5 | 0);
        HEAP8[$$sroa$0$5$sroa_idx >> 0] = $64;
        $$sroa$0$6$sroa_idx = ((($$sroa$0)) + 6 | 0);
        HEAP8[$$sroa$0$6$sroa_idx >> 0] = $70;
        $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = HEAP32[$$sroa$0 >> 2] | 0;
        HEAP32[$0 >> 2] = $$sroa$0$0$$sroa$0$0$$sroa$0$0$;
        $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = HEAPU8[$$sroa$0$1$sroa_idx75 >> 0] | (HEAPU8[$$sroa$0$1$sroa_idx75 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$1$sroa_idx75 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$1$sroa_idx75 + 3 >> 0] << 24);
        $71 = (($0) + ($1) | 0);
        HEAP32[$71 >> 2] = $$sroa$0$1$$sroa$0$1$$sroa$0$1$;
        $$sroa$0$2$$sroa$0$2$$sroa$0$2$ = HEAPU16[$$sroa$0$2$sroa_idx76 >> 1] | (HEAPU16[$$sroa$0$2$sroa_idx76 + 2 >> 1] << 16);
        $72 = (($0) + ($2) | 0);
        HEAP32[$72 >> 2] = $$sroa$0$2$$sroa$0$2$$sroa$0$2$;
        $$sroa$0$3$$sroa$0$3$$sroa$0$3$ = HEAPU8[$$sroa$0$3$sroa_idx77 >> 0] | (HEAPU8[$$sroa$0$3$sroa_idx77 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$3$sroa_idx77 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$3$sroa_idx77 + 3 >> 0] << 24);
        $73 = (($0) + ($3) | 0);
        HEAP32[$73 >> 2] = $$sroa$0$3$$sroa$0$3$$sroa$0$3$;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec24WelsI4x4LumaPredDDLTop_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = 0, $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = 0, $$sroa$0$1$sroa_idx73 = 0, $$sroa$0$2$$sroa$0$2$$sroa$0$2$ = 0, $$sroa$0$2$sroa_idx74 = 0, $$sroa$0$3$$sroa$0$3$$sroa$0$3$ = 0, $$sroa$0$3$sroa_idx75 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0;
        var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $$sroa$0 = sp;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = (0 - ($1)) | 0;
        $5 = (($0) + ($4) | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = ((($5)) + 1 | 0);
        $8 = HEAP8[$7 >> 0] | 0;
        $9 = ((($5)) + 2 | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = ((($5)) + 3 | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = $6 & 255;
        $14 = (($13) + 1) | 0;
        $15 = $8 & 255;
        $16 = (($14) + ($15)) | 0;
        $17 = (($15) + 1) | 0;
        $18 = $10 & 255;
        $19 = (($17) + ($18)) | 0;
        $20 = (($18) + 1) | 0;
        $21 = $12 & 255;
        $22 = (($20) + ($21)) | 0;
        $23 = $21 << 1;
        $24 = $23 | 1;
        $25 = (($16) + ($19)) | 0;
        $26 = $25 >>> 2;
        $27 = $26 & 255;
        $28 = (($22) + ($19)) | 0;
        $29 = $28 >>> 2;
        $30 = $29 & 255;
        $31 = (($24) + ($22)) | 0;
        $32 = $31 >>> 2;
        $33 = $32 & 255;
        HEAP8[$$sroa$0 >> 0] = $27;
        $$sroa$0$1$sroa_idx73 = ((($$sroa$0)) + 1 | 0);
        HEAP8[$$sroa$0$1$sroa_idx73 >> 0] = $30;
        $$sroa$0$2$sroa_idx74 = ((($$sroa$0)) + 2 | 0);
        HEAP8[$$sroa$0$2$sroa_idx74 >> 0] = $33;
        $$sroa$0$3$sroa_idx75 = ((($$sroa$0)) + 3 | 0);
        _memset(($$sroa$0$3$sroa_idx75 | 0), ($12 | 0), 4) | 0;
        $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = HEAP32[$$sroa$0 >> 2] | 0;
        HEAP32[$0 >> 2] = $$sroa$0$0$$sroa$0$0$$sroa$0$0$;
        $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = HEAPU8[$$sroa$0$1$sroa_idx73 >> 0] | (HEAPU8[$$sroa$0$1$sroa_idx73 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$1$sroa_idx73 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$1$sroa_idx73 + 3 >> 0] << 24);
        $34 = (($0) + ($1) | 0);
        HEAP32[$34 >> 2] = $$sroa$0$1$$sroa$0$1$$sroa$0$1$;
        $$sroa$0$2$$sroa$0$2$$sroa$0$2$ = HEAPU16[$$sroa$0$2$sroa_idx74 >> 1] | (HEAPU16[$$sroa$0$2$sroa_idx74 + 2 >> 1] << 16);
        $35 = (($0) + ($2) | 0);
        HEAP32[$35 >> 2] = $$sroa$0$2$$sroa$0$2$$sroa$0$2$;
        $$sroa$0$3$$sroa$0$3$$sroa$0$3$ = HEAPU8[$$sroa$0$3$sroa_idx75 >> 0] | (HEAPU8[$$sroa$0$3$sroa_idx75 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$3$sroa_idx75 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$3$sroa_idx75 + 3 >> 0] << 24);
        $36 = (($0) + ($3) | 0);
        HEAP32[$36 >> 2] = $$sroa$0$3$$sroa$0$3$$sroa$0$3$;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec21WelsI4x4LumaPredDDR_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = 0, $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = 0, $$sroa$0$1$sroa_idx107 = 0, $$sroa$0$2$$sroa$0$2$$sroa$0$2$ = 0, $$sroa$0$2$sroa_idx108 = 0, $$sroa$0$3$$sroa$0$3$$sroa$0$3$ = 0, $$sroa$0$3$sroa_idx109 = 0, $$sroa$0$4$sroa_idx = 0, $$sroa$0$5$sroa_idx = 0, $$sroa$0$6$sroa_idx = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
        var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
        var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
        var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $$sroa$0 = sp;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = $1 ^ -1;
        $5 = (($0) + ($4) | 0);
        $6 = ((($0)) + -1 | 0);
        $7 = HEAP8[$5 >> 0] | 0;
        $8 = HEAP8[$6 >> 0] | 0;
        $9 = (($6) + ($1) | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = (($6) + ($2) | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = (($6) + ($3) | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = ((($5)) + 1 | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = ((($5)) + 2 | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = ((($5)) + 3 | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = ((($5)) + 4 | 0);
        $22 = HEAP8[$21 >> 0] | 0;
        $23 = $7 & 255;
        $24 = (($23) + 1) | 0;
        $25 = $8 & 255;
        $26 = (($24) + ($25)) | 0;
        $27 = $16 & 255;
        $28 = (($24) + ($27)) | 0;
        $29 = (($27) + 1) | 0;
        $30 = $18 & 255;
        $31 = (($29) + ($30)) | 0;
        $32 = (($30) + 1) | 0;
        $33 = $20 & 255;
        $34 = (($32) + ($33)) | 0;
        $35 = (($33) + 1) | 0;
        $36 = $22 & 255;
        $37 = (($35) + ($36)) | 0;
        $38 = (($25) + 1) | 0;
        $39 = $10 & 255;
        $40 = (($38) + ($39)) | 0;
        $41 = (($39) + 1) | 0;
        $42 = $12 & 255;
        $43 = (($41) + ($42)) | 0;
        $44 = (($42) + 1) | 0;
        $45 = $14 & 255;
        $46 = (($44) + ($45)) | 0;
        $47 = (($28) + ($26)) | 0;
        $48 = $47 >>> 2;
        $49 = $48 & 255;
        $50 = (($31) + ($28)) | 0;
        $51 = $50 >>> 2;
        $52 = $51 & 255;
        $53 = (($34) + ($31)) | 0;
        $54 = $53 >>> 2;
        $55 = $54 & 255;
        $56 = (($37) + ($34)) | 0;
        $57 = $56 >>> 2;
        $58 = $57 & 255;
        $59 = (($40) + ($26)) | 0;
        $60 = $59 >>> 2;
        $61 = $60 & 255;
        $62 = (($43) + ($40)) | 0;
        $63 = $62 >>> 2;
        $64 = $63 & 255;
        $65 = (($46) + ($43)) | 0;
        $66 = $65 >>> 2;
        $67 = $66 & 255;
        HEAP8[$$sroa$0 >> 0] = $67;
        $$sroa$0$1$sroa_idx107 = ((($$sroa$0)) + 1 | 0);
        HEAP8[$$sroa$0$1$sroa_idx107 >> 0] = $64;
        $$sroa$0$2$sroa_idx108 = ((($$sroa$0)) + 2 | 0);
        HEAP8[$$sroa$0$2$sroa_idx108 >> 0] = $61;
        $$sroa$0$3$sroa_idx109 = ((($$sroa$0)) + 3 | 0);
        HEAP8[$$sroa$0$3$sroa_idx109 >> 0] = $49;
        $$sroa$0$4$sroa_idx = ((($$sroa$0)) + 4 | 0);
        HEAP8[$$sroa$0$4$sroa_idx >> 0] = $52;
        $$sroa$0$5$sroa_idx = ((($$sroa$0)) + 5 | 0);
        HEAP8[$$sroa$0$5$sroa_idx >> 0] = $55;
        $$sroa$0$6$sroa_idx = ((($$sroa$0)) + 6 | 0);
        HEAP8[$$sroa$0$6$sroa_idx >> 0] = $58;
        $$sroa$0$3$$sroa$0$3$$sroa$0$3$ = HEAPU8[$$sroa$0$3$sroa_idx109 >> 0] | (HEAPU8[$$sroa$0$3$sroa_idx109 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$3$sroa_idx109 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$3$sroa_idx109 + 3 >> 0] << 24);
        HEAP32[$0 >> 2] = $$sroa$0$3$$sroa$0$3$$sroa$0$3$;
        $$sroa$0$2$$sroa$0$2$$sroa$0$2$ = HEAPU16[$$sroa$0$2$sroa_idx108 >> 1] | (HEAPU16[$$sroa$0$2$sroa_idx108 + 2 >> 1] << 16);
        $68 = (($0) + ($1) | 0);
        HEAP32[$68 >> 2] = $$sroa$0$2$$sroa$0$2$$sroa$0$2$;
        $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = HEAPU8[$$sroa$0$1$sroa_idx107 >> 0] | (HEAPU8[$$sroa$0$1$sroa_idx107 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$1$sroa_idx107 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$1$sroa_idx107 + 3 >> 0] << 24);
        $69 = (($0) + ($2) | 0);
        HEAP32[$69 >> 2] = $$sroa$0$1$$sroa$0$1$$sroa$0$1$;
        $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = HEAP32[$$sroa$0 >> 2] | 0;
        $70 = (($0) + ($3) | 0);
        HEAP32[$70 >> 2] = $$sroa$0$0$$sroa$0$0$$sroa$0$0$;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI4x4LumaPredVL_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = 0, $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = 0, $$sroa$0$1$sroa_idx101 = 0, $$sroa$0$2$sroa_idx = 0, $$sroa$0$3$sroa_idx = 0, $$sroa$0$4$sroa_idx = 0, $$sroa$9 = 0, $$sroa$9$0$$sroa$9$0$$sroa$9$5$ = 0, $$sroa$9$1$$sroa$9$1$$sroa$9$6$ = 0, $$sroa$9$1$sroa_idx95 = 0, $$sroa$9$2$sroa_idx96 = 0, $$sroa$9$3$sroa_idx97 = 0, $$sroa$9$4$sroa_idx98 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
        var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
        var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
        var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $$sroa$0 = sp + 8 | 0;
        $$sroa$9 = sp;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = $1 ^ -1;
        $5 = (($0) + ($4) | 0);
        $6 = ((($5)) + 1 | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = ((($5)) + 2 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ((($5)) + 3 | 0);
        $11 = HEAP8[$10 >> 0] | 0;
        $12 = ((($5)) + 4 | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = ((($5)) + 5 | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = ((($5)) + 6 | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = ((($5)) + 7 | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = $7 & 255;
        $21 = (($20) + 1) | 0;
        $22 = $9 & 255;
        $23 = (($21) + ($22)) | 0;
        $24 = (($22) + 1) | 0;
        $25 = $11 & 255;
        $26 = (($24) + ($25)) | 0;
        $27 = (($25) + 1) | 0;
        $28 = $13 & 255;
        $29 = (($27) + ($28)) | 0;
        $30 = (($28) + 1) | 0;
        $31 = $15 & 255;
        $32 = (($30) + ($31)) | 0;
        $33 = (($31) + 1) | 0;
        $34 = $17 & 255;
        $35 = (($33) + ($34)) | 0;
        $36 = (($34) + 1) | 0;
        $37 = $19 & 255;
        $38 = (($36) + ($37)) | 0;
        $39 = $23 >>> 1;
        $40 = $39 & 255;
        $41 = $26 >>> 1;
        $42 = $41 & 255;
        $43 = $29 >>> 1;
        $44 = $43 & 255;
        $45 = $32 >>> 1;
        $46 = $45 & 255;
        $47 = $35 >>> 1;
        $48 = $47 & 255;
        $49 = (($26) + ($23)) | 0;
        $50 = $49 >>> 2;
        $51 = $50 & 255;
        $52 = (($29) + ($26)) | 0;
        $53 = $52 >>> 2;
        $54 = $53 & 255;
        $55 = (($32) + ($29)) | 0;
        $56 = $55 >>> 2;
        $57 = $56 & 255;
        $58 = (($35) + ($32)) | 0;
        $59 = $58 >>> 2;
        $60 = $59 & 255;
        $61 = (($38) + ($35)) | 0;
        $62 = $61 >>> 2;
        $63 = $62 & 255;
        HEAP8[$$sroa$0 >> 0] = $40;
        $$sroa$0$1$sroa_idx101 = ((($$sroa$0)) + 1 | 0);
        HEAP8[$$sroa$0$1$sroa_idx101 >> 0] = $42;
        $$sroa$0$2$sroa_idx = ((($$sroa$0)) + 2 | 0);
        HEAP8[$$sroa$0$2$sroa_idx >> 0] = $44;
        $$sroa$0$3$sroa_idx = ((($$sroa$0)) + 3 | 0);
        HEAP8[$$sroa$0$3$sroa_idx >> 0] = $46;
        $$sroa$0$4$sroa_idx = ((($$sroa$0)) + 4 | 0);
        HEAP8[$$sroa$0$4$sroa_idx >> 0] = $48;
        HEAP8[$$sroa$9 >> 0] = $51;
        $$sroa$9$1$sroa_idx95 = ((($$sroa$9)) + 1 | 0);
        HEAP8[$$sroa$9$1$sroa_idx95 >> 0] = $54;
        $$sroa$9$2$sroa_idx96 = ((($$sroa$9)) + 2 | 0);
        HEAP8[$$sroa$9$2$sroa_idx96 >> 0] = $57;
        $$sroa$9$3$sroa_idx97 = ((($$sroa$9)) + 3 | 0);
        HEAP8[$$sroa$9$3$sroa_idx97 >> 0] = $60;
        $$sroa$9$4$sroa_idx98 = ((($$sroa$9)) + 4 | 0);
        HEAP8[$$sroa$9$4$sroa_idx98 >> 0] = $63;
        $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = HEAP32[$$sroa$0 >> 2] | 0;
        HEAP32[$0 >> 2] = $$sroa$0$0$$sroa$0$0$$sroa$0$0$;
        $$sroa$9$0$$sroa$9$0$$sroa$9$5$ = HEAP32[$$sroa$9 >> 2] | 0;
        $64 = (($0) + ($1) | 0);
        HEAP32[$64 >> 2] = $$sroa$9$0$$sroa$9$0$$sroa$9$5$;
        $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = HEAPU8[$$sroa$0$1$sroa_idx101 >> 0] | (HEAPU8[$$sroa$0$1$sroa_idx101 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$1$sroa_idx101 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$1$sroa_idx101 + 3 >> 0] << 24);
        $65 = (($0) + ($2) | 0);
        HEAP32[$65 >> 2] = $$sroa$0$1$$sroa$0$1$$sroa$0$1$;
        $$sroa$9$1$$sroa$9$1$$sroa$9$6$ = HEAPU8[$$sroa$9$1$sroa_idx95 >> 0] | (HEAPU8[$$sroa$9$1$sroa_idx95 + 1 >> 0] << 8) | (HEAPU8[$$sroa$9$1$sroa_idx95 + 2 >> 0] << 16) | (HEAPU8[$$sroa$9$1$sroa_idx95 + 3 >> 0] << 24);
        $66 = (($0) + ($3) | 0);
        HEAP32[$66 >> 2] = $$sroa$9$1$$sroa$9$1$$sroa$9$6$;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec23WelsI4x4LumaPredVLTop_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = 0, $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = 0, $$sroa$0$1$sroa_idx85 = 0, $$sroa$0$2$sroa_idx = 0, $$sroa$0$3$sroa_idx = 0, $$sroa$0$4$sroa_idx = 0, $$sroa$9 = 0, $$sroa$9$0$$sroa$9$0$$sroa$9$5$ = 0, $$sroa$9$1$$sroa$9$1$$sroa$9$6$ = 0, $$sroa$9$1$sroa_idx79 = 0, $$sroa$9$2$sroa_idx80 = 0, $$sroa$9$3$sroa_idx81 = 0, $$sroa$9$4$sroa_idx82 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
        var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
        var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $$sroa$0 = sp + 8 | 0;
        $$sroa$9 = sp;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = $1 ^ -1;
        $5 = (($0) + ($4) | 0);
        $6 = ((($5)) + 1 | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = ((($5)) + 2 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = ((($5)) + 3 | 0);
        $11 = HEAP8[$10 >> 0] | 0;
        $12 = ((($5)) + 4 | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = $7 & 255;
        $15 = (($14) + 1) | 0;
        $16 = $9 & 255;
        $17 = (($15) + ($16)) | 0;
        $18 = (($16) + 1) | 0;
        $19 = $11 & 255;
        $20 = (($18) + ($19)) | 0;
        $21 = (($19) + 1) | 0;
        $22 = $13 & 255;
        $23 = (($21) + ($22)) | 0;
        $24 = $22 << 1;
        $25 = $24 | 1;
        $26 = $17 >>> 1;
        $27 = $26 & 255;
        $28 = $20 >>> 1;
        $29 = $28 & 255;
        $30 = $23 >>> 1;
        $31 = $30 & 255;
        $32 = (($20) + ($17)) | 0;
        $33 = $32 >>> 2;
        $34 = $33 & 255;
        $35 = (($23) + ($20)) | 0;
        $36 = $35 >>> 2;
        $37 = $36 & 255;
        $38 = (($25) + ($23)) | 0;
        $39 = $38 >>> 2;
        $40 = $39 & 255;
        HEAP8[$$sroa$0 >> 0] = $27;
        $$sroa$0$1$sroa_idx85 = ((($$sroa$0)) + 1 | 0);
        HEAP8[$$sroa$0$1$sroa_idx85 >> 0] = $29;
        $$sroa$0$2$sroa_idx = ((($$sroa$0)) + 2 | 0);
        HEAP8[$$sroa$0$2$sroa_idx >> 0] = $31;
        $$sroa$0$3$sroa_idx = ((($$sroa$0)) + 3 | 0);
        HEAP8[$$sroa$0$3$sroa_idx >> 0] = $13;
        $$sroa$0$4$sroa_idx = ((($$sroa$0)) + 4 | 0);
        HEAP8[$$sroa$0$4$sroa_idx >> 0] = $13;
        HEAP8[$$sroa$9 >> 0] = $34;
        $$sroa$9$1$sroa_idx79 = ((($$sroa$9)) + 1 | 0);
        HEAP8[$$sroa$9$1$sroa_idx79 >> 0] = $37;
        $$sroa$9$2$sroa_idx80 = ((($$sroa$9)) + 2 | 0);
        HEAP8[$$sroa$9$2$sroa_idx80 >> 0] = $40;
        $$sroa$9$3$sroa_idx81 = ((($$sroa$9)) + 3 | 0);
        HEAP8[$$sroa$9$3$sroa_idx81 >> 0] = $13;
        $$sroa$9$4$sroa_idx82 = ((($$sroa$9)) + 4 | 0);
        HEAP8[$$sroa$9$4$sroa_idx82 >> 0] = $13;
        $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = HEAP32[$$sroa$0 >> 2] | 0;
        HEAP32[$0 >> 2] = $$sroa$0$0$$sroa$0$0$$sroa$0$0$;
        $$sroa$9$0$$sroa$9$0$$sroa$9$5$ = HEAP32[$$sroa$9 >> 2] | 0;
        $41 = (($0) + ($1) | 0);
        HEAP32[$41 >> 2] = $$sroa$9$0$$sroa$9$0$$sroa$9$5$;
        $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = HEAPU8[$$sroa$0$1$sroa_idx85 >> 0] | (HEAPU8[$$sroa$0$1$sroa_idx85 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$1$sroa_idx85 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$1$sroa_idx85 + 3 >> 0] << 24);
        $42 = (($0) + ($2) | 0);
        HEAP32[$42 >> 2] = $$sroa$0$1$$sroa$0$1$$sroa$0$1$;
        $$sroa$9$1$$sroa$9$1$$sroa$9$6$ = HEAPU8[$$sroa$9$1$sroa_idx79 >> 0] | (HEAPU8[$$sroa$9$1$sroa_idx79 + 1 >> 0] << 8) | (HEAPU8[$$sroa$9$1$sroa_idx79 + 2 >> 0] << 16) | (HEAPU8[$$sroa$9$1$sroa_idx79 + 3 >> 0] << 24);
        $43 = (($0) + ($3) | 0);
        HEAP32[$43 >> 2] = $$sroa$9$1$$sroa$9$1$$sroa$9$6$;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI4x4LumaPredVR_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$sroa$0 = 0, $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = 0, $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = 0, $$sroa$0$1$sroa_idx92 = 0, $$sroa$0$2$sroa_idx = 0, $$sroa$0$3$sroa_idx = 0, $$sroa$0$4$sroa_idx = 0, $$sroa$9 = 0, $$sroa$9$0$$sroa$9$0$$sroa$9$5$ = 0, $$sroa$9$1$$sroa$9$1$$sroa$9$6$ = 0, $$sroa$9$1$sroa_idx86 = 0, $$sroa$9$2$sroa_idx87 = 0, $$sroa$9$3$sroa_idx88 = 0, $$sroa$9$4$sroa_idx89 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
        var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
        var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
        var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
        var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $$sroa$0 = sp + 8 | 0;
        $$sroa$9 = sp;
        $2 = $1 << 1;
        $3 = ($1 * 3) | 0;
        $4 = (0 - ($1)) | 0;
        $5 = $1 ^ -1;
        $6 = (($0) + ($5) | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = ((($0)) + -1 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = (($1) + -1) | 0;
        $11 = (($0) + ($10) | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = (($2) + -1) | 0;
        $14 = (($0) + ($13) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = (($0) + ($4) | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = (1 - ($1)) | 0;
        $19 = (($0) + ($18) | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = (2 - ($1)) | 0;
        $22 = (($0) + ($21) | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = (3 - ($1)) | 0;
        $25 = (($0) + ($24) | 0);
        $26 = HEAP8[$25 >> 0] | 0;
        $27 = $7 & 255;
        $28 = (($27) + 1) | 0;
        $29 = $17 & 255;
        $30 = (($28) + ($29)) | 0;
        $31 = $30 >>> 1;
        $32 = $31 & 255;
        $33 = (($29) + 1) | 0;
        $34 = $20 & 255;
        $35 = (($33) + ($34)) | 0;
        $36 = $35 >>> 1;
        $37 = $36 & 255;
        $38 = (($34) + 1) | 0;
        $39 = $23 & 255;
        $40 = (($38) + ($39)) | 0;
        $41 = $40 >>> 1;
        $42 = $41 & 255;
        $43 = (($39) + 1) | 0;
        $44 = $26 & 255;
        $45 = (($43) + ($44)) | 0;
        $46 = $45 >>> 1;
        $47 = $46 & 255;
        $48 = $9 & 255;
        $49 = (($48) + 2) | 0;
        $50 = $27 << 1;
        $51 = (($49) + ($50)) | 0;
        $52 = (($51) + ($29)) | 0;
        $53 = $52 >>> 2;
        $54 = $53 & 255;
        $55 = (($27) + 2) | 0;
        $56 = $29 << 1;
        $57 = (($56) + ($55)) | 0;
        $58 = (($57) + ($34)) | 0;
        $59 = $58 >>> 2;
        $60 = $59 & 255;
        $61 = (($29) + 2) | 0;
        $62 = $34 << 1;
        $63 = (($61) + ($62)) | 0;
        $64 = (($63) + ($39)) | 0;
        $65 = $64 >>> 2;
        $66 = $65 & 255;
        $67 = (($34) + 2) | 0;
        $68 = $39 << 1;
        $69 = (($67) + ($68)) | 0;
        $70 = (($69) + ($44)) | 0;
        $71 = $70 >>> 2;
        $72 = $71 & 255;
        $73 = $48 << 1;
        $74 = (($73) + ($55)) | 0;
        $75 = $12 & 255;
        $76 = (($74) + ($75)) | 0;
        $77 = $76 >>> 2;
        $78 = $77 & 255;
        $79 = $75 << 1;
        $80 = (($79) + ($49)) | 0;
        $81 = $15 & 255;
        $82 = (($80) + ($81)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        HEAP8[$$sroa$0 >> 0] = $78;
        $$sroa$0$1$sroa_idx92 = ((($$sroa$0)) + 1 | 0);
        HEAP8[$$sroa$0$1$sroa_idx92 >> 0] = $32;
        $$sroa$0$2$sroa_idx = ((($$sroa$0)) + 2 | 0);
        HEAP8[$$sroa$0$2$sroa_idx >> 0] = $37;
        $$sroa$0$3$sroa_idx = ((($$sroa$0)) + 3 | 0);
        HEAP8[$$sroa$0$3$sroa_idx >> 0] = $42;
        $$sroa$0$4$sroa_idx = ((($$sroa$0)) + 4 | 0);
        HEAP8[$$sroa$0$4$sroa_idx >> 0] = $47;
        HEAP8[$$sroa$9 >> 0] = $84;
        $$sroa$9$1$sroa_idx86 = ((($$sroa$9)) + 1 | 0);
        HEAP8[$$sroa$9$1$sroa_idx86 >> 0] = $54;
        $$sroa$9$2$sroa_idx87 = ((($$sroa$9)) + 2 | 0);
        HEAP8[$$sroa$9$2$sroa_idx87 >> 0] = $60;
        $$sroa$9$3$sroa_idx88 = ((($$sroa$9)) + 3 | 0);
        HEAP8[$$sroa$9$3$sroa_idx88 >> 0] = $66;
        $$sroa$9$4$sroa_idx89 = ((($$sroa$9)) + 4 | 0);
        HEAP8[$$sroa$9$4$sroa_idx89 >> 0] = $72;
        $$sroa$0$1$$sroa$0$1$$sroa$0$1$ = HEAPU8[$$sroa$0$1$sroa_idx92 >> 0] | (HEAPU8[$$sroa$0$1$sroa_idx92 + 1 >> 0] << 8) | (HEAPU8[$$sroa$0$1$sroa_idx92 + 2 >> 0] << 16) | (HEAPU8[$$sroa$0$1$sroa_idx92 + 3 >> 0] << 24);
        HEAP32[$0 >> 2] = $$sroa$0$1$$sroa$0$1$$sroa$0$1$;
        $$sroa$9$1$$sroa$9$1$$sroa$9$6$ = HEAPU8[$$sroa$9$1$sroa_idx86 >> 0] | (HEAPU8[$$sroa$9$1$sroa_idx86 + 1 >> 0] << 8) | (HEAPU8[$$sroa$9$1$sroa_idx86 + 2 >> 0] << 16) | (HEAPU8[$$sroa$9$1$sroa_idx86 + 3 >> 0] << 24);
        $85 = (($0) + ($1) | 0);
        HEAP32[$85 >> 2] = $$sroa$9$1$$sroa$9$1$$sroa$9$6$;
        $$sroa$0$0$$sroa$0$0$$sroa$0$0$ = HEAP32[$$sroa$0 >> 2] | 0;
        $86 = (($0) + ($2) | 0);
        HEAP32[$86 >> 2] = $$sroa$0$0$$sroa$0$0$$sroa$0$0$;
        $$sroa$9$0$$sroa$9$0$$sroa$9$5$ = HEAP32[$$sroa$9 >> 2] | 0;
        $87 = (($0) + ($3) | 0);
        HEAP32[$87 >> 2] = $$sroa$9$0$$sroa$9$0$$sroa$9$5$;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI4x4LumaPredHU_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0$$0$ = 0, $$1$sroa_idx60 = 0, $$2$$2$ = 0, $$2$sroa_idx62 = 0, $$3$sroa_idx63 = 0, $$4$$4$ = 0, $$4$sroa_idx65 = 0, $$5$sroa_idx66 = 0, $$6$$6$ = 0, $$6$sroa_idx68 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
        var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
        var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $2 = sp;
        $3 = $1 << 1;
        $4 = ($1 * 3) | 0;
        $5 = ((($0)) + -1 | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = (($1) + -1) | 0;
        $8 = (($0) + ($7) | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = (($3) + -1) | 0;
        $11 = (($0) + ($10) | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = (($4) + -1) | 0;
        $14 = (($0) + ($13) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = $6 & 255;
        $17 = (($16) + 1) | 0;
        $18 = $9 & 255;
        $19 = (($17) + ($18)) | 0;
        $20 = (($18) + 1) | 0;
        $21 = $12 & 255;
        $22 = (($20) + ($21)) | 0;
        $23 = (($21) + 1) | 0;
        $24 = $15 & 255;
        $25 = (($23) + ($24)) | 0;
        $26 = $19 >>> 1;
        $27 = $26 & 255;
        $28 = (($22) + ($19)) | 0;
        $29 = $28 >>> 2;
        $30 = $29 & 255;
        $31 = $22 >>> 1;
        $32 = $31 & 255;
        $33 = (($25) + ($22)) | 0;
        $34 = $33 >>> 2;
        $35 = $34 & 255;
        $36 = $25 >>> 1;
        $37 = $36 & 255;
        $38 = (($25) + 1) | 0;
        $39 = $24 << 1;
        $40 = (($38) + ($39)) | 0;
        $41 = $40 >>> 2;
        $42 = $41 & 255;
        HEAP8[$2 >> 0] = $27;
        $$1$sroa_idx60 = ((($2)) + 1 | 0);
        HEAP8[$$1$sroa_idx60 >> 0] = $30;
        $$2$sroa_idx62 = ((($2)) + 2 | 0);
        HEAP8[$$2$sroa_idx62 >> 0] = $32;
        $$3$sroa_idx63 = ((($2)) + 3 | 0);
        HEAP8[$$3$sroa_idx63 >> 0] = $35;
        $$4$sroa_idx65 = ((($2)) + 4 | 0);
        HEAP8[$$4$sroa_idx65 >> 0] = $37;
        $$5$sroa_idx66 = ((($2)) + 5 | 0);
        HEAP8[$$5$sroa_idx66 >> 0] = $42;
        $$6$sroa_idx68 = ((($2)) + 6 | 0);
        _memset(($$6$sroa_idx68 | 0), ($15 | 0), 4) | 0;
        $$0$$0$ = HEAP32[$2 >> 2] | 0;
        HEAP32[$0 >> 2] = $$0$$0$;
        $$2$$2$ = HEAPU16[$$2$sroa_idx62 >> 1] | (HEAPU16[$$2$sroa_idx62 + 2 >> 1] << 16);
        $43 = (($0) + ($1) | 0);
        HEAP32[$43 >> 2] = $$2$$2$;
        $$4$$4$ = HEAP32[$$4$sroa_idx65 >> 2] | 0;
        $44 = (($0) + ($3) | 0);
        HEAP32[$44 >> 2] = $$4$$4$;
        $$6$$6$ = HEAPU16[$$6$sroa_idx68 >> 1] | (HEAPU16[$$6$sroa_idx68 + 2 >> 1] << 16);
        $45 = (($0) + ($4) | 0);
        HEAP32[$45 >> 2] = $$6$$6$;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI4x4LumaPredHD_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0$$0$ = 0, $$1$sroa_idx91 = 0, $$2$$2$ = 0, $$2$sroa_idx93 = 0, $$3$sroa_idx94 = 0, $$4$$4$ = 0, $$4$sroa_idx96 = 0, $$5$sroa_idx97 = 0, $$6$$6$ = 0, $$6$sroa_idx99 = 0, $$7$sroa_idx100 = 0, $$8$sroa_idx101 = 0, $$9$sroa_idx102 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
        var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
        var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
        var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
        var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $2 = sp;
        $3 = $1 << 1;
        $4 = ($1 * 3) | 0;
        $5 = $1 ^ -1;
        $6 = (($0) + ($5) | 0);
        $7 = HEAP8[$6 >> 0] | 0;
        $8 = ((($0)) + -1 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = (($1) + -1) | 0;
        $11 = (($0) + ($10) | 0);
        $12 = HEAP8[$11 >> 0] | 0;
        $13 = (($3) + -1) | 0;
        $14 = (($0) + ($13) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = (($4) + -1) | 0;
        $17 = (($0) + ($16) | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = (0 - ($1)) | 0;
        $20 = (($0) + ($19) | 0);
        $21 = HEAP8[$20 >> 0] | 0;
        $22 = (1 - ($1)) | 0;
        $23 = (($0) + ($22) | 0);
        $24 = HEAP8[$23 >> 0] | 0;
        $25 = (2 - ($1)) | 0;
        $26 = (($0) + ($25) | 0);
        $27 = HEAP8[$26 >> 0] | 0;
        $28 = $7 & 255;
        $29 = (($28) + 1) | 0;
        $30 = $9 & 255;
        $31 = (($29) + ($30)) | 0;
        $32 = $21 & 255;
        $33 = (($29) + ($32)) | 0;
        $34 = (($32) + 1) | 0;
        $35 = $24 & 255;
        $36 = (($34) + ($35)) | 0;
        $37 = (($35) + 1) | 0;
        $38 = $27 & 255;
        $39 = (($37) + ($38)) | 0;
        $40 = (($30) + 1) | 0;
        $41 = $12 & 255;
        $42 = (($40) + ($41)) | 0;
        $43 = (($41) + 1) | 0;
        $44 = $15 & 255;
        $45 = (($43) + ($44)) | 0;
        $46 = (($44) + 1) | 0;
        $47 = $18 & 255;
        $48 = (($46) + ($47)) | 0;
        $49 = $31 >>> 1;
        $50 = $49 & 255;
        $51 = (($33) + ($31)) | 0;
        $52 = $51 >>> 2;
        $53 = $52 & 255;
        $54 = (($36) + ($33)) | 0;
        $55 = $54 >>> 2;
        $56 = $55 & 255;
        $57 = (($39) + ($36)) | 0;
        $58 = $57 >>> 2;
        $59 = $58 & 255;
        $60 = $42 >>> 1;
        $61 = $60 & 255;
        $62 = (($42) + ($31)) | 0;
        $63 = $62 >>> 2;
        $64 = $63 & 255;
        $65 = $45 >>> 1;
        $66 = $65 & 255;
        $67 = (($45) + ($42)) | 0;
        $68 = $67 >>> 2;
        $69 = $68 & 255;
        $70 = $48 >>> 1;
        $71 = $70 & 255;
        $72 = (($48) + ($45)) | 0;
        $73 = $72 >>> 2;
        $74 = $73 & 255;
        HEAP8[$2 >> 0] = $71;
        $$1$sroa_idx91 = ((($2)) + 1 | 0);
        HEAP8[$$1$sroa_idx91 >> 0] = $74;
        $$2$sroa_idx93 = ((($2)) + 2 | 0);
        HEAP8[$$2$sroa_idx93 >> 0] = $66;
        $$3$sroa_idx94 = ((($2)) + 3 | 0);
        HEAP8[$$3$sroa_idx94 >> 0] = $69;
        $$4$sroa_idx96 = ((($2)) + 4 | 0);
        HEAP8[$$4$sroa_idx96 >> 0] = $61;
        $$5$sroa_idx97 = ((($2)) + 5 | 0);
        HEAP8[$$5$sroa_idx97 >> 0] = $64;
        $$6$sroa_idx99 = ((($2)) + 6 | 0);
        HEAP8[$$6$sroa_idx99 >> 0] = $50;
        $$7$sroa_idx100 = ((($2)) + 7 | 0);
        HEAP8[$$7$sroa_idx100 >> 0] = $53;
        $$8$sroa_idx101 = ((($2)) + 8 | 0);
        HEAP8[$$8$sroa_idx101 >> 0] = $56;
        $$9$sroa_idx102 = ((($2)) + 9 | 0);
        HEAP8[$$9$sroa_idx102 >> 0] = $59;
        $$6$$6$ = HEAPU16[$$6$sroa_idx99 >> 1] | (HEAPU16[$$6$sroa_idx99 + 2 >> 1] << 16);
        HEAP32[$0 >> 2] = $$6$$6$;
        $$4$$4$ = HEAP32[$$4$sroa_idx96 >> 2] | 0;
        $75 = (($0) + ($1) | 0);
        HEAP32[$75 >> 2] = $$4$$4$;
        $$2$$2$ = HEAPU16[$$2$sroa_idx93 >> 1] | (HEAPU16[$$2$sroa_idx93 + 2 >> 1] << 16);
        $76 = (($0) + ($3) | 0);
        HEAP32[$76 >> 2] = $$2$$2$;
        $$0$$0$ = HEAP32[$2 >> 2] | 0;
        $77 = (($0) + ($4) | 0);
        HEAP32[$77 >> 2] = $$0$$0$;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec19WelsI8x8LumaPredV_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$mask = 0, $$mask73 = 0, $$mask74 = 0, $$mask75 = 0, $$mask76 = 0, $$mask77 = 0, $$mask78 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink60$ph = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
        var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
        var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
        var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
        var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
        var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
        var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
        var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
        var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = (0 - ($1)) | 0;
        if ($2) {
            $5 = $1 ^ -1;
            $6 = (($0) + ($5) | 0);
            $7 = HEAP8[$6 >> 0] | 0;
            $8 = $7 & 255;
            $9 = (($0) + ($4) | 0);
            $10 = HEAP8[$9 >> 0] | 0;
            $11 = $10 & 255;
            $12 = $11 << 1;
            $13 = (($12) + ($8)) | 0;
            $$pre$phiZ2D = $5; $$sink60$ph = $13;
        } else {
            $14 = (($0) + ($4) | 0);
            $15 = HEAP8[$14 >> 0] | 0;
            $16 = $15 & 255;
            $17 = ($16 * 3) | 0;
            $$pre = $1 ^ -1;
            $$pre$phiZ2D = $$pre; $$sink60$ph = $17;
        }
        $18 = (1 - ($1)) | 0;
        $19 = (($0) + ($18) | 0);
        $20 = HEAP8[$19 >> 0] | 0;
        $21 = $20 & 255;
        $22 = (($$sink60$ph) + 2) | 0;
        $23 = (($22) + ($21)) | 0;
        $24 = $23 >>> 2;
        $25 = (($$pre$phiZ2D) + 1) | 0;
        $26 = (($0) + ($25) | 0);
        $27 = HEAP8[$26 >> 0] | 0;
        $28 = $27 & 255;
        $29 = $21 << 1;
        $30 = (($29) + ($28)) | 0;
        $31 = (2 - ($1)) | 0;
        $32 = (($0) + ($31) | 0);
        $33 = HEAP8[$32 >> 0] | 0;
        $34 = $33 & 255;
        $35 = (($30) + 2) | 0;
        $36 = (($35) + ($34)) | 0;
        $37 = $36 >>> 2;
        $38 = (($$pre$phiZ2D) + 2) | 0;
        $39 = (($0) + ($38) | 0);
        $40 = HEAP8[$39 >> 0] | 0;
        $41 = $40 & 255;
        $42 = $34 << 1;
        $43 = (($42) + ($41)) | 0;
        $44 = (3 - ($1)) | 0;
        $45 = (($0) + ($44) | 0);
        $46 = HEAP8[$45 >> 0] | 0;
        $47 = $46 & 255;
        $48 = (($43) + 2) | 0;
        $49 = (($48) + ($47)) | 0;
        $50 = $49 >>> 2;
        $51 = (($$pre$phiZ2D) + 3) | 0;
        $52 = (($0) + ($51) | 0);
        $53 = HEAP8[$52 >> 0] | 0;
        $54 = $53 & 255;
        $55 = $47 << 1;
        $56 = (($55) + ($54)) | 0;
        $57 = (4 - ($1)) | 0;
        $58 = (($0) + ($57) | 0);
        $59 = HEAP8[$58 >> 0] | 0;
        $60 = $59 & 255;
        $61 = (($56) + 2) | 0;
        $62 = (($61) + ($60)) | 0;
        $63 = $62 >>> 2;
        $64 = (($$pre$phiZ2D) + 4) | 0;
        $65 = (($0) + ($64) | 0);
        $66 = HEAP8[$65 >> 0] | 0;
        $67 = $66 & 255;
        $68 = $60 << 1;
        $69 = (($68) + ($67)) | 0;
        $70 = (5 - ($1)) | 0;
        $71 = (($0) + ($70) | 0);
        $72 = HEAP8[$71 >> 0] | 0;
        $73 = $72 & 255;
        $74 = (($69) + 2) | 0;
        $75 = (($74) + ($73)) | 0;
        $76 = $75 >>> 2;
        $77 = (($$pre$phiZ2D) + 5) | 0;
        $78 = (($0) + ($77) | 0);
        $79 = HEAP8[$78 >> 0] | 0;
        $80 = $79 & 255;
        $81 = $73 << 1;
        $82 = (($81) + ($80)) | 0;
        $83 = (6 - ($1)) | 0;
        $84 = (($0) + ($83) | 0);
        $85 = HEAP8[$84 >> 0] | 0;
        $86 = $85 & 255;
        $87 = (($82) + 2) | 0;
        $88 = (($87) + ($86)) | 0;
        $89 = $88 >>> 2;
        $90 = (($$pre$phiZ2D) + 6) | 0;
        $91 = (($0) + ($90) | 0);
        $92 = HEAP8[$91 >> 0] | 0;
        $93 = $92 & 255;
        $94 = $86 << 1;
        $95 = (($94) + ($93)) | 0;
        $96 = (7 - ($1)) | 0;
        $97 = (($0) + ($96) | 0);
        $98 = HEAP8[$97 >> 0] | 0;
        $99 = $98 & 255;
        $100 = (($95) + 2) | 0;
        $101 = (($100) + ($99)) | 0;
        $102 = $101 >>> 2;
        if ($3) {
            $103 = $99 << 1;
            $104 = (($103) + ($86)) | 0;
            $105 = (8 - ($1)) | 0;
            $106 = (($0) + ($105) | 0);
            $107 = HEAP8[$106 >> 0] | 0;
            $108 = $107 & 255;
            $109 = (($104) + ($108)) | 0;
            $$sink9 = $109;
        } else {
            $110 = ($99 * 3) | 0;
            $111 = (($110) + ($86)) | 0;
            $$sink9 = $111;
        }
        $112 = $$sink9 << 6;
        $113 = (($112) + 128) | 0;
        $114 = $113 & 65280;
        $$mask = $102 & 255;
        $115 = $114 | $$mask;
        $116 = $115 << 8;
        $$mask73 = $89 & 255;
        $117 = $116 | $$mask73;
        $118 = $117 << 8;
        $$mask74 = $76 & 255;
        $119 = $118 | $$mask74;
        $120 = (_bitshift64Shl(($119 | 0), 0, 8) | 0);
        $121 = tempRet0;
        $$mask75 = $63 & 255;
        $122 = $120 | $$mask75;
        $123 = (_bitshift64Shl(($122 | 0), ($121 | 0), 8) | 0);
        $124 = tempRet0;
        $$mask76 = $50 & 255;
        $125 = $123 | $$mask76;
        $126 = (_bitshift64Shl(($125 | 0), ($124 | 0), 8) | 0);
        $127 = tempRet0;
        $$mask77 = $37 & 255;
        $128 = $126 | $$mask77;
        $129 = (_bitshift64Shl(($128 | 0), ($127 | 0), 8) | 0);
        $130 = tempRet0;
        $$mask78 = $24 & 255;
        $131 = $129 | $$mask78;
        $132 = $0;
        $133 = $132;
        HEAP32[$133 >> 2] = $131;
        $134 = (($132) + 4) | 0;
        $135 = $134;
        HEAP32[$135 >> 2] = $130;
        $136 = (($0) + ($1) | 0);
        $137 = $136;
        $138 = $137;
        HEAP32[$138 >> 2] = $131;
        $139 = (($137) + 4) | 0;
        $140 = $139;
        HEAP32[$140 >> 2] = $130;
        $141 = $1 << 1;
        $142 = (($0) + ($141) | 0);
        $143 = $142;
        $144 = $143;
        HEAP32[$144 >> 2] = $131;
        $145 = (($143) + 4) | 0;
        $146 = $145;
        HEAP32[$146 >> 2] = $130;
        $147 = ($1 * 3) | 0;
        $148 = (($0) + ($147) | 0);
        $149 = $148;
        $150 = $149;
        HEAP32[$150 >> 2] = $131;
        $151 = (($149) + 4) | 0;
        $152 = $151;
        HEAP32[$152 >> 2] = $130;
        $153 = $1 << 2;
        $154 = (($0) + ($153) | 0);
        $155 = $154;
        $156 = $155;
        HEAP32[$156 >> 2] = $131;
        $157 = (($155) + 4) | 0;
        $158 = $157;
        HEAP32[$158 >> 2] = $130;
        $159 = ($1 * 5) | 0;
        $160 = (($0) + ($159) | 0);
        $161 = $160;
        $162 = $161;
        HEAP32[$162 >> 2] = $131;
        $163 = (($161) + 4) | 0;
        $164 = $163;
        HEAP32[$164 >> 2] = $130;
        $165 = ($1 * 6) | 0;
        $166 = (($0) + ($165) | 0);
        $167 = $166;
        $168 = $167;
        HEAP32[$168 >> 2] = $131;
        $169 = (($167) + 4) | 0;
        $170 = $169;
        HEAP32[$170 >> 2] = $130;
        $171 = ($1 * 7) | 0;
        $172 = (($0) + ($171) | 0);
        $173 = $172;
        $174 = $173;
        HEAP32[$174 >> 2] = $131;
        $175 = (($173) + 4) | 0;
        $176 = $175;
        HEAP32[$176 >> 2] = $130;
        return;
    }
    function __ZN7WelsDec19WelsI8x8LumaPredH_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$mask = 0, $$mask53 = 0, $$mask54 = 0, $$mask55 = 0, $$mask56 = 0, $$mask57 = 0, $$mask58 = 0, $$mask59 = 0, $$sink42$ph = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
        var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
        var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
        var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
        var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
        var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
        var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
        var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $4 = sp;
        HEAP32[$4 >> 2] = 0;
        $5 = ((($4)) + 4 | 0);
        HEAP32[$5 >> 2] = $1;
        $6 = $1 << 1;
        $7 = ((($4)) + 8 | 0);
        HEAP32[$7 >> 2] = $6;
        $8 = ($1 * 3) | 0;
        $9 = ((($4)) + 12 | 0);
        HEAP32[$9 >> 2] = $8;
        $10 = $1 << 2;
        $11 = ((($4)) + 16 | 0);
        HEAP32[$11 >> 2] = $10;
        $12 = ($1 * 5) | 0;
        $13 = ((($4)) + 20 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = ($1 * 6) | 0;
        $15 = ((($4)) + 24 | 0);
        HEAP32[$15 >> 2] = $14;
        $16 = ($1 * 7) | 0;
        $17 = ((($4)) + 28 | 0);
        HEAP32[$17 >> 2] = $16;
        if ($2) {
            $18 = $1 ^ -1;
            $19 = (($0) + ($18) | 0);
            $20 = HEAP8[$19 >> 0] | 0;
            $21 = $20 & 255;
            $22 = ((($0)) + -1 | 0);
            $23 = HEAP8[$22 >> 0] | 0;
            $24 = $23 & 255;
            $25 = $24 << 1;
            $26 = (($25) + ($21)) | 0;
            $$sink42$ph = $26; $39 = $23;
        } else {
            $27 = ((($0)) + -1 | 0);
            $28 = HEAP8[$27 >> 0] | 0;
            $29 = $28 & 255;
            $30 = ($29 * 3) | 0;
            $$sink42$ph = $30; $39 = $28;
        }
        $31 = (($1) + -1) | 0;
        $32 = (($0) + ($31) | 0);
        $33 = HEAP8[$32 >> 0] | 0;
        $34 = $33 & 255;
        $35 = (($$sink42$ph) + 2) | 0;
        $36 = (($35) + ($34)) | 0;
        $37 = $36 >>> 2;
        $38 = $39 & 255;
        $40 = $34 << 1;
        $41 = (($40) + ($38)) | 0;
        $42 = (($6) + -1) | 0;
        $43 = (($0) + ($42) | 0);
        $44 = HEAP8[$43 >> 0] | 0;
        $45 = $44 & 255;
        $46 = (($41) + 2) | 0;
        $47 = (($46) + ($45)) | 0;
        $48 = $47 >>> 2;
        $49 = $45 << 1;
        $50 = (($49) + ($34)) | 0;
        $51 = (($8) + -1) | 0;
        $52 = (($0) + ($51) | 0);
        $53 = HEAP8[$52 >> 0] | 0;
        $54 = $53 & 255;
        $55 = (($50) + 2) | 0;
        $56 = (($55) + ($54)) | 0;
        $57 = $56 >>> 2;
        $58 = $54 << 1;
        $59 = (($58) + ($45)) | 0;
        $60 = (($10) + -1) | 0;
        $61 = (($0) + ($60) | 0);
        $62 = HEAP8[$61 >> 0] | 0;
        $63 = $62 & 255;
        $64 = (($59) + 2) | 0;
        $65 = (($64) + ($63)) | 0;
        $66 = $65 >>> 2;
        $67 = $63 << 1;
        $68 = (($67) + ($54)) | 0;
        $69 = (($12) + -1) | 0;
        $70 = (($0) + ($69) | 0);
        $71 = HEAP8[$70 >> 0] | 0;
        $72 = $71 & 255;
        $73 = (($68) + 2) | 0;
        $74 = (($73) + ($72)) | 0;
        $75 = $74 >>> 2;
        $76 = $72 << 1;
        $77 = (($76) + ($63)) | 0;
        $78 = (($14) + -1) | 0;
        $79 = (($0) + ($78) | 0);
        $80 = HEAP8[$79 >> 0] | 0;
        $81 = $80 & 255;
        $82 = (($77) + 2) | 0;
        $83 = (($82) + ($81)) | 0;
        $84 = $83 >>> 2;
        $85 = $81 << 1;
        $86 = (($85) + ($72)) | 0;
        $87 = (($16) + -1) | 0;
        $88 = (($0) + ($87) | 0);
        $89 = HEAP8[$88 >> 0] | 0;
        $90 = $89 & 255;
        $91 = (($86) + 2) | 0;
        $92 = (($91) + ($90)) | 0;
        $93 = $92 >>> 2;
        $94 = ($90 * 3) | 0;
        $95 = (($81) + 2) | 0;
        $96 = (($95) + ($94)) | 0;
        $97 = $96 >>> 2;
        $$mask = $37 & 255;
        $98 = (___muldi3(($$mask | 0), 0, 16843009, 16843009) | 0);
        $99 = tempRet0;
        $100 = $0;
        $101 = $100;
        HEAP32[$101 >> 2] = $98;
        $102 = (($100) + 4) | 0;
        $103 = $102;
        HEAP32[$103 >> 2] = $99;
        $$mask53 = $48 & 255;
        $104 = (___muldi3(($$mask53 | 0), 0, 16843009, 16843009) | 0);
        $105 = tempRet0;
        $106 = (($0) + ($1) | 0);
        $107 = $106;
        $108 = $107;
        HEAP32[$108 >> 2] = $104;
        $109 = (($107) + 4) | 0;
        $110 = $109;
        HEAP32[$110 >> 2] = $105;
        $$mask54 = $57 & 255;
        $111 = (___muldi3(($$mask54 | 0), 0, 16843009, 16843009) | 0);
        $112 = tempRet0;
        $113 = HEAP32[$7 >> 2] | 0;
        $114 = (($0) + ($113) | 0);
        $115 = $114;
        $116 = $115;
        HEAP32[$116 >> 2] = $111;
        $117 = (($115) + 4) | 0;
        $118 = $117;
        HEAP32[$118 >> 2] = $112;
        $$mask55 = $66 & 255;
        $119 = (___muldi3(($$mask55 | 0), 0, 16843009, 16843009) | 0);
        $120 = tempRet0;
        $121 = HEAP32[$9 >> 2] | 0;
        $122 = (($0) + ($121) | 0);
        $123 = $122;
        $124 = $123;
        HEAP32[$124 >> 2] = $119;
        $125 = (($123) + 4) | 0;
        $126 = $125;
        HEAP32[$126 >> 2] = $120;
        $$mask56 = $75 & 255;
        $127 = (___muldi3(($$mask56 | 0), 0, 16843009, 16843009) | 0);
        $128 = tempRet0;
        $129 = HEAP32[$11 >> 2] | 0;
        $130 = (($0) + ($129) | 0);
        $131 = $130;
        $132 = $131;
        HEAP32[$132 >> 2] = $127;
        $133 = (($131) + 4) | 0;
        $134 = $133;
        HEAP32[$134 >> 2] = $128;
        $$mask57 = $84 & 255;
        $135 = (___muldi3(($$mask57 | 0), 0, 16843009, 16843009) | 0);
        $136 = tempRet0;
        $137 = HEAP32[$13 >> 2] | 0;
        $138 = (($0) + ($137) | 0);
        $139 = $138;
        $140 = $139;
        HEAP32[$140 >> 2] = $135;
        $141 = (($139) + 4) | 0;
        $142 = $141;
        HEAP32[$142 >> 2] = $136;
        $$mask58 = $93 & 255;
        $143 = (___muldi3(($$mask58 | 0), 0, 16843009, 16843009) | 0);
        $144 = tempRet0;
        $145 = HEAP32[$15 >> 2] | 0;
        $146 = (($0) + ($145) | 0);
        $147 = $146;
        $148 = $147;
        HEAP32[$148 >> 2] = $143;
        $149 = (($147) + 4) | 0;
        $150 = $149;
        HEAP32[$150 >> 2] = $144;
        $$mask59 = $97 & 255;
        $151 = (___muldi3(($$mask59 | 0), 0, 16843009, 16843009) | 0);
        $152 = tempRet0;
        $153 = HEAP32[$17 >> 2] | 0;
        $154 = (($0) + ($153) | 0);
        $155 = $154;
        $156 = $155;
        HEAP32[$156 >> 2] = $151;
        $157 = (($155) + 4) | 0;
        $158 = $157;
        HEAP32[$158 >> 2] = $152;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI8x8LumaPredDc_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$mask = 0, $$sink = 0, $$sink19 = 0, $$sink89$ph = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
        var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
        var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
        var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
        var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
        var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
        var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
        var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
        var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
        var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
        var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
        var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
        var $314 = 0, $315 = 0, $316 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 40 | 0;
        $6 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $7 = ((($4)) + 4 | 0);
        HEAP32[$7 >> 2] = $1;
        $8 = $1 << 1;
        $9 = ((($4)) + 8 | 0);
        HEAP32[$9 >> 2] = $8;
        $10 = ($1 * 3) | 0;
        $11 = ((($4)) + 12 | 0);
        HEAP32[$11 >> 2] = $10;
        $12 = $1 << 2;
        $13 = ((($4)) + 16 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = ($1 * 5) | 0;
        $15 = ((($4)) + 20 | 0);
        HEAP32[$15 >> 2] = $14;
        $16 = ($1 * 6) | 0;
        $17 = ((($4)) + 24 | 0);
        HEAP32[$17 >> 2] = $16;
        $18 = ($1 * 7) | 0;
        $19 = ((($4)) + 28 | 0);
        HEAP32[$19 >> 2] = $18;
        if ($2) {
            $20 = $1 ^ -1;
            $21 = (($0) + ($20) | 0);
            $22 = HEAP8[$21 >> 0] | 0;
            $23 = $22 & 255;
            $24 = ((($0)) + -1 | 0);
            $25 = HEAP8[$24 >> 0] | 0;
            $26 = $25 & 255;
            $27 = $26 << 1;
            $28 = (($27) + ($23)) | 0;
            $$sink = $28; $65 = $25;
        } else {
            $29 = ((($0)) + -1 | 0);
            $30 = HEAP8[$29 >> 0] | 0;
            $31 = $30 & 255;
            $32 = ($31 * 3) | 0;
            $$sink = $32; $65 = $30;
        }
        $33 = (($1) + -1) | 0;
        $34 = (($0) + ($33) | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = (($$sink) + 2) | 0;
        $38 = (($37) + ($36)) | 0;
        $39 = $38 >>> 2;
        $40 = $39 & 255;
        HEAP8[$5 >> 0] = $40;
        if ($2) {
            $41 = $1 ^ -1;
            $42 = (($0) + ($41) | 0);
            $43 = HEAP8[$42 >> 0] | 0;
            $44 = $43 & 255;
            $45 = (0 - ($1)) | 0;
            $46 = (($0) + ($45) | 0);
            $47 = HEAP8[$46 >> 0] | 0;
            $48 = $47 & 255;
            $49 = $48 << 1;
            $50 = (($49) + ($44)) | 0;
            $$sink89$ph = $50; $78 = $47;
        } else {
            $51 = (0 - ($1)) | 0;
            $52 = (($0) + ($51) | 0);
            $53 = HEAP8[$52 >> 0] | 0;
            $54 = $53 & 255;
            $55 = ($54 * 3) | 0;
            $$sink89$ph = $55; $78 = $53;
        }
        $56 = (1 - ($1)) | 0;
        $57 = (($0) + ($56) | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = $58 & 255;
        $60 = (($$sink89$ph) + 2) | 0;
        $61 = (($60) + ($59)) | 0;
        $62 = $61 >>> 2;
        $63 = $62 & 255;
        HEAP8[$6 >> 0] = $63;
        $64 = $65 & 255;
        $66 = $36 << 1;
        $67 = (($8) + -1) | 0;
        $68 = (($0) + ($67) | 0);
        $69 = HEAP8[$68 >> 0] | 0;
        $70 = $69 & 255;
        $71 = (($64) + 2) | 0;
        $72 = (($71) + ($66)) | 0;
        $73 = (($72) + ($70)) | 0;
        $74 = $73 >>> 2;
        $75 = $74 & 255;
        $76 = ((($5)) + 1 | 0);
        HEAP8[$76 >> 0] = $75;
        $77 = $78 & 255;
        $79 = $59 << 1;
        $80 = (($79) + ($77)) | 0;
        $81 = (2 - ($1)) | 0;
        $82 = (($0) + ($81) | 0);
        $83 = HEAP8[$82 >> 0] | 0;
        $84 = $83 & 255;
        $85 = (($80) + 2) | 0;
        $86 = (($85) + ($84)) | 0;
        $87 = $86 >>> 2;
        $88 = $87 & 255;
        $89 = ((($6)) + 1 | 0);
        HEAP8[$89 >> 0] = $88;
        $90 = $70 << 1;
        $91 = (($10) + -1) | 0;
        $92 = (($0) + ($91) | 0);
        $93 = HEAP8[$92 >> 0] | 0;
        $94 = $93 & 255;
        $95 = (($36) + 2) | 0;
        $96 = (($95) + ($90)) | 0;
        $97 = (($96) + ($94)) | 0;
        $98 = $97 >>> 2;
        $99 = $98 & 255;
        $100 = ((($5)) + 2 | 0);
        HEAP8[$100 >> 0] = $99;
        $101 = $84 << 1;
        $102 = (($101) + ($59)) | 0;
        $103 = (3 - ($1)) | 0;
        $104 = (($0) + ($103) | 0);
        $105 = HEAP8[$104 >> 0] | 0;
        $106 = $105 & 255;
        $107 = (($102) + 2) | 0;
        $108 = (($107) + ($106)) | 0;
        $109 = $108 >>> 2;
        $110 = $109 & 255;
        $111 = ((($6)) + 2 | 0);
        HEAP8[$111 >> 0] = $110;
        $112 = $94 << 1;
        $113 = (($12) + -1) | 0;
        $114 = (($0) + ($113) | 0);
        $115 = HEAP8[$114 >> 0] | 0;
        $116 = $115 & 255;
        $117 = (($70) + 2) | 0;
        $118 = (($117) + ($112)) | 0;
        $119 = (($118) + ($116)) | 0;
        $120 = $119 >>> 2;
        $121 = $120 & 255;
        $122 = ((($5)) + 3 | 0);
        HEAP8[$122 >> 0] = $121;
        $123 = $106 << 1;
        $124 = (($123) + ($84)) | 0;
        $125 = (4 - ($1)) | 0;
        $126 = (($0) + ($125) | 0);
        $127 = HEAP8[$126 >> 0] | 0;
        $128 = $127 & 255;
        $129 = (($124) + 2) | 0;
        $130 = (($129) + ($128)) | 0;
        $131 = $130 >>> 2;
        $132 = $131 & 255;
        $133 = ((($6)) + 3 | 0);
        HEAP8[$133 >> 0] = $132;
        $134 = $116 << 1;
        $135 = (($14) + -1) | 0;
        $136 = (($0) + ($135) | 0);
        $137 = HEAP8[$136 >> 0] | 0;
        $138 = $137 & 255;
        $139 = (($94) + 2) | 0;
        $140 = (($139) + ($134)) | 0;
        $141 = (($140) + ($138)) | 0;
        $142 = $141 >>> 2;
        $143 = $142 & 255;
        $144 = ((($5)) + 4 | 0);
        HEAP8[$144 >> 0] = $143;
        $145 = $128 << 1;
        $146 = (($145) + ($106)) | 0;
        $147 = (5 - ($1)) | 0;
        $148 = (($0) + ($147) | 0);
        $149 = HEAP8[$148 >> 0] | 0;
        $150 = $149 & 255;
        $151 = (($146) + 2) | 0;
        $152 = (($151) + ($150)) | 0;
        $153 = $152 >>> 2;
        $154 = $153 & 255;
        $155 = ((($6)) + 4 | 0);
        HEAP8[$155 >> 0] = $154;
        $156 = HEAP32[$13 >> 2] | 0;
        $157 = (($156) + -1) | 0;
        $158 = (($0) + ($157) | 0);
        $159 = HEAP8[$158 >> 0] | 0;
        $160 = $159 & 255;
        $161 = HEAP32[$15 >> 2] | 0;
        $162 = (($161) + -1) | 0;
        $163 = (($0) + ($162) | 0);
        $164 = HEAP8[$163 >> 0] | 0;
        $165 = $164 & 255;
        $166 = $165 << 1;
        $167 = HEAP32[$17 >> 2] | 0;
        $168 = (($167) + -1) | 0;
        $169 = (($0) + ($168) | 0);
        $170 = HEAP8[$169 >> 0] | 0;
        $171 = $170 & 255;
        $172 = (($160) + 2) | 0;
        $173 = (($172) + ($166)) | 0;
        $174 = (($173) + ($171)) | 0;
        $175 = $174 >>> 2;
        $176 = $175 & 255;
        $177 = ((($5)) + 5 | 0);
        HEAP8[$177 >> 0] = $176;
        $178 = $150 << 1;
        $179 = (($178) + ($128)) | 0;
        $180 = (6 - ($1)) | 0;
        $181 = (($0) + ($180) | 0);
        $182 = HEAP8[$181 >> 0] | 0;
        $183 = $182 & 255;
        $184 = (($179) + 2) | 0;
        $185 = (($184) + ($183)) | 0;
        $186 = $185 >>> 2;
        $187 = $186 & 255;
        $188 = ((($6)) + 5 | 0);
        HEAP8[$188 >> 0] = $187;
        $189 = $171 << 1;
        $190 = HEAP32[$19 >> 2] | 0;
        $191 = (($190) + -1) | 0;
        $192 = (($0) + ($191) | 0);
        $193 = HEAP8[$192 >> 0] | 0;
        $194 = $193 & 255;
        $195 = (($165) + 2) | 0;
        $196 = (($195) + ($189)) | 0;
        $197 = (($196) + ($194)) | 0;
        $198 = $197 >>> 2;
        $199 = $198 & 255;
        $200 = ((($5)) + 6 | 0);
        HEAP8[$200 >> 0] = $199;
        $201 = $183 << 1;
        $202 = (($201) + ($150)) | 0;
        $203 = (7 - ($1)) | 0;
        $204 = (($0) + ($203) | 0);
        $205 = HEAP8[$204 >> 0] | 0;
        $206 = $205 & 255;
        $207 = (($202) + 2) | 0;
        $208 = (($207) + ($206)) | 0;
        $209 = $208 >>> 2;
        $210 = $209 & 255;
        $211 = ((($6)) + 6 | 0);
        HEAP8[$211 >> 0] = $210;
        $212 = ($194 * 3) | 0;
        $213 = (($171) + 2) | 0;
        $214 = (($213) + ($212)) | 0;
        $215 = $214 >>> 2;
        $216 = $215 & 255;
        $217 = ((($5)) + 7 | 0);
        HEAP8[$217 >> 0] = $216;
        if ($3) {
            $218 = $206 << 1;
            $219 = (($218) + ($183)) | 0;
            $220 = (8 - ($1)) | 0;
            $221 = (($0) + ($220) | 0);
            $222 = HEAP8[$221 >> 0] | 0;
            $223 = $222 & 255;
            $224 = (($219) + ($223)) | 0;
            $$sink19 = $224;
        } else {
            $225 = ($206 * 3) | 0;
            $226 = (($225) + ($183)) | 0;
            $$sink19 = $226;
        }
        $227 = (($$sink19) + 2) | 0;
        $228 = $227 >>> 2;
        $229 = $228 & 255;
        $230 = ((($6)) + 7 | 0);
        HEAP8[$230 >> 0] = $229;
        $231 = HEAP8[$5 >> 0] | 0;
        $232 = $231 & 255;
        $233 = HEAP8[$6 >> 0] | 0;
        $234 = $233 & 255;
        $235 = (($232) + ($234)) | 0;
        $236 = HEAP8[$76 >> 0] | 0;
        $237 = $236 & 255;
        $238 = (($235) + ($237)) | 0;
        $239 = HEAP8[$89 >> 0] | 0;
        $240 = $239 & 255;
        $241 = (($238) + ($240)) | 0;
        $242 = HEAP8[$100 >> 0] | 0;
        $243 = $242 & 255;
        $244 = (($241) + ($243)) | 0;
        $245 = HEAP8[$111 >> 0] | 0;
        $246 = $245 & 255;
        $247 = (($244) + ($246)) | 0;
        $248 = HEAP8[$122 >> 0] | 0;
        $249 = $248 & 255;
        $250 = (($247) + ($249)) | 0;
        $251 = $131 & 255;
        $252 = (($250) + ($251)) | 0;
        $253 = $142 & 255;
        $254 = (($252) + ($253)) | 0;
        $255 = $153 & 255;
        $256 = (($254) + ($255)) | 0;
        $257 = $175 & 255;
        $258 = (($256) + ($257)) | 0;
        $259 = $186 & 255;
        $260 = (($258) + ($259)) | 0;
        $261 = $198 & 255;
        $262 = (($260) + ($261)) | 0;
        $263 = $209 & 255;
        $264 = (($262) + ($263)) | 0;
        $265 = $215 & 255;
        $266 = (($264) + ($265)) | 0;
        $267 = $228 & 255;
        $268 = (($266) + ($267)) | 0;
        $269 = (($268) + 8) | 0;
        $270 = $269 >>> 4;
        $$mask = $270 & 255;
        $271 = (___muldi3(($$mask | 0), 0, 16843009, 16843009) | 0);
        $272 = tempRet0;
        $273 = HEAP32[$4 >> 2] | 0;
        $274 = (($0) + ($273) | 0);
        $275 = $274;
        $276 = $275;
        HEAP32[$276 >> 2] = $271;
        $277 = (($275) + 4) | 0;
        $278 = $277;
        HEAP32[$278 >> 2] = $272;
        $279 = HEAP32[$7 >> 2] | 0;
        $280 = (($0) + ($279) | 0);
        $281 = $280;
        $282 = $281;
        HEAP32[$282 >> 2] = $271;
        $283 = (($281) + 4) | 0;
        $284 = $283;
        HEAP32[$284 >> 2] = $272;
        $285 = HEAP32[$9 >> 2] | 0;
        $286 = (($0) + ($285) | 0);
        $287 = $286;
        $288 = $287;
        HEAP32[$288 >> 2] = $271;
        $289 = (($287) + 4) | 0;
        $290 = $289;
        HEAP32[$290 >> 2] = $272;
        $291 = HEAP32[$11 >> 2] | 0;
        $292 = (($0) + ($291) | 0);
        $293 = $292;
        $294 = $293;
        HEAP32[$294 >> 2] = $271;
        $295 = (($293) + 4) | 0;
        $296 = $295;
        HEAP32[$296 >> 2] = $272;
        $297 = (($0) + ($156) | 0);
        $298 = $297;
        $299 = $298;
        HEAP32[$299 >> 2] = $271;
        $300 = (($298) + 4) | 0;
        $301 = $300;
        HEAP32[$301 >> 2] = $272;
        $302 = (($0) + ($161) | 0);
        $303 = $302;
        $304 = $303;
        HEAP32[$304 >> 2] = $271;
        $305 = (($303) + 4) | 0;
        $306 = $305;
        HEAP32[$306 >> 2] = $272;
        $307 = (($0) + ($167) | 0);
        $308 = $307;
        $309 = $308;
        HEAP32[$309 >> 2] = $271;
        $310 = (($308) + 4) | 0;
        $311 = $310;
        HEAP32[$311 >> 2] = $272;
        $312 = (($0) + ($190) | 0);
        $313 = $312;
        $314 = $313;
        HEAP32[$314 >> 2] = $271;
        $315 = (($313) + 4) | 0;
        $316 = $315;
        HEAP32[$316 >> 2] = $272;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec24WelsI8x8LumaPredDcLeft_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$mask = 0, $$sink50$ph = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
        var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
        var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
        var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $4 = sp;
        HEAP32[$4 >> 2] = 0;
        $5 = ((($4)) + 4 | 0);
        HEAP32[$5 >> 2] = $1;
        $6 = $1 << 1;
        $7 = ((($4)) + 8 | 0);
        HEAP32[$7 >> 2] = $6;
        $8 = ($1 * 3) | 0;
        $9 = ((($4)) + 12 | 0);
        HEAP32[$9 >> 2] = $8;
        $10 = $1 << 2;
        $11 = ((($4)) + 16 | 0);
        HEAP32[$11 >> 2] = $10;
        $12 = ($1 * 5) | 0;
        $13 = ((($4)) + 20 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = ($1 * 6) | 0;
        $15 = ((($4)) + 24 | 0);
        HEAP32[$15 >> 2] = $14;
        $16 = ($1 * 7) | 0;
        $17 = ((($4)) + 28 | 0);
        HEAP32[$17 >> 2] = $16;
        if ($2) {
            $18 = $1 ^ -1;
            $19 = (($0) + ($18) | 0);
            $20 = HEAP8[$19 >> 0] | 0;
            $21 = $20 & 255;
            $22 = ((($0)) + -1 | 0);
            $23 = HEAP8[$22 >> 0] | 0;
            $24 = $23 & 255;
            $25 = $24 << 1;
            $26 = (($25) + ($21)) | 0;
            $$sink50$ph = $26; $39 = $23;
        } else {
            $27 = ((($0)) + -1 | 0);
            $28 = HEAP8[$27 >> 0] | 0;
            $29 = $28 & 255;
            $30 = ($29 * 3) | 0;
            $$sink50$ph = $30; $39 = $28;
        }
        $31 = (($1) + -1) | 0;
        $32 = (($0) + ($31) | 0);
        $33 = HEAP8[$32 >> 0] | 0;
        $34 = $33 & 255;
        $35 = (($$sink50$ph) + 2) | 0;
        $36 = (($35) + ($34)) | 0;
        $37 = $36 >>> 2;
        $38 = $39 & 255;
        $40 = $34 << 1;
        $41 = (($40) + ($38)) | 0;
        $42 = (($6) + -1) | 0;
        $43 = (($0) + ($42) | 0);
        $44 = HEAP8[$43 >> 0] | 0;
        $45 = $44 & 255;
        $46 = (($41) + 2) | 0;
        $47 = (($46) + ($45)) | 0;
        $48 = $47 >>> 2;
        $49 = $45 << 1;
        $50 = (($49) + ($34)) | 0;
        $51 = (($8) + -1) | 0;
        $52 = (($0) + ($51) | 0);
        $53 = HEAP8[$52 >> 0] | 0;
        $54 = $53 & 255;
        $55 = (($50) + 2) | 0;
        $56 = (($55) + ($54)) | 0;
        $57 = $56 >>> 2;
        $58 = $54 << 1;
        $59 = (($58) + ($45)) | 0;
        $60 = (($10) + -1) | 0;
        $61 = (($0) + ($60) | 0);
        $62 = HEAP8[$61 >> 0] | 0;
        $63 = $62 & 255;
        $64 = (($59) + 2) | 0;
        $65 = (($64) + ($63)) | 0;
        $66 = $65 >>> 2;
        $67 = $63 << 1;
        $68 = (($67) + ($54)) | 0;
        $69 = (($12) + -1) | 0;
        $70 = (($0) + ($69) | 0);
        $71 = HEAP8[$70 >> 0] | 0;
        $72 = $71 & 255;
        $73 = (($68) + 2) | 0;
        $74 = (($73) + ($72)) | 0;
        $75 = $74 >>> 2;
        $76 = $72 << 1;
        $77 = (($76) + ($63)) | 0;
        $78 = (($14) + -1) | 0;
        $79 = (($0) + ($78) | 0);
        $80 = HEAP8[$79 >> 0] | 0;
        $81 = $80 & 255;
        $82 = (($77) + 2) | 0;
        $83 = (($82) + ($81)) | 0;
        $84 = $83 >>> 2;
        $85 = $81 << 1;
        $86 = (($85) + ($72)) | 0;
        $87 = (($16) + -1) | 0;
        $88 = (($0) + ($87) | 0);
        $89 = HEAP8[$88 >> 0] | 0;
        $90 = $89 & 255;
        $91 = (($86) + 2) | 0;
        $92 = (($91) + ($90)) | 0;
        $93 = $92 >>> 2;
        $94 = ($90 * 3) | 0;
        $95 = (($81) + 2) | 0;
        $96 = (($95) + ($94)) | 0;
        $97 = $96 >>> 2;
        $98 = $48 & 255;
        $99 = $37 & 255;
        $100 = (($99) + ($98)) | 0;
        $101 = $57 & 255;
        $102 = (($100) + ($101)) | 0;
        $103 = $66 & 255;
        $104 = (($102) + ($103)) | 0;
        $105 = $75 & 255;
        $106 = (($104) + ($105)) | 0;
        $107 = $84 & 255;
        $108 = (($106) + ($107)) | 0;
        $109 = $93 & 255;
        $110 = (($108) + ($109)) | 0;
        $111 = $97 & 255;
        $112 = (($110) + ($111)) | 0;
        $113 = (($112) + 4) | 0;
        $114 = $113 >>> 3;
        $$mask = $114 & 255;
        $115 = (___muldi3(($$mask | 0), 0, 16843009, 16843009) | 0);
        $116 = tempRet0;
        $117 = HEAP32[$4 >> 2] | 0;
        $118 = (($0) + ($117) | 0);
        $119 = $118;
        $120 = $119;
        HEAP32[$120 >> 2] = $115;
        $121 = (($119) + 4) | 0;
        $122 = $121;
        HEAP32[$122 >> 2] = $116;
        $123 = HEAP32[$5 >> 2] | 0;
        $124 = (($0) + ($123) | 0);
        $125 = $124;
        $126 = $125;
        HEAP32[$126 >> 2] = $115;
        $127 = (($125) + 4) | 0;
        $128 = $127;
        HEAP32[$128 >> 2] = $116;
        $129 = HEAP32[$7 >> 2] | 0;
        $130 = (($0) + ($129) | 0);
        $131 = $130;
        $132 = $131;
        HEAP32[$132 >> 2] = $115;
        $133 = (($131) + 4) | 0;
        $134 = $133;
        HEAP32[$134 >> 2] = $116;
        $135 = HEAP32[$9 >> 2] | 0;
        $136 = (($0) + ($135) | 0);
        $137 = $136;
        $138 = $137;
        HEAP32[$138 >> 2] = $115;
        $139 = (($137) + 4) | 0;
        $140 = $139;
        HEAP32[$140 >> 2] = $116;
        $141 = HEAP32[$11 >> 2] | 0;
        $142 = (($0) + ($141) | 0);
        $143 = $142;
        $144 = $143;
        HEAP32[$144 >> 2] = $115;
        $145 = (($143) + 4) | 0;
        $146 = $145;
        HEAP32[$146 >> 2] = $116;
        $147 = HEAP32[$13 >> 2] | 0;
        $148 = (($0) + ($147) | 0);
        $149 = $148;
        $150 = $149;
        HEAP32[$150 >> 2] = $115;
        $151 = (($149) + 4) | 0;
        $152 = $151;
        HEAP32[$152 >> 2] = $116;
        $153 = HEAP32[$15 >> 2] | 0;
        $154 = (($0) + ($153) | 0);
        $155 = $154;
        $156 = $155;
        HEAP32[$156 >> 2] = $115;
        $157 = (($155) + 4) | 0;
        $158 = $157;
        HEAP32[$158 >> 2] = $116;
        $159 = HEAP32[$17 >> 2] | 0;
        $160 = (($0) + ($159) | 0);
        $161 = $160;
        $162 = $161;
        HEAP32[$162 >> 2] = $115;
        $163 = (($161) + 4) | 0;
        $164 = $163;
        HEAP32[$164 >> 2] = $116;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec23WelsI8x8LumaPredDcTop_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$mask = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink63$ph = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
        var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
        var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
        var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
        var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
        var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
        var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $4 = sp;
        HEAP32[$4 >> 2] = 0;
        $5 = ((($4)) + 4 | 0);
        HEAP32[$5 >> 2] = $1;
        $6 = $1 << 1;
        $7 = ((($4)) + 8 | 0);
        HEAP32[$7 >> 2] = $6;
        $8 = ($1 * 3) | 0;
        $9 = ((($4)) + 12 | 0);
        HEAP32[$9 >> 2] = $8;
        $10 = $1 << 2;
        $11 = ((($4)) + 16 | 0);
        HEAP32[$11 >> 2] = $10;
        $12 = ($1 * 5) | 0;
        $13 = ((($4)) + 20 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = ($1 * 6) | 0;
        $15 = ((($4)) + 24 | 0);
        HEAP32[$15 >> 2] = $14;
        $16 = ($1 * 7) | 0;
        $17 = ((($4)) + 28 | 0);
        HEAP32[$17 >> 2] = $16;
        $18 = (0 - ($1)) | 0;
        if ($2) {
            $19 = $1 ^ -1;
            $20 = (($0) + ($19) | 0);
            $21 = HEAP8[$20 >> 0] | 0;
            $22 = $21 & 255;
            $23 = (($0) + ($18) | 0);
            $24 = HEAP8[$23 >> 0] | 0;
            $25 = $24 & 255;
            $26 = $25 << 1;
            $27 = (($26) + ($22)) | 0;
            $$pre$phiZ2D = $19; $$sink63$ph = $27;
        } else {
            $28 = (($0) + ($18) | 0);
            $29 = HEAP8[$28 >> 0] | 0;
            $30 = $29 & 255;
            $31 = ($30 * 3) | 0;
            $$pre = $1 ^ -1;
            $$pre$phiZ2D = $$pre; $$sink63$ph = $31;
        }
        $32 = (1 - ($1)) | 0;
        $33 = (($0) + ($32) | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = $34 & 255;
        $36 = (($$sink63$ph) + 2) | 0;
        $37 = (($36) + ($35)) | 0;
        $38 = $37 >>> 2;
        $39 = (($$pre$phiZ2D) + 1) | 0;
        $40 = (($0) + ($39) | 0);
        $41 = HEAP8[$40 >> 0] | 0;
        $42 = $41 & 255;
        $43 = $35 << 1;
        $44 = (($43) + ($42)) | 0;
        $45 = (2 - ($1)) | 0;
        $46 = (($0) + ($45) | 0);
        $47 = HEAP8[$46 >> 0] | 0;
        $48 = $47 & 255;
        $49 = (($44) + 2) | 0;
        $50 = (($49) + ($48)) | 0;
        $51 = $50 >>> 2;
        $52 = (($$pre$phiZ2D) + 2) | 0;
        $53 = (($0) + ($52) | 0);
        $54 = HEAP8[$53 >> 0] | 0;
        $55 = $54 & 255;
        $56 = $48 << 1;
        $57 = (($56) + ($55)) | 0;
        $58 = (3 - ($1)) | 0;
        $59 = (($0) + ($58) | 0);
        $60 = HEAP8[$59 >> 0] | 0;
        $61 = $60 & 255;
        $62 = (($57) + 2) | 0;
        $63 = (($62) + ($61)) | 0;
        $64 = $63 >>> 2;
        $65 = (($$pre$phiZ2D) + 3) | 0;
        $66 = (($0) + ($65) | 0);
        $67 = HEAP8[$66 >> 0] | 0;
        $68 = $67 & 255;
        $69 = $61 << 1;
        $70 = (($69) + ($68)) | 0;
        $71 = (4 - ($1)) | 0;
        $72 = (($0) + ($71) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = (($70) + 2) | 0;
        $76 = (($75) + ($74)) | 0;
        $77 = $76 >>> 2;
        $78 = (($$pre$phiZ2D) + 4) | 0;
        $79 = (($0) + ($78) | 0);
        $80 = HEAP8[$79 >> 0] | 0;
        $81 = $80 & 255;
        $82 = $74 << 1;
        $83 = (($82) + ($81)) | 0;
        $84 = (5 - ($1)) | 0;
        $85 = (($0) + ($84) | 0);
        $86 = HEAP8[$85 >> 0] | 0;
        $87 = $86 & 255;
        $88 = (($83) + 2) | 0;
        $89 = (($88) + ($87)) | 0;
        $90 = $89 >>> 2;
        $91 = (($$pre$phiZ2D) + 5) | 0;
        $92 = (($0) + ($91) | 0);
        $93 = HEAP8[$92 >> 0] | 0;
        $94 = $93 & 255;
        $95 = $87 << 1;
        $96 = (($95) + ($94)) | 0;
        $97 = (6 - ($1)) | 0;
        $98 = (($0) + ($97) | 0);
        $99 = HEAP8[$98 >> 0] | 0;
        $100 = $99 & 255;
        $101 = (($96) + 2) | 0;
        $102 = (($101) + ($100)) | 0;
        $103 = $102 >>> 2;
        $104 = (($$pre$phiZ2D) + 6) | 0;
        $105 = (($0) + ($104) | 0);
        $106 = HEAP8[$105 >> 0] | 0;
        $107 = $106 & 255;
        $108 = $100 << 1;
        $109 = (($108) + ($107)) | 0;
        $110 = (7 - ($1)) | 0;
        $111 = (($0) + ($110) | 0);
        $112 = HEAP8[$111 >> 0] | 0;
        $113 = $112 & 255;
        $114 = (($109) + 2) | 0;
        $115 = (($114) + ($113)) | 0;
        $116 = $115 >>> 2;
        if ($3) {
            $117 = $113 << 1;
            $118 = (($117) + ($100)) | 0;
            $119 = (8 - ($1)) | 0;
            $120 = (($0) + ($119) | 0);
            $121 = HEAP8[$120 >> 0] | 0;
            $122 = $121 & 255;
            $123 = (($118) + ($122)) | 0;
            $$sink9 = $123;
        } else {
            $124 = ($113 * 3) | 0;
            $125 = (($124) + ($100)) | 0;
            $$sink9 = $125;
        }
        $126 = (($$sink9) + 2) | 0;
        $127 = $126 >>> 2;
        $128 = $51 & 255;
        $129 = $38 & 255;
        $130 = (($129) + ($128)) | 0;
        $131 = $64 & 255;
        $132 = (($130) + ($131)) | 0;
        $133 = $77 & 255;
        $134 = (($132) + ($133)) | 0;
        $135 = $90 & 255;
        $136 = (($134) + ($135)) | 0;
        $137 = $103 & 255;
        $138 = (($136) + ($137)) | 0;
        $139 = $116 & 255;
        $140 = (($138) + ($139)) | 0;
        $141 = $127 & 255;
        $142 = (($140) + ($141)) | 0;
        $143 = (($142) + 4) | 0;
        $144 = $143 >>> 3;
        $$mask = $144 & 255;
        $145 = (___muldi3(($$mask | 0), 0, 16843009, 16843009) | 0);
        $146 = tempRet0;
        $147 = HEAP32[$4 >> 2] | 0;
        $148 = (($0) + ($147) | 0);
        $149 = $148;
        $150 = $149;
        HEAP32[$150 >> 2] = $145;
        $151 = (($149) + 4) | 0;
        $152 = $151;
        HEAP32[$152 >> 2] = $146;
        $153 = HEAP32[$5 >> 2] | 0;
        $154 = (($0) + ($153) | 0);
        $155 = $154;
        $156 = $155;
        HEAP32[$156 >> 2] = $145;
        $157 = (($155) + 4) | 0;
        $158 = $157;
        HEAP32[$158 >> 2] = $146;
        $159 = HEAP32[$7 >> 2] | 0;
        $160 = (($0) + ($159) | 0);
        $161 = $160;
        $162 = $161;
        HEAP32[$162 >> 2] = $145;
        $163 = (($161) + 4) | 0;
        $164 = $163;
        HEAP32[$164 >> 2] = $146;
        $165 = HEAP32[$9 >> 2] | 0;
        $166 = (($0) + ($165) | 0);
        $167 = $166;
        $168 = $167;
        HEAP32[$168 >> 2] = $145;
        $169 = (($167) + 4) | 0;
        $170 = $169;
        HEAP32[$170 >> 2] = $146;
        $171 = HEAP32[$11 >> 2] | 0;
        $172 = (($0) + ($171) | 0);
        $173 = $172;
        $174 = $173;
        HEAP32[$174 >> 2] = $145;
        $175 = (($173) + 4) | 0;
        $176 = $175;
        HEAP32[$176 >> 2] = $146;
        $177 = HEAP32[$13 >> 2] | 0;
        $178 = (($0) + ($177) | 0);
        $179 = $178;
        $180 = $179;
        HEAP32[$180 >> 2] = $145;
        $181 = (($179) + 4) | 0;
        $182 = $181;
        HEAP32[$182 >> 2] = $146;
        $183 = HEAP32[$15 >> 2] | 0;
        $184 = (($0) + ($183) | 0);
        $185 = $184;
        $186 = $185;
        HEAP32[$186 >> 2] = $145;
        $187 = (($185) + 4) | 0;
        $188 = $187;
        HEAP32[$188 >> 2] = $146;
        $189 = HEAP32[$17 >> 2] | 0;
        $190 = (($0) + ($189) | 0);
        $191 = $190;
        $192 = $191;
        HEAP32[$192 >> 2] = $145;
        $193 = (($191) + 4) | 0;
        $194 = $193;
        HEAP32[$194 >> 2] = $146;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec22WelsI8x8LumaPredDcNA_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = $0;
        $5 = $4;
        HEAP32[$5 >> 2] = -2139062144;
        $6 = (($4) + 4) | 0;
        $7 = $6;
        HEAP32[$7 >> 2] = -2139062144;
        $8 = (($0) + ($1) | 0);
        $9 = $8;
        $10 = $9;
        HEAP32[$10 >> 2] = -2139062144;
        $11 = (($9) + 4) | 0;
        $12 = $11;
        HEAP32[$12 >> 2] = -2139062144;
        $13 = $1 << 1;
        $14 = (($0) + ($13) | 0);
        $15 = $14;
        $16 = $15;
        HEAP32[$16 >> 2] = -2139062144;
        $17 = (($15) + 4) | 0;
        $18 = $17;
        HEAP32[$18 >> 2] = -2139062144;
        $19 = ($1 * 3) | 0;
        $20 = (($0) + ($19) | 0);
        $21 = $20;
        $22 = $21;
        HEAP32[$22 >> 2] = -2139062144;
        $23 = (($21) + 4) | 0;
        $24 = $23;
        HEAP32[$24 >> 2] = -2139062144;
        $25 = $1 << 2;
        $26 = (($0) + ($25) | 0);
        $27 = $26;
        $28 = $27;
        HEAP32[$28 >> 2] = -2139062144;
        $29 = (($27) + 4) | 0;
        $30 = $29;
        HEAP32[$30 >> 2] = -2139062144;
        $31 = ($1 * 5) | 0;
        $32 = (($0) + ($31) | 0);
        $33 = $32;
        $34 = $33;
        HEAP32[$34 >> 2] = -2139062144;
        $35 = (($33) + 4) | 0;
        $36 = $35;
        HEAP32[$36 >> 2] = -2139062144;
        $37 = ($1 * 6) | 0;
        $38 = (($0) + ($37) | 0);
        $39 = $38;
        $40 = $39;
        HEAP32[$40 >> 2] = -2139062144;
        $41 = (($39) + 4) | 0;
        $42 = $41;
        HEAP32[$42 >> 2] = -2139062144;
        $43 = ($1 * 7) | 0;
        $44 = (($0) + ($43) | 0);
        $45 = $44;
        $46 = $45;
        HEAP32[$46 >> 2] = -2139062144;
        $47 = (($45) + 4) | 0;
        $48 = $47;
        HEAP32[$48 >> 2] = -2139062144;
        return;
    }
    function __ZN7WelsDec21WelsI8x8LumaPredDDL_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$278 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink70$ph = 0, $$sink9 = 0, $$sink9$1 = 0, $$sink9$2 = 0, $$sink9$3 = 0, $$sink9$4 = 0, $$sink9$5 = 0, $$sink9$6 = 0, $$sink9$7 = 0, $$sink9$in = 0, $$sink9$in$1 = 0, $$sink9$in$2 = 0, $$sink9$in$3 = 0, $$sink9$in$4 = 0, $$sink9$in$5 = 0, $$sink9$in$6 = 0, $$sink9$in$7 = 0;
        var $$sink9$in$in = 0, $$sink9$in$in$1 = 0, $$sink9$in$in$2 = 0, $$sink9$in$in$3 = 0, $$sink9$in$in$4 = 0, $$sink9$in$in$5 = 0, $$sink9$in$in$6 = 0, $$sink9$in$in$7 = 0, $$sink9$in$in$us = 0, $$sink9$in$in$us$1 = 0, $$sink9$in$in$us$2 = 0, $$sink9$in$in$us$3 = 0, $$sink9$in$in$us$4 = 0, $$sink9$in$in$us$5 = 0, $$sink9$in$in$us$6 = 0, $$sink9$in$in$us$7 = 0, $$sink9$in$us = 0, $$sink9$in$us$1 = 0, $$sink9$in$us$2 = 0, $$sink9$in$us$3 = 0;
        var $$sink9$in$us$4 = 0, $$sink9$in$us$5 = 0, $$sink9$in$us$6 = 0, $$sink9$in$us$7 = 0, $$sink9$us = 0, $$sink9$us$1 = 0, $$sink9$us$2 = 0, $$sink9$us$3 = 0, $$sink9$us$4 = 0, $$sink9$us$5 = 0, $$sink9$us$6 = 0, $$sink9$us$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
        var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
        var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
        var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
        var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
        var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
        var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
        var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
        var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
        var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
        var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
        var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
        var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
        var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
        var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
        var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
        var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
        var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
        var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
        var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
        var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
        var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
        var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
        var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $6 = ((($4)) + 4 | 0);
        HEAP32[$6 >> 2] = $1;
        $7 = $1 << 1;
        $8 = ((($4)) + 8 | 0);
        HEAP32[$8 >> 2] = $7;
        $9 = ($1 * 3) | 0;
        $10 = ((($4)) + 12 | 0);
        HEAP32[$10 >> 2] = $9;
        $11 = $1 << 2;
        $12 = ((($4)) + 16 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = ($1 * 5) | 0;
        $14 = ((($4)) + 20 | 0);
        HEAP32[$14 >> 2] = $13;
        $15 = ($1 * 6) | 0;
        $16 = ((($4)) + 24 | 0);
        HEAP32[$16 >> 2] = $15;
        $17 = ($1 * 7) | 0;
        $18 = ((($4)) + 28 | 0);
        HEAP32[$18 >> 2] = $17;
        $19 = (0 - ($1)) | 0;
        if ($2) {
            $20 = $1 ^ -1;
            $21 = (($0) + ($20) | 0);
            $22 = HEAP8[$21 >> 0] | 0;
            $23 = $22 & 255;
            $24 = (($0) + ($19) | 0);
            $25 = HEAP8[$24 >> 0] | 0;
            $26 = $25 & 255;
            $27 = $26 << 1;
            $28 = (($27) + ($23)) | 0;
            $$pre$phiZ2D = $20; $$sink70$ph = $28;
        } else {
            $29 = (($0) + ($19) | 0);
            $30 = HEAP8[$29 >> 0] | 0;
            $31 = $30 & 255;
            $32 = ($31 * 3) | 0;
            $$pre = $1 ^ -1;
            $$pre$phiZ2D = $$pre; $$sink70$ph = $32;
        }
        $33 = (1 - ($1)) | 0;
        $34 = (($0) + ($33) | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = (($$sink70$ph) + 2) | 0;
        $38 = (($37) + ($36)) | 0;
        $39 = $38 >>> 2;
        $40 = $39 & 255;
        HEAP8[$5 >> 0] = $40;
        $41 = (($$pre$phiZ2D) + 1) | 0;
        $42 = (($0) + ($41) | 0);
        $43 = HEAP8[$42 >> 0] | 0;
        $44 = $43 & 255;
        $45 = $36 << 1;
        $46 = (($45) + ($44)) | 0;
        $47 = (2 - ($1)) | 0;
        $48 = (($0) + ($47) | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = $49 & 255;
        $51 = (($46) + 2) | 0;
        $52 = (($51) + ($50)) | 0;
        $53 = $52 >>> 2;
        $54 = $53 & 255;
        $55 = ((($5)) + 1 | 0);
        HEAP8[$55 >> 0] = $54;
        $56 = (($$pre$phiZ2D) + 2) | 0;
        $57 = (($0) + ($56) | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = $58 & 255;
        $60 = $50 << 1;
        $61 = (($60) + ($59)) | 0;
        $62 = (3 - ($1)) | 0;
        $63 = (($0) + ($62) | 0);
        $64 = HEAP8[$63 >> 0] | 0;
        $65 = $64 & 255;
        $66 = (($61) + 2) | 0;
        $67 = (($66) + ($65)) | 0;
        $68 = $67 >>> 2;
        $69 = $68 & 255;
        $70 = ((($5)) + 2 | 0);
        HEAP8[$70 >> 0] = $69;
        $71 = (($$pre$phiZ2D) + 3) | 0;
        $72 = (($0) + ($71) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = $65 << 1;
        $76 = (($75) + ($74)) | 0;
        $77 = (4 - ($1)) | 0;
        $78 = (($0) + ($77) | 0);
        $79 = HEAP8[$78 >> 0] | 0;
        $80 = $79 & 255;
        $81 = (($76) + 2) | 0;
        $82 = (($81) + ($80)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        $85 = ((($5)) + 3 | 0);
        HEAP8[$85 >> 0] = $84;
        $86 = (($$pre$phiZ2D) + 4) | 0;
        $87 = (($0) + ($86) | 0);
        $88 = HEAP8[$87 >> 0] | 0;
        $89 = $88 & 255;
        $90 = $80 << 1;
        $91 = (($90) + ($89)) | 0;
        $92 = (5 - ($1)) | 0;
        $93 = (($0) + ($92) | 0);
        $94 = HEAP8[$93 >> 0] | 0;
        $95 = $94 & 255;
        $96 = (($91) + 2) | 0;
        $97 = (($96) + ($95)) | 0;
        $98 = $97 >>> 2;
        $99 = $98 & 255;
        $100 = ((($5)) + 4 | 0);
        HEAP8[$100 >> 0] = $99;
        $101 = (($$pre$phiZ2D) + 5) | 0;
        $102 = (($0) + ($101) | 0);
        $103 = HEAP8[$102 >> 0] | 0;
        $104 = $103 & 255;
        $105 = $95 << 1;
        $106 = (($105) + ($104)) | 0;
        $107 = (6 - ($1)) | 0;
        $108 = (($0) + ($107) | 0);
        $109 = HEAP8[$108 >> 0] | 0;
        $110 = $109 & 255;
        $111 = (($106) + 2) | 0;
        $112 = (($111) + ($110)) | 0;
        $113 = $112 >>> 2;
        $114 = $113 & 255;
        $115 = ((($5)) + 5 | 0);
        HEAP8[$115 >> 0] = $114;
        $116 = (($$pre$phiZ2D) + 6) | 0;
        $117 = (($0) + ($116) | 0);
        $118 = HEAP8[$117 >> 0] | 0;
        $119 = $118 & 255;
        $120 = $110 << 1;
        $121 = (($120) + ($119)) | 0;
        $122 = (7 - ($1)) | 0;
        $123 = (($0) + ($122) | 0);
        $124 = HEAP8[$123 >> 0] | 0;
        $125 = $124 & 255;
        $126 = (($121) + 2) | 0;
        $127 = (($126) + ($125)) | 0;
        $128 = $127 >>> 2;
        $129 = $128 & 255;
        $130 = ((($5)) + 6 | 0);
        HEAP8[$130 >> 0] = $129;
        $131 = (($$pre$phiZ2D) + 7) | 0;
        $132 = (($0) + ($131) | 0);
        $133 = HEAP8[$132 >> 0] | 0;
        $134 = $133 & 255;
        $135 = $125 << 1;
        $136 = (($135) + ($134)) | 0;
        $137 = (8 - ($1)) | 0;
        $138 = (($0) + ($137) | 0);
        $139 = HEAP8[$138 >> 0] | 0;
        $140 = $139 & 255;
        $141 = (($136) + 2) | 0;
        $142 = (($141) + ($140)) | 0;
        $143 = $142 >>> 2;
        $144 = $143 & 255;
        $145 = ((($5)) + 7 | 0);
        HEAP8[$145 >> 0] = $144;
        $146 = (($$pre$phiZ2D) + 8) | 0;
        $147 = (($0) + ($146) | 0);
        $148 = HEAP8[$147 >> 0] | 0;
        $149 = $148 & 255;
        $150 = $140 << 1;
        $151 = (($150) + ($149)) | 0;
        $152 = (9 - ($1)) | 0;
        $153 = (($0) + ($152) | 0);
        $154 = HEAP8[$153 >> 0] | 0;
        $155 = $154 & 255;
        $156 = (($151) + 2) | 0;
        $157 = (($156) + ($155)) | 0;
        $158 = $157 >>> 2;
        $159 = $158 & 255;
        $160 = ((($5)) + 8 | 0);
        HEAP8[$160 >> 0] = $159;
        $161 = (($$pre$phiZ2D) + 9) | 0;
        $162 = (($0) + ($161) | 0);
        $163 = HEAP8[$162 >> 0] | 0;
        $164 = $163 & 255;
        $165 = $155 << 1;
        $166 = (($165) + ($164)) | 0;
        $167 = (10 - ($1)) | 0;
        $168 = (($0) + ($167) | 0);
        $169 = HEAP8[$168 >> 0] | 0;
        $170 = $169 & 255;
        $171 = (($166) + 2) | 0;
        $172 = (($171) + ($170)) | 0;
        $173 = $172 >>> 2;
        $174 = $173 & 255;
        $175 = ((($5)) + 9 | 0);
        HEAP8[$175 >> 0] = $174;
        $176 = (($$pre$phiZ2D) + 10) | 0;
        $177 = (($0) + ($176) | 0);
        $178 = HEAP8[$177 >> 0] | 0;
        $179 = $178 & 255;
        $180 = $170 << 1;
        $181 = (($180) + ($179)) | 0;
        $182 = (11 - ($1)) | 0;
        $183 = (($0) + ($182) | 0);
        $184 = HEAP8[$183 >> 0] | 0;
        $185 = $184 & 255;
        $186 = (($181) + 2) | 0;
        $187 = (($186) + ($185)) | 0;
        $188 = $187 >>> 2;
        $189 = $188 & 255;
        $190 = ((($5)) + 10 | 0);
        HEAP8[$190 >> 0] = $189;
        $191 = (($$pre$phiZ2D) + 11) | 0;
        $192 = (($0) + ($191) | 0);
        $193 = HEAP8[$192 >> 0] | 0;
        $194 = $193 & 255;
        $195 = $185 << 1;
        $196 = (($195) + ($194)) | 0;
        $197 = (12 - ($1)) | 0;
        $198 = (($0) + ($197) | 0);
        $199 = HEAP8[$198 >> 0] | 0;
        $200 = $199 & 255;
        $201 = (($196) + 2) | 0;
        $202 = (($201) + ($200)) | 0;
        $203 = $202 >>> 2;
        $204 = $203 & 255;
        $205 = ((($5)) + 11 | 0);
        HEAP8[$205 >> 0] = $204;
        $206 = (($$pre$phiZ2D) + 12) | 0;
        $207 = (($0) + ($206) | 0);
        $208 = HEAP8[$207 >> 0] | 0;
        $209 = $208 & 255;
        $210 = $200 << 1;
        $211 = (($210) + ($209)) | 0;
        $212 = (13 - ($1)) | 0;
        $213 = (($0) + ($212) | 0);
        $214 = HEAP8[$213 >> 0] | 0;
        $215 = $214 & 255;
        $216 = (($211) + 2) | 0;
        $217 = (($216) + ($215)) | 0;
        $218 = $217 >>> 2;
        $219 = $218 & 255;
        $220 = ((($5)) + 12 | 0);
        HEAP8[$220 >> 0] = $219;
        $221 = (($$pre$phiZ2D) + 13) | 0;
        $222 = (($0) + ($221) | 0);
        $223 = HEAP8[$222 >> 0] | 0;
        $224 = $223 & 255;
        $225 = $215 << 1;
        $226 = (($225) + ($224)) | 0;
        $227 = (14 - ($1)) | 0;
        $228 = (($0) + ($227) | 0);
        $229 = HEAP8[$228 >> 0] | 0;
        $230 = $229 & 255;
        $231 = (($226) + 2) | 0;
        $232 = (($231) + ($230)) | 0;
        $233 = $232 >>> 2;
        $234 = $233 & 255;
        $235 = ((($5)) + 13 | 0);
        HEAP8[$235 >> 0] = $234;
        $236 = (($$pre$phiZ2D) + 14) | 0;
        $237 = (($0) + ($236) | 0);
        $238 = HEAP8[$237 >> 0] | 0;
        $239 = $238 & 255;
        $240 = $230 << 1;
        $241 = (($240) + ($239)) | 0;
        $242 = (15 - ($1)) | 0;
        $243 = (($0) + ($242) | 0);
        $244 = HEAP8[$243 >> 0] | 0;
        $245 = $244 & 255;
        $246 = (($241) + 2) | 0;
        $247 = (($246) + ($245)) | 0;
        $248 = $247 >>> 2;
        $249 = $248 & 255;
        $250 = ((($5)) + 14 | 0);
        HEAP8[$250 >> 0] = $249;
        $251 = ($245 * 3) | 0;
        $252 = (($230) + 2) | 0;
        $253 = (($252) + ($251)) | 0;
        $254 = $253 >>> 2;
        $255 = $254 & 255;
        $256 = ((($5)) + 15 | 0);
        HEAP8[$256 >> 0] = $255;
        $257 = $248 & 255;
        $258 = $254 & 255;
        $259 = ($258 * 3) | 0;
        $260 = (($259) + ($257)) | 0;
        $$278 = 0;
        while (1) {
            $261 = ($$278 | 0) == (7);
            $262 = (($4) + ($$278 << 2) | 0);
            $263 = HEAP32[$262 >> 2] | 0;
            if ($261) {
                break;
            }
            $264 = (($5) + ($$278) | 0);
            $265 = HEAP8[$264 >> 0] | 0;
            $266 = $265 & 255;
            $267 = (($$278) + 1) | 0;
            $268 = (($5) + ($267) | 0);
            $269 = HEAP8[$268 >> 0] | 0;
            $270 = $269 & 255;
            $271 = $270 << 1;
            $272 = (($271) + ($266)) | 0;
            $273 = (($$278) + 2) | 0;
            $274 = (($5) + ($273) | 0);
            $275 = HEAP8[$274 >> 0] | 0;
            $276 = $275 & 255;
            $277 = (($272) + ($276)) | 0;
            $$sink9$in$in = (($277) + 2) | 0;
            $$sink9$in = $$sink9$in$in >>> 2;
            $$sink9 = $$sink9$in & 255;
            $278 = (($0) + ($263) | 0);
            HEAP8[$278 >> 0] = $$sink9;
            $279 = $276 << 1;
            $280 = (($279) + ($270)) | 0;
            $281 = (($$278) + 3) | 0;
            $282 = (($5) + ($281) | 0);
            $283 = HEAP8[$282 >> 0] | 0;
            $284 = $283 & 255;
            $285 = (($280) + ($284)) | 0;
            $$sink9$in$in$1 = (($285) + 2) | 0;
            $$sink9$in$1 = $$sink9$in$in$1 >>> 2;
            $$sink9$1 = $$sink9$in$1 & 255;
            $286 = (($263) + 1) | 0;
            $287 = (($0) + ($286) | 0);
            HEAP8[$287 >> 0] = $$sink9$1;
            $288 = $284 << 1;
            $289 = (($288) + ($276)) | 0;
            $290 = (($$278) + 4) | 0;
            $291 = (($5) + ($290) | 0);
            $292 = HEAP8[$291 >> 0] | 0;
            $293 = $292 & 255;
            $294 = (($289) + ($293)) | 0;
            $$sink9$in$in$2 = (($294) + 2) | 0;
            $$sink9$in$2 = $$sink9$in$in$2 >>> 2;
            $$sink9$2 = $$sink9$in$2 & 255;
            $295 = (($263) + 2) | 0;
            $296 = (($0) + ($295) | 0);
            HEAP8[$296 >> 0] = $$sink9$2;
            $297 = (($$278) + 3) | 0;
            $298 = (($5) + ($297) | 0);
            $299 = HEAP8[$298 >> 0] | 0;
            $300 = $299 & 255;
            $301 = (($$278) + 4) | 0;
            $302 = (($5) + ($301) | 0);
            $303 = HEAP8[$302 >> 0] | 0;
            $304 = $303 & 255;
            $305 = $304 << 1;
            $306 = (($305) + ($300)) | 0;
            $307 = (($$278) + 5) | 0;
            $308 = (($5) + ($307) | 0);
            $309 = HEAP8[$308 >> 0] | 0;
            $310 = $309 & 255;
            $311 = (($306) + ($310)) | 0;
            $$sink9$in$in$3 = (($311) + 2) | 0;
            $$sink9$in$3 = $$sink9$in$in$3 >>> 2;
            $$sink9$3 = $$sink9$in$3 & 255;
            $312 = (($263) + 3) | 0;
            $313 = (($0) + ($312) | 0);
            HEAP8[$313 >> 0] = $$sink9$3;
            $314 = (($$278) + 4) | 0;
            $315 = (($5) + ($314) | 0);
            $316 = HEAP8[$315 >> 0] | 0;
            $317 = $316 & 255;
            $318 = (($$278) + 5) | 0;
            $319 = (($5) + ($318) | 0);
            $320 = HEAP8[$319 >> 0] | 0;
            $321 = $320 & 255;
            $322 = $321 << 1;
            $323 = (($322) + ($317)) | 0;
            $324 = (($$278) + 6) | 0;
            $325 = (($5) + ($324) | 0);
            $326 = HEAP8[$325 >> 0] | 0;
            $327 = $326 & 255;
            $328 = (($323) + ($327)) | 0;
            $$sink9$in$in$4 = (($328) + 2) | 0;
            $$sink9$in$4 = $$sink9$in$in$4 >>> 2;
            $$sink9$4 = $$sink9$in$4 & 255;
            $329 = (($263) + 4) | 0;
            $330 = (($0) + ($329) | 0);
            HEAP8[$330 >> 0] = $$sink9$4;
            $331 = (($$278) + 5) | 0;
            $332 = (($5) + ($331) | 0);
            $333 = HEAP8[$332 >> 0] | 0;
            $334 = $333 & 255;
            $335 = (($$278) + 6) | 0;
            $336 = (($5) + ($335) | 0);
            $337 = HEAP8[$336 >> 0] | 0;
            $338 = $337 & 255;
            $339 = $338 << 1;
            $340 = (($339) + ($334)) | 0;
            $341 = (($$278) + 7) | 0;
            $342 = (($5) + ($341) | 0);
            $343 = HEAP8[$342 >> 0] | 0;
            $344 = $343 & 255;
            $345 = (($340) + ($344)) | 0;
            $$sink9$in$in$5 = (($345) + 2) | 0;
            $$sink9$in$5 = $$sink9$in$in$5 >>> 2;
            $$sink9$5 = $$sink9$in$5 & 255;
            $346 = (($263) + 5) | 0;
            $347 = (($0) + ($346) | 0);
            HEAP8[$347 >> 0] = $$sink9$5;
            $348 = (($$278) + 6) | 0;
            $349 = (($5) + ($348) | 0);
            $350 = HEAP8[$349 >> 0] | 0;
            $351 = $350 & 255;
            $352 = (($$278) + 7) | 0;
            $353 = (($5) + ($352) | 0);
            $354 = HEAP8[$353 >> 0] | 0;
            $355 = $354 & 255;
            $356 = $355 << 1;
            $357 = (($356) + ($351)) | 0;
            $358 = (($$278) + 8) | 0;
            $359 = (($5) + ($358) | 0);
            $360 = HEAP8[$359 >> 0] | 0;
            $361 = $360 & 255;
            $362 = (($357) + ($361)) | 0;
            $$sink9$in$in$6 = (($362) + 2) | 0;
            $$sink9$in$6 = $$sink9$in$in$6 >>> 2;
            $$sink9$6 = $$sink9$in$6 & 255;
            $363 = (($263) + 6) | 0;
            $364 = (($0) + ($363) | 0);
            HEAP8[$364 >> 0] = $$sink9$6;
            $365 = (($$278) + 7) | 0;
            $366 = (($5) + ($365) | 0);
            $367 = HEAP8[$366 >> 0] | 0;
            $368 = $367 & 255;
            $369 = (($$278) + 8) | 0;
            $370 = (($5) + ($369) | 0);
            $371 = HEAP8[$370 >> 0] | 0;
            $372 = $371 & 255;
            $373 = $372 << 1;
            $374 = (($373) + ($368)) | 0;
            $375 = (($$278) + 9) | 0;
            $376 = (($5) + ($375) | 0);
            $377 = HEAP8[$376 >> 0] | 0;
            $378 = $377 & 255;
            $379 = (($374) + ($378)) | 0;
            $$sink9$in$in$7 = (($379) + 2) | 0;
            $$sink9$in$7 = $$sink9$in$in$7 >>> 2;
            $$sink9$7 = $$sink9$in$7 & 255;
            $380 = (($263) + 7) | 0;
            $381 = (($0) + ($380) | 0);
            HEAP8[$381 >> 0] = $$sink9$7;
            $exitcond = ($267 | 0) == (8);
            if ($exitcond) {
                label = 7;
                break;
            } else {
                $$278 = $267;
            }
        }
        if ((label | 0) == 7) {
            STACKTOP = sp; return;
        }
        $382 = HEAP8[$145 >> 0] | 0;
        $383 = $382 & 255;
        $384 = HEAP8[$160 >> 0] | 0;
        $385 = $384 & 255;
        $386 = $385 << 1;
        $387 = (($386) + ($383)) | 0;
        $388 = HEAP8[$175 >> 0] | 0;
        $389 = $388 & 255;
        $390 = (($387) + ($389)) | 0;
        $$sink9$in$in$us = (($390) + 2) | 0;
        $$sink9$in$us = $$sink9$in$in$us >>> 2;
        $$sink9$us = $$sink9$in$us & 255;
        $391 = (($0) + ($263) | 0);
        HEAP8[$391 >> 0] = $$sink9$us;
        $392 = HEAP8[$160 >> 0] | 0;
        $393 = $392 & 255;
        $394 = HEAP8[$175 >> 0] | 0;
        $395 = $394 & 255;
        $396 = $395 << 1;
        $397 = (($396) + ($393)) | 0;
        $398 = HEAP8[$190 >> 0] | 0;
        $399 = $398 & 255;
        $400 = (($397) + ($399)) | 0;
        $$sink9$in$in$us$1 = (($400) + 2) | 0;
        $$sink9$in$us$1 = $$sink9$in$in$us$1 >>> 2;
        $$sink9$us$1 = $$sink9$in$us$1 & 255;
        $401 = (($263) + 1) | 0;
        $402 = (($0) + ($401) | 0);
        HEAP8[$402 >> 0] = $$sink9$us$1;
        $403 = HEAP8[$175 >> 0] | 0;
        $404 = $403 & 255;
        $405 = HEAP8[$190 >> 0] | 0;
        $406 = $405 & 255;
        $407 = $406 << 1;
        $408 = (($407) + ($404)) | 0;
        $409 = HEAP8[$205 >> 0] | 0;
        $410 = $409 & 255;
        $411 = (($408) + ($410)) | 0;
        $$sink9$in$in$us$2 = (($411) + 2) | 0;
        $$sink9$in$us$2 = $$sink9$in$in$us$2 >>> 2;
        $$sink9$us$2 = $$sink9$in$us$2 & 255;
        $412 = (($263) + 2) | 0;
        $413 = (($0) + ($412) | 0);
        HEAP8[$413 >> 0] = $$sink9$us$2;
        $414 = HEAP8[$190 >> 0] | 0;
        $415 = $414 & 255;
        $416 = HEAP8[$205 >> 0] | 0;
        $417 = $416 & 255;
        $418 = $417 << 1;
        $419 = (($418) + ($415)) | 0;
        $420 = HEAP8[$220 >> 0] | 0;
        $421 = $420 & 255;
        $422 = (($419) + ($421)) | 0;
        $$sink9$in$in$us$3 = (($422) + 2) | 0;
        $$sink9$in$us$3 = $$sink9$in$in$us$3 >>> 2;
        $$sink9$us$3 = $$sink9$in$us$3 & 255;
        $423 = (($263) + 3) | 0;
        $424 = (($0) + ($423) | 0);
        HEAP8[$424 >> 0] = $$sink9$us$3;
        $425 = HEAP8[$205 >> 0] | 0;
        $426 = $425 & 255;
        $427 = HEAP8[$220 >> 0] | 0;
        $428 = $427 & 255;
        $429 = $428 << 1;
        $430 = (($429) + ($426)) | 0;
        $431 = HEAP8[$235 >> 0] | 0;
        $432 = $431 & 255;
        $433 = (($430) + ($432)) | 0;
        $$sink9$in$in$us$4 = (($433) + 2) | 0;
        $$sink9$in$us$4 = $$sink9$in$in$us$4 >>> 2;
        $$sink9$us$4 = $$sink9$in$us$4 & 255;
        $434 = (($263) + 4) | 0;
        $435 = (($0) + ($434) | 0);
        HEAP8[$435 >> 0] = $$sink9$us$4;
        $436 = HEAP8[$220 >> 0] | 0;
        $437 = $436 & 255;
        $438 = HEAP8[$235 >> 0] | 0;
        $439 = $438 & 255;
        $440 = $439 << 1;
        $441 = (($440) + ($437)) | 0;
        $442 = HEAP8[$250 >> 0] | 0;
        $443 = $442 & 255;
        $444 = (($441) + ($443)) | 0;
        $$sink9$in$in$us$5 = (($444) + 2) | 0;
        $$sink9$in$us$5 = $$sink9$in$in$us$5 >>> 2;
        $$sink9$us$5 = $$sink9$in$us$5 & 255;
        $445 = (($263) + 5) | 0;
        $446 = (($0) + ($445) | 0);
        HEAP8[$446 >> 0] = $$sink9$us$5;
        $447 = HEAP8[$235 >> 0] | 0;
        $448 = $447 & 255;
        $449 = HEAP8[$250 >> 0] | 0;
        $450 = $449 & 255;
        $451 = $450 << 1;
        $452 = (($451) + ($448)) | 0;
        $453 = HEAP8[$256 >> 0] | 0;
        $454 = $453 & 255;
        $455 = (($452) + ($454)) | 0;
        $$sink9$in$in$us$6 = (($455) + 2) | 0;
        $$sink9$in$us$6 = $$sink9$in$in$us$6 >>> 2;
        $$sink9$us$6 = $$sink9$in$us$6 & 255;
        $456 = (($263) + 6) | 0;
        $457 = (($0) + ($456) | 0);
        HEAP8[$457 >> 0] = $$sink9$us$6;
        $$sink9$in$in$us$7 = (($260) + 2) | 0;
        $$sink9$in$us$7 = $$sink9$in$in$us$7 >>> 2;
        $$sink9$us$7 = $$sink9$in$us$7 & 255;
        $458 = (($263) + 7) | 0;
        $459 = (($0) + ($458) | 0);
        HEAP8[$459 >> 0] = $$sink9$us$7;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec24WelsI8x8LumaPredDDLTop_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$384 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink75$ph = 0, $$sink9 = 0, $$sink9$1 = 0, $$sink9$2 = 0, $$sink9$3 = 0, $$sink9$4 = 0, $$sink9$5 = 0, $$sink9$6 = 0, $$sink9$7 = 0, $$sink9$in = 0, $$sink9$in$1 = 0, $$sink9$in$2 = 0, $$sink9$in$3 = 0, $$sink9$in$4 = 0, $$sink9$in$5 = 0, $$sink9$in$6 = 0, $$sink9$in$7 = 0;
        var $$sink9$in$in = 0, $$sink9$in$in$1 = 0, $$sink9$in$in$2 = 0, $$sink9$in$in$3 = 0, $$sink9$in$in$4 = 0, $$sink9$in$in$5 = 0, $$sink9$in$in$6 = 0, $$sink9$in$in$7 = 0, $$sink9$in$in$us = 0, $$sink9$in$in$us$1 = 0, $$sink9$in$in$us$2 = 0, $$sink9$in$in$us$3 = 0, $$sink9$in$in$us$4 = 0, $$sink9$in$in$us$5 = 0, $$sink9$in$in$us$6 = 0, $$sink9$in$us = 0, $$sink9$in$us$1 = 0, $$sink9$in$us$2 = 0, $$sink9$in$us$3 = 0, $$sink9$in$us$4 = 0;
        var $$sink9$in$us$5 = 0, $$sink9$in$us$6 = 0, $$sink9$us = 0, $$sink9$us$1 = 0, $$sink9$us$2 = 0, $$sink9$us$3 = 0, $$sink9$us$4 = 0, $$sink9$us$5 = 0, $$sink9$us$6 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
        var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
        var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
        var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
        var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
        var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
        var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
        var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
        var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
        var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
        var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
        var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
        var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
        var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
        var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
        var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
        var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $scevgep = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $6 = ((($4)) + 4 | 0);
        HEAP32[$6 >> 2] = $1;
        $7 = $1 << 1;
        $8 = ((($4)) + 8 | 0);
        HEAP32[$8 >> 2] = $7;
        $9 = ($1 * 3) | 0;
        $10 = ((($4)) + 12 | 0);
        HEAP32[$10 >> 2] = $9;
        $11 = $1 << 2;
        $12 = ((($4)) + 16 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = ($1 * 5) | 0;
        $14 = ((($4)) + 20 | 0);
        HEAP32[$14 >> 2] = $13;
        $15 = ($1 * 6) | 0;
        $16 = ((($4)) + 24 | 0);
        HEAP32[$16 >> 2] = $15;
        $17 = ($1 * 7) | 0;
        $18 = ((($4)) + 28 | 0);
        HEAP32[$18 >> 2] = $17;
        $19 = (0 - ($1)) | 0;
        if ($2) {
            $20 = $1 ^ -1;
            $21 = (($0) + ($20) | 0);
            $22 = HEAP8[$21 >> 0] | 0;
            $23 = $22 & 255;
            $24 = (($0) + ($19) | 0);
            $25 = HEAP8[$24 >> 0] | 0;
            $26 = $25 & 255;
            $27 = $26 << 1;
            $28 = (($27) + ($23)) | 0;
            $$pre$phiZ2D = $20; $$sink75$ph = $28;
        } else {
            $29 = (($0) + ($19) | 0);
            $30 = HEAP8[$29 >> 0] | 0;
            $31 = $30 & 255;
            $32 = ($31 * 3) | 0;
            $$pre = $1 ^ -1;
            $$pre$phiZ2D = $$pre; $$sink75$ph = $32;
        }
        $33 = (1 - ($1)) | 0;
        $34 = (($0) + ($33) | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = (($$sink75$ph) + 2) | 0;
        $38 = (($37) + ($36)) | 0;
        $39 = $38 >>> 2;
        $40 = $39 & 255;
        HEAP8[$5 >> 0] = $40;
        $41 = (($$pre$phiZ2D) + 1) | 0;
        $42 = (($0) + ($41) | 0);
        $43 = HEAP8[$42 >> 0] | 0;
        $44 = $43 & 255;
        $45 = $36 << 1;
        $46 = (($45) + ($44)) | 0;
        $47 = (2 - ($1)) | 0;
        $48 = (($0) + ($47) | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = $49 & 255;
        $51 = (($46) + 2) | 0;
        $52 = (($51) + ($50)) | 0;
        $53 = $52 >>> 2;
        $54 = $53 & 255;
        $55 = ((($5)) + 1 | 0);
        HEAP8[$55 >> 0] = $54;
        $56 = (($$pre$phiZ2D) + 2) | 0;
        $57 = (($0) + ($56) | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = $58 & 255;
        $60 = $50 << 1;
        $61 = (($60) + ($59)) | 0;
        $62 = (3 - ($1)) | 0;
        $63 = (($0) + ($62) | 0);
        $64 = HEAP8[$63 >> 0] | 0;
        $65 = $64 & 255;
        $66 = (($61) + 2) | 0;
        $67 = (($66) + ($65)) | 0;
        $68 = $67 >>> 2;
        $69 = $68 & 255;
        $70 = ((($5)) + 2 | 0);
        HEAP8[$70 >> 0] = $69;
        $71 = (($$pre$phiZ2D) + 3) | 0;
        $72 = (($0) + ($71) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = $65 << 1;
        $76 = (($75) + ($74)) | 0;
        $77 = (4 - ($1)) | 0;
        $78 = (($0) + ($77) | 0);
        $79 = HEAP8[$78 >> 0] | 0;
        $80 = $79 & 255;
        $81 = (($76) + 2) | 0;
        $82 = (($81) + ($80)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        $85 = ((($5)) + 3 | 0);
        HEAP8[$85 >> 0] = $84;
        $86 = (($$pre$phiZ2D) + 4) | 0;
        $87 = (($0) + ($86) | 0);
        $88 = HEAP8[$87 >> 0] | 0;
        $89 = $88 & 255;
        $90 = $80 << 1;
        $91 = (($90) + ($89)) | 0;
        $92 = (5 - ($1)) | 0;
        $93 = (($0) + ($92) | 0);
        $94 = HEAP8[$93 >> 0] | 0;
        $95 = $94 & 255;
        $96 = (($91) + 2) | 0;
        $97 = (($96) + ($95)) | 0;
        $98 = $97 >>> 2;
        $99 = $98 & 255;
        $100 = ((($5)) + 4 | 0);
        HEAP8[$100 >> 0] = $99;
        $101 = (($$pre$phiZ2D) + 5) | 0;
        $102 = (($0) + ($101) | 0);
        $103 = HEAP8[$102 >> 0] | 0;
        $104 = $103 & 255;
        $105 = $95 << 1;
        $106 = (($105) + ($104)) | 0;
        $107 = (6 - ($1)) | 0;
        $108 = (($0) + ($107) | 0);
        $109 = HEAP8[$108 >> 0] | 0;
        $110 = $109 & 255;
        $111 = (($106) + 2) | 0;
        $112 = (($111) + ($110)) | 0;
        $113 = $112 >>> 2;
        $114 = $113 & 255;
        $115 = ((($5)) + 5 | 0);
        HEAP8[$115 >> 0] = $114;
        $116 = (($$pre$phiZ2D) + 6) | 0;
        $117 = (($0) + ($116) | 0);
        $118 = HEAP8[$117 >> 0] | 0;
        $119 = $118 & 255;
        $120 = $110 << 1;
        $121 = (($120) + ($119)) | 0;
        $122 = (7 - ($1)) | 0;
        $123 = (($0) + ($122) | 0);
        $124 = HEAP8[$123 >> 0] | 0;
        $125 = $124 & 255;
        $126 = (($121) + 2) | 0;
        $127 = (($126) + ($125)) | 0;
        $128 = $127 >>> 2;
        $129 = $128 & 255;
        $130 = ((($5)) + 6 | 0);
        HEAP8[$130 >> 0] = $129;
        $131 = ($125 * 3) | 0;
        $132 = (($110) + 2) | 0;
        $133 = (($132) + ($131)) | 0;
        $134 = $133 >>> 2;
        $135 = $134 & 255;
        $136 = ((($5)) + 7 | 0);
        HEAP8[$136 >> 0] = $135;
        $scevgep = ((($5)) + 8 | 0);
        _memset(($scevgep | 0), ($124 | 0), 8) | 0;
        $137 = ((($5)) + 14 | 0);
        $138 = ((($5)) + 15 | 0);
        $$384 = 0;
        while (1) {
            $139 = ($$384 | 0) == (7);
            $140 = (($4) + ($$384 << 2) | 0);
            $141 = HEAP32[$140 >> 2] | 0;
            if ($139) {
                break;
            }
            $142 = (($5) + ($$384) | 0);
            $143 = HEAP8[$142 >> 0] | 0;
            $144 = $143 & 255;
            $145 = (($$384) + 1) | 0;
            $146 = (($5) + ($145) | 0);
            $147 = HEAP8[$146 >> 0] | 0;
            $148 = $147 & 255;
            $149 = $148 << 1;
            $150 = (($149) + ($144)) | 0;
            $151 = (($$384) + 2) | 0;
            $152 = (($5) + ($151) | 0);
            $153 = HEAP8[$152 >> 0] | 0;
            $154 = $153 & 255;
            $155 = (($150) + ($154)) | 0;
            $$sink9$in$in = (($155) + 2) | 0;
            $$sink9$in = $$sink9$in$in >>> 2;
            $$sink9 = $$sink9$in & 255;
            $156 = (($0) + ($141) | 0);
            HEAP8[$156 >> 0] = $$sink9;
            $157 = $154 << 1;
            $158 = (($157) + ($148)) | 0;
            $159 = (($$384) + 3) | 0;
            $160 = (($5) + ($159) | 0);
            $161 = HEAP8[$160 >> 0] | 0;
            $162 = $161 & 255;
            $163 = (($158) + ($162)) | 0;
            $$sink9$in$in$1 = (($163) + 2) | 0;
            $$sink9$in$1 = $$sink9$in$in$1 >>> 2;
            $$sink9$1 = $$sink9$in$1 & 255;
            $164 = (($141) + 1) | 0;
            $165 = (($0) + ($164) | 0);
            HEAP8[$165 >> 0] = $$sink9$1;
            $166 = $162 << 1;
            $167 = (($166) + ($154)) | 0;
            $168 = (($$384) + 4) | 0;
            $169 = (($5) + ($168) | 0);
            $170 = HEAP8[$169 >> 0] | 0;
            $171 = $170 & 255;
            $172 = (($167) + ($171)) | 0;
            $$sink9$in$in$2 = (($172) + 2) | 0;
            $$sink9$in$2 = $$sink9$in$in$2 >>> 2;
            $$sink9$2 = $$sink9$in$2 & 255;
            $173 = (($141) + 2) | 0;
            $174 = (($0) + ($173) | 0);
            HEAP8[$174 >> 0] = $$sink9$2;
            $175 = (($$384) + 3) | 0;
            $176 = (($5) + ($175) | 0);
            $177 = HEAP8[$176 >> 0] | 0;
            $178 = $177 & 255;
            $179 = (($$384) + 4) | 0;
            $180 = (($5) + ($179) | 0);
            $181 = HEAP8[$180 >> 0] | 0;
            $182 = $181 & 255;
            $183 = $182 << 1;
            $184 = (($183) + ($178)) | 0;
            $185 = (($$384) + 5) | 0;
            $186 = (($5) + ($185) | 0);
            $187 = HEAP8[$186 >> 0] | 0;
            $188 = $187 & 255;
            $189 = (($184) + ($188)) | 0;
            $$sink9$in$in$3 = (($189) + 2) | 0;
            $$sink9$in$3 = $$sink9$in$in$3 >>> 2;
            $$sink9$3 = $$sink9$in$3 & 255;
            $190 = (($141) + 3) | 0;
            $191 = (($0) + ($190) | 0);
            HEAP8[$191 >> 0] = $$sink9$3;
            $192 = (($$384) + 4) | 0;
            $193 = (($5) + ($192) | 0);
            $194 = HEAP8[$193 >> 0] | 0;
            $195 = $194 & 255;
            $196 = (($$384) + 5) | 0;
            $197 = (($5) + ($196) | 0);
            $198 = HEAP8[$197 >> 0] | 0;
            $199 = $198 & 255;
            $200 = $199 << 1;
            $201 = (($200) + ($195)) | 0;
            $202 = (($$384) + 6) | 0;
            $203 = (($5) + ($202) | 0);
            $204 = HEAP8[$203 >> 0] | 0;
            $205 = $204 & 255;
            $206 = (($201) + ($205)) | 0;
            $$sink9$in$in$4 = (($206) + 2) | 0;
            $$sink9$in$4 = $$sink9$in$in$4 >>> 2;
            $$sink9$4 = $$sink9$in$4 & 255;
            $207 = (($141) + 4) | 0;
            $208 = (($0) + ($207) | 0);
            HEAP8[$208 >> 0] = $$sink9$4;
            $209 = (($$384) + 5) | 0;
            $210 = (($5) + ($209) | 0);
            $211 = HEAP8[$210 >> 0] | 0;
            $212 = $211 & 255;
            $213 = (($$384) + 6) | 0;
            $214 = (($5) + ($213) | 0);
            $215 = HEAP8[$214 >> 0] | 0;
            $216 = $215 & 255;
            $217 = $216 << 1;
            $218 = (($217) + ($212)) | 0;
            $219 = (($$384) + 7) | 0;
            $220 = (($5) + ($219) | 0);
            $221 = HEAP8[$220 >> 0] | 0;
            $222 = $221 & 255;
            $223 = (($218) + ($222)) | 0;
            $$sink9$in$in$5 = (($223) + 2) | 0;
            $$sink9$in$5 = $$sink9$in$in$5 >>> 2;
            $$sink9$5 = $$sink9$in$5 & 255;
            $224 = (($141) + 5) | 0;
            $225 = (($0) + ($224) | 0);
            HEAP8[$225 >> 0] = $$sink9$5;
            $226 = (($$384) + 6) | 0;
            $227 = (($5) + ($226) | 0);
            $228 = HEAP8[$227 >> 0] | 0;
            $229 = $228 & 255;
            $230 = (($$384) + 7) | 0;
            $231 = (($5) + ($230) | 0);
            $232 = HEAP8[$231 >> 0] | 0;
            $233 = $232 & 255;
            $234 = $233 << 1;
            $235 = (($234) + ($229)) | 0;
            $236 = (($$384) + 8) | 0;
            $237 = (($5) + ($236) | 0);
            $238 = HEAP8[$237 >> 0] | 0;
            $239 = $238 & 255;
            $240 = (($235) + ($239)) | 0;
            $$sink9$in$in$6 = (($240) + 2) | 0;
            $$sink9$in$6 = $$sink9$in$in$6 >>> 2;
            $$sink9$6 = $$sink9$in$6 & 255;
            $241 = (($141) + 6) | 0;
            $242 = (($0) + ($241) | 0);
            HEAP8[$242 >> 0] = $$sink9$6;
            $243 = (($$384) + 7) | 0;
            $244 = (($5) + ($243) | 0);
            $245 = HEAP8[$244 >> 0] | 0;
            $246 = $245 & 255;
            $247 = (($$384) + 8) | 0;
            $248 = (($5) + ($247) | 0);
            $249 = HEAP8[$248 >> 0] | 0;
            $250 = $249 & 255;
            $251 = $250 << 1;
            $252 = (($251) + ($246)) | 0;
            $253 = (($$384) + 9) | 0;
            $254 = (($5) + ($253) | 0);
            $255 = HEAP8[$254 >> 0] | 0;
            $256 = $255 & 255;
            $257 = (($252) + ($256)) | 0;
            $$sink9$in$in$7 = (($257) + 2) | 0;
            $$sink9$in$7 = $$sink9$in$in$7 >>> 2;
            $$sink9$7 = $$sink9$in$7 & 255;
            $258 = (($141) + 7) | 0;
            $259 = (($0) + ($258) | 0);
            HEAP8[$259 >> 0] = $$sink9$7;
            $exitcond = ($145 | 0) == (8);
            if ($exitcond) {
                label = 7;
                break;
            } else {
                $$384 = $145;
            }
        }
        if ((label | 0) == 7) {
            STACKTOP = sp; return;
        }
        $260 = HEAP8[$136 >> 0] | 0;
        $261 = $260 & 255;
        $262 = HEAP8[$scevgep >> 0] | 0;
        $263 = $262 & 255;
        $264 = $263 << 1;
        $265 = (($264) + ($261)) | 0;
        $266 = ((($5)) + 9 | 0);
        $267 = HEAP8[$266 >> 0] | 0;
        $268 = $267 & 255;
        $269 = (($265) + ($268)) | 0;
        $$sink9$in$in$us = (($269) + 2) | 0;
        $$sink9$in$us = $$sink9$in$in$us >>> 2;
        $$sink9$us = $$sink9$in$us & 255;
        $270 = (($0) + ($141) | 0);
        HEAP8[$270 >> 0] = $$sink9$us;
        $271 = HEAP8[$scevgep >> 0] | 0;
        $272 = $271 & 255;
        $273 = ((($5)) + 9 | 0);
        $274 = HEAP8[$273 >> 0] | 0;
        $275 = $274 & 255;
        $276 = $275 << 1;
        $277 = (($276) + ($272)) | 0;
        $278 = ((($5)) + 10 | 0);
        $279 = HEAP8[$278 >> 0] | 0;
        $280 = $279 & 255;
        $281 = (($277) + ($280)) | 0;
        $$sink9$in$in$us$1 = (($281) + 2) | 0;
        $$sink9$in$us$1 = $$sink9$in$in$us$1 >>> 2;
        $$sink9$us$1 = $$sink9$in$us$1 & 255;
        $282 = (($141) + 1) | 0;
        $283 = (($0) + ($282) | 0);
        HEAP8[$283 >> 0] = $$sink9$us$1;
        $284 = ((($5)) + 9 | 0);
        $285 = HEAP8[$284 >> 0] | 0;
        $286 = $285 & 255;
        $287 = ((($5)) + 10 | 0);
        $288 = HEAP8[$287 >> 0] | 0;
        $289 = $288 & 255;
        $290 = $289 << 1;
        $291 = (($290) + ($286)) | 0;
        $292 = ((($5)) + 11 | 0);
        $293 = HEAP8[$292 >> 0] | 0;
        $294 = $293 & 255;
        $295 = (($291) + ($294)) | 0;
        $$sink9$in$in$us$2 = (($295) + 2) | 0;
        $$sink9$in$us$2 = $$sink9$in$in$us$2 >>> 2;
        $$sink9$us$2 = $$sink9$in$us$2 & 255;
        $296 = (($141) + 2) | 0;
        $297 = (($0) + ($296) | 0);
        HEAP8[$297 >> 0] = $$sink9$us$2;
        $298 = ((($5)) + 10 | 0);
        $299 = HEAP8[$298 >> 0] | 0;
        $300 = $299 & 255;
        $301 = ((($5)) + 11 | 0);
        $302 = HEAP8[$301 >> 0] | 0;
        $303 = $302 & 255;
        $304 = $303 << 1;
        $305 = (($304) + ($300)) | 0;
        $306 = ((($5)) + 12 | 0);
        $307 = HEAP8[$306 >> 0] | 0;
        $308 = $307 & 255;
        $309 = (($305) + ($308)) | 0;
        $$sink9$in$in$us$3 = (($309) + 2) | 0;
        $$sink9$in$us$3 = $$sink9$in$in$us$3 >>> 2;
        $$sink9$us$3 = $$sink9$in$us$3 & 255;
        $310 = (($141) + 3) | 0;
        $311 = (($0) + ($310) | 0);
        HEAP8[$311 >> 0] = $$sink9$us$3;
        $312 = ((($5)) + 11 | 0);
        $313 = HEAP8[$312 >> 0] | 0;
        $314 = $313 & 255;
        $315 = ((($5)) + 12 | 0);
        $316 = HEAP8[$315 >> 0] | 0;
        $317 = $316 & 255;
        $318 = $317 << 1;
        $319 = (($318) + ($314)) | 0;
        $320 = ((($5)) + 13 | 0);
        $321 = HEAP8[$320 >> 0] | 0;
        $322 = $321 & 255;
        $323 = (($319) + ($322)) | 0;
        $$sink9$in$in$us$4 = (($323) + 2) | 0;
        $$sink9$in$us$4 = $$sink9$in$in$us$4 >>> 2;
        $$sink9$us$4 = $$sink9$in$us$4 & 255;
        $324 = (($141) + 4) | 0;
        $325 = (($0) + ($324) | 0);
        HEAP8[$325 >> 0] = $$sink9$us$4;
        $326 = ((($5)) + 12 | 0);
        $327 = HEAP8[$326 >> 0] | 0;
        $328 = $327 & 255;
        $329 = ((($5)) + 13 | 0);
        $330 = HEAP8[$329 >> 0] | 0;
        $331 = $330 & 255;
        $332 = $331 << 1;
        $333 = (($332) + ($328)) | 0;
        $334 = HEAP8[$137 >> 0] | 0;
        $335 = $334 & 255;
        $336 = (($333) + ($335)) | 0;
        $$sink9$in$in$us$5 = (($336) + 2) | 0;
        $$sink9$in$us$5 = $$sink9$in$in$us$5 >>> 2;
        $$sink9$us$5 = $$sink9$in$us$5 & 255;
        $337 = (($141) + 5) | 0;
        $338 = (($0) + ($337) | 0);
        HEAP8[$338 >> 0] = $$sink9$us$5;
        $339 = ((($5)) + 13 | 0);
        $340 = HEAP8[$339 >> 0] | 0;
        $341 = $340 & 255;
        $342 = HEAP8[$137 >> 0] | 0;
        $343 = $342 & 255;
        $344 = $343 << 1;
        $345 = (($344) + ($341)) | 0;
        $346 = HEAP8[$138 >> 0] | 0;
        $347 = $346 & 255;
        $348 = (($345) + ($347)) | 0;
        $$sink9$in$in$us$6 = (($348) + 2) | 0;
        $$sink9$in$us$6 = $$sink9$in$in$us$6 >>> 2;
        $$sink9$us$6 = $$sink9$in$us$6 & 255;
        $349 = (($141) + 6) | 0;
        $350 = (($0) + ($349) | 0);
        HEAP8[$350 >> 0] = $$sink9$us$6;
        $351 = (($141) + 7) | 0;
        $352 = (($0) + ($351) | 0);
        HEAP8[$352 >> 0] = $124;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec21WelsI8x8LumaPredDDR_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$094 = 0, $$195 = 0, $$299 = 0, $$299$be = 0, $$sink1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
        var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
        var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
        var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
        var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
        var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
        var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
        var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
        var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
        var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
        var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
        var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
        var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
        var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
        var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond102 = 0, $exitcond103 = 0, $indvars$iv = 0, $indvars$iv$be = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 40 | 0;
        $6 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $7 = ((($4)) + 4 | 0);
        HEAP32[$7 >> 2] = $1;
        $8 = $1 << 1;
        $9 = ((($4)) + 8 | 0);
        HEAP32[$9 >> 2] = $8;
        $10 = ($1 * 3) | 0;
        $11 = ((($4)) + 12 | 0);
        HEAP32[$11 >> 2] = $10;
        $12 = $1 << 2;
        $13 = ((($4)) + 16 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = ($1 * 5) | 0;
        $15 = ((($4)) + 20 | 0);
        HEAP32[$15 >> 2] = $14;
        $16 = ($1 * 6) | 0;
        $17 = ((($4)) + 24 | 0);
        HEAP32[$17 >> 2] = $16;
        $18 = ($1 * 7) | 0;
        $19 = ((($4)) + 28 | 0);
        HEAP32[$19 >> 2] = $18;
        $20 = ((($0)) + -1 | 0);
        $21 = HEAP8[$20 >> 0] | 0;
        $22 = $21 & 255;
        $23 = $1 ^ -1;
        $24 = (($0) + ($23) | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 & 255;
        $27 = $26 << 1;
        $28 = (0 - ($1)) | 0;
        $29 = (($0) + ($28) | 0);
        $30 = HEAP8[$29 >> 0] | 0;
        $31 = $30 & 255;
        $32 = (($22) + 2) | 0;
        $33 = (($32) + ($27)) | 0;
        $34 = (($33) + ($31)) | 0;
        $35 = $22 << 1;
        $36 = (($1) + -1) | 0;
        $37 = (($0) + ($36) | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = $38 & 255;
        $40 = (($26) + 2) | 0;
        $41 = (($40) + ($35)) | 0;
        $42 = (($41) + ($39)) | 0;
        $43 = $42 >>> 2;
        $44 = $43 & 255;
        HEAP8[$5 >> 0] = $44;
        $45 = $31 << 1;
        $46 = (1 - ($1)) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = HEAP8[$47 >> 0] | 0;
        $49 = $48 & 255;
        $50 = (($40) + ($45)) | 0;
        $51 = (($50) + ($49)) | 0;
        $52 = $51 >>> 2;
        $53 = $52 & 255;
        HEAP8[$6 >> 0] = $53;
        $54 = $39 << 1;
        $55 = (($8) + -1) | 0;
        $56 = (($0) + ($55) | 0);
        $57 = HEAP8[$56 >> 0] | 0;
        $58 = $57 & 255;
        $59 = (($32) + ($54)) | 0;
        $60 = (($59) + ($58)) | 0;
        $61 = $60 >>> 2;
        $62 = $61 & 255;
        $63 = ((($5)) + 1 | 0);
        HEAP8[$63 >> 0] = $62;
        $64 = $49 << 1;
        $65 = (2 - ($1)) | 0;
        $66 = (($0) + ($65) | 0);
        $67 = HEAP8[$66 >> 0] | 0;
        $68 = $67 & 255;
        $69 = (($31) + 2) | 0;
        $70 = (($69) + ($64)) | 0;
        $71 = (($70) + ($68)) | 0;
        $72 = $71 >>> 2;
        $73 = $72 & 255;
        $74 = ((($6)) + 1 | 0);
        HEAP8[$74 >> 0] = $73;
        $75 = $58 << 1;
        $76 = (($10) + -1) | 0;
        $77 = (($0) + ($76) | 0);
        $78 = HEAP8[$77 >> 0] | 0;
        $79 = $78 & 255;
        $80 = (($39) + 2) | 0;
        $81 = (($80) + ($75)) | 0;
        $82 = (($81) + ($79)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        $85 = ((($5)) + 2 | 0);
        HEAP8[$85 >> 0] = $84;
        $86 = $68 << 1;
        $87 = (3 - ($1)) | 0;
        $88 = (($0) + ($87) | 0);
        $89 = HEAP8[$88 >> 0] | 0;
        $90 = $89 & 255;
        $91 = (($49) + 2) | 0;
        $92 = (($91) + ($86)) | 0;
        $93 = (($92) + ($90)) | 0;
        $94 = $93 >>> 2;
        $95 = $94 & 255;
        $96 = ((($6)) + 2 | 0);
        HEAP8[$96 >> 0] = $95;
        $97 = $79 << 1;
        $98 = (($12) + -1) | 0;
        $99 = (($0) + ($98) | 0);
        $100 = HEAP8[$99 >> 0] | 0;
        $101 = $100 & 255;
        $102 = (($58) + 2) | 0;
        $103 = (($102) + ($97)) | 0;
        $104 = (($103) + ($101)) | 0;
        $105 = $104 >>> 2;
        $106 = $105 & 255;
        $107 = ((($5)) + 3 | 0);
        HEAP8[$107 >> 0] = $106;
        $108 = $90 << 1;
        $109 = (4 - ($1)) | 0;
        $110 = (($0) + ($109) | 0);
        $111 = HEAP8[$110 >> 0] | 0;
        $112 = $111 & 255;
        $113 = (($68) + 2) | 0;
        $114 = (($113) + ($108)) | 0;
        $115 = (($114) + ($112)) | 0;
        $116 = $115 >>> 2;
        $117 = $116 & 255;
        $118 = ((($6)) + 3 | 0);
        HEAP8[$118 >> 0] = $117;
        $119 = HEAP32[$11 >> 2] | 0;
        $120 = (($119) + -1) | 0;
        $121 = (($0) + ($120) | 0);
        $122 = HEAP8[$121 >> 0] | 0;
        $123 = $122 & 255;
        $124 = HEAP32[$13 >> 2] | 0;
        $125 = (($124) + -1) | 0;
        $126 = (($0) + ($125) | 0);
        $127 = HEAP8[$126 >> 0] | 0;
        $128 = $127 & 255;
        $129 = $128 << 1;
        $130 = HEAP32[$15 >> 2] | 0;
        $131 = (($130) + -1) | 0;
        $132 = (($0) + ($131) | 0);
        $133 = HEAP8[$132 >> 0] | 0;
        $134 = $133 & 255;
        $135 = (($123) + 2) | 0;
        $136 = (($135) + ($129)) | 0;
        $137 = (($136) + ($134)) | 0;
        $138 = $137 >>> 2;
        $139 = $138 & 255;
        $140 = ((($5)) + 4 | 0);
        HEAP8[$140 >> 0] = $139;
        $141 = $112 << 1;
        $142 = (5 - ($1)) | 0;
        $143 = (($0) + ($142) | 0);
        $144 = HEAP8[$143 >> 0] | 0;
        $145 = $144 & 255;
        $146 = (($90) + 2) | 0;
        $147 = (($146) + ($141)) | 0;
        $148 = (($147) + ($145)) | 0;
        $149 = $148 >>> 2;
        $150 = $149 & 255;
        $151 = ((($6)) + 4 | 0);
        HEAP8[$151 >> 0] = $150;
        $152 = $134 << 1;
        $153 = HEAP32[$17 >> 2] | 0;
        $154 = (($153) + -1) | 0;
        $155 = (($0) + ($154) | 0);
        $156 = HEAP8[$155 >> 0] | 0;
        $157 = $156 & 255;
        $158 = (($128) + 2) | 0;
        $159 = (($158) + ($152)) | 0;
        $160 = (($159) + ($157)) | 0;
        $161 = $160 >>> 2;
        $162 = $161 & 255;
        $163 = ((($5)) + 5 | 0);
        HEAP8[$163 >> 0] = $162;
        $164 = $145 << 1;
        $165 = (6 - ($1)) | 0;
        $166 = (($0) + ($165) | 0);
        $167 = HEAP8[$166 >> 0] | 0;
        $168 = $167 & 255;
        $169 = (($112) + 2) | 0;
        $170 = (($169) + ($164)) | 0;
        $171 = (($170) + ($168)) | 0;
        $172 = $171 >>> 2;
        $173 = $172 & 255;
        $174 = ((($6)) + 5 | 0);
        HEAP8[$174 >> 0] = $173;
        $175 = $157 << 1;
        $176 = HEAP32[$19 >> 2] | 0;
        $177 = (($176) + -1) | 0;
        $178 = (($0) + ($177) | 0);
        $179 = HEAP8[$178 >> 0] | 0;
        $180 = $179 & 255;
        $181 = (($134) + 2) | 0;
        $182 = (($181) + ($175)) | 0;
        $183 = (($182) + ($180)) | 0;
        $184 = $183 >>> 2;
        $185 = $184 & 255;
        $186 = ((($5)) + 6 | 0);
        HEAP8[$186 >> 0] = $185;
        $187 = $168 << 1;
        $188 = (7 - ($1)) | 0;
        $189 = (($0) + ($188) | 0);
        $190 = HEAP8[$189 >> 0] | 0;
        $191 = $190 & 255;
        $192 = (($145) + 2) | 0;
        $193 = (($192) + ($187)) | 0;
        $194 = (($193) + ($191)) | 0;
        $195 = $194 >>> 2;
        $196 = $195 & 255;
        $197 = ((($6)) + 6 | 0);
        HEAP8[$197 >> 0] = $196;
        $198 = $34 >>> 2;
        $199 = ($180 * 3) | 0;
        $200 = (($157) + 2) | 0;
        $201 = (($200) + ($199)) | 0;
        $202 = $201 >>> 2;
        $203 = $202 & 255;
        $204 = ((($5)) + 7 | 0);
        HEAP8[$204 >> 0] = $203;
        if ($3) {
            $205 = $191 << 1;
            $206 = (($205) + ($168)) | 0;
            $207 = (8 - ($1)) | 0;
            $208 = (($0) + ($207) | 0);
            $209 = HEAP8[$208 >> 0] | 0;
            $210 = $209 & 255;
            $211 = (($206) + ($210)) | 0;
            $$sink1 = $211;
        } else {
            $212 = ($191 * 3) | 0;
            $213 = (($212) + ($168)) | 0;
            $$sink1 = $213;
        }
        $214 = (($$sink1) + 2) | 0;
        $215 = $214 >>> 2;
        $216 = $215 & 255;
        $217 = ((($6)) + 7 | 0);
        HEAP8[$217 >> 0] = $216;
        $218 = $198 & 255;
        $219 = HEAP8[$5 >> 0] | 0;
        $220 = $219 & 255;
        $221 = $220 << 1;
        $222 = HEAP8[$63 >> 0] | 0;
        $223 = $222 & 255;
        $224 = (($218) + 2) | 0;
        $225 = (($224) + ($221)) | 0;
        $226 = (($225) + ($223)) | 0;
        $227 = $226 >>> 2;
        $228 = $227 & 255;
        $229 = HEAP8[$6 >> 0] | 0;
        $230 = $229 & 255;
        $231 = $218 << 1;
        $232 = (($231) + 2) | 0;
        $233 = (($232) + ($230)) | 0;
        $234 = (($233) + ($220)) | 0;
        $235 = $234 >>> 2;
        $236 = $235 & 255;
        $237 = $230 << 1;
        $238 = HEAP8[$74 >> 0] | 0;
        $239 = $238 & 255;
        $240 = (($224) + ($237)) | 0;
        $241 = (($240) + ($239)) | 0;
        $242 = $241 >>> 2;
        $243 = $242 & 255;
        $$299 = 0; $indvars$iv = -1;
        while (1) {
            $244 = (($$299) + -1) | 0;
            $245 = ($$299 | 0) > (1);
            if ($245) {
                $246 = (($4) + ($$299 << 2) | 0);
                $247 = HEAP32[$246 >> 2] | 0;
                $$094 = 0;
                while (1) {
                    $248 = (($$299) - ($$094)) | 0;
                    $249 = (($248) + -2) | 0;
                    $250 = (($5) + ($249) | 0);
                    $251 = HEAP8[$250 >> 0] | 0;
                    $252 = $251 & 255;
                    $253 = (($248) + -1) | 0;
                    $254 = (($5) + ($253) | 0);
                    $255 = HEAP8[$254 >> 0] | 0;
                    $256 = $255 & 255;
                    $257 = $256 << 1;
                    $258 = (($5) + ($248) | 0);
                    $259 = HEAP8[$258 >> 0] | 0;
                    $260 = $259 & 255;
                    $261 = (($252) + 2) | 0;
                    $262 = (($261) + ($257)) | 0;
                    $263 = (($262) + ($260)) | 0;
                    $264 = $263 >>> 2;
                    $265 = $264 & 255;
                    $266 = (($247) + ($$094)) | 0;
                    $267 = (($0) + ($266) | 0);
                    HEAP8[$267 >> 0] = $265;
                    $268 = (($$094) + 1) | 0;
                    $exitcond = ($268 | 0) == ($indvars$iv | 0);
                    if ($exitcond) {
                        break;
                    } else {
                        $$094 = $268;
                    }
                }
            }
            $269 = ($$299 | 0) > (0);
            $270 = (($4) + ($$299 << 2) | 0);
            $271 = HEAP32[$270 >> 2] | 0;
            if ($269) {
                $277 = (($271) + ($244)) | 0;
                $278 = (($0) + ($277) | 0);
                HEAP8[$278 >> 0] = $228;
                $279 = (($271) + ($$299)) | 0;
                $280 = (($0) + ($279) | 0);
                HEAP8[$280 >> 0] = $236;
                $281 = ($$299 | 0) < (7);
                if ($281) {
                    $282 = (($$299) + 1) | 0;
                    $283 = (($282) + ($271)) | 0;
                    $284 = (($0) + ($283) | 0);
                    HEAP8[$284 >> 0] = $243;
                    $285 = ($$299 | 0) == (6);
                    if ($285) {
                        $$299$be = 7;
                    } else {
                        label = 12;
                    }
                } else {
                    label = 14;
                }
            } else {
                $272 = (($271) + ($$299)) | 0;
                $273 = (($0) + ($272) | 0);
                HEAP8[$273 >> 0] = $236;
                $274 = (($$299) + 1) | 0;
                $275 = (($274) + ($271)) | 0;
                $276 = (($0) + ($275) | 0);
                HEAP8[$276 >> 0] = $243;
                label = 12;
            }
            if ((label | 0) == 12) {
                label = 0;
                $286 = (($$299) + 2) | 0;
                $$195 = $286;
                while (1) {
                    $287 = (($$195) - ($$299)) | 0;
                    $288 = (($287) + -2) | 0;
                    $289 = (($6) + ($288) | 0);
                    $290 = HEAP8[$289 >> 0] | 0;
                    $291 = $290 & 255;
                    $292 = (($287) + -1) | 0;
                    $293 = (($6) + ($292) | 0);
                    $294 = HEAP8[$293 >> 0] | 0;
                    $295 = $294 & 255;
                    $296 = $295 << 1;
                    $297 = (($6) + ($287) | 0);
                    $298 = HEAP8[$297 >> 0] | 0;
                    $299 = $298 & 255;
                    $300 = (($291) + 2) | 0;
                    $301 = (($300) + ($296)) | 0;
                    $302 = (($301) + ($299)) | 0;
                    $303 = $302 >>> 2;
                    $304 = $303 & 255;
                    $305 = (($271) + ($$195)) | 0;
                    $306 = (($0) + ($305) | 0);
                    HEAP8[$306 >> 0] = $304;
                    $307 = (($$195) + 1) | 0;
                    $exitcond102 = ($307 | 0) == (8);
                    if ($exitcond102) {
                        label = 14;
                        break;
                    } else {
                        $$195 = $307;
                    }
                }
            }
            if ((label | 0) == 14) {
                label = 0;
                $308 = (($$299) + 1) | 0;
                $exitcond103 = ($308 | 0) == (8);
                if ($exitcond103) {
                    break;
                } else {
                    $$299$be = $308;
                }
            }
            $indvars$iv$be = (($indvars$iv) + 1) | 0;
            $$299 = $$299$be; $indvars$iv = $indvars$iv$be;
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI8x8LumaPredVL_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$279 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink68$ph = 0, $$sink88 = 0, $$sink89 = 0, $$sink90 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
        var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
        var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
        var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
        var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
        var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
        var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
        var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
        var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
        var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
        var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
        var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
        var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
        var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
        var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
        var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
        var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
        var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
        var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
        var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
        var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
        var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
        var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $98 = 0, $99 = 0, $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $6 = ((($4)) + 4 | 0);
        HEAP32[$6 >> 2] = $1;
        $7 = $1 << 1;
        $8 = ((($4)) + 8 | 0);
        HEAP32[$8 >> 2] = $7;
        $9 = ($1 * 3) | 0;
        $10 = ((($4)) + 12 | 0);
        HEAP32[$10 >> 2] = $9;
        $11 = $1 << 2;
        $12 = ((($4)) + 16 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = ($1 * 5) | 0;
        $14 = ((($4)) + 20 | 0);
        HEAP32[$14 >> 2] = $13;
        $15 = ($1 * 6) | 0;
        $16 = ((($4)) + 24 | 0);
        HEAP32[$16 >> 2] = $15;
        $17 = ($1 * 7) | 0;
        $18 = ((($4)) + 28 | 0);
        HEAP32[$18 >> 2] = $17;
        $19 = (0 - ($1)) | 0;
        if ($2) {
            $20 = $1 ^ -1;
            $21 = (($0) + ($20) | 0);
            $22 = HEAP8[$21 >> 0] | 0;
            $23 = $22 & 255;
            $24 = (($0) + ($19) | 0);
            $25 = HEAP8[$24 >> 0] | 0;
            $26 = $25 & 255;
            $27 = $26 << 1;
            $28 = (($27) + ($23)) | 0;
            $$pre$phiZ2D = $20; $$sink68$ph = $28;
        } else {
            $29 = (($0) + ($19) | 0);
            $30 = HEAP8[$29 >> 0] | 0;
            $31 = $30 & 255;
            $32 = ($31 * 3) | 0;
            $$pre = $1 ^ -1;
            $$pre$phiZ2D = $$pre; $$sink68$ph = $32;
        }
        $33 = (1 - ($1)) | 0;
        $34 = (($0) + ($33) | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = (($$sink68$ph) + 2) | 0;
        $38 = (($37) + ($36)) | 0;
        $39 = $38 >>> 2;
        $40 = $39 & 255;
        HEAP8[$5 >> 0] = $40;
        $41 = (($$pre$phiZ2D) + 1) | 0;
        $42 = (($0) + ($41) | 0);
        $43 = HEAP8[$42 >> 0] | 0;
        $44 = $43 & 255;
        $45 = $36 << 1;
        $46 = (($45) + ($44)) | 0;
        $47 = (2 - ($1)) | 0;
        $48 = (($0) + ($47) | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = $49 & 255;
        $51 = (($46) + 2) | 0;
        $52 = (($51) + ($50)) | 0;
        $53 = $52 >>> 2;
        $54 = $53 & 255;
        $55 = ((($5)) + 1 | 0);
        HEAP8[$55 >> 0] = $54;
        $56 = (($$pre$phiZ2D) + 2) | 0;
        $57 = (($0) + ($56) | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = $58 & 255;
        $60 = $50 << 1;
        $61 = (($60) + ($59)) | 0;
        $62 = (3 - ($1)) | 0;
        $63 = (($0) + ($62) | 0);
        $64 = HEAP8[$63 >> 0] | 0;
        $65 = $64 & 255;
        $66 = (($61) + 2) | 0;
        $67 = (($66) + ($65)) | 0;
        $68 = $67 >>> 2;
        $69 = $68 & 255;
        $70 = ((($5)) + 2 | 0);
        HEAP8[$70 >> 0] = $69;
        $71 = (($$pre$phiZ2D) + 3) | 0;
        $72 = (($0) + ($71) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = $65 << 1;
        $76 = (($75) + ($74)) | 0;
        $77 = (4 - ($1)) | 0;
        $78 = (($0) + ($77) | 0);
        $79 = HEAP8[$78 >> 0] | 0;
        $80 = $79 & 255;
        $81 = (($76) + 2) | 0;
        $82 = (($81) + ($80)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        $85 = ((($5)) + 3 | 0);
        HEAP8[$85 >> 0] = $84;
        $86 = (($$pre$phiZ2D) + 4) | 0;
        $87 = (($0) + ($86) | 0);
        $88 = HEAP8[$87 >> 0] | 0;
        $89 = $88 & 255;
        $90 = $80 << 1;
        $91 = (($90) + ($89)) | 0;
        $92 = (5 - ($1)) | 0;
        $93 = (($0) + ($92) | 0);
        $94 = HEAP8[$93 >> 0] | 0;
        $95 = $94 & 255;
        $96 = (($91) + 2) | 0;
        $97 = (($96) + ($95)) | 0;
        $98 = $97 >>> 2;
        $99 = $98 & 255;
        $100 = ((($5)) + 4 | 0);
        HEAP8[$100 >> 0] = $99;
        $101 = (($$pre$phiZ2D) + 5) | 0;
        $102 = (($0) + ($101) | 0);
        $103 = HEAP8[$102 >> 0] | 0;
        $104 = $103 & 255;
        $105 = $95 << 1;
        $106 = (($105) + ($104)) | 0;
        $107 = (6 - ($1)) | 0;
        $108 = (($0) + ($107) | 0);
        $109 = HEAP8[$108 >> 0] | 0;
        $110 = $109 & 255;
        $111 = (($106) + 2) | 0;
        $112 = (($111) + ($110)) | 0;
        $113 = $112 >>> 2;
        $114 = $113 & 255;
        $115 = ((($5)) + 5 | 0);
        HEAP8[$115 >> 0] = $114;
        $116 = (($$pre$phiZ2D) + 6) | 0;
        $117 = (($0) + ($116) | 0);
        $118 = HEAP8[$117 >> 0] | 0;
        $119 = $118 & 255;
        $120 = $110 << 1;
        $121 = (($120) + ($119)) | 0;
        $122 = (7 - ($1)) | 0;
        $123 = (($0) + ($122) | 0);
        $124 = HEAP8[$123 >> 0] | 0;
        $125 = $124 & 255;
        $126 = (($121) + 2) | 0;
        $127 = (($126) + ($125)) | 0;
        $128 = $127 >>> 2;
        $129 = $128 & 255;
        $130 = ((($5)) + 6 | 0);
        HEAP8[$130 >> 0] = $129;
        $131 = (($$pre$phiZ2D) + 7) | 0;
        $132 = (($0) + ($131) | 0);
        $133 = HEAP8[$132 >> 0] | 0;
        $134 = $133 & 255;
        $135 = $125 << 1;
        $136 = (($135) + ($134)) | 0;
        $137 = (8 - ($1)) | 0;
        $138 = (($0) + ($137) | 0);
        $139 = HEAP8[$138 >> 0] | 0;
        $140 = $139 & 255;
        $141 = (($136) + 2) | 0;
        $142 = (($141) + ($140)) | 0;
        $143 = $142 >>> 2;
        $144 = $143 & 255;
        $145 = ((($5)) + 7 | 0);
        HEAP8[$145 >> 0] = $144;
        $146 = (($$pre$phiZ2D) + 8) | 0;
        $147 = (($0) + ($146) | 0);
        $148 = HEAP8[$147 >> 0] | 0;
        $149 = $148 & 255;
        $150 = $140 << 1;
        $151 = (($150) + ($149)) | 0;
        $152 = (9 - ($1)) | 0;
        $153 = (($0) + ($152) | 0);
        $154 = HEAP8[$153 >> 0] | 0;
        $155 = $154 & 255;
        $156 = (($151) + 2) | 0;
        $157 = (($156) + ($155)) | 0;
        $158 = $157 >>> 2;
        $159 = $158 & 255;
        $160 = ((($5)) + 8 | 0);
        HEAP8[$160 >> 0] = $159;
        $161 = (($$pre$phiZ2D) + 9) | 0;
        $162 = (($0) + ($161) | 0);
        $163 = HEAP8[$162 >> 0] | 0;
        $164 = $163 & 255;
        $165 = $155 << 1;
        $166 = (($165) + ($164)) | 0;
        $167 = (10 - ($1)) | 0;
        $168 = (($0) + ($167) | 0);
        $169 = HEAP8[$168 >> 0] | 0;
        $170 = $169 & 255;
        $171 = (($166) + 2) | 0;
        $172 = (($171) + ($170)) | 0;
        $173 = $172 >>> 2;
        $174 = $173 & 255;
        $175 = ((($5)) + 9 | 0);
        HEAP8[$175 >> 0] = $174;
        $176 = (($$pre$phiZ2D) + 10) | 0;
        $177 = (($0) + ($176) | 0);
        $178 = HEAP8[$177 >> 0] | 0;
        $179 = $178 & 255;
        $180 = $170 << 1;
        $181 = (($180) + ($179)) | 0;
        $182 = (11 - ($1)) | 0;
        $183 = (($0) + ($182) | 0);
        $184 = HEAP8[$183 >> 0] | 0;
        $185 = $184 & 255;
        $186 = (($181) + 2) | 0;
        $187 = (($186) + ($185)) | 0;
        $188 = $187 >>> 2;
        $189 = $188 & 255;
        $190 = ((($5)) + 10 | 0);
        HEAP8[$190 >> 0] = $189;
        $191 = (($$pre$phiZ2D) + 11) | 0;
        $192 = (($0) + ($191) | 0);
        $193 = HEAP8[$192 >> 0] | 0;
        $194 = $193 & 255;
        $195 = $185 << 1;
        $196 = (($195) + ($194)) | 0;
        $197 = (12 - ($1)) | 0;
        $198 = (($0) + ($197) | 0);
        $199 = HEAP8[$198 >> 0] | 0;
        $200 = $199 & 255;
        $201 = (($196) + 2) | 0;
        $202 = (($201) + ($200)) | 0;
        $203 = $202 >>> 2;
        $204 = $203 & 255;
        $205 = ((($5)) + 11 | 0);
        HEAP8[$205 >> 0] = $204;
        $206 = (($$pre$phiZ2D) + 12) | 0;
        $207 = (($0) + ($206) | 0);
        $208 = HEAP8[$207 >> 0] | 0;
        $209 = $208 & 255;
        $210 = $200 << 1;
        $211 = (($210) + ($209)) | 0;
        $212 = (13 - ($1)) | 0;
        $213 = (($0) + ($212) | 0);
        $214 = HEAP8[$213 >> 0] | 0;
        $215 = $214 & 255;
        $216 = (($211) + 2) | 0;
        $217 = (($216) + ($215)) | 0;
        $218 = $217 >>> 2;
        $219 = $218 & 255;
        $220 = ((($5)) + 12 | 0);
        HEAP8[$220 >> 0] = $219;
        $221 = (($$pre$phiZ2D) + 13) | 0;
        $222 = (($0) + ($221) | 0);
        $223 = HEAP8[$222 >> 0] | 0;
        $224 = $223 & 255;
        $225 = $215 << 1;
        $226 = (($225) + ($224)) | 0;
        $227 = (14 - ($1)) | 0;
        $228 = (($0) + ($227) | 0);
        $229 = HEAP8[$228 >> 0] | 0;
        $230 = $229 & 255;
        $231 = (($226) + 2) | 0;
        $232 = (($231) + ($230)) | 0;
        $233 = $232 >>> 2;
        $234 = $233 & 255;
        $235 = ((($5)) + 13 | 0);
        HEAP8[$235 >> 0] = $234;
        $236 = (($$pre$phiZ2D) + 14) | 0;
        $237 = (($0) + ($236) | 0);
        $238 = HEAP8[$237 >> 0] | 0;
        $239 = $238 & 255;
        $240 = $230 << 1;
        $241 = (($240) + ($239)) | 0;
        $242 = (15 - ($1)) | 0;
        $243 = (($0) + ($242) | 0);
        $244 = HEAP8[$243 >> 0] | 0;
        $245 = $244 & 255;
        $246 = (($241) + 2) | 0;
        $247 = (($246) + ($245)) | 0;
        $248 = $247 >>> 2;
        $249 = $248 & 255;
        $250 = ((($5)) + 14 | 0);
        HEAP8[$250 >> 0] = $249;
        $251 = ($245 * 3) | 0;
        $252 = (($230) + 2) | 0;
        $253 = (($252) + ($251)) | 0;
        $254 = $253 >>> 2;
        $255 = $254 & 255;
        $256 = ((($5)) + 15 | 0);
        HEAP8[$256 >> 0] = $255;
        $$279 = 0;
        while (1) {
            $257 = $$279 & 1;
            $258 = ($257 | 0) == (0);
            $259 = $$279 >> 1;
            $260 = (($4) + ($$279 << 2) | 0);
            $261 = HEAP32[$260 >> 2] | 0;
            $262 = (($5) + ($259) | 0);
            $263 = HEAP8[$262 >> 0] | 0;
            $264 = $263 & 255;
            $265 = (($259) + 1) | 0;
            $266 = (($5) + ($265) | 0);
            $267 = HEAP8[$266 >> 0] | 0;
            $268 = $267 & 255;
            if ($258) {
                $399 = (($264) + 1) | 0;
                $400 = (($399) + ($268)) | 0;
                $401 = $400 >>> 1;
                $402 = $401 & 255;
                $403 = (($0) + ($261) | 0);
                HEAP8[$403 >> 0] = $402;
                $404 = (($259) + 2) | 0;
                $405 = (($5) + ($404) | 0);
                $406 = HEAP8[$405 >> 0] | 0;
                $407 = $406 & 255;
                $408 = (($268) + 1) | 0;
                $409 = (($408) + ($407)) | 0;
                $410 = $409 >>> 1;
                $411 = $410 & 255;
                $412 = (($261) + 1) | 0;
                $413 = (($0) + ($412) | 0);
                HEAP8[$413 >> 0] = $411;
                $414 = (($259) + 2) | 0;
                $415 = (($5) + ($414) | 0);
                $416 = HEAP8[$415 >> 0] | 0;
                $417 = $416 & 255;
                $418 = (($259) + 3) | 0;
                $419 = (($5) + ($418) | 0);
                $420 = HEAP8[$419 >> 0] | 0;
                $421 = $420 & 255;
                $422 = (($417) + 1) | 0;
                $423 = (($422) + ($421)) | 0;
                $424 = $423 >>> 1;
                $425 = $424 & 255;
                $426 = (($261) + 2) | 0;
                $427 = (($0) + ($426) | 0);
                HEAP8[$427 >> 0] = $425;
                $428 = (($259) + 3) | 0;
                $429 = (($5) + ($428) | 0);
                $430 = HEAP8[$429 >> 0] | 0;
                $431 = $430 & 255;
                $432 = (($259) + 4) | 0;
                $433 = (($5) + ($432) | 0);
                $434 = HEAP8[$433 >> 0] | 0;
                $435 = $434 & 255;
                $436 = (($431) + 1) | 0;
                $437 = (($436) + ($435)) | 0;
                $438 = $437 >>> 1;
                $439 = $438 & 255;
                $440 = (($261) + 3) | 0;
                $441 = (($0) + ($440) | 0);
                HEAP8[$441 >> 0] = $439;
                $442 = (($259) + 4) | 0;
                $443 = (($5) + ($442) | 0);
                $444 = HEAP8[$443 >> 0] | 0;
                $445 = $444 & 255;
                $446 = (($259) + 5) | 0;
                $447 = (($5) + ($446) | 0);
                $448 = HEAP8[$447 >> 0] | 0;
                $449 = $448 & 255;
                $450 = (($445) + 1) | 0;
                $451 = (($450) + ($449)) | 0;
                $452 = $451 >>> 1;
                $453 = $452 & 255;
                $454 = (($261) + 4) | 0;
                $455 = (($0) + ($454) | 0);
                HEAP8[$455 >> 0] = $453;
                $456 = (($259) + 5) | 0;
                $457 = (($5) + ($456) | 0);
                $458 = HEAP8[$457 >> 0] | 0;
                $459 = $458 & 255;
                $460 = (($259) + 6) | 0;
                $461 = (($5) + ($460) | 0);
                $462 = HEAP8[$461 >> 0] | 0;
                $463 = $462 & 255;
                $464 = (($459) + 1) | 0;
                $465 = (($464) + ($463)) | 0;
                $466 = $465 >>> 1;
                $467 = $466 & 255;
                $468 = (($261) + 5) | 0;
                $469 = (($0) + ($468) | 0);
                HEAP8[$469 >> 0] = $467;
                $470 = (($259) + 6) | 0;
                $471 = (($5) + ($470) | 0);
                $472 = HEAP8[$471 >> 0] | 0;
                $473 = $472 & 255;
                $474 = (($259) + 7) | 0;
                $475 = (($5) + ($474) | 0);
                $476 = HEAP8[$475 >> 0] | 0;
                $477 = $476 & 255;
                $478 = (($473) + 1) | 0;
                $479 = (($478) + ($477)) | 0;
                $480 = $479 >>> 1;
                $481 = $480 & 255;
                $482 = (($261) + 6) | 0;
                $483 = (($0) + ($482) | 0);
                HEAP8[$483 >> 0] = $481;
                $484 = (($259) + 7) | 0;
                $485 = (($5) + ($484) | 0);
                $486 = HEAP8[$485 >> 0] | 0;
                $487 = $486 & 255;
                $488 = (($259) + 8) | 0;
                $489 = (($5) + ($488) | 0);
                $490 = HEAP8[$489 >> 0] | 0;
                $491 = $490 & 255;
                $492 = (($487) + 1) | 0;
                $$sink88 = 1; $$sink89 = $492; $$sink90 = $491;
            } else {
                $269 = $268 << 1;
                $270 = (($259) + 2) | 0;
                $271 = (($5) + ($270) | 0);
                $272 = HEAP8[$271 >> 0] | 0;
                $273 = $272 & 255;
                $274 = (($264) + 2) | 0;
                $275 = (($274) + ($269)) | 0;
                $276 = (($275) + ($273)) | 0;
                $277 = $276 >>> 2;
                $278 = $277 & 255;
                $279 = (($0) + ($261) | 0);
                HEAP8[$279 >> 0] = $278;
                $280 = $273 << 1;
                $281 = (($259) + 3) | 0;
                $282 = (($5) + ($281) | 0);
                $283 = HEAP8[$282 >> 0] | 0;
                $284 = $283 & 255;
                $285 = (($268) + 2) | 0;
                $286 = (($285) + ($280)) | 0;
                $287 = (($286) + ($284)) | 0;
                $288 = $287 >>> 2;
                $289 = $288 & 255;
                $290 = (($261) + 1) | 0;
                $291 = (($0) + ($290) | 0);
                HEAP8[$291 >> 0] = $289;
                $292 = $284 << 1;
                $293 = (($259) + 4) | 0;
                $294 = (($5) + ($293) | 0);
                $295 = HEAP8[$294 >> 0] | 0;
                $296 = $295 & 255;
                $297 = (($273) + 2) | 0;
                $298 = (($297) + ($292)) | 0;
                $299 = (($298) + ($296)) | 0;
                $300 = $299 >>> 2;
                $301 = $300 & 255;
                $302 = (($261) + 2) | 0;
                $303 = (($0) + ($302) | 0);
                HEAP8[$303 >> 0] = $301;
                $304 = (($259) + 3) | 0;
                $305 = (($5) + ($304) | 0);
                $306 = HEAP8[$305 >> 0] | 0;
                $307 = $306 & 255;
                $308 = (($259) + 4) | 0;
                $309 = (($5) + ($308) | 0);
                $310 = HEAP8[$309 >> 0] | 0;
                $311 = $310 & 255;
                $312 = $311 << 1;
                $313 = (($259) + 5) | 0;
                $314 = (($5) + ($313) | 0);
                $315 = HEAP8[$314 >> 0] | 0;
                $316 = $315 & 255;
                $317 = (($307) + 2) | 0;
                $318 = (($317) + ($312)) | 0;
                $319 = (($318) + ($316)) | 0;
                $320 = $319 >>> 2;
                $321 = $320 & 255;
                $322 = (($261) + 3) | 0;
                $323 = (($0) + ($322) | 0);
                HEAP8[$323 >> 0] = $321;
                $324 = (($259) + 4) | 0;
                $325 = (($5) + ($324) | 0);
                $326 = HEAP8[$325 >> 0] | 0;
                $327 = $326 & 255;
                $328 = (($259) + 5) | 0;
                $329 = (($5) + ($328) | 0);
                $330 = HEAP8[$329 >> 0] | 0;
                $331 = $330 & 255;
                $332 = $331 << 1;
                $333 = (($259) + 6) | 0;
                $334 = (($5) + ($333) | 0);
                $335 = HEAP8[$334 >> 0] | 0;
                $336 = $335 & 255;
                $337 = (($327) + 2) | 0;
                $338 = (($337) + ($332)) | 0;
                $339 = (($338) + ($336)) | 0;
                $340 = $339 >>> 2;
                $341 = $340 & 255;
                $342 = (($261) + 4) | 0;
                $343 = (($0) + ($342) | 0);
                HEAP8[$343 >> 0] = $341;
                $344 = (($259) + 5) | 0;
                $345 = (($5) + ($344) | 0);
                $346 = HEAP8[$345 >> 0] | 0;
                $347 = $346 & 255;
                $348 = (($259) + 6) | 0;
                $349 = (($5) + ($348) | 0);
                $350 = HEAP8[$349 >> 0] | 0;
                $351 = $350 & 255;
                $352 = $351 << 1;
                $353 = (($259) + 7) | 0;
                $354 = (($5) + ($353) | 0);
                $355 = HEAP8[$354 >> 0] | 0;
                $356 = $355 & 255;
                $357 = (($347) + 2) | 0;
                $358 = (($357) + ($352)) | 0;
                $359 = (($358) + ($356)) | 0;
                $360 = $359 >>> 2;
                $361 = $360 & 255;
                $362 = (($261) + 5) | 0;
                $363 = (($0) + ($362) | 0);
                HEAP8[$363 >> 0] = $361;
                $364 = (($259) + 6) | 0;
                $365 = (($5) + ($364) | 0);
                $366 = HEAP8[$365 >> 0] | 0;
                $367 = $366 & 255;
                $368 = (($259) + 7) | 0;
                $369 = (($5) + ($368) | 0);
                $370 = HEAP8[$369 >> 0] | 0;
                $371 = $370 & 255;
                $372 = $371 << 1;
                $373 = (($259) + 8) | 0;
                $374 = (($5) + ($373) | 0);
                $375 = HEAP8[$374 >> 0] | 0;
                $376 = $375 & 255;
                $377 = (($367) + 2) | 0;
                $378 = (($377) + ($372)) | 0;
                $379 = (($378) + ($376)) | 0;
                $380 = $379 >>> 2;
                $381 = $380 & 255;
                $382 = (($261) + 6) | 0;
                $383 = (($0) + ($382) | 0);
                HEAP8[$383 >> 0] = $381;
                $384 = (($259) + 7) | 0;
                $385 = (($5) + ($384) | 0);
                $386 = HEAP8[$385 >> 0] | 0;
                $387 = $386 & 255;
                $388 = (($259) + 8) | 0;
                $389 = (($5) + ($388) | 0);
                $390 = HEAP8[$389 >> 0] | 0;
                $391 = $390 & 255;
                $392 = $391 << 1;
                $393 = (($259) + 9) | 0;
                $394 = (($5) + ($393) | 0);
                $395 = HEAP8[$394 >> 0] | 0;
                $396 = $395 & 255;
                $397 = (($387) + 2) | 0;
                $398 = (($397) + ($392)) | 0;
                $$sink88 = 2; $$sink89 = $398; $$sink90 = $396;
            }
            $493 = (($$sink89) + ($$sink90)) | 0;
            $494 = $493 >>> $$sink88;
            $495 = $494 & 255;
            $496 = (($261) + 7) | 0;
            $497 = (($0) + ($496) | 0);
            HEAP8[$497 >> 0] = $495;
            $498 = (($$279) + 1) | 0;
            $exitcond = ($498 | 0) == (8);
            if ($exitcond) {
                break;
            } else {
                $$279 = $498;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec23WelsI8x8LumaPredVLTop_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$385 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink73$ph = 0, $$sink96 = 0, $$sink97 = 0, $$sink98 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
        var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
        var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
        var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
        var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
        var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
        var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
        var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
        var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
        var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
        var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
        var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
        var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
        var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
        var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
        var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
        var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
        var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
        var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
        var $98 = 0, $99 = 0, $exitcond = 0, $scevgep = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $6 = ((($4)) + 4 | 0);
        HEAP32[$6 >> 2] = $1;
        $7 = $1 << 1;
        $8 = ((($4)) + 8 | 0);
        HEAP32[$8 >> 2] = $7;
        $9 = ($1 * 3) | 0;
        $10 = ((($4)) + 12 | 0);
        HEAP32[$10 >> 2] = $9;
        $11 = $1 << 2;
        $12 = ((($4)) + 16 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = ($1 * 5) | 0;
        $14 = ((($4)) + 20 | 0);
        HEAP32[$14 >> 2] = $13;
        $15 = ($1 * 6) | 0;
        $16 = ((($4)) + 24 | 0);
        HEAP32[$16 >> 2] = $15;
        $17 = ($1 * 7) | 0;
        $18 = ((($4)) + 28 | 0);
        HEAP32[$18 >> 2] = $17;
        $19 = (0 - ($1)) | 0;
        if ($2) {
            $20 = $1 ^ -1;
            $21 = (($0) + ($20) | 0);
            $22 = HEAP8[$21 >> 0] | 0;
            $23 = $22 & 255;
            $24 = (($0) + ($19) | 0);
            $25 = HEAP8[$24 >> 0] | 0;
            $26 = $25 & 255;
            $27 = $26 << 1;
            $28 = (($27) + ($23)) | 0;
            $$pre$phiZ2D = $20; $$sink73$ph = $28;
        } else {
            $29 = (($0) + ($19) | 0);
            $30 = HEAP8[$29 >> 0] | 0;
            $31 = $30 & 255;
            $32 = ($31 * 3) | 0;
            $$pre = $1 ^ -1;
            $$pre$phiZ2D = $$pre; $$sink73$ph = $32;
        }
        $33 = (1 - ($1)) | 0;
        $34 = (($0) + ($33) | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = (($$sink73$ph) + 2) | 0;
        $38 = (($37) + ($36)) | 0;
        $39 = $38 >>> 2;
        $40 = $39 & 255;
        HEAP8[$5 >> 0] = $40;
        $41 = (($$pre$phiZ2D) + 1) | 0;
        $42 = (($0) + ($41) | 0);
        $43 = HEAP8[$42 >> 0] | 0;
        $44 = $43 & 255;
        $45 = $36 << 1;
        $46 = (($45) + ($44)) | 0;
        $47 = (2 - ($1)) | 0;
        $48 = (($0) + ($47) | 0);
        $49 = HEAP8[$48 >> 0] | 0;
        $50 = $49 & 255;
        $51 = (($46) + 2) | 0;
        $52 = (($51) + ($50)) | 0;
        $53 = $52 >>> 2;
        $54 = $53 & 255;
        $55 = ((($5)) + 1 | 0);
        HEAP8[$55 >> 0] = $54;
        $56 = (($$pre$phiZ2D) + 2) | 0;
        $57 = (($0) + ($56) | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = $58 & 255;
        $60 = $50 << 1;
        $61 = (($60) + ($59)) | 0;
        $62 = (3 - ($1)) | 0;
        $63 = (($0) + ($62) | 0);
        $64 = HEAP8[$63 >> 0] | 0;
        $65 = $64 & 255;
        $66 = (($61) + 2) | 0;
        $67 = (($66) + ($65)) | 0;
        $68 = $67 >>> 2;
        $69 = $68 & 255;
        $70 = ((($5)) + 2 | 0);
        HEAP8[$70 >> 0] = $69;
        $71 = (($$pre$phiZ2D) + 3) | 0;
        $72 = (($0) + ($71) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = $65 << 1;
        $76 = (($75) + ($74)) | 0;
        $77 = (4 - ($1)) | 0;
        $78 = (($0) + ($77) | 0);
        $79 = HEAP8[$78 >> 0] | 0;
        $80 = $79 & 255;
        $81 = (($76) + 2) | 0;
        $82 = (($81) + ($80)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        $85 = ((($5)) + 3 | 0);
        HEAP8[$85 >> 0] = $84;
        $86 = (($$pre$phiZ2D) + 4) | 0;
        $87 = (($0) + ($86) | 0);
        $88 = HEAP8[$87 >> 0] | 0;
        $89 = $88 & 255;
        $90 = $80 << 1;
        $91 = (($90) + ($89)) | 0;
        $92 = (5 - ($1)) | 0;
        $93 = (($0) + ($92) | 0);
        $94 = HEAP8[$93 >> 0] | 0;
        $95 = $94 & 255;
        $96 = (($91) + 2) | 0;
        $97 = (($96) + ($95)) | 0;
        $98 = $97 >>> 2;
        $99 = $98 & 255;
        $100 = ((($5)) + 4 | 0);
        HEAP8[$100 >> 0] = $99;
        $101 = (($$pre$phiZ2D) + 5) | 0;
        $102 = (($0) + ($101) | 0);
        $103 = HEAP8[$102 >> 0] | 0;
        $104 = $103 & 255;
        $105 = $95 << 1;
        $106 = (($105) + ($104)) | 0;
        $107 = (6 - ($1)) | 0;
        $108 = (($0) + ($107) | 0);
        $109 = HEAP8[$108 >> 0] | 0;
        $110 = $109 & 255;
        $111 = (($106) + 2) | 0;
        $112 = (($111) + ($110)) | 0;
        $113 = $112 >>> 2;
        $114 = $113 & 255;
        $115 = ((($5)) + 5 | 0);
        HEAP8[$115 >> 0] = $114;
        $116 = (($$pre$phiZ2D) + 6) | 0;
        $117 = (($0) + ($116) | 0);
        $118 = HEAP8[$117 >> 0] | 0;
        $119 = $118 & 255;
        $120 = $110 << 1;
        $121 = (($120) + ($119)) | 0;
        $122 = (7 - ($1)) | 0;
        $123 = (($0) + ($122) | 0);
        $124 = HEAP8[$123 >> 0] | 0;
        $125 = $124 & 255;
        $126 = (($121) + 2) | 0;
        $127 = (($126) + ($125)) | 0;
        $128 = $127 >>> 2;
        $129 = $128 & 255;
        $130 = ((($5)) + 6 | 0);
        HEAP8[$130 >> 0] = $129;
        $131 = ($125 * 3) | 0;
        $132 = (($110) + 2) | 0;
        $133 = (($132) + ($131)) | 0;
        $134 = $133 >>> 2;
        $135 = $134 & 255;
        $136 = ((($5)) + 7 | 0);
        HEAP8[$136 >> 0] = $135;
        $scevgep = ((($5)) + 8 | 0);
        _memset(($scevgep | 0), ($124 | 0), 8) | 0;
        $$385 = 0;
        while (1) {
            $137 = $$385 & 1;
            $138 = ($137 | 0) == (0);
            $139 = $$385 >> 1;
            $140 = (($4) + ($$385 << 2) | 0);
            $141 = HEAP32[$140 >> 2] | 0;
            $142 = (($5) + ($139) | 0);
            $143 = HEAP8[$142 >> 0] | 0;
            $144 = $143 & 255;
            $145 = (($139) + 1) | 0;
            $146 = (($5) + ($145) | 0);
            $147 = HEAP8[$146 >> 0] | 0;
            $148 = $147 & 255;
            if ($138) {
                $279 = (($144) + 1) | 0;
                $280 = (($279) + ($148)) | 0;
                $281 = $280 >>> 1;
                $282 = $281 & 255;
                $283 = (($0) + ($141) | 0);
                HEAP8[$283 >> 0] = $282;
                $284 = (($139) + 2) | 0;
                $285 = (($5) + ($284) | 0);
                $286 = HEAP8[$285 >> 0] | 0;
                $287 = $286 & 255;
                $288 = (($148) + 1) | 0;
                $289 = (($288) + ($287)) | 0;
                $290 = $289 >>> 1;
                $291 = $290 & 255;
                $292 = (($141) + 1) | 0;
                $293 = (($0) + ($292) | 0);
                HEAP8[$293 >> 0] = $291;
                $294 = (($139) + 2) | 0;
                $295 = (($5) + ($294) | 0);
                $296 = HEAP8[$295 >> 0] | 0;
                $297 = $296 & 255;
                $298 = (($139) + 3) | 0;
                $299 = (($5) + ($298) | 0);
                $300 = HEAP8[$299 >> 0] | 0;
                $301 = $300 & 255;
                $302 = (($297) + 1) | 0;
                $303 = (($302) + ($301)) | 0;
                $304 = $303 >>> 1;
                $305 = $304 & 255;
                $306 = (($141) + 2) | 0;
                $307 = (($0) + ($306) | 0);
                HEAP8[$307 >> 0] = $305;
                $308 = (($139) + 3) | 0;
                $309 = (($5) + ($308) | 0);
                $310 = HEAP8[$309 >> 0] | 0;
                $311 = $310 & 255;
                $312 = (($139) + 4) | 0;
                $313 = (($5) + ($312) | 0);
                $314 = HEAP8[$313 >> 0] | 0;
                $315 = $314 & 255;
                $316 = (($311) + 1) | 0;
                $317 = (($316) + ($315)) | 0;
                $318 = $317 >>> 1;
                $319 = $318 & 255;
                $320 = (($141) + 3) | 0;
                $321 = (($0) + ($320) | 0);
                HEAP8[$321 >> 0] = $319;
                $322 = (($139) + 4) | 0;
                $323 = (($5) + ($322) | 0);
                $324 = HEAP8[$323 >> 0] | 0;
                $325 = $324 & 255;
                $326 = (($139) + 5) | 0;
                $327 = (($5) + ($326) | 0);
                $328 = HEAP8[$327 >> 0] | 0;
                $329 = $328 & 255;
                $330 = (($325) + 1) | 0;
                $331 = (($330) + ($329)) | 0;
                $332 = $331 >>> 1;
                $333 = $332 & 255;
                $334 = (($141) + 4) | 0;
                $335 = (($0) + ($334) | 0);
                HEAP8[$335 >> 0] = $333;
                $336 = (($139) + 5) | 0;
                $337 = (($5) + ($336) | 0);
                $338 = HEAP8[$337 >> 0] | 0;
                $339 = $338 & 255;
                $340 = (($139) + 6) | 0;
                $341 = (($5) + ($340) | 0);
                $342 = HEAP8[$341 >> 0] | 0;
                $343 = $342 & 255;
                $344 = (($339) + 1) | 0;
                $345 = (($344) + ($343)) | 0;
                $346 = $345 >>> 1;
                $347 = $346 & 255;
                $348 = (($141) + 5) | 0;
                $349 = (($0) + ($348) | 0);
                HEAP8[$349 >> 0] = $347;
                $350 = (($139) + 6) | 0;
                $351 = (($5) + ($350) | 0);
                $352 = HEAP8[$351 >> 0] | 0;
                $353 = $352 & 255;
                $354 = (($139) + 7) | 0;
                $355 = (($5) + ($354) | 0);
                $356 = HEAP8[$355 >> 0] | 0;
                $357 = $356 & 255;
                $358 = (($353) + 1) | 0;
                $359 = (($358) + ($357)) | 0;
                $360 = $359 >>> 1;
                $361 = $360 & 255;
                $362 = (($141) + 6) | 0;
                $363 = (($0) + ($362) | 0);
                HEAP8[$363 >> 0] = $361;
                $364 = (($139) + 7) | 0;
                $365 = (($5) + ($364) | 0);
                $366 = HEAP8[$365 >> 0] | 0;
                $367 = $366 & 255;
                $368 = (($139) + 8) | 0;
                $369 = (($5) + ($368) | 0);
                $370 = HEAP8[$369 >> 0] | 0;
                $371 = $370 & 255;
                $372 = (($367) + 1) | 0;
                $$sink96 = 1; $$sink97 = $372; $$sink98 = $371;
            } else {
                $149 = $148 << 1;
                $150 = (($139) + 2) | 0;
                $151 = (($5) + ($150) | 0);
                $152 = HEAP8[$151 >> 0] | 0;
                $153 = $152 & 255;
                $154 = (($144) + 2) | 0;
                $155 = (($154) + ($149)) | 0;
                $156 = (($155) + ($153)) | 0;
                $157 = $156 >>> 2;
                $158 = $157 & 255;
                $159 = (($0) + ($141) | 0);
                HEAP8[$159 >> 0] = $158;
                $160 = $153 << 1;
                $161 = (($139) + 3) | 0;
                $162 = (($5) + ($161) | 0);
                $163 = HEAP8[$162 >> 0] | 0;
                $164 = $163 & 255;
                $165 = (($148) + 2) | 0;
                $166 = (($165) + ($160)) | 0;
                $167 = (($166) + ($164)) | 0;
                $168 = $167 >>> 2;
                $169 = $168 & 255;
                $170 = (($141) + 1) | 0;
                $171 = (($0) + ($170) | 0);
                HEAP8[$171 >> 0] = $169;
                $172 = $164 << 1;
                $173 = (($139) + 4) | 0;
                $174 = (($5) + ($173) | 0);
                $175 = HEAP8[$174 >> 0] | 0;
                $176 = $175 & 255;
                $177 = (($153) + 2) | 0;
                $178 = (($177) + ($172)) | 0;
                $179 = (($178) + ($176)) | 0;
                $180 = $179 >>> 2;
                $181 = $180 & 255;
                $182 = (($141) + 2) | 0;
                $183 = (($0) + ($182) | 0);
                HEAP8[$183 >> 0] = $181;
                $184 = (($139) + 3) | 0;
                $185 = (($5) + ($184) | 0);
                $186 = HEAP8[$185 >> 0] | 0;
                $187 = $186 & 255;
                $188 = (($139) + 4) | 0;
                $189 = (($5) + ($188) | 0);
                $190 = HEAP8[$189 >> 0] | 0;
                $191 = $190 & 255;
                $192 = $191 << 1;
                $193 = (($139) + 5) | 0;
                $194 = (($5) + ($193) | 0);
                $195 = HEAP8[$194 >> 0] | 0;
                $196 = $195 & 255;
                $197 = (($187) + 2) | 0;
                $198 = (($197) + ($192)) | 0;
                $199 = (($198) + ($196)) | 0;
                $200 = $199 >>> 2;
                $201 = $200 & 255;
                $202 = (($141) + 3) | 0;
                $203 = (($0) + ($202) | 0);
                HEAP8[$203 >> 0] = $201;
                $204 = (($139) + 4) | 0;
                $205 = (($5) + ($204) | 0);
                $206 = HEAP8[$205 >> 0] | 0;
                $207 = $206 & 255;
                $208 = (($139) + 5) | 0;
                $209 = (($5) + ($208) | 0);
                $210 = HEAP8[$209 >> 0] | 0;
                $211 = $210 & 255;
                $212 = $211 << 1;
                $213 = (($139) + 6) | 0;
                $214 = (($5) + ($213) | 0);
                $215 = HEAP8[$214 >> 0] | 0;
                $216 = $215 & 255;
                $217 = (($207) + 2) | 0;
                $218 = (($217) + ($212)) | 0;
                $219 = (($218) + ($216)) | 0;
                $220 = $219 >>> 2;
                $221 = $220 & 255;
                $222 = (($141) + 4) | 0;
                $223 = (($0) + ($222) | 0);
                HEAP8[$223 >> 0] = $221;
                $224 = (($139) + 5) | 0;
                $225 = (($5) + ($224) | 0);
                $226 = HEAP8[$225 >> 0] | 0;
                $227 = $226 & 255;
                $228 = (($139) + 6) | 0;
                $229 = (($5) + ($228) | 0);
                $230 = HEAP8[$229 >> 0] | 0;
                $231 = $230 & 255;
                $232 = $231 << 1;
                $233 = (($139) + 7) | 0;
                $234 = (($5) + ($233) | 0);
                $235 = HEAP8[$234 >> 0] | 0;
                $236 = $235 & 255;
                $237 = (($227) + 2) | 0;
                $238 = (($237) + ($232)) | 0;
                $239 = (($238) + ($236)) | 0;
                $240 = $239 >>> 2;
                $241 = $240 & 255;
                $242 = (($141) + 5) | 0;
                $243 = (($0) + ($242) | 0);
                HEAP8[$243 >> 0] = $241;
                $244 = (($139) + 6) | 0;
                $245 = (($5) + ($244) | 0);
                $246 = HEAP8[$245 >> 0] | 0;
                $247 = $246 & 255;
                $248 = (($139) + 7) | 0;
                $249 = (($5) + ($248) | 0);
                $250 = HEAP8[$249 >> 0] | 0;
                $251 = $250 & 255;
                $252 = $251 << 1;
                $253 = (($139) + 8) | 0;
                $254 = (($5) + ($253) | 0);
                $255 = HEAP8[$254 >> 0] | 0;
                $256 = $255 & 255;
                $257 = (($247) + 2) | 0;
                $258 = (($257) + ($252)) | 0;
                $259 = (($258) + ($256)) | 0;
                $260 = $259 >>> 2;
                $261 = $260 & 255;
                $262 = (($141) + 6) | 0;
                $263 = (($0) + ($262) | 0);
                HEAP8[$263 >> 0] = $261;
                $264 = (($139) + 7) | 0;
                $265 = (($5) + ($264) | 0);
                $266 = HEAP8[$265 >> 0] | 0;
                $267 = $266 & 255;
                $268 = (($139) + 8) | 0;
                $269 = (($5) + ($268) | 0);
                $270 = HEAP8[$269 >> 0] | 0;
                $271 = $270 & 255;
                $272 = $271 << 1;
                $273 = (($139) + 9) | 0;
                $274 = (($5) + ($273) | 0);
                $275 = HEAP8[$274 >> 0] | 0;
                $276 = $275 & 255;
                $277 = (($267) + 2) | 0;
                $278 = (($277) + ($272)) | 0;
                $$sink96 = 2; $$sink97 = $278; $$sink98 = $276;
            }
            $373 = (($$sink97) + ($$sink98)) | 0;
            $374 = $373 >>> $$sink96;
            $375 = $374 & 255;
            $376 = (($141) + 7) | 0;
            $377 = (($0) + ($376) | 0);
            HEAP8[$377 >> 0] = $375;
            $378 = (($$385) + 1) | 0;
            $exitcond = ($378 | 0) == (8);
            if ($exitcond) {
                break;
            } else {
                $$385 = $378;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI8x8LumaPredVR_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$sink1 = 0, $$sink21$sink$sink = 0, $$sink21$sink$sink$1 = 0, $$sink21$sink$sink$1$1 = 0, $$sink21$sink$sink$1$5 = 0, $$sink21$sink$sink$1$6 = 0, $$sink21$sink$sink$1$7 = 0, $$sink21$sink$sink$1144 = 0, $$sink21$sink$sink$2 = 0, $$sink21$sink$sink$2$1 = 0, $$sink21$sink$sink$2$2 = 0, $$sink21$sink$sink$2$7 = 0, $$sink21$sink$sink$2147 = 0, $$sink21$sink$sink$3 = 0, $$sink21$sink$sink$3$1 = 0, $$sink21$sink$sink$3$2 = 0, $$sink21$sink$sink$3$3 = 0, $$sink21$sink$sink$3$4 = 0, $$sink21$sink$sink$3150 = 0, $$sink21$sink$sink$4 = 0;
        var $$sink21$sink$sink$4$1 = 0, $$sink21$sink$sink$4$2 = 0, $$sink21$sink$sink$4$3 = 0, $$sink21$sink$sink$4$4 = 0, $$sink21$sink$sink$4$5 = 0, $$sink21$sink$sink$4$6 = 0, $$sink21$sink$sink$4153 = 0, $$sink21$sink$sink$5 = 0, $$sink21$sink$sink$5$1 = 0, $$sink21$sink$sink$5$2 = 0, $$sink21$sink$sink$5$3 = 0, $$sink21$sink$sink$5$4 = 0, $$sink21$sink$sink$5$5 = 0, $$sink21$sink$sink$5$6 = 0, $$sink21$sink$sink$5156 = 0, $$sink21$sink$sink$6 = 0, $$sink21$sink$sink$6$1 = 0, $$sink21$sink$sink$6$2 = 0, $$sink21$sink$sink$6$3 = 0, $$sink21$sink$sink$6$4 = 0;
        var $$sink21$sink$sink$6$5 = 0, $$sink21$sink$sink$6$6 = 0, $$sink21$sink$sink$6159 = 0, $$sink21$sink$sink$7 = 0, $$sink21$sink$sink$7$1 = 0, $$sink21$sink$sink$7$2 = 0, $$sink21$sink$sink$7$3 = 0, $$sink21$sink$sink$7$4 = 0, $$sink21$sink$sink$7$5 = 0, $$sink21$sink$sink$7$6 = 0, $$sink21$sink$sink$7162 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
        var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
        var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
        var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
        var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
        var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
        var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
        var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
        var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
        var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
        var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
        var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
        var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
        var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
        var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
        var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
        var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
        var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
        var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
        var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
        var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
        var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
        var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
        var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
        var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
        var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
        var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
        var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
        var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
        var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
        var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
        var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
        var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
        var $687 = 0, $688 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
        var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp = 0, $phitmp542 = 0, $phitmp543 = 0, $phitmp544 = 0;
        var $phitmp545 = 0, $phitmp546 = 0, $phitmp547 = 0, $phitmp548 = 0, $phitmp549 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 40 | 0;
        $6 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $7 = ((($4)) + 4 | 0);
        HEAP32[$7 >> 2] = $1;
        $8 = $1 << 1;
        $9 = ((($4)) + 8 | 0);
        HEAP32[$9 >> 2] = $8;
        $10 = ($1 * 3) | 0;
        $11 = ((($4)) + 12 | 0);
        HEAP32[$11 >> 2] = $10;
        $12 = $1 << 2;
        $13 = ((($4)) + 16 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = ($1 * 5) | 0;
        $15 = ((($4)) + 20 | 0);
        HEAP32[$15 >> 2] = $14;
        $16 = ($1 * 6) | 0;
        $17 = ((($4)) + 24 | 0);
        HEAP32[$17 >> 2] = $16;
        $18 = ($1 * 7) | 0;
        $19 = ((($4)) + 28 | 0);
        HEAP32[$19 >> 2] = $18;
        $20 = ((($0)) + -1 | 0);
        $21 = HEAP8[$20 >> 0] | 0;
        $22 = $21 & 255;
        $23 = $1 ^ -1;
        $24 = (($0) + ($23) | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 & 255;
        $27 = $26 << 1;
        $28 = (0 - ($1)) | 0;
        $29 = (($0) + ($28) | 0);
        $30 = HEAP8[$29 >> 0] | 0;
        $31 = $30 & 255;
        $32 = (($22) + 2) | 0;
        $33 = (($32) + ($27)) | 0;
        $34 = (($33) + ($31)) | 0;
        $35 = $22 << 1;
        $36 = (($1) + -1) | 0;
        $37 = (($0) + ($36) | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = $38 & 255;
        $40 = (($26) + 2) | 0;
        $41 = (($40) + ($35)) | 0;
        $42 = (($41) + ($39)) | 0;
        $43 = $42 >>> 2;
        $44 = $43 & 255;
        HEAP8[$5 >> 0] = $44;
        $45 = $31 << 1;
        $46 = (1 - ($1)) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = HEAP8[$47 >> 0] | 0;
        $49 = $48 & 255;
        $50 = (($40) + ($45)) | 0;
        $51 = (($50) + ($49)) | 0;
        $52 = $51 >>> 2;
        $53 = $52 & 255;
        HEAP8[$6 >> 0] = $53;
        $54 = $39 << 1;
        $55 = (($8) + -1) | 0;
        $56 = (($0) + ($55) | 0);
        $57 = HEAP8[$56 >> 0] | 0;
        $58 = $57 & 255;
        $59 = (($32) + ($54)) | 0;
        $60 = (($59) + ($58)) | 0;
        $61 = $60 >>> 2;
        $62 = $61 & 255;
        $63 = ((($5)) + 1 | 0);
        HEAP8[$63 >> 0] = $62;
        $64 = $49 << 1;
        $65 = (2 - ($1)) | 0;
        $66 = (($0) + ($65) | 0);
        $67 = HEAP8[$66 >> 0] | 0;
        $68 = $67 & 255;
        $69 = (($31) + 2) | 0;
        $70 = (($69) + ($64)) | 0;
        $71 = (($70) + ($68)) | 0;
        $72 = $71 >>> 2;
        $73 = $72 & 255;
        $74 = ((($6)) + 1 | 0);
        HEAP8[$74 >> 0] = $73;
        $75 = $58 << 1;
        $76 = (($10) + -1) | 0;
        $77 = (($0) + ($76) | 0);
        $78 = HEAP8[$77 >> 0] | 0;
        $79 = $78 & 255;
        $80 = (($39) + 2) | 0;
        $81 = (($80) + ($75)) | 0;
        $82 = (($81) + ($79)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        $85 = ((($5)) + 2 | 0);
        HEAP8[$85 >> 0] = $84;
        $86 = $68 << 1;
        $87 = (3 - ($1)) | 0;
        $88 = (($0) + ($87) | 0);
        $89 = HEAP8[$88 >> 0] | 0;
        $90 = $89 & 255;
        $91 = (($49) + 2) | 0;
        $92 = (($91) + ($86)) | 0;
        $93 = (($92) + ($90)) | 0;
        $94 = $93 >>> 2;
        $95 = $94 & 255;
        $96 = ((($6)) + 2 | 0);
        HEAP8[$96 >> 0] = $95;
        $97 = $79 << 1;
        $98 = (($12) + -1) | 0;
        $99 = (($0) + ($98) | 0);
        $100 = HEAP8[$99 >> 0] | 0;
        $101 = $100 & 255;
        $102 = (($58) + 2) | 0;
        $103 = (($102) + ($97)) | 0;
        $104 = (($103) + ($101)) | 0;
        $105 = $104 >>> 2;
        $106 = $105 & 255;
        $107 = ((($5)) + 3 | 0);
        HEAP8[$107 >> 0] = $106;
        $108 = $90 << 1;
        $109 = (4 - ($1)) | 0;
        $110 = (($0) + ($109) | 0);
        $111 = HEAP8[$110 >> 0] | 0;
        $112 = $111 & 255;
        $113 = (($68) + 2) | 0;
        $114 = (($113) + ($108)) | 0;
        $115 = (($114) + ($112)) | 0;
        $116 = $115 >>> 2;
        $117 = $116 & 255;
        $118 = ((($6)) + 3 | 0);
        HEAP8[$118 >> 0] = $117;
        $119 = HEAP32[$11 >> 2] | 0;
        $120 = (($119) + -1) | 0;
        $121 = (($0) + ($120) | 0);
        $122 = HEAP8[$121 >> 0] | 0;
        $123 = $122 & 255;
        $124 = HEAP32[$13 >> 2] | 0;
        $125 = (($124) + -1) | 0;
        $126 = (($0) + ($125) | 0);
        $127 = HEAP8[$126 >> 0] | 0;
        $128 = $127 & 255;
        $129 = $128 << 1;
        $130 = HEAP32[$15 >> 2] | 0;
        $131 = (($130) + -1) | 0;
        $132 = (($0) + ($131) | 0);
        $133 = HEAP8[$132 >> 0] | 0;
        $134 = $133 & 255;
        $135 = (($123) + 2) | 0;
        $136 = (($135) + ($129)) | 0;
        $137 = (($136) + ($134)) | 0;
        $138 = $137 >>> 2;
        $139 = $138 & 255;
        $140 = ((($5)) + 4 | 0);
        HEAP8[$140 >> 0] = $139;
        $141 = $112 << 1;
        $142 = (5 - ($1)) | 0;
        $143 = (($0) + ($142) | 0);
        $144 = HEAP8[$143 >> 0] | 0;
        $145 = $144 & 255;
        $146 = (($90) + 2) | 0;
        $147 = (($146) + ($141)) | 0;
        $148 = (($147) + ($145)) | 0;
        $149 = $148 >>> 2;
        $150 = $149 & 255;
        $151 = ((($6)) + 4 | 0);
        HEAP8[$151 >> 0] = $150;
        $152 = $134 << 1;
        $153 = HEAP32[$17 >> 2] | 0;
        $154 = (($153) + -1) | 0;
        $155 = (($0) + ($154) | 0);
        $156 = HEAP8[$155 >> 0] | 0;
        $157 = $156 & 255;
        $158 = (($128) + 2) | 0;
        $159 = (($158) + ($152)) | 0;
        $160 = (($159) + ($157)) | 0;
        $161 = $160 >>> 2;
        $162 = $161 & 255;
        $163 = ((($5)) + 5 | 0);
        HEAP8[$163 >> 0] = $162;
        $164 = $145 << 1;
        $165 = (6 - ($1)) | 0;
        $166 = (($0) + ($165) | 0);
        $167 = HEAP8[$166 >> 0] | 0;
        $168 = $167 & 255;
        $169 = (($112) + 2) | 0;
        $170 = (($169) + ($164)) | 0;
        $171 = (($170) + ($168)) | 0;
        $172 = $171 >>> 2;
        $173 = $172 & 255;
        $174 = ((($6)) + 5 | 0);
        HEAP8[$174 >> 0] = $173;
        $175 = $157 << 1;
        $176 = HEAP32[$19 >> 2] | 0;
        $177 = (($176) + -1) | 0;
        $178 = (($0) + ($177) | 0);
        $179 = HEAP8[$178 >> 0] | 0;
        $180 = $179 & 255;
        $181 = (($134) + 2) | 0;
        $182 = (($181) + ($175)) | 0;
        $183 = (($182) + ($180)) | 0;
        $184 = $183 >>> 2;
        $185 = $184 & 255;
        $186 = ((($5)) + 6 | 0);
        HEAP8[$186 >> 0] = $185;
        $187 = $168 << 1;
        $188 = (7 - ($1)) | 0;
        $189 = (($0) + ($188) | 0);
        $190 = HEAP8[$189 >> 0] | 0;
        $191 = $190 & 255;
        $192 = (($145) + 2) | 0;
        $193 = (($192) + ($187)) | 0;
        $194 = (($193) + ($191)) | 0;
        $195 = $194 >>> 2;
        $196 = $195 & 255;
        $197 = ((($6)) + 6 | 0);
        HEAP8[$197 >> 0] = $196;
        $198 = $34 >>> 2;
        $199 = ($180 * 3) | 0;
        $200 = (($157) + 2) | 0;
        $201 = (($200) + ($199)) | 0;
        $202 = $201 >>> 2;
        $203 = $202 & 255;
        $204 = ((($5)) + 7 | 0);
        HEAP8[$204 >> 0] = $203;
        if ($3) {
            $205 = $191 << 1;
            $206 = (($205) + ($168)) | 0;
            $207 = (8 - ($1)) | 0;
            $208 = (($0) + ($207) | 0);
            $209 = HEAP8[$208 >> 0] | 0;
            $210 = $209 & 255;
            $211 = (($206) + ($210)) | 0;
            $$sink1 = $211;
        } else {
            $212 = ($191 * 3) | 0;
            $213 = (($212) + ($168)) | 0;
            $$sink1 = $213;
        }
        $214 = (($$sink1) + 2) | 0;
        $215 = $214 >>> 2;
        $216 = $215 & 255;
        $217 = ((($6)) + 7 | 0);
        HEAP8[$217 >> 0] = $216;
        $218 = $198 & 255;
        $219 = HEAP8[$6 >> 0] | 0;
        $220 = $219 & 255;
        $221 = (($218) + ($220)) | 0;
        $222 = $220 << 1;
        $223 = (($222) + ($218)) | 0;
        $224 = HEAP8[$74 >> 0] | 0;
        $225 = $224 & 255;
        $226 = (($223) + ($225)) | 0;
        $227 = HEAP8[$5 >> 0] | 0;
        $228 = $227 & 255;
        $229 = $198 << 1;
        $230 = $229 & 510;
        $231 = (($230) + ($228)) | 0;
        $232 = (($231) + ($220)) | 0;
        $233 = HEAP8[$63 >> 0] | 0;
        $234 = $233 & 255;
        $235 = $228 << 1;
        $236 = (($218) + ($234)) | 0;
        $237 = (($236) + ($235)) | 0;
        $238 = HEAP32[$4 >> 2] | 0;
        $239 = (($221) + 1) | 0;
        $240 = $239 >>> 1;
        $$sink21$sink$sink = $240 & 255;
        $241 = (($0) + ($238) | 0);
        HEAP8[$241 >> 0] = $$sink21$sink$sink;
        $242 = (($225) + ($220)) | 0;
        $243 = (($242) + 1) | 0;
        $244 = $243 >>> 1;
        $$sink21$sink$sink$1 = $244 & 255;
        $245 = (($238) + 1) | 0;
        $246 = (($0) + ($245) | 0);
        HEAP8[$246 >> 0] = $$sink21$sink$sink$1;
        $247 = HEAP8[$96 >> 0] | 0;
        $248 = $247 & 255;
        $249 = (($248) + ($225)) | 0;
        $250 = (($249) + 1) | 0;
        $251 = $250 >>> 1;
        $$sink21$sink$sink$2 = $251 & 255;
        $252 = (($238) + 2) | 0;
        $253 = (($0) + ($252) | 0);
        HEAP8[$253 >> 0] = $$sink21$sink$sink$2;
        $254 = HEAP8[$96 >> 0] | 0;
        $255 = $254 & 255;
        $256 = $116 & 255;
        $257 = (($256) + ($255)) | 0;
        $258 = (($257) + 1) | 0;
        $259 = $258 >>> 1;
        $$sink21$sink$sink$3 = $259 & 255;
        $260 = (($238) + 3) | 0;
        $261 = (($0) + ($260) | 0);
        HEAP8[$261 >> 0] = $$sink21$sink$sink$3;
        $262 = $116 & 255;
        $263 = $149 & 255;
        $264 = (($263) + ($262)) | 0;
        $265 = (($264) + 1) | 0;
        $266 = $265 >>> 1;
        $$sink21$sink$sink$4 = $266 & 255;
        $267 = (($238) + 4) | 0;
        $268 = (($0) + ($267) | 0);
        HEAP8[$268 >> 0] = $$sink21$sink$sink$4;
        $269 = $149 & 255;
        $270 = $172 & 255;
        $271 = (($270) + ($269)) | 0;
        $272 = (($271) + 1) | 0;
        $273 = $272 >>> 1;
        $$sink21$sink$sink$5 = $273 & 255;
        $274 = (($238) + 5) | 0;
        $275 = (($0) + ($274) | 0);
        HEAP8[$275 >> 0] = $$sink21$sink$sink$5;
        $276 = $172 & 255;
        $277 = $195 & 255;
        $278 = (($277) + ($276)) | 0;
        $279 = (($278) + 1) | 0;
        $280 = $279 >>> 1;
        $$sink21$sink$sink$6 = $280 & 255;
        $281 = (($238) + 6) | 0;
        $282 = (($0) + ($281) | 0);
        HEAP8[$282 >> 0] = $$sink21$sink$sink$6;
        $283 = $195 & 255;
        $284 = $215 & 255;
        $285 = (($284) + ($283)) | 0;
        $286 = (($285) + 1) | 0;
        $287 = $286 >>> 1;
        $$sink21$sink$sink$7 = $287 & 255;
        $288 = (($238) + 7) | 0;
        $289 = (($0) + ($288) | 0);
        HEAP8[$289 >> 0] = $$sink21$sink$sink$7;
        $290 = HEAP32[$7 >> 2] | 0;
        $291 = (($232) + 2) | 0;
        $292 = $291 >>> 2;
        $$sink21$sink$sink$1144 = $292 & 255;
        $293 = (($0) + ($290) | 0);
        HEAP8[$293 >> 0] = $$sink21$sink$sink$1144;
        $294 = (($226) + 2) | 0;
        $295 = $294 >>> 2;
        $$sink21$sink$sink$1$1 = $295 & 255;
        $296 = (($290) + 1) | 0;
        $297 = (($0) + ($296) | 0);
        HEAP8[$297 >> 0] = $$sink21$sink$sink$1$1;
        $298 = $225 << 1;
        $299 = (($298) + ($220)) | 0;
        $300 = HEAP8[$96 >> 0] | 0;
        $301 = $300 & 255;
        $302 = (($299) + ($301)) | 0;
        $303 = (($302) + 2) | 0;
        $304 = $303 >>> 2;
        $$sink21$sink$sink$2$1 = $304 & 255;
        $305 = (($290) + 2) | 0;
        $306 = (($0) + ($305) | 0);
        HEAP8[$306 >> 0] = $$sink21$sink$sink$2$1;
        $307 = HEAP8[$96 >> 0] | 0;
        $308 = $307 & 255;
        $309 = $308 << 1;
        $310 = (($309) + ($225)) | 0;
        $311 = $116 & 255;
        $312 = (($310) + ($311)) | 0;
        $313 = (($312) + 2) | 0;
        $314 = $313 >>> 2;
        $$sink21$sink$sink$3$1 = $314 & 255;
        $315 = (($290) + 3) | 0;
        $316 = (($0) + ($315) | 0);
        HEAP8[$316 >> 0] = $$sink21$sink$sink$3$1;
        $317 = HEAP8[$96 >> 0] | 0;
        $318 = $317 & 255;
        $319 = $116 << 1;
        $320 = $319 & 510;
        $321 = (($320) + ($318)) | 0;
        $322 = $149 & 255;
        $323 = (($321) + ($322)) | 0;
        $324 = (($323) + 2) | 0;
        $325 = $324 >>> 2;
        $$sink21$sink$sink$4$1 = $325 & 255;
        $326 = (($290) + 4) | 0;
        $327 = (($0) + ($326) | 0);
        HEAP8[$327 >> 0] = $$sink21$sink$sink$4$1;
        $328 = $116 & 255;
        $329 = $149 << 1;
        $330 = $329 & 510;
        $331 = (($330) + ($328)) | 0;
        $332 = $172 & 255;
        $333 = (($331) + ($332)) | 0;
        $334 = (($333) + 2) | 0;
        $335 = $334 >>> 2;
        $$sink21$sink$sink$5$1 = $335 & 255;
        $336 = (($290) + 5) | 0;
        $337 = (($0) + ($336) | 0);
        HEAP8[$337 >> 0] = $$sink21$sink$sink$5$1;
        $338 = $149 & 255;
        $339 = $172 << 1;
        $340 = $339 & 510;
        $341 = (($340) + ($338)) | 0;
        $342 = $195 & 255;
        $343 = (($341) + ($342)) | 0;
        $344 = (($343) + 2) | 0;
        $345 = $344 >>> 2;
        $$sink21$sink$sink$6$1 = $345 & 255;
        $346 = (($290) + 6) | 0;
        $347 = (($0) + ($346) | 0);
        HEAP8[$347 >> 0] = $$sink21$sink$sink$6$1;
        $348 = $172 & 255;
        $349 = $195 << 1;
        $350 = $349 & 510;
        $351 = (($350) + ($348)) | 0;
        $352 = $215 & 255;
        $353 = (($351) + ($352)) | 0;
        $354 = (($353) + 2) | 0;
        $355 = $354 >>> 2;
        $$sink21$sink$sink$7$1 = $355 & 255;
        $356 = (($290) + 7) | 0;
        $357 = (($0) + ($356) | 0);
        HEAP8[$357 >> 0] = $$sink21$sink$sink$7$1;
        $358 = HEAP32[$9 >> 2] | 0;
        $359 = (($237) + 2) | 0;
        $360 = $359 >>> 2;
        $$sink21$sink$sink$2147 = $360 & 255;
        $361 = (($0) + ($358) | 0);
        HEAP8[$361 >> 0] = $$sink21$sink$sink$2147;
        $362 = (($358) + 1) | 0;
        $363 = (($0) + ($362) | 0);
        HEAP8[$363 >> 0] = $$sink21$sink$sink;
        $364 = (($225) + ($220)) | 0;
        $365 = (($364) + 1) | 0;
        $366 = $365 >>> 1;
        $$sink21$sink$sink$2$2 = $366 & 255;
        $367 = (($358) + 2) | 0;
        $368 = (($0) + ($367) | 0);
        HEAP8[$368 >> 0] = $$sink21$sink$sink$2$2;
        $369 = HEAP8[$96 >> 0] | 0;
        $370 = $369 & 255;
        $371 = (($370) + ($225)) | 0;
        $372 = (($371) + 1) | 0;
        $373 = $372 >>> 1;
        $$sink21$sink$sink$3$2 = $373 & 255;
        $374 = (($358) + 3) | 0;
        $375 = (($0) + ($374) | 0);
        HEAP8[$375 >> 0] = $$sink21$sink$sink$3$2;
        $376 = HEAP8[$96 >> 0] | 0;
        $377 = $376 & 255;
        $378 = $116 & 255;
        $379 = (($378) + ($377)) | 0;
        $380 = (($379) + 1) | 0;
        $381 = $380 >>> 1;
        $$sink21$sink$sink$4$2 = $381 & 255;
        $382 = (($358) + 4) | 0;
        $383 = (($0) + ($382) | 0);
        HEAP8[$383 >> 0] = $$sink21$sink$sink$4$2;
        $384 = $116 & 255;
        $385 = $149 & 255;
        $386 = (($385) + ($384)) | 0;
        $387 = (($386) + 1) | 0;
        $388 = $387 >>> 1;
        $$sink21$sink$sink$5$2 = $388 & 255;
        $389 = (($358) + 5) | 0;
        $390 = (($0) + ($389) | 0);
        HEAP8[$390 >> 0] = $$sink21$sink$sink$5$2;
        $391 = $149 & 255;
        $392 = $172 & 255;
        $393 = (($392) + ($391)) | 0;
        $394 = (($393) + 1) | 0;
        $395 = $394 >>> 1;
        $$sink21$sink$sink$6$2 = $395 & 255;
        $396 = (($358) + 6) | 0;
        $397 = (($0) + ($396) | 0);
        HEAP8[$397 >> 0] = $$sink21$sink$sink$6$2;
        $398 = $172 & 255;
        $399 = $195 & 255;
        $400 = (($399) + ($398)) | 0;
        $401 = (($400) + 1) | 0;
        $402 = $401 >>> 1;
        $$sink21$sink$sink$7$2 = $402 & 255;
        $403 = (($358) + 7) | 0;
        $404 = (($0) + ($403) | 0);
        HEAP8[$404 >> 0] = $$sink21$sink$sink$7$2;
        $405 = HEAP8[$85 >> 0] | 0;
        $406 = $405 & 255;
        $407 = $234 << 1;
        $408 = (($407) + ($406)) | 0;
        $409 = (($408) + ($228)) | 0;
        $410 = (($409) + 2) | 0;
        $411 = $410 >>> 2;
        $$sink21$sink$sink$3150 = $411 & 255;
        $412 = (($0) + ($119) | 0);
        HEAP8[$412 >> 0] = $$sink21$sink$sink$3150;
        $413 = (($119) + 1) | 0;
        $414 = (($0) + ($413) | 0);
        HEAP8[$414 >> 0] = $$sink21$sink$sink$1144;
        $415 = (($119) + 2) | 0;
        $416 = (($0) + ($415) | 0);
        HEAP8[$416 >> 0] = $$sink21$sink$sink$1$1;
        $417 = $225 << 1;
        $418 = (($417) + ($220)) | 0;
        $419 = HEAP8[$96 >> 0] | 0;
        $420 = $419 & 255;
        $421 = (($418) + ($420)) | 0;
        $422 = (($421) + 2) | 0;
        $423 = $422 >>> 2;
        $$sink21$sink$sink$3$3 = $423 & 255;
        $424 = (($119) + 3) | 0;
        $425 = (($0) + ($424) | 0);
        HEAP8[$425 >> 0] = $$sink21$sink$sink$3$3;
        $426 = HEAP8[$96 >> 0] | 0;
        $427 = $426 & 255;
        $428 = $427 << 1;
        $429 = (($428) + ($225)) | 0;
        $430 = $116 & 255;
        $431 = (($429) + ($430)) | 0;
        $432 = (($431) + 2) | 0;
        $433 = $432 >>> 2;
        $$sink21$sink$sink$4$3 = $433 & 255;
        $434 = (($119) + 4) | 0;
        $435 = (($0) + ($434) | 0);
        HEAP8[$435 >> 0] = $$sink21$sink$sink$4$3;
        $436 = HEAP8[$96 >> 0] | 0;
        $437 = $436 & 255;
        $438 = $116 << 1;
        $439 = $438 & 510;
        $440 = (($439) + ($437)) | 0;
        $441 = $149 & 255;
        $442 = (($440) + ($441)) | 0;
        $443 = (($442) + 2) | 0;
        $444 = $443 >>> 2;
        $$sink21$sink$sink$5$3 = $444 & 255;
        $445 = (($119) + 5) | 0;
        $446 = (($0) + ($445) | 0);
        HEAP8[$446 >> 0] = $$sink21$sink$sink$5$3;
        $447 = $116 & 255;
        $448 = $149 << 1;
        $449 = $448 & 510;
        $450 = (($449) + ($447)) | 0;
        $451 = $172 & 255;
        $452 = (($450) + ($451)) | 0;
        $453 = (($452) + 2) | 0;
        $454 = $453 >>> 2;
        $$sink21$sink$sink$6$3 = $454 & 255;
        $455 = (($119) + 6) | 0;
        $456 = (($0) + ($455) | 0);
        HEAP8[$456 >> 0] = $$sink21$sink$sink$6$3;
        $457 = $149 & 255;
        $458 = $172 << 1;
        $459 = $458 & 510;
        $460 = (($459) + ($457)) | 0;
        $461 = $195 & 255;
        $462 = (($460) + ($461)) | 0;
        $463 = (($462) + 2) | 0;
        $464 = $463 >>> 2;
        $$sink21$sink$sink$7$3 = $464 & 255;
        $465 = (($119) + 7) | 0;
        $466 = (($0) + ($465) | 0);
        HEAP8[$466 >> 0] = $$sink21$sink$sink$7$3;
        $467 = HEAP8[$107 >> 0] | 0;
        $468 = $467 & 255;
        $469 = HEAP8[$85 >> 0] | 0;
        $470 = $469 & 255;
        $471 = $470 << 1;
        $472 = (($471) + ($468)) | 0;
        $473 = (($472) + ($234)) | 0;
        $474 = (($473) + 2) | 0;
        $475 = $474 >>> 2;
        $$sink21$sink$sink$4153 = $475 & 255;
        $476 = (($0) + ($124) | 0);
        HEAP8[$476 >> 0] = $$sink21$sink$sink$4153;
        $477 = (($124) + 1) | 0;
        $478 = (($0) + ($477) | 0);
        HEAP8[$478 >> 0] = $$sink21$sink$sink$2147;
        $479 = (($124) + 2) | 0;
        $480 = (($0) + ($479) | 0);
        HEAP8[$480 >> 0] = $$sink21$sink$sink;
        $481 = (($225) + ($220)) | 0;
        $482 = (($481) + 1) | 0;
        $483 = $482 >>> 1;
        $$sink21$sink$sink$3$4 = $483 & 255;
        $484 = (($124) + 3) | 0;
        $485 = (($0) + ($484) | 0);
        HEAP8[$485 >> 0] = $$sink21$sink$sink$3$4;
        $486 = HEAP8[$96 >> 0] | 0;
        $487 = $486 & 255;
        $488 = (($487) + ($225)) | 0;
        $489 = (($488) + 1) | 0;
        $490 = $489 >>> 1;
        $$sink21$sink$sink$4$4 = $490 & 255;
        $491 = (($124) + 4) | 0;
        $492 = (($0) + ($491) | 0);
        HEAP8[$492 >> 0] = $$sink21$sink$sink$4$4;
        $493 = HEAP8[$96 >> 0] | 0;
        $494 = $493 & 255;
        $495 = $116 & 255;
        $496 = (($495) + ($494)) | 0;
        $497 = (($496) + 1) | 0;
        $498 = $497 >>> 1;
        $$sink21$sink$sink$5$4 = $498 & 255;
        $499 = (($124) + 5) | 0;
        $500 = (($0) + ($499) | 0);
        HEAP8[$500 >> 0] = $$sink21$sink$sink$5$4;
        $501 = $116 & 255;
        $502 = $149 & 255;
        $503 = (($502) + ($501)) | 0;
        $504 = (($503) + 1) | 0;
        $505 = $504 >>> 1;
        $$sink21$sink$sink$6$4 = $505 & 255;
        $506 = (($124) + 6) | 0;
        $507 = (($0) + ($506) | 0);
        HEAP8[$507 >> 0] = $$sink21$sink$sink$6$4;
        $508 = $149 & 255;
        $509 = $172 & 255;
        $510 = (($509) + ($508)) | 0;
        $511 = (($510) + 1) | 0;
        $512 = $511 >>> 1;
        $$sink21$sink$sink$7$4 = $512 & 255;
        $513 = (($124) + 7) | 0;
        $514 = (($0) + ($513) | 0);
        HEAP8[$514 >> 0] = $$sink21$sink$sink$7$4;
        $515 = $138 & 255;
        $516 = HEAP8[$107 >> 0] | 0;
        $517 = $516 & 255;
        $518 = $517 << 1;
        $519 = (($518) + ($515)) | 0;
        $520 = HEAP8[$85 >> 0] | 0;
        $521 = $520 & 255;
        $522 = (($519) + ($521)) | 0;
        $523 = (($522) + 2) | 0;
        $524 = $523 >>> 2;
        $$sink21$sink$sink$5156 = $524 & 255;
        $525 = (($0) + ($130) | 0);
        HEAP8[$525 >> 0] = $$sink21$sink$sink$5156;
        $526 = HEAP8[$85 >> 0] | 0;
        $527 = $526 & 255;
        $528 = $234 << 1;
        $529 = (($528) + ($527)) | 0;
        $530 = (($529) + ($228)) | 0;
        $531 = (($530) + 2) | 0;
        $532 = $531 >>> 2;
        $$sink21$sink$sink$1$5 = $532 & 255;
        $533 = (($130) + 1) | 0;
        $534 = (($0) + ($533) | 0);
        HEAP8[$534 >> 0] = $$sink21$sink$sink$1$5;
        $535 = (($130) + 2) | 0;
        $536 = (($0) + ($535) | 0);
        HEAP8[$536 >> 0] = $$sink21$sink$sink$1144;
        $537 = (($130) + 3) | 0;
        $538 = (($0) + ($537) | 0);
        HEAP8[$538 >> 0] = $$sink21$sink$sink$1$1;
        $539 = $225 << 1;
        $540 = (($539) + ($220)) | 0;
        $541 = HEAP8[$96 >> 0] | 0;
        $542 = $541 & 255;
        $543 = (($540) + ($542)) | 0;
        $544 = (($543) + 2) | 0;
        $545 = $544 >>> 2;
        $$sink21$sink$sink$4$5 = $545 & 255;
        $546 = (($130) + 4) | 0;
        $547 = (($0) + ($546) | 0);
        HEAP8[$547 >> 0] = $$sink21$sink$sink$4$5;
        $548 = HEAP8[$96 >> 0] | 0;
        $549 = $548 & 255;
        $550 = $549 << 1;
        $551 = (($550) + ($225)) | 0;
        $552 = $116 & 255;
        $553 = (($551) + ($552)) | 0;
        $554 = (($553) + 2) | 0;
        $555 = $554 >>> 2;
        $$sink21$sink$sink$5$5 = $555 & 255;
        $556 = (($130) + 5) | 0;
        $557 = (($0) + ($556) | 0);
        HEAP8[$557 >> 0] = $$sink21$sink$sink$5$5;
        $558 = HEAP8[$96 >> 0] | 0;
        $559 = $558 & 255;
        $560 = $116 << 1;
        $561 = $560 & 510;
        $562 = (($561) + ($559)) | 0;
        $563 = $149 & 255;
        $564 = (($562) + ($563)) | 0;
        $565 = (($564) + 2) | 0;
        $566 = $565 >>> 2;
        $$sink21$sink$sink$6$5 = $566 & 255;
        $567 = (($130) + 6) | 0;
        $568 = (($0) + ($567) | 0);
        HEAP8[$568 >> 0] = $$sink21$sink$sink$6$5;
        $569 = $116 & 255;
        $570 = $149 << 1;
        $571 = $570 & 510;
        $572 = (($571) + ($569)) | 0;
        $573 = $172 & 255;
        $574 = (($572) + ($573)) | 0;
        $575 = (($574) + 2) | 0;
        $576 = $575 >>> 2;
        $$sink21$sink$sink$7$5 = $576 & 255;
        $577 = (($130) + 7) | 0;
        $578 = (($0) + ($577) | 0);
        HEAP8[$578 >> 0] = $$sink21$sink$sink$7$5;
        $579 = $161 & 255;
        $580 = $138 << 1;
        $581 = $580 & 510;
        $582 = (($581) + ($579)) | 0;
        $583 = HEAP8[$107 >> 0] | 0;
        $584 = $583 & 255;
        $585 = (($582) + ($584)) | 0;
        $586 = (($585) + 2) | 0;
        $587 = $586 >>> 2;
        $$sink21$sink$sink$6159 = $587 & 255;
        $588 = (($0) + ($153) | 0);
        HEAP8[$588 >> 0] = $$sink21$sink$sink$6159;
        $589 = HEAP8[$107 >> 0] | 0;
        $590 = $589 & 255;
        $591 = HEAP8[$85 >> 0] | 0;
        $592 = $591 & 255;
        $593 = $592 << 1;
        $594 = (($593) + ($590)) | 0;
        $595 = (($594) + ($234)) | 0;
        $596 = (($595) + 2) | 0;
        $597 = $596 >>> 2;
        $$sink21$sink$sink$1$6 = $597 & 255;
        $598 = (($153) + 1) | 0;
        $599 = (($0) + ($598) | 0);
        HEAP8[$599 >> 0] = $$sink21$sink$sink$1$6;
        $600 = (($153) + 2) | 0;
        $601 = (($0) + ($600) | 0);
        HEAP8[$601 >> 0] = $$sink21$sink$sink$2147;
        $602 = (($153) + 3) | 0;
        $603 = (($0) + ($602) | 0);
        HEAP8[$603 >> 0] = $$sink21$sink$sink;
        $604 = (($225) + ($220)) | 0;
        $605 = (($604) + 1) | 0;
        $606 = $605 >>> 1;
        $$sink21$sink$sink$4$6 = $606 & 255;
        $607 = (($153) + 4) | 0;
        $608 = (($0) + ($607) | 0);
        HEAP8[$608 >> 0] = $$sink21$sink$sink$4$6;
        $609 = HEAP8[$96 >> 0] | 0;
        $610 = $609 & 255;
        $611 = (($610) + ($225)) | 0;
        $612 = (($611) + 1) | 0;
        $613 = $612 >>> 1;
        $$sink21$sink$sink$5$6 = $613 & 255;
        $614 = (($153) + 5) | 0;
        $615 = (($0) + ($614) | 0);
        HEAP8[$615 >> 0] = $$sink21$sink$sink$5$6;
        $616 = HEAP8[$96 >> 0] | 0;
        $617 = $616 & 255;
        $618 = $116 & 255;
        $619 = (($618) + ($617)) | 0;
        $620 = (($619) + 1) | 0;
        $621 = $620 >>> 1;
        $$sink21$sink$sink$6$6 = $621 & 255;
        $622 = (($153) + 6) | 0;
        $623 = (($0) + ($622) | 0);
        HEAP8[$623 >> 0] = $$sink21$sink$sink$6$6;
        $624 = $116 & 255;
        $625 = $149 & 255;
        $626 = (($625) + ($624)) | 0;
        $627 = (($626) + 1) | 0;
        $628 = $627 >>> 1;
        $$sink21$sink$sink$7$6 = $628 & 255;
        $629 = (($153) + 7) | 0;
        $630 = (($0) + ($629) | 0);
        HEAP8[$630 >> 0] = $$sink21$sink$sink$7$6;
        $631 = $184 & 255;
        $632 = $161 << 1;
        $633 = $632 & 510;
        $634 = (($633) + ($631)) | 0;
        $635 = $138 & 255;
        $636 = (($634) + ($635)) | 0;
        $637 = (($636) + 2) | 0;
        $638 = $637 >>> 2;
        $$sink21$sink$sink$7162 = $638 & 255;
        $639 = (($0) + ($176) | 0);
        HEAP8[$639 >> 0] = $$sink21$sink$sink$7162;
        $640 = $138 & 255;
        $641 = HEAP8[$107 >> 0] | 0;
        $642 = $641 & 255;
        $643 = $642 << 1;
        $644 = (($643) + ($640)) | 0;
        $645 = HEAP8[$85 >> 0] | 0;
        $646 = $645 & 255;
        $647 = (($644) + ($646)) | 0;
        $648 = (($647) + 2) | 0;
        $649 = $648 >>> 2;
        $$sink21$sink$sink$1$7 = $649 & 255;
        $650 = (($176) + 1) | 0;
        $651 = (($0) + ($650) | 0);
        HEAP8[$651 >> 0] = $$sink21$sink$sink$1$7;
        $652 = HEAP8[$85 >> 0] | 0;
        $653 = $652 & 255;
        $654 = $234 << 1;
        $655 = (($654) + ($653)) | 0;
        $656 = (($655) + ($228)) | 0;
        $657 = (($656) + 2) | 0;
        $658 = $657 >>> 2;
        $$sink21$sink$sink$2$7 = $658 & 255;
        $659 = (($176) + 2) | 0;
        $660 = (($0) + ($659) | 0);
        HEAP8[$660 >> 0] = $$sink21$sink$sink$2$7;
        $661 = (($176) + 3) | 0;
        $662 = (($0) + ($661) | 0);
        HEAP8[$662 >> 0] = $$sink21$sink$sink$1144;
        $663 = (($176) + 4) | 0;
        $664 = (($0) + ($663) | 0);
        HEAP8[$664 >> 0] = $$sink21$sink$sink$1$1;
        $665 = $225 << 1;
        $666 = (($665) + ($220)) | 0;
        $667 = HEAP8[$96 >> 0] | 0;
        $668 = $667 & 255;
        $669 = (($666) + ($668)) | 0;
        $phitmp = (($669) + 2) | 0;
        $phitmp542 = $phitmp >>> 2;
        $phitmp543 = $phitmp542 & 255;
        $670 = (($176) + 5) | 0;
        $671 = (($0) + ($670) | 0);
        HEAP8[$671 >> 0] = $phitmp543;
        $672 = HEAP8[$96 >> 0] | 0;
        $673 = $672 & 255;
        $674 = $673 << 1;
        $675 = (($674) + ($225)) | 0;
        $676 = $116 & 255;
        $677 = (($675) + ($676)) | 0;
        $phitmp544 = (($677) + 2) | 0;
        $phitmp545 = $phitmp544 >>> 2;
        $phitmp546 = $phitmp545 & 255;
        $678 = (($176) + 6) | 0;
        $679 = (($0) + ($678) | 0);
        HEAP8[$679 >> 0] = $phitmp546;
        $680 = HEAP8[$96 >> 0] | 0;
        $681 = $680 & 255;
        $682 = $116 << 1;
        $683 = $682 & 510;
        $684 = (($683) + ($681)) | 0;
        $685 = $149 & 255;
        $686 = (($684) + ($685)) | 0;
        $phitmp547 = (($686) + 2) | 0;
        $phitmp548 = $phitmp547 >>> 2;
        $phitmp549 = $phitmp548 & 255;
        $687 = (($176) + 7) | 0;
        $688 = (($0) + ($687) | 0);
        HEAP8[$688 >> 0] = $phitmp549;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI8x8LumaPredHU_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$$1 = 0, $$$3 = 0, $$$5 = 0, $$$7 = 0, $$292 = 0, $$sink17$sink = 0, $$sink17$sink$1 = 0, $$sink17$sink$7 = 0, $$sink82$ph = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
        var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
        var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
        var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
        var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
        var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
        var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
        var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
        var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0;
        var $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0;
        var $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0;
        var $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
        var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
        var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
        var $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $6 = ((($4)) + 4 | 0);
        HEAP32[$6 >> 2] = $1;
        $7 = $1 << 1;
        $8 = ((($4)) + 8 | 0);
        HEAP32[$8 >> 2] = $7;
        $9 = ($1 * 3) | 0;
        $10 = ((($4)) + 12 | 0);
        HEAP32[$10 >> 2] = $9;
        $11 = $1 << 2;
        $12 = ((($4)) + 16 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = ($1 * 5) | 0;
        $14 = ((($4)) + 20 | 0);
        HEAP32[$14 >> 2] = $13;
        $15 = ($1 * 6) | 0;
        $16 = ((($4)) + 24 | 0);
        HEAP32[$16 >> 2] = $15;
        $17 = ($1 * 7) | 0;
        $18 = ((($4)) + 28 | 0);
        HEAP32[$18 >> 2] = $17;
        if ($2) {
            $19 = $1 ^ -1;
            $20 = (($0) + ($19) | 0);
            $21 = HEAP8[$20 >> 0] | 0;
            $22 = $21 & 255;
            $23 = ((($0)) + -1 | 0);
            $24 = HEAP8[$23 >> 0] | 0;
            $25 = $24 & 255;
            $26 = $25 << 1;
            $27 = (($26) + ($22)) | 0;
            $$sink82$ph = $27; $41 = $24;
        } else {
            $28 = ((($0)) + -1 | 0);
            $29 = HEAP8[$28 >> 0] | 0;
            $30 = $29 & 255;
            $31 = ($30 * 3) | 0;
            $$sink82$ph = $31; $41 = $29;
        }
        $32 = (($1) + -1) | 0;
        $33 = (($0) + ($32) | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = $34 & 255;
        $36 = (($$sink82$ph) + 2) | 0;
        $37 = (($36) + ($35)) | 0;
        $38 = $37 >>> 2;
        $39 = $38 & 255;
        HEAP8[$5 >> 0] = $39;
        $40 = $41 & 255;
        $42 = $35 << 1;
        $43 = (($42) + ($40)) | 0;
        $44 = (($7) + -1) | 0;
        $45 = (($0) + ($44) | 0);
        $46 = HEAP8[$45 >> 0] | 0;
        $47 = $46 & 255;
        $48 = (($43) + 2) | 0;
        $49 = (($48) + ($47)) | 0;
        $50 = $49 >>> 2;
        $51 = $50 & 255;
        $52 = ((($5)) + 1 | 0);
        HEAP8[$52 >> 0] = $51;
        $53 = $47 << 1;
        $54 = (($53) + ($35)) | 0;
        $55 = (($9) + -1) | 0;
        $56 = (($0) + ($55) | 0);
        $57 = HEAP8[$56 >> 0] | 0;
        $58 = $57 & 255;
        $59 = (($54) + 2) | 0;
        $60 = (($59) + ($58)) | 0;
        $61 = $60 >>> 2;
        $62 = $61 & 255;
        $63 = ((($5)) + 2 | 0);
        HEAP8[$63 >> 0] = $62;
        $64 = $58 << 1;
        $65 = (($64) + ($47)) | 0;
        $66 = (($11) + -1) | 0;
        $67 = (($0) + ($66) | 0);
        $68 = HEAP8[$67 >> 0] | 0;
        $69 = $68 & 255;
        $70 = (($65) + 2) | 0;
        $71 = (($70) + ($69)) | 0;
        $72 = $71 >>> 2;
        $73 = $72 & 255;
        $74 = ((($5)) + 3 | 0);
        HEAP8[$74 >> 0] = $73;
        $75 = $69 << 1;
        $76 = (($75) + ($58)) | 0;
        $77 = (($13) + -1) | 0;
        $78 = (($0) + ($77) | 0);
        $79 = HEAP8[$78 >> 0] | 0;
        $80 = $79 & 255;
        $81 = (($76) + 2) | 0;
        $82 = (($81) + ($80)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        $85 = ((($5)) + 4 | 0);
        HEAP8[$85 >> 0] = $84;
        $86 = $80 << 1;
        $87 = (($86) + ($69)) | 0;
        $88 = (($15) + -1) | 0;
        $89 = (($0) + ($88) | 0);
        $90 = HEAP8[$89 >> 0] | 0;
        $91 = $90 & 255;
        $92 = (($87) + 2) | 0;
        $93 = (($92) + ($91)) | 0;
        $94 = $93 >>> 2;
        $95 = $94 & 255;
        $96 = ((($5)) + 5 | 0);
        HEAP8[$96 >> 0] = $95;
        $97 = $91 << 1;
        $98 = (($97) + ($80)) | 0;
        $99 = (($17) + -1) | 0;
        $100 = (($0) + ($99) | 0);
        $101 = HEAP8[$100 >> 0] | 0;
        $102 = $101 & 255;
        $103 = (($98) + 2) | 0;
        $104 = (($103) + ($102)) | 0;
        $105 = $104 >>> 2;
        $106 = $105 & 255;
        $107 = ((($5)) + 6 | 0);
        HEAP8[$107 >> 0] = $106;
        $108 = ($102 * 3) | 0;
        $109 = (($91) + 2) | 0;
        $110 = (($109) + ($108)) | 0;
        $111 = $110 >>> 2;
        $112 = $111 & 255;
        $113 = ((($5)) + 7 | 0);
        HEAP8[$113 >> 0] = $112;
        $114 = $105 & 255;
        $115 = $111 & 255;
        $116 = ($115 * 3) | 0;
        $117 = (($114) + 2) | 0;
        $118 = (($117) + ($116)) | 0;
        $119 = $118 >>> 2;
        $120 = $119 & 255;
        $$292 = 0;
        while (1) {
            $121 = $$292 << 1;
            $122 = (($4) + ($$292 << 2) | 0);
            $123 = HEAP32[$122 >> 2] | 0;
            $124 = ($121 | 0) < (13);
            if ($124) {
                $125 = $121 >> 1;
                $126 = (($125) + 1) | 0;
                $127 = (($5) + ($126) | 0);
                $128 = HEAP8[$127 >> 0] | 0;
                $129 = $128 & 255;
                $130 = (($5) + ($125) | 0);
                $131 = HEAP8[$130 >> 0] | 0;
                $132 = $131 & 255;
                $133 = (($132) + 1) | 0;
                $134 = (($133) + ($129)) | 0;
                $135 = $134 >>> 1;
                $136 = $135 & 255;
                $$sink17$sink = $136;
            } else {
                $$sink17$sink = $112;
            }
            $137 = (($0) + ($123) | 0);
            HEAP8[$137 >> 0] = $$sink17$sink;
            $138 = $121 | 1;
            $139 = ($138 | 0) < (13);
            if ($139) {
                $141 = $121 >> 1;
                $142 = (($141) + 1) | 0;
                $143 = (($5) + ($142) | 0);
                $144 = HEAP8[$143 >> 0] | 0;
                $145 = $144 & 255;
                $146 = (($5) + ($141) | 0);
                $147 = HEAP8[$146 >> 0] | 0;
                $148 = $147 & 255;
                $149 = $145 << 1;
                $150 = (($141) + 2) | 0;
                $151 = (($5) + ($150) | 0);
                $152 = HEAP8[$151 >> 0] | 0;
                $153 = $152 & 255;
                $154 = (($148) + 2) | 0;
                $155 = (($154) + ($149)) | 0;
                $156 = (($155) + ($153)) | 0;
                $157 = $156 >>> 2;
                $158 = $157 & 255;
                $$sink17$sink$1 = $158;
            } else {
                $140 = ($138 | 0) == (13);
                $$$1 = $140 ? $120 : $112;
                $$sink17$sink$1 = $$$1;
            }
            $159 = (($123) + 1) | 0;
            $160 = (($0) + ($159) | 0);
            HEAP8[$160 >> 0] = $$sink17$sink$1;
            $161 = ($121 | 0) < (11);
            if ($161) {
                $165 = (($121) + 2) | 0;
                $166 = $165 >> 1;
                $167 = (($166) + 1) | 0;
                $168 = (($5) + ($167) | 0);
                $169 = HEAP8[$168 >> 0] | 0;
                $170 = $169 & 255;
                $171 = (($5) + ($166) | 0);
                $172 = HEAP8[$171 >> 0] | 0;
                $173 = $172 & 255;
                $174 = (($173) + 1) | 0;
                $175 = (($174) + ($170)) | 0;
                $176 = $175 >>> 1;
                $177 = $176 & 255;
                $178 = (($123) + 2) | 0;
                $179 = (($0) + ($178) | 0);
                HEAP8[$179 >> 0] = $177;
                $180 = (($121) + 3) | 0;
                $181 = ($121 | 0) == (10);
                if ($181) {
                    $182 = $180;
                    label = 14;
                } else {
                    $186 = $180 >> 1;
                    $187 = (($186) + 1) | 0;
                    $188 = (($5) + ($187) | 0);
                    $189 = HEAP8[$188 >> 0] | 0;
                    $190 = $189 & 255;
                    $191 = (($5) + ($186) | 0);
                    $192 = HEAP8[$191 >> 0] | 0;
                    $193 = $192 & 255;
                    $194 = $190 << 1;
                    $195 = (($186) + 2) | 0;
                    $196 = (($5) + ($195) | 0);
                    $197 = HEAP8[$196 >> 0] | 0;
                    $198 = $197 & 255;
                    $199 = (($193) + 2) | 0;
                    $200 = (($199) + ($194)) | 0;
                    $201 = (($200) + ($198)) | 0;
                    $202 = $201 >>> 2;
                    $203 = $202 & 255;
                    $204 = (($123) + 3) | 0;
                    $205 = (($0) + ($204) | 0);
                    HEAP8[$205 >> 0] = $203;
                    $206 = ($121 | 0) < (9);
                    if ($206) {
                        $210 = (($121) + 4) | 0;
                        $211 = $210 >> 1;
                        $212 = (($211) + 1) | 0;
                        $213 = (($5) + ($212) | 0);
                        $214 = HEAP8[$213 >> 0] | 0;
                        $215 = $214 & 255;
                        $216 = (($5) + ($211) | 0);
                        $217 = HEAP8[$216 >> 0] | 0;
                        $218 = $217 & 255;
                        $219 = (($218) + 1) | 0;
                        $220 = (($219) + ($215)) | 0;
                        $221 = $220 >>> 1;
                        $222 = $221 & 255;
                        $223 = (($123) + 4) | 0;
                        $224 = (($0) + ($223) | 0);
                        HEAP8[$224 >> 0] = $222;
                        $225 = (($121) + 5) | 0;
                        $226 = ($121 | 0) == (8);
                        if ($226) {
                            $227 = $225;
                            label = 18;
                        } else {
                            $231 = $225 >> 1;
                            $232 = (($231) + 1) | 0;
                            $233 = (($5) + ($232) | 0);
                            $234 = HEAP8[$233 >> 0] | 0;
                            $235 = $234 & 255;
                            $236 = (($5) + ($231) | 0);
                            $237 = HEAP8[$236 >> 0] | 0;
                            $238 = $237 & 255;
                            $239 = $235 << 1;
                            $240 = (($231) + 2) | 0;
                            $241 = (($5) + ($240) | 0);
                            $242 = HEAP8[$241 >> 0] | 0;
                            $243 = $242 & 255;
                            $244 = (($238) + 2) | 0;
                            $245 = (($244) + ($239)) | 0;
                            $246 = (($245) + ($243)) | 0;
                            $247 = $246 >>> 2;
                            $248 = $247 & 255;
                            $249 = (($123) + 5) | 0;
                            $250 = (($0) + ($249) | 0);
                            HEAP8[$250 >> 0] = $248;
                            $251 = ($121 | 0) < (7);
                            if ($251) {
                                $255 = (($121) + 6) | 0;
                                $256 = $255 >> 1;
                                $257 = (($256) + 1) | 0;
                                $258 = (($5) + ($257) | 0);
                                $259 = HEAP8[$258 >> 0] | 0;
                                $260 = $259 & 255;
                                $261 = (($5) + ($256) | 0);
                                $262 = HEAP8[$261 >> 0] | 0;
                                $263 = $262 & 255;
                                $264 = (($263) + 1) | 0;
                                $265 = (($264) + ($260)) | 0;
                                $266 = $265 >>> 1;
                                $267 = $266 & 255;
                                $268 = (($123) + 6) | 0;
                                $269 = (($0) + ($268) | 0);
                                HEAP8[$269 >> 0] = $267;
                                $270 = (($121) + 7) | 0;
                                $271 = ($121 | 0) == (6);
                                if ($271) {
                                    $272 = $270;
                                    label = 22;
                                } else {
                                    $274 = $270 >> 1;
                                    $275 = (($274) + 1) | 0;
                                    $276 = (($5) + ($275) | 0);
                                    $277 = HEAP8[$276 >> 0] | 0;
                                    $278 = $277 & 255;
                                    $279 = (($5) + ($274) | 0);
                                    $280 = HEAP8[$279 >> 0] | 0;
                                    $281 = $280 & 255;
                                    $282 = $278 << 1;
                                    $283 = (($274) + 2) | 0;
                                    $284 = (($5) + ($283) | 0);
                                    $285 = HEAP8[$284 >> 0] | 0;
                                    $286 = $285 & 255;
                                    $287 = (($281) + 2) | 0;
                                    $288 = (($287) + ($282)) | 0;
                                    $289 = (($288) + ($286)) | 0;
                                    $290 = $289 >>> 2;
                                    $291 = $290 & 255;
                                    $$sink17$sink$7 = $291;
                                }
                            } else {
                                label = 20;
                            }
                        }
                    } else {
                        label = 16;
                    }
                }
            } else {
                $162 = (($123) + 2) | 0;
                $163 = (($0) + ($162) | 0);
                HEAP8[$163 >> 0] = $112;
                $164 = (($121) + 3) | 0;
                $182 = $164;
                label = 14;
            }
            if ((label | 0) == 14) {
                label = 0;
                $183 = ($182 | 0) == (13);
                $$$3 = $183 ? $120 : $112;
                $184 = (($123) + 3) | 0;
                $185 = (($0) + ($184) | 0);
                HEAP8[$185 >> 0] = $$$3;
                label = 16;
            }
            if ((label | 0) == 16) {
                label = 0;
                $207 = (($123) + 4) | 0;
                $208 = (($0) + ($207) | 0);
                HEAP8[$208 >> 0] = $112;
                $209 = (($121) + 5) | 0;
                $227 = $209;
                label = 18;
            }
            if ((label | 0) == 18) {
                label = 0;
                $228 = ($227 | 0) == (13);
                $$$5 = $228 ? $120 : $112;
                $229 = (($123) + 5) | 0;
                $230 = (($0) + ($229) | 0);
                HEAP8[$230 >> 0] = $$$5;
                label = 20;
            }
            if ((label | 0) == 20) {
                label = 0;
                $252 = (($123) + 6) | 0;
                $253 = (($0) + ($252) | 0);
                HEAP8[$253 >> 0] = $112;
                $254 = (($121) + 7) | 0;
                $272 = $254;
                label = 22;
            }
            if ((label | 0) == 22) {
                label = 0;
                $273 = ($272 | 0) == (13);
                $$$7 = $273 ? $120 : $112;
                $$sink17$sink$7 = $$$7;
            }
            $292 = (($123) + 7) | 0;
            $293 = (($0) + ($292) | 0);
            HEAP8[$293 >> 0] = $$sink17$sink$7;
            $294 = (($$292) + 1) | 0;
            $exitcond = ($294 | 0) == (8);
            if ($exitcond) {
                break;
            } else {
                $$292 = $294;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec20WelsI8x8LumaPredHD_cEPhibb($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$ = 0, $$2138 = 0, $$sink1 = 0, $$sink135 = 0, $$sink135$1 = 0, $$sink135$2 = 0, $$sink135$3 = 0, $$sink135$4 = 0, $$sink135$5 = 0, $$sink135$6 = 0, $$sink135$7 = 0, $$sink136$2 = 0, $$sink136$4 = 0, $$sink136$6 = 0, $$sink21$sink$sink = 0, $$sink21$sink$sink$1 = 0, $$sink21$sink$sink$2 = 0, $$sink21$sink$sink$3 = 0, $$sink21$sink$sink$4 = 0, $$sink21$sink$sink$5 = 0;
        var $$sink21$sink$sink$6 = 0, $$sink21$sink$sink$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
        var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
        var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
        var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
        var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
        var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
        var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
        var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
        var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
        var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
        var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
        var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
        var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
        var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
        var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
        var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
        var $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0;
        var $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
        var $460 = 0, $461 = 0, $462 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
        var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
        var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
        var $99 = 0, $exitcond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $4 = sp;
        $5 = sp + 40 | 0;
        $6 = sp + 32 | 0;
        HEAP32[$4 >> 2] = 0;
        $7 = ((($4)) + 4 | 0);
        HEAP32[$7 >> 2] = $1;
        $8 = $1 << 1;
        $9 = ((($4)) + 8 | 0);
        HEAP32[$9 >> 2] = $8;
        $10 = ($1 * 3) | 0;
        $11 = ((($4)) + 12 | 0);
        HEAP32[$11 >> 2] = $10;
        $12 = $1 << 2;
        $13 = ((($4)) + 16 | 0);
        HEAP32[$13 >> 2] = $12;
        $14 = ($1 * 5) | 0;
        $15 = ((($4)) + 20 | 0);
        HEAP32[$15 >> 2] = $14;
        $16 = ($1 * 6) | 0;
        $17 = ((($4)) + 24 | 0);
        HEAP32[$17 >> 2] = $16;
        $18 = ($1 * 7) | 0;
        $19 = ((($4)) + 28 | 0);
        HEAP32[$19 >> 2] = $18;
        $20 = ((($0)) + -1 | 0);
        $21 = HEAP8[$20 >> 0] | 0;
        $22 = $21 & 255;
        $23 = $1 ^ -1;
        $24 = (($0) + ($23) | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 & 255;
        $27 = $26 << 1;
        $28 = (0 - ($1)) | 0;
        $29 = (($0) + ($28) | 0);
        $30 = HEAP8[$29 >> 0] | 0;
        $31 = $30 & 255;
        $32 = (($22) + 2) | 0;
        $33 = (($32) + ($27)) | 0;
        $34 = (($33) + ($31)) | 0;
        $35 = $22 << 1;
        $36 = (($1) + -1) | 0;
        $37 = (($0) + ($36) | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = $38 & 255;
        $40 = (($26) + 2) | 0;
        $41 = (($40) + ($35)) | 0;
        $42 = (($41) + ($39)) | 0;
        $43 = $42 >>> 2;
        $44 = $43 & 255;
        HEAP8[$5 >> 0] = $44;
        $45 = $31 << 1;
        $46 = (1 - ($1)) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = HEAP8[$47 >> 0] | 0;
        $49 = $48 & 255;
        $50 = (($40) + ($45)) | 0;
        $51 = (($50) + ($49)) | 0;
        $52 = $51 >>> 2;
        $53 = $52 & 255;
        HEAP8[$6 >> 0] = $53;
        $54 = $39 << 1;
        $55 = (($8) + -1) | 0;
        $56 = (($0) + ($55) | 0);
        $57 = HEAP8[$56 >> 0] | 0;
        $58 = $57 & 255;
        $59 = (($32) + ($54)) | 0;
        $60 = (($59) + ($58)) | 0;
        $61 = $60 >>> 2;
        $62 = $61 & 255;
        $63 = ((($5)) + 1 | 0);
        HEAP8[$63 >> 0] = $62;
        $64 = $49 << 1;
        $65 = (2 - ($1)) | 0;
        $66 = (($0) + ($65) | 0);
        $67 = HEAP8[$66 >> 0] | 0;
        $68 = $67 & 255;
        $69 = (($31) + 2) | 0;
        $70 = (($69) + ($64)) | 0;
        $71 = (($70) + ($68)) | 0;
        $72 = $71 >>> 2;
        $73 = $72 & 255;
        $74 = ((($6)) + 1 | 0);
        HEAP8[$74 >> 0] = $73;
        $75 = $58 << 1;
        $76 = (($10) + -1) | 0;
        $77 = (($0) + ($76) | 0);
        $78 = HEAP8[$77 >> 0] | 0;
        $79 = $78 & 255;
        $80 = (($39) + 2) | 0;
        $81 = (($80) + ($75)) | 0;
        $82 = (($81) + ($79)) | 0;
        $83 = $82 >>> 2;
        $84 = $83 & 255;
        $85 = ((($5)) + 2 | 0);
        HEAP8[$85 >> 0] = $84;
        $86 = $68 << 1;
        $87 = (3 - ($1)) | 0;
        $88 = (($0) + ($87) | 0);
        $89 = HEAP8[$88 >> 0] | 0;
        $90 = $89 & 255;
        $91 = (($49) + 2) | 0;
        $92 = (($91) + ($86)) | 0;
        $93 = (($92) + ($90)) | 0;
        $94 = $93 >>> 2;
        $95 = $94 & 255;
        $96 = ((($6)) + 2 | 0);
        HEAP8[$96 >> 0] = $95;
        $97 = $79 << 1;
        $98 = (($12) + -1) | 0;
        $99 = (($0) + ($98) | 0);
        $100 = HEAP8[$99 >> 0] | 0;
        $101 = $100 & 255;
        $102 = (($58) + 2) | 0;
        $103 = (($102) + ($97)) | 0;
        $104 = (($103) + ($101)) | 0;
        $105 = $104 >>> 2;
        $106 = $105 & 255;
        $107 = ((($5)) + 3 | 0);
        HEAP8[$107 >> 0] = $106;
        $108 = $90 << 1;
        $109 = (4 - ($1)) | 0;
        $110 = (($0) + ($109) | 0);
        $111 = HEAP8[$110 >> 0] | 0;
        $112 = $111 & 255;
        $113 = (($68) + 2) | 0;
        $114 = (($113) + ($108)) | 0;
        $115 = (($114) + ($112)) | 0;
        $116 = $115 >>> 2;
        $117 = $116 & 255;
        $118 = ((($6)) + 3 | 0);
        HEAP8[$118 >> 0] = $117;
        $119 = HEAP32[$11 >> 2] | 0;
        $120 = (($119) + -1) | 0;
        $121 = (($0) + ($120) | 0);
        $122 = HEAP8[$121 >> 0] | 0;
        $123 = $122 & 255;
        $124 = HEAP32[$13 >> 2] | 0;
        $125 = (($124) + -1) | 0;
        $126 = (($0) + ($125) | 0);
        $127 = HEAP8[$126 >> 0] | 0;
        $128 = $127 & 255;
        $129 = $128 << 1;
        $130 = HEAP32[$15 >> 2] | 0;
        $131 = (($130) + -1) | 0;
        $132 = (($0) + ($131) | 0);
        $133 = HEAP8[$132 >> 0] | 0;
        $134 = $133 & 255;
        $135 = (($123) + 2) | 0;
        $136 = (($135) + ($129)) | 0;
        $137 = (($136) + ($134)) | 0;
        $138 = $137 >>> 2;
        $139 = $138 & 255;
        $140 = ((($5)) + 4 | 0);
        HEAP8[$140 >> 0] = $139;
        $141 = $112 << 1;
        $142 = (5 - ($1)) | 0;
        $143 = (($0) + ($142) | 0);
        $144 = HEAP8[$143 >> 0] | 0;
        $145 = $144 & 255;
        $146 = (($90) + 2) | 0;
        $147 = (($146) + ($141)) | 0;
        $148 = (($147) + ($145)) | 0;
        $149 = $148 >>> 2;
        $150 = $149 & 255;
        $151 = ((($6)) + 4 | 0);
        HEAP8[$151 >> 0] = $150;
        $152 = $134 << 1;
        $153 = HEAP32[$17 >> 2] | 0;
        $154 = (($153) + -1) | 0;
        $155 = (($0) + ($154) | 0);
        $156 = HEAP8[$155 >> 0] | 0;
        $157 = $156 & 255;
        $158 = (($128) + 2) | 0;
        $159 = (($158) + ($152)) | 0;
        $160 = (($159) + ($157)) | 0;
        $161 = $160 >>> 2;
        $162 = $161 & 255;
        $163 = ((($5)) + 5 | 0);
        HEAP8[$163 >> 0] = $162;
        $164 = $145 << 1;
        $165 = (6 - ($1)) | 0;
        $166 = (($0) + ($165) | 0);
        $167 = HEAP8[$166 >> 0] | 0;
        $168 = $167 & 255;
        $169 = (($112) + 2) | 0;
        $170 = (($169) + ($164)) | 0;
        $171 = (($170) + ($168)) | 0;
        $172 = $171 >>> 2;
        $173 = $172 & 255;
        $174 = ((($6)) + 5 | 0);
        HEAP8[$174 >> 0] = $173;
        $175 = $157 << 1;
        $176 = HEAP32[$19 >> 2] | 0;
        $177 = (($176) + -1) | 0;
        $178 = (($0) + ($177) | 0);
        $179 = HEAP8[$178 >> 0] | 0;
        $180 = $179 & 255;
        $181 = (($134) + 2) | 0;
        $182 = (($181) + ($175)) | 0;
        $183 = (($182) + ($180)) | 0;
        $184 = $183 >>> 2;
        $185 = $184 & 255;
        $186 = ((($5)) + 6 | 0);
        HEAP8[$186 >> 0] = $185;
        $187 = $168 << 1;
        $188 = (7 - ($1)) | 0;
        $189 = (($0) + ($188) | 0);
        $190 = HEAP8[$189 >> 0] | 0;
        $191 = $190 & 255;
        $192 = (($145) + 2) | 0;
        $193 = (($192) + ($187)) | 0;
        $194 = (($193) + ($191)) | 0;
        $195 = $194 >>> 2;
        $196 = $195 & 255;
        $197 = ((($6)) + 6 | 0);
        HEAP8[$197 >> 0] = $196;
        $198 = $34 >>> 2;
        $199 = ($180 * 3) | 0;
        $200 = (($157) + 2) | 0;
        $201 = (($200) + ($199)) | 0;
        $202 = $201 >>> 2;
        $203 = $202 & 255;
        $204 = ((($5)) + 7 | 0);
        HEAP8[$204 >> 0] = $203;
        if ($3) {
            $205 = $191 << 1;
            $206 = (($205) + ($168)) | 0;
            $207 = (8 - ($1)) | 0;
            $208 = (($0) + ($207) | 0);
            $209 = HEAP8[$208 >> 0] | 0;
            $210 = $209 & 255;
            $211 = (($206) + ($210)) | 0;
            $$sink1 = $211;
        } else {
            $212 = ($191 * 3) | 0;
            $213 = (($212) + ($168)) | 0;
            $$sink1 = $213;
        }
        $214 = (($$sink1) + 2) | 0;
        $215 = $214 >>> 2;
        $216 = $215 & 255;
        $217 = ((($6)) + 7 | 0);
        HEAP8[$217 >> 0] = $216;
        $218 = $198 & 255;
        $219 = HEAP8[$5 >> 0] | 0;
        $220 = $219 & 255;
        $221 = (($218) + ($220)) | 0;
        $222 = $220 << 1;
        $223 = (($222) + ($218)) | 0;
        $224 = HEAP8[$63 >> 0] | 0;
        $225 = $224 & 255;
        $226 = (($223) + ($225)) | 0;
        $227 = $198 << 1;
        $228 = $227 & 510;
        $229 = (($228) + ($220)) | 0;
        $230 = HEAP8[$6 >> 0] | 0;
        $231 = $230 & 255;
        $232 = (($229) + ($231)) | 0;
        $233 = HEAP8[$74 >> 0] | 0;
        $234 = $233 & 255;
        $235 = $231 << 1;
        $236 = (($218) + ($234)) | 0;
        $237 = (($236) + ($235)) | 0;
        $$2138 = 0;
        while (1) {
            $238 = $$2138 << 1;
            $239 = (($4) + ($$2138 << 2) | 0);
            $240 = HEAP32[$239 >> 2] | 0;
            $241 = ($$2138 | 0) == (0);
            if ($241) {
                $$sink135 = $221;
            } else {
                $242 = (($$2138) + -1) | 0;
                $243 = (($5) + ($242) | 0);
                $244 = HEAP8[$243 >> 0] | 0;
                $245 = $244 & 255;
                $246 = (($5) + ($$2138) | 0);
                $247 = HEAP8[$246 >> 0] | 0;
                $248 = $247 & 255;
                $249 = (($248) + ($245)) | 0;
                $$sink135 = $249;
            }
            $250 = (($$sink135) + 1) | 0;
            $251 = $250 >>> 1;
            $$sink21$sink$sink = $251 & 255;
            $252 = (($0) + ($240) | 0);
            HEAP8[$252 >> 0] = $$sink21$sink$sink;
            $253 = ($238 | 0) > (0);
            if ($253) {
                $255 = ($$2138 | 0) == (1);
                if ($255) {
                    $$sink135$1 = $226;
                } else {
                    $256 = (($$2138) + -2) | 0;
                    $257 = (($5) + ($256) | 0);
                    $258 = HEAP8[$257 >> 0] | 0;
                    $259 = $258 & 255;
                    $260 = (($$2138) + -1) | 0;
                    $261 = (($5) + ($260) | 0);
                    $262 = HEAP8[$261 >> 0] | 0;
                    $263 = $262 & 255;
                    $264 = $263 << 1;
                    $265 = (($264) + ($259)) | 0;
                    $266 = (($5) + ($$2138) | 0);
                    $267 = HEAP8[$266 >> 0] | 0;
                    $268 = $267 & 255;
                    $269 = (($265) + ($268)) | 0;
                    $$sink135$1 = $269;
                }
            } else {
                $254 = ($238 | 0) == (0);
                $$ = $254 ? $232 : $237;
                $$sink135$1 = $$;
            }
            $270 = (($$sink135$1) + 2) | 0;
            $271 = $270 >>> 2;
            $$sink21$sink$sink$1 = $271 & 255;
            $272 = (($240) + 1) | 0;
            $273 = (($0) + ($272) | 0);
            HEAP8[$273 >> 0] = $$sink21$sink$sink$1;
            $274 = (($$2138) + -1) | 0;
            $275 = ($238 | 0) > (1);
            if ($275) {
                $276 = ($274 | 0) == (0);
                if ($276) {
                    $$sink135$2 = $221; $$sink136$2 = 1;
                } else {
                    $277 = (($$2138) + -2) | 0;
                    $278 = (($5) + ($277) | 0);
                    $279 = HEAP8[$278 >> 0] | 0;
                    $280 = $279 & 255;
                    $281 = (($5) + ($274) | 0);
                    $282 = HEAP8[$281 >> 0] | 0;
                    $283 = $282 & 255;
                    $284 = (($283) + ($280)) | 0;
                    $$sink135$2 = $284; $$sink136$2 = 1;
                }
            } else {
                $$sink135$2 = $237; $$sink136$2 = 2;
            }
            $285 = (($$sink135$2) + ($$sink136$2)) | 0;
            $286 = $285 >>> $$sink136$2;
            $$sink21$sink$sink$2 = $286 & 255;
            $287 = (($240) + 2) | 0;
            $288 = (($0) + ($287) | 0);
            HEAP8[$288 >> 0] = $$sink21$sink$sink$2;
            $289 = ($238 | 0) > (2);
            if ($289) {
                $307 = ($274 | 0) == (1);
                if ($307) {
                    $$sink135$3 = $226;
                } else {
                    $308 = (($$2138) + -3) | 0;
                    $309 = (($5) + ($308) | 0);
                    $310 = HEAP8[$309 >> 0] | 0;
                    $311 = $310 & 255;
                    $312 = (($$2138) + -2) | 0;
                    $313 = (($5) + ($312) | 0);
                    $314 = HEAP8[$313 >> 0] | 0;
                    $315 = $314 & 255;
                    $316 = $315 << 1;
                    $317 = (($316) + ($311)) | 0;
                    $318 = (($5) + ($274) | 0);
                    $319 = HEAP8[$318 >> 0] | 0;
                    $320 = $319 & 255;
                    $321 = (($317) + ($320)) | 0;
                    $$sink135$3 = $321;
                }
            } else {
                $290 = ($238 | 0) == (2);
                if ($290) {
                    $$sink135$3 = $232;
                } else {
                    $291 = ($238 | 0) < (1);
                    if ($291) {
                        $292 = (2 - ($238)) | 0;
                        $293 = (($6) + ($292) | 0);
                        $294 = HEAP8[$293 >> 0] | 0;
                        $295 = $294 & 255;
                        $296 = (1 - ($238)) | 0;
                        $297 = (($6) + ($296) | 0);
                        $298 = HEAP8[$297 >> 0] | 0;
                        $299 = $298 & 255;
                        $300 = $299 << 1;
                        $301 = (($300) + ($295)) | 0;
                        $302 = (0 - ($238)) | 0;
                        $303 = (($6) + ($302) | 0);
                        $304 = HEAP8[$303 >> 0] | 0;
                        $305 = $304 & 255;
                        $306 = (($301) + ($305)) | 0;
                        $$sink135$3 = $306;
                    } else {
                        $$sink135$3 = $237;
                    }
                }
            }
            $322 = (($$sink135$3) + 2) | 0;
            $323 = $322 >>> 2;
            $$sink21$sink$sink$3 = $323 & 255;
            $324 = (($240) + 3) | 0;
            $325 = (($0) + ($324) | 0);
            HEAP8[$325 >> 0] = $$sink21$sink$sink$3;
            $326 = (($$2138) + -2) | 0;
            $327 = ($238 | 0) > (3);
            if ($327) {
                $344 = ($326 | 0) == (0);
                if ($344) {
                    $$sink135$4 = $221; $$sink136$4 = 1;
                } else {
                    $345 = (($$2138) + -3) | 0;
                    $346 = (($5) + ($345) | 0);
                    $347 = HEAP8[$346 >> 0] | 0;
                    $348 = $347 & 255;
                    $349 = (($5) + ($326) | 0);
                    $350 = HEAP8[$349 >> 0] | 0;
                    $351 = $350 & 255;
                    $352 = (($351) + ($348)) | 0;
                    $$sink135$4 = $352; $$sink136$4 = 1;
                }
            } else {
                $328 = ($238 | 0) < (2);
                if ($328) {
                    $329 = (3 - ($238)) | 0;
                    $330 = (($6) + ($329) | 0);
                    $331 = HEAP8[$330 >> 0] | 0;
                    $332 = $331 & 255;
                    $333 = (2 - ($238)) | 0;
                    $334 = (($6) + ($333) | 0);
                    $335 = HEAP8[$334 >> 0] | 0;
                    $336 = $335 & 255;
                    $337 = $336 << 1;
                    $338 = (($337) + ($332)) | 0;
                    $339 = (1 - ($238)) | 0;
                    $340 = (($6) + ($339) | 0);
                    $341 = HEAP8[$340 >> 0] | 0;
                    $342 = $341 & 255;
                    $343 = (($338) + ($342)) | 0;
                    $$sink135$4 = $343; $$sink136$4 = 2;
                } else {
                    $$sink135$4 = $237; $$sink136$4 = 2;
                }
            }
            $353 = (($$sink135$4) + ($$sink136$4)) | 0;
            $354 = $353 >>> $$sink136$4;
            $$sink21$sink$sink$4 = $354 & 255;
            $355 = (($240) + 4) | 0;
            $356 = (($0) + ($355) | 0);
            HEAP8[$356 >> 0] = $$sink21$sink$sink$4;
            $357 = ($238 | 0) > (4);
            if ($357) {
                $375 = ($326 | 0) == (1);
                if ($375) {
                    $$sink135$5 = $226;
                } else {
                    $376 = (($$2138) + -4) | 0;
                    $377 = (($5) + ($376) | 0);
                    $378 = HEAP8[$377 >> 0] | 0;
                    $379 = $378 & 255;
                    $380 = (($$2138) + -3) | 0;
                    $381 = (($5) + ($380) | 0);
                    $382 = HEAP8[$381 >> 0] | 0;
                    $383 = $382 & 255;
                    $384 = $383 << 1;
                    $385 = (($384) + ($379)) | 0;
                    $386 = (($5) + ($326) | 0);
                    $387 = HEAP8[$386 >> 0] | 0;
                    $388 = $387 & 255;
                    $389 = (($385) + ($388)) | 0;
                    $$sink135$5 = $389;
                }
            } else {
                $358 = ($238 | 0) == (4);
                if ($358) {
                    $$sink135$5 = $232;
                } else {
                    $359 = ($238 | 0) < (3);
                    if ($359) {
                        $360 = (4 - ($238)) | 0;
                        $361 = (($6) + ($360) | 0);
                        $362 = HEAP8[$361 >> 0] | 0;
                        $363 = $362 & 255;
                        $364 = (3 - ($238)) | 0;
                        $365 = (($6) + ($364) | 0);
                        $366 = HEAP8[$365 >> 0] | 0;
                        $367 = $366 & 255;
                        $368 = $367 << 1;
                        $369 = (($368) + ($363)) | 0;
                        $370 = (2 - ($238)) | 0;
                        $371 = (($6) + ($370) | 0);
                        $372 = HEAP8[$371 >> 0] | 0;
                        $373 = $372 & 255;
                        $374 = (($369) + ($373)) | 0;
                        $$sink135$5 = $374;
                    } else {
                        $$sink135$5 = $237;
                    }
                }
            }
            $390 = (($$sink135$5) + 2) | 0;
            $391 = $390 >>> 2;
            $$sink21$sink$sink$5 = $391 & 255;
            $392 = (($240) + 5) | 0;
            $393 = (($0) + ($392) | 0);
            HEAP8[$393 >> 0] = $$sink21$sink$sink$5;
            $394 = (($$2138) + -3) | 0;
            $395 = ($238 | 0) > (5);
            if ($395) {
                $412 = ($394 | 0) == (0);
                if ($412) {
                    $$sink135$6 = $221; $$sink136$6 = 1;
                } else {
                    $413 = (($$2138) + -4) | 0;
                    $414 = (($5) + ($413) | 0);
                    $415 = HEAP8[$414 >> 0] | 0;
                    $416 = $415 & 255;
                    $417 = (($5) + ($394) | 0);
                    $418 = HEAP8[$417 >> 0] | 0;
                    $419 = $418 & 255;
                    $420 = (($419) + ($416)) | 0;
                    $$sink135$6 = $420; $$sink136$6 = 1;
                }
            } else {
                $396 = ($238 | 0) < (4);
                if ($396) {
                    $397 = (5 - ($238)) | 0;
                    $398 = (($6) + ($397) | 0);
                    $399 = HEAP8[$398 >> 0] | 0;
                    $400 = $399 & 255;
                    $401 = (4 - ($238)) | 0;
                    $402 = (($6) + ($401) | 0);
                    $403 = HEAP8[$402 >> 0] | 0;
                    $404 = $403 & 255;
                    $405 = $404 << 1;
                    $406 = (($405) + ($400)) | 0;
                    $407 = (3 - ($238)) | 0;
                    $408 = (($6) + ($407) | 0);
                    $409 = HEAP8[$408 >> 0] | 0;
                    $410 = $409 & 255;
                    $411 = (($406) + ($410)) | 0;
                    $$sink135$6 = $411; $$sink136$6 = 2;
                } else {
                    $$sink135$6 = $237; $$sink136$6 = 2;
                }
            }
            $421 = (($$sink135$6) + ($$sink136$6)) | 0;
            $422 = $421 >>> $$sink136$6;
            $$sink21$sink$sink$6 = $422 & 255;
            $423 = (($240) + 6) | 0;
            $424 = (($0) + ($423) | 0);
            HEAP8[$424 >> 0] = $$sink21$sink$sink$6;
            $425 = ($238 | 0) > (6);
            if ($425) {
                $443 = ($394 | 0) == (1);
                if ($443) {
                    $$sink135$7 = $226;
                } else {
                    $444 = (($$2138) + -5) | 0;
                    $445 = (($5) + ($444) | 0);
                    $446 = HEAP8[$445 >> 0] | 0;
                    $447 = $446 & 255;
                    $448 = (($$2138) + -4) | 0;
                    $449 = (($5) + ($448) | 0);
                    $450 = HEAP8[$449 >> 0] | 0;
                    $451 = $450 & 255;
                    $452 = $451 << 1;
                    $453 = (($452) + ($447)) | 0;
                    $454 = (($5) + ($394) | 0);
                    $455 = HEAP8[$454 >> 0] | 0;
                    $456 = $455 & 255;
                    $457 = (($453) + ($456)) | 0;
                    $$sink135$7 = $457;
                }
            } else {
                $426 = ($238 | 0) == (6);
                if ($426) {
                    $$sink135$7 = $232;
                } else {
                    $427 = ($238 | 0) < (5);
                    if ($427) {
                        $428 = (6 - ($238)) | 0;
                        $429 = (($6) + ($428) | 0);
                        $430 = HEAP8[$429 >> 0] | 0;
                        $431 = $430 & 255;
                        $432 = (5 - ($238)) | 0;
                        $433 = (($6) + ($432) | 0);
                        $434 = HEAP8[$433 >> 0] | 0;
                        $435 = $434 & 255;
                        $436 = $435 << 1;
                        $437 = (($436) + ($431)) | 0;
                        $438 = (4 - ($238)) | 0;
                        $439 = (($6) + ($438) | 0);
                        $440 = HEAP8[$439 >> 0] | 0;
                        $441 = $440 & 255;
                        $442 = (($437) + ($441)) | 0;
                        $$sink135$7 = $442;
                    } else {
                        $$sink135$7 = $237;
                    }
                }
            }
            $458 = (($$sink135$7) + 2) | 0;
            $459 = $458 >>> 2;
            $$sink21$sink$sink$7 = $459 & 255;
            $460 = (($240) + 7) | 0;
            $461 = (($0) + ($460) | 0);
            HEAP8[$461 >> 0] = $$sink21$sink$sink$7;
            $462 = (($$2138) + 1) | 0;
            $exitcond = ($462 | 0) == (8);
            if ($exitcond) {
                break;
            } else {
                $$2138 = $462;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec19WelsIChromaPredDc_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$mask = 0, $$mask115 = 0, $$mask116 = 0, $$mask117 = 0, $$sroa$7$0$insert$insert123 = 0, $$sroa$715$0$insert$insert120 = 0, $$sroa$8$0$insert$insert122 = 0, $$sroa$816$0$insert$insert119 = 0, $$sroa$9$0$insert$insert121 = 0, $$sroa$917$0$insert$insert118 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
        var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
        var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
        var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
        var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
        var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
        var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (($1) + -1) | 0;
        $3 = (($2) + ($1)) | 0;
        $4 = (($3) + ($1)) | 0;
        $5 = (($4) + ($1)) | 0;
        $6 = (($5) + ($1)) | 0;
        $7 = (($6) + ($1)) | 0;
        $8 = (($7) + ($1)) | 0;
        $9 = (0 - ($1)) | 0;
        $10 = (($0) + ($9) | 0);
        $11 = HEAP8[$10 >> 0] | 0;
        $12 = $11 & 255;
        $13 = (1 - ($1)) | 0;
        $14 = (($0) + ($13) | 0);
        $15 = HEAP8[$14 >> 0] | 0;
        $16 = $15 & 255;
        $17 = (2 - ($1)) | 0;
        $18 = (($0) + ($17) | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = $19 & 255;
        $21 = (3 - ($1)) | 0;
        $22 = (($0) + ($21) | 0);
        $23 = HEAP8[$22 >> 0] | 0;
        $24 = $23 & 255;
        $25 = ((($0)) + -1 | 0);
        $26 = HEAP8[$25 >> 0] | 0;
        $27 = $26 & 255;
        $28 = (($0) + ($2) | 0);
        $29 = HEAP8[$28 >> 0] | 0;
        $30 = $29 & 255;
        $31 = (($0) + ($3) | 0);
        $32 = HEAP8[$31 >> 0] | 0;
        $33 = $32 & 255;
        $34 = (($0) + ($4) | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = (($12) + 4) | 0;
        $38 = (($37) + ($16)) | 0;
        $39 = (($38) + ($20)) | 0;
        $40 = (($39) + ($24)) | 0;
        $41 = (($40) + ($27)) | 0;
        $42 = (($41) + ($30)) | 0;
        $43 = (($42) + ($33)) | 0;
        $44 = (($43) + ($36)) | 0;
        $45 = $44 >>> 3;
        $46 = (4 - ($1)) | 0;
        $47 = (($0) + ($46) | 0);
        $48 = HEAP8[$47 >> 0] | 0;
        $49 = $48 & 255;
        $50 = (5 - ($1)) | 0;
        $51 = (($0) + ($50) | 0);
        $52 = HEAP8[$51 >> 0] | 0;
        $53 = $52 & 255;
        $54 = (($53) + ($49)) | 0;
        $55 = (6 - ($1)) | 0;
        $56 = (($0) + ($55) | 0);
        $57 = HEAP8[$56 >> 0] | 0;
        $58 = $57 & 255;
        $59 = (($54) + ($58)) | 0;
        $60 = (7 - ($1)) | 0;
        $61 = (($0) + ($60) | 0);
        $62 = HEAP8[$61 >> 0] | 0;
        $63 = $62 & 255;
        $64 = (($59) + ($63)) | 0;
        $65 = (($0) + ($5) | 0);
        $66 = HEAP8[$65 >> 0] | 0;
        $67 = $66 & 255;
        $68 = (($0) + ($6) | 0);
        $69 = HEAP8[$68 >> 0] | 0;
        $70 = $69 & 255;
        $71 = (($70) + ($67)) | 0;
        $72 = (($0) + ($7) | 0);
        $73 = HEAP8[$72 >> 0] | 0;
        $74 = $73 & 255;
        $75 = (($71) + ($74)) | 0;
        $76 = (($0) + ($8) | 0);
        $77 = HEAP8[$76 >> 0] | 0;
        $78 = $77 & 255;
        $79 = (($75) + ($78)) | 0;
        $80 = (($64) + 2) | 0;
        $81 = $80 >>> 2;
        $82 = (($79) + 2) | 0;
        $83 = $82 >>> 2;
        $84 = (($64) + 4) | 0;
        $85 = (($84) + ($79)) | 0;
        $86 = $85 >>> 3;
        $$mask = $81 & 255;
        $87 = (_bitshift64Shl(($$mask | 0), 0, 56) | 0);
        $88 = tempRet0;
        $89 = (_bitshift64Shl(($$mask | 0), 0, 48) | 0);
        $90 = tempRet0;
        $91 = (_bitshift64Shl(($$mask | 0), 0, 40) | 0);
        $92 = tempRet0;
        $$mask115 = $45 & 255;
        $93 = $45 << 24;
        $94 = $$mask115 << 16;
        $95 = $$mask115 << 8;
        $$sroa$917$0$insert$insert118 = $$mask115 | $93;
        $$sroa$816$0$insert$insert119 = $$sroa$917$0$insert$insert118 | $94;
        $$sroa$715$0$insert$insert120 = $$sroa$816$0$insert$insert119 | $95;
        $96 = $89 | $$sroa$715$0$insert$insert120;
        $97 = $96 | $87;
        $98 = $90 | $88;
        $99 = $97 | $91;
        $100 = $98 | $92;
        $101 = $100 | $$mask;
        $$mask116 = $86 & 255;
        $102 = (_bitshift64Shl(($$mask116 | 0), 0, 56) | 0);
        $103 = tempRet0;
        $104 = (_bitshift64Shl(($$mask116 | 0), 0, 48) | 0);
        $105 = tempRet0;
        $106 = (_bitshift64Shl(($$mask116 | 0), 0, 40) | 0);
        $107 = tempRet0;
        $$mask117 = $83 & 255;
        $108 = $83 << 24;
        $109 = $$mask117 << 16;
        $110 = $$mask117 << 8;
        $$sroa$9$0$insert$insert121 = $$mask117 | $108;
        $$sroa$8$0$insert$insert122 = $$sroa$9$0$insert$insert121 | $109;
        $$sroa$7$0$insert$insert123 = $$sroa$8$0$insert$insert122 | $110;
        $111 = $104 | $$sroa$7$0$insert$insert123;
        $112 = $111 | $102;
        $113 = $105 | $103;
        $114 = $112 | $106;
        $115 = $113 | $107;
        $116 = $115 | $$mask116;
        $117 = $0;
        $118 = $117;
        HEAP32[$118 >> 2] = $99;
        $119 = (($117) + 4) | 0;
        $120 = $119;
        HEAP32[$120 >> 2] = $101;
        $121 = (($0) + ($1) | 0);
        $122 = $121;
        $123 = $122;
        HEAP32[$123 >> 2] = $99;
        $124 = (($122) + 4) | 0;
        $125 = $124;
        HEAP32[$125 >> 2] = $101;
        $126 = ((($31)) + 1 | 0);
        $127 = $126;
        $128 = $127;
        HEAP32[$128 >> 2] = $99;
        $129 = (($127) + 4) | 0;
        $130 = $129;
        HEAP32[$130 >> 2] = $101;
        $131 = ((($34)) + 1 | 0);
        $132 = $131;
        $133 = $132;
        HEAP32[$133 >> 2] = $99;
        $134 = (($132) + 4) | 0;
        $135 = $134;
        HEAP32[$135 >> 2] = $101;
        $136 = ((($65)) + 1 | 0);
        $137 = $136;
        $138 = $137;
        HEAP32[$138 >> 2] = $114;
        $139 = (($137) + 4) | 0;
        $140 = $139;
        HEAP32[$140 >> 2] = $116;
        $141 = ((($68)) + 1 | 0);
        $142 = $141;
        $143 = $142;
        HEAP32[$143 >> 2] = $114;
        $144 = (($142) + 4) | 0;
        $145 = $144;
        HEAP32[$145 >> 2] = $116;
        $146 = ((($72)) + 1 | 0);
        $147 = $146;
        $148 = $147;
        HEAP32[$148 >> 2] = $114;
        $149 = (($147) + 4) | 0;
        $150 = $149;
        HEAP32[$150 >> 2] = $116;
        $151 = ((($76)) + 1 | 0);
        $152 = $151;
        $153 = $152;
        HEAP32[$153 >> 2] = $114;
        $154 = (($152) + 4) | 0;
        $155 = $154;
        HEAP32[$155 >> 2] = $116;
        return;
    }
    function __ZN7WelsDec18WelsIChromaPredH_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
        var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
        var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 * 7) | 0;
        $3 = (($2) + -1) | 0;
        $4 = (($0) + ($3) | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = (___muldi3(($6 | 0), 0, 16843009, 16843009) | 0);
        $8 = tempRet0;
        $9 = (($0) + ($2) | 0);
        $10 = $9;
        $11 = $10;
        HEAP32[$11 >> 2] = $7;
        $12 = (($10) + 4) | 0;
        $13 = $12;
        HEAP32[$13 >> 2] = $8;
        $14 = ($1 * 6) | 0;
        $15 = (($14) + -1) | 0;
        $16 = (($0) + ($15) | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = $17 & 255;
        $19 = (___muldi3(($18 | 0), 0, 16843009, 16843009) | 0);
        $20 = tempRet0;
        $21 = (($0) + ($14) | 0);
        $22 = $21;
        $23 = $22;
        HEAP32[$23 >> 2] = $19;
        $24 = (($22) + 4) | 0;
        $25 = $24;
        HEAP32[$25 >> 2] = $20;
        $26 = ($1 * 5) | 0;
        $27 = (($26) + -1) | 0;
        $28 = (($0) + ($27) | 0);
        $29 = HEAP8[$28 >> 0] | 0;
        $30 = $29 & 255;
        $31 = (___muldi3(($30 | 0), 0, 16843009, 16843009) | 0);
        $32 = tempRet0;
        $33 = (($0) + ($26) | 0);
        $34 = $33;
        $35 = $34;
        HEAP32[$35 >> 2] = $31;
        $36 = (($34) + 4) | 0;
        $37 = $36;
        HEAP32[$37 >> 2] = $32;
        $38 = $1 << 2;
        $39 = (($38) + -1) | 0;
        $40 = (($0) + ($39) | 0);
        $41 = HEAP8[$40 >> 0] | 0;
        $42 = $41 & 255;
        $43 = (___muldi3(($42 | 0), 0, 16843009, 16843009) | 0);
        $44 = tempRet0;
        $45 = (($0) + ($38) | 0);
        $46 = $45;
        $47 = $46;
        HEAP32[$47 >> 2] = $43;
        $48 = (($46) + 4) | 0;
        $49 = $48;
        HEAP32[$49 >> 2] = $44;
        $50 = ($1 * 3) | 0;
        $51 = (($50) + -1) | 0;
        $52 = (($0) + ($51) | 0);
        $53 = HEAP8[$52 >> 0] | 0;
        $54 = $53 & 255;
        $55 = (___muldi3(($54 | 0), 0, 16843009, 16843009) | 0);
        $56 = tempRet0;
        $57 = (($0) + ($50) | 0);
        $58 = $57;
        $59 = $58;
        HEAP32[$59 >> 2] = $55;
        $60 = (($58) + 4) | 0;
        $61 = $60;
        HEAP32[$61 >> 2] = $56;
        $62 = $1 << 1;
        $63 = (($62) + -1) | 0;
        $64 = (($0) + ($63) | 0);
        $65 = HEAP8[$64 >> 0] | 0;
        $66 = $65 & 255;
        $67 = (___muldi3(($66 | 0), 0, 16843009, 16843009) | 0);
        $68 = tempRet0;
        $69 = (($0) + ($62) | 0);
        $70 = $69;
        $71 = $70;
        HEAP32[$71 >> 2] = $67;
        $72 = (($70) + 4) | 0;
        $73 = $72;
        HEAP32[$73 >> 2] = $68;
        $74 = (($1) + -1) | 0;
        $75 = (($0) + ($74) | 0);
        $76 = HEAP8[$75 >> 0] | 0;
        $77 = $76 & 255;
        $78 = (___muldi3(($77 | 0), 0, 16843009, 16843009) | 0);
        $79 = tempRet0;
        $80 = (($0) + ($1) | 0);
        $81 = $80;
        $82 = $81;
        HEAP32[$82 >> 2] = $78;
        $83 = (($81) + 4) | 0;
        $84 = $83;
        HEAP32[$84 >> 2] = $79;
        $85 = ((($0)) + -1 | 0);
        $86 = HEAP8[$85 >> 0] | 0;
        $87 = $86 & 255;
        $88 = (___muldi3(($87 | 0), 0, 16843009, 16843009) | 0);
        $89 = tempRet0;
        $90 = $0;
        $91 = $90;
        HEAP32[$91 >> 2] = $88;
        $92 = (($90) + 4) | 0;
        $93 = $92;
        HEAP32[$93 >> 2] = $89;
        return;
    }
    function __ZN7WelsDec18WelsIChromaPredV_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (0 - ($1)) | 0;
        $3 = (($0) + ($2) | 0);
        $4 = $3;
        $5 = $4;
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (($4) + 4) | 0;
        $8 = $7;
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = $1 << 1;
        $11 = $1 << 2;
        $12 = $0;
        $13 = $12;
        HEAP32[$13 >> 2] = $6;
        $14 = (($12) + 4) | 0;
        $15 = $14;
        HEAP32[$15 >> 2] = $9;
        $16 = (($0) + ($1) | 0);
        $17 = $16;
        $18 = $17;
        HEAP32[$18 >> 2] = $6;
        $19 = (($17) + 4) | 0;
        $20 = $19;
        HEAP32[$20 >> 2] = $9;
        $21 = (($0) + ($10) | 0);
        $22 = $21;
        $23 = $22;
        HEAP32[$23 >> 2] = $6;
        $24 = (($22) + 4) | 0;
        $25 = $24;
        HEAP32[$25 >> 2] = $9;
        $26 = (($21) + ($1) | 0);
        $27 = $26;
        $28 = $27;
        HEAP32[$28 >> 2] = $6;
        $29 = (($27) + 4) | 0;
        $30 = $29;
        HEAP32[$30 >> 2] = $9;
        $31 = (($0) + ($11) | 0);
        $32 = $31;
        $33 = $32;
        HEAP32[$33 >> 2] = $6;
        $34 = (($32) + 4) | 0;
        $35 = $34;
        HEAP32[$35 >> 2] = $9;
        $36 = (($31) + ($1) | 0);
        $37 = $36;
        $38 = $37;
        HEAP32[$38 >> 2] = $6;
        $39 = (($37) + 4) | 0;
        $40 = $39;
        HEAP32[$40 >> 2] = $9;
        $41 = (($31) + ($10) | 0);
        $42 = $41;
        $43 = $42;
        HEAP32[$43 >> 2] = $6;
        $44 = (($42) + 4) | 0;
        $45 = $44;
        HEAP32[$45 >> 2] = $9;
        $46 = $1 << 3;
        $47 = (($0) + ($46) | 0);
        $48 = (($47) + ($2) | 0);
        $49 = $48;
        $50 = $49;
        HEAP32[$50 >> 2] = $6;
        $51 = (($49) + 4) | 0;
        $52 = $51;
        HEAP32[$52 >> 2] = $9;
        return;
    }
    function __ZN7WelsDec22WelsIChromaPredPlane_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$063 = 0, $$162 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
        var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
        var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
        var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
        var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        $2 = (0 - ($1)) | 0;
        $3 = (($0) + ($2) | 0);
        $4 = ((($0)) + -1 | 0);
        $5 = ((($3)) + 4 | 0);
        $6 = HEAP8[$5 >> 0] | 0;
        $7 = $6 & 255;
        $8 = ((($3)) + 2 | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = $9 & 255;
        $11 = (($7) - ($10)) | 0;
        $12 = $1 << 2;
        $13 = (($4) + ($12) | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = $14 & 255;
        $16 = $1 << 1;
        $17 = (($4) + ($16) | 0);
        $18 = HEAP8[$17 >> 0] | 0;
        $19 = $18 & 255;
        $20 = (($15) - ($19)) | 0;
        $21 = ((($3)) + 5 | 0);
        $22 = HEAP8[$21 >> 0] | 0;
        $23 = $22 & 255;
        $24 = ((($3)) + 1 | 0);
        $25 = HEAP8[$24 >> 0] | 0;
        $26 = $25 & 255;
        $27 = (($23) - ($26)) | 0;
        $28 = $27 << 1;
        $29 = (($28) + ($11)) | 0;
        $30 = ($1 * 5) | 0;
        $31 = (($4) + ($30) | 0);
        $32 = HEAP8[$31 >> 0] | 0;
        $33 = $32 & 255;
        $34 = (($4) + ($1) | 0);
        $35 = HEAP8[$34 >> 0] | 0;
        $36 = $35 & 255;
        $37 = (($33) - ($36)) | 0;
        $38 = $37 << 1;
        $39 = (($38) + ($20)) | 0;
        $40 = ((($3)) + 6 | 0);
        $41 = HEAP8[$40 >> 0] | 0;
        $42 = $41 & 255;
        $43 = HEAP8[$3 >> 0] | 0;
        $44 = $43 & 255;
        $45 = (($42) - ($44)) | 0;
        $46 = ($45 * 3) | 0;
        $47 = (($46) + ($29)) | 0;
        $48 = ($1 * 6) | 0;
        $49 = (($4) + ($48) | 0);
        $50 = HEAP8[$49 >> 0] | 0;
        $51 = $50 & 255;
        $52 = HEAP8[$4 >> 0] | 0;
        $53 = $52 & 255;
        $54 = (($51) - ($53)) | 0;
        $55 = ($54 * 3) | 0;
        $56 = (($55) + ($39)) | 0;
        $57 = ((($3)) + 7 | 0);
        $58 = HEAP8[$57 >> 0] | 0;
        $59 = $58 & 255;
        $60 = ((($3)) + -1 | 0);
        $61 = HEAP8[$60 >> 0] | 0;
        $62 = $61 & 255;
        $63 = (($59) - ($62)) | 0;
        $64 = $63 << 2;
        $65 = (($64) + ($47)) | 0;
        $66 = ($1 * 7) | 0;
        $67 = (($4) + ($66) | 0);
        $68 = HEAP8[$67 >> 0] | 0;
        $69 = $68 & 255;
        $70 = (0 - ($1)) | 0;
        $71 = (($4) + ($70) | 0);
        $72 = HEAP8[$71 >> 0] | 0;
        $73 = $72 & 255;
        $74 = (($69) - ($73)) | 0;
        $75 = $74 << 2;
        $76 = (($75) + ($56)) | 0;
        $77 = (($59) + ($69)) | 0;
        $78 = $77 << 4;
        $79 = ($65 * 17) | 0;
        $80 = (($79) + 16) | 0;
        $81 = $80 >> 5;
        $82 = ($76 * 17) | 0;
        $83 = (($82) + 16) | 0;
        $84 = $83 >> 5;
        $85 = (($78) + 16) | 0;
        $86 = Math_imul($81, -3) | 0;
        $87 = Math_imul($81, -2) | 0;
        $88 = $81 << 1;
        $89 = ($81 * 3) | 0;
        $90 = $81 << 2;
        $$063 = $0; $$162 = 0;
        while (1) {
            $91 = (($$162) + -3) | 0;
            $92 = Math_imul($91, $84) | 0;
            $93 = (($85) + ($92)) | 0;
            $94 = (($93) + ($86)) | 0;
            $95 = $94 >> 5;
            $96 = ($95 >>> 0) > (255);
            $97 = (0 - ($95)) | 0;
            $98 = $97 >> 31;
            $99 = $96 ? $98 : $95;
            $100 = $99 & 255;
            HEAP8[$$063 >> 0] = $100;
            $101 = (($93) + ($87)) | 0;
            $102 = $101 >> 5;
            $103 = ($102 >>> 0) > (255);
            $104 = (0 - ($102)) | 0;
            $105 = $104 >> 31;
            $106 = $103 ? $105 : $102;
            $107 = $106 & 255;
            $108 = ((($$063)) + 1 | 0);
            HEAP8[$108 >> 0] = $107;
            $109 = (($93) - ($81)) | 0;
            $110 = $109 >> 5;
            $111 = ($110 >>> 0) > (255);
            $112 = (0 - ($110)) | 0;
            $113 = $112 >> 31;
            $114 = $111 ? $113 : $110;
            $115 = $114 & 255;
            $116 = ((($$063)) + 2 | 0);
            HEAP8[$116 >> 0] = $115;
            $117 = $93 >> 5;
            $118 = ($117 >>> 0) > (255);
            $119 = (0 - ($117)) | 0;
            $120 = $119 >> 31;
            $121 = $118 ? $120 : $117;
            $122 = $121 & 255;
            $123 = ((($$063)) + 3 | 0);
            HEAP8[$123 >> 0] = $122;
            $124 = (($93) + ($81)) | 0;
            $125 = $124 >> 5;
            $126 = ($125 >>> 0) > (255);
            $127 = (0 - ($125)) | 0;
            $128 = $127 >> 31;
            $129 = $126 ? $128 : $125;
            $130 = $129 & 255;
            $131 = ((($$063)) + 4 | 0);
            HEAP8[$131 >> 0] = $130;
            $132 = (($93) + ($88)) | 0;
            $133 = $132 >> 5;
            $134 = ($133 >>> 0) > (255);
            $135 = (0 - ($133)) | 0;
            $136 = $135 >> 31;
            $137 = $134 ? $136 : $133;
            $138 = $137 & 255;
            $139 = ((($$063)) + 5 | 0);
            HEAP8[$139 >> 0] = $138;
            $140 = (($93) + ($89)) | 0;
            $141 = $140 >> 5;
            $142 = ($141 >>> 0) > (255);
            $143 = (0 - ($141)) | 0;
            $144 = $143 >> 31;
            $145 = $142 ? $144 : $141;
            $146 = $145 & 255;
            $147 = ((($$063)) + 6 | 0);
            HEAP8[$147 >> 0] = $146;
            $148 = (($93) + ($90)) | 0;
            $149 = $148 >> 5;
            $150 = ($149 >>> 0) > (255);
            $151 = (0 - ($149)) | 0;
            $152 = $151 >> 31;
            $153 = $150 ? $152 : $149;
            $154 = $153 & 255;
            $155 = ((($$063)) + 7 | 0);
            HEAP8[$155 >> 0] = $154;
            $156 = (($$063) + ($1) | 0);
            $157 = (($$162) + 1) | 0;
            $exitcond = ($157 | 0) == (8);
            if ($exitcond) {
                break;
            } else {
                $$063 = $156; $$162 = $157;
            }
        }
        return;
    }
    function __ZN7WelsDec23WelsIChromaPredDcLeft_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$mask = 0, $$mask69 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
        var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
        var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
        var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (($1) + -1) | 0;
        $3 = (($2) + ($1)) | 0;
        $4 = (($3) + ($1)) | 0;
        $5 = (($4) + ($1)) | 0;
        $6 = (($5) + ($1)) | 0;
        $7 = (($6) + ($1)) | 0;
        $8 = (($7) + ($1)) | 0;
        $9 = ((($0)) + -1 | 0);
        $10 = HEAP8[$9 >> 0] | 0;
        $11 = $10 & 255;
        $12 = (($0) + ($2) | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = $13 & 255;
        $15 = (($0) + ($3) | 0);
        $16 = HEAP8[$15 >> 0] | 0;
        $17 = $16 & 255;
        $18 = (($0) + ($4) | 0);
        $19 = HEAP8[$18 >> 0] | 0;
        $20 = $19 & 255;
        $21 = (($11) + 2) | 0;
        $22 = (($21) + ($14)) | 0;
        $23 = (($22) + ($17)) | 0;
        $24 = (($23) + ($20)) | 0;
        $25 = $24 >>> 2;
        $26 = (($0) + ($5) | 0);
        $27 = HEAP8[$26 >> 0] | 0;
        $28 = $27 & 255;
        $29 = (($0) + ($6) | 0);
        $30 = HEAP8[$29 >> 0] | 0;
        $31 = $30 & 255;
        $32 = (($0) + ($7) | 0);
        $33 = HEAP8[$32 >> 0] | 0;
        $34 = $33 & 255;
        $35 = (($0) + ($8) | 0);
        $36 = HEAP8[$35 >> 0] | 0;
        $37 = $36 & 255;
        $38 = (($28) + 2) | 0;
        $39 = (($38) + ($31)) | 0;
        $40 = (($39) + ($34)) | 0;
        $41 = (($40) + ($37)) | 0;
        $42 = $41 >>> 2;
        $$mask = $25 & 255;
        $43 = (___muldi3(($$mask | 0), 0, 16843009, 16843009) | 0);
        $44 = tempRet0;
        $$mask69 = $42 & 255;
        $45 = (___muldi3(($$mask69 | 0), 0, 16843009, 16843009) | 0);
        $46 = tempRet0;
        $47 = $0;
        $48 = $47;
        HEAP32[$48 >> 2] = $43;
        $49 = (($47) + 4) | 0;
        $50 = $49;
        HEAP32[$50 >> 2] = $44;
        $51 = (($0) + ($1) | 0);
        $52 = $51;
        $53 = $52;
        HEAP32[$53 >> 2] = $43;
        $54 = (($52) + 4) | 0;
        $55 = $54;
        HEAP32[$55 >> 2] = $44;
        $56 = ((($15)) + 1 | 0);
        $57 = $56;
        $58 = $57;
        HEAP32[$58 >> 2] = $43;
        $59 = (($57) + 4) | 0;
        $60 = $59;
        HEAP32[$60 >> 2] = $44;
        $61 = ((($18)) + 1 | 0);
        $62 = $61;
        $63 = $62;
        HEAP32[$63 >> 2] = $43;
        $64 = (($62) + 4) | 0;
        $65 = $64;
        HEAP32[$65 >> 2] = $44;
        $66 = ((($26)) + 1 | 0);
        $67 = $66;
        $68 = $67;
        HEAP32[$68 >> 2] = $45;
        $69 = (($67) + 4) | 0;
        $70 = $69;
        HEAP32[$70 >> 2] = $46;
        $71 = ((($29)) + 1 | 0);
        $72 = $71;
        $73 = $72;
        HEAP32[$73 >> 2] = $45;
        $74 = (($72) + 4) | 0;
        $75 = $74;
        HEAP32[$75 >> 2] = $46;
        $76 = ((($32)) + 1 | 0);
        $77 = $76;
        $78 = $77;
        HEAP32[$78 >> 2] = $45;
        $79 = (($77) + 4) | 0;
        $80 = $79;
        HEAP32[$80 >> 2] = $46;
        $81 = ((($35)) + 1 | 0);
        $82 = $81;
        $83 = $82;
        HEAP32[$83 >> 2] = $45;
        $84 = (($82) + 4) | 0;
        $85 = $84;
        HEAP32[$85 >> 2] = $46;
        return;
    }
    function __ZN7WelsDec22WelsIChromaPredDcTop_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$mask = 0, $$mask32 = 0, $$sroa$7$0$insert$insert35 = 0, $$sroa$8$0$insert$insert34 = 0, $$sroa$9$0$insert$insert33 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
        var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
        var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
        var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
        var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
        var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 * 7) | 0;
        $3 = (0 - ($1)) | 0;
        $4 = (($0) + ($3) | 0);
        $5 = HEAP8[$4 >> 0] | 0;
        $6 = $5 & 255;
        $7 = (1 - ($1)) | 0;
        $8 = (($0) + ($7) | 0);
        $9 = HEAP8[$8 >> 0] | 0;
        $10 = $9 & 255;
        $11 = (2 - ($1)) | 0;
        $12 = (($0) + ($11) | 0);
        $13 = HEAP8[$12 >> 0] | 0;
        $14 = $13 & 255;
        $15 = (3 - ($1)) | 0;
        $16 = (($0) + ($15) | 0);
        $17 = HEAP8[$16 >> 0] | 0;
        $18 = $17 & 255;
        $19 = (($6) + 2) | 0;
        $20 = (($19) + ($10)) | 0;
        $21 = (($20) + ($14)) | 0;
        $22 = (($21) + ($18)) | 0;
        $23 = $22 >>> 2;
        $24 = (4 - ($1)) | 0;
        $25 = (($0) + ($24) | 0);
        $26 = HEAP8[$25 >> 0] | 0;
        $27 = $26 & 255;
        $28 = (5 - ($1)) | 0;
        $29 = (($0) + ($28) | 0);
        $30 = HEAP8[$29 >> 0] | 0;
        $31 = $30 & 255;
        $32 = (6 - ($1)) | 0;
        $33 = (($0) + ($32) | 0);
        $34 = HEAP8[$33 >> 0] | 0;
        $35 = $34 & 255;
        $36 = (7 - ($1)) | 0;
        $37 = (($0) + ($36) | 0);
        $38 = HEAP8[$37 >> 0] | 0;
        $39 = $38 & 255;
        $40 = (($27) + 2) | 0;
        $41 = (($40) + ($31)) | 0;
        $42 = (($41) + ($35)) | 0;
        $43 = (($42) + ($39)) | 0;
        $44 = $43 >>> 2;
        $$mask = $44 & 255;
        $45 = (_bitshift64Shl(($$mask | 0), 0, 56) | 0);
        $46 = tempRet0;
        $47 = (_bitshift64Shl(($$mask | 0), 0, 48) | 0);
        $48 = tempRet0;
        $49 = (_bitshift64Shl(($$mask | 0), 0, 40) | 0);
        $50 = tempRet0;
        $$mask32 = $23 & 255;
        $51 = $23 << 24;
        $52 = $$mask32 << 16;
        $53 = $$mask32 << 8;
        $$sroa$9$0$insert$insert33 = $$mask32 | $51;
        $$sroa$8$0$insert$insert34 = $$sroa$9$0$insert$insert33 | $52;
        $$sroa$7$0$insert$insert35 = $$sroa$8$0$insert$insert34 | $53;
        $54 = $47 | $$sroa$7$0$insert$insert35;
        $55 = $54 | $45;
        $56 = $48 | $46;
        $57 = $55 | $49;
        $58 = $56 | $50;
        $59 = $58 | $$mask;
        $60 = (($0) + ($2) | 0);
        $61 = $60;
        $62 = $61;
        HEAP32[$62 >> 2] = $57;
        $63 = (($61) + 4) | 0;
        $64 = $63;
        HEAP32[$64 >> 2] = $59;
        $65 = ($1 * 6) | 0;
        $66 = (($0) + ($65) | 0);
        $67 = $66;
        $68 = $67;
        HEAP32[$68 >> 2] = $57;
        $69 = (($67) + 4) | 0;
        $70 = $69;
        HEAP32[$70 >> 2] = $59;
        $71 = ($1 * 5) | 0;
        $72 = (($0) + ($71) | 0);
        $73 = $72;
        $74 = $73;
        HEAP32[$74 >> 2] = $57;
        $75 = (($73) + 4) | 0;
        $76 = $75;
        HEAP32[$76 >> 2] = $59;
        $77 = $1 << 2;
        $78 = (($0) + ($77) | 0);
        $79 = $78;
        $80 = $79;
        HEAP32[$80 >> 2] = $57;
        $81 = (($79) + 4) | 0;
        $82 = $81;
        HEAP32[$82 >> 2] = $59;
        $83 = ($1 * 3) | 0;
        $84 = (($0) + ($83) | 0);
        $85 = $84;
        $86 = $85;
        HEAP32[$86 >> 2] = $57;
        $87 = (($85) + 4) | 0;
        $88 = $87;
        HEAP32[$88 >> 2] = $59;
        $89 = $1 << 1;
        $90 = (($0) + ($89) | 0);
        $91 = $90;
        $92 = $91;
        HEAP32[$92 >> 2] = $57;
        $93 = (($91) + 4) | 0;
        $94 = $93;
        HEAP32[$94 >> 2] = $59;
        $95 = (($0) + ($1) | 0);
        $96 = $95;
        $97 = $96;
        HEAP32[$97 >> 2] = $57;
        $98 = (($96) + 4) | 0;
        $99 = $98;
        HEAP32[$99 >> 2] = $59;
        $100 = $0;
        $101 = $100;
        HEAP32[$101 >> 2] = $57;
        $102 = (($100) + 4) | 0;
        $103 = $102;
        HEAP32[$103 >> 2] = $59;
        return;
    }
    function __ZN7WelsDec21WelsIChromaPredDcNA_cEPhi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 * 7) | 0;
        $3 = (($0) + ($2) | 0);
        $4 = $3;
        $5 = $4;
        HEAP32[$5 >> 2] = -2139062144;
        $6 = (($4) + 4) | 0;
        $7 = $6;
        HEAP32[$7 >> 2] = -2139062144;
        $8 = ($1 * 6) | 0;
        $9 = (($0) + ($8) | 0);
        $10 = $9;
        $11 = $10;
        HEAP32[$11 >> 2] = -2139062144;
        $12 = (($10) + 4) | 0;
        $13 = $12;
        HEAP32[$13 >> 2] = -2139062144;
        $14 = ($1 * 5) | 0;
        $15 = (($0) + ($14) | 0);
        $16 = $15;
        $17 = $16;
        HEAP32[$17 >> 2] = -2139062144;
        $18 = (($16) + 4) | 0;
        $19 = $18;
        HEAP32[$19 >> 2] = -2139062144;
        $20 = $1 << 2;
        $21 = (($0) + ($20) | 0);
        $22 = $21;
        $23 = $22;
        HEAP32[$23 >> 2] = -2139062144;
        $24 = (($22) + 4) | 0;
        $25 = $24;
        HEAP32[$25 >> 2] = -2139062144;
        $26 = ($1 * 3) | 0;
        $27 = (($0) + ($26) | 0);
        $28 = $27;
        $29 = $28;
        HEAP32[$29 >> 2] = -2139062144;
        $30 = (($28) + 4) | 0;
        $31 = $30;
        HEAP32[$31 >> 2] = -2139062144;
        $32 = $1 << 1;
        $33 = (($0) + ($32) | 0);
        $34 = $33;
        $35 = $34;
        HEAP32[$35 >> 2] = -2139062144;
        $36 = (($34) + 4) | 0;
        $37 = $36;
        HEAP32[$37 >> 2] = -2139062144;
        $38 = (($0) + ($1) | 0);
        $39 = $38;
        $40 = $39;
        HEAP32[$40 >> 2] = -2139062144;
        $41 = (($39) + 4) | 0;
        $42 = $41;
        HEAP32[$42 >> 2] = -2139062144;
        $43 = $0;
        $44 = $43;
        HEAP32[$44 >> 2] = -2139062144;
        $45 = (($43) + 4) | 0;
        $46 = $45;
        HEAP32[$46 >> 2] = -2139062144;
        return;
    }
    function __ZN7WelsDec16IdctResAddPred_cEPhiPs($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
        var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
        var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
        var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
        var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
        var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
        var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
        var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
        var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
        var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
        var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
        var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
        var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
        var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
        var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $sext = 0, $sext104 = 0, $sext105 = 0, $sext106 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $3 = sp;
        $4 = $1 << 1;
        $5 = HEAP16[$2 >> 1] | 0;
        $6 = $5 << 16 >> 16;
        $7 = ((($2)) + 4 | 0);
        $8 = HEAP16[$7 >> 1] | 0;
        $9 = $8 << 16 >> 16;
        $10 = (($9) + ($6)) | 0;
        $11 = (($6) - ($9)) | 0;
        $12 = ((($2)) + 2 | 0);
        $13 = HEAP16[$12 >> 1] | 0;
        $14 = $13 << 16 >> 16;
        $15 = $14 >> 1;
        $16 = ((($2)) + 6 | 0);
        $17 = HEAP16[$16 >> 1] | 0;
        $18 = $17 << 16 >> 16;
        $19 = (($15) - ($18)) | 0;
        $20 = $18 >> 1;
        $21 = (($20) + ($14)) | 0;
        $22 = (($21) + ($10)) | 0;
        $23 = $22 & 65535;
        HEAP16[$3 >> 1] = $23;
        $24 = (($19) + ($11)) | 0;
        $25 = $24 & 65535;
        $26 = ((($3)) + 2 | 0);
        HEAP16[$26 >> 1] = $25;
        $27 = (($11) - ($19)) | 0;
        $28 = $27 & 65535;
        $29 = ((($3)) + 4 | 0);
        HEAP16[$29 >> 1] = $28;
        $30 = (($10) - ($21)) | 0;
        $31 = $30 & 65535;
        $32 = ((($3)) + 6 | 0);
        HEAP16[$32 >> 1] = $31;
        $33 = ((($2)) + 8 | 0);
        $34 = HEAP16[$33 >> 1] | 0;
        $35 = $34 << 16 >> 16;
        $36 = ((($2)) + 12 | 0);
        $37 = HEAP16[$36 >> 1] | 0;
        $38 = $37 << 16 >> 16;
        $39 = (($38) + ($35)) | 0;
        $40 = (($35) - ($38)) | 0;
        $41 = ((($2)) + 10 | 0);
        $42 = HEAP16[$41 >> 1] | 0;
        $43 = $42 << 16 >> 16;
        $44 = $43 >> 1;
        $45 = ((($2)) + 14 | 0);
        $46 = HEAP16[$45 >> 1] | 0;
        $47 = $46 << 16 >> 16;
        $48 = (($44) - ($47)) | 0;
        $49 = $47 >> 1;
        $50 = (($49) + ($43)) | 0;
        $51 = (($50) + ($39)) | 0;
        $52 = $51 & 65535;
        $53 = ((($3)) + 8 | 0);
        HEAP16[$53 >> 1] = $52;
        $54 = (($48) + ($40)) | 0;
        $55 = $54 & 65535;
        $56 = ((($3)) + 10 | 0);
        HEAP16[$56 >> 1] = $55;
        $57 = (($40) - ($48)) | 0;
        $58 = $57 & 65535;
        $59 = ((($3)) + 12 | 0);
        HEAP16[$59 >> 1] = $58;
        $60 = (($39) - ($50)) | 0;
        $61 = $60 & 65535;
        $62 = ((($3)) + 14 | 0);
        HEAP16[$62 >> 1] = $61;
        $63 = ((($2)) + 16 | 0);
        $64 = HEAP16[$63 >> 1] | 0;
        $65 = $64 << 16 >> 16;
        $66 = ((($2)) + 20 | 0);
        $67 = HEAP16[$66 >> 1] | 0;
        $68 = $67 << 16 >> 16;
        $69 = (($68) + ($65)) | 0;
        $70 = (($65) - ($68)) | 0;
        $71 = ((($2)) + 18 | 0);
        $72 = HEAP16[$71 >> 1] | 0;
        $73 = $72 << 16 >> 16;
        $74 = $73 >> 1;
        $75 = ((($2)) + 22 | 0);
        $76 = HEAP16[$75 >> 1] | 0;
        $77 = $76 << 16 >> 16;
        $78 = (($74) - ($77)) | 0;
        $79 = $77 >> 1;
        $80 = (($79) + ($73)) | 0;
        $81 = (($80) + ($69)) | 0;
        $82 = $81 & 65535;
        $83 = ((($3)) + 16 | 0);
        HEAP16[$83 >> 1] = $82;
        $84 = (($78) + ($70)) | 0;
        $85 = $84 & 65535;
        $86 = ((($3)) + 18 | 0);
        HEAP16[$86 >> 1] = $85;
        $87 = (($70) - ($78)) | 0;
        $88 = $87 & 65535;
        $89 = ((($3)) + 20 | 0);
        HEAP16[$89 >> 1] = $88;
        $90 = (($69) - ($80)) | 0;
        $91 = $90 & 65535;
        $92 = ((($3)) + 22 | 0);
        HEAP16[$92 >> 1] = $91;
        $93 = ((($2)) + 24 | 0);
        $94 = HEAP16[$93 >> 1] | 0;
        $95 = $94 << 16 >> 16;
        $96 = ((($2)) + 28 | 0);
        $97 = HEAP16[$96 >> 1] | 0;
        $98 = $97 << 16 >> 16;
        $99 = (($98) + ($95)) | 0;
        $100 = (($95) - ($98)) | 0;
        $101 = ((($2)) + 26 | 0);
        $102 = HEAP16[$101 >> 1] | 0;
        $103 = $102 << 16 >> 16;
        $104 = $103 >> 1;
        $105 = ((($2)) + 30 | 0);
        $106 = HEAP16[$105 >> 1] | 0;
        $107 = $106 << 16 >> 16;
        $108 = (($104) - ($107)) | 0;
        $109 = $107 >> 1;
        $110 = (($109) + ($103)) | 0;
        $111 = (($110) + ($99)) | 0;
        $112 = $111 & 65535;
        $113 = ((($3)) + 24 | 0);
        HEAP16[$113 >> 1] = $112;
        $114 = (($108) + ($100)) | 0;
        $115 = $114 & 65535;
        $116 = ((($3)) + 26 | 0);
        HEAP16[$116 >> 1] = $115;
        $117 = (($100) - ($108)) | 0;
        $118 = $117 & 65535;
        $119 = ((($3)) + 28 | 0);
        HEAP16[$119 >> 1] = $118;
        $120 = (($99) - ($110)) | 0;
        $121 = $120 & 65535;
        $122 = ((($3)) + 30 | 0);
        HEAP16[$122 >> 1] = $121;
        $123 = ($1 * 3) | 0;
        $124 = HEAP16[$3 >> 1] | 0;
        $125 = $124 << 16 >> 16;
        $sext = $81 << 16;
        $126 = $sext >> 16;
        $sext104 = $51 << 16;
        $127 = $sext104 >> 16;
        $sext105 = $111 << 16;
        $128 = $sext105 >> 16;
        $129 = $sext105 >> 17;
        $130 = (($129) + ($127)) | 0;
        $131 = (($125) + 32) | 0;
        $132 = (($131) + ($126)) | 0;
        $133 = (($130) + ($132)) | 0;
        $134 = $133 >> 6;
        $135 = (($132) - ($130)) | 0;
        $136 = $135 >> 6;
        $137 = HEAP8[$0 >> 0] | 0;
        $138 = $137 & 255;
        $139 = (($134) + ($138)) | 0;
        $140 = ($139 >>> 0) > (255);
        $141 = (0 - ($139)) | 0;
        $142 = $141 >> 31;
        $143 = $140 ? $142 : $139;
        $144 = $143 & 255;
        HEAP8[$0 >> 0] = $144;
        $145 = (($0) + ($123) | 0);
        $146 = HEAP8[$145 >> 0] | 0;
        $147 = $146 & 255;
        $148 = (($136) + ($147)) | 0;
        $149 = ($148 >>> 0) > (255);
        $150 = (0 - ($148)) | 0;
        $151 = $150 >> 31;
        $152 = $149 ? $151 : $148;
        $153 = $152 & 255;
        HEAP8[$145 >> 0] = $153;
        $154 = (($125) - ($126)) | 0;
        $155 = HEAP16[$53 >> 1] | 0;
        $156 = $155 << 16 >> 16;
        $157 = $156 >> 1;
        $158 = (($157) - ($128)) | 0;
        $159 = (($154) + 32) | 0;
        $160 = (($158) + ($159)) | 0;
        $161 = $160 >> 6;
        $162 = (($0) + ($1) | 0);
        $163 = HEAP8[$162 >> 0] | 0;
        $164 = $163 & 255;
        $165 = (($161) + ($164)) | 0;
        $166 = ($165 >>> 0) > (255);
        $167 = (0 - ($165)) | 0;
        $168 = $167 >> 31;
        $169 = $166 ? $168 : $165;
        $170 = $169 & 255;
        HEAP8[$162 >> 0] = $170;
        $171 = (($159) - ($158)) | 0;
        $172 = $171 >> 6;
        $173 = (($0) + ($4) | 0);
        $174 = HEAP8[$173 >> 0] | 0;
        $175 = $174 & 255;
        $176 = (($172) + ($175)) | 0;
        $177 = ($176 >>> 0) > (255);
        $178 = (0 - ($176)) | 0;
        $179 = $178 >> 31;
        $180 = $177 ? $179 : $176;
        $181 = $180 & 255;
        HEAP8[$173 >> 0] = $181;
        $182 = HEAP16[$26 >> 1] | 0;
        $183 = $182 << 16 >> 16;
        $184 = HEAP16[$86 >> 1] | 0;
        $185 = $184 << 16 >> 16;
        $186 = HEAP16[$56 >> 1] | 0;
        $187 = $186 << 16 >> 16;
        $sext106 = $114 << 16;
        $188 = $sext106 >> 17;
        $189 = (($188) + ($187)) | 0;
        $190 = (($183) + 32) | 0;
        $191 = (($190) + ($185)) | 0;
        $192 = (($189) + ($191)) | 0;
        $193 = $192 >> 6;
        $194 = (($191) - ($189)) | 0;
        $195 = $194 >> 6;
        $196 = ((($0)) + 1 | 0);
        $197 = HEAP8[$196 >> 0] | 0;
        $198 = $197 & 255;
        $199 = (($193) + ($198)) | 0;
        $200 = ($199 >>> 0) > (255);
        $201 = (0 - ($199)) | 0;
        $202 = $201 >> 31;
        $203 = $200 ? $202 : $199;
        $204 = $203 & 255;
        HEAP8[$196 >> 0] = $204;
        $205 = (($123) + 1) | 0;
        $206 = (($0) + ($205) | 0);
        $207 = HEAP8[$206 >> 0] | 0;
        $208 = $207 & 255;
        $209 = (($195) + ($208)) | 0;
        $210 = ($209 >>> 0) > (255);
        $211 = (0 - ($209)) | 0;
        $212 = $211 >> 31;
        $213 = $210 ? $212 : $209;
        $214 = $213 & 255;
        HEAP8[$206 >> 0] = $214;
        $215 = (($183) - ($185)) | 0;
        $216 = $187 >> 1;
        $217 = HEAP16[$116 >> 1] | 0;
        $218 = $217 << 16 >> 16;
        $219 = (($216) - ($218)) | 0;
        $220 = (($215) + 32) | 0;
        $221 = (($219) + ($220)) | 0;
        $222 = $221 >> 6;
        $223 = (($1) + 1) | 0;
        $224 = (($0) + ($223) | 0);
        $225 = HEAP8[$224 >> 0] | 0;
        $226 = $225 & 255;
        $227 = (($222) + ($226)) | 0;
        $228 = ($227 >>> 0) > (255);
        $229 = (0 - ($227)) | 0;
        $230 = $229 >> 31;
        $231 = $228 ? $230 : $227;
        $232 = $231 & 255;
        HEAP8[$224 >> 0] = $232;
        $233 = (($220) - ($219)) | 0;
        $234 = $233 >> 6;
        $235 = $4 | 1;
        $236 = (($0) + ($235) | 0);
        $237 = HEAP8[$236 >> 0] | 0;
        $238 = $237 & 255;
        $239 = (($234) + ($238)) | 0;
        $240 = ($239 >>> 0) > (255);
        $241 = (0 - ($239)) | 0;
        $242 = $241 >> 31;
        $243 = $240 ? $242 : $239;
        $244 = $243 & 255;
        HEAP8[$236 >> 0] = $244;
        $245 = HEAP16[$29 >> 1] | 0;
        $246 = $245 << 16 >> 16;
        $247 = HEAP16[$89 >> 1] | 0;
        $248 = $247 << 16 >> 16;
        $249 = HEAP16[$59 >> 1] | 0;
        $250 = $249 << 16 >> 16;
        $251 = HEAP16[$119 >> 1] | 0;
        $252 = $251 << 16 >> 16;
        $253 = $252 >> 1;
        $254 = (($253) + ($250)) | 0;
        $255 = (($246) + 32) | 0;
        $256 = (($255) + ($248)) | 0;
        $257 = (($254) + ($256)) | 0;
        $258 = $257 >> 6;
        $259 = (($256) - ($254)) | 0;
        $260 = $259 >> 6;
        $261 = ((($0)) + 2 | 0);
        $262 = HEAP8[$261 >> 0] | 0;
        $263 = $262 & 255;
        $264 = (($258) + ($263)) | 0;
        $265 = ($264 >>> 0) > (255);
        $266 = (0 - ($264)) | 0;
        $267 = $266 >> 31;
        $268 = $265 ? $267 : $264;
        $269 = $268 & 255;
        HEAP8[$261 >> 0] = $269;
        $270 = (($123) + 2) | 0;
        $271 = (($0) + ($270) | 0);
        $272 = HEAP8[$271 >> 0] | 0;
        $273 = $272 & 255;
        $274 = (($260) + ($273)) | 0;
        $275 = ($274 >>> 0) > (255);
        $276 = (0 - ($274)) | 0;
        $277 = $276 >> 31;
        $278 = $275 ? $277 : $274;
        $279 = $278 & 255;
        HEAP8[$271 >> 0] = $279;
        $280 = (($246) - ($248)) | 0;
        $281 = $250 >> 1;
        $282 = (($281) - ($252)) | 0;
        $283 = (($280) + 32) | 0;
        $284 = (($282) + ($283)) | 0;
        $285 = $284 >> 6;
        $286 = (($1) + 2) | 0;
        $287 = (($0) + ($286) | 0);
        $288 = HEAP8[$287 >> 0] | 0;
        $289 = $288 & 255;
        $290 = (($285) + ($289)) | 0;
        $291 = ($290 >>> 0) > (255);
        $292 = (0 - ($290)) | 0;
        $293 = $292 >> 31;
        $294 = $291 ? $293 : $290;
        $295 = $294 & 255;
        HEAP8[$287 >> 0] = $295;
        $296 = (($283) - ($282)) | 0;
        $297 = $296 >> 6;
        $298 = (($4) + 2) | 0;
        $299 = (($0) + ($298) | 0);
        $300 = HEAP8[$299 >> 0] | 0;
        $301 = $300 & 255;
        $302 = (($297) + ($301)) | 0;
        $303 = ($302 >>> 0) > (255);
        $304 = (0 - ($302)) | 0;
        $305 = $304 >> 31;
        $306 = $303 ? $305 : $302;
        $307 = $306 & 255;
        HEAP8[$299 >> 0] = $307;
        $308 = HEAP16[$32 >> 1] | 0;
        $309 = $308 << 16 >> 16;
        $310 = HEAP16[$92 >> 1] | 0;
        $311 = $310 << 16 >> 16;
        $312 = HEAP16[$62 >> 1] | 0;
        $313 = $312 << 16 >> 16;
        $314 = HEAP16[$122 >> 1] | 0;
        $315 = $314 << 16 >> 16;
        $316 = $315 >> 1;
        $317 = (($316) + ($313)) | 0;
        $318 = (($309) + 32) | 0;
        $319 = (($318) + ($311)) | 0;
        $320 = (($317) + ($319)) | 0;
        $321 = $320 >> 6;
        $322 = (($319) - ($317)) | 0;
        $323 = $322 >> 6;
        $324 = ((($0)) + 3 | 0);
        $325 = HEAP8[$324 >> 0] | 0;
        $326 = $325 & 255;
        $327 = (($321) + ($326)) | 0;
        $328 = ($327 >>> 0) > (255);
        $329 = (0 - ($327)) | 0;
        $330 = $329 >> 31;
        $331 = $328 ? $330 : $327;
        $332 = $331 & 255;
        HEAP8[$324 >> 0] = $332;
        $333 = (($123) + 3) | 0;
        $334 = (($0) + ($333) | 0);
        $335 = HEAP8[$334 >> 0] | 0;
        $336 = $335 & 255;
        $337 = (($323) + ($336)) | 0;
        $338 = ($337 >>> 0) > (255);
        $339 = (0 - ($337)) | 0;
        $340 = $339 >> 31;
        $341 = $338 ? $340 : $337;
        $342 = $341 & 255;
        HEAP8[$334 >> 0] = $342;
        $343 = (($309) - ($311)) | 0;
        $344 = $313 >> 1;
        $345 = (($344) - ($315)) | 0;
        $346 = (($343) + 32) | 0;
        $347 = (($345) + ($346)) | 0;
        $348 = $347 >> 6;
        $349 = (($1) + 3) | 0;
        $350 = (($0) + ($349) | 0);
        $351 = HEAP8[$350 >> 0] | 0;
        $352 = $351 & 255;
        $353 = (($348) + ($352)) | 0;
        $354 = ($353 >>> 0) > (255);
        $355 = (0 - ($353)) | 0;
        $356 = $355 >> 31;
        $357 = $354 ? $356 : $353;
        $358 = $357 & 255;
        HEAP8[$350 >> 0] = $358;
        $359 = (($346) - ($345)) | 0;
        $360 = $359 >> 6;
        $361 = (($4) + 3) | 0;
        $362 = (($0) + ($361) | 0);
        $363 = HEAP8[$362 >> 0] | 0;
        $364 = $363 & 255;
        $365 = (($360) + ($364)) | 0;
        $366 = ($365 >>> 0) > (255);
        $367 = (0 - ($365)) | 0;
        $368 = $367 >> 31;
        $369 = $366 ? $368 : $365;
        $370 = $369 & 255;
        HEAP8[$362 >> 0] = $370;
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec19IdctResAddPred8x8_cEPhiPs($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0126176 = 0, $$0126176$lver$orig = 0, $$0128178 = 0, $$0130180 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
        var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
        var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
        var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
        var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
        var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
        var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
        var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
        var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
        var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
        var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
        var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
        var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
        var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
        var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
        var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
        var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
        var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
        var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
        var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
        var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
        var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
        var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
        var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$lver$orig = 0, $exitcond183 = 0, $exitcond186 = 0, $ident$check = 0, $load_initial = 0, $scevgep = 0, $scevgep201 = 0, $sext = 0, $sext131 = 0, $sext132 = 0, $sext133 = 0, $sext134 = 0, $sext135 = 0;
        var $sext136 = 0, $sext137 = 0, $sext138 = 0, $sext139 = 0, $sext140 = 0, $sext141 = 0, $sext142 = 0, $sext143 = 0, $sext144 = 0, $sext145 = 0, $sext146 = 0, $sext147 = 0, $sext148 = 0, $sext149 = 0, $sext150 = 0, $sext151 = 0, $sext152 = 0, $sext153 = 0, $sext154 = 0, $sext155 = 0;
        var $sext156 = 0, $sext157 = 0, $sext158 = 0, $sext159 = 0, $sext160 = 0, $sext161 = 0, $store_forwarded = 0, $sum = 0, $sum181 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 272 | 0;
        $3 = sp + 256 | 0;
        $4 = sp + 128 | 0;
        $5 = sp;
        $6 = ((($3)) + 8 | 0);
        $7 = ((($3)) + 12 | 0);
        $8 = ((($3)) + 4 | 0);
        $9 = ((($3)) + 6 | 0);
        $10 = ((($3)) + 10 | 0);
        $11 = ((($3)) + 14 | 0);
        $12 = ((($3)) + 2 | 0);
        $$0130180 = 0;
        while (1) {
            $13 = $$0130180 << 3;
            $scevgep = (($2) + ($13 << 1) | 0);
            ; HEAP16[$3 >> 1] = HEAP16[$scevgep >> 1] | 0; HEAP16[$3 + 2 >> 1] = HEAP16[$scevgep + 2 >> 1] | 0; HEAP16[$3 + 4 >> 1] = HEAP16[$scevgep + 4 >> 1] | 0; HEAP16[$3 + 6 >> 1] = HEAP16[$scevgep + 6 >> 1] | 0; HEAP16[$3 + 8 >> 1] = HEAP16[$scevgep + 8 >> 1] | 0; HEAP16[$3 + 10 >> 1] = HEAP16[$scevgep + 10 >> 1] | 0; HEAP16[$3 + 12 >> 1] = HEAP16[$scevgep + 12 >> 1] | 0; HEAP16[$3 + 14 >> 1] = HEAP16[$scevgep + 14 >> 1] | 0;
            $14 = HEAP16[$3 >> 1] | 0;
            $15 = $14 << 16 >> 16;
            $16 = HEAP16[$6 >> 1] | 0;
            $17 = $16 << 16 >> 16;
            $18 = (($17) + ($15)) | 0;
            $19 = (($15) - ($17)) | 0;
            $20 = HEAP16[$7 >> 1] | 0;
            $21 = $20 << 16 >> 16;
            $22 = HEAP16[$8 >> 1] | 0;
            $23 = $22 << 16 >> 16;
            $24 = $23 >>> 1;
            $25 = (($21) - ($24)) | 0;
            $26 = $21 >>> 1;
            $27 = (($26) + ($23)) | 0;
            $sext146 = $18 << 16;
            $28 = $sext146 >> 16;
            $sext147 = $27 << 16;
            $29 = $sext147 >> 16;
            $30 = (($29) + ($28)) | 0;
            $sext148 = $19 << 16;
            $31 = $sext148 >> 16;
            $sext149 = $25 << 16;
            $32 = $sext149 >> 16;
            $33 = (($31) - ($32)) | 0;
            $34 = (($32) + ($31)) | 0;
            $35 = (($28) - ($29)) | 0;
            $36 = HEAP16[$9 >> 1] | 0;
            $37 = $36 << 16 >> 16;
            $38 = HEAP16[$10 >> 1] | 0;
            $39 = $38 << 16 >> 16;
            $40 = (($39) - ($37)) | 0;
            $41 = HEAP16[$11 >> 1] | 0;
            $42 = $41 << 16 >> 16;
            $43 = (($40) - ($42)) | 0;
            $44 = $42 >>> 1;
            $45 = (($43) - ($44)) | 0;
            $46 = HEAP16[$12 >> 1] | 0;
            $47 = $46 << 16 >> 16;
            $48 = $37 >>> 1;
            $sum = (($48) + ($37)) | 0;
            $49 = (($42) - ($sum)) | 0;
            $50 = (($49) + ($47)) | 0;
            $51 = $39 >>> 1;
            $52 = (($42) + ($39)) | 0;
            $53 = (($52) + ($51)) | 0;
            $54 = (($53) - ($47)) | 0;
            $55 = (($39) + ($37)) | 0;
            $56 = (($55) + ($47)) | 0;
            $57 = $47 >>> 1;
            $58 = (($56) + ($57)) | 0;
            $sext150 = $45 << 16;
            $sext151 = $58 << 16;
            $59 = $sext151 >> 18;
            $60 = (($59) + ($45)) | 0;
            $sext152 = $50 << 16;
            $sext153 = $54 << 16;
            $61 = $sext153 >> 18;
            $62 = (($61) + ($50)) | 0;
            $63 = $sext152 >> 18;
            $64 = (($54) - ($63)) | 0;
            $65 = $sext150 >> 18;
            $66 = (($58) - ($65)) | 0;
            $sext154 = $30 << 16;
            $67 = $sext154 >> 16;
            $sext155 = $66 << 16;
            $68 = $sext155 >> 16;
            $69 = (($68) + ($67)) | 0;
            $70 = $69 & 65535;
            $71 = (($4) + ($13 << 1) | 0);
            HEAP16[$71 >> 1] = $70;
            $sext156 = $33 << 16;
            $72 = $sext156 >> 16;
            $sext157 = $64 << 16;
            $73 = $sext157 >> 16;
            $74 = (($72) - ($73)) | 0;
            $75 = $74 & 65535;
            $76 = $13 | 1;
            $77 = (($4) + ($76 << 1) | 0);
            HEAP16[$77 >> 1] = $75;
            $sext158 = $34 << 16;
            $78 = $sext158 >> 16;
            $sext159 = $62 << 16;
            $79 = $sext159 >> 16;
            $80 = (($79) + ($78)) | 0;
            $81 = $80 & 65535;
            $82 = $13 | 2;
            $83 = (($4) + ($82 << 1) | 0);
            HEAP16[$83 >> 1] = $81;
            $sext160 = $35 << 16;
            $84 = $sext160 >> 16;
            $sext161 = $60 << 16;
            $85 = $sext161 >> 16;
            $86 = (($85) + ($84)) | 0;
            $87 = $86 & 65535;
            $88 = $13 | 3;
            $89 = (($4) + ($88 << 1) | 0);
            HEAP16[$89 >> 1] = $87;
            $90 = (($84) - ($85)) | 0;
            $91 = $90 & 65535;
            $92 = $13 | 4;
            $93 = (($4) + ($92 << 1) | 0);
            HEAP16[$93 >> 1] = $91;
            $94 = (($78) - ($79)) | 0;
            $95 = $94 & 65535;
            $96 = $13 | 5;
            $97 = (($4) + ($96 << 1) | 0);
            HEAP16[$97 >> 1] = $95;
            $98 = (($73) + ($72)) | 0;
            $99 = $98 & 65535;
            $100 = $13 | 6;
            $101 = (($4) + ($100 << 1) | 0);
            HEAP16[$101 >> 1] = $99;
            $102 = (($67) - ($68)) | 0;
            $103 = $102 & 65535;
            $104 = $13 | 7;
            $105 = (($4) + ($104 << 1) | 0);
            HEAP16[$105 >> 1] = $103;
            $106 = (($$0130180) + 1) | 0;
            $exitcond186 = ($106 | 0) == (8);
            if ($exitcond186) {
                $$0128178 = 0;
                break;
            } else {
                $$0130180 = $106;
            }
        }
        while (1) {
            $107 = (($4) + ($$0128178 << 1) | 0);
            $108 = HEAP16[$107 >> 1] | 0;
            $109 = (($$0128178) + 8) | 0;
            $110 = (($4) + ($109 << 1) | 0);
            $111 = HEAP16[$110 >> 1] | 0;
            $112 = (($$0128178) + 16) | 0;
            $113 = (($4) + ($112 << 1) | 0);
            $114 = HEAP16[$113 >> 1] | 0;
            $115 = (($$0128178) + 24) | 0;
            $116 = (($4) + ($115 << 1) | 0);
            $117 = HEAP16[$116 >> 1] | 0;
            $118 = (($$0128178) + 32) | 0;
            $119 = (($4) + ($118 << 1) | 0);
            $120 = HEAP16[$119 >> 1] | 0;
            $121 = (($$0128178) + 40) | 0;
            $122 = (($4) + ($121 << 1) | 0);
            $123 = HEAP16[$122 >> 1] | 0;
            $124 = (($$0128178) + 48) | 0;
            $125 = (($4) + ($124 << 1) | 0);
            $126 = HEAP16[$125 >> 1] | 0;
            $127 = (($$0128178) + 56) | 0;
            $128 = (($4) + ($127 << 1) | 0);
            $129 = HEAP16[$128 >> 1] | 0;
            $130 = $108 << 16 >> 16;
            $131 = $120 << 16 >> 16;
            $132 = (($131) + ($130)) | 0;
            $133 = (($130) - ($131)) | 0;
            $134 = $126 << 16 >> 16;
            $135 = $114 << 16 >> 16;
            $136 = $135 >>> 1;
            $137 = (($134) - ($136)) | 0;
            $138 = $134 >>> 1;
            $139 = (($138) + ($135)) | 0;
            $sext = $132 << 16;
            $140 = $sext >> 16;
            $sext131 = $139 << 16;
            $141 = $sext131 >> 16;
            $142 = (($141) + ($140)) | 0;
            $sext132 = $133 << 16;
            $143 = $sext132 >> 16;
            $sext133 = $137 << 16;
            $144 = $sext133 >> 16;
            $145 = (($143) - ($144)) | 0;
            $146 = (($144) + ($143)) | 0;
            $147 = (($140) - ($141)) | 0;
            $148 = $117 << 16 >> 16;
            $149 = $123 << 16 >> 16;
            $150 = (($149) - ($148)) | 0;
            $151 = $129 << 16 >> 16;
            $152 = (($150) - ($151)) | 0;
            $153 = $151 >>> 1;
            $154 = (($152) - ($153)) | 0;
            $155 = $111 << 16 >> 16;
            $156 = $148 >>> 1;
            $sum181 = (($156) + ($148)) | 0;
            $157 = (($151) - ($sum181)) | 0;
            $158 = (($157) + ($155)) | 0;
            $159 = $149 >>> 1;
            $160 = (($151) + ($149)) | 0;
            $161 = (($160) + ($159)) | 0;
            $162 = (($161) - ($155)) | 0;
            $163 = (($149) + ($148)) | 0;
            $164 = (($163) + ($155)) | 0;
            $165 = $155 >>> 1;
            $166 = (($164) + ($165)) | 0;
            $sext134 = $154 << 16;
            $sext135 = $166 << 16;
            $167 = $sext135 >> 18;
            $168 = (($167) + ($154)) | 0;
            $169 = $sext134 >> 18;
            $170 = (($166) - ($169)) | 0;
            $sext136 = $158 << 16;
            $sext137 = $162 << 16;
            $171 = $sext137 >> 18;
            $172 = (($171) + ($158)) | 0;
            $173 = $sext136 >> 18;
            $174 = (($162) - ($173)) | 0;
            $sext138 = $142 << 16;
            $175 = $sext138 >> 16;
            $sext139 = $170 << 16;
            $176 = $sext139 >> 16;
            $177 = (($176) + ($175)) | 0;
            $178 = $177 & 65535;
            $179 = (($5) + ($$0128178 << 1) | 0);
            HEAP16[$179 >> 1] = $178;
            $sext140 = $145 << 16;
            $180 = $sext140 >> 16;
            $sext141 = $174 << 16;
            $181 = $sext141 >> 16;
            $182 = (($180) - ($181)) | 0;
            $183 = $182 & 65535;
            $184 = (($5) + ($109 << 1) | 0);
            HEAP16[$184 >> 1] = $183;
            $sext142 = $146 << 16;
            $185 = $sext142 >> 16;
            $sext143 = $172 << 16;
            $186 = $sext143 >> 16;
            $187 = (($186) + ($185)) | 0;
            $188 = $187 & 65535;
            $189 = (($5) + ($112 << 1) | 0);
            HEAP16[$189 >> 1] = $188;
            $sext144 = $147 << 16;
            $190 = $sext144 >> 16;
            $sext145 = $168 << 16;
            $191 = $sext145 >> 16;
            $192 = (($191) + ($190)) | 0;
            $193 = $192 & 65535;
            $194 = (($5) + ($115 << 1) | 0);
            HEAP16[$194 >> 1] = $193;
            $195 = (($190) - ($191)) | 0;
            $196 = $195 & 65535;
            $197 = (($5) + ($118 << 1) | 0);
            HEAP16[$197 >> 1] = $196;
            $198 = (($185) - ($186)) | 0;
            $199 = $198 & 65535;
            $200 = (($5) + ($121 << 1) | 0);
            HEAP16[$200 >> 1] = $199;
            $201 = (($181) + ($180)) | 0;
            $202 = $201 & 65535;
            $203 = (($5) + ($124 << 1) | 0);
            HEAP16[$203 >> 1] = $202;
            $204 = (($175) - ($176)) | 0;
            $205 = $204 & 65535;
            $206 = (($5) + ($127 << 1) | 0);
            HEAP16[$206 >> 1] = $205;
            $207 = (($$0128178) + 1) | 0;
            $exitcond183 = ($207 | 0) == (8);
            if ($exitcond183) {
                break;
            } else {
                $$0128178 = $207;
            }
        }
        HEAP16[$3 >> 1] = $108;
        HEAP16[$12 >> 1] = $111;
        HEAP16[$8 >> 1] = $114;
        HEAP16[$9 >> 1] = $117;
        HEAP16[$6 >> 1] = $120;
        HEAP16[$10 >> 1] = $123;
        HEAP16[$7 >> 1] = $126;
        HEAP16[$11 >> 1] = $129;
        $ident$check = ($1 | 0) == (1);
        if (!($ident$check)) {
            $$0126176$lver$orig = 0;
            while (1) {
                $208 = $$0126176$lver$orig << 3;
                $209 = Math_imul($$0126176$lver$orig, $1) | 0;
                $210 = (($5) + ($208 << 1) | 0);
                $211 = HEAP16[$210 >> 1] | 0;
                $212 = $211 << 16 >> 16;
                $213 = (($212) + 32) | 0;
                $214 = $213 >> 6;
                $215 = (($0) + ($209) | 0);
                $216 = HEAP8[$215 >> 0] | 0;
                $217 = $216 & 255;
                $218 = (($214) + ($217)) | 0;
                $219 = ($218 >>> 0) > (255);
                $220 = (0 - ($218)) | 0;
                $221 = $220 >> 31;
                $222 = $219 ? $221 : $218;
                $223 = $222 & 255;
                HEAP8[$215 >> 0] = $223;
                $224 = $208 | 1;
                $225 = (($5) + ($224 << 1) | 0);
                $226 = HEAP16[$225 >> 1] | 0;
                $227 = $226 << 16 >> 16;
                $228 = (($227) + 32) | 0;
                $229 = $228 >> 6;
                $230 = (($209) + 1) | 0;
                $231 = (($0) + ($230) | 0);
                $232 = HEAP8[$231 >> 0] | 0;
                $233 = $232 & 255;
                $234 = (($229) + ($233)) | 0;
                $235 = ($234 >>> 0) > (255);
                $236 = (0 - ($234)) | 0;
                $237 = $236 >> 31;
                $238 = $235 ? $237 : $234;
                $239 = $238 & 255;
                HEAP8[$231 >> 0] = $239;
                $240 = $208 | 2;
                $241 = (($5) + ($240 << 1) | 0);
                $242 = HEAP16[$241 >> 1] | 0;
                $243 = $242 << 16 >> 16;
                $244 = (($243) + 32) | 0;
                $245 = $244 >> 6;
                $246 = (($209) + 2) | 0;
                $247 = (($0) + ($246) | 0);
                $248 = HEAP8[$247 >> 0] | 0;
                $249 = $248 & 255;
                $250 = (($245) + ($249)) | 0;
                $251 = ($250 >>> 0) > (255);
                $252 = (0 - ($250)) | 0;
                $253 = $252 >> 31;
                $254 = $251 ? $253 : $250;
                $255 = $254 & 255;
                HEAP8[$247 >> 0] = $255;
                $256 = $208 | 3;
                $257 = (($5) + ($256 << 1) | 0);
                $258 = HEAP16[$257 >> 1] | 0;
                $259 = $258 << 16 >> 16;
                $260 = (($259) + 32) | 0;
                $261 = $260 >> 6;
                $262 = (($209) + 3) | 0;
                $263 = (($0) + ($262) | 0);
                $264 = HEAP8[$263 >> 0] | 0;
                $265 = $264 & 255;
                $266 = (($261) + ($265)) | 0;
                $267 = ($266 >>> 0) > (255);
                $268 = (0 - ($266)) | 0;
                $269 = $268 >> 31;
                $270 = $267 ? $269 : $266;
                $271 = $270 & 255;
                HEAP8[$263 >> 0] = $271;
                $272 = $208 | 4;
                $273 = (($5) + ($272 << 1) | 0);
                $274 = HEAP16[$273 >> 1] | 0;
                $275 = $274 << 16 >> 16;
                $276 = (($275) + 32) | 0;
                $277 = $276 >> 6;
                $278 = (($209) + 4) | 0;
                $279 = (($0) + ($278) | 0);
                $280 = HEAP8[$279 >> 0] | 0;
                $281 = $280 & 255;
                $282 = (($277) + ($281)) | 0;
                $283 = ($282 >>> 0) > (255);
                $284 = (0 - ($282)) | 0;
                $285 = $284 >> 31;
                $286 = $283 ? $285 : $282;
                $287 = $286 & 255;
                HEAP8[$279 >> 0] = $287;
                $288 = $208 | 5;
                $289 = (($5) + ($288 << 1) | 0);
                $290 = HEAP16[$289 >> 1] | 0;
                $291 = $290 << 16 >> 16;
                $292 = (($291) + 32) | 0;
                $293 = $292 >> 6;
                $294 = (($209) + 5) | 0;
                $295 = (($0) + ($294) | 0);
                $296 = HEAP8[$295 >> 0] | 0;
                $297 = $296 & 255;
                $298 = (($293) + ($297)) | 0;
                $299 = ($298 >>> 0) > (255);
                $300 = (0 - ($298)) | 0;
                $301 = $300 >> 31;
                $302 = $299 ? $301 : $298;
                $303 = $302 & 255;
                HEAP8[$295 >> 0] = $303;
                $304 = $208 | 6;
                $305 = (($5) + ($304 << 1) | 0);
                $306 = HEAP16[$305 >> 1] | 0;
                $307 = $306 << 16 >> 16;
                $308 = (($307) + 32) | 0;
                $309 = $308 >> 6;
                $310 = (($209) + 6) | 0;
                $311 = (($0) + ($310) | 0);
                $312 = HEAP8[$311 >> 0] | 0;
                $313 = $312 & 255;
                $314 = (($309) + ($313)) | 0;
                $315 = ($314 >>> 0) > (255);
                $316 = (0 - ($314)) | 0;
                $317 = $316 >> 31;
                $318 = $315 ? $317 : $314;
                $319 = $318 & 255;
                HEAP8[$311 >> 0] = $319;
                $320 = $208 | 7;
                $321 = (($5) + ($320 << 1) | 0);
                $322 = HEAP16[$321 >> 1] | 0;
                $323 = $322 << 16 >> 16;
                $324 = (($323) + 32) | 0;
                $325 = $324 >> 6;
                $326 = (($209) + 7) | 0;
                $327 = (($0) + ($326) | 0);
                $328 = HEAP8[$327 >> 0] | 0;
                $329 = $328 & 255;
                $330 = (($325) + ($329)) | 0;
                $331 = ($330 >>> 0) > (255);
                $332 = (0 - ($330)) | 0;
                $333 = $332 >> 31;
                $334 = $331 ? $333 : $330;
                $335 = $334 & 255;
                HEAP8[$327 >> 0] = $335;
                $336 = (($$0126176$lver$orig) + 1) | 0;
                $exitcond$lver$orig = ($336 | 0) == (8);
                if ($exitcond$lver$orig) {
                    break;
                } else {
                    $$0126176$lver$orig = $336;
                }
            }
            STACKTOP = sp; return;
        }
        $scevgep201 = ((($0)) + 6 | 0);
        $load_initial = HEAP8[$scevgep201 >> 0] | 0;
        $$0126176 = 0; $store_forwarded = $load_initial;
        while (1) {
            $337 = $$0126176 << 3;
            $338 = Math_imul($$0126176, $1) | 0;
            $339 = (($5) + ($337 << 1) | 0);
            $340 = HEAP16[$339 >> 1] | 0;
            $341 = $340 << 16 >> 16;
            $342 = (($341) + 32) | 0;
            $343 = $342 >> 6;
            $344 = (($0) + ($338) | 0);
            $345 = HEAP8[$344 >> 0] | 0;
            $346 = $345 & 255;
            $347 = (($343) + ($346)) | 0;
            $348 = ($347 >>> 0) > (255);
            $349 = (0 - ($347)) | 0;
            $350 = $349 >> 31;
            $351 = $348 ? $350 : $347;
            $352 = $351 & 255;
            HEAP8[$344 >> 0] = $352;
            $353 = $337 | 1;
            $354 = (($5) + ($353 << 1) | 0);
            $355 = HEAP16[$354 >> 1] | 0;
            $356 = $355 << 16 >> 16;
            $357 = (($356) + 32) | 0;
            $358 = $357 >> 6;
            $359 = (($338) + 1) | 0;
            $360 = (($0) + ($359) | 0);
            $361 = HEAP8[$360 >> 0] | 0;
            $362 = $361 & 255;
            $363 = (($358) + ($362)) | 0;
            $364 = ($363 >>> 0) > (255);
            $365 = (0 - ($363)) | 0;
            $366 = $365 >> 31;
            $367 = $364 ? $366 : $363;
            $368 = $367 & 255;
            HEAP8[$360 >> 0] = $368;
            $369 = $337 | 2;
            $370 = (($5) + ($369 << 1) | 0);
            $371 = HEAP16[$370 >> 1] | 0;
            $372 = $371 << 16 >> 16;
            $373 = (($372) + 32) | 0;
            $374 = $373 >> 6;
            $375 = (($338) + 2) | 0;
            $376 = (($0) + ($375) | 0);
            $377 = HEAP8[$376 >> 0] | 0;
            $378 = $377 & 255;
            $379 = (($374) + ($378)) | 0;
            $380 = ($379 >>> 0) > (255);
            $381 = (0 - ($379)) | 0;
            $382 = $381 >> 31;
            $383 = $380 ? $382 : $379;
            $384 = $383 & 255;
            HEAP8[$376 >> 0] = $384;
            $385 = $337 | 3;
            $386 = (($5) + ($385 << 1) | 0);
            $387 = HEAP16[$386 >> 1] | 0;
            $388 = $387 << 16 >> 16;
            $389 = (($388) + 32) | 0;
            $390 = $389 >> 6;
            $391 = (($338) + 3) | 0;
            $392 = (($0) + ($391) | 0);
            $393 = HEAP8[$392 >> 0] | 0;
            $394 = $393 & 255;
            $395 = (($390) + ($394)) | 0;
            $396 = ($395 >>> 0) > (255);
            $397 = (0 - ($395)) | 0;
            $398 = $397 >> 31;
            $399 = $396 ? $398 : $395;
            $400 = $399 & 255;
            HEAP8[$392 >> 0] = $400;
            $401 = $337 | 4;
            $402 = (($5) + ($401 << 1) | 0);
            $403 = HEAP16[$402 >> 1] | 0;
            $404 = $403 << 16 >> 16;
            $405 = (($404) + 32) | 0;
            $406 = $405 >> 6;
            $407 = (($338) + 4) | 0;
            $408 = (($0) + ($407) | 0);
            $409 = HEAP8[$408 >> 0] | 0;
            $410 = $409 & 255;
            $411 = (($406) + ($410)) | 0;
            $412 = ($411 >>> 0) > (255);
            $413 = (0 - ($411)) | 0;
            $414 = $413 >> 31;
            $415 = $412 ? $414 : $411;
            $416 = $415 & 255;
            HEAP8[$408 >> 0] = $416;
            $417 = $337 | 5;
            $418 = (($5) + ($417 << 1) | 0);
            $419 = HEAP16[$418 >> 1] | 0;
            $420 = $419 << 16 >> 16;
            $421 = (($420) + 32) | 0;
            $422 = $421 >> 6;
            $423 = (($338) + 5) | 0;
            $424 = (($0) + ($423) | 0);
            $425 = HEAP8[$424 >> 0] | 0;
            $426 = $425 & 255;
            $427 = (($422) + ($426)) | 0;
            $428 = ($427 >>> 0) > (255);
            $429 = (0 - ($427)) | 0;
            $430 = $429 >> 31;
            $431 = $428 ? $430 : $427;
            $432 = $431 & 255;
            HEAP8[$424 >> 0] = $432;
            $433 = $337 | 6;
            $434 = (($5) + ($433 << 1) | 0);
            $435 = HEAP16[$434 >> 1] | 0;
            $436 = $435 << 16 >> 16;
            $437 = (($436) + 32) | 0;
            $438 = $437 >> 6;
            $439 = (($338) + 6) | 0;
            $440 = (($0) + ($439) | 0);
            $441 = $store_forwarded & 255;
            $442 = (($438) + ($441)) | 0;
            $443 = ($442 >>> 0) > (255);
            $444 = (0 - ($442)) | 0;
            $445 = $444 >> 31;
            $446 = $443 ? $445 : $442;
            $447 = $446 & 255;
            HEAP8[$440 >> 0] = $447;
            $448 = $337 | 7;
            $449 = (($5) + ($448 << 1) | 0);
            $450 = HEAP16[$449 >> 1] | 0;
            $451 = $450 << 16 >> 16;
            $452 = (($451) + 32) | 0;
            $453 = $452 >> 6;
            $454 = (($338) + 7) | 0;
            $455 = (($0) + ($454) | 0);
            $456 = HEAP8[$455 >> 0] | 0;
            $457 = $456 & 255;
            $458 = (($453) + ($457)) | 0;
            $459 = ($458 >>> 0) > (255);
            $460 = (0 - ($458)) | 0;
            $461 = $460 >> 31;
            $462 = $459 ? $461 : $458;
            $463 = $462 & 255;
            HEAP8[$455 >> 0] = $463;
            $464 = (($$0126176) + 1) | 0;
            $exitcond = ($464 | 0) == (8);
            if ($exitcond) {
                break;
            } else {
                $$0126176 = $464; $store_forwarded = $463;
            }
        }
        STACKTOP = sp; return;
    }
    function __ZN7WelsDec14DeblockingInitEPNS_17TagDeblockingFuncEi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = 3;
        $2 = ((($0)) + 4 | 0);
        HEAP32[$2 >> 2] = 23;
        $3 = ((($0)) + 8 | 0);
        HEAP32[$3 >> 2] = 4;
        $4 = ((($0)) + 12 | 0);
        HEAP32[$4 >> 2] = 24;
        $5 = ((($0)) + 16 | 0);
        HEAP32[$5 >> 2] = 19;
        $6 = ((($0)) + 20 | 0);
        HEAP32[$6 >> 2] = 5;
        $7 = ((($0)) + 24 | 0);
        HEAP32[$7 >> 2] = 20;
        $8 = ((($0)) + 28 | 0);
        HEAP32[$8 >> 2] = 6;
        $9 = ((($0)) + 32 | 0);
        HEAP32[$9 >> 2] = 7;
        $10 = ((($0)) + 36 | 0);
        HEAP32[$10 >> 2] = 25;
        $11 = ((($0)) + 40 | 0);
        HEAP32[$11 >> 2] = 8;
        $12 = ((($0)) + 44 | 0);
        HEAP32[$12 >> 2] = 26;
        return;
    }
    function __ZN7WelsDec17WelsBlockFuncInitEPNS_12TagBlockFuncEi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = 10;
        $2 = ((($0)) + 4 | 0);
        HEAP32[$2 >> 2] = 33;
        $3 = ((($0)) + 8 | 0);
        HEAP32[$3 >> 2] = 34;
        return;
    }
    function __ZN7WelsDec14WelsInitMemoryEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0 | 0);
        if ($1) {
            $$0 = 3;
            return ($$0 | 0);
        }
        $2 = ((($0)) + 241888 | 0);
        $3 = ((($0)) + 562528 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = (__ZN7WelsDec14MemInitNalListEPPNS_14TagAccessUnitsEjPN10WelsCommon12CMemoryAlignE($2, 32, $4) | 0);
        $6 = ($5 | 0) == (0);
        if (!($6)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $7 = (__ZN7WelsDec12InitBsBufferEPNS_21TagWelsDecoderContextE($0) | 0);
        $8 = ($7 | 0) == (0);
        if (!($8)) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $9 = ((($0)) + 241950 | 0);
        $10 = ((($0)) + 241948 | 0);
        HEAP8[$10 >> 0] = -1;
        HEAP8[$9 >> 0] = 0;
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec14MemInitNalListEPPNS_14TagAccessUnitsEjPN10WelsCommon12CMemoryAlignE($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $$045 = 0, $$046 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = $1 << 2;
        $4 = (($3) + 28) | 0;
        $5 = ($1 * 3920) | 0;
        $6 = (($4) + ($5)) | 0;
        $7 = ($1 | 0) == (0);
        if ($7) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $8 = HEAP32[$0 >> 2] | 0;
        $9 = ($8 | 0) == (0 | 0);
        if (!($9)) {
            __ZN10WelsCommon12CMemoryAlign8WelsFreeEPvPKc($2, $8, 22066);
            HEAP32[$0 >> 2] = 0;
        }
        $10 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($2, $6, 22066) | 0);
        $11 = ($10 | 0) == (0 | 0);
        if ($11) {
            $$0 = 1;
            return ($$0 | 0);
        }
        HEAP32[$0 >> 2] = $10;
        $12 = ((($10)) + 28 | 0);
        HEAP32[$10 >> 2] = $12;
        $13 = (($12) + ($3) | 0);
        $$045 = 0; $$046 = $13;
        while (1) {
            $14 = HEAP32[$0 >> 2] | 0;
            $15 = HEAP32[$14 >> 2] | 0;
            $16 = (($15) + ($$045 << 2) | 0);
            HEAP32[$16 >> 2] = $$046;
            $17 = ((($$046)) + 3920 | 0);
            $18 = (($$045) + 1) | 0;
            $19 = ($18 >>> 0) < ($1 >>> 0);
            if ($19) {
                $$045 = $18; $$046 = $17;
            } else {
                break;
            }
        }
        $20 = HEAP32[$0 >> 2] | 0;
        $21 = ((($20)) + 12 | 0);
        HEAP32[$21 >> 2] = $1;
        $22 = HEAP32[$0 >> 2] | 0;
        $23 = ((($22)) + 4 | 0);
        HEAP32[$23 >> 2] = 0;
        $24 = HEAP32[$0 >> 2] | 0;
        $25 = ((($24)) + 8 | 0);
        HEAP32[$25 >> 2] = 0;
        $26 = HEAP32[$0 >> 2] | 0;
        $27 = ((($26)) + 16 | 0);
        HEAP32[$27 >> 2] = 0;
        $28 = HEAP32[$0 >> 2] | 0;
        $29 = ((($28)) + 20 | 0);
        HEAP32[$29 >> 2] = 0;
        $30 = HEAP32[$0 >> 2] | 0;
        $31 = ((($30)) + 24 | 0);
        HEAP8[$31 >> 0] = 0;
        $$0 = 0;
        return ($$0 | 0);
    }
    function __ZN7WelsDec12InitBsBufferEPNS_21TagWelsDecoderContextE($0) {
        $0 = $0 | 0;
        var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0 | 0);
        if ($1) {
            $$1 = 3;
            return ($$1 | 0);
        }
        $2 = ((($0)) + 562528 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = ((($0)) + 6172 | 0);
        HEAP32[$4 >> 2] = 3145728;
        $5 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($3, 3145728, 30437) | 0);
        $6 = ((($0)) + 16 | 0);
        HEAP32[$6 >> 2] = $5;
        $7 = ($5 | 0) == (0 | 0);
        if ($7) {
            $$1 = 1;
            return ($$1 | 0);
        }
        $8 = ((($0)) + 28 | 0);
        HEAP32[$8 >> 2] = $5;
        $9 = ((($0)) + 24 | 0);
        HEAP32[$9 >> 2] = $5;
        $10 = HEAP32[$4 >> 2] | 0;
        $11 = (($5) + ($10) | 0);
        $12 = ((($0)) + 20 | 0);
        HEAP32[$12 >> 2] = $11;
        $13 = ((($0)) + 242344 | 0);
        $14 = HEAP8[$13 >> 0] | 0;
        $15 = ($14 << 24 >> 24) == (0);
        if ($15) {
            $$1 = 0;
            return ($$1 | 0);
        }
        $16 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($3, 544, 22046) | 0);
        $17 = ((($0)) + 316848 | 0);
        HEAP32[$17 >> 2] = $16;
        $18 = ($16 | 0) == (0 | 0);
        if ($18) {
            $$1 = 1;
            return ($$1 | 0);
        }
        _memset(($16 | 0), 0, 544) | 0;
        $19 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($3, 7077888, 22016) | 0);
        $20 = HEAP32[$17 >> 2] | 0;
        $21 = ((($20)) + 516 | 0);
        HEAP32[$21 >> 2] = $19;
        $22 = HEAP32[$17 >> 2] | 0;
        $23 = ((($22)) + 516 | 0);
        $24 = HEAP32[$23 >> 2] | 0;
        $25 = ($24 | 0) == (0 | 0);
        if ($25) {
            $$1 = 1;
            return ($$1 | 0);
        }
        _memset(($24 | 0), 0, 7077888) | 0;
        $26 = HEAP32[$4 >> 2] | 0;
        $27 = (__ZN10WelsCommon12CMemoryAlign11WelsMalloczEjPKc($3, $26, 30679) | 0);
        $28 = ((($0)) + 32 | 0);
        HEAP32[$28 >> 2] = $27;
        $29 = ($27 | 0) == (0 | 0);
        if ($29) {
            $$1 = 1;
            return ($$1 | 0);
        }
        $30 = ((($0)) + 44 | 0);
        HEAP32[$30 >> 2] = $27;
        $31 = ((($0)) + 40 | 0);
        HEAP32[$31 >> 2] = $27;
        $32 = HEAP32[$4 >> 2] | 0;
        $33 = (($27) + ($32) | 0);
        $34 = ((($0)) + 36 | 0);
        HEAP32[$34 >> 2] = $33;
        $$1 = 0;
        return ($$1 | 0);
    }
    function __ZN7WelsDec20WelsBlockZero16x16_cEPsi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        dest = $0; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $2 = (($0) + ($1 << 1) | 0);
        dest = $2; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $3 = (($2) + ($1 << 1) | 0);
        dest = $3; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $4 = (($3) + ($1 << 1) | 0);
        dest = $4; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $5 = (($4) + ($1 << 1) | 0);
        dest = $5; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $6 = (($5) + ($1 << 1) | 0);
        dest = $6; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $7 = (($6) + ($1 << 1) | 0);
        dest = $7; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $8 = (($7) + ($1 << 1) | 0);
        dest = $8; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $9 = (($8) + ($1 << 1) | 0);
        dest = $9; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $10 = (($9) + ($1 << 1) | 0);
        dest = $10; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $11 = (($10) + ($1 << 1) | 0);
        dest = $11; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $12 = (($11) + ($1 << 1) | 0);
        dest = $12; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $13 = (($12) + ($1 << 1) | 0);
        dest = $13; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $14 = (($13) + ($1 << 1) | 0);
        dest = $14; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $15 = (($14) + ($1 << 1) | 0);
        dest = $15; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        $16 = (($15) + ($1 << 1) | 0);
        dest = $16; stop = dest + 32 | 0; do { HEAP16[dest >> 1] = 0 | 0; dest = dest + 2 | 0; } while ((dest | 0) < (stop | 0));
        return;
    }
    function __ZN7WelsDec18WelsBlockZero8x8_cEPsi($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        ; HEAP16[$0 >> 1] = 0 | 0; HEAP16[$0 + 2 >> 1] = 0 | 0; HEAP16[$0 + 4 >> 1] = 0 | 0; HEAP16[$0 + 6 >> 1] = 0 | 0; HEAP16[$0 + 8 >> 1] = 0 | 0; HEAP16[$0 + 10 >> 1] = 0 | 0; HEAP16[$0 + 12 >> 1] = 0 | 0; HEAP16[$0 + 14 >> 1] = 0 | 0;
        $2 = (($0) + ($1 << 1) | 0);
        ; HEAP16[$2 >> 1] = 0 | 0; HEAP16[$2 + 2 >> 1] = 0 | 0; HEAP16[$2 + 4 >> 1] = 0 | 0; HEAP16[$2 + 6 >> 1] = 0 | 0; HEAP16[$2 + 8 >> 1] = 0 | 0; HEAP16[$2 + 10 >> 1] = 0 | 0; HEAP16[$2 + 12 >> 1] = 0 | 0; HEAP16[$2 + 14 >> 1] = 0 | 0;
        $3 = (($2) + ($1 << 1) | 0);
        ; HEAP16[$3 >> 1] = 0 | 0; HEAP16[$3 + 2 >> 1] = 0 | 0; HEAP16[$3 + 4 >> 1] = 0 | 0; HEAP16[$3 + 6 >> 1] = 0 | 0; HEAP16[$3 + 8 >> 1] = 0 | 0; HEAP16[$3 + 10 >> 1] = 0 | 0; HEAP16[$3 + 12 >> 1] = 0 | 0; HEAP16[$3 + 14 >> 1] = 0 | 0;
        $4 = (($3) + ($1 << 1) | 0);
        ; HEAP16[$4 >> 1] = 0 | 0; HEAP16[$4 + 2 >> 1] = 0 | 0; HEAP16[$4 + 4 >> 1] = 0 | 0; HEAP16[$4 + 6 >> 1] = 0 | 0; HEAP16[$4 + 8 >> 1] = 0 | 0; HEAP16[$4 + 10 >> 1] = 0 | 0; HEAP16[$4 + 12 >> 1] = 0 | 0; HEAP16[$4 + 14 >> 1] = 0 | 0;
        $5 = (($4) + ($1 << 1) | 0);
        ; HEAP16[$5 >> 1] = 0 | 0; HEAP16[$5 + 2 >> 1] = 0 | 0; HEAP16[$5 + 4 >> 1] = 0 | 0; HEAP16[$5 + 6 >> 1] = 0 | 0; HEAP16[$5 + 8 >> 1] = 0 | 0; HEAP16[$5 + 10 >> 1] = 0 | 0; HEAP16[$5 + 12 >> 1] = 0 | 0; HEAP16[$5 + 14 >> 1] = 0 | 0;
        $6 = (($5) + ($1 << 1) | 0);
        ; HEAP16[$6 >> 1] = 0 | 0; HEAP16[$6 + 2 >> 1] = 0 | 0; HEAP16[$6 + 4 >> 1] = 0 | 0; HEAP16[$6 + 6 >> 1] = 0 | 0; HEAP16[$6 + 8 >> 1] = 0 | 0; HEAP16[$6 + 10 >> 1] = 0 | 0; HEAP16[$6 + 12 >> 1] = 0 | 0; HEAP16[$6 + 14 >> 1] = 0 | 0;
        $7 = (($6) + ($1 << 1) | 0);
        ; HEAP16[$7 >> 1] = 0 | 0; HEAP16[$7 + 2 >> 1] = 0 | 0; HEAP16[$7 + 4 >> 1] = 0 | 0; HEAP16[$7 + 6 >> 1] = 0 | 0; HEAP16[$7 + 8 >> 1] = 0 | 0; HEAP16[$7 + 10 >> 1] = 0 | 0; HEAP16[$7 + 12 >> 1] = 0 | 0; HEAP16[$7 + 14 >> 1] = 0 | 0;
        $8 = (($7) + ($1 << 1) | 0);
        ; HEAP16[$8 >> 1] = 0 | 0; HEAP16[$8 + 2 >> 1] = 0 | 0; HEAP16[$8 + 4 >> 1] = 0 | 0; HEAP16[$8 + 6 >> 1] = 0 | 0; HEAP16[$8 + 8 >> 1] = 0 | 0; HEAP16[$8 + 10 >> 1] = 0 | 0; HEAP16[$8 + 12 >> 1] = 0 | 0; HEAP16[$8 + 14 >> 1] = 0 | 0;
        return;
    }
    function __Z20DeblockChromaLt4V2_cPhiiiPa($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$$i = 0, $$07375$i = 0, $$076$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0;
        var $brmerge$i = 0, $exitcond$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = (0 - ($1)) | 0;
        $6 = Math_imul($1, -2) | 0;
        $$07375$i = 0; $$076$i = $0;
        while (1) {
            $7 = $$07375$i >> 1;
            $8 = (($4) + ($7) | 0);
            $9 = HEAP8[$8 >> 0] | 0;
            $10 = $9 << 24 >> 24;
            $11 = ($9 << 24 >> 24) > (0);
            if ($11) {
                $12 = (($$076$i) + ($5) | 0);
                $13 = HEAP8[$12 >> 0] | 0;
                $14 = $13 & 255;
                $15 = (($$076$i) + ($6) | 0);
                $16 = HEAP8[$15 >> 0] | 0;
                $17 = $16 & 255;
                $18 = HEAP8[$$076$i >> 0] | 0;
                $19 = $18 & 255;
                $20 = (($$076$i) + ($1) | 0);
                $21 = HEAP8[$20 >> 0] | 0;
                $22 = $21 & 255;
                $23 = (($14) - ($19)) | 0;
                $24 = $23 >> 31;
                $25 = $24 ^ $23;
                $26 = (($25) - ($24)) | 0;
                $27 = ($26 | 0) < ($2 | 0);
                $28 = (($17) - ($14)) | 0;
                $29 = $28 >> 31;
                $30 = (($22) - ($19)) | 0;
                $31 = $30 >> 31;
                if ($27) {
                    $32 = $31 ^ $30;
                    $33 = (($32) - ($31)) | 0;
                    $34 = ($33 | 0) >= ($3 | 0);
                    $35 = $29 ^ $28;
                    $36 = (($35) - ($29)) | 0;
                    $37 = ($36 | 0) >= ($3 | 0);
                    $brmerge$i = $37 | $34;
                    if (!($brmerge$i)) {
                        $38 = (($19) - ($14)) | 0;
                        $39 = $38 << 2;
                        $40 = (($17) + 4) | 0;
                        $41 = (($40) - ($22)) | 0;
                        $42 = (($41) + ($39)) | 0;
                        $43 = $42 >> 3;
                        $44 = (0 - ($10)) | 0;
                        $45 = ($43 | 0) < ($44 | 0);
                        $46 = ($43 | 0) > ($10 | 0);
                        $$$i = $46 ? $10 : $43;
                        $47 = $45 ? $44 : $$$i;
                        $48 = (($47) + ($14)) | 0;
                        $49 = ($48 >>> 0) > (255);
                        $50 = (0 - ($48)) | 0;
                        $51 = $50 >> 31;
                        $52 = $49 ? $51 : $48;
                        $53 = $52 & 255;
                        HEAP8[$12 >> 0] = $53;
                        $54 = (($19) - ($47)) | 0;
                        $55 = ($54 >>> 0) > (255);
                        $56 = (0 - ($54)) | 0;
                        $57 = $56 >> 31;
                        $58 = $55 ? $57 : $54;
                        $59 = $58 & 255;
                        HEAP8[$$076$i >> 0] = $59;
                    }
                }
            }
            $60 = ((($$076$i)) + 1 | 0);
            $61 = (($$07375$i) + 1) | 0;
            $exitcond$i = ($61 | 0) == (8);
            if ($exitcond$i) {
                break;
            } else {
                $$07375$i = $61; $$076$i = $60;
            }
        }
        return;
    }
    function __Z20DeblockChromaEq4V2_cPhiii($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$05254$i = 0, $$055$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
        var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge$i = 0, $exitcond$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = (0 - ($1)) | 0;
        $5 = Math_imul($1, -2) | 0;
        $$05254$i = $0; $$055$i = 0;
        while (1) {
            $6 = (($$05254$i) + ($4) | 0);
            $7 = HEAP8[$6 >> 0] | 0;
            $8 = $7 & 255;
            $9 = (($$05254$i) + ($5) | 0);
            $10 = HEAP8[$9 >> 0] | 0;
            $11 = $10 & 255;
            $12 = HEAP8[$$05254$i >> 0] | 0;
            $13 = $12 & 255;
            $14 = (($$05254$i) + ($1) | 0);
            $15 = HEAP8[$14 >> 0] | 0;
            $16 = $15 & 255;
            $17 = (($8) - ($13)) | 0;
            $18 = $17 >> 31;
            $19 = $18 ^ $17;
            $20 = (($19) - ($18)) | 0;
            $21 = ($20 | 0) < ($2 | 0);
            $22 = (($11) - ($8)) | 0;
            $23 = $22 >> 31;
            $24 = (($16) - ($13)) | 0;
            $25 = $24 >> 31;
            if ($21) {
                $26 = $25 ^ $24;
                $27 = (($26) - ($25)) | 0;
                $28 = ($27 | 0) >= ($3 | 0);
                $29 = $23 ^ $22;
                $30 = (($29) - ($23)) | 0;
                $31 = ($30 | 0) >= ($3 | 0);
                $brmerge$i = $31 | $28;
                if (!($brmerge$i)) {
                    $32 = $11 << 1;
                    $33 = (($8) + 2) | 0;
                    $34 = (($33) + ($32)) | 0;
                    $35 = (($34) + ($16)) | 0;
                    $36 = $35 >>> 2;
                    $37 = $36 & 255;
                    HEAP8[$6 >> 0] = $37;
                    $38 = $16 << 1;
                    $39 = (($11) + 2) | 0;
                    $40 = (($39) + ($13)) | 0;
                    $41 = (($40) + ($38)) | 0;
                    $42 = $41 >>> 2;
                    $43 = $42 & 255;
                    HEAP8[$$05254$i >> 0] = $43;
                }
            }
            $44 = ((($$05254$i)) + 1 | 0);
            $45 = (($$055$i) + 1) | 0;
            $exitcond$i = ($45 | 0) == (8);
            if ($exitcond$i) {
                break;
            } else {
                $$05254$i = $44; $$055$i = $45;
            }
        }
        return;
    }
    function __Z20DeblockChromaLt4H2_cPhiiiPa($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$$i = 0, $$07375$i = 0, $$076$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $brmerge$i = 0, $exitcond$i = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        $$07375$i = 0; $$076$i = $0;
        while (1) {
            $5 = $$07375$i >> 1;
            $6 = (($4) + ($5) | 0);
            $7 = HEAP8[$6 >> 0] | 0;
            $8 = $7 << 24 >> 24;
            $9 = ($7 << 24 >> 24) > (0);
            if ($9) {
                $10 = ((($$076$i)) + -1 | 0);
                $11 = HEAP8[$10 >> 0] | 0;
                $12 = $11 & 255;
                $13 = ((($$076$i)) + -2 | 0);
                $14 = HEAP8[$13 >> 0] | 0;
                $15 = $14 & 255;
                $16 = HEAP8[$$076$i >> 0] | 0;
                $17 = $16 & 255;
                $18 = ((($$076$i)) + 1 | 0);
                $19 = HEAP8[$18 >> 0] | 0;
                $20 = $19 & 255;
                $21 = (($12) - ($17)) | 0;
                $22 = $21 >> 31;
                $23 = $22 ^ $21;
                $24 = (($23) - ($22)) | 0;
                $25 = ($24 | 0) < ($2 | 0);
                $26 = (($15) - ($12)) | 0;
                $27 = $26 >> 31;
                $28 = (($20) - ($17)) | 0;
                $29 = $28 >> 31;
                if ($25) {
                    $30 = $29 ^ $28;
                    $31 = (($30) - ($29)) | 0;
                    $32 = ($31 | 0) >= ($3 | 0);
                    $33 = $27 ^ $26;
                    $34 = (($33) - ($27)) | 0;
                    $35 = ($34 | 0) >= ($3 | 0);
                    $brmerge$i = $35 | $32;
                    if (!($brmerge$i)) {
                        $36 = (($17) - ($12)) | 0;
                        $37 = $36 << 2;
                        $38 = (($15) + 4) | 0;
                        $39 = (($38) - ($20)) | 0;
                        $40 = (($39) + ($37)) | 0;
                        $41 = $40 >> 3;
                        $42 = (0 - ($8)) | 0;
                        $43 = ($41 | 0) < ($42 | 0);
                        $44 = ($41 | 0) > ($8 | 0);
                        $$$i = $44 ? $8 : $41;
                        $45 = $43 ? $42 : $$$i;
                        $46 = (($45) + ($12)) | 0;
                        $47 = ($46 >>> 0) > (255);
                        $48 = (0 - ($46)) | 0;
                        $49 = $48 >> 31;
                        $50 = $47 ? $49 : $46;
                        $51 = $50 & 255;
                        HEAP8[$10 >> 0] = $51;
                        $52 = (($17) - ($45)) | 0;
                        $53 = ($52 >>> 0) > (255);
                        $54 = (0 - ($52)) | 0;
                        $55 = $54 >> 31;
                        $56 = $53 ? $55 : $52;
                        $57 = $56 & 255;
                        HEAP8[$$076$i >> 0] = $57;
                    }
                }
            }
            $58 = (($$076$i) + ($1) | 0);
            $59 = (($$07375$i) + 1) | 0;
            $exitcond$i = ($59 | 0) == (8);
            if ($exitcond$i) {
                break;
            } else {
                $$07375$i = $59; $$076$i = $58;
            }
        }
        return;
    }
    function __Z20DeblockChromaEq4H2_cPhiii($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$05254$i = 0, $$055$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
        var $8 = 0, $9 = 0, $brmerge$i = 0, $exitcond$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $$05254$i = $0; $$055$i = 0;
        while (1) {
            $4 = ((($$05254$i)) + -1 | 0);
            $5 = HEAP8[$4 >> 0] | 0;
            $6 = $5 & 255;
            $7 = ((($$05254$i)) + -2 | 0);
            $8 = HEAP8[$7 >> 0] | 0;
            $9 = $8 & 255;
            $10 = HEAP8[$$05254$i >> 0] | 0;
            $11 = $10 & 255;
            $12 = ((($$05254$i)) + 1 | 0);
            $13 = HEAP8[$12 >> 0] | 0;
            $14 = $13 & 255;
            $15 = (($6) - ($11)) | 0;
            $16 = $15 >> 31;
            $17 = $16 ^ $15;
            $18 = (($17) - ($16)) | 0;
            $19 = ($18 | 0) < ($2 | 0);
            $20 = (($9) - ($6)) | 0;
            $21 = $20 >> 31;
            $22 = (($14) - ($11)) | 0;
            $23 = $22 >> 31;
            if ($19) {
                $24 = $23 ^ $22;
                $25 = (($24) - ($23)) | 0;
                $26 = ($25 | 0) >= ($3 | 0);
                $27 = $21 ^ $20;
                $28 = (($27) - ($21)) | 0;
                $29 = ($28 | 0) >= ($3 | 0);
                $brmerge$i = $29 | $26;
                if (!($brmerge$i)) {
                    $30 = $9 << 1;
                    $31 = (($6) + 2) | 0;
                    $32 = (($31) + ($30)) | 0;
                    $33 = (($32) + ($14)) | 0;
                    $34 = $33 >>> 2;
                    $35 = $34 & 255;
                    HEAP8[$4 >> 0] = $35;
                    $36 = $14 << 1;
                    $37 = (($9) + 2) | 0;
                    $38 = (($37) + ($11)) | 0;
                    $39 = (($38) + ($36)) | 0;
                    $40 = $39 >>> 2;
                    $41 = $40 & 255;
                    HEAP8[$$05254$i >> 0] = $41;
                }
            }
            $42 = (($$05254$i) + ($1) | 0);
            $43 = (($$055$i) + 1) | 0;
            $exitcond$i = ($43 | 0) == (8);
            if ($exitcond$i) {
                break;
            } else {
                $$05254$i = $42; $$055$i = $43;
            }
        }
        return;
    }
    function __ZN14welsCodecTrace16SetCodecInstanceEPv($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ((($0)) + 20 | 0);
        HEAP32[$2 >> 2] = $1;
        return;
    }
    function __ZN14welsCodecTraceC2Ev($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAP32[$0 >> 2] = 2;
        $1 = ((($0)) + 4 | 0);
        HEAP32[$1 >> 2] = 5;
        $2 = ((($0)) + 8 | 0);
        HEAP32[$2 >> 2] = 0;
        $3 = ((($0)) + 16 | 0);
        HEAP32[$3 >> 2] = $0;
        $4 = ((($0)) + 12 | 0);
        HEAP32[$4 >> 2] = 27;
        $5 = ((($0)) + 20 | 0);
        HEAP32[$5 >> 2] = 0;
        return;
    }
    function __ZL15welsStderrTracePviPKc($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $3 = HEAP32[2424] | 0;
        HEAP32[$vararg_buffer >> 2] = $2;
        (_fprintf($3, 30741, $vararg_buffer) | 0);
        STACKTOP = sp; return;
    }
    function __ZN14welsCodecTrace16StaticCodecTraceEPviPKcPi($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 1024 | 0;
        $4 = sp;
        $5 = HEAP32[$0 >> 2] | 0;
        $6 = ($5 | 0) < ($1 | 0);
        if ($6) {
            STACKTOP = sp; return;
        }
        _memset(($4 | 0), 0, 1024) | 0;
        (_WelsVsnprintf($4, 1024, $2, $3) | 0);
        $7 = ((($0)) + 4 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = ($8 | 0) == (0 | 0);
        if (!($9)) {
            $10 = ((($0)) + 8 | 0);
            $11 = HEAP32[$10 >> 2] | 0;
            FUNCTION_TABLE_viii[$8 & 7]($11, $1, $4);
        }
        STACKTOP = sp; return;
    }
    function _WelsVsnprintf($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = (_vsnprintf($0, $1, $2, $3) | 0);
        return ($4 | 0);
    }
    function __ZN7WelsDec12CWelsDecoderC2Ev($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        HEAP32[$0 >> 2] = (9248);
        $1 = ((($0)) + 4 | 0);
        HEAP32[$1 >> 2] = 0;
        $2 = ((($0)) + 8 | 0);
        HEAP32[$2 >> 2] = 0;
        $3 = (__Znwj(24) | 0);
        __ZN14welsCodecTraceC2Ev($3);
        HEAP32[$2 >> 2] = $3;
        __ZN14welsCodecTrace16SetCodecInstanceEPv($3, $0);
        $4 = HEAP32[$2 >> 2] | 0;
        __ZN14welsCodecTrace13SetTraceLevelEi($4, 1);
        $5 = HEAP32[$2 >> 2] | 0;
        $6 = ((($5)) + 12 | 0);
        __Z7WelsLogP13TagLogContextiPKcz($6, 4, 30745, $vararg_buffer);
        STACKTOP = sp; return;
    }
    function _WelsCreateDecoder($0) {
        $0 = $0 | 0;
        var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0 | 0);
        if ($1) {
            $$0 = 1;
            return ($$0 | 0);
        }
        $2 = (__Znwj(12) | 0);
        __ZN7WelsDec12CWelsDecoderC2Ev($2);
        HEAP32[$0 >> 2] = $2;
        $$0 = 0;
        return ($$0 | 0);
    }
    function _WelsDestroyDecoder($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0 | 0);
        if ($1) {
            return;
        }
        $2 = HEAP32[$0 >> 2] | 0;
        $3 = ((($2)) + 40 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        FUNCTION_TABLE_vi[$4 & 15]($0);
        return;
    }
    function _malloc($0) {
        $0 = $0 | 0;
        var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0172$lcssa$i = 0, $$01724$i = 0, $$0173$lcssa$i = 0, $$01733$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0;
        var $$024367$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0, $$124466$i = 0;
        var $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i199 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$4236$i = 0, $$4329$lcssa$i = 0;
        var $$43298$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43357$i = 0, $$49$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i207 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i208Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0, $$sink1$i$i = 0;
        var $$sink12$i = 0, $$sink2$i = 0, $$sink2$i202 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
        var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
        var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
        var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
        var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
        var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
        var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
        var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
        var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
        var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
        var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
        var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
        var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
        var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
        var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
        var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
        var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
        var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
        var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
        var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
        var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
        var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
        var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
        var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
        var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
        var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
        var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
        var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
        var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
        var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
        var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
        var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
        var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
        var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
        var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
        var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
        var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
        var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
        var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
        var $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0;
        var $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0;
        var $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0;
        var $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0;
        var $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0;
        var $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0;
        var $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0;
        var $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0;
        var $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0;
        var $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i206 = 0, $not$$i = 0, $not$3$i = 0;
        var $or$cond$i = 0, $or$cond$i200 = 0, $or$cond1$i = 0, $or$cond1$i198 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $1 = sp;
        $2 = ($0 >>> 0) < (245);
        do {
            if ($2) {
                $3 = ($0 >>> 0) < (11);
                $4 = (($0) + 11) | 0;
                $5 = $4 & -8;
                $6 = $3 ? 16 : $5;
                $7 = $6 >>> 3;
                $8 = HEAP32[8332] | 0;
                $9 = $8 >>> $7;
                $10 = $9 & 3;
                $11 = ($10 | 0) == (0);
                if (!($11)) {
                    $12 = $9 & 1;
                    $13 = $12 ^ 1;
                    $14 = (($13) + ($7)) | 0;
                    $15 = $14 << 1;
                    $16 = (33368 + ($15 << 2) | 0);
                    $17 = ((($16)) + 8 | 0);
                    $18 = HEAP32[$17 >> 2] | 0;
                    $19 = ((($18)) + 8 | 0);
                    $20 = HEAP32[$19 >> 2] | 0;
                    $21 = ($20 | 0) == ($16 | 0);
                    if ($21) {
                        $22 = 1 << $14;
                        $23 = $22 ^ -1;
                        $24 = $8 & $23;
                        HEAP32[8332] = $24;
                    } else {
                        $25 = ((($20)) + 12 | 0);
                        HEAP32[$25 >> 2] = $16;
                        HEAP32[$17 >> 2] = $20;
                    }
                    $26 = $14 << 3;
                    $27 = $26 | 3;
                    $28 = ((($18)) + 4 | 0);
                    HEAP32[$28 >> 2] = $27;
                    $29 = (($18) + ($26) | 0);
                    $30 = ((($29)) + 4 | 0);
                    $31 = HEAP32[$30 >> 2] | 0;
                    $32 = $31 | 1;
                    HEAP32[$30 >> 2] = $32;
                    $$0 = $19;
                    STACKTOP = sp; return ($$0 | 0);
                }
                $33 = HEAP32[(33336) >> 2] | 0;
                $34 = ($6 >>> 0) > ($33 >>> 0);
                if ($34) {
                    $35 = ($9 | 0) == (0);
                    if (!($35)) {
                        $36 = $9 << $7;
                        $37 = 2 << $7;
                        $38 = (0 - ($37)) | 0;
                        $39 = $37 | $38;
                        $40 = $36 & $39;
                        $41 = (0 - ($40)) | 0;
                        $42 = $40 & $41;
                        $43 = (($42) + -1) | 0;
                        $44 = $43 >>> 12;
                        $45 = $44 & 16;
                        $46 = $43 >>> $45;
                        $47 = $46 >>> 5;
                        $48 = $47 & 8;
                        $49 = $48 | $45;
                        $50 = $46 >>> $48;
                        $51 = $50 >>> 2;
                        $52 = $51 & 4;
                        $53 = $49 | $52;
                        $54 = $50 >>> $52;
                        $55 = $54 >>> 1;
                        $56 = $55 & 2;
                        $57 = $53 | $56;
                        $58 = $54 >>> $56;
                        $59 = $58 >>> 1;
                        $60 = $59 & 1;
                        $61 = $57 | $60;
                        $62 = $58 >>> $60;
                        $63 = (($61) + ($62)) | 0;
                        $64 = $63 << 1;
                        $65 = (33368 + ($64 << 2) | 0);
                        $66 = ((($65)) + 8 | 0);
                        $67 = HEAP32[$66 >> 2] | 0;
                        $68 = ((($67)) + 8 | 0);
                        $69 = HEAP32[$68 >> 2] | 0;
                        $70 = ($69 | 0) == ($65 | 0);
                        if ($70) {
                            $71 = 1 << $63;
                            $72 = $71 ^ -1;
                            $73 = $8 & $72;
                            HEAP32[8332] = $73;
                            $90 = $73;
                        } else {
                            $74 = ((($69)) + 12 | 0);
                            HEAP32[$74 >> 2] = $65;
                            HEAP32[$66 >> 2] = $69;
                            $90 = $8;
                        }
                        $75 = $63 << 3;
                        $76 = (($75) - ($6)) | 0;
                        $77 = $6 | 3;
                        $78 = ((($67)) + 4 | 0);
                        HEAP32[$78 >> 2] = $77;
                        $79 = (($67) + ($6) | 0);
                        $80 = $76 | 1;
                        $81 = ((($79)) + 4 | 0);
                        HEAP32[$81 >> 2] = $80;
                        $82 = (($67) + ($75) | 0);
                        HEAP32[$82 >> 2] = $76;
                        $83 = ($33 | 0) == (0);
                        if (!($83)) {
                            $84 = HEAP32[(33348) >> 2] | 0;
                            $85 = $33 >>> 3;
                            $86 = $85 << 1;
                            $87 = (33368 + ($86 << 2) | 0);
                            $88 = 1 << $85;
                            $89 = $90 & $88;
                            $91 = ($89 | 0) == (0);
                            if ($91) {
                                $92 = $90 | $88;
                                HEAP32[8332] = $92;
                                $$pre = ((($87)) + 8 | 0);
                                $$0194 = $87; $$pre$phiZ2D = $$pre;
                            } else {
                                $93 = ((($87)) + 8 | 0);
                                $94 = HEAP32[$93 >> 2] | 0;
                                $$0194 = $94; $$pre$phiZ2D = $93;
                            }
                            HEAP32[$$pre$phiZ2D >> 2] = $84;
                            $95 = ((($$0194)) + 12 | 0);
                            HEAP32[$95 >> 2] = $84;
                            $96 = ((($84)) + 8 | 0);
                            HEAP32[$96 >> 2] = $$0194;
                            $97 = ((($84)) + 12 | 0);
                            HEAP32[$97 >> 2] = $87;
                        }
                        HEAP32[(33336) >> 2] = $76;
                        HEAP32[(33348) >> 2] = $79;
                        $$0 = $68;
                        STACKTOP = sp; return ($$0 | 0);
                    }
                    $98 = HEAP32[(33332) >> 2] | 0;
                    $99 = ($98 | 0) == (0);
                    if ($99) {
                        $$0192 = $6;
                    } else {
                        $100 = (0 - ($98)) | 0;
                        $101 = $98 & $100;
                        $102 = (($101) + -1) | 0;
                        $103 = $102 >>> 12;
                        $104 = $103 & 16;
                        $105 = $102 >>> $104;
                        $106 = $105 >>> 5;
                        $107 = $106 & 8;
                        $108 = $107 | $104;
                        $109 = $105 >>> $107;
                        $110 = $109 >>> 2;
                        $111 = $110 & 4;
                        $112 = $108 | $111;
                        $113 = $109 >>> $111;
                        $114 = $113 >>> 1;
                        $115 = $114 & 2;
                        $116 = $112 | $115;
                        $117 = $113 >>> $115;
                        $118 = $117 >>> 1;
                        $119 = $118 & 1;
                        $120 = $116 | $119;
                        $121 = $117 >>> $119;
                        $122 = (($120) + ($121)) | 0;
                        $123 = (33632 + ($122 << 2) | 0);
                        $124 = HEAP32[$123 >> 2] | 0;
                        $125 = ((($124)) + 4 | 0);
                        $126 = HEAP32[$125 >> 2] | 0;
                        $127 = $126 & -8;
                        $128 = (($127) - ($6)) | 0;
                        $129 = ((($124)) + 16 | 0);
                        $130 = HEAP32[$129 >> 2] | 0;
                        $131 = ($130 | 0) == (0 | 0);
                        $$sink12$i = $131 & 1;
                        $132 = (((($124)) + 16 | 0) + ($$sink12$i << 2) | 0);
                        $133 = HEAP32[$132 >> 2] | 0;
                        $134 = ($133 | 0) == (0 | 0);
                        if ($134) {
                            $$0172$lcssa$i = $124; $$0173$lcssa$i = $128;
                        } else {
                            $$01724$i = $124; $$01733$i = $128; $136 = $133;
                            while (1) {
                                $135 = ((($136)) + 4 | 0);
                                $137 = HEAP32[$135 >> 2] | 0;
                                $138 = $137 & -8;
                                $139 = (($138) - ($6)) | 0;
                                $140 = ($139 >>> 0) < ($$01733$i >>> 0);
                                $$$0173$i = $140 ? $139 : $$01733$i;
                                $$$0172$i = $140 ? $136 : $$01724$i;
                                $141 = ((($136)) + 16 | 0);
                                $142 = HEAP32[$141 >> 2] | 0;
                                $143 = ($142 | 0) == (0 | 0);
                                $$sink1$i = $143 & 1;
                                $144 = (((($136)) + 16 | 0) + ($$sink1$i << 2) | 0);
                                $145 = HEAP32[$144 >> 2] | 0;
                                $146 = ($145 | 0) == (0 | 0);
                                if ($146) {
                                    $$0172$lcssa$i = $$$0172$i; $$0173$lcssa$i = $$$0173$i;
                                    break;
                                } else {
                                    $$01724$i = $$$0172$i; $$01733$i = $$$0173$i; $136 = $145;
                                }
                            }
                        }
                        $147 = (($$0172$lcssa$i) + ($6) | 0);
                        $148 = ($147 >>> 0) > ($$0172$lcssa$i >>> 0);
                        if ($148) {
                            $149 = ((($$0172$lcssa$i)) + 24 | 0);
                            $150 = HEAP32[$149 >> 2] | 0;
                            $151 = ((($$0172$lcssa$i)) + 12 | 0);
                            $152 = HEAP32[$151 >> 2] | 0;
                            $153 = ($152 | 0) == ($$0172$lcssa$i | 0);
                            do {
                                if ($153) {
                                    $158 = ((($$0172$lcssa$i)) + 20 | 0);
                                    $159 = HEAP32[$158 >> 2] | 0;
                                    $160 = ($159 | 0) == (0 | 0);
                                    if ($160) {
                                        $161 = ((($$0172$lcssa$i)) + 16 | 0);
                                        $162 = HEAP32[$161 >> 2] | 0;
                                        $163 = ($162 | 0) == (0 | 0);
                                        if ($163) {
                                            $$3$i = 0;
                                            break;
                                        } else {
                                            $$1176$i = $162; $$1178$i = $161;
                                        }
                                    } else {
                                        $$1176$i = $159; $$1178$i = $158;
                                    }
                                    while (1) {
                                        $164 = ((($$1176$i)) + 20 | 0);
                                        $165 = HEAP32[$164 >> 2] | 0;
                                        $166 = ($165 | 0) == (0 | 0);
                                        if (!($166)) {
                                            $$1176$i = $165; $$1178$i = $164;
                                            continue;
                                        }
                                        $167 = ((($$1176$i)) + 16 | 0);
                                        $168 = HEAP32[$167 >> 2] | 0;
                                        $169 = ($168 | 0) == (0 | 0);
                                        if ($169) {
                                            break;
                                        } else {
                                            $$1176$i = $168; $$1178$i = $167;
                                        }
                                    }
                                    HEAP32[$$1178$i >> 2] = 0;
                                    $$3$i = $$1176$i;
                                } else {
                                    $154 = ((($$0172$lcssa$i)) + 8 | 0);
                                    $155 = HEAP32[$154 >> 2] | 0;
                                    $156 = ((($155)) + 12 | 0);
                                    HEAP32[$156 >> 2] = $152;
                                    $157 = ((($152)) + 8 | 0);
                                    HEAP32[$157 >> 2] = $155;
                                    $$3$i = $152;
                                }
                            } while (0);
                            $170 = ($150 | 0) == (0 | 0);
                            do {
                                if (!($170)) {
                                    $171 = ((($$0172$lcssa$i)) + 28 | 0);
                                    $172 = HEAP32[$171 >> 2] | 0;
                                    $173 = (33632 + ($172 << 2) | 0);
                                    $174 = HEAP32[$173 >> 2] | 0;
                                    $175 = ($$0172$lcssa$i | 0) == ($174 | 0);
                                    if ($175) {
                                        HEAP32[$173 >> 2] = $$3$i;
                                        $cond$i = ($$3$i | 0) == (0 | 0);
                                        if ($cond$i) {
                                            $176 = 1 << $172;
                                            $177 = $176 ^ -1;
                                            $178 = $98 & $177;
                                            HEAP32[(33332) >> 2] = $178;
                                            break;
                                        }
                                    } else {
                                        $179 = ((($150)) + 16 | 0);
                                        $180 = HEAP32[$179 >> 2] | 0;
                                        $181 = ($180 | 0) != ($$0172$lcssa$i | 0);
                                        $$sink2$i = $181 & 1;
                                        $182 = (((($150)) + 16 | 0) + ($$sink2$i << 2) | 0);
                                        HEAP32[$182 >> 2] = $$3$i;
                                        $183 = ($$3$i | 0) == (0 | 0);
                                        if ($183) {
                                            break;
                                        }
                                    }
                                    $184 = ((($$3$i)) + 24 | 0);
                                    HEAP32[$184 >> 2] = $150;
                                    $185 = ((($$0172$lcssa$i)) + 16 | 0);
                                    $186 = HEAP32[$185 >> 2] | 0;
                                    $187 = ($186 | 0) == (0 | 0);
                                    if (!($187)) {
                                        $188 = ((($$3$i)) + 16 | 0);
                                        HEAP32[$188 >> 2] = $186;
                                        $189 = ((($186)) + 24 | 0);
                                        HEAP32[$189 >> 2] = $$3$i;
                                    }
                                    $190 = ((($$0172$lcssa$i)) + 20 | 0);
                                    $191 = HEAP32[$190 >> 2] | 0;
                                    $192 = ($191 | 0) == (0 | 0);
                                    if (!($192)) {
                                        $193 = ((($$3$i)) + 20 | 0);
                                        HEAP32[$193 >> 2] = $191;
                                        $194 = ((($191)) + 24 | 0);
                                        HEAP32[$194 >> 2] = $$3$i;
                                    }
                                }
                            } while (0);
                            $195 = ($$0173$lcssa$i >>> 0) < (16);
                            if ($195) {
                                $196 = (($$0173$lcssa$i) + ($6)) | 0;
                                $197 = $196 | 3;
                                $198 = ((($$0172$lcssa$i)) + 4 | 0);
                                HEAP32[$198 >> 2] = $197;
                                $199 = (($$0172$lcssa$i) + ($196) | 0);
                                $200 = ((($199)) + 4 | 0);
                                $201 = HEAP32[$200 >> 2] | 0;
                                $202 = $201 | 1;
                                HEAP32[$200 >> 2] = $202;
                            } else {
                                $203 = $6 | 3;
                                $204 = ((($$0172$lcssa$i)) + 4 | 0);
                                HEAP32[$204 >> 2] = $203;
                                $205 = $$0173$lcssa$i | 1;
                                $206 = ((($147)) + 4 | 0);
                                HEAP32[$206 >> 2] = $205;
                                $207 = (($147) + ($$0173$lcssa$i) | 0);
                                HEAP32[$207 >> 2] = $$0173$lcssa$i;
                                $208 = ($33 | 0) == (0);
                                if (!($208)) {
                                    $209 = HEAP32[(33348) >> 2] | 0;
                                    $210 = $33 >>> 3;
                                    $211 = $210 << 1;
                                    $212 = (33368 + ($211 << 2) | 0);
                                    $213 = 1 << $210;
                                    $214 = $8 & $213;
                                    $215 = ($214 | 0) == (0);
                                    if ($215) {
                                        $216 = $8 | $213;
                                        HEAP32[8332] = $216;
                                        $$pre$i = ((($212)) + 8 | 0);
                                        $$0$i = $212; $$pre$phi$iZ2D = $$pre$i;
                                    } else {
                                        $217 = ((($212)) + 8 | 0);
                                        $218 = HEAP32[$217 >> 2] | 0;
                                        $$0$i = $218; $$pre$phi$iZ2D = $217;
                                    }
                                    HEAP32[$$pre$phi$iZ2D >> 2] = $209;
                                    $219 = ((($$0$i)) + 12 | 0);
                                    HEAP32[$219 >> 2] = $209;
                                    $220 = ((($209)) + 8 | 0);
                                    HEAP32[$220 >> 2] = $$0$i;
                                    $221 = ((($209)) + 12 | 0);
                                    HEAP32[$221 >> 2] = $212;
                                }
                                HEAP32[(33336) >> 2] = $$0173$lcssa$i;
                                HEAP32[(33348) >> 2] = $147;
                            }
                            $222 = ((($$0172$lcssa$i)) + 8 | 0);
                            $$0 = $222;
                            STACKTOP = sp; return ($$0 | 0);
                        } else {
                            $$0192 = $6;
                        }
                    }
                } else {
                    $$0192 = $6;
                }
            } else {
                $223 = ($0 >>> 0) > (4294967231);
                if ($223) {
                    $$0192 = -1;
                } else {
                    $224 = (($0) + 11) | 0;
                    $225 = $224 & -8;
                    $226 = HEAP32[(33332) >> 2] | 0;
                    $227 = ($226 | 0) == (0);
                    if ($227) {
                        $$0192 = $225;
                    } else {
                        $228 = (0 - ($225)) | 0;
                        $229 = $224 >>> 8;
                        $230 = ($229 | 0) == (0);
                        if ($230) {
                            $$0336$i = 0;
                        } else {
                            $231 = ($225 >>> 0) > (16777215);
                            if ($231) {
                                $$0336$i = 31;
                            } else {
                                $232 = (($229) + 1048320) | 0;
                                $233 = $232 >>> 16;
                                $234 = $233 & 8;
                                $235 = $229 << $234;
                                $236 = (($235) + 520192) | 0;
                                $237 = $236 >>> 16;
                                $238 = $237 & 4;
                                $239 = $238 | $234;
                                $240 = $235 << $238;
                                $241 = (($240) + 245760) | 0;
                                $242 = $241 >>> 16;
                                $243 = $242 & 2;
                                $244 = $239 | $243;
                                $245 = (14 - ($244)) | 0;
                                $246 = $240 << $243;
                                $247 = $246 >>> 15;
                                $248 = (($245) + ($247)) | 0;
                                $249 = $248 << 1;
                                $250 = (($248) + 7) | 0;
                                $251 = $225 >>> $250;
                                $252 = $251 & 1;
                                $253 = $252 | $249;
                                $$0336$i = $253;
                            }
                        }
                        $254 = (33632 + ($$0336$i << 2) | 0);
                        $255 = HEAP32[$254 >> 2] | 0;
                        $256 = ($255 | 0) == (0 | 0);
                        L74: do {
                            if ($256) {
                                $$2333$i = 0; $$3$i199 = 0; $$3328$i = $228;
                                label = 57;
                            } else {
                                $257 = ($$0336$i | 0) == (31);
                                $258 = $$0336$i >>> 1;
                                $259 = (25 - ($258)) | 0;
                                $260 = $257 ? 0 : $259;
                                $261 = $225 << $260;
                                $$0320$i = 0; $$0325$i = $228; $$0331$i = $255; $$0337$i = $261; $$0340$i = 0;
                                while (1) {
                                    $262 = ((($$0331$i)) + 4 | 0);
                                    $263 = HEAP32[$262 >> 2] | 0;
                                    $264 = $263 & -8;
                                    $265 = (($264) - ($225)) | 0;
                                    $266 = ($265 >>> 0) < ($$0325$i >>> 0);
                                    if ($266) {
                                        $267 = ($265 | 0) == (0);
                                        if ($267) {
                                            $$43298$i = 0; $$43357$i = $$0331$i; $$49$i = $$0331$i;
                                            label = 61;
                                            break L74;
                                        } else {
                                            $$1321$i = $$0331$i; $$1326$i = $265;
                                        }
                                    } else {
                                        $$1321$i = $$0320$i; $$1326$i = $$0325$i;
                                    }
                                    $268 = ((($$0331$i)) + 20 | 0);
                                    $269 = HEAP32[$268 >> 2] | 0;
                                    $270 = $$0337$i >>> 31;
                                    $271 = (((($$0331$i)) + 16 | 0) + ($270 << 2) | 0);
                                    $272 = HEAP32[$271 >> 2] | 0;
                                    $273 = ($269 | 0) == (0 | 0);
                                    $274 = ($269 | 0) == ($272 | 0);
                                    $or$cond1$i198 = $273 | $274;
                                    $$1341$i = $or$cond1$i198 ? $$0340$i : $269;
                                    $275 = ($272 | 0) == (0 | 0);
                                    $not$3$i = $275 ^ 1;
                                    $276 = $not$3$i & 1;
                                    $$0337$$i = $$0337$i << $276;
                                    if ($275) {
                                        $$2333$i = $$1341$i; $$3$i199 = $$1321$i; $$3328$i = $$1326$i;
                                        label = 57;
                                        break;
                                    } else {
                                        $$0320$i = $$1321$i; $$0325$i = $$1326$i; $$0331$i = $272; $$0337$i = $$0337$$i; $$0340$i = $$1341$i;
                                    }
                                }
                            }
                        } while (0);
                        if ((label | 0) == 57) {
                            $277 = ($$2333$i | 0) == (0 | 0);
                            $278 = ($$3$i199 | 0) == (0 | 0);
                            $or$cond$i200 = $277 & $278;
                            if ($or$cond$i200) {
                                $279 = 2 << $$0336$i;
                                $280 = (0 - ($279)) | 0;
                                $281 = $279 | $280;
                                $282 = $226 & $281;
                                $283 = ($282 | 0) == (0);
                                if ($283) {
                                    $$0192 = $225;
                                    break;
                                }
                                $284 = (0 - ($282)) | 0;
                                $285 = $282 & $284;
                                $286 = (($285) + -1) | 0;
                                $287 = $286 >>> 12;
                                $288 = $287 & 16;
                                $289 = $286 >>> $288;
                                $290 = $289 >>> 5;
                                $291 = $290 & 8;
                                $292 = $291 | $288;
                                $293 = $289 >>> $291;
                                $294 = $293 >>> 2;
                                $295 = $294 & 4;
                                $296 = $292 | $295;
                                $297 = $293 >>> $295;
                                $298 = $297 >>> 1;
                                $299 = $298 & 2;
                                $300 = $296 | $299;
                                $301 = $297 >>> $299;
                                $302 = $301 >>> 1;
                                $303 = $302 & 1;
                                $304 = $300 | $303;
                                $305 = $301 >>> $303;
                                $306 = (($304) + ($305)) | 0;
                                $307 = (33632 + ($306 << 2) | 0);
                                $308 = HEAP32[$307 >> 2] | 0;
                                $$4$ph$i = 0; $$4335$ph$i = $308;
                            } else {
                                $$4$ph$i = $$3$i199; $$4335$ph$i = $$2333$i;
                            }
                            $309 = ($$4335$ph$i | 0) == (0 | 0);
                            if ($309) {
                                $$4$lcssa$i = $$4$ph$i; $$4329$lcssa$i = $$3328$i;
                            } else {
                                $$43298$i = $$3328$i; $$43357$i = $$4335$ph$i; $$49$i = $$4$ph$i;
                                label = 61;
                            }
                        }
                        if ((label | 0) == 61) {
                            while (1) {
                                label = 0;
                                $310 = ((($$43357$i)) + 4 | 0);
                                $311 = HEAP32[$310 >> 2] | 0;
                                $312 = $311 & -8;
                                $313 = (($312) - ($225)) | 0;
                                $314 = ($313 >>> 0) < ($$43298$i >>> 0);
                                $$$4329$i = $314 ? $313 : $$43298$i;
                                $$4335$$4$i = $314 ? $$43357$i : $$49$i;
                                $315 = ((($$43357$i)) + 16 | 0);
                                $316 = HEAP32[$315 >> 2] | 0;
                                $317 = ($316 | 0) == (0 | 0);
                                $$sink2$i202 = $317 & 1;
                                $318 = (((($$43357$i)) + 16 | 0) + ($$sink2$i202 << 2) | 0);
                                $319 = HEAP32[$318 >> 2] | 0;
                                $320 = ($319 | 0) == (0 | 0);
                                if ($320) {
                                    $$4$lcssa$i = $$4335$$4$i; $$4329$lcssa$i = $$$4329$i;
                                    break;
                                } else {
                                    $$43298$i = $$$4329$i; $$43357$i = $319; $$49$i = $$4335$$4$i;
                                    label = 61;
                                }
                            }
                        }
                        $321 = ($$4$lcssa$i | 0) == (0 | 0);
                        if ($321) {
                            $$0192 = $225;
                        } else {
                            $322 = HEAP32[(33336) >> 2] | 0;
                            $323 = (($322) - ($225)) | 0;
                            $324 = ($$4329$lcssa$i >>> 0) < ($323 >>> 0);
                            if ($324) {
                                $325 = (($$4$lcssa$i) + ($225) | 0);
                                $326 = ($325 >>> 0) > ($$4$lcssa$i >>> 0);
                                if (!($326)) {
                                    $$0 = 0;
                                    STACKTOP = sp; return ($$0 | 0);
                                }
                                $327 = ((($$4$lcssa$i)) + 24 | 0);
                                $328 = HEAP32[$327 >> 2] | 0;
                                $329 = ((($$4$lcssa$i)) + 12 | 0);
                                $330 = HEAP32[$329 >> 2] | 0;
                                $331 = ($330 | 0) == ($$4$lcssa$i | 0);
                                do {
                                    if ($331) {
                                        $336 = ((($$4$lcssa$i)) + 20 | 0);
                                        $337 = HEAP32[$336 >> 2] | 0;
                                        $338 = ($337 | 0) == (0 | 0);
                                        if ($338) {
                                            $339 = ((($$4$lcssa$i)) + 16 | 0);
                                            $340 = HEAP32[$339 >> 2] | 0;
                                            $341 = ($340 | 0) == (0 | 0);
                                            if ($341) {
                                                $$3349$i = 0;
                                                break;
                                            } else {
                                                $$1347$i = $340; $$1351$i = $339;
                                            }
                                        } else {
                                            $$1347$i = $337; $$1351$i = $336;
                                        }
                                        while (1) {
                                            $342 = ((($$1347$i)) + 20 | 0);
                                            $343 = HEAP32[$342 >> 2] | 0;
                                            $344 = ($343 | 0) == (0 | 0);
                                            if (!($344)) {
                                                $$1347$i = $343; $$1351$i = $342;
                                                continue;
                                            }
                                            $345 = ((($$1347$i)) + 16 | 0);
                                            $346 = HEAP32[$345 >> 2] | 0;
                                            $347 = ($346 | 0) == (0 | 0);
                                            if ($347) {
                                                break;
                                            } else {
                                                $$1347$i = $346; $$1351$i = $345;
                                            }
                                        }
                                        HEAP32[$$1351$i >> 2] = 0;
                                        $$3349$i = $$1347$i;
                                    } else {
                                        $332 = ((($$4$lcssa$i)) + 8 | 0);
                                        $333 = HEAP32[$332 >> 2] | 0;
                                        $334 = ((($333)) + 12 | 0);
                                        HEAP32[$334 >> 2] = $330;
                                        $335 = ((($330)) + 8 | 0);
                                        HEAP32[$335 >> 2] = $333;
                                        $$3349$i = $330;
                                    }
                                } while (0);
                                $348 = ($328 | 0) == (0 | 0);
                                do {
                                    if ($348) {
                                        $431 = $226;
                                    } else {
                                        $349 = ((($$4$lcssa$i)) + 28 | 0);
                                        $350 = HEAP32[$349 >> 2] | 0;
                                        $351 = (33632 + ($350 << 2) | 0);
                                        $352 = HEAP32[$351 >> 2] | 0;
                                        $353 = ($$4$lcssa$i | 0) == ($352 | 0);
                                        if ($353) {
                                            HEAP32[$351 >> 2] = $$3349$i;
                                            $cond$i206 = ($$3349$i | 0) == (0 | 0);
                                            if ($cond$i206) {
                                                $354 = 1 << $350;
                                                $355 = $354 ^ -1;
                                                $356 = $226 & $355;
                                                HEAP32[(33332) >> 2] = $356;
                                                $431 = $356;
                                                break;
                                            }
                                        } else {
                                            $357 = ((($328)) + 16 | 0);
                                            $358 = HEAP32[$357 >> 2] | 0;
                                            $359 = ($358 | 0) != ($$4$lcssa$i | 0);
                                            $$sink3$i = $359 & 1;
                                            $360 = (((($328)) + 16 | 0) + ($$sink3$i << 2) | 0);
                                            HEAP32[$360 >> 2] = $$3349$i;
                                            $361 = ($$3349$i | 0) == (0 | 0);
                                            if ($361) {
                                                $431 = $226;
                                                break;
                                            }
                                        }
                                        $362 = ((($$3349$i)) + 24 | 0);
                                        HEAP32[$362 >> 2] = $328;
                                        $363 = ((($$4$lcssa$i)) + 16 | 0);
                                        $364 = HEAP32[$363 >> 2] | 0;
                                        $365 = ($364 | 0) == (0 | 0);
                                        if (!($365)) {
                                            $366 = ((($$3349$i)) + 16 | 0);
                                            HEAP32[$366 >> 2] = $364;
                                            $367 = ((($364)) + 24 | 0);
                                            HEAP32[$367 >> 2] = $$3349$i;
                                        }
                                        $368 = ((($$4$lcssa$i)) + 20 | 0);
                                        $369 = HEAP32[$368 >> 2] | 0;
                                        $370 = ($369 | 0) == (0 | 0);
                                        if ($370) {
                                            $431 = $226;
                                        } else {
                                            $371 = ((($$3349$i)) + 20 | 0);
                                            HEAP32[$371 >> 2] = $369;
                                            $372 = ((($369)) + 24 | 0);
                                            HEAP32[$372 >> 2] = $$3349$i;
                                            $431 = $226;
                                        }
                                    }
                                } while (0);
                                $373 = ($$4329$lcssa$i >>> 0) < (16);
                                do {
                                    if ($373) {
                                        $374 = (($$4329$lcssa$i) + ($225)) | 0;
                                        $375 = $374 | 3;
                                        $376 = ((($$4$lcssa$i)) + 4 | 0);
                                        HEAP32[$376 >> 2] = $375;
                                        $377 = (($$4$lcssa$i) + ($374) | 0);
                                        $378 = ((($377)) + 4 | 0);
                                        $379 = HEAP32[$378 >> 2] | 0;
                                        $380 = $379 | 1;
                                        HEAP32[$378 >> 2] = $380;
                                    } else {
                                        $381 = $225 | 3;
                                        $382 = ((($$4$lcssa$i)) + 4 | 0);
                                        HEAP32[$382 >> 2] = $381;
                                        $383 = $$4329$lcssa$i | 1;
                                        $384 = ((($325)) + 4 | 0);
                                        HEAP32[$384 >> 2] = $383;
                                        $385 = (($325) + ($$4329$lcssa$i) | 0);
                                        HEAP32[$385 >> 2] = $$4329$lcssa$i;
                                        $386 = $$4329$lcssa$i >>> 3;
                                        $387 = ($$4329$lcssa$i >>> 0) < (256);
                                        if ($387) {
                                            $388 = $386 << 1;
                                            $389 = (33368 + ($388 << 2) | 0);
                                            $390 = HEAP32[8332] | 0;
                                            $391 = 1 << $386;
                                            $392 = $390 & $391;
                                            $393 = ($392 | 0) == (0);
                                            if ($393) {
                                                $394 = $390 | $391;
                                                HEAP32[8332] = $394;
                                                $$pre$i207 = ((($389)) + 8 | 0);
                                                $$0345$i = $389; $$pre$phi$i208Z2D = $$pre$i207;
                                            } else {
                                                $395 = ((($389)) + 8 | 0);
                                                $396 = HEAP32[$395 >> 2] | 0;
                                                $$0345$i = $396; $$pre$phi$i208Z2D = $395;
                                            }
                                            HEAP32[$$pre$phi$i208Z2D >> 2] = $325;
                                            $397 = ((($$0345$i)) + 12 | 0);
                                            HEAP32[$397 >> 2] = $325;
                                            $398 = ((($325)) + 8 | 0);
                                            HEAP32[$398 >> 2] = $$0345$i;
                                            $399 = ((($325)) + 12 | 0);
                                            HEAP32[$399 >> 2] = $389;
                                            break;
                                        }
                                        $400 = $$4329$lcssa$i >>> 8;
                                        $401 = ($400 | 0) == (0);
                                        if ($401) {
                                            $$0339$i = 0;
                                        } else {
                                            $402 = ($$4329$lcssa$i >>> 0) > (16777215);
                                            if ($402) {
                                                $$0339$i = 31;
                                            } else {
                                                $403 = (($400) + 1048320) | 0;
                                                $404 = $403 >>> 16;
                                                $405 = $404 & 8;
                                                $406 = $400 << $405;
                                                $407 = (($406) + 520192) | 0;
                                                $408 = $407 >>> 16;
                                                $409 = $408 & 4;
                                                $410 = $409 | $405;
                                                $411 = $406 << $409;
                                                $412 = (($411) + 245760) | 0;
                                                $413 = $412 >>> 16;
                                                $414 = $413 & 2;
                                                $415 = $410 | $414;
                                                $416 = (14 - ($415)) | 0;
                                                $417 = $411 << $414;
                                                $418 = $417 >>> 15;
                                                $419 = (($416) + ($418)) | 0;
                                                $420 = $419 << 1;
                                                $421 = (($419) + 7) | 0;
                                                $422 = $$4329$lcssa$i >>> $421;
                                                $423 = $422 & 1;
                                                $424 = $423 | $420;
                                                $$0339$i = $424;
                                            }
                                        }
                                        $425 = (33632 + ($$0339$i << 2) | 0);
                                        $426 = ((($325)) + 28 | 0);
                                        HEAP32[$426 >> 2] = $$0339$i;
                                        $427 = ((($325)) + 16 | 0);
                                        $428 = ((($427)) + 4 | 0);
                                        HEAP32[$428 >> 2] = 0;
                                        HEAP32[$427 >> 2] = 0;
                                        $429 = 1 << $$0339$i;
                                        $430 = $431 & $429;
                                        $432 = ($430 | 0) == (0);
                                        if ($432) {
                                            $433 = $431 | $429;
                                            HEAP32[(33332) >> 2] = $433;
                                            HEAP32[$425 >> 2] = $325;
                                            $434 = ((($325)) + 24 | 0);
                                            HEAP32[$434 >> 2] = $425;
                                            $435 = ((($325)) + 12 | 0);
                                            HEAP32[$435 >> 2] = $325;
                                            $436 = ((($325)) + 8 | 0);
                                            HEAP32[$436 >> 2] = $325;
                                            break;
                                        }
                                        $437 = HEAP32[$425 >> 2] | 0;
                                        $438 = ($$0339$i | 0) == (31);
                                        $439 = $$0339$i >>> 1;
                                        $440 = (25 - ($439)) | 0;
                                        $441 = $438 ? 0 : $440;
                                        $442 = $$4329$lcssa$i << $441;
                                        $$0322$i = $442; $$0323$i = $437;
                                        while (1) {
                                            $443 = ((($$0323$i)) + 4 | 0);
                                            $444 = HEAP32[$443 >> 2] | 0;
                                            $445 = $444 & -8;
                                            $446 = ($445 | 0) == ($$4329$lcssa$i | 0);
                                            if ($446) {
                                                label = 97;
                                                break;
                                            }
                                            $447 = $$0322$i >>> 31;
                                            $448 = (((($$0323$i)) + 16 | 0) + ($447 << 2) | 0);
                                            $449 = $$0322$i << 1;
                                            $450 = HEAP32[$448 >> 2] | 0;
                                            $451 = ($450 | 0) == (0 | 0);
                                            if ($451) {
                                                label = 96;
                                                break;
                                            } else {
                                                $$0322$i = $449; $$0323$i = $450;
                                            }
                                        }
                                        if ((label | 0) == 96) {
                                            HEAP32[$448 >> 2] = $325;
                                            $452 = ((($325)) + 24 | 0);
                                            HEAP32[$452 >> 2] = $$0323$i;
                                            $453 = ((($325)) + 12 | 0);
                                            HEAP32[$453 >> 2] = $325;
                                            $454 = ((($325)) + 8 | 0);
                                            HEAP32[$454 >> 2] = $325;
                                            break;
                                        }
                                        else if ((label | 0) == 97) {
                                            $455 = ((($$0323$i)) + 8 | 0);
                                            $456 = HEAP32[$455 >> 2] | 0;
                                            $457 = ((($456)) + 12 | 0);
                                            HEAP32[$457 >> 2] = $325;
                                            HEAP32[$455 >> 2] = $325;
                                            $458 = ((($325)) + 8 | 0);
                                            HEAP32[$458 >> 2] = $456;
                                            $459 = ((($325)) + 12 | 0);
                                            HEAP32[$459 >> 2] = $$0323$i;
                                            $460 = ((($325)) + 24 | 0);
                                            HEAP32[$460 >> 2] = 0;
                                            break;
                                        }
                                    }
                                } while (0);
                                $461 = ((($$4$lcssa$i)) + 8 | 0);
                                $$0 = $461;
                                STACKTOP = sp; return ($$0 | 0);
                            } else {
                                $$0192 = $225;
                            }
                        }
                    }
                }
            }
        } while (0);
        $462 = HEAP32[(33336) >> 2] | 0;
        $463 = ($462 >>> 0) < ($$0192 >>> 0);
        if (!($463)) {
            $464 = (($462) - ($$0192)) | 0;
            $465 = HEAP32[(33348) >> 2] | 0;
            $466 = ($464 >>> 0) > (15);
            if ($466) {
                $467 = (($465) + ($$0192) | 0);
                HEAP32[(33348) >> 2] = $467;
                HEAP32[(33336) >> 2] = $464;
                $468 = $464 | 1;
                $469 = ((($467)) + 4 | 0);
                HEAP32[$469 >> 2] = $468;
                $470 = (($465) + ($462) | 0);
                HEAP32[$470 >> 2] = $464;
                $471 = $$0192 | 3;
                $472 = ((($465)) + 4 | 0);
                HEAP32[$472 >> 2] = $471;
            } else {
                HEAP32[(33336) >> 2] = 0;
                HEAP32[(33348) >> 2] = 0;
                $473 = $462 | 3;
                $474 = ((($465)) + 4 | 0);
                HEAP32[$474 >> 2] = $473;
                $475 = (($465) + ($462) | 0);
                $476 = ((($475)) + 4 | 0);
                $477 = HEAP32[$476 >> 2] | 0;
                $478 = $477 | 1;
                HEAP32[$476 >> 2] = $478;
            }
            $479 = ((($465)) + 8 | 0);
            $$0 = $479;
            STACKTOP = sp; return ($$0 | 0);
        }
        $480 = HEAP32[(33340) >> 2] | 0;
        $481 = ($480 >>> 0) > ($$0192 >>> 0);
        if ($481) {
            $482 = (($480) - ($$0192)) | 0;
            HEAP32[(33340) >> 2] = $482;
            $483 = HEAP32[(33352) >> 2] | 0;
            $484 = (($483) + ($$0192) | 0);
            HEAP32[(33352) >> 2] = $484;
            $485 = $482 | 1;
            $486 = ((($484)) + 4 | 0);
            HEAP32[$486 >> 2] = $485;
            $487 = $$0192 | 3;
            $488 = ((($483)) + 4 | 0);
            HEAP32[$488 >> 2] = $487;
            $489 = ((($483)) + 8 | 0);
            $$0 = $489;
            STACKTOP = sp; return ($$0 | 0);
        }
        $490 = HEAP32[8450] | 0;
        $491 = ($490 | 0) == (0);
        if ($491) {
            HEAP32[(33808) >> 2] = 4096;
            HEAP32[(33804) >> 2] = 4096;
            HEAP32[(33812) >> 2] = -1;
            HEAP32[(33816) >> 2] = -1;
            HEAP32[(33820) >> 2] = 0;
            HEAP32[(33772) >> 2] = 0;
            $492 = $1;
            $493 = $492 & -16;
            $494 = $493 ^ 1431655768;
            HEAP32[8450] = $494;
            $498 = 4096;
        } else {
            $$pre$i195 = HEAP32[(33808) >> 2] | 0;
            $498 = $$pre$i195;
        }
        $495 = (($$0192) + 48) | 0;
        $496 = (($$0192) + 47) | 0;
        $497 = (($498) + ($496)) | 0;
        $499 = (0 - ($498)) | 0;
        $500 = $497 & $499;
        $501 = ($500 >>> 0) > ($$0192 >>> 0);
        if (!($501)) {
            $$0 = 0;
            STACKTOP = sp; return ($$0 | 0);
        }
        $502 = HEAP32[(33768) >> 2] | 0;
        $503 = ($502 | 0) == (0);
        if (!($503)) {
            $504 = HEAP32[(33760) >> 2] | 0;
            $505 = (($504) + ($500)) | 0;
            $506 = ($505 >>> 0) <= ($504 >>> 0);
            $507 = ($505 >>> 0) > ($502 >>> 0);
            $or$cond1$i = $506 | $507;
            if ($or$cond1$i) {
                $$0 = 0;
                STACKTOP = sp; return ($$0 | 0);
            }
        }
        $508 = HEAP32[(33772) >> 2] | 0;
        $509 = $508 & 4;
        $510 = ($509 | 0) == (0);
        L167: do {
            if ($510) {
                $511 = HEAP32[(33352) >> 2] | 0;
                $512 = ($511 | 0) == (0 | 0);
                L169: do {
                    if ($512) {
                        label = 118;
                    } else {
                        $$0$i20$i = (33776);
                        while (1) {
                            $513 = HEAP32[$$0$i20$i >> 2] | 0;
                            $514 = ($513 >>> 0) > ($511 >>> 0);
                            if (!($514)) {
                                $515 = ((($$0$i20$i)) + 4 | 0);
                                $516 = HEAP32[$515 >> 2] | 0;
                                $517 = (($513) + ($516) | 0);
                                $518 = ($517 >>> 0) > ($511 >>> 0);
                                if ($518) {
                                    break;
                                }
                            }
                            $519 = ((($$0$i20$i)) + 8 | 0);
                            $520 = HEAP32[$519 >> 2] | 0;
                            $521 = ($520 | 0) == (0 | 0);
                            if ($521) {
                                label = 118;
                                break L169;
                            } else {
                                $$0$i20$i = $520;
                            }
                        }
                        $544 = (($497) - ($480)) | 0;
                        $545 = $544 & $499;
                        $546 = ($545 >>> 0) < (2147483647);
                        if ($546) {
                            $547 = (_sbrk(($545 | 0)) | 0);
                            $548 = HEAP32[$$0$i20$i >> 2] | 0;
                            $549 = HEAP32[$515 >> 2] | 0;
                            $550 = (($548) + ($549) | 0);
                            $551 = ($547 | 0) == ($550 | 0);
                            if ($551) {
                                $552 = ($547 | 0) == ((-1) | 0);
                                if ($552) {
                                    $$2234243136$i = $545;
                                } else {
                                    $$723947$i = $545; $$748$i = $547;
                                    label = 135;
                                    break L167;
                                }
                            } else {
                                $$2247$ph$i = $547; $$2253$ph$i = $545;
                                label = 126;
                            }
                        } else {
                            $$2234243136$i = 0;
                        }
                    }
                } while (0);
                do {
                    if ((label | 0) == 118) {
                        $522 = (_sbrk(0) | 0);
                        $523 = ($522 | 0) == ((-1) | 0);
                        if ($523) {
                            $$2234243136$i = 0;
                        } else {
                            $524 = $522;
                            $525 = HEAP32[(33804) >> 2] | 0;
                            $526 = (($525) + -1) | 0;
                            $527 = $526 & $524;
                            $528 = ($527 | 0) == (0);
                            $529 = (($526) + ($524)) | 0;
                            $530 = (0 - ($525)) | 0;
                            $531 = $529 & $530;
                            $532 = (($531) - ($524)) | 0;
                            $533 = $528 ? 0 : $532;
                            $$$i = (($533) + ($500)) | 0;
                            $534 = HEAP32[(33760) >> 2] | 0;
                            $535 = (($$$i) + ($534)) | 0;
                            $536 = ($$$i >>> 0) > ($$0192 >>> 0);
                            $537 = ($$$i >>> 0) < (2147483647);
                            $or$cond$i = $536 & $537;
                            if ($or$cond$i) {
                                $538 = HEAP32[(33768) >> 2] | 0;
                                $539 = ($538 | 0) == (0);
                                if (!($539)) {
                                    $540 = ($535 >>> 0) <= ($534 >>> 0);
                                    $541 = ($535 >>> 0) > ($538 >>> 0);
                                    $or$cond2$i = $540 | $541;
                                    if ($or$cond2$i) {
                                        $$2234243136$i = 0;
                                        break;
                                    }
                                }
                                $542 = (_sbrk(($$$i | 0)) | 0);
                                $543 = ($542 | 0) == ($522 | 0);
                                if ($543) {
                                    $$723947$i = $$$i; $$748$i = $522;
                                    label = 135;
                                    break L167;
                                } else {
                                    $$2247$ph$i = $542; $$2253$ph$i = $$$i;
                                    label = 126;
                                }
                            } else {
                                $$2234243136$i = 0;
                            }
                        }
                    }
                } while (0);
                do {
                    if ((label | 0) == 126) {
                        $553 = (0 - ($$2253$ph$i)) | 0;
                        $554 = ($$2247$ph$i | 0) != ((-1) | 0);
                        $555 = ($$2253$ph$i >>> 0) < (2147483647);
                        $or$cond7$i = $555 & $554;
                        $556 = ($495 >>> 0) > ($$2253$ph$i >>> 0);
                        $or$cond10$i = $556 & $or$cond7$i;
                        if (!($or$cond10$i)) {
                            $566 = ($$2247$ph$i | 0) == ((-1) | 0);
                            if ($566) {
                                $$2234243136$i = 0;
                                break;
                            } else {
                                $$723947$i = $$2253$ph$i; $$748$i = $$2247$ph$i;
                                label = 135;
                                break L167;
                            }
                        }
                        $557 = HEAP32[(33808) >> 2] | 0;
                        $558 = (($496) - ($$2253$ph$i)) | 0;
                        $559 = (($558) + ($557)) | 0;
                        $560 = (0 - ($557)) | 0;
                        $561 = $559 & $560;
                        $562 = ($561 >>> 0) < (2147483647);
                        if (!($562)) {
                            $$723947$i = $$2253$ph$i; $$748$i = $$2247$ph$i;
                            label = 135;
                            break L167;
                        }
                        $563 = (_sbrk(($561 | 0)) | 0);
                        $564 = ($563 | 0) == ((-1) | 0);
                        if ($564) {
                            (_sbrk(($553 | 0)) | 0);
                            $$2234243136$i = 0;
                            break;
                        } else {
                            $565 = (($561) + ($$2253$ph$i)) | 0;
                            $$723947$i = $565; $$748$i = $$2247$ph$i;
                            label = 135;
                            break L167;
                        }
                    }
                } while (0);
                $567 = HEAP32[(33772) >> 2] | 0;
                $568 = $567 | 4;
                HEAP32[(33772) >> 2] = $568;
                $$4236$i = $$2234243136$i;
                label = 133;
            } else {
                $$4236$i = 0;
                label = 133;
            }
        } while (0);
        if ((label | 0) == 133) {
            $569 = ($500 >>> 0) < (2147483647);
            if ($569) {
                $570 = (_sbrk(($500 | 0)) | 0);
                $571 = (_sbrk(0) | 0);
                $572 = ($570 | 0) != ((-1) | 0);
                $573 = ($571 | 0) != ((-1) | 0);
                $or$cond5$i = $572 & $573;
                $574 = ($570 >>> 0) < ($571 >>> 0);
                $or$cond11$i = $574 & $or$cond5$i;
                $575 = $571;
                $576 = $570;
                $577 = (($575) - ($576)) | 0;
                $578 = (($$0192) + 40) | 0;
                $579 = ($577 >>> 0) > ($578 >>> 0);
                $$$4236$i = $579 ? $577 : $$4236$i;
                $or$cond11$not$i = $or$cond11$i ^ 1;
                $580 = ($570 | 0) == ((-1) | 0);
                $not$$i = $579 ^ 1;
                $581 = $580 | $not$$i;
                $or$cond49$i = $581 | $or$cond11$not$i;
                if (!($or$cond49$i)) {
                    $$723947$i = $$$4236$i; $$748$i = $570;
                    label = 135;
                }
            }
        }
        if ((label | 0) == 135) {
            $582 = HEAP32[(33760) >> 2] | 0;
            $583 = (($582) + ($$723947$i)) | 0;
            HEAP32[(33760) >> 2] = $583;
            $584 = HEAP32[(33764) >> 2] | 0;
            $585 = ($583 >>> 0) > ($584 >>> 0);
            if ($585) {
                HEAP32[(33764) >> 2] = $583;
            }
            $586 = HEAP32[(33352) >> 2] | 0;
            $587 = ($586 | 0) == (0 | 0);
            do {
                if ($587) {
                    $588 = HEAP32[(33344) >> 2] | 0;
                    $589 = ($588 | 0) == (0 | 0);
                    $590 = ($$748$i >>> 0) < ($588 >>> 0);
                    $or$cond12$i = $589 | $590;
                    if ($or$cond12$i) {
                        HEAP32[(33344) >> 2] = $$748$i;
                    }
                    HEAP32[(33776) >> 2] = $$748$i;
                    HEAP32[(33780) >> 2] = $$723947$i;
                    HEAP32[(33788) >> 2] = 0;
                    $591 = HEAP32[8450] | 0;
                    HEAP32[(33364) >> 2] = $591;
                    HEAP32[(33360) >> 2] = -1;
                    HEAP32[(33380) >> 2] = (33368);
                    HEAP32[(33376) >> 2] = (33368);
                    HEAP32[(33388) >> 2] = (33376);
                    HEAP32[(33384) >> 2] = (33376);
                    HEAP32[(33396) >> 2] = (33384);
                    HEAP32[(33392) >> 2] = (33384);
                    HEAP32[(33404) >> 2] = (33392);
                    HEAP32[(33400) >> 2] = (33392);
                    HEAP32[(33412) >> 2] = (33400);
                    HEAP32[(33408) >> 2] = (33400);
                    HEAP32[(33420) >> 2] = (33408);
                    HEAP32[(33416) >> 2] = (33408);
                    HEAP32[(33428) >> 2] = (33416);
                    HEAP32[(33424) >> 2] = (33416);
                    HEAP32[(33436) >> 2] = (33424);
                    HEAP32[(33432) >> 2] = (33424);
                    HEAP32[(33444) >> 2] = (33432);
                    HEAP32[(33440) >> 2] = (33432);
                    HEAP32[(33452) >> 2] = (33440);
                    HEAP32[(33448) >> 2] = (33440);
                    HEAP32[(33460) >> 2] = (33448);
                    HEAP32[(33456) >> 2] = (33448);
                    HEAP32[(33468) >> 2] = (33456);
                    HEAP32[(33464) >> 2] = (33456);
                    HEAP32[(33476) >> 2] = (33464);
                    HEAP32[(33472) >> 2] = (33464);
                    HEAP32[(33484) >> 2] = (33472);
                    HEAP32[(33480) >> 2] = (33472);
                    HEAP32[(33492) >> 2] = (33480);
                    HEAP32[(33488) >> 2] = (33480);
                    HEAP32[(33500) >> 2] = (33488);
                    HEAP32[(33496) >> 2] = (33488);
                    HEAP32[(33508) >> 2] = (33496);
                    HEAP32[(33504) >> 2] = (33496);
                    HEAP32[(33516) >> 2] = (33504);
                    HEAP32[(33512) >> 2] = (33504);
                    HEAP32[(33524) >> 2] = (33512);
                    HEAP32[(33520) >> 2] = (33512);
                    HEAP32[(33532) >> 2] = (33520);
                    HEAP32[(33528) >> 2] = (33520);
                    HEAP32[(33540) >> 2] = (33528);
                    HEAP32[(33536) >> 2] = (33528);
                    HEAP32[(33548) >> 2] = (33536);
                    HEAP32[(33544) >> 2] = (33536);
                    HEAP32[(33556) >> 2] = (33544);
                    HEAP32[(33552) >> 2] = (33544);
                    HEAP32[(33564) >> 2] = (33552);
                    HEAP32[(33560) >> 2] = (33552);
                    HEAP32[(33572) >> 2] = (33560);
                    HEAP32[(33568) >> 2] = (33560);
                    HEAP32[(33580) >> 2] = (33568);
                    HEAP32[(33576) >> 2] = (33568);
                    HEAP32[(33588) >> 2] = (33576);
                    HEAP32[(33584) >> 2] = (33576);
                    HEAP32[(33596) >> 2] = (33584);
                    HEAP32[(33592) >> 2] = (33584);
                    HEAP32[(33604) >> 2] = (33592);
                    HEAP32[(33600) >> 2] = (33592);
                    HEAP32[(33612) >> 2] = (33600);
                    HEAP32[(33608) >> 2] = (33600);
                    HEAP32[(33620) >> 2] = (33608);
                    HEAP32[(33616) >> 2] = (33608);
                    HEAP32[(33628) >> 2] = (33616);
                    HEAP32[(33624) >> 2] = (33616);
                    $592 = (($$723947$i) + -40) | 0;
                    $593 = ((($$748$i)) + 8 | 0);
                    $594 = $593;
                    $595 = $594 & 7;
                    $596 = ($595 | 0) == (0);
                    $597 = (0 - ($594)) | 0;
                    $598 = $597 & 7;
                    $599 = $596 ? 0 : $598;
                    $600 = (($$748$i) + ($599) | 0);
                    $601 = (($592) - ($599)) | 0;
                    HEAP32[(33352) >> 2] = $600;
                    HEAP32[(33340) >> 2] = $601;
                    $602 = $601 | 1;
                    $603 = ((($600)) + 4 | 0);
                    HEAP32[$603 >> 2] = $602;
                    $604 = (($$748$i) + ($592) | 0);
                    $605 = ((($604)) + 4 | 0);
                    HEAP32[$605 >> 2] = 40;
                    $606 = HEAP32[(33816) >> 2] | 0;
                    HEAP32[(33356) >> 2] = $606;
                } else {
                    $$024367$i = (33776);
                    while (1) {
                        $607 = HEAP32[$$024367$i >> 2] | 0;
                        $608 = ((($$024367$i)) + 4 | 0);
                        $609 = HEAP32[$608 >> 2] | 0;
                        $610 = (($607) + ($609) | 0);
                        $611 = ($$748$i | 0) == ($610 | 0);
                        if ($611) {
                            label = 143;
                            break;
                        }
                        $612 = ((($$024367$i)) + 8 | 0);
                        $613 = HEAP32[$612 >> 2] | 0;
                        $614 = ($613 | 0) == (0 | 0);
                        if ($614) {
                            break;
                        } else {
                            $$024367$i = $613;
                        }
                    }
                    if ((label | 0) == 143) {
                        $615 = ((($$024367$i)) + 12 | 0);
                        $616 = HEAP32[$615 >> 2] | 0;
                        $617 = $616 & 8;
                        $618 = ($617 | 0) == (0);
                        if ($618) {
                            $619 = ($607 >>> 0) <= ($586 >>> 0);
                            $620 = ($$748$i >>> 0) > ($586 >>> 0);
                            $or$cond50$i = $620 & $619;
                            if ($or$cond50$i) {
                                $621 = (($609) + ($$723947$i)) | 0;
                                HEAP32[$608 >> 2] = $621;
                                $622 = HEAP32[(33340) >> 2] | 0;
                                $623 = (($622) + ($$723947$i)) | 0;
                                $624 = ((($586)) + 8 | 0);
                                $625 = $624;
                                $626 = $625 & 7;
                                $627 = ($626 | 0) == (0);
                                $628 = (0 - ($625)) | 0;
                                $629 = $628 & 7;
                                $630 = $627 ? 0 : $629;
                                $631 = (($586) + ($630) | 0);
                                $632 = (($623) - ($630)) | 0;
                                HEAP32[(33352) >> 2] = $631;
                                HEAP32[(33340) >> 2] = $632;
                                $633 = $632 | 1;
                                $634 = ((($631)) + 4 | 0);
                                HEAP32[$634 >> 2] = $633;
                                $635 = (($586) + ($623) | 0);
                                $636 = ((($635)) + 4 | 0);
                                HEAP32[$636 >> 2] = 40;
                                $637 = HEAP32[(33816) >> 2] | 0;
                                HEAP32[(33356) >> 2] = $637;
                                break;
                            }
                        }
                    }
                    $638 = HEAP32[(33344) >> 2] | 0;
                    $639 = ($$748$i >>> 0) < ($638 >>> 0);
                    if ($639) {
                        HEAP32[(33344) >> 2] = $$748$i;
                    }
                    $640 = (($$748$i) + ($$723947$i) | 0);
                    $$124466$i = (33776);
                    while (1) {
                        $641 = HEAP32[$$124466$i >> 2] | 0;
                        $642 = ($641 | 0) == ($640 | 0);
                        if ($642) {
                            label = 151;
                            break;
                        }
                        $643 = ((($$124466$i)) + 8 | 0);
                        $644 = HEAP32[$643 >> 2] | 0;
                        $645 = ($644 | 0) == (0 | 0);
                        if ($645) {
                            $$0$i$i$i = (33776);
                            break;
                        } else {
                            $$124466$i = $644;
                        }
                    }
                    if ((label | 0) == 151) {
                        $646 = ((($$124466$i)) + 12 | 0);
                        $647 = HEAP32[$646 >> 2] | 0;
                        $648 = $647 & 8;
                        $649 = ($648 | 0) == (0);
                        if ($649) {
                            HEAP32[$$124466$i >> 2] = $$748$i;
                            $650 = ((($$124466$i)) + 4 | 0);
                            $651 = HEAP32[$650 >> 2] | 0;
                            $652 = (($651) + ($$723947$i)) | 0;
                            HEAP32[$650 >> 2] = $652;
                            $653 = ((($$748$i)) + 8 | 0);
                            $654 = $653;
                            $655 = $654 & 7;
                            $656 = ($655 | 0) == (0);
                            $657 = (0 - ($654)) | 0;
                            $658 = $657 & 7;
                            $659 = $656 ? 0 : $658;
                            $660 = (($$748$i) + ($659) | 0);
                            $661 = ((($640)) + 8 | 0);
                            $662 = $661;
                            $663 = $662 & 7;
                            $664 = ($663 | 0) == (0);
                            $665 = (0 - ($662)) | 0;
                            $666 = $665 & 7;
                            $667 = $664 ? 0 : $666;
                            $668 = (($640) + ($667) | 0);
                            $669 = $668;
                            $670 = $660;
                            $671 = (($669) - ($670)) | 0;
                            $672 = (($660) + ($$0192) | 0);
                            $673 = (($671) - ($$0192)) | 0;
                            $674 = $$0192 | 3;
                            $675 = ((($660)) + 4 | 0);
                            HEAP32[$675 >> 2] = $674;
                            $676 = ($586 | 0) == ($668 | 0);
                            do {
                                if ($676) {
                                    $677 = HEAP32[(33340) >> 2] | 0;
                                    $678 = (($677) + ($673)) | 0;
                                    HEAP32[(33340) >> 2] = $678;
                                    HEAP32[(33352) >> 2] = $672;
                                    $679 = $678 | 1;
                                    $680 = ((($672)) + 4 | 0);
                                    HEAP32[$680 >> 2] = $679;
                                } else {
                                    $681 = HEAP32[(33348) >> 2] | 0;
                                    $682 = ($681 | 0) == ($668 | 0);
                                    if ($682) {
                                        $683 = HEAP32[(33336) >> 2] | 0;
                                        $684 = (($683) + ($673)) | 0;
                                        HEAP32[(33336) >> 2] = $684;
                                        HEAP32[(33348) >> 2] = $672;
                                        $685 = $684 | 1;
                                        $686 = ((($672)) + 4 | 0);
                                        HEAP32[$686 >> 2] = $685;
                                        $687 = (($672) + ($684) | 0);
                                        HEAP32[$687 >> 2] = $684;
                                        break;
                                    }
                                    $688 = ((($668)) + 4 | 0);
                                    $689 = HEAP32[$688 >> 2] | 0;
                                    $690 = $689 & 3;
                                    $691 = ($690 | 0) == (1);
                                    if ($691) {
                                        $692 = $689 & -8;
                                        $693 = $689 >>> 3;
                                        $694 = ($689 >>> 0) < (256);
                                        L234: do {
                                            if ($694) {
                                                $695 = ((($668)) + 8 | 0);
                                                $696 = HEAP32[$695 >> 2] | 0;
                                                $697 = ((($668)) + 12 | 0);
                                                $698 = HEAP32[$697 >> 2] | 0;
                                                $699 = ($698 | 0) == ($696 | 0);
                                                if ($699) {
                                                    $700 = 1 << $693;
                                                    $701 = $700 ^ -1;
                                                    $702 = HEAP32[8332] | 0;
                                                    $703 = $702 & $701;
                                                    HEAP32[8332] = $703;
                                                    break;
                                                } else {
                                                    $704 = ((($696)) + 12 | 0);
                                                    HEAP32[$704 >> 2] = $698;
                                                    $705 = ((($698)) + 8 | 0);
                                                    HEAP32[$705 >> 2] = $696;
                                                    break;
                                                }
                                            } else {
                                                $706 = ((($668)) + 24 | 0);
                                                $707 = HEAP32[$706 >> 2] | 0;
                                                $708 = ((($668)) + 12 | 0);
                                                $709 = HEAP32[$708 >> 2] | 0;
                                                $710 = ($709 | 0) == ($668 | 0);
                                                do {
                                                    if ($710) {
                                                        $715 = ((($668)) + 16 | 0);
                                                        $716 = ((($715)) + 4 | 0);
                                                        $717 = HEAP32[$716 >> 2] | 0;
                                                        $718 = ($717 | 0) == (0 | 0);
                                                        if ($718) {
                                                            $719 = HEAP32[$715 >> 2] | 0;
                                                            $720 = ($719 | 0) == (0 | 0);
                                                            if ($720) {
                                                                $$3$i$i = 0;
                                                                break;
                                                            } else {
                                                                $$1264$i$i = $719; $$1266$i$i = $715;
                                                            }
                                                        } else {
                                                            $$1264$i$i = $717; $$1266$i$i = $716;
                                                        }
                                                        while (1) {
                                                            $721 = ((($$1264$i$i)) + 20 | 0);
                                                            $722 = HEAP32[$721 >> 2] | 0;
                                                            $723 = ($722 | 0) == (0 | 0);
                                                            if (!($723)) {
                                                                $$1264$i$i = $722; $$1266$i$i = $721;
                                                                continue;
                                                            }
                                                            $724 = ((($$1264$i$i)) + 16 | 0);
                                                            $725 = HEAP32[$724 >> 2] | 0;
                                                            $726 = ($725 | 0) == (0 | 0);
                                                            if ($726) {
                                                                break;
                                                            } else {
                                                                $$1264$i$i = $725; $$1266$i$i = $724;
                                                            }
                                                        }
                                                        HEAP32[$$1266$i$i >> 2] = 0;
                                                        $$3$i$i = $$1264$i$i;
                                                    } else {
                                                        $711 = ((($668)) + 8 | 0);
                                                        $712 = HEAP32[$711 >> 2] | 0;
                                                        $713 = ((($712)) + 12 | 0);
                                                        HEAP32[$713 >> 2] = $709;
                                                        $714 = ((($709)) + 8 | 0);
                                                        HEAP32[$714 >> 2] = $712;
                                                        $$3$i$i = $709;
                                                    }
                                                } while (0);
                                                $727 = ($707 | 0) == (0 | 0);
                                                if ($727) {
                                                    break;
                                                }
                                                $728 = ((($668)) + 28 | 0);
                                                $729 = HEAP32[$728 >> 2] | 0;
                                                $730 = (33632 + ($729 << 2) | 0);
                                                $731 = HEAP32[$730 >> 2] | 0;
                                                $732 = ($731 | 0) == ($668 | 0);
                                                do {
                                                    if ($732) {
                                                        HEAP32[$730 >> 2] = $$3$i$i;
                                                        $cond$i$i = ($$3$i$i | 0) == (0 | 0);
                                                        if (!($cond$i$i)) {
                                                            break;
                                                        }
                                                        $733 = 1 << $729;
                                                        $734 = $733 ^ -1;
                                                        $735 = HEAP32[(33332) >> 2] | 0;
                                                        $736 = $735 & $734;
                                                        HEAP32[(33332) >> 2] = $736;
                                                        break L234;
                                                    } else {
                                                        $737 = ((($707)) + 16 | 0);
                                                        $738 = HEAP32[$737 >> 2] | 0;
                                                        $739 = ($738 | 0) != ($668 | 0);
                                                        $$sink1$i$i = $739 & 1;
                                                        $740 = (((($707)) + 16 | 0) + ($$sink1$i$i << 2) | 0);
                                                        HEAP32[$740 >> 2] = $$3$i$i;
                                                        $741 = ($$3$i$i | 0) == (0 | 0);
                                                        if ($741) {
                                                            break L234;
                                                        }
                                                    }
                                                } while (0);
                                                $742 = ((($$3$i$i)) + 24 | 0);
                                                HEAP32[$742 >> 2] = $707;
                                                $743 = ((($668)) + 16 | 0);
                                                $744 = HEAP32[$743 >> 2] | 0;
                                                $745 = ($744 | 0) == (0 | 0);
                                                if (!($745)) {
                                                    $746 = ((($$3$i$i)) + 16 | 0);
                                                    HEAP32[$746 >> 2] = $744;
                                                    $747 = ((($744)) + 24 | 0);
                                                    HEAP32[$747 >> 2] = $$3$i$i;
                                                }
                                                $748 = ((($743)) + 4 | 0);
                                                $749 = HEAP32[$748 >> 2] | 0;
                                                $750 = ($749 | 0) == (0 | 0);
                                                if ($750) {
                                                    break;
                                                }
                                                $751 = ((($$3$i$i)) + 20 | 0);
                                                HEAP32[$751 >> 2] = $749;
                                                $752 = ((($749)) + 24 | 0);
                                                HEAP32[$752 >> 2] = $$3$i$i;
                                            }
                                        } while (0);
                                        $753 = (($668) + ($692) | 0);
                                        $754 = (($692) + ($673)) | 0;
                                        $$0$i$i = $753; $$0260$i$i = $754;
                                    } else {
                                        $$0$i$i = $668; $$0260$i$i = $673;
                                    }
                                    $755 = ((($$0$i$i)) + 4 | 0);
                                    $756 = HEAP32[$755 >> 2] | 0;
                                    $757 = $756 & -2;
                                    HEAP32[$755 >> 2] = $757;
                                    $758 = $$0260$i$i | 1;
                                    $759 = ((($672)) + 4 | 0);
                                    HEAP32[$759 >> 2] = $758;
                                    $760 = (($672) + ($$0260$i$i) | 0);
                                    HEAP32[$760 >> 2] = $$0260$i$i;
                                    $761 = $$0260$i$i >>> 3;
                                    $762 = ($$0260$i$i >>> 0) < (256);
                                    if ($762) {
                                        $763 = $761 << 1;
                                        $764 = (33368 + ($763 << 2) | 0);
                                        $765 = HEAP32[8332] | 0;
                                        $766 = 1 << $761;
                                        $767 = $765 & $766;
                                        $768 = ($767 | 0) == (0);
                                        if ($768) {
                                            $769 = $765 | $766;
                                            HEAP32[8332] = $769;
                                            $$pre$i17$i = ((($764)) + 8 | 0);
                                            $$0268$i$i = $764; $$pre$phi$i18$iZ2D = $$pre$i17$i;
                                        } else {
                                            $770 = ((($764)) + 8 | 0);
                                            $771 = HEAP32[$770 >> 2] | 0;
                                            $$0268$i$i = $771; $$pre$phi$i18$iZ2D = $770;
                                        }
                                        HEAP32[$$pre$phi$i18$iZ2D >> 2] = $672;
                                        $772 = ((($$0268$i$i)) + 12 | 0);
                                        HEAP32[$772 >> 2] = $672;
                                        $773 = ((($672)) + 8 | 0);
                                        HEAP32[$773 >> 2] = $$0268$i$i;
                                        $774 = ((($672)) + 12 | 0);
                                        HEAP32[$774 >> 2] = $764;
                                        break;
                                    }
                                    $775 = $$0260$i$i >>> 8;
                                    $776 = ($775 | 0) == (0);
                                    do {
                                        if ($776) {
                                            $$0269$i$i = 0;
                                        } else {
                                            $777 = ($$0260$i$i >>> 0) > (16777215);
                                            if ($777) {
                                                $$0269$i$i = 31;
                                                break;
                                            }
                                            $778 = (($775) + 1048320) | 0;
                                            $779 = $778 >>> 16;
                                            $780 = $779 & 8;
                                            $781 = $775 << $780;
                                            $782 = (($781) + 520192) | 0;
                                            $783 = $782 >>> 16;
                                            $784 = $783 & 4;
                                            $785 = $784 | $780;
                                            $786 = $781 << $784;
                                            $787 = (($786) + 245760) | 0;
                                            $788 = $787 >>> 16;
                                            $789 = $788 & 2;
                                            $790 = $785 | $789;
                                            $791 = (14 - ($790)) | 0;
                                            $792 = $786 << $789;
                                            $793 = $792 >>> 15;
                                            $794 = (($791) + ($793)) | 0;
                                            $795 = $794 << 1;
                                            $796 = (($794) + 7) | 0;
                                            $797 = $$0260$i$i >>> $796;
                                            $798 = $797 & 1;
                                            $799 = $798 | $795;
                                            $$0269$i$i = $799;
                                        }
                                    } while (0);
                                    $800 = (33632 + ($$0269$i$i << 2) | 0);
                                    $801 = ((($672)) + 28 | 0);
                                    HEAP32[$801 >> 2] = $$0269$i$i;
                                    $802 = ((($672)) + 16 | 0);
                                    $803 = ((($802)) + 4 | 0);
                                    HEAP32[$803 >> 2] = 0;
                                    HEAP32[$802 >> 2] = 0;
                                    $804 = HEAP32[(33332) >> 2] | 0;
                                    $805 = 1 << $$0269$i$i;
                                    $806 = $804 & $805;
                                    $807 = ($806 | 0) == (0);
                                    if ($807) {
                                        $808 = $804 | $805;
                                        HEAP32[(33332) >> 2] = $808;
                                        HEAP32[$800 >> 2] = $672;
                                        $809 = ((($672)) + 24 | 0);
                                        HEAP32[$809 >> 2] = $800;
                                        $810 = ((($672)) + 12 | 0);
                                        HEAP32[$810 >> 2] = $672;
                                        $811 = ((($672)) + 8 | 0);
                                        HEAP32[$811 >> 2] = $672;
                                        break;
                                    }
                                    $812 = HEAP32[$800 >> 2] | 0;
                                    $813 = ($$0269$i$i | 0) == (31);
                                    $814 = $$0269$i$i >>> 1;
                                    $815 = (25 - ($814)) | 0;
                                    $816 = $813 ? 0 : $815;
                                    $817 = $$0260$i$i << $816;
                                    $$0261$i$i = $817; $$0262$i$i = $812;
                                    while (1) {
                                        $818 = ((($$0262$i$i)) + 4 | 0);
                                        $819 = HEAP32[$818 >> 2] | 0;
                                        $820 = $819 & -8;
                                        $821 = ($820 | 0) == ($$0260$i$i | 0);
                                        if ($821) {
                                            label = 192;
                                            break;
                                        }
                                        $822 = $$0261$i$i >>> 31;
                                        $823 = (((($$0262$i$i)) + 16 | 0) + ($822 << 2) | 0);
                                        $824 = $$0261$i$i << 1;
                                        $825 = HEAP32[$823 >> 2] | 0;
                                        $826 = ($825 | 0) == (0 | 0);
                                        if ($826) {
                                            label = 191;
                                            break;
                                        } else {
                                            $$0261$i$i = $824; $$0262$i$i = $825;
                                        }
                                    }
                                    if ((label | 0) == 191) {
                                        HEAP32[$823 >> 2] = $672;
                                        $827 = ((($672)) + 24 | 0);
                                        HEAP32[$827 >> 2] = $$0262$i$i;
                                        $828 = ((($672)) + 12 | 0);
                                        HEAP32[$828 >> 2] = $672;
                                        $829 = ((($672)) + 8 | 0);
                                        HEAP32[$829 >> 2] = $672;
                                        break;
                                    }
                                    else if ((label | 0) == 192) {
                                        $830 = ((($$0262$i$i)) + 8 | 0);
                                        $831 = HEAP32[$830 >> 2] | 0;
                                        $832 = ((($831)) + 12 | 0);
                                        HEAP32[$832 >> 2] = $672;
                                        HEAP32[$830 >> 2] = $672;
                                        $833 = ((($672)) + 8 | 0);
                                        HEAP32[$833 >> 2] = $831;
                                        $834 = ((($672)) + 12 | 0);
                                        HEAP32[$834 >> 2] = $$0262$i$i;
                                        $835 = ((($672)) + 24 | 0);
                                        HEAP32[$835 >> 2] = 0;
                                        break;
                                    }
                                }
                            } while (0);
                            $960 = ((($660)) + 8 | 0);
                            $$0 = $960;
                            STACKTOP = sp; return ($$0 | 0);
                        } else {
                            $$0$i$i$i = (33776);
                        }
                    }
                    while (1) {
                        $836 = HEAP32[$$0$i$i$i >> 2] | 0;
                        $837 = ($836 >>> 0) > ($586 >>> 0);
                        if (!($837)) {
                            $838 = ((($$0$i$i$i)) + 4 | 0);
                            $839 = HEAP32[$838 >> 2] | 0;
                            $840 = (($836) + ($839) | 0);
                            $841 = ($840 >>> 0) > ($586 >>> 0);
                            if ($841) {
                                break;
                            }
                        }
                        $842 = ((($$0$i$i$i)) + 8 | 0);
                        $843 = HEAP32[$842 >> 2] | 0;
                        $$0$i$i$i = $843;
                    }
                    $844 = ((($840)) + -47 | 0);
                    $845 = ((($844)) + 8 | 0);
                    $846 = $845;
                    $847 = $846 & 7;
                    $848 = ($847 | 0) == (0);
                    $849 = (0 - ($846)) | 0;
                    $850 = $849 & 7;
                    $851 = $848 ? 0 : $850;
                    $852 = (($844) + ($851) | 0);
                    $853 = ((($586)) + 16 | 0);
                    $854 = ($852 >>> 0) < ($853 >>> 0);
                    $855 = $854 ? $586 : $852;
                    $856 = ((($855)) + 8 | 0);
                    $857 = ((($855)) + 24 | 0);
                    $858 = (($$723947$i) + -40) | 0;
                    $859 = ((($$748$i)) + 8 | 0);
                    $860 = $859;
                    $861 = $860 & 7;
                    $862 = ($861 | 0) == (0);
                    $863 = (0 - ($860)) | 0;
                    $864 = $863 & 7;
                    $865 = $862 ? 0 : $864;
                    $866 = (($$748$i) + ($865) | 0);
                    $867 = (($858) - ($865)) | 0;
                    HEAP32[(33352) >> 2] = $866;
                    HEAP32[(33340) >> 2] = $867;
                    $868 = $867 | 1;
                    $869 = ((($866)) + 4 | 0);
                    HEAP32[$869 >> 2] = $868;
                    $870 = (($$748$i) + ($858) | 0);
                    $871 = ((($870)) + 4 | 0);
                    HEAP32[$871 >> 2] = 40;
                    $872 = HEAP32[(33816) >> 2] | 0;
                    HEAP32[(33356) >> 2] = $872;
                    $873 = ((($855)) + 4 | 0);
                    HEAP32[$873 >> 2] = 27;
                    ; HEAP32[$856 >> 2] = HEAP32[(33776) >> 2] | 0; HEAP32[$856 + 4 >> 2] = HEAP32[(33776) + 4 >> 2] | 0; HEAP32[$856 + 8 >> 2] = HEAP32[(33776) + 8 >> 2] | 0; HEAP32[$856 + 12 >> 2] = HEAP32[(33776) + 12 >> 2] | 0;
                    HEAP32[(33776) >> 2] = $$748$i;
                    HEAP32[(33780) >> 2] = $$723947$i;
                    HEAP32[(33788) >> 2] = 0;
                    HEAP32[(33784) >> 2] = $856;
                    $875 = $857;
                    while (1) {
                        $874 = ((($875)) + 4 | 0);
                        HEAP32[$874 >> 2] = 7;
                        $876 = ((($875)) + 8 | 0);
                        $877 = ($876 >>> 0) < ($840 >>> 0);
                        if ($877) {
                            $875 = $874;
                        } else {
                            break;
                        }
                    }
                    $878 = ($855 | 0) == ($586 | 0);
                    if (!($878)) {
                        $879 = $855;
                        $880 = $586;
                        $881 = (($879) - ($880)) | 0;
                        $882 = HEAP32[$873 >> 2] | 0;
                        $883 = $882 & -2;
                        HEAP32[$873 >> 2] = $883;
                        $884 = $881 | 1;
                        $885 = ((($586)) + 4 | 0);
                        HEAP32[$885 >> 2] = $884;
                        HEAP32[$855 >> 2] = $881;
                        $886 = $881 >>> 3;
                        $887 = ($881 >>> 0) < (256);
                        if ($887) {
                            $888 = $886 << 1;
                            $889 = (33368 + ($888 << 2) | 0);
                            $890 = HEAP32[8332] | 0;
                            $891 = 1 << $886;
                            $892 = $890 & $891;
                            $893 = ($892 | 0) == (0);
                            if ($893) {
                                $894 = $890 | $891;
                                HEAP32[8332] = $894;
                                $$pre$i$i = ((($889)) + 8 | 0);
                                $$0206$i$i = $889; $$pre$phi$i$iZ2D = $$pre$i$i;
                            } else {
                                $895 = ((($889)) + 8 | 0);
                                $896 = HEAP32[$895 >> 2] | 0;
                                $$0206$i$i = $896; $$pre$phi$i$iZ2D = $895;
                            }
                            HEAP32[$$pre$phi$i$iZ2D >> 2] = $586;
                            $897 = ((($$0206$i$i)) + 12 | 0);
                            HEAP32[$897 >> 2] = $586;
                            $898 = ((($586)) + 8 | 0);
                            HEAP32[$898 >> 2] = $$0206$i$i;
                            $899 = ((($586)) + 12 | 0);
                            HEAP32[$899 >> 2] = $889;
                            break;
                        }
                        $900 = $881 >>> 8;
                        $901 = ($900 | 0) == (0);
                        if ($901) {
                            $$0207$i$i = 0;
                        } else {
                            $902 = ($881 >>> 0) > (16777215);
                            if ($902) {
                                $$0207$i$i = 31;
                            } else {
                                $903 = (($900) + 1048320) | 0;
                                $904 = $903 >>> 16;
                                $905 = $904 & 8;
                                $906 = $900 << $905;
                                $907 = (($906) + 520192) | 0;
                                $908 = $907 >>> 16;
                                $909 = $908 & 4;
                                $910 = $909 | $905;
                                $911 = $906 << $909;
                                $912 = (($911) + 245760) | 0;
                                $913 = $912 >>> 16;
                                $914 = $913 & 2;
                                $915 = $910 | $914;
                                $916 = (14 - ($915)) | 0;
                                $917 = $911 << $914;
                                $918 = $917 >>> 15;
                                $919 = (($916) + ($918)) | 0;
                                $920 = $919 << 1;
                                $921 = (($919) + 7) | 0;
                                $922 = $881 >>> $921;
                                $923 = $922 & 1;
                                $924 = $923 | $920;
                                $$0207$i$i = $924;
                            }
                        }
                        $925 = (33632 + ($$0207$i$i << 2) | 0);
                        $926 = ((($586)) + 28 | 0);
                        HEAP32[$926 >> 2] = $$0207$i$i;
                        $927 = ((($586)) + 20 | 0);
                        HEAP32[$927 >> 2] = 0;
                        HEAP32[$853 >> 2] = 0;
                        $928 = HEAP32[(33332) >> 2] | 0;
                        $929 = 1 << $$0207$i$i;
                        $930 = $928 & $929;
                        $931 = ($930 | 0) == (0);
                        if ($931) {
                            $932 = $928 | $929;
                            HEAP32[(33332) >> 2] = $932;
                            HEAP32[$925 >> 2] = $586;
                            $933 = ((($586)) + 24 | 0);
                            HEAP32[$933 >> 2] = $925;
                            $934 = ((($586)) + 12 | 0);
                            HEAP32[$934 >> 2] = $586;
                            $935 = ((($586)) + 8 | 0);
                            HEAP32[$935 >> 2] = $586;
                            break;
                        }
                        $936 = HEAP32[$925 >> 2] | 0;
                        $937 = ($$0207$i$i | 0) == (31);
                        $938 = $$0207$i$i >>> 1;
                        $939 = (25 - ($938)) | 0;
                        $940 = $937 ? 0 : $939;
                        $941 = $881 << $940;
                        $$0201$i$i = $941; $$0202$i$i = $936;
                        while (1) {
                            $942 = ((($$0202$i$i)) + 4 | 0);
                            $943 = HEAP32[$942 >> 2] | 0;
                            $944 = $943 & -8;
                            $945 = ($944 | 0) == ($881 | 0);
                            if ($945) {
                                label = 213;
                                break;
                            }
                            $946 = $$0201$i$i >>> 31;
                            $947 = (((($$0202$i$i)) + 16 | 0) + ($946 << 2) | 0);
                            $948 = $$0201$i$i << 1;
                            $949 = HEAP32[$947 >> 2] | 0;
                            $950 = ($949 | 0) == (0 | 0);
                            if ($950) {
                                label = 212;
                                break;
                            } else {
                                $$0201$i$i = $948; $$0202$i$i = $949;
                            }
                        }
                        if ((label | 0) == 212) {
                            HEAP32[$947 >> 2] = $586;
                            $951 = ((($586)) + 24 | 0);
                            HEAP32[$951 >> 2] = $$0202$i$i;
                            $952 = ((($586)) + 12 | 0);
                            HEAP32[$952 >> 2] = $586;
                            $953 = ((($586)) + 8 | 0);
                            HEAP32[$953 >> 2] = $586;
                            break;
                        }
                        else if ((label | 0) == 213) {
                            $954 = ((($$0202$i$i)) + 8 | 0);
                            $955 = HEAP32[$954 >> 2] | 0;
                            $956 = ((($955)) + 12 | 0);
                            HEAP32[$956 >> 2] = $586;
                            HEAP32[$954 >> 2] = $586;
                            $957 = ((($586)) + 8 | 0);
                            HEAP32[$957 >> 2] = $955;
                            $958 = ((($586)) + 12 | 0);
                            HEAP32[$958 >> 2] = $$0202$i$i;
                            $959 = ((($586)) + 24 | 0);
                            HEAP32[$959 >> 2] = 0;
                            break;
                        }
                    }
                }
            } while (0);
            $961 = HEAP32[(33340) >> 2] | 0;
            $962 = ($961 >>> 0) > ($$0192 >>> 0);
            if ($962) {
                $963 = (($961) - ($$0192)) | 0;
                HEAP32[(33340) >> 2] = $963;
                $964 = HEAP32[(33352) >> 2] | 0;
                $965 = (($964) + ($$0192) | 0);
                HEAP32[(33352) >> 2] = $965;
                $966 = $963 | 1;
                $967 = ((($965)) + 4 | 0);
                HEAP32[$967 >> 2] = $966;
                $968 = $$0192 | 3;
                $969 = ((($964)) + 4 | 0);
                HEAP32[$969 >> 2] = $968;
                $970 = ((($964)) + 8 | 0);
                $$0 = $970;
                STACKTOP = sp; return ($$0 | 0);
            }
        }
        $971 = (___errno_location() | 0);
        HEAP32[$971 >> 2] = 12;
        $$0 = 0;
        STACKTOP = sp; return ($$0 | 0);
    }
    function _free($0) {
        $0 = $0 | 0;
        var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
        var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
        var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
        var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
        var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
        var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
        var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
        var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
        var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
        var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
        var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
        var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond373 = 0;
        var $cond374 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0 | 0);
        if ($1) {
            return;
        }
        $2 = ((($0)) + -8 | 0);
        $3 = HEAP32[(33344) >> 2] | 0;
        $4 = ((($0)) + -4 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = $5 & -8;
        $7 = (($2) + ($6) | 0);
        $8 = $5 & 1;
        $9 = ($8 | 0) == (0);
        do {
            if ($9) {
                $10 = HEAP32[$2 >> 2] | 0;
                $11 = $5 & 3;
                $12 = ($11 | 0) == (0);
                if ($12) {
                    return;
                }
                $13 = (0 - ($10)) | 0;
                $14 = (($2) + ($13) | 0);
                $15 = (($10) + ($6)) | 0;
                $16 = ($14 >>> 0) < ($3 >>> 0);
                if ($16) {
                    return;
                }
                $17 = HEAP32[(33348) >> 2] | 0;
                $18 = ($17 | 0) == ($14 | 0);
                if ($18) {
                    $79 = ((($7)) + 4 | 0);
                    $80 = HEAP32[$79 >> 2] | 0;
                    $81 = $80 & 3;
                    $82 = ($81 | 0) == (3);
                    if (!($82)) {
                        $$1 = $14; $$1347 = $15; $87 = $14;
                        break;
                    }
                    HEAP32[(33336) >> 2] = $15;
                    $83 = $80 & -2;
                    HEAP32[$79 >> 2] = $83;
                    $84 = $15 | 1;
                    $85 = ((($14)) + 4 | 0);
                    HEAP32[$85 >> 2] = $84;
                    $86 = (($14) + ($15) | 0);
                    HEAP32[$86 >> 2] = $15;
                    return;
                }
                $19 = $10 >>> 3;
                $20 = ($10 >>> 0) < (256);
                if ($20) {
                    $21 = ((($14)) + 8 | 0);
                    $22 = HEAP32[$21 >> 2] | 0;
                    $23 = ((($14)) + 12 | 0);
                    $24 = HEAP32[$23 >> 2] | 0;
                    $25 = ($24 | 0) == ($22 | 0);
                    if ($25) {
                        $26 = 1 << $19;
                        $27 = $26 ^ -1;
                        $28 = HEAP32[8332] | 0;
                        $29 = $28 & $27;
                        HEAP32[8332] = $29;
                        $$1 = $14; $$1347 = $15; $87 = $14;
                        break;
                    } else {
                        $30 = ((($22)) + 12 | 0);
                        HEAP32[$30 >> 2] = $24;
                        $31 = ((($24)) + 8 | 0);
                        HEAP32[$31 >> 2] = $22;
                        $$1 = $14; $$1347 = $15; $87 = $14;
                        break;
                    }
                }
                $32 = ((($14)) + 24 | 0);
                $33 = HEAP32[$32 >> 2] | 0;
                $34 = ((($14)) + 12 | 0);
                $35 = HEAP32[$34 >> 2] | 0;
                $36 = ($35 | 0) == ($14 | 0);
                do {
                    if ($36) {
                        $41 = ((($14)) + 16 | 0);
                        $42 = ((($41)) + 4 | 0);
                        $43 = HEAP32[$42 >> 2] | 0;
                        $44 = ($43 | 0) == (0 | 0);
                        if ($44) {
                            $45 = HEAP32[$41 >> 2] | 0;
                            $46 = ($45 | 0) == (0 | 0);
                            if ($46) {
                                $$3 = 0;
                                break;
                            } else {
                                $$1352 = $45; $$1355 = $41;
                            }
                        } else {
                            $$1352 = $43; $$1355 = $42;
                        }
                        while (1) {
                            $47 = ((($$1352)) + 20 | 0);
                            $48 = HEAP32[$47 >> 2] | 0;
                            $49 = ($48 | 0) == (0 | 0);
                            if (!($49)) {
                                $$1352 = $48; $$1355 = $47;
                                continue;
                            }
                            $50 = ((($$1352)) + 16 | 0);
                            $51 = HEAP32[$50 >> 2] | 0;
                            $52 = ($51 | 0) == (0 | 0);
                            if ($52) {
                                break;
                            } else {
                                $$1352 = $51; $$1355 = $50;
                            }
                        }
                        HEAP32[$$1355 >> 2] = 0;
                        $$3 = $$1352;
                    } else {
                        $37 = ((($14)) + 8 | 0);
                        $38 = HEAP32[$37 >> 2] | 0;
                        $39 = ((($38)) + 12 | 0);
                        HEAP32[$39 >> 2] = $35;
                        $40 = ((($35)) + 8 | 0);
                        HEAP32[$40 >> 2] = $38;
                        $$3 = $35;
                    }
                } while (0);
                $53 = ($33 | 0) == (0 | 0);
                if ($53) {
                    $$1 = $14; $$1347 = $15; $87 = $14;
                } else {
                    $54 = ((($14)) + 28 | 0);
                    $55 = HEAP32[$54 >> 2] | 0;
                    $56 = (33632 + ($55 << 2) | 0);
                    $57 = HEAP32[$56 >> 2] | 0;
                    $58 = ($57 | 0) == ($14 | 0);
                    if ($58) {
                        HEAP32[$56 >> 2] = $$3;
                        $cond373 = ($$3 | 0) == (0 | 0);
                        if ($cond373) {
                            $59 = 1 << $55;
                            $60 = $59 ^ -1;
                            $61 = HEAP32[(33332) >> 2] | 0;
                            $62 = $61 & $60;
                            HEAP32[(33332) >> 2] = $62;
                            $$1 = $14; $$1347 = $15; $87 = $14;
                            break;
                        }
                    } else {
                        $63 = ((($33)) + 16 | 0);
                        $64 = HEAP32[$63 >> 2] | 0;
                        $65 = ($64 | 0) != ($14 | 0);
                        $$sink3 = $65 & 1;
                        $66 = (((($33)) + 16 | 0) + ($$sink3 << 2) | 0);
                        HEAP32[$66 >> 2] = $$3;
                        $67 = ($$3 | 0) == (0 | 0);
                        if ($67) {
                            $$1 = $14; $$1347 = $15; $87 = $14;
                            break;
                        }
                    }
                    $68 = ((($$3)) + 24 | 0);
                    HEAP32[$68 >> 2] = $33;
                    $69 = ((($14)) + 16 | 0);
                    $70 = HEAP32[$69 >> 2] | 0;
                    $71 = ($70 | 0) == (0 | 0);
                    if (!($71)) {
                        $72 = ((($$3)) + 16 | 0);
                        HEAP32[$72 >> 2] = $70;
                        $73 = ((($70)) + 24 | 0);
                        HEAP32[$73 >> 2] = $$3;
                    }
                    $74 = ((($69)) + 4 | 0);
                    $75 = HEAP32[$74 >> 2] | 0;
                    $76 = ($75 | 0) == (0 | 0);
                    if ($76) {
                        $$1 = $14; $$1347 = $15; $87 = $14;
                    } else {
                        $77 = ((($$3)) + 20 | 0);
                        HEAP32[$77 >> 2] = $75;
                        $78 = ((($75)) + 24 | 0);
                        HEAP32[$78 >> 2] = $$3;
                        $$1 = $14; $$1347 = $15; $87 = $14;
                    }
                }
            } else {
                $$1 = $2; $$1347 = $6; $87 = $2;
            }
        } while (0);
        $88 = ($87 >>> 0) < ($7 >>> 0);
        if (!($88)) {
            return;
        }
        $89 = ((($7)) + 4 | 0);
        $90 = HEAP32[$89 >> 2] | 0;
        $91 = $90 & 1;
        $92 = ($91 | 0) == (0);
        if ($92) {
            return;
        }
        $93 = $90 & 2;
        $94 = ($93 | 0) == (0);
        if ($94) {
            $95 = HEAP32[(33352) >> 2] | 0;
            $96 = ($95 | 0) == ($7 | 0);
            if ($96) {
                $97 = HEAP32[(33340) >> 2] | 0;
                $98 = (($97) + ($$1347)) | 0;
                HEAP32[(33340) >> 2] = $98;
                HEAP32[(33352) >> 2] = $$1;
                $99 = $98 | 1;
                $100 = ((($$1)) + 4 | 0);
                HEAP32[$100 >> 2] = $99;
                $101 = HEAP32[(33348) >> 2] | 0;
                $102 = ($$1 | 0) == ($101 | 0);
                if (!($102)) {
                    return;
                }
                HEAP32[(33348) >> 2] = 0;
                HEAP32[(33336) >> 2] = 0;
                return;
            }
            $103 = HEAP32[(33348) >> 2] | 0;
            $104 = ($103 | 0) == ($7 | 0);
            if ($104) {
                $105 = HEAP32[(33336) >> 2] | 0;
                $106 = (($105) + ($$1347)) | 0;
                HEAP32[(33336) >> 2] = $106;
                HEAP32[(33348) >> 2] = $87;
                $107 = $106 | 1;
                $108 = ((($$1)) + 4 | 0);
                HEAP32[$108 >> 2] = $107;
                $109 = (($87) + ($106) | 0);
                HEAP32[$109 >> 2] = $106;
                return;
            }
            $110 = $90 & -8;
            $111 = (($110) + ($$1347)) | 0;
            $112 = $90 >>> 3;
            $113 = ($90 >>> 0) < (256);
            do {
                if ($113) {
                    $114 = ((($7)) + 8 | 0);
                    $115 = HEAP32[$114 >> 2] | 0;
                    $116 = ((($7)) + 12 | 0);
                    $117 = HEAP32[$116 >> 2] | 0;
                    $118 = ($117 | 0) == ($115 | 0);
                    if ($118) {
                        $119 = 1 << $112;
                        $120 = $119 ^ -1;
                        $121 = HEAP32[8332] | 0;
                        $122 = $121 & $120;
                        HEAP32[8332] = $122;
                        break;
                    } else {
                        $123 = ((($115)) + 12 | 0);
                        HEAP32[$123 >> 2] = $117;
                        $124 = ((($117)) + 8 | 0);
                        HEAP32[$124 >> 2] = $115;
                        break;
                    }
                } else {
                    $125 = ((($7)) + 24 | 0);
                    $126 = HEAP32[$125 >> 2] | 0;
                    $127 = ((($7)) + 12 | 0);
                    $128 = HEAP32[$127 >> 2] | 0;
                    $129 = ($128 | 0) == ($7 | 0);
                    do {
                        if ($129) {
                            $134 = ((($7)) + 16 | 0);
                            $135 = ((($134)) + 4 | 0);
                            $136 = HEAP32[$135 >> 2] | 0;
                            $137 = ($136 | 0) == (0 | 0);
                            if ($137) {
                                $138 = HEAP32[$134 >> 2] | 0;
                                $139 = ($138 | 0) == (0 | 0);
                                if ($139) {
                                    $$3365 = 0;
                                    break;
                                } else {
                                    $$1363 = $138; $$1367 = $134;
                                }
                            } else {
                                $$1363 = $136; $$1367 = $135;
                            }
                            while (1) {
                                $140 = ((($$1363)) + 20 | 0);
                                $141 = HEAP32[$140 >> 2] | 0;
                                $142 = ($141 | 0) == (0 | 0);
                                if (!($142)) {
                                    $$1363 = $141; $$1367 = $140;
                                    continue;
                                }
                                $143 = ((($$1363)) + 16 | 0);
                                $144 = HEAP32[$143 >> 2] | 0;
                                $145 = ($144 | 0) == (0 | 0);
                                if ($145) {
                                    break;
                                } else {
                                    $$1363 = $144; $$1367 = $143;
                                }
                            }
                            HEAP32[$$1367 >> 2] = 0;
                            $$3365 = $$1363;
                        } else {
                            $130 = ((($7)) + 8 | 0);
                            $131 = HEAP32[$130 >> 2] | 0;
                            $132 = ((($131)) + 12 | 0);
                            HEAP32[$132 >> 2] = $128;
                            $133 = ((($128)) + 8 | 0);
                            HEAP32[$133 >> 2] = $131;
                            $$3365 = $128;
                        }
                    } while (0);
                    $146 = ($126 | 0) == (0 | 0);
                    if (!($146)) {
                        $147 = ((($7)) + 28 | 0);
                        $148 = HEAP32[$147 >> 2] | 0;
                        $149 = (33632 + ($148 << 2) | 0);
                        $150 = HEAP32[$149 >> 2] | 0;
                        $151 = ($150 | 0) == ($7 | 0);
                        if ($151) {
                            HEAP32[$149 >> 2] = $$3365;
                            $cond374 = ($$3365 | 0) == (0 | 0);
                            if ($cond374) {
                                $152 = 1 << $148;
                                $153 = $152 ^ -1;
                                $154 = HEAP32[(33332) >> 2] | 0;
                                $155 = $154 & $153;
                                HEAP32[(33332) >> 2] = $155;
                                break;
                            }
                        } else {
                            $156 = ((($126)) + 16 | 0);
                            $157 = HEAP32[$156 >> 2] | 0;
                            $158 = ($157 | 0) != ($7 | 0);
                            $$sink5 = $158 & 1;
                            $159 = (((($126)) + 16 | 0) + ($$sink5 << 2) | 0);
                            HEAP32[$159 >> 2] = $$3365;
                            $160 = ($$3365 | 0) == (0 | 0);
                            if ($160) {
                                break;
                            }
                        }
                        $161 = ((($$3365)) + 24 | 0);
                        HEAP32[$161 >> 2] = $126;
                        $162 = ((($7)) + 16 | 0);
                        $163 = HEAP32[$162 >> 2] | 0;
                        $164 = ($163 | 0) == (0 | 0);
                        if (!($164)) {
                            $165 = ((($$3365)) + 16 | 0);
                            HEAP32[$165 >> 2] = $163;
                            $166 = ((($163)) + 24 | 0);
                            HEAP32[$166 >> 2] = $$3365;
                        }
                        $167 = ((($162)) + 4 | 0);
                        $168 = HEAP32[$167 >> 2] | 0;
                        $169 = ($168 | 0) == (0 | 0);
                        if (!($169)) {
                            $170 = ((($$3365)) + 20 | 0);
                            HEAP32[$170 >> 2] = $168;
                            $171 = ((($168)) + 24 | 0);
                            HEAP32[$171 >> 2] = $$3365;
                        }
                    }
                }
            } while (0);
            $172 = $111 | 1;
            $173 = ((($$1)) + 4 | 0);
            HEAP32[$173 >> 2] = $172;
            $174 = (($87) + ($111) | 0);
            HEAP32[$174 >> 2] = $111;
            $175 = HEAP32[(33348) >> 2] | 0;
            $176 = ($$1 | 0) == ($175 | 0);
            if ($176) {
                HEAP32[(33336) >> 2] = $111;
                return;
            } else {
                $$2 = $111;
            }
        } else {
            $177 = $90 & -2;
            HEAP32[$89 >> 2] = $177;
            $178 = $$1347 | 1;
            $179 = ((($$1)) + 4 | 0);
            HEAP32[$179 >> 2] = $178;
            $180 = (($87) + ($$1347) | 0);
            HEAP32[$180 >> 2] = $$1347;
            $$2 = $$1347;
        }
        $181 = $$2 >>> 3;
        $182 = ($$2 >>> 0) < (256);
        if ($182) {
            $183 = $181 << 1;
            $184 = (33368 + ($183 << 2) | 0);
            $185 = HEAP32[8332] | 0;
            $186 = 1 << $181;
            $187 = $185 & $186;
            $188 = ($187 | 0) == (0);
            if ($188) {
                $189 = $185 | $186;
                HEAP32[8332] = $189;
                $$pre = ((($184)) + 8 | 0);
                $$0368 = $184; $$pre$phiZ2D = $$pre;
            } else {
                $190 = ((($184)) + 8 | 0);
                $191 = HEAP32[$190 >> 2] | 0;
                $$0368 = $191; $$pre$phiZ2D = $190;
            }
            HEAP32[$$pre$phiZ2D >> 2] = $$1;
            $192 = ((($$0368)) + 12 | 0);
            HEAP32[$192 >> 2] = $$1;
            $193 = ((($$1)) + 8 | 0);
            HEAP32[$193 >> 2] = $$0368;
            $194 = ((($$1)) + 12 | 0);
            HEAP32[$194 >> 2] = $184;
            return;
        }
        $195 = $$2 >>> 8;
        $196 = ($195 | 0) == (0);
        if ($196) {
            $$0361 = 0;
        } else {
            $197 = ($$2 >>> 0) > (16777215);
            if ($197) {
                $$0361 = 31;
            } else {
                $198 = (($195) + 1048320) | 0;
                $199 = $198 >>> 16;
                $200 = $199 & 8;
                $201 = $195 << $200;
                $202 = (($201) + 520192) | 0;
                $203 = $202 >>> 16;
                $204 = $203 & 4;
                $205 = $204 | $200;
                $206 = $201 << $204;
                $207 = (($206) + 245760) | 0;
                $208 = $207 >>> 16;
                $209 = $208 & 2;
                $210 = $205 | $209;
                $211 = (14 - ($210)) | 0;
                $212 = $206 << $209;
                $213 = $212 >>> 15;
                $214 = (($211) + ($213)) | 0;
                $215 = $214 << 1;
                $216 = (($214) + 7) | 0;
                $217 = $$2 >>> $216;
                $218 = $217 & 1;
                $219 = $218 | $215;
                $$0361 = $219;
            }
        }
        $220 = (33632 + ($$0361 << 2) | 0);
        $221 = ((($$1)) + 28 | 0);
        HEAP32[$221 >> 2] = $$0361;
        $222 = ((($$1)) + 16 | 0);
        $223 = ((($$1)) + 20 | 0);
        HEAP32[$223 >> 2] = 0;
        HEAP32[$222 >> 2] = 0;
        $224 = HEAP32[(33332) >> 2] | 0;
        $225 = 1 << $$0361;
        $226 = $224 & $225;
        $227 = ($226 | 0) == (0);
        do {
            if ($227) {
                $228 = $224 | $225;
                HEAP32[(33332) >> 2] = $228;
                HEAP32[$220 >> 2] = $$1;
                $229 = ((($$1)) + 24 | 0);
                HEAP32[$229 >> 2] = $220;
                $230 = ((($$1)) + 12 | 0);
                HEAP32[$230 >> 2] = $$1;
                $231 = ((($$1)) + 8 | 0);
                HEAP32[$231 >> 2] = $$1;
            } else {
                $232 = HEAP32[$220 >> 2] | 0;
                $233 = ($$0361 | 0) == (31);
                $234 = $$0361 >>> 1;
                $235 = (25 - ($234)) | 0;
                $236 = $233 ? 0 : $235;
                $237 = $$2 << $236;
                $$0348 = $237; $$0349 = $232;
                while (1) {
                    $238 = ((($$0349)) + 4 | 0);
                    $239 = HEAP32[$238 >> 2] | 0;
                    $240 = $239 & -8;
                    $241 = ($240 | 0) == ($$2 | 0);
                    if ($241) {
                        label = 73;
                        break;
                    }
                    $242 = $$0348 >>> 31;
                    $243 = (((($$0349)) + 16 | 0) + ($242 << 2) | 0);
                    $244 = $$0348 << 1;
                    $245 = HEAP32[$243 >> 2] | 0;
                    $246 = ($245 | 0) == (0 | 0);
                    if ($246) {
                        label = 72;
                        break;
                    } else {
                        $$0348 = $244; $$0349 = $245;
                    }
                }
                if ((label | 0) == 72) {
                    HEAP32[$243 >> 2] = $$1;
                    $247 = ((($$1)) + 24 | 0);
                    HEAP32[$247 >> 2] = $$0349;
                    $248 = ((($$1)) + 12 | 0);
                    HEAP32[$248 >> 2] = $$1;
                    $249 = ((($$1)) + 8 | 0);
                    HEAP32[$249 >> 2] = $$1;
                    break;
                }
                else if ((label | 0) == 73) {
                    $250 = ((($$0349)) + 8 | 0);
                    $251 = HEAP32[$250 >> 2] | 0;
                    $252 = ((($251)) + 12 | 0);
                    HEAP32[$252 >> 2] = $$1;
                    HEAP32[$250 >> 2] = $$1;
                    $253 = ((($$1)) + 8 | 0);
                    HEAP32[$253 >> 2] = $251;
                    $254 = ((($$1)) + 12 | 0);
                    HEAP32[$254 >> 2] = $$0349;
                    $255 = ((($$1)) + 24 | 0);
                    HEAP32[$255 >> 2] = 0;
                    break;
                }
            }
        } while (0);
        $256 = HEAP32[(33360) >> 2] | 0;
        $257 = (($256) + -1) | 0;
        HEAP32[(33360) >> 2] = $257;
        $258 = ($257 | 0) == (0);
        if ($258) {
            $$0195$in$i = (33784);
        } else {
            return;
        }
        while (1) {
            $$0195$i = HEAP32[$$0195$in$i >> 2] | 0;
            $259 = ($$0195$i | 0) == (0 | 0);
            $260 = ((($$0195$i)) + 8 | 0);
            if ($259) {
                break;
            } else {
                $$0195$in$i = $260;
            }
        }
        HEAP32[(33360) >> 2] = -1;
        return;
    }
    function ___stdio_close($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $vararg_buffer = sp;
        $1 = ((($0)) + 60 | 0);
        $2 = HEAP32[$1 >> 2] | 0;
        $3 = (_dummy_19($2) | 0);
        HEAP32[$vararg_buffer >> 2] = $3;
        $4 = (___syscall6(6, ($vararg_buffer | 0)) | 0);
        $5 = (___syscall_ret($4) | 0);
        STACKTOP = sp; return ($5 | 0);
    }
    function ___stdio_seek($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 32 | 0;
        $vararg_buffer = sp;
        $3 = sp + 20 | 0;
        $4 = ((($0)) + 60 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = $3;
        HEAP32[$vararg_buffer >> 2] = $5;
        $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
        HEAP32[$vararg_ptr1 >> 2] = 0;
        $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
        HEAP32[$vararg_ptr2 >> 2] = $1;
        $vararg_ptr3 = ((($vararg_buffer)) + 12 | 0);
        HEAP32[$vararg_ptr3 >> 2] = $6;
        $vararg_ptr4 = ((($vararg_buffer)) + 16 | 0);
        HEAP32[$vararg_ptr4 >> 2] = $2;
        $7 = (___syscall140(140, ($vararg_buffer | 0)) | 0);
        $8 = (___syscall_ret($7) | 0);
        $9 = ($8 | 0) < (0);
        if ($9) {
            HEAP32[$3 >> 2] = -1;
            $10 = -1;
        } else {
            $$pre = HEAP32[$3 >> 2] | 0;
            $10 = $$pre;
        }
        STACKTOP = sp; return ($10 | 0);
    }
    function ___syscall_ret($0) {
        $0 = $0 | 0;
        var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 >>> 0) > (4294963200);
        if ($1) {
            $2 = (0 - ($0)) | 0;
            $3 = (___errno_location() | 0);
            HEAP32[$3 >> 2] = $2;
            $$0 = -1;
        } else {
            $$0 = $0;
        }
        return ($$0 | 0);
    }
    function ___errno_location() {
        var label = 0, sp = 0;
        sp = STACKTOP;
        return (33824 | 0);
    }
    function _dummy_19($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return ($0 | 0);
    }
    function ___stdio_write($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
        var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
        var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 48 | 0;
        $vararg_buffer3 = sp + 16 | 0;
        $vararg_buffer = sp;
        $3 = sp + 32 | 0;
        $4 = ((($0)) + 28 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        HEAP32[$3 >> 2] = $5;
        $6 = ((($3)) + 4 | 0);
        $7 = ((($0)) + 20 | 0);
        $8 = HEAP32[$7 >> 2] | 0;
        $9 = (($8) - ($5)) | 0;
        HEAP32[$6 >> 2] = $9;
        $10 = ((($3)) + 8 | 0);
        HEAP32[$10 >> 2] = $1;
        $11 = ((($3)) + 12 | 0);
        HEAP32[$11 >> 2] = $2;
        $12 = (($9) + ($2)) | 0;
        $13 = ((($0)) + 60 | 0);
        $14 = HEAP32[$13 >> 2] | 0;
        $15 = $3;
        HEAP32[$vararg_buffer >> 2] = $14;
        $vararg_ptr1 = ((($vararg_buffer)) + 4 | 0);
        HEAP32[$vararg_ptr1 >> 2] = $15;
        $vararg_ptr2 = ((($vararg_buffer)) + 8 | 0);
        HEAP32[$vararg_ptr2 >> 2] = 2;
        $16 = (___syscall146(146, ($vararg_buffer | 0)) | 0);
        $17 = (___syscall_ret($16) | 0);
        $18 = ($12 | 0) == ($17 | 0);
        L1: do {
            if ($18) {
                label = 3;
            } else {
                $$04756 = 2; $$04855 = $12; $$04954 = $3; $26 = $17;
                while (1) {
                    $27 = ($26 | 0) < (0);
                    if ($27) {
                        break;
                    }
                    $35 = (($$04855) - ($26)) | 0;
                    $36 = ((($$04954)) + 4 | 0);
                    $37 = HEAP32[$36 >> 2] | 0;
                    $38 = ($26 >>> 0) > ($37 >>> 0);
                    $39 = ((($$04954)) + 8 | 0);
                    $$150 = $38 ? $39 : $$04954;
                    $40 = $38 << 31 >> 31;
                    $$1 = (($$04756) + ($40)) | 0;
                    $41 = $38 ? $37 : 0;
                    $$0 = (($26) - ($41)) | 0;
                    $42 = HEAP32[$$150 >> 2] | 0;
                    $43 = (($42) + ($$0) | 0);
                    HEAP32[$$150 >> 2] = $43;
                    $44 = ((($$150)) + 4 | 0);
                    $45 = HEAP32[$44 >> 2] | 0;
                    $46 = (($45) - ($$0)) | 0;
                    HEAP32[$44 >> 2] = $46;
                    $47 = HEAP32[$13 >> 2] | 0;
                    $48 = $$150;
                    HEAP32[$vararg_buffer3 >> 2] = $47;
                    $vararg_ptr6 = ((($vararg_buffer3)) + 4 | 0);
                    HEAP32[$vararg_ptr6 >> 2] = $48;
                    $vararg_ptr7 = ((($vararg_buffer3)) + 8 | 0);
                    HEAP32[$vararg_ptr7 >> 2] = $$1;
                    $49 = (___syscall146(146, ($vararg_buffer3 | 0)) | 0);
                    $50 = (___syscall_ret($49) | 0);
                    $51 = ($35 | 0) == ($50 | 0);
                    if ($51) {
                        label = 3;
                        break L1;
                    } else {
                        $$04756 = $$1; $$04855 = $35; $$04954 = $$150; $26 = $50;
                    }
                }
                $28 = ((($0)) + 16 | 0);
                HEAP32[$28 >> 2] = 0;
                HEAP32[$4 >> 2] = 0;
                HEAP32[$7 >> 2] = 0;
                $29 = HEAP32[$0 >> 2] | 0;
                $30 = $29 | 32;
                HEAP32[$0 >> 2] = $30;
                $31 = ($$04756 | 0) == (2);
                if ($31) {
                    $$051 = 0;
                } else {
                    $32 = ((($$04954)) + 4 | 0);
                    $33 = HEAP32[$32 >> 2] | 0;
                    $34 = (($2) - ($33)) | 0;
                    $$051 = $34;
                }
            }
        } while (0);
        if ((label | 0) == 3) {
            $19 = ((($0)) + 44 | 0);
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = ((($0)) + 48 | 0);
            $22 = HEAP32[$21 >> 2] | 0;
            $23 = (($20) + ($22) | 0);
            $24 = ((($0)) + 16 | 0);
            HEAP32[$24 >> 2] = $23;
            $25 = $20;
            HEAP32[$4 >> 2] = $25;
            HEAP32[$7 >> 2] = $25;
            $$051 = $2;
        }
        STACKTOP = sp; return ($$051 | 0);
    }
    function _isdigit($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = (($0) + -48) | 0;
        $2 = ($1 >>> 0) < (10);
        $3 = $2 & 1;
        return ($3 | 0);
    }
    function _vsnprintf($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 128 | 0;
        $4 = sp + 124 | 0;
        $5 = sp;
        dest = $5; src = 9824; stop = dest + 124 | 0; do { HEAP32[dest >> 2] = HEAP32[src >> 2] | 0; dest = dest + 4 | 0; src = src + 4 | 0; } while ((dest | 0) < (stop | 0));
        $6 = (($1) + -1) | 0;
        $7 = ($6 >>> 0) > (2147483646);
        if ($7) {
            $8 = ($1 | 0) == (0);
            if ($8) {
                $$014 = $4; $$015 = 1;
                label = 4;
            } else {
                $9 = (___errno_location() | 0);
                HEAP32[$9 >> 2] = 75;
                $$0 = -1;
            }
        } else {
            $$014 = $0; $$015 = $1;
            label = 4;
        }
        if ((label | 0) == 4) {
            $10 = $$014;
            $11 = (-2 - ($10)) | 0;
            $12 = ($$015 >>> 0) > ($11 >>> 0);
            $$$015 = $12 ? $11 : $$015;
            $13 = ((($5)) + 48 | 0);
            HEAP32[$13 >> 2] = $$$015;
            $14 = ((($5)) + 20 | 0);
            HEAP32[$14 >> 2] = $$014;
            $15 = ((($5)) + 44 | 0);
            HEAP32[$15 >> 2] = $$014;
            $16 = (($$014) + ($$$015) | 0);
            $17 = ((($5)) + 16 | 0);
            HEAP32[$17 >> 2] = $16;
            $18 = ((($5)) + 28 | 0);
            HEAP32[$18 >> 2] = $16;
            $19 = (_vfprintf($5, $2, $3) | 0);
            $20 = ($$$015 | 0) == (0);
            if ($20) {
                $$0 = $19;
            } else {
                $21 = HEAP32[$14 >> 2] | 0;
                $22 = HEAP32[$17 >> 2] | 0;
                $23 = ($21 | 0) == ($22 | 0);
                $24 = $23 << 31 >> 31;
                $25 = (($21) + ($24) | 0);
                HEAP8[$25 >> 0] = 0;
                $$0 = $19;
            }
        }
        STACKTOP = sp; return ($$0 | 0);
    }
    function _vfprintf($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
        var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
        var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 224 | 0;
        $3 = sp + 120 | 0;
        $4 = sp + 80 | 0;
        $5 = sp;
        $6 = sp + 136 | 0;
        dest = $4; stop = dest + 40 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
        $vacopy_currentptr = HEAP32[$2 >> 2] | 0;
        HEAP32[$3 >> 2] = $vacopy_currentptr;
        $7 = (_printf_core(0, $1, $3, $5, $4) | 0);
        $8 = ($7 | 0) < (0);
        if ($8) {
            $$0 = -1;
        } else {
            $9 = ((($0)) + 76 | 0);
            $10 = HEAP32[$9 >> 2] | 0;
            $11 = ($10 | 0) > (-1);
            if ($11) {
                $12 = (___lockfile($0) | 0);
                $39 = $12;
            } else {
                $39 = 0;
            }
            $13 = HEAP32[$0 >> 2] | 0;
            $14 = $13 & 32;
            $15 = ((($0)) + 74 | 0);
            $16 = HEAP8[$15 >> 0] | 0;
            $17 = ($16 << 24 >> 24) < (1);
            if ($17) {
                $18 = $13 & -33;
                HEAP32[$0 >> 2] = $18;
            }
            $19 = ((($0)) + 48 | 0);
            $20 = HEAP32[$19 >> 2] | 0;
            $21 = ($20 | 0) == (0);
            if ($21) {
                $23 = ((($0)) + 44 | 0);
                $24 = HEAP32[$23 >> 2] | 0;
                HEAP32[$23 >> 2] = $6;
                $25 = ((($0)) + 28 | 0);
                HEAP32[$25 >> 2] = $6;
                $26 = ((($0)) + 20 | 0);
                HEAP32[$26 >> 2] = $6;
                HEAP32[$19 >> 2] = 80;
                $27 = ((($6)) + 80 | 0);
                $28 = ((($0)) + 16 | 0);
                HEAP32[$28 >> 2] = $27;
                $29 = (_printf_core($0, $1, $3, $5, $4) | 0);
                $30 = ($24 | 0) == (0 | 0);
                if ($30) {
                    $$1 = $29;
                } else {
                    $31 = ((($0)) + 36 | 0);
                    $32 = HEAP32[$31 >> 2] | 0;
                    (FUNCTION_TABLE_iiii[$32 & 15]($0, 0, 0) | 0);
                    $33 = HEAP32[$26 >> 2] | 0;
                    $34 = ($33 | 0) == (0 | 0);
                    $$ = $34 ? -1 : $29;
                    HEAP32[$23 >> 2] = $24;
                    HEAP32[$19 >> 2] = 0;
                    HEAP32[$28 >> 2] = 0;
                    HEAP32[$25 >> 2] = 0;
                    HEAP32[$26 >> 2] = 0;
                    $$1 = $$;
                }
            } else {
                $22 = (_printf_core($0, $1, $3, $5, $4) | 0);
                $$1 = $22;
            }
            $35 = HEAP32[$0 >> 2] | 0;
            $36 = $35 & 32;
            $37 = ($36 | 0) == (0);
            $$1$ = $37 ? $$1 : -1;
            $38 = $35 | $14;
            HEAP32[$0 >> 2] = $38;
            $40 = ($39 | 0) == (0);
            if (!($40)) {
                ___unlockfile($0);
            }
            $$0 = $$1$;
        }
        STACKTOP = sp; return ($$0 | 0);
    }
    function _printf_core($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$ = 0, $$$ = 0, $$$0259 = 0, $$$0262 = 0, $$$4266 = 0, $$$5 = 0, $$0 = 0, $$0228 = 0, $$0228$ = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0;
        var $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$$0254$ = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$0269$phi = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
        var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2256$$$2256 = 0, $$2261 = 0, $$2271 = 0, $$279$ = 0, $$286 = 0, $$287 = 0, $$3257 = 0, $$3265 = 0;
        var $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre = 0, $$pre342 = 0, $$pre344 = 0, $$pre345 = 0, $$pre345$pre = 0, $$pre346 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
        var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
        var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
        var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
        var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
        var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
        var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
        var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
        var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
        var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
        var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
        var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
        var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
        var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0.0;
        var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
        var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
        var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
        var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
        var $arglist_next3 = 0, $brmerge = 0, $brmerge308 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond281 = 0, $storemerge274 = 0, $trunc = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 64 | 0;
        $5 = sp + 16 | 0;
        $6 = sp;
        $7 = sp + 24 | 0;
        $8 = sp + 8 | 0;
        $9 = sp + 20 | 0;
        HEAP32[$5 >> 2] = $1;
        $10 = ($0 | 0) != (0 | 0);
        $11 = ((($7)) + 40 | 0);
        $12 = $11;
        $13 = ((($7)) + 39 | 0);
        $14 = ((($8)) + 4 | 0);
        $$0243 = 0; $$0247 = 0; $$0269 = 0;
        L1: while (1) {
            $15 = ($$0247 | 0) > (-1);
            do {
                if ($15) {
                    $16 = (2147483647 - ($$0247)) | 0;
                    $17 = ($$0243 | 0) > ($16 | 0);
                    if ($17) {
                        $18 = (___errno_location() | 0);
                        HEAP32[$18 >> 2] = 75;
                        $$1248 = -1;
                        break;
                    } else {
                        $19 = (($$0243) + ($$0247)) | 0;
                        $$1248 = $19;
                        break;
                    }
                } else {
                    $$1248 = $$0247;
                }
            } while (0);
            $20 = HEAP32[$5 >> 2] | 0;
            $21 = HEAP8[$20 >> 0] | 0;
            $22 = ($21 << 24 >> 24) == (0);
            if ($22) {
                label = 88;
                break;
            } else {
                $23 = $21; $25 = $20;
            }
            L9: while (1) {
                switch ($23 << 24 >> 24) {
                    case 37: {
                        $$0249303 = $25; $27 = $25;
                        label = 9;
                        break L9;
                        break;
                    }
                    case 0: {
                        $$0249$lcssa = $25;
                        break L9;
                        break;
                    }
                    default: {
                    }
                }
                $24 = ((($25)) + 1 | 0);
                HEAP32[$5 >> 2] = $24;
                $$pre = HEAP8[$24 >> 0] | 0;
                $23 = $$pre; $25 = $24;
            }
            L12: do {
                if ((label | 0) == 9) {
                    while (1) {
                        label = 0;
                        $26 = ((($27)) + 1 | 0);
                        $28 = HEAP8[$26 >> 0] | 0;
                        $29 = ($28 << 24 >> 24) == (37);
                        if (!($29)) {
                            $$0249$lcssa = $$0249303;
                            break L12;
                        }
                        $30 = ((($$0249303)) + 1 | 0);
                        $31 = ((($27)) + 2 | 0);
                        HEAP32[$5 >> 2] = $31;
                        $32 = HEAP8[$31 >> 0] | 0;
                        $33 = ($32 << 24 >> 24) == (37);
                        if ($33) {
                            $$0249303 = $30; $27 = $31;
                            label = 9;
                        } else {
                            $$0249$lcssa = $30;
                            break;
                        }
                    }
                }
            } while (0);
            $34 = $$0249$lcssa;
            $35 = $20;
            $36 = (($34) - ($35)) | 0;
            if ($10) {
                _out_667($0, $20, $36);
            }
            $37 = ($36 | 0) == (0);
            if (!($37)) {
                $$0269$phi = $$0269; $$0243 = $36; $$0247 = $$1248; $$0269 = $$0269$phi;
                continue;
            }
            $38 = HEAP32[$5 >> 2] | 0;
            $39 = ((($38)) + 1 | 0);
            $40 = HEAP8[$39 >> 0] | 0;
            $41 = $40 << 24 >> 24;
            $42 = (_isdigit($41) | 0);
            $43 = ($42 | 0) == (0);
            $$pre342 = HEAP32[$5 >> 2] | 0;
            if ($43) {
                $$0253 = -1; $$1270 = $$0269; $$sink = 1;
            } else {
                $44 = ((($$pre342)) + 2 | 0);
                $45 = HEAP8[$44 >> 0] | 0;
                $46 = ($45 << 24 >> 24) == (36);
                if ($46) {
                    $47 = ((($$pre342)) + 1 | 0);
                    $48 = HEAP8[$47 >> 0] | 0;
                    $49 = $48 << 24 >> 24;
                    $50 = (($49) + -48) | 0;
                    $$0253 = $50; $$1270 = 1; $$sink = 3;
                } else {
                    $$0253 = -1; $$1270 = $$0269; $$sink = 1;
                }
            }
            $51 = (($$pre342) + ($$sink) | 0);
            HEAP32[$5 >> 2] = $51;
            $52 = HEAP8[$51 >> 0] | 0;
            $53 = $52 << 24 >> 24;
            $54 = (($53) + -32) | 0;
            $55 = ($54 >>> 0) > (31);
            $56 = 1 << $54;
            $57 = $56 & 75913;
            $58 = ($57 | 0) == (0);
            $brmerge308 = $55 | $58;
            if ($brmerge308) {
                $$0262$lcssa = 0; $$lcssa291 = $52; $$lcssa292 = $51;
            } else {
                $$0262309 = 0; $60 = $52; $65 = $51;
                while (1) {
                    $59 = $60 << 24 >> 24;
                    $61 = (($59) + -32) | 0;
                    $62 = 1 << $61;
                    $63 = $62 | $$0262309;
                    $64 = ((($65)) + 1 | 0);
                    HEAP32[$5 >> 2] = $64;
                    $66 = HEAP8[$64 >> 0] | 0;
                    $67 = $66 << 24 >> 24;
                    $68 = (($67) + -32) | 0;
                    $69 = ($68 >>> 0) > (31);
                    $70 = 1 << $68;
                    $71 = $70 & 75913;
                    $72 = ($71 | 0) == (0);
                    $brmerge = $69 | $72;
                    if ($brmerge) {
                        $$0262$lcssa = $63; $$lcssa291 = $66; $$lcssa292 = $64;
                        break;
                    } else {
                        $$0262309 = $63; $60 = $66; $65 = $64;
                    }
                }
            }
            $73 = ($$lcssa291 << 24 >> 24) == (42);
            if ($73) {
                $74 = ((($$lcssa292)) + 1 | 0);
                $75 = HEAP8[$74 >> 0] | 0;
                $76 = $75 << 24 >> 24;
                $77 = (_isdigit($76) | 0);
                $78 = ($77 | 0) == (0);
                if ($78) {
                    label = 23;
                } else {
                    $79 = HEAP32[$5 >> 2] | 0;
                    $80 = ((($79)) + 2 | 0);
                    $81 = HEAP8[$80 >> 0] | 0;
                    $82 = ($81 << 24 >> 24) == (36);
                    if ($82) {
                        $83 = ((($79)) + 1 | 0);
                        $84 = HEAP8[$83 >> 0] | 0;
                        $85 = $84 << 24 >> 24;
                        $86 = (($85) + -48) | 0;
                        $87 = (($4) + ($86 << 2) | 0);
                        HEAP32[$87 >> 2] = 10;
                        $88 = HEAP8[$83 >> 0] | 0;
                        $89 = $88 << 24 >> 24;
                        $90 = (($89) + -48) | 0;
                        $91 = (($3) + ($90 << 3) | 0);
                        $92 = $91;
                        $93 = $92;
                        $94 = HEAP32[$93 >> 2] | 0;
                        $95 = (($92) + 4) | 0;
                        $96 = $95;
                        $97 = HEAP32[$96 >> 2] | 0;
                        $98 = ((($79)) + 3 | 0);
                        $$0259 = $94; $$2271 = 1; $storemerge274 = $98;
                    } else {
                        label = 23;
                    }
                }
                if ((label | 0) == 23) {
                    label = 0;
                    $99 = ($$1270 | 0) == (0);
                    if (!($99)) {
                        $$0 = -1;
                        break;
                    }
                    if ($10) {
                        $arglist_current = HEAP32[$2 >> 2] | 0;
                        $100 = $arglist_current;
                        $101 = ((0) + 4 | 0);
                        $expanded4 = $101;
                        $expanded = (($expanded4) - 1) | 0;
                        $102 = (($100) + ($expanded)) | 0;
                        $103 = ((0) + 4 | 0);
                        $expanded8 = $103;
                        $expanded7 = (($expanded8) - 1) | 0;
                        $expanded6 = $expanded7 ^ -1;
                        $104 = $102 & $expanded6;
                        $105 = $104;
                        $106 = HEAP32[$105 >> 2] | 0;
                        $arglist_next = ((($105)) + 4 | 0);
                        HEAP32[$2 >> 2] = $arglist_next;
                        $363 = $106;
                    } else {
                        $363 = 0;
                    }
                    $107 = HEAP32[$5 >> 2] | 0;
                    $108 = ((($107)) + 1 | 0);
                    $$0259 = $363; $$2271 = 0; $storemerge274 = $108;
                }
                HEAP32[$5 >> 2] = $storemerge274;
                $109 = ($$0259 | 0) < (0);
                $110 = $$0262$lcssa | 8192;
                $111 = (0 - ($$0259)) | 0;
                $$$0262 = $109 ? $110 : $$0262$lcssa;
                $$$0259 = $109 ? $111 : $$0259;
                $$1260 = $$$0259; $$1263 = $$$0262; $$3272 = $$2271; $115 = $storemerge274;
            } else {
                $112 = (_getint_668($5) | 0);
                $113 = ($112 | 0) < (0);
                if ($113) {
                    $$0 = -1;
                    break;
                }
                $$pre344 = HEAP32[$5 >> 2] | 0;
                $$1260 = $112; $$1263 = $$0262$lcssa; $$3272 = $$1270; $115 = $$pre344;
            }
            $114 = HEAP8[$115 >> 0] | 0;
            $116 = ($114 << 24 >> 24) == (46);
            do {
                if ($116) {
                    $117 = ((($115)) + 1 | 0);
                    $118 = HEAP8[$117 >> 0] | 0;
                    $119 = ($118 << 24 >> 24) == (42);
                    if (!($119)) {
                        $155 = ((($115)) + 1 | 0);
                        HEAP32[$5 >> 2] = $155;
                        $156 = (_getint_668($5) | 0);
                        $$pre345$pre = HEAP32[$5 >> 2] | 0;
                        $$0254 = $156; $$pre345 = $$pre345$pre;
                        break;
                    }
                    $120 = ((($115)) + 2 | 0);
                    $121 = HEAP8[$120 >> 0] | 0;
                    $122 = $121 << 24 >> 24;
                    $123 = (_isdigit($122) | 0);
                    $124 = ($123 | 0) == (0);
                    if (!($124)) {
                        $125 = HEAP32[$5 >> 2] | 0;
                        $126 = ((($125)) + 3 | 0);
                        $127 = HEAP8[$126 >> 0] | 0;
                        $128 = ($127 << 24 >> 24) == (36);
                        if ($128) {
                            $129 = ((($125)) + 2 | 0);
                            $130 = HEAP8[$129 >> 0] | 0;
                            $131 = $130 << 24 >> 24;
                            $132 = (($131) + -48) | 0;
                            $133 = (($4) + ($132 << 2) | 0);
                            HEAP32[$133 >> 2] = 10;
                            $134 = HEAP8[$129 >> 0] | 0;
                            $135 = $134 << 24 >> 24;
                            $136 = (($135) + -48) | 0;
                            $137 = (($3) + ($136 << 3) | 0);
                            $138 = $137;
                            $139 = $138;
                            $140 = HEAP32[$139 >> 2] | 0;
                            $141 = (($138) + 4) | 0;
                            $142 = $141;
                            $143 = HEAP32[$142 >> 2] | 0;
                            $144 = ((($125)) + 4 | 0);
                            HEAP32[$5 >> 2] = $144;
                            $$0254 = $140; $$pre345 = $144;
                            break;
                        }
                    }
                    $145 = ($$3272 | 0) == (0);
                    if (!($145)) {
                        $$0 = -1;
                        break L1;
                    }
                    if ($10) {
                        $arglist_current2 = HEAP32[$2 >> 2] | 0;
                        $146 = $arglist_current2;
                        $147 = ((0) + 4 | 0);
                        $expanded11 = $147;
                        $expanded10 = (($expanded11) - 1) | 0;
                        $148 = (($146) + ($expanded10)) | 0;
                        $149 = ((0) + 4 | 0);
                        $expanded15 = $149;
                        $expanded14 = (($expanded15) - 1) | 0;
                        $expanded13 = $expanded14 ^ -1;
                        $150 = $148 & $expanded13;
                        $151 = $150;
                        $152 = HEAP32[$151 >> 2] | 0;
                        $arglist_next3 = ((($151)) + 4 | 0);
                        HEAP32[$2 >> 2] = $arglist_next3;
                        $364 = $152;
                    } else {
                        $364 = 0;
                    }
                    $153 = HEAP32[$5 >> 2] | 0;
                    $154 = ((($153)) + 2 | 0);
                    HEAP32[$5 >> 2] = $154;
                    $$0254 = $364; $$pre345 = $154;
                } else {
                    $$0254 = -1; $$pre345 = $115;
                }
            } while (0);
            $$0252 = 0; $158 = $$pre345;
            while (1) {
                $157 = HEAP8[$158 >> 0] | 0;
                $159 = $157 << 24 >> 24;
                $160 = (($159) + -65) | 0;
                $161 = ($160 >>> 0) > (57);
                if ($161) {
                    $$0 = -1;
                    break L1;
                }
                $162 = ((($158)) + 1 | 0);
                HEAP32[$5 >> 2] = $162;
                $163 = HEAP8[$158 >> 0] | 0;
                $164 = $163 << 24 >> 24;
                $165 = (($164) + -65) | 0;
                $166 = ((30780 + (($$0252 * 58) | 0) | 0) + ($165) | 0);
                $167 = HEAP8[$166 >> 0] | 0;
                $168 = $167 & 255;
                $169 = (($168) + -1) | 0;
                $170 = ($169 >>> 0) < (8);
                if ($170) {
                    $$0252 = $168; $158 = $162;
                } else {
                    break;
                }
            }
            $171 = ($167 << 24 >> 24) == (0);
            if ($171) {
                $$0 = -1;
                break;
            }
            $172 = ($167 << 24 >> 24) == (19);
            $173 = ($$0253 | 0) > (-1);
            do {
                if ($172) {
                    if ($173) {
                        $$0 = -1;
                        break L1;
                    } else {
                        label = 50;
                    }
                } else {
                    if ($173) {
                        $174 = (($4) + ($$0253 << 2) | 0);
                        HEAP32[$174 >> 2] = $168;
                        $175 = (($3) + ($$0253 << 3) | 0);
                        $176 = $175;
                        $177 = $176;
                        $178 = HEAP32[$177 >> 2] | 0;
                        $179 = (($176) + 4) | 0;
                        $180 = $179;
                        $181 = HEAP32[$180 >> 2] | 0;
                        $182 = $6;
                        $183 = $182;
                        HEAP32[$183 >> 2] = $178;
                        $184 = (($182) + 4) | 0;
                        $185 = $184;
                        HEAP32[$185 >> 2] = $181;
                        label = 50;
                        break;
                    }
                    if (!($10)) {
                        $$0 = 0;
                        break L1;
                    }
                    _pop_arg_670($6, $168, $2);
                    $$pre346 = HEAP32[$5 >> 2] | 0;
                    $187 = $$pre346;
                }
            } while (0);
            if ((label | 0) == 50) {
                label = 0;
                if ($10) {
                    $187 = $162;
                } else {
                    $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                    continue;
                }
            }
            $186 = ((($187)) + -1 | 0);
            $188 = HEAP8[$186 >> 0] | 0;
            $189 = $188 << 24 >> 24;
            $190 = ($$0252 | 0) != (0);
            $191 = $189 & 15;
            $192 = ($191 | 0) == (3);
            $or$cond276 = $190 & $192;
            $193 = $189 & -33;
            $$0235 = $or$cond276 ? $193 : $189;
            $194 = $$1263 & 8192;
            $195 = ($194 | 0) == (0);
            $196 = $$1263 & -65537;
            $$1263$ = $195 ? $$1263 : $196;
            L73: do {
                switch ($$0235 | 0) {
                    case 110: {
                        $trunc = $$0252 & 255;
                        switch ($trunc << 24 >> 24) {
                            case 0: {
                                $203 = HEAP32[$6 >> 2] | 0;
                                HEAP32[$203 >> 2] = $$1248;
                                $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                                continue L1;
                                break;
                            }
                            case 1: {
                                $204 = HEAP32[$6 >> 2] | 0;
                                HEAP32[$204 >> 2] = $$1248;
                                $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                                continue L1;
                                break;
                            }
                            case 2: {
                                $205 = ($$1248 | 0) < (0);
                                $206 = $205 << 31 >> 31;
                                $207 = HEAP32[$6 >> 2] | 0;
                                $208 = $207;
                                $209 = $208;
                                HEAP32[$209 >> 2] = $$1248;
                                $210 = (($208) + 4) | 0;
                                $211 = $210;
                                HEAP32[$211 >> 2] = $206;
                                $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                                continue L1;
                                break;
                            }
                            case 3: {
                                $212 = $$1248 & 65535;
                                $213 = HEAP32[$6 >> 2] | 0;
                                HEAP16[$213 >> 1] = $212;
                                $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                                continue L1;
                                break;
                            }
                            case 4: {
                                $214 = $$1248 & 255;
                                $215 = HEAP32[$6 >> 2] | 0;
                                HEAP8[$215 >> 0] = $214;
                                $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                                continue L1;
                                break;
                            }
                            case 6: {
                                $216 = HEAP32[$6 >> 2] | 0;
                                HEAP32[$216 >> 2] = $$1248;
                                $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                                continue L1;
                                break;
                            }
                            case 7: {
                                $217 = ($$1248 | 0) < (0);
                                $218 = $217 << 31 >> 31;
                                $219 = HEAP32[$6 >> 2] | 0;
                                $220 = $219;
                                $221 = $220;
                                HEAP32[$221 >> 2] = $$1248;
                                $222 = (($220) + 4) | 0;
                                $223 = $222;
                                HEAP32[$223 >> 2] = $218;
                                $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                                continue L1;
                                break;
                            }
                            default: {
                                $$0243 = 0; $$0247 = $$1248; $$0269 = $$3272;
                                continue L1;
                            }
                        }
                        break;
                    }
                    case 112: {
                        $224 = ($$0254 >>> 0) > (8);
                        $225 = $224 ? $$0254 : 8;
                        $226 = $$1263$ | 8;
                        $$1236 = 120; $$1255 = $225; $$3265 = $226;
                        label = 62;
                        break;
                    }
                    case 88: case 120: {
                        $$1236 = $$0235; $$1255 = $$0254; $$3265 = $$1263$;
                        label = 62;
                        break;
                    }
                    case 111: {
                        $242 = $6;
                        $243 = $242;
                        $244 = HEAP32[$243 >> 2] | 0;
                        $245 = (($242) + 4) | 0;
                        $246 = $245;
                        $247 = HEAP32[$246 >> 2] | 0;
                        $248 = (_fmt_o($244, $247, $11) | 0);
                        $249 = $$1263$ & 8;
                        $250 = ($249 | 0) == (0);
                        $251 = $248;
                        $252 = (($12) - ($251)) | 0;
                        $253 = ($$0254 | 0) > ($252 | 0);
                        $254 = (($252) + 1) | 0;
                        $255 = $250 | $253;
                        $$0254$$0254$ = $255 ? $$0254 : $254;
                        $$0228 = $248; $$1233 = 0; $$1238 = 31244; $$2256 = $$0254$$0254$; $$4266 = $$1263$; $280 = $244; $282 = $247;
                        label = 68;
                        break;
                    }
                    case 105: case 100: {
                        $256 = $6;
                        $257 = $256;
                        $258 = HEAP32[$257 >> 2] | 0;
                        $259 = (($256) + 4) | 0;
                        $260 = $259;
                        $261 = HEAP32[$260 >> 2] | 0;
                        $262 = ($261 | 0) < (0);
                        if ($262) {
                            $263 = (_i64Subtract(0, 0, ($258 | 0), ($261 | 0)) | 0);
                            $264 = tempRet0;
                            $265 = $6;
                            $266 = $265;
                            HEAP32[$266 >> 2] = $263;
                            $267 = (($265) + 4) | 0;
                            $268 = $267;
                            HEAP32[$268 >> 2] = $264;
                            $$0232 = 1; $$0237 = 31244; $275 = $263; $276 = $264;
                            label = 67;
                            break L73;
                        } else {
                            $269 = $$1263$ & 2048;
                            $270 = ($269 | 0) == (0);
                            $271 = $$1263$ & 1;
                            $272 = ($271 | 0) == (0);
                            $$ = $272 ? 31244 : (31246);
                            $$$ = $270 ? $$ : (31245);
                            $273 = $$1263$ & 2049;
                            $274 = ($273 | 0) != (0);
                            $$279$ = $274 & 1;
                            $$0232 = $$279$; $$0237 = $$$; $275 = $258; $276 = $261;
                            label = 67;
                            break L73;
                        }
                        break;
                    }
                    case 117: {
                        $197 = $6;
                        $198 = $197;
                        $199 = HEAP32[$198 >> 2] | 0;
                        $200 = (($197) + 4) | 0;
                        $201 = $200;
                        $202 = HEAP32[$201 >> 2] | 0;
                        $$0232 = 0; $$0237 = 31244; $275 = $199; $276 = $202;
                        label = 67;
                        break;
                    }
                    case 99: {
                        $292 = $6;
                        $293 = $292;
                        $294 = HEAP32[$293 >> 2] | 0;
                        $295 = (($292) + 4) | 0;
                        $296 = $295;
                        $297 = HEAP32[$296 >> 2] | 0;
                        $298 = $294 & 255;
                        HEAP8[$13 >> 0] = $298;
                        $$2 = $13; $$2234 = 0; $$2239 = 31244; $$2251 = $11; $$5 = 1; $$6268 = $196;
                        break;
                    }
                    case 109: {
                        $299 = (___errno_location() | 0);
                        $300 = HEAP32[$299 >> 2] | 0;
                        $301 = (_strerror($300) | 0);
                        $$1 = $301;
                        label = 72;
                        break;
                    }
                    case 115: {
                        $302 = HEAP32[$6 >> 2] | 0;
                        $303 = ($302 | 0) != (0 | 0);
                        $304 = $303 ? $302 : 31254;
                        $$1 = $304;
                        label = 72;
                        break;
                    }
                    case 67: {
                        $311 = $6;
                        $312 = $311;
                        $313 = HEAP32[$312 >> 2] | 0;
                        $314 = (($311) + 4) | 0;
                        $315 = $314;
                        $316 = HEAP32[$315 >> 2] | 0;
                        HEAP32[$8 >> 2] = $313;
                        HEAP32[$14 >> 2] = 0;
                        HEAP32[$6 >> 2] = $8;
                        $$4258354 = -1; $365 = $8;
                        label = 76;
                        break;
                    }
                    case 83: {
                        $$pre348 = HEAP32[$6 >> 2] | 0;
                        $317 = ($$0254 | 0) == (0);
                        if ($317) {
                            _pad($0, 32, $$1260, 0, $$1263$);
                            $$0240$lcssa356 = 0;
                            label = 85;
                        } else {
                            $$4258354 = $$0254; $365 = $$pre348;
                            label = 76;
                        }
                        break;
                    }
                    case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101: {
                        $339 = +HEAPF64[$6 >> 3];
                        $340 = (_fmt_fp($0, $339, $$1260, $$0254, $$1263$, $$0235) | 0);
                        $$0243 = $340; $$0247 = $$1248; $$0269 = $$3272;
                        continue L1;
                        break;
                    }
                    default: {
                        $$2 = $20; $$2234 = 0; $$2239 = 31244; $$2251 = $11; $$5 = $$0254; $$6268 = $$1263$;
                    }
                }
            } while (0);
            L97: do {
                if ((label | 0) == 62) {
                    label = 0;
                    $227 = $6;
                    $228 = $227;
                    $229 = HEAP32[$228 >> 2] | 0;
                    $230 = (($227) + 4) | 0;
                    $231 = $230;
                    $232 = HEAP32[$231 >> 2] | 0;
                    $233 = $$1236 & 32;
                    $234 = (_fmt_x($229, $232, $11, $233) | 0);
                    $235 = ($229 | 0) == (0);
                    $236 = ($232 | 0) == (0);
                    $237 = $235 & $236;
                    $238 = $$3265 & 8;
                    $239 = ($238 | 0) == (0);
                    $or$cond278 = $239 | $237;
                    $240 = $$1236 >> 4;
                    $241 = (31244 + ($240) | 0);
                    $$286 = $or$cond278 ? 31244 : $241;
                    $$287 = $or$cond278 ? 0 : 2;
                    $$0228 = $234; $$1233 = $$287; $$1238 = $$286; $$2256 = $$1255; $$4266 = $$3265; $280 = $229; $282 = $232;
                    label = 68;
                }
                else if ((label | 0) == 67) {
                    label = 0;
                    $277 = (_fmt_u($275, $276, $11) | 0);
                    $$0228 = $277; $$1233 = $$0232; $$1238 = $$0237; $$2256 = $$0254; $$4266 = $$1263$; $280 = $275; $282 = $276;
                    label = 68;
                }
                else if ((label | 0) == 72) {
                    label = 0;
                    $305 = (_memchr($$1, 0, $$0254) | 0);
                    $306 = ($305 | 0) == (0 | 0);
                    $307 = $305;
                    $308 = $$1;
                    $309 = (($307) - ($308)) | 0;
                    $310 = (($$1) + ($$0254) | 0);
                    $$3257 = $306 ? $$0254 : $309;
                    $$1250 = $306 ? $310 : $305;
                    $$2 = $$1; $$2234 = 0; $$2239 = 31244; $$2251 = $$1250; $$5 = $$3257; $$6268 = $196;
                }
                else if ((label | 0) == 76) {
                    label = 0;
                    $$0229316 = $365; $$0240315 = 0; $$1244314 = 0;
                    while (1) {
                        $318 = HEAP32[$$0229316 >> 2] | 0;
                        $319 = ($318 | 0) == (0);
                        if ($319) {
                            $$0240$lcssa = $$0240315; $$2245 = $$1244314;
                            break;
                        }
                        $320 = (_wctomb($9, $318) | 0);
                        $321 = ($320 | 0) < (0);
                        $322 = (($$4258354) - ($$0240315)) | 0;
                        $323 = ($320 >>> 0) > ($322 >>> 0);
                        $or$cond281 = $321 | $323;
                        if ($or$cond281) {
                            $$0240$lcssa = $$0240315; $$2245 = $320;
                            break;
                        }
                        $324 = ((($$0229316)) + 4 | 0);
                        $325 = (($320) + ($$0240315)) | 0;
                        $326 = ($$4258354 >>> 0) > ($325 >>> 0);
                        if ($326) {
                            $$0229316 = $324; $$0240315 = $325; $$1244314 = $320;
                        } else {
                            $$0240$lcssa = $325; $$2245 = $320;
                            break;
                        }
                    }
                    $327 = ($$2245 | 0) < (0);
                    if ($327) {
                        $$0 = -1;
                        break L1;
                    }
                    _pad($0, 32, $$1260, $$0240$lcssa, $$1263$);
                    $328 = ($$0240$lcssa | 0) == (0);
                    if ($328) {
                        $$0240$lcssa356 = 0;
                        label = 85;
                    } else {
                        $$1230327 = $365; $$1241326 = 0;
                        while (1) {
                            $329 = HEAP32[$$1230327 >> 2] | 0;
                            $330 = ($329 | 0) == (0);
                            if ($330) {
                                $$0240$lcssa356 = $$0240$lcssa;
                                label = 85;
                                break L97;
                            }
                            $331 = (_wctomb($9, $329) | 0);
                            $332 = (($331) + ($$1241326)) | 0;
                            $333 = ($332 | 0) > ($$0240$lcssa | 0);
                            if ($333) {
                                $$0240$lcssa356 = $$0240$lcssa;
                                label = 85;
                                break L97;
                            }
                            $334 = ((($$1230327)) + 4 | 0);
                            _out_667($0, $9, $331);
                            $335 = ($332 >>> 0) < ($$0240$lcssa >>> 0);
                            if ($335) {
                                $$1230327 = $334; $$1241326 = $332;
                            } else {
                                $$0240$lcssa356 = $$0240$lcssa;
                                label = 85;
                                break;
                            }
                        }
                    }
                }
            } while (0);
            if ((label | 0) == 68) {
                label = 0;
                $278 = ($$2256 | 0) > (-1);
                $279 = $$4266 & -65537;
                $$$4266 = $278 ? $279 : $$4266;
                $281 = ($280 | 0) != (0);
                $283 = ($282 | 0) != (0);
                $284 = $281 | $283;
                $285 = ($$2256 | 0) != (0);
                $or$cond = $285 | $284;
                $286 = $$0228;
                $287 = (($12) - ($286)) | 0;
                $288 = $284 ^ 1;
                $289 = $288 & 1;
                $290 = (($287) + ($289)) | 0;
                $291 = ($$2256 | 0) > ($290 | 0);
                $$2256$ = $291 ? $$2256 : $290;
                $$2256$$$2256 = $or$cond ? $$2256$ : $$2256;
                $$0228$ = $or$cond ? $$0228 : $11;
                $$2 = $$0228$; $$2234 = $$1233; $$2239 = $$1238; $$2251 = $11; $$5 = $$2256$$$2256; $$6268 = $$$4266;
            }
            else if ((label | 0) == 85) {
                label = 0;
                $336 = $$1263$ ^ 8192;
                _pad($0, 32, $$1260, $$0240$lcssa356, $336);
                $337 = ($$1260 | 0) > ($$0240$lcssa356 | 0);
                $338 = $337 ? $$1260 : $$0240$lcssa356;
                $$0243 = $338; $$0247 = $$1248; $$0269 = $$3272;
                continue;
            }
            $341 = $$2251;
            $342 = $$2;
            $343 = (($341) - ($342)) | 0;
            $344 = ($$5 | 0) < ($343 | 0);
            $$$5 = $344 ? $343 : $$5;
            $345 = (($$$5) + ($$2234)) | 0;
            $346 = ($$1260 | 0) < ($345 | 0);
            $$2261 = $346 ? $345 : $$1260;
            _pad($0, 32, $$2261, $345, $$6268);
            _out_667($0, $$2239, $$2234);
            $347 = $$6268 ^ 65536;
            _pad($0, 48, $$2261, $345, $347);
            _pad($0, 48, $$$5, $343, 0);
            _out_667($0, $$2, $343);
            $348 = $$6268 ^ 8192;
            _pad($0, 32, $$2261, $345, $348);
            $$0243 = $$2261; $$0247 = $$1248; $$0269 = $$3272;
        }
        L116: do {
            if ((label | 0) == 88) {
                $349 = ($0 | 0) == (0 | 0);
                if ($349) {
                    $350 = ($$0269 | 0) == (0);
                    if ($350) {
                        $$0 = 0;
                    } else {
                        $$2242302 = 1;
                        while (1) {
                            $351 = (($4) + ($$2242302 << 2) | 0);
                            $352 = HEAP32[$351 >> 2] | 0;
                            $353 = ($352 | 0) == (0);
                            if ($353) {
                                $$2242$lcssa = $$2242302;
                                break;
                            }
                            $355 = (($3) + ($$2242302 << 3) | 0);
                            _pop_arg_670($355, $352, $2);
                            $356 = (($$2242302) + 1) | 0;
                            $357 = ($$2242302 | 0) < (9);
                            if ($357) {
                                $$2242302 = $356;
                            } else {
                                $$2242$lcssa = $356;
                                break;
                            }
                        }
                        $354 = ($$2242$lcssa | 0) < (10);
                        if ($354) {
                            $$3300 = $$2242$lcssa;
                            while (1) {
                                $360 = (($4) + ($$3300 << 2) | 0);
                                $361 = HEAP32[$360 >> 2] | 0;
                                $362 = ($361 | 0) == (0);
                                if (!($362)) {
                                    $$0 = -1;
                                    break L116;
                                }
                                $358 = (($$3300) + 1) | 0;
                                $359 = ($$3300 | 0) < (9);
                                if ($359) {
                                    $$3300 = $358;
                                } else {
                                    $$0 = 1;
                                    break;
                                }
                            }
                        } else {
                            $$0 = 1;
                        }
                    }
                } else {
                    $$0 = $$1248;
                }
            }
        } while (0);
        STACKTOP = sp; return ($$0 | 0);
    }
    function ___lockfile($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return 0;
    }
    function ___unlockfile($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return;
    }
    function _out_667($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = HEAP32[$0 >> 2] | 0;
        $4 = $3 & 32;
        $5 = ($4 | 0) == (0);
        if ($5) {
            (___fwritex($1, $2, $0) | 0);
        }
        return;
    }
    function _getint_668($0) {
        $0 = $0 | 0;
        var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = HEAP32[$0 >> 2] | 0;
        $2 = HEAP8[$1 >> 0] | 0;
        $3 = $2 << 24 >> 24;
        $4 = (_isdigit($3) | 0);
        $5 = ($4 | 0) == (0);
        if ($5) {
            $$0$lcssa = 0;
        } else {
            $$04 = 0;
            while (1) {
                $6 = ($$04 * 10) | 0;
                $7 = HEAP32[$0 >> 2] | 0;
                $8 = HEAP8[$7 >> 0] | 0;
                $9 = $8 << 24 >> 24;
                $10 = (($6) + -48) | 0;
                $11 = (($10) + ($9)) | 0;
                $12 = ((($7)) + 1 | 0);
                HEAP32[$0 >> 2] = $12;
                $13 = HEAP8[$12 >> 0] | 0;
                $14 = $13 << 24 >> 24;
                $15 = (_isdigit($14) | 0);
                $16 = ($15 | 0) == (0);
                if ($16) {
                    $$0$lcssa = $11;
                    break;
                } else {
                    $$04 = $11;
                }
            }
        }
        return ($$0$lcssa | 0);
    }
    function _pop_arg_670($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
        var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
        var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
        var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
        var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
        var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
        var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
        var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
        var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($1 >>> 0) > (20);
        L1: do {
            if (!($3)) {
                do {
                    switch ($1 | 0) {
                        case 9: {
                            $arglist_current = HEAP32[$2 >> 2] | 0;
                            $4 = $arglist_current;
                            $5 = ((0) + 4 | 0);
                            $expanded28 = $5;
                            $expanded = (($expanded28) - 1) | 0;
                            $6 = (($4) + ($expanded)) | 0;
                            $7 = ((0) + 4 | 0);
                            $expanded32 = $7;
                            $expanded31 = (($expanded32) - 1) | 0;
                            $expanded30 = $expanded31 ^ -1;
                            $8 = $6 & $expanded30;
                            $9 = $8;
                            $10 = HEAP32[$9 >> 2] | 0;
                            $arglist_next = ((($9)) + 4 | 0);
                            HEAP32[$2 >> 2] = $arglist_next;
                            HEAP32[$0 >> 2] = $10;
                            break L1;
                            break;
                        }
                        case 10: {
                            $arglist_current2 = HEAP32[$2 >> 2] | 0;
                            $11 = $arglist_current2;
                            $12 = ((0) + 4 | 0);
                            $expanded35 = $12;
                            $expanded34 = (($expanded35) - 1) | 0;
                            $13 = (($11) + ($expanded34)) | 0;
                            $14 = ((0) + 4 | 0);
                            $expanded39 = $14;
                            $expanded38 = (($expanded39) - 1) | 0;
                            $expanded37 = $expanded38 ^ -1;
                            $15 = $13 & $expanded37;
                            $16 = $15;
                            $17 = HEAP32[$16 >> 2] | 0;
                            $arglist_next3 = ((($16)) + 4 | 0);
                            HEAP32[$2 >> 2] = $arglist_next3;
                            $18 = ($17 | 0) < (0);
                            $19 = $18 << 31 >> 31;
                            $20 = $0;
                            $21 = $20;
                            HEAP32[$21 >> 2] = $17;
                            $22 = (($20) + 4) | 0;
                            $23 = $22;
                            HEAP32[$23 >> 2] = $19;
                            break L1;
                            break;
                        }
                        case 11: {
                            $arglist_current5 = HEAP32[$2 >> 2] | 0;
                            $24 = $arglist_current5;
                            $25 = ((0) + 4 | 0);
                            $expanded42 = $25;
                            $expanded41 = (($expanded42) - 1) | 0;
                            $26 = (($24) + ($expanded41)) | 0;
                            $27 = ((0) + 4 | 0);
                            $expanded46 = $27;
                            $expanded45 = (($expanded46) - 1) | 0;
                            $expanded44 = $expanded45 ^ -1;
                            $28 = $26 & $expanded44;
                            $29 = $28;
                            $30 = HEAP32[$29 >> 2] | 0;
                            $arglist_next6 = ((($29)) + 4 | 0);
                            HEAP32[$2 >> 2] = $arglist_next6;
                            $31 = $0;
                            $32 = $31;
                            HEAP32[$32 >> 2] = $30;
                            $33 = (($31) + 4) | 0;
                            $34 = $33;
                            HEAP32[$34 >> 2] = 0;
                            break L1;
                            break;
                        }
                        case 12: {
                            $arglist_current8 = HEAP32[$2 >> 2] | 0;
                            $35 = $arglist_current8;
                            $36 = ((0) + 8 | 0);
                            $expanded49 = $36;
                            $expanded48 = (($expanded49) - 1) | 0;
                            $37 = (($35) + ($expanded48)) | 0;
                            $38 = ((0) + 8 | 0);
                            $expanded53 = $38;
                            $expanded52 = (($expanded53) - 1) | 0;
                            $expanded51 = $expanded52 ^ -1;
                            $39 = $37 & $expanded51;
                            $40 = $39;
                            $41 = $40;
                            $42 = $41;
                            $43 = HEAP32[$42 >> 2] | 0;
                            $44 = (($41) + 4) | 0;
                            $45 = $44;
                            $46 = HEAP32[$45 >> 2] | 0;
                            $arglist_next9 = ((($40)) + 8 | 0);
                            HEAP32[$2 >> 2] = $arglist_next9;
                            $47 = $0;
                            $48 = $47;
                            HEAP32[$48 >> 2] = $43;
                            $49 = (($47) + 4) | 0;
                            $50 = $49;
                            HEAP32[$50 >> 2] = $46;
                            break L1;
                            break;
                        }
                        case 13: {
                            $arglist_current11 = HEAP32[$2 >> 2] | 0;
                            $51 = $arglist_current11;
                            $52 = ((0) + 4 | 0);
                            $expanded56 = $52;
                            $expanded55 = (($expanded56) - 1) | 0;
                            $53 = (($51) + ($expanded55)) | 0;
                            $54 = ((0) + 4 | 0);
                            $expanded60 = $54;
                            $expanded59 = (($expanded60) - 1) | 0;
                            $expanded58 = $expanded59 ^ -1;
                            $55 = $53 & $expanded58;
                            $56 = $55;
                            $57 = HEAP32[$56 >> 2] | 0;
                            $arglist_next12 = ((($56)) + 4 | 0);
                            HEAP32[$2 >> 2] = $arglist_next12;
                            $58 = $57 & 65535;
                            $59 = $58 << 16 >> 16;
                            $60 = ($59 | 0) < (0);
                            $61 = $60 << 31 >> 31;
                            $62 = $0;
                            $63 = $62;
                            HEAP32[$63 >> 2] = $59;
                            $64 = (($62) + 4) | 0;
                            $65 = $64;
                            HEAP32[$65 >> 2] = $61;
                            break L1;
                            break;
                        }
                        case 14: {
                            $arglist_current14 = HEAP32[$2 >> 2] | 0;
                            $66 = $arglist_current14;
                            $67 = ((0) + 4 | 0);
                            $expanded63 = $67;
                            $expanded62 = (($expanded63) - 1) | 0;
                            $68 = (($66) + ($expanded62)) | 0;
                            $69 = ((0) + 4 | 0);
                            $expanded67 = $69;
                            $expanded66 = (($expanded67) - 1) | 0;
                            $expanded65 = $expanded66 ^ -1;
                            $70 = $68 & $expanded65;
                            $71 = $70;
                            $72 = HEAP32[$71 >> 2] | 0;
                            $arglist_next15 = ((($71)) + 4 | 0);
                            HEAP32[$2 >> 2] = $arglist_next15;
                            $$mask31 = $72 & 65535;
                            $73 = $0;
                            $74 = $73;
                            HEAP32[$74 >> 2] = $$mask31;
                            $75 = (($73) + 4) | 0;
                            $76 = $75;
                            HEAP32[$76 >> 2] = 0;
                            break L1;
                            break;
                        }
                        case 15: {
                            $arglist_current17 = HEAP32[$2 >> 2] | 0;
                            $77 = $arglist_current17;
                            $78 = ((0) + 4 | 0);
                            $expanded70 = $78;
                            $expanded69 = (($expanded70) - 1) | 0;
                            $79 = (($77) + ($expanded69)) | 0;
                            $80 = ((0) + 4 | 0);
                            $expanded74 = $80;
                            $expanded73 = (($expanded74) - 1) | 0;
                            $expanded72 = $expanded73 ^ -1;
                            $81 = $79 & $expanded72;
                            $82 = $81;
                            $83 = HEAP32[$82 >> 2] | 0;
                            $arglist_next18 = ((($82)) + 4 | 0);
                            HEAP32[$2 >> 2] = $arglist_next18;
                            $84 = $83 & 255;
                            $85 = $84 << 24 >> 24;
                            $86 = ($85 | 0) < (0);
                            $87 = $86 << 31 >> 31;
                            $88 = $0;
                            $89 = $88;
                            HEAP32[$89 >> 2] = $85;
                            $90 = (($88) + 4) | 0;
                            $91 = $90;
                            HEAP32[$91 >> 2] = $87;
                            break L1;
                            break;
                        }
                        case 16: {
                            $arglist_current20 = HEAP32[$2 >> 2] | 0;
                            $92 = $arglist_current20;
                            $93 = ((0) + 4 | 0);
                            $expanded77 = $93;
                            $expanded76 = (($expanded77) - 1) | 0;
                            $94 = (($92) + ($expanded76)) | 0;
                            $95 = ((0) + 4 | 0);
                            $expanded81 = $95;
                            $expanded80 = (($expanded81) - 1) | 0;
                            $expanded79 = $expanded80 ^ -1;
                            $96 = $94 & $expanded79;
                            $97 = $96;
                            $98 = HEAP32[$97 >> 2] | 0;
                            $arglist_next21 = ((($97)) + 4 | 0);
                            HEAP32[$2 >> 2] = $arglist_next21;
                            $$mask = $98 & 255;
                            $99 = $0;
                            $100 = $99;
                            HEAP32[$100 >> 2] = $$mask;
                            $101 = (($99) + 4) | 0;
                            $102 = $101;
                            HEAP32[$102 >> 2] = 0;
                            break L1;
                            break;
                        }
                        case 17: {
                            $arglist_current23 = HEAP32[$2 >> 2] | 0;
                            $103 = $arglist_current23;
                            $104 = ((0) + 8 | 0);
                            $expanded84 = $104;
                            $expanded83 = (($expanded84) - 1) | 0;
                            $105 = (($103) + ($expanded83)) | 0;
                            $106 = ((0) + 8 | 0);
                            $expanded88 = $106;
                            $expanded87 = (($expanded88) - 1) | 0;
                            $expanded86 = $expanded87 ^ -1;
                            $107 = $105 & $expanded86;
                            $108 = $107;
                            $109 = +HEAPF64[$108 >> 3];
                            $arglist_next24 = ((($108)) + 8 | 0);
                            HEAP32[$2 >> 2] = $arglist_next24;
                            HEAPF64[$0 >> 3] = $109;
                            break L1;
                            break;
                        }
                        case 18: {
                            $arglist_current26 = HEAP32[$2 >> 2] | 0;
                            $110 = $arglist_current26;
                            $111 = ((0) + 8 | 0);
                            $expanded91 = $111;
                            $expanded90 = (($expanded91) - 1) | 0;
                            $112 = (($110) + ($expanded90)) | 0;
                            $113 = ((0) + 8 | 0);
                            $expanded95 = $113;
                            $expanded94 = (($expanded95) - 1) | 0;
                            $expanded93 = $expanded94 ^ -1;
                            $114 = $112 & $expanded93;
                            $115 = $114;
                            $116 = +HEAPF64[$115 >> 3];
                            $arglist_next27 = ((($115)) + 8 | 0);
                            HEAP32[$2 >> 2] = $arglist_next27;
                            HEAPF64[$0 >> 3] = $116;
                            break L1;
                            break;
                        }
                        default: {
                            break L1;
                        }
                    }
                } while (0);
            }
        } while (0);
        return;
    }
    function _fmt_x($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        $4 = ($0 | 0) == (0);
        $5 = ($1 | 0) == (0);
        $6 = $4 & $5;
        if ($6) {
            $$05$lcssa = $2;
        } else {
            $$056 = $2; $15 = $1; $8 = $0;
            while (1) {
                $7 = $8 & 15;
                $9 = (31296 + ($7) | 0);
                $10 = HEAP8[$9 >> 0] | 0;
                $11 = $10 & 255;
                $12 = $11 | $3;
                $13 = $12 & 255;
                $14 = ((($$056)) + -1 | 0);
                HEAP8[$14 >> 0] = $13;
                $16 = (_bitshift64Lshr(($8 | 0), ($15 | 0), 4) | 0);
                $17 = tempRet0;
                $18 = ($16 | 0) == (0);
                $19 = ($17 | 0) == (0);
                $20 = $18 & $19;
                if ($20) {
                    $$05$lcssa = $14;
                    break;
                } else {
                    $$056 = $14; $15 = $17; $8 = $16;
                }
            }
        }
        return ($$05$lcssa | 0);
    }
    function _fmt_o($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($0 | 0) == (0);
        $4 = ($1 | 0) == (0);
        $5 = $3 & $4;
        if ($5) {
            $$0$lcssa = $2;
        } else {
            $$06 = $2; $11 = $1; $7 = $0;
            while (1) {
                $6 = $7 & 255;
                $8 = $6 & 7;
                $9 = $8 | 48;
                $10 = ((($$06)) + -1 | 0);
                HEAP8[$10 >> 0] = $9;
                $12 = (_bitshift64Lshr(($7 | 0), ($11 | 0), 3) | 0);
                $13 = tempRet0;
                $14 = ($12 | 0) == (0);
                $15 = ($13 | 0) == (0);
                $16 = $14 & $15;
                if ($16) {
                    $$0$lcssa = $10;
                    break;
                } else {
                    $$06 = $10; $11 = $13; $7 = $12;
                }
            }
        }
        return ($$0$lcssa | 0);
    }
    function _fmt_u($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($1 >>> 0) > (0);
        $4 = ($0 >>> 0) > (4294967295);
        $5 = ($1 | 0) == (0);
        $6 = $5 & $4;
        $7 = $3 | $6;
        if ($7) {
            $$0914 = $2; $8 = $0; $9 = $1;
            while (1) {
                $10 = (___uremdi3(($8 | 0), ($9 | 0), 10, 0) | 0);
                $11 = tempRet0;
                $12 = $10 & 255;
                $13 = $12 | 48;
                $14 = ((($$0914)) + -1 | 0);
                HEAP8[$14 >> 0] = $13;
                $15 = (___udivdi3(($8 | 0), ($9 | 0), 10, 0) | 0);
                $16 = tempRet0;
                $17 = ($9 >>> 0) > (9);
                $18 = ($8 >>> 0) > (4294967295);
                $19 = ($9 | 0) == (9);
                $20 = $19 & $18;
                $21 = $17 | $20;
                if ($21) {
                    $$0914 = $14; $8 = $15; $9 = $16;
                } else {
                    break;
                }
            }
            $$010$lcssa$off0 = $15; $$09$lcssa = $14;
        } else {
            $$010$lcssa$off0 = $0; $$09$lcssa = $2;
        }
        $22 = ($$010$lcssa$off0 | 0) == (0);
        if ($22) {
            $$1$lcssa = $$09$lcssa;
        } else {
            $$012 = $$010$lcssa$off0; $$111 = $$09$lcssa;
            while (1) {
                $23 = (($$012 >>> 0) % 10) & -1;
                $24 = $23 | 48;
                $25 = $24 & 255;
                $26 = ((($$111)) + -1 | 0);
                HEAP8[$26 >> 0] = $25;
                $27 = (($$012 >>> 0) / 10) & -1;
                $28 = ($$012 >>> 0) < (10);
                if ($28) {
                    $$1$lcssa = $26;
                    break;
                } else {
                    $$012 = $27; $$111 = $26;
                }
            }
        }
        return ($$1$lcssa | 0);
    }
    function _strerror($0) {
        $0 = $0 | 0;
        var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = (___pthread_self_720() | 0);
        $2 = ((($1)) + 188 | 0);
        $3 = HEAP32[$2 >> 2] | 0;
        $4 = (___strerror_l($0, $3) | 0);
        return ($4 | 0);
    }
    function _memchr($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
        var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
        var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = $1 & 255;
        $4 = $0;
        $5 = $4 & 3;
        $6 = ($5 | 0) != (0);
        $7 = ($2 | 0) != (0);
        $or$cond53 = $7 & $6;
        L1: do {
            if ($or$cond53) {
                $8 = $1 & 255;
                $$03555 = $0; $$03654 = $2;
                while (1) {
                    $9 = HEAP8[$$03555 >> 0] | 0;
                    $10 = ($9 << 24 >> 24) == ($8 << 24 >> 24);
                    if ($10) {
                        $$035$lcssa65 = $$03555; $$036$lcssa64 = $$03654;
                        label = 6;
                        break L1;
                    }
                    $11 = ((($$03555)) + 1 | 0);
                    $12 = (($$03654) + -1) | 0;
                    $13 = $11;
                    $14 = $13 & 3;
                    $15 = ($14 | 0) != (0);
                    $16 = ($12 | 0) != (0);
                    $or$cond = $16 & $15;
                    if ($or$cond) {
                        $$03555 = $11; $$03654 = $12;
                    } else {
                        $$035$lcssa = $11; $$036$lcssa = $12; $$lcssa = $16;
                        label = 5;
                        break;
                    }
                }
            } else {
                $$035$lcssa = $0; $$036$lcssa = $2; $$lcssa = $7;
                label = 5;
            }
        } while (0);
        if ((label | 0) == 5) {
            if ($$lcssa) {
                $$035$lcssa65 = $$035$lcssa; $$036$lcssa64 = $$036$lcssa;
                label = 6;
            } else {
                $$2 = $$035$lcssa; $$3 = 0;
            }
        }
        L8: do {
            if ((label | 0) == 6) {
                $17 = HEAP8[$$035$lcssa65 >> 0] | 0;
                $18 = $1 & 255;
                $19 = ($17 << 24 >> 24) == ($18 << 24 >> 24);
                if ($19) {
                    $$2 = $$035$lcssa65; $$3 = $$036$lcssa64;
                } else {
                    $20 = Math_imul($3, 16843009) | 0;
                    $21 = ($$036$lcssa64 >>> 0) > (3);
                    L11: do {
                        if ($21) {
                            $$046 = $$035$lcssa65; $$13745 = $$036$lcssa64;
                            while (1) {
                                $22 = HEAP32[$$046 >> 2] | 0;
                                $23 = $22 ^ $20;
                                $24 = (($23) + -16843009) | 0;
                                $25 = $23 & -2139062144;
                                $26 = $25 ^ -2139062144;
                                $27 = $26 & $24;
                                $28 = ($27 | 0) == (0);
                                if (!($28)) {
                                    break;
                                }
                                $29 = ((($$046)) + 4 | 0);
                                $30 = (($$13745) + -4) | 0;
                                $31 = ($30 >>> 0) > (3);
                                if ($31) {
                                    $$046 = $29; $$13745 = $30;
                                } else {
                                    $$0$lcssa = $29; $$137$lcssa = $30;
                                    label = 11;
                                    break L11;
                                }
                            }
                            $$140 = $$046; $$23839 = $$13745;
                        } else {
                            $$0$lcssa = $$035$lcssa65; $$137$lcssa = $$036$lcssa64;
                            label = 11;
                        }
                    } while (0);
                    if ((label | 0) == 11) {
                        $32 = ($$137$lcssa | 0) == (0);
                        if ($32) {
                            $$2 = $$0$lcssa; $$3 = 0;
                            break;
                        } else {
                            $$140 = $$0$lcssa; $$23839 = $$137$lcssa;
                        }
                    }
                    while (1) {
                        $33 = HEAP8[$$140 >> 0] | 0;
                        $34 = ($33 << 24 >> 24) == ($18 << 24 >> 24);
                        if ($34) {
                            $$2 = $$140; $$3 = $$23839;
                            break L8;
                        }
                        $35 = ((($$140)) + 1 | 0);
                        $36 = (($$23839) + -1) | 0;
                        $37 = ($36 | 0) == (0);
                        if ($37) {
                            $$2 = $35; $$3 = 0;
                            break;
                        } else {
                            $$140 = $35; $$23839 = $36;
                        }
                    }
                }
            }
        } while (0);
        $38 = ($$3 | 0) != (0);
        $39 = $38 ? $$2 : 0;
        return ($39 | 0);
    }
    function _pad($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 256 | 0;
        $5 = sp;
        $6 = $4 & 73728;
        $7 = ($6 | 0) == (0);
        $8 = ($2 | 0) > ($3 | 0);
        $or$cond = $8 & $7;
        if ($or$cond) {
            $9 = (($2) - ($3)) | 0;
            $10 = $1 << 24 >> 24;
            $11 = ($9 >>> 0) < (256);
            $12 = $11 ? $9 : 256;
            (_memset(($5 | 0), ($10 | 0), ($12 | 0)) | 0);
            $13 = ($9 >>> 0) > (255);
            if ($13) {
                $14 = (($2) - ($3)) | 0;
                $$011 = $9;
                while (1) {
                    _out_667($0, $5, 256);
                    $15 = (($$011) + -256) | 0;
                    $16 = ($15 >>> 0) > (255);
                    if ($16) {
                        $$011 = $15;
                    } else {
                        break;
                    }
                }
                $17 = $14 & 255;
                $$0$lcssa = $17;
            } else {
                $$0$lcssa = $9;
            }
            _out_667($0, $5, $$0$lcssa);
        }
        STACKTOP = sp; return;
    }
    function _wctomb($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($0 | 0) == (0 | 0);
        if ($2) {
            $$0 = 0;
        } else {
            $3 = (_wcrtomb($0, $1, 0) | 0);
            $$0 = $3;
        }
        return ($$0 | 0);
    }
    function _fmt_fp($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = +$1;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $$ = 0, $$$ = 0, $$$$564 = 0.0, $$$3484 = 0, $$$3484699 = 0, $$$3484700 = 0, $$$3501 = 0, $$$4502 = 0, $$$543 = 0.0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488 = 0, $$0488655 = 0, $$0488657 = 0;
        var $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0510 = 0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0;
        var $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1526 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2476$$549 = 0, $$2476$$551 = 0, $$2483$ph = 0;
        var $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$534$ = 0;
        var $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$557 = 0, $$5605 = 0, $$561 = 0, $$564 = 0.0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0;
        var $$9$ph = 0, $$lcssa675 = 0, $$neg = 0, $$neg568 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre690 = 0, $$pre693 = 0, $$pre697 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $100 = 0, $101 = 0;
        var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0;
        var $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
        var $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
        var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
        var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
        var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
        var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
        var $23 = 0, $230 = 0, $231 = 0.0, $232 = 0.0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
        var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
        var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
        var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
        var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
        var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
        var $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
        var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
        var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $40 = 0;
        var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
        var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
        var $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond542 = 0, $or$cond545 = 0, $or$cond556 = 0, $or$cond6 = 0, $scevgep686 = 0, $scevgep686687 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 560 | 0;
        $6 = sp + 8 | 0;
        $7 = sp;
        $8 = sp + 524 | 0;
        $9 = $8;
        $10 = sp + 512 | 0;
        HEAP32[$7 >> 2] = 0;
        $11 = ((($10)) + 12 | 0);
        (___DOUBLE_BITS_673($1) | 0);
        $12 = tempRet0;
        $13 = ($12 | 0) < (0);
        if ($13) {
            $14 = - $1;
            $$0471 = $14; $$0520 = 1; $$0521 = 31261;
        } else {
            $15 = $4 & 2048;
            $16 = ($15 | 0) == (0);
            $17 = $4 & 1;
            $18 = ($17 | 0) == (0);
            $$ = $18 ? (31262) : (31267);
            $$$ = $16 ? $$ : (31264);
            $19 = $4 & 2049;
            $20 = ($19 | 0) != (0);
            $$534$ = $20 & 1;
            $$0471 = $1; $$0520 = $$534$; $$0521 = $$$;
        }
        (___DOUBLE_BITS_673($$0471) | 0);
        $21 = tempRet0;
        $22 = $21 & 2146435072;
        $23 = (0) == (0);
        $24 = ($22 | 0) == (2146435072);
        $25 = $23 & $24;
        do {
            if ($25) {
                $26 = $5 & 32;
                $27 = ($26 | 0) != (0);
                $28 = $27 ? 31280 : 31284;
                $29 = ($$0471 != $$0471) | (0.0 != 0.0);
                $30 = $27 ? 31288 : 31292;
                $$0510 = $29 ? $30 : $28;
                $31 = (($$0520) + 3) | 0;
                $32 = $4 & -65537;
                _pad($0, 32, $2, $31, $32);
                _out_667($0, $$0521, $$0520);
                _out_667($0, $$0510, 3);
                $33 = $4 ^ 8192;
                _pad($0, 32, $2, $31, $33);
                $$sink560 = $31;
            } else {
                $34 = (+_frexpl($$0471, $7));
                $35 = $34 * 2.0;
                $36 = $35 != 0.0;
                if ($36) {
                    $37 = HEAP32[$7 >> 2] | 0;
                    $38 = (($37) + -1) | 0;
                    HEAP32[$7 >> 2] = $38;
                }
                $39 = $5 | 32;
                $40 = ($39 | 0) == (97);
                if ($40) {
                    $41 = $5 & 32;
                    $42 = ($41 | 0) == (0);
                    $43 = ((($$0521)) + 9 | 0);
                    $$0521$ = $42 ? $$0521 : $43;
                    $44 = $$0520 | 2;
                    $45 = ($3 >>> 0) > (11);
                    $46 = (12 - ($3)) | 0;
                    $47 = ($46 | 0) == (0);
                    $48 = $45 | $47;
                    do {
                        if ($48) {
                            $$1472 = $35;
                        } else {
                            $$0509585 = 8.0; $$1508586 = $46;
                            while (1) {
                                $49 = (($$1508586) + -1) | 0;
                                $50 = $$0509585 * 16.0;
                                $51 = ($49 | 0) == (0);
                                if ($51) {
                                    break;
                                } else {
                                    $$0509585 = $50; $$1508586 = $49;
                                }
                            }
                            $52 = HEAP8[$$0521$ >> 0] | 0;
                            $53 = ($52 << 24 >> 24) == (45);
                            if ($53) {
                                $54 = - $35;
                                $55 = $54 - $50;
                                $56 = $50 + $55;
                                $57 = - $56;
                                $$1472 = $57;
                                break;
                            } else {
                                $58 = $35 + $50;
                                $59 = $58 - $50;
                                $$1472 = $59;
                                break;
                            }
                        }
                    } while (0);
                    $60 = HEAP32[$7 >> 2] | 0;
                    $61 = ($60 | 0) < (0);
                    $62 = (0 - ($60)) | 0;
                    $63 = $61 ? $62 : $60;
                    $64 = ($63 | 0) < (0);
                    $65 = $64 << 31 >> 31;
                    $66 = (_fmt_u($63, $65, $11) | 0);
                    $67 = ($66 | 0) == ($11 | 0);
                    if ($67) {
                        $68 = ((($10)) + 11 | 0);
                        HEAP8[$68 >> 0] = 48;
                        $$0511 = $68;
                    } else {
                        $$0511 = $66;
                    }
                    $69 = $60 >> 31;
                    $70 = $69 & 2;
                    $71 = (($70) + 43) | 0;
                    $72 = $71 & 255;
                    $73 = ((($$0511)) + -1 | 0);
                    HEAP8[$73 >> 0] = $72;
                    $74 = (($5) + 15) | 0;
                    $75 = $74 & 255;
                    $76 = ((($$0511)) + -2 | 0);
                    HEAP8[$76 >> 0] = $75;
                    $77 = ($3 | 0) < (1);
                    $78 = $4 & 8;
                    $79 = ($78 | 0) == (0);
                    $$0523 = $8; $$2473 = $$1472;
                    while (1) {
                        $80 = (~~(($$2473)));
                        $81 = (31296 + ($80) | 0);
                        $82 = HEAP8[$81 >> 0] | 0;
                        $83 = $82 & 255;
                        $84 = $41 | $83;
                        $85 = $84 & 255;
                        $86 = ((($$0523)) + 1 | 0);
                        HEAP8[$$0523 >> 0] = $85;
                        $87 = (+($80 | 0));
                        $88 = $$2473 - $87;
                        $89 = $88 * 16.0;
                        $90 = $86;
                        $91 = (($90) - ($9)) | 0;
                        $92 = ($91 | 0) == (1);
                        if ($92) {
                            $93 = $89 == 0.0;
                            $or$cond3$not = $77 & $93;
                            $or$cond = $79 & $or$cond3$not;
                            if ($or$cond) {
                                $$1524 = $86;
                            } else {
                                $94 = ((($$0523)) + 2 | 0);
                                HEAP8[$86 >> 0] = 46;
                                $$1524 = $94;
                            }
                        } else {
                            $$1524 = $86;
                        }
                        $95 = $89 != 0.0;
                        if ($95) {
                            $$0523 = $$1524; $$2473 = $89;
                        } else {
                            break;
                        }
                    }
                    $96 = ($3 | 0) == (0);
                    $$pre693 = $$1524;
                    if ($96) {
                        label = 24;
                    } else {
                        $97 = (-2 - ($9)) | 0;
                        $98 = (($97) + ($$pre693)) | 0;
                        $99 = ($98 | 0) < ($3 | 0);
                        if ($99) {
                            $100 = (($3) + 2) | 0;
                            $$pre690 = (($$pre693) - ($9)) | 0;
                            $$pre$phi691Z2D = $$pre690; $$sink = $100;
                        } else {
                            label = 24;
                        }
                    }
                    if ((label | 0) == 24) {
                        $101 = (($$pre693) - ($9)) | 0;
                        $$pre$phi691Z2D = $101; $$sink = $101;
                    }
                    $102 = $11;
                    $103 = $76;
                    $104 = (($102) - ($103)) | 0;
                    $105 = (($104) + ($44)) | 0;
                    $106 = (($105) + ($$sink)) | 0;
                    _pad($0, 32, $2, $106, $4);
                    _out_667($0, $$0521$, $44);
                    $107 = $4 ^ 65536;
                    _pad($0, 48, $2, $106, $107);
                    _out_667($0, $8, $$pre$phi691Z2D);
                    $108 = (($$sink) - ($$pre$phi691Z2D)) | 0;
                    _pad($0, 48, $108, 0, 0);
                    _out_667($0, $76, $104);
                    $109 = $4 ^ 8192;
                    _pad($0, 32, $2, $106, $109);
                    $$sink560 = $106;
                    break;
                }
                $110 = ($3 | 0) < (0);
                $$540 = $110 ? 6 : $3;
                if ($36) {
                    $111 = $35 * 268435456.0;
                    $112 = HEAP32[$7 >> 2] | 0;
                    $113 = (($112) + -28) | 0;
                    HEAP32[$7 >> 2] = $113;
                    $$3 = $111; $$pr = $113;
                } else {
                    $$pre = HEAP32[$7 >> 2] | 0;
                    $$3 = $35; $$pr = $$pre;
                }
                $114 = ($$pr | 0) < (0);
                $115 = ((($6)) + 288 | 0);
                $$561 = $114 ? $6 : $115;
                $$0498 = $$561; $$4 = $$3;
                while (1) {
                    $116 = (~~(($$4)) >>> 0);
                    HEAP32[$$0498 >> 2] = $116;
                    $117 = ((($$0498)) + 4 | 0);
                    $118 = (+($116 >>> 0));
                    $119 = $$4 - $118;
                    $120 = $119 * 1.0E+9;
                    $121 = $120 != 0.0;
                    if ($121) {
                        $$0498 = $117; $$4 = $120;
                    } else {
                        break;
                    }
                }
                $122 = ($$pr | 0) > (0);
                if ($122) {
                    $$1482663 = $$561; $$1499662 = $117; $123 = $$pr;
                    while (1) {
                        $124 = ($123 | 0) < (29);
                        $125 = $124 ? $123 : 29;
                        $$0488655 = ((($$1499662)) + -4 | 0);
                        $126 = ($$0488655 >>> 0) < ($$1482663 >>> 0);
                        if ($126) {
                            $$2483$ph = $$1482663;
                        } else {
                            $$0488657 = $$0488655; $$0497656 = 0;
                            while (1) {
                                $127 = HEAP32[$$0488657 >> 2] | 0;
                                $128 = (_bitshift64Shl(($127 | 0), 0, ($125 | 0)) | 0);
                                $129 = tempRet0;
                                $130 = (_i64Add(($128 | 0), ($129 | 0), ($$0497656 | 0), 0) | 0);
                                $131 = tempRet0;
                                $132 = (___uremdi3(($130 | 0), ($131 | 0), 1000000000, 0) | 0);
                                $133 = tempRet0;
                                HEAP32[$$0488657 >> 2] = $132;
                                $134 = (___udivdi3(($130 | 0), ($131 | 0), 1000000000, 0) | 0);
                                $135 = tempRet0;
                                $$0488 = ((($$0488657)) + -4 | 0);
                                $136 = ($$0488 >>> 0) < ($$1482663 >>> 0);
                                if ($136) {
                                    break;
                                } else {
                                    $$0488657 = $$0488; $$0497656 = $134;
                                }
                            }
                            $137 = ($134 | 0) == (0);
                            if ($137) {
                                $$2483$ph = $$1482663;
                            } else {
                                $138 = ((($$1482663)) + -4 | 0);
                                HEAP32[$138 >> 2] = $134;
                                $$2483$ph = $138;
                            }
                        }
                        $$2500 = $$1499662;
                        while (1) {
                            $139 = ($$2500 >>> 0) > ($$2483$ph >>> 0);
                            if (!($139)) {
                                break;
                            }
                            $140 = ((($$2500)) + -4 | 0);
                            $141 = HEAP32[$140 >> 2] | 0;
                            $142 = ($141 | 0) == (0);
                            if ($142) {
                                $$2500 = $140;
                            } else {
                                break;
                            }
                        }
                        $143 = HEAP32[$7 >> 2] | 0;
                        $144 = (($143) - ($125)) | 0;
                        HEAP32[$7 >> 2] = $144;
                        $145 = ($144 | 0) > (0);
                        if ($145) {
                            $$1482663 = $$2483$ph; $$1499662 = $$2500; $123 = $144;
                        } else {
                            $$1482$lcssa = $$2483$ph; $$1499$lcssa = $$2500; $$pr566 = $144;
                            break;
                        }
                    }
                } else {
                    $$1482$lcssa = $$561; $$1499$lcssa = $117; $$pr566 = $$pr;
                }
                $146 = ($$pr566 | 0) < (0);
                if ($146) {
                    $147 = (($$540) + 25) | 0;
                    $148 = (($147 | 0) / 9) & -1;
                    $149 = (($148) + 1) | 0;
                    $150 = ($39 | 0) == (102);
                    $$3484650 = $$1482$lcssa; $$3501649 = $$1499$lcssa; $152 = $$pr566;
                    while (1) {
                        $151 = (0 - ($152)) | 0;
                        $153 = ($151 | 0) < (9);
                        $154 = $153 ? $151 : 9;
                        $155 = ($$3484650 >>> 0) < ($$3501649 >>> 0);
                        if ($155) {
                            $159 = 1 << $154;
                            $160 = (($159) + -1) | 0;
                            $161 = 1000000000 >>> $154;
                            $$0487644 = 0; $$1489643 = $$3484650;
                            while (1) {
                                $162 = HEAP32[$$1489643 >> 2] | 0;
                                $163 = $162 & $160;
                                $164 = $162 >>> $154;
                                $165 = (($164) + ($$0487644)) | 0;
                                HEAP32[$$1489643 >> 2] = $165;
                                $166 = Math_imul($163, $161) | 0;
                                $167 = ((($$1489643)) + 4 | 0);
                                $168 = ($167 >>> 0) < ($$3501649 >>> 0);
                                if ($168) {
                                    $$0487644 = $166; $$1489643 = $167;
                                } else {
                                    break;
                                }
                            }
                            $169 = HEAP32[$$3484650 >> 2] | 0;
                            $170 = ($169 | 0) == (0);
                            $171 = ((($$3484650)) + 4 | 0);
                            $$$3484 = $170 ? $171 : $$3484650;
                            $172 = ($166 | 0) == (0);
                            if ($172) {
                                $$$3484700 = $$$3484; $$4502 = $$3501649;
                            } else {
                                $173 = ((($$3501649)) + 4 | 0);
                                HEAP32[$$3501649 >> 2] = $166;
                                $$$3484700 = $$$3484; $$4502 = $173;
                            }
                        } else {
                            $156 = HEAP32[$$3484650 >> 2] | 0;
                            $157 = ($156 | 0) == (0);
                            $158 = ((($$3484650)) + 4 | 0);
                            $$$3484699 = $157 ? $158 : $$3484650;
                            $$$3484700 = $$$3484699; $$4502 = $$3501649;
                        }
                        $174 = $150 ? $$561 : $$$3484700;
                        $175 = $$4502;
                        $176 = $174;
                        $177 = (($175) - ($176)) | 0;
                        $178 = $177 >> 2;
                        $179 = ($178 | 0) > ($149 | 0);
                        $180 = (($174) + ($149 << 2) | 0);
                        $$$4502 = $179 ? $180 : $$4502;
                        $181 = HEAP32[$7 >> 2] | 0;
                        $182 = (($181) + ($154)) | 0;
                        HEAP32[$7 >> 2] = $182;
                        $183 = ($182 | 0) < (0);
                        if ($183) {
                            $$3484650 = $$$3484700; $$3501649 = $$$4502; $152 = $182;
                        } else {
                            $$3484$lcssa = $$$3484700; $$3501$lcssa = $$$4502;
                            break;
                        }
                    }
                } else {
                    $$3484$lcssa = $$1482$lcssa; $$3501$lcssa = $$1499$lcssa;
                }
                $184 = ($$3484$lcssa >>> 0) < ($$3501$lcssa >>> 0);
                $185 = $$561;
                if ($184) {
                    $186 = $$3484$lcssa;
                    $187 = (($185) - ($186)) | 0;
                    $188 = $187 >> 2;
                    $189 = ($188 * 9) | 0;
                    $190 = HEAP32[$$3484$lcssa >> 2] | 0;
                    $191 = ($190 >>> 0) < (10);
                    if ($191) {
                        $$1515 = $189;
                    } else {
                        $$0514639 = $189; $$0530638 = 10;
                        while (1) {
                            $192 = ($$0530638 * 10) | 0;
                            $193 = (($$0514639) + 1) | 0;
                            $194 = ($190 >>> 0) < ($192 >>> 0);
                            if ($194) {
                                $$1515 = $193;
                                break;
                            } else {
                                $$0514639 = $193; $$0530638 = $192;
                            }
                        }
                    }
                } else {
                    $$1515 = 0;
                }
                $195 = ($39 | 0) != (102);
                $196 = $195 ? $$1515 : 0;
                $197 = (($$540) - ($196)) | 0;
                $198 = ($39 | 0) == (103);
                $199 = ($$540 | 0) != (0);
                $200 = $199 & $198;
                $$neg = $200 << 31 >> 31;
                $201 = (($197) + ($$neg)) | 0;
                $202 = $$3501$lcssa;
                $203 = (($202) - ($185)) | 0;
                $204 = $203 >> 2;
                $205 = ($204 * 9) | 0;
                $206 = (($205) + -9) | 0;
                $207 = ($201 | 0) < ($206 | 0);
                if ($207) {
                    $208 = ((($$561)) + 4 | 0);
                    $209 = (($201) + 9216) | 0;
                    $210 = (($209 | 0) / 9) & -1;
                    $211 = (($210) + -1024) | 0;
                    $212 = (($208) + ($211 << 2) | 0);
                    $213 = (($209 | 0) % 9) & -1;
                    $214 = ($213 | 0) < (8);
                    if ($214) {
                        $$0527$in633 = $213; $$1531632 = 10;
                        while (1) {
                            $$0527 = (($$0527$in633) + 1) | 0;
                            $215 = ($$1531632 * 10) | 0;
                            $216 = ($$0527$in633 | 0) < (7);
                            if ($216) {
                                $$0527$in633 = $$0527; $$1531632 = $215;
                            } else {
                                $$1531$lcssa = $215;
                                break;
                            }
                        }
                    } else {
                        $$1531$lcssa = 10;
                    }
                    $217 = HEAP32[$212 >> 2] | 0;
                    $218 = (($217 >>> 0) % ($$1531$lcssa >>> 0)) & -1;
                    $219 = ($218 | 0) == (0);
                    $220 = ((($212)) + 4 | 0);
                    $221 = ($220 | 0) == ($$3501$lcssa | 0);
                    $or$cond542 = $221 & $219;
                    if ($or$cond542) {
                        $$4492 = $212; $$4518 = $$1515; $$8 = $$3484$lcssa;
                    } else {
                        $222 = (($217 >>> 0) / ($$1531$lcssa >>> 0)) & -1;
                        $223 = $222 & 1;
                        $224 = ($223 | 0) == (0);
                        $$543 = $224 ? 9007199254740992.0 : 9007199254740994.0;
                        $225 = (($$1531$lcssa | 0) / 2) & -1;
                        $226 = ($218 >>> 0) < ($225 >>> 0);
                        $227 = ($218 | 0) == ($225 | 0);
                        $or$cond545 = $221 & $227;
                        $$564 = $or$cond545 ? 1.0 : 1.5;
                        $$$564 = $226 ? 0.5 : $$564;
                        $228 = ($$0520 | 0) == (0);
                        if ($228) {
                            $$1467 = $$$564; $$1469 = $$543;
                        } else {
                            $229 = HEAP8[$$0521 >> 0] | 0;
                            $230 = ($229 << 24 >> 24) == (45);
                            $231 = - $$543;
                            $232 = - $$$564;
                            $$$543 = $230 ? $231 : $$543;
                            $$$$564 = $230 ? $232 : $$$564;
                            $$1467 = $$$$564; $$1469 = $$$543;
                        }
                        $233 = (($217) - ($218)) | 0;
                        HEAP32[$212 >> 2] = $233;
                        $234 = $$1469 + $$1467;
                        $235 = $234 != $$1469;
                        if ($235) {
                            $236 = (($233) + ($$1531$lcssa)) | 0;
                            HEAP32[$212 >> 2] = $236;
                            $237 = ($236 >>> 0) > (999999999);
                            if ($237) {
                                $$5486626 = $$3484$lcssa; $$sink547625 = $212;
                                while (1) {
                                    $238 = ((($$sink547625)) + -4 | 0);
                                    HEAP32[$$sink547625 >> 2] = 0;
                                    $239 = ($238 >>> 0) < ($$5486626 >>> 0);
                                    if ($239) {
                                        $240 = ((($$5486626)) + -4 | 0);
                                        HEAP32[$240 >> 2] = 0;
                                        $$6 = $240;
                                    } else {
                                        $$6 = $$5486626;
                                    }
                                    $241 = HEAP32[$238 >> 2] | 0;
                                    $242 = (($241) + 1) | 0;
                                    HEAP32[$238 >> 2] = $242;
                                    $243 = ($242 >>> 0) > (999999999);
                                    if ($243) {
                                        $$5486626 = $$6; $$sink547625 = $238;
                                    } else {
                                        $$5486$lcssa = $$6; $$sink547$lcssa = $238;
                                        break;
                                    }
                                }
                            } else {
                                $$5486$lcssa = $$3484$lcssa; $$sink547$lcssa = $212;
                            }
                            $244 = $$5486$lcssa;
                            $245 = (($185) - ($244)) | 0;
                            $246 = $245 >> 2;
                            $247 = ($246 * 9) | 0;
                            $248 = HEAP32[$$5486$lcssa >> 2] | 0;
                            $249 = ($248 >>> 0) < (10);
                            if ($249) {
                                $$4492 = $$sink547$lcssa; $$4518 = $247; $$8 = $$5486$lcssa;
                            } else {
                                $$2516621 = $247; $$2532620 = 10;
                                while (1) {
                                    $250 = ($$2532620 * 10) | 0;
                                    $251 = (($$2516621) + 1) | 0;
                                    $252 = ($248 >>> 0) < ($250 >>> 0);
                                    if ($252) {
                                        $$4492 = $$sink547$lcssa; $$4518 = $251; $$8 = $$5486$lcssa;
                                        break;
                                    } else {
                                        $$2516621 = $251; $$2532620 = $250;
                                    }
                                }
                            }
                        } else {
                            $$4492 = $212; $$4518 = $$1515; $$8 = $$3484$lcssa;
                        }
                    }
                    $253 = ((($$4492)) + 4 | 0);
                    $254 = ($$3501$lcssa >>> 0) > ($253 >>> 0);
                    $$$3501 = $254 ? $253 : $$3501$lcssa;
                    $$5519$ph = $$4518; $$7505$ph = $$$3501; $$9$ph = $$8;
                } else {
                    $$5519$ph = $$1515; $$7505$ph = $$3501$lcssa; $$9$ph = $$3484$lcssa;
                }
                $$7505 = $$7505$ph;
                while (1) {
                    $255 = ($$7505 >>> 0) > ($$9$ph >>> 0);
                    if (!($255)) {
                        $$lcssa675 = 0;
                        break;
                    }
                    $256 = ((($$7505)) + -4 | 0);
                    $257 = HEAP32[$256 >> 2] | 0;
                    $258 = ($257 | 0) == (0);
                    if ($258) {
                        $$7505 = $256;
                    } else {
                        $$lcssa675 = 1;
                        break;
                    }
                }
                $259 = (0 - ($$5519$ph)) | 0;
                do {
                    if ($198) {
                        $not$ = $199 ^ 1;
                        $260 = $not$ & 1;
                        $$540$ = (($$540) + ($260)) | 0;
                        $261 = ($$540$ | 0) > ($$5519$ph | 0);
                        $262 = ($$5519$ph | 0) > (-5);
                        $or$cond6 = $261 & $262;
                        if ($or$cond6) {
                            $263 = (($5) + -1) | 0;
                            $$neg568 = (($$540$) + -1) | 0;
                            $264 = (($$neg568) - ($$5519$ph)) | 0;
                            $$0479 = $263; $$2476 = $264;
                        } else {
                            $265 = (($5) + -2) | 0;
                            $266 = (($$540$) + -1) | 0;
                            $$0479 = $265; $$2476 = $266;
                        }
                        $267 = $4 & 8;
                        $268 = ($267 | 0) == (0);
                        if ($268) {
                            if ($$lcssa675) {
                                $269 = ((($$7505)) + -4 | 0);
                                $270 = HEAP32[$269 >> 2] | 0;
                                $271 = ($270 | 0) == (0);
                                if ($271) {
                                    $$2529 = 9;
                                } else {
                                    $272 = (($270 >>> 0) % 10) & -1;
                                    $273 = ($272 | 0) == (0);
                                    if ($273) {
                                        $$1528617 = 0; $$3533616 = 10;
                                        while (1) {
                                            $274 = ($$3533616 * 10) | 0;
                                            $275 = (($$1528617) + 1) | 0;
                                            $276 = (($270 >>> 0) % ($274 >>> 0)) & -1;
                                            $277 = ($276 | 0) == (0);
                                            if ($277) {
                                                $$1528617 = $275; $$3533616 = $274;
                                            } else {
                                                $$2529 = $275;
                                                break;
                                            }
                                        }
                                    } else {
                                        $$2529 = 0;
                                    }
                                }
                            } else {
                                $$2529 = 9;
                            }
                            $278 = $$0479 | 32;
                            $279 = ($278 | 0) == (102);
                            $280 = $$7505;
                            $281 = (($280) - ($185)) | 0;
                            $282 = $281 >> 2;
                            $283 = ($282 * 9) | 0;
                            $284 = (($283) + -9) | 0;
                            if ($279) {
                                $285 = (($284) - ($$2529)) | 0;
                                $286 = ($285 | 0) > (0);
                                $$548 = $286 ? $285 : 0;
                                $287 = ($$2476 | 0) < ($$548 | 0);
                                $$2476$$549 = $287 ? $$2476 : $$548;
                                $$1480 = $$0479; $$3477 = $$2476$$549; $$pre$phi698Z2D = 0;
                                break;
                            } else {
                                $288 = (($284) + ($$5519$ph)) | 0;
                                $289 = (($288) - ($$2529)) | 0;
                                $290 = ($289 | 0) > (0);
                                $$550 = $290 ? $289 : 0;
                                $291 = ($$2476 | 0) < ($$550 | 0);
                                $$2476$$551 = $291 ? $$2476 : $$550;
                                $$1480 = $$0479; $$3477 = $$2476$$551; $$pre$phi698Z2D = 0;
                                break;
                            }
                        } else {
                            $$1480 = $$0479; $$3477 = $$2476; $$pre$phi698Z2D = $267;
                        }
                    } else {
                        $$pre697 = $4 & 8;
                        $$1480 = $5; $$3477 = $$540; $$pre$phi698Z2D = $$pre697;
                    }
                } while (0);
                $292 = $$3477 | $$pre$phi698Z2D;
                $293 = ($292 | 0) != (0);
                $294 = $293 & 1;
                $295 = $$1480 | 32;
                $296 = ($295 | 0) == (102);
                if ($296) {
                    $297 = ($$5519$ph | 0) > (0);
                    $298 = $297 ? $$5519$ph : 0;
                    $$2513 = 0; $$pn = $298;
                } else {
                    $299 = ($$5519$ph | 0) < (0);
                    $300 = $299 ? $259 : $$5519$ph;
                    $301 = ($300 | 0) < (0);
                    $302 = $301 << 31 >> 31;
                    $303 = (_fmt_u($300, $302, $11) | 0);
                    $304 = $11;
                    $305 = $303;
                    $306 = (($304) - ($305)) | 0;
                    $307 = ($306 | 0) < (2);
                    if ($307) {
                        $$1512610 = $303;
                        while (1) {
                            $308 = ((($$1512610)) + -1 | 0);
                            HEAP8[$308 >> 0] = 48;
                            $309 = $308;
                            $310 = (($304) - ($309)) | 0;
                            $311 = ($310 | 0) < (2);
                            if ($311) {
                                $$1512610 = $308;
                            } else {
                                $$1512$lcssa = $308;
                                break;
                            }
                        }
                    } else {
                        $$1512$lcssa = $303;
                    }
                    $312 = $$5519$ph >> 31;
                    $313 = $312 & 2;
                    $314 = (($313) + 43) | 0;
                    $315 = $314 & 255;
                    $316 = ((($$1512$lcssa)) + -1 | 0);
                    HEAP8[$316 >> 0] = $315;
                    $317 = $$1480 & 255;
                    $318 = ((($$1512$lcssa)) + -2 | 0);
                    HEAP8[$318 >> 0] = $317;
                    $319 = $318;
                    $320 = (($304) - ($319)) | 0;
                    $$2513 = $318; $$pn = $320;
                }
                $321 = (($$0520) + 1) | 0;
                $322 = (($321) + ($$3477)) | 0;
                $$1526 = (($322) + ($294)) | 0;
                $323 = (($$1526) + ($$pn)) | 0;
                _pad($0, 32, $2, $323, $4);
                _out_667($0, $$0521, $$0520);
                $324 = $4 ^ 65536;
                _pad($0, 48, $2, $323, $324);
                if ($296) {
                    $325 = ($$9$ph >>> 0) > ($$561 >>> 0);
                    $$0496$$9 = $325 ? $$561 : $$9$ph;
                    $326 = ((($8)) + 9 | 0);
                    $327 = $326;
                    $328 = ((($8)) + 8 | 0);
                    $$5493600 = $$0496$$9;
                    while (1) {
                        $329 = HEAP32[$$5493600 >> 2] | 0;
                        $330 = (_fmt_u($329, 0, $326) | 0);
                        $331 = ($$5493600 | 0) == ($$0496$$9 | 0);
                        if ($331) {
                            $337 = ($330 | 0) == ($326 | 0);
                            if ($337) {
                                HEAP8[$328 >> 0] = 48;
                                $$1465 = $328;
                            } else {
                                $$1465 = $330;
                            }
                        } else {
                            $332 = ($330 >>> 0) > ($8 >>> 0);
                            if ($332) {
                                $333 = $330;
                                $334 = (($333) - ($9)) | 0;
                                _memset(($8 | 0), 48, ($334 | 0)) | 0;
                                $$0464597 = $330;
                                while (1) {
                                    $335 = ((($$0464597)) + -1 | 0);
                                    $336 = ($335 >>> 0) > ($8 >>> 0);
                                    if ($336) {
                                        $$0464597 = $335;
                                    } else {
                                        $$1465 = $335;
                                        break;
                                    }
                                }
                            } else {
                                $$1465 = $330;
                            }
                        }
                        $338 = $$1465;
                        $339 = (($327) - ($338)) | 0;
                        _out_667($0, $$1465, $339);
                        $340 = ((($$5493600)) + 4 | 0);
                        $341 = ($340 >>> 0) > ($$561 >>> 0);
                        if ($341) {
                            break;
                        } else {
                            $$5493600 = $340;
                        }
                    }
                    $342 = ($292 | 0) == (0);
                    if (!($342)) {
                        _out_667($0, 31312, 1);
                    }
                    $343 = ($340 >>> 0) < ($$7505 >>> 0);
                    $344 = ($$3477 | 0) > (0);
                    $345 = $343 & $344;
                    if ($345) {
                        $$4478593 = $$3477; $$6494592 = $340;
                        while (1) {
                            $346 = HEAP32[$$6494592 >> 2] | 0;
                            $347 = (_fmt_u($346, 0, $326) | 0);
                            $348 = ($347 >>> 0) > ($8 >>> 0);
                            if ($348) {
                                $349 = $347;
                                $350 = (($349) - ($9)) | 0;
                                _memset(($8 | 0), 48, ($350 | 0)) | 0;
                                $$0463587 = $347;
                                while (1) {
                                    $351 = ((($$0463587)) + -1 | 0);
                                    $352 = ($351 >>> 0) > ($8 >>> 0);
                                    if ($352) {
                                        $$0463587 = $351;
                                    } else {
                                        $$0463$lcssa = $351;
                                        break;
                                    }
                                }
                            } else {
                                $$0463$lcssa = $347;
                            }
                            $353 = ($$4478593 | 0) < (9);
                            $354 = $353 ? $$4478593 : 9;
                            _out_667($0, $$0463$lcssa, $354);
                            $355 = ((($$6494592)) + 4 | 0);
                            $356 = (($$4478593) + -9) | 0;
                            $357 = ($355 >>> 0) < ($$7505 >>> 0);
                            $358 = ($$4478593 | 0) > (9);
                            $359 = $357 & $358;
                            if ($359) {
                                $$4478593 = $356; $$6494592 = $355;
                            } else {
                                $$4478$lcssa = $356;
                                break;
                            }
                        }
                    } else {
                        $$4478$lcssa = $$3477;
                    }
                    $360 = (($$4478$lcssa) + 9) | 0;
                    _pad($0, 48, $360, 9, 0);
                } else {
                    $361 = ((($$9$ph)) + 4 | 0);
                    $$7505$ = $$lcssa675 ? $$7505 : $361;
                    $362 = ($$3477 | 0) > (-1);
                    if ($362) {
                        $363 = ((($8)) + 9 | 0);
                        $364 = ($$pre$phi698Z2D | 0) == (0);
                        $365 = $363;
                        $366 = (0 - ($9)) | 0;
                        $367 = ((($8)) + 8 | 0);
                        $$5605 = $$3477; $$7495604 = $$9$ph;
                        while (1) {
                            $368 = HEAP32[$$7495604 >> 2] | 0;
                            $369 = (_fmt_u($368, 0, $363) | 0);
                            $370 = ($369 | 0) == ($363 | 0);
                            if ($370) {
                                HEAP8[$367 >> 0] = 48;
                                $$0 = $367;
                            } else {
                                $$0 = $369;
                            }
                            $371 = ($$7495604 | 0) == ($$9$ph | 0);
                            do {
                                if ($371) {
                                    $375 = ((($$0)) + 1 | 0);
                                    _out_667($0, $$0, 1);
                                    $376 = ($$5605 | 0) < (1);
                                    $or$cond556 = $364 & $376;
                                    if ($or$cond556) {
                                        $$2 = $375;
                                        break;
                                    }
                                    _out_667($0, 31312, 1);
                                    $$2 = $375;
                                } else {
                                    $372 = ($$0 >>> 0) > ($8 >>> 0);
                                    if (!($372)) {
                                        $$2 = $$0;
                                        break;
                                    }
                                    $scevgep686 = (($$0) + ($366) | 0);
                                    $scevgep686687 = $scevgep686;
                                    _memset(($8 | 0), 48, ($scevgep686687 | 0)) | 0;
                                    $$1601 = $$0;
                                    while (1) {
                                        $373 = ((($$1601)) + -1 | 0);
                                        $374 = ($373 >>> 0) > ($8 >>> 0);
                                        if ($374) {
                                            $$1601 = $373;
                                        } else {
                                            $$2 = $373;
                                            break;
                                        }
                                    }
                                }
                            } while (0);
                            $377 = $$2;
                            $378 = (($365) - ($377)) | 0;
                            $379 = ($$5605 | 0) > ($378 | 0);
                            $380 = $379 ? $378 : $$5605;
                            _out_667($0, $$2, $380);
                            $381 = (($$5605) - ($378)) | 0;
                            $382 = ((($$7495604)) + 4 | 0);
                            $383 = ($382 >>> 0) < ($$7505$ >>> 0);
                            $384 = ($381 | 0) > (-1);
                            $385 = $383 & $384;
                            if ($385) {
                                $$5605 = $381; $$7495604 = $382;
                            } else {
                                $$5$lcssa = $381;
                                break;
                            }
                        }
                    } else {
                        $$5$lcssa = $$3477;
                    }
                    $386 = (($$5$lcssa) + 18) | 0;
                    _pad($0, 48, $386, 18, 0);
                    $387 = $11;
                    $388 = $$2513;
                    $389 = (($387) - ($388)) | 0;
                    _out_667($0, $$2513, $389);
                }
                $390 = $4 ^ 8192;
                _pad($0, 32, $2, $323, $390);
                $$sink560 = $323;
            }
        } while (0);
        $391 = ($$sink560 | 0) < ($2 | 0);
        $$557 = $391 ? $2 : $$sink560;
        STACKTOP = sp; return ($$557 | 0);
    }
    function ___DOUBLE_BITS_673($0) {
        $0 = +$0;
        var $1 = 0, $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        HEAPF64[tempDoublePtr >> 3] = $0; $1 = HEAP32[tempDoublePtr >> 2] | 0;
        $2 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        tempRet0 = ($2);
        return ($1 | 0);
    }
    function _frexpl($0, $1) {
        $0 = +$0;
        $1 = $1 | 0;
        var $2 = 0.0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (+_frexp($0, $1));
        return (+$2);
    }
    function _frexp($0, $1) {
        $0 = +$0;
        $1 = $1 | 0;
        var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        HEAPF64[tempDoublePtr >> 3] = $0; $2 = HEAP32[tempDoublePtr >> 2] | 0;
        $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
        $4 = (_bitshift64Lshr(($2 | 0), ($3 | 0), 52) | 0);
        $5 = tempRet0;
        $6 = $4 & 65535;
        $trunc$clear = $6 & 2047;
        switch ($trunc$clear << 16 >> 16) {
            case 0: {
                $7 = $0 != 0.0;
                if ($7) {
                    $8 = $0 * 1.8446744073709552E+19;
                    $9 = (+_frexp($8, $1));
                    $10 = HEAP32[$1 >> 2] | 0;
                    $11 = (($10) + -64) | 0;
                    $$016 = $9; $storemerge = $11;
                } else {
                    $$016 = $0; $storemerge = 0;
                }
                HEAP32[$1 >> 2] = $storemerge;
                $$0 = $$016;
                break;
            }
            case 2047: {
                $$0 = $0;
                break;
            }
            default: {
                $12 = $4 & 2047;
                $13 = (($12) + -1022) | 0;
                HEAP32[$1 >> 2] = $13;
                $14 = $3 & -2146435073;
                $15 = $14 | 1071644672;
                HEAP32[tempDoublePtr >> 2] = $2; HEAP32[tempDoublePtr + 4 >> 2] = $15; $16 = +HEAPF64[tempDoublePtr >> 3];
                $$0 = $16;
            }
        }
        return (+$$0);
    }
    function _wcrtomb($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
        var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
        var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($0 | 0) == (0 | 0);
        do {
            if ($3) {
                $$0 = 1;
            } else {
                $4 = ($1 >>> 0) < (128);
                if ($4) {
                    $5 = $1 & 255;
                    HEAP8[$0 >> 0] = $5;
                    $$0 = 1;
                    break;
                }
                $6 = (___pthread_self_93() | 0);
                $7 = ((($6)) + 188 | 0);
                $8 = HEAP32[$7 >> 2] | 0;
                $9 = HEAP32[$8 >> 2] | 0;
                $10 = ($9 | 0) == (0 | 0);
                if ($10) {
                    $11 = $1 & -128;
                    $12 = ($11 | 0) == (57216);
                    if ($12) {
                        $14 = $1 & 255;
                        HEAP8[$0 >> 0] = $14;
                        $$0 = 1;
                        break;
                    } else {
                        $13 = (___errno_location() | 0);
                        HEAP32[$13 >> 2] = 84;
                        $$0 = -1;
                        break;
                    }
                }
                $15 = ($1 >>> 0) < (2048);
                if ($15) {
                    $16 = $1 >>> 6;
                    $17 = $16 | 192;
                    $18 = $17 & 255;
                    $19 = ((($0)) + 1 | 0);
                    HEAP8[$0 >> 0] = $18;
                    $20 = $1 & 63;
                    $21 = $20 | 128;
                    $22 = $21 & 255;
                    HEAP8[$19 >> 0] = $22;
                    $$0 = 2;
                    break;
                }
                $23 = ($1 >>> 0) < (55296);
                $24 = $1 & -8192;
                $25 = ($24 | 0) == (57344);
                $or$cond = $23 | $25;
                if ($or$cond) {
                    $26 = $1 >>> 12;
                    $27 = $26 | 224;
                    $28 = $27 & 255;
                    $29 = ((($0)) + 1 | 0);
                    HEAP8[$0 >> 0] = $28;
                    $30 = $1 >>> 6;
                    $31 = $30 & 63;
                    $32 = $31 | 128;
                    $33 = $32 & 255;
                    $34 = ((($0)) + 2 | 0);
                    HEAP8[$29 >> 0] = $33;
                    $35 = $1 & 63;
                    $36 = $35 | 128;
                    $37 = $36 & 255;
                    HEAP8[$34 >> 0] = $37;
                    $$0 = 3;
                    break;
                }
                $38 = (($1) + -65536) | 0;
                $39 = ($38 >>> 0) < (1048576);
                if ($39) {
                    $40 = $1 >>> 18;
                    $41 = $40 | 240;
                    $42 = $41 & 255;
                    $43 = ((($0)) + 1 | 0);
                    HEAP8[$0 >> 0] = $42;
                    $44 = $1 >>> 12;
                    $45 = $44 & 63;
                    $46 = $45 | 128;
                    $47 = $46 & 255;
                    $48 = ((($0)) + 2 | 0);
                    HEAP8[$43 >> 0] = $47;
                    $49 = $1 >>> 6;
                    $50 = $49 & 63;
                    $51 = $50 | 128;
                    $52 = $51 & 255;
                    $53 = ((($0)) + 3 | 0);
                    HEAP8[$48 >> 0] = $52;
                    $54 = $1 & 63;
                    $55 = $54 | 128;
                    $56 = $55 & 255;
                    HEAP8[$53 >> 0] = $56;
                    $$0 = 4;
                    break;
                } else {
                    $57 = (___errno_location() | 0);
                    HEAP32[$57 >> 2] = 84;
                    $$0 = -1;
                    break;
                }
            }
        } while (0);
        return ($$0 | 0);
    }
    function ___pthread_self_93() {
        var $0 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $0 = (_pthread_self() | 0);
        return ($0 | 0);
    }
    function _pthread_self() {
        var label = 0, sp = 0;
        sp = STACKTOP;
        return (9948 | 0);
    }
    function ___pthread_self_720() {
        var $0 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $0 = (_pthread_self() | 0);
        return ($0 | 0);
    }
    function ___strerror_l($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        $$016 = 0;
        while (1) {
            $3 = (31314 + ($$016) | 0);
            $4 = HEAP8[$3 >> 0] | 0;
            $5 = $4 & 255;
            $6 = ($5 | 0) == ($0 | 0);
            if ($6) {
                label = 2;
                break;
            }
            $7 = (($$016) + 1) | 0;
            $8 = ($7 | 0) == (87);
            if ($8) {
                $$01214 = 31402; $$115 = 87;
                label = 5;
                break;
            } else {
                $$016 = $7;
            }
        }
        if ((label | 0) == 2) {
            $2 = ($$016 | 0) == (0);
            if ($2) {
                $$012$lcssa = 31402;
            } else {
                $$01214 = 31402; $$115 = $$016;
                label = 5;
            }
        }
        if ((label | 0) == 5) {
            while (1) {
                label = 0;
                $$113 = $$01214;
                while (1) {
                    $9 = HEAP8[$$113 >> 0] | 0;
                    $10 = ($9 << 24 >> 24) == (0);
                    $11 = ((($$113)) + 1 | 0);
                    if ($10) {
                        break;
                    } else {
                        $$113 = $11;
                    }
                }
                $12 = (($$115) + -1) | 0;
                $13 = ($12 | 0) == (0);
                if ($13) {
                    $$012$lcssa = $11;
                    break;
                } else {
                    $$01214 = $11; $$115 = $12;
                    label = 5;
                }
            }
        }
        $14 = ((($1)) + 20 | 0);
        $15 = HEAP32[$14 >> 2] | 0;
        $16 = (___lctrans($$012$lcssa, $15) | 0);
        return ($16 | 0);
    }
    function ___lctrans($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = (___lctrans_impl($0, $1) | 0);
        return ($2 | 0);
    }
    function ___lctrans_impl($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 | 0) == (0 | 0);
        if ($2) {
            $$0 = 0;
        } else {
            $3 = HEAP32[$1 >> 2] | 0;
            $4 = ((($1)) + 4 | 0);
            $5 = HEAP32[$4 >> 2] | 0;
            $6 = (___mo_lookup($3, $5, $0) | 0);
            $$0 = $6;
        }
        $7 = ($$0 | 0) != (0 | 0);
        $8 = $7 ? $$0 : $0;
        return ($8 | 0);
    }
    function ___mo_lookup($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$ = 0, $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
        var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
        var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
        var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = HEAP32[$0 >> 2] | 0;
        $4 = (($3) + 1794895138) | 0;
        $5 = ((($0)) + 8 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (_swapc($6, $4) | 0);
        $8 = ((($0)) + 12 | 0);
        $9 = HEAP32[$8 >> 2] | 0;
        $10 = (_swapc($9, $4) | 0);
        $11 = ((($0)) + 16 | 0);
        $12 = HEAP32[$11 >> 2] | 0;
        $13 = (_swapc($12, $4) | 0);
        $14 = $1 >>> 2;
        $15 = ($7 >>> 0) < ($14 >>> 0);
        L1: do {
            if ($15) {
                $16 = $7 << 2;
                $17 = (($1) - ($16)) | 0;
                $18 = ($10 >>> 0) < ($17 >>> 0);
                $19 = ($13 >>> 0) < ($17 >>> 0);
                $or$cond = $18 & $19;
                if ($or$cond) {
                    $20 = $13 | $10;
                    $21 = $20 & 3;
                    $22 = ($21 | 0) == (0);
                    if ($22) {
                        $23 = $10 >>> 2;
                        $24 = $13 >>> 2;
                        $$090 = 0; $$094 = $7;
                        while (1) {
                            $25 = $$094 >>> 1;
                            $26 = (($$090) + ($25)) | 0;
                            $27 = $26 << 1;
                            $28 = (($27) + ($23)) | 0;
                            $29 = (($0) + ($28 << 2) | 0);
                            $30 = HEAP32[$29 >> 2] | 0;
                            $31 = (_swapc($30, $4) | 0);
                            $32 = (($28) + 1) | 0;
                            $33 = (($0) + ($32 << 2) | 0);
                            $34 = HEAP32[$33 >> 2] | 0;
                            $35 = (_swapc($34, $4) | 0);
                            $36 = ($35 >>> 0) < ($1 >>> 0);
                            $37 = (($1) - ($35)) | 0;
                            $38 = ($31 >>> 0) < ($37 >>> 0);
                            $or$cond102 = $36 & $38;
                            if (!($or$cond102)) {
                                $$4 = 0;
                                break L1;
                            }
                            $39 = (($35) + ($31)) | 0;
                            $40 = (($0) + ($39) | 0);
                            $41 = HEAP8[$40 >> 0] | 0;
                            $42 = ($41 << 24 >> 24) == (0);
                            if (!($42)) {
                                $$4 = 0;
                                break L1;
                            }
                            $43 = (($0) + ($35) | 0);
                            $44 = (_strcmp($2, $43) | 0);
                            $45 = ($44 | 0) == (0);
                            if ($45) {
                                break;
                            }
                            $62 = ($$094 | 0) == (1);
                            $63 = ($44 | 0) < (0);
                            $64 = (($$094) - ($25)) | 0;
                            $$195 = $63 ? $25 : $64;
                            $$191 = $63 ? $$090 : $26;
                            if ($62) {
                                $$4 = 0;
                                break L1;
                            } else {
                                $$090 = $$191; $$094 = $$195;
                            }
                        }
                        $46 = (($27) + ($24)) | 0;
                        $47 = (($0) + ($46 << 2) | 0);
                        $48 = HEAP32[$47 >> 2] | 0;
                        $49 = (_swapc($48, $4) | 0);
                        $50 = (($46) + 1) | 0;
                        $51 = (($0) + ($50 << 2) | 0);
                        $52 = HEAP32[$51 >> 2] | 0;
                        $53 = (_swapc($52, $4) | 0);
                        $54 = ($53 >>> 0) < ($1 >>> 0);
                        $55 = (($1) - ($53)) | 0;
                        $56 = ($49 >>> 0) < ($55 >>> 0);
                        $or$cond104 = $54 & $56;
                        if ($or$cond104) {
                            $57 = (($0) + ($53) | 0);
                            $58 = (($53) + ($49)) | 0;
                            $59 = (($0) + ($58) | 0);
                            $60 = HEAP8[$59 >> 0] | 0;
                            $61 = ($60 << 24 >> 24) == (0);
                            $$ = $61 ? $57 : 0;
                            $$4 = $$;
                        } else {
                            $$4 = 0;
                        }
                    } else {
                        $$4 = 0;
                    }
                } else {
                    $$4 = 0;
                }
            } else {
                $$4 = 0;
            }
        } while (0);
        return ($$4 | 0);
    }
    function _swapc($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$ = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $2 = ($1 | 0) == (0);
        $3 = (_llvm_bswap_i32(($0 | 0)) | 0);
        $$ = $2 ? $0 : $3;
        return ($$ | 0);
    }
    function _strcmp($0, $1) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
        var sp = 0;
        sp = STACKTOP;
        $2 = HEAP8[$0 >> 0] | 0;
        $3 = HEAP8[$1 >> 0] | 0;
        $4 = ($2 << 24 >> 24) != ($3 << 24 >> 24);
        $5 = ($2 << 24 >> 24) == (0);
        $or$cond9 = $5 | $4;
        if ($or$cond9) {
            $$lcssa = $3; $$lcssa8 = $2;
        } else {
            $$011 = $1; $$0710 = $0;
            while (1) {
                $6 = ((($$0710)) + 1 | 0);
                $7 = ((($$011)) + 1 | 0);
                $8 = HEAP8[$6 >> 0] | 0;
                $9 = HEAP8[$7 >> 0] | 0;
                $10 = ($8 << 24 >> 24) != ($9 << 24 >> 24);
                $11 = ($8 << 24 >> 24) == (0);
                $or$cond = $11 | $10;
                if ($or$cond) {
                    $$lcssa = $9; $$lcssa8 = $8;
                    break;
                } else {
                    $$011 = $7; $$0710 = $6;
                }
            }
        }
        $12 = $$lcssa8 & 255;
        $13 = $$lcssa & 255;
        $14 = (($12) - ($13)) | 0;
        return ($14 | 0);
    }
    function ___fwritex($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$038 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre47 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
        var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ((($2)) + 16 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ($4 | 0) == (0 | 0);
        if ($5) {
            $7 = (___towrite($2) | 0);
            $8 = ($7 | 0) == (0);
            if ($8) {
                $$pre = HEAP32[$3 >> 2] | 0;
                $12 = $$pre;
                label = 5;
            } else {
                $$1 = 0;
            }
        } else {
            $6 = $4;
            $12 = $6;
            label = 5;
        }
        L5: do {
            if ((label | 0) == 5) {
                $9 = ((($2)) + 20 | 0);
                $10 = HEAP32[$9 >> 2] | 0;
                $11 = (($12) - ($10)) | 0;
                $13 = ($11 >>> 0) < ($1 >>> 0);
                $14 = $10;
                if ($13) {
                    $15 = ((($2)) + 36 | 0);
                    $16 = HEAP32[$15 >> 2] | 0;
                    $17 = (FUNCTION_TABLE_iiii[$16 & 15]($2, $0, $1) | 0);
                    $$1 = $17;
                    break;
                }
                $18 = ((($2)) + 75 | 0);
                $19 = HEAP8[$18 >> 0] | 0;
                $20 = ($19 << 24 >> 24) > (-1);
                L10: do {
                    if ($20) {
                        $$038 = $1;
                        while (1) {
                            $21 = ($$038 | 0) == (0);
                            if ($21) {
                                $$139 = 0; $$141 = $0; $$143 = $1; $31 = $14;
                                break L10;
                            }
                            $22 = (($$038) + -1) | 0;
                            $23 = (($0) + ($22) | 0);
                            $24 = HEAP8[$23 >> 0] | 0;
                            $25 = ($24 << 24 >> 24) == (10);
                            if ($25) {
                                break;
                            } else {
                                $$038 = $22;
                            }
                        }
                        $26 = ((($2)) + 36 | 0);
                        $27 = HEAP32[$26 >> 2] | 0;
                        $28 = (FUNCTION_TABLE_iiii[$27 & 15]($2, $0, $$038) | 0);
                        $29 = ($28 >>> 0) < ($$038 >>> 0);
                        if ($29) {
                            $$1 = $28;
                            break L5;
                        }
                        $30 = (($0) + ($$038) | 0);
                        $$042 = (($1) - ($$038)) | 0;
                        $$pre47 = HEAP32[$9 >> 2] | 0;
                        $$139 = $$038; $$141 = $30; $$143 = $$042; $31 = $$pre47;
                    } else {
                        $$139 = 0; $$141 = $0; $$143 = $1; $31 = $14;
                    }
                } while (0);
                (_memcpy(($31 | 0), ($$141 | 0), ($$143 | 0)) | 0);
                $32 = HEAP32[$9 >> 2] | 0;
                $33 = (($32) + ($$143) | 0);
                HEAP32[$9 >> 2] = $33;
                $34 = (($$139) + ($$143)) | 0;
                $$1 = $34;
            }
        } while (0);
        return ($$1 | 0);
    }
    function ___towrite($0) {
        $0 = $0 | 0;
        var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
        var $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ((($0)) + 74 | 0);
        $2 = HEAP8[$1 >> 0] | 0;
        $3 = $2 << 24 >> 24;
        $4 = (($3) + 255) | 0;
        $5 = $4 | $3;
        $6 = $5 & 255;
        HEAP8[$1 >> 0] = $6;
        $7 = HEAP32[$0 >> 2] | 0;
        $8 = $7 & 8;
        $9 = ($8 | 0) == (0);
        if ($9) {
            $11 = ((($0)) + 8 | 0);
            HEAP32[$11 >> 2] = 0;
            $12 = ((($0)) + 4 | 0);
            HEAP32[$12 >> 2] = 0;
            $13 = ((($0)) + 44 | 0);
            $14 = HEAP32[$13 >> 2] | 0;
            $15 = ((($0)) + 28 | 0);
            HEAP32[$15 >> 2] = $14;
            $16 = ((($0)) + 20 | 0);
            HEAP32[$16 >> 2] = $14;
            $17 = $14;
            $18 = ((($0)) + 48 | 0);
            $19 = HEAP32[$18 >> 2] | 0;
            $20 = (($17) + ($19) | 0);
            $21 = ((($0)) + 16 | 0);
            HEAP32[$21 >> 2] = $20;
            $$0 = 0;
        } else {
            $10 = $7 | 32;
            HEAP32[$0 >> 2] = $10;
            $$0 = -1;
        }
        return ($$0 | 0);
    }
    function _sn_write($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ((($0)) + 16 | 0);
        $4 = HEAP32[$3 >> 2] | 0;
        $5 = ((($0)) + 20 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (($4) - ($6)) | 0;
        $8 = ($7 >>> 0) > ($2 >>> 0);
        $$ = $8 ? $2 : $7;
        $$cast = $6;
        (_memcpy(($$cast | 0), ($1 | 0), ($$ | 0)) | 0);
        $9 = HEAP32[$5 >> 2] | 0;
        $10 = (($9) + ($$) | 0);
        HEAP32[$5 >> 2] = $10;
        return ($2 | 0);
    }
    function _strlen($0) {
        $0 = $0 | 0;
        var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
        var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = $0;
        $2 = $1 & 3;
        $3 = ($2 | 0) == (0);
        L1: do {
            if ($3) {
                $$015$lcssa = $0;
                label = 4;
            } else {
                $$01519 = $0; $23 = $1;
                while (1) {
                    $4 = HEAP8[$$01519 >> 0] | 0;
                    $5 = ($4 << 24 >> 24) == (0);
                    if ($5) {
                        $$sink = $23;
                        break L1;
                    }
                    $6 = ((($$01519)) + 1 | 0);
                    $7 = $6;
                    $8 = $7 & 3;
                    $9 = ($8 | 0) == (0);
                    if ($9) {
                        $$015$lcssa = $6;
                        label = 4;
                        break;
                    } else {
                        $$01519 = $6; $23 = $7;
                    }
                }
            }
        } while (0);
        if ((label | 0) == 4) {
            $$0 = $$015$lcssa;
            while (1) {
                $10 = HEAP32[$$0 >> 2] | 0;
                $11 = (($10) + -16843009) | 0;
                $12 = $10 & -2139062144;
                $13 = $12 ^ -2139062144;
                $14 = $13 & $11;
                $15 = ($14 | 0) == (0);
                $16 = ((($$0)) + 4 | 0);
                if ($15) {
                    $$0 = $16;
                } else {
                    break;
                }
            }
            $17 = $10 & 255;
            $18 = ($17 << 24 >> 24) == (0);
            if ($18) {
                $$1$lcssa = $$0;
            } else {
                $$pn = $$0;
                while (1) {
                    $19 = ((($$pn)) + 1 | 0);
                    $$pre = HEAP8[$19 >> 0] | 0;
                    $20 = ($$pre << 24 >> 24) == (0);
                    if ($20) {
                        $$1$lcssa = $19;
                        break;
                    } else {
                        $$pn = $19;
                    }
                }
            }
            $21 = $$1$lcssa;
            $$sink = $21;
        }
        $22 = (($$sink) - ($1)) | 0;
        return ($22 | 0);
    }
    function _memcmp($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($2 | 0) == (0);
        L1: do {
            if ($3) {
                $14 = 0;
            } else {
                $$01318 = $0; $$01417 = $2; $$019 = $1;
                while (1) {
                    $4 = HEAP8[$$01318 >> 0] | 0;
                    $5 = HEAP8[$$019 >> 0] | 0;
                    $6 = ($4 << 24 >> 24) == ($5 << 24 >> 24);
                    if (!($6)) {
                        break;
                    }
                    $7 = (($$01417) + -1) | 0;
                    $8 = ((($$01318)) + 1 | 0);
                    $9 = ((($$019)) + 1 | 0);
                    $10 = ($7 | 0) == (0);
                    if ($10) {
                        $14 = 0;
                        break L1;
                    } else {
                        $$01318 = $8; $$01417 = $7; $$019 = $9;
                    }
                }
                $11 = $4 & 255;
                $12 = $5 & 255;
                $13 = (($11) - ($12)) | 0;
                $14 = $13;
            }
        } while (0);
        return ($14 | 0);
    }
    function ___stpncpy($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$03866 = 0, $$039$lcssa = 0, $$03965 = 0, $$041$lcssa = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0, $$243 = 0, $$247 = 0, $$3 = 0;
        var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond63 = 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        $3 = $1;
        $4 = $0;
        $5 = $3 ^ $4;
        $6 = $5 & 3;
        $7 = ($6 | 0) == (0);
        L1: do {
            if ($7) {
                $8 = $3 & 3;
                $9 = ($8 | 0) != (0);
                $10 = ($2 | 0) != (0);
                $or$cond63 = $10 & $9;
                if ($or$cond63) {
                    $$03866 = $2; $$03965 = $1; $$04164 = $0;
                    while (1) {
                        $11 = HEAP8[$$03965 >> 0] | 0;
                        HEAP8[$$04164 >> 0] = $11;
                        $12 = ($11 << 24 >> 24) == (0);
                        if ($12) {
                            $$243 = $$04164; $$3 = $$03866;
                            break L1;
                        }
                        $13 = (($$03866) + -1) | 0;
                        $14 = ((($$03965)) + 1 | 0);
                        $15 = ((($$04164)) + 1 | 0);
                        $16 = $14;
                        $17 = $16 & 3;
                        $18 = ($17 | 0) != (0);
                        $19 = ($13 | 0) != (0);
                        $or$cond = $19 & $18;
                        if ($or$cond) {
                            $$03866 = $13; $$03965 = $14; $$04164 = $15;
                        } else {
                            $$038$lcssa = $13; $$039$lcssa = $14; $$041$lcssa = $15; $$lcssa = $19;
                            break;
                        }
                    }
                } else {
                    $$038$lcssa = $2; $$039$lcssa = $1; $$041$lcssa = $0; $$lcssa = $10;
                }
                if ($$lcssa) {
                    $$pr = HEAP8[$$039$lcssa >> 0] | 0;
                    $20 = ($$pr << 24 >> 24) == (0);
                    if ($20) {
                        $$243 = $$041$lcssa; $$3 = $$038$lcssa;
                    } else {
                        $21 = ($$038$lcssa >>> 0) > (3);
                        L10: do {
                            if ($21) {
                                $$03753 = $$041$lcssa; $$054 = $$039$lcssa; $$152 = $$038$lcssa;
                                while (1) {
                                    $22 = HEAP32[$$054 >> 2] | 0;
                                    $23 = (($22) + -16843009) | 0;
                                    $24 = $22 & -2139062144;
                                    $25 = $24 ^ -2139062144;
                                    $26 = $25 & $23;
                                    $27 = ($26 | 0) == (0);
                                    if (!($27)) {
                                        $$0$lcssa = $$054; $$037$lcssa = $$03753; $$1$lcssa = $$152;
                                        break L10;
                                    }
                                    HEAP32[$$03753 >> 2] = $22;
                                    $28 = (($$152) + -4) | 0;
                                    $29 = ((($$054)) + 4 | 0);
                                    $30 = ((($$03753)) + 4 | 0);
                                    $31 = ($28 >>> 0) > (3);
                                    if ($31) {
                                        $$03753 = $30; $$054 = $29; $$152 = $28;
                                    } else {
                                        $$0$lcssa = $29; $$037$lcssa = $30; $$1$lcssa = $28;
                                        break;
                                    }
                                }
                            } else {
                                $$0$lcssa = $$039$lcssa; $$037$lcssa = $$041$lcssa; $$1$lcssa = $$038$lcssa;
                            }
                        } while (0);
                        $$140$ph = $$0$lcssa; $$142$ph = $$037$lcssa; $$2$ph = $$1$lcssa;
                        label = 11;
                    }
                } else {
                    $$243 = $$041$lcssa; $$3 = 0;
                }
            } else {
                $$140$ph = $1; $$142$ph = $0; $$2$ph = $2;
                label = 11;
            }
        } while (0);
        L15: do {
            if ((label | 0) == 11) {
                $32 = ($$2$ph | 0) == (0);
                if ($32) {
                    $$243 = $$142$ph; $$3 = 0;
                } else {
                    $$14046 = $$140$ph; $$14245 = $$142$ph; $$247 = $$2$ph;
                    while (1) {
                        $33 = HEAP8[$$14046 >> 0] | 0;
                        HEAP8[$$14245 >> 0] = $33;
                        $34 = ($33 << 24 >> 24) == (0);
                        if ($34) {
                            $$243 = $$14245; $$3 = $$247;
                            break L15;
                        }
                        $35 = (($$247) + -1) | 0;
                        $36 = ((($$14046)) + 1 | 0);
                        $37 = ((($$14245)) + 1 | 0);
                        $38 = ($35 | 0) == (0);
                        if ($38) {
                            $$243 = $37; $$3 = 0;
                            break;
                        } else {
                            $$14046 = $36; $$14245 = $37; $$247 = $35;
                        }
                    }
                }
            }
        } while (0);
        (_memset(($$243 | 0), 0, ($$3 | 0)) | 0);
        return ($$243 | 0);
    }
    function _strncpy($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        (___stpncpy($0, $1, $2) | 0);
        return ($0 | 0);
    }
    function _fprintf($0, $1, $varargs) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $varargs = $varargs | 0;
        var $2 = 0, $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $2 = sp;
        HEAP32[$2 >> 2] = $varargs;
        $3 = (_vfprintf($0, $1, $2) | 0);
        STACKTOP = sp; return ($3 | 0);
    }
    function __Znwj($0) {
        $0 = $0 | 0;
        var $$ = 0, $$lcssa = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $1 = ($0 | 0) == (0);
        $$ = $1 ? 1 : $0;
        while (1) {
            $2 = (_malloc($$) | 0);
            $3 = ($2 | 0) == (0 | 0);
            if (!($3)) {
                $$lcssa = $2;
                break;
            }
            $4 = (__ZSt15get_new_handlerv() | 0);
            $5 = ($4 | 0) == (0 | 0);
            if ($5) {
                $$lcssa = 0;
                break;
            }
            FUNCTION_TABLE_v[$4 & 0]();
        }
        return ($$lcssa | 0);
    }
    function __ZdlPv($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        _free($0);
        return;
    }
    function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return;
    }
    function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
        __ZdlPv($0);
        return;
    }
    function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return;
    }
    function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return;
    }
    function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $$0 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
        var dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 64 | 0;
        $3 = sp;
        $4 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0);
        if ($4) {
            $$2 = 1;
        } else {
            $5 = ($1 | 0) == (0 | 0);
            if ($5) {
                $$2 = 0;
            } else {
                $6 = (___dynamic_cast($1, 7552, 7536, 0) | 0);
                $7 = ($6 | 0) == (0 | 0);
                if ($7) {
                    $$2 = 0;
                } else {
                    $8 = ((($3)) + 4 | 0);
                    dest = $8; stop = dest + 52 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0));
                    HEAP32[$3 >> 2] = $6;
                    $9 = ((($3)) + 8 | 0);
                    HEAP32[$9 >> 2] = $0;
                    $10 = ((($3)) + 12 | 0);
                    HEAP32[$10 >> 2] = -1;
                    $11 = ((($3)) + 48 | 0);
                    HEAP32[$11 >> 2] = 1;
                    $12 = HEAP32[$6 >> 2] | 0;
                    $13 = ((($12)) + 28 | 0);
                    $14 = HEAP32[$13 >> 2] | 0;
                    $15 = HEAP32[$2 >> 2] | 0;
                    FUNCTION_TABLE_viiii[$14 & 31]($6, $3, $15, 1);
                    $16 = ((($3)) + 24 | 0);
                    $17 = HEAP32[$16 >> 2] | 0;
                    $18 = ($17 | 0) == (1);
                    if ($18) {
                        $19 = ((($3)) + 16 | 0);
                        $20 = HEAP32[$19 >> 2] | 0;
                        HEAP32[$2 >> 2] = $20;
                        $$0 = 1;
                    } else {
                        $$0 = 0;
                    }
                    $$2 = $$0;
                }
            }
        }
        STACKTOP = sp; return ($$2 | 0);
    }
    function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = ((($1)) + 8 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $7, $5) | 0);
        if ($8) {
            __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
        }
        return;
    }
    function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ((($1)) + 8 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $6, $4) | 0);
        do {
            if ($7) {
                __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3);
            } else {
                $8 = HEAP32[$1 >> 2] | 0;
                $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $8, $4) | 0);
                if ($9) {
                    $10 = ((($1)) + 16 | 0);
                    $11 = HEAP32[$10 >> 2] | 0;
                    $12 = ($11 | 0) == ($2 | 0);
                    if (!($12)) {
                        $13 = ((($1)) + 20 | 0);
                        $14 = HEAP32[$13 >> 2] | 0;
                        $15 = ($14 | 0) == ($2 | 0);
                        if (!($15)) {
                            $18 = ((($1)) + 32 | 0);
                            HEAP32[$18 >> 2] = $3;
                            HEAP32[$13 >> 2] = $2;
                            $19 = ((($1)) + 40 | 0);
                            $20 = HEAP32[$19 >> 2] | 0;
                            $21 = (($20) + 1) | 0;
                            HEAP32[$19 >> 2] = $21;
                            $22 = ((($1)) + 36 | 0);
                            $23 = HEAP32[$22 >> 2] | 0;
                            $24 = ($23 | 0) == (1);
                            if ($24) {
                                $25 = ((($1)) + 24 | 0);
                                $26 = HEAP32[$25 >> 2] | 0;
                                $27 = ($26 | 0) == (2);
                                if ($27) {
                                    $28 = ((($1)) + 54 | 0);
                                    HEAP8[$28 >> 0] = 1;
                                }
                            }
                            $29 = ((($1)) + 44 | 0);
                            HEAP32[$29 >> 2] = 4;
                            break;
                        }
                    }
                    $16 = ($3 | 0) == (1);
                    if ($16) {
                        $17 = ((($1)) + 32 | 0);
                        HEAP32[$17 >> 2] = 1;
                    }
                }
            }
        } while (0);
        return;
    }
    function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($1)) + 8 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $5, 0) | 0);
        if ($6) {
            __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
        }
        return;
    }
    function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        var $3 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $3 = ($0 | 0) == ($1 | 0);
        return ($3 | 0);
    }
    function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($1)) + 16 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ($5 | 0) == (0 | 0);
        do {
            if ($6) {
                HEAP32[$4 >> 2] = $2;
                $7 = ((($1)) + 24 | 0);
                HEAP32[$7 >> 2] = $3;
                $8 = ((($1)) + 36 | 0);
                HEAP32[$8 >> 2] = 1;
            } else {
                $9 = ($5 | 0) == ($2 | 0);
                if (!($9)) {
                    $13 = ((($1)) + 36 | 0);
                    $14 = HEAP32[$13 >> 2] | 0;
                    $15 = (($14) + 1) | 0;
                    HEAP32[$13 >> 2] = $15;
                    $16 = ((($1)) + 24 | 0);
                    HEAP32[$16 >> 2] = 2;
                    $17 = ((($1)) + 54 | 0);
                    HEAP8[$17 >> 0] = 1;
                    break;
                }
                $10 = ((($1)) + 24 | 0);
                $11 = HEAP32[$10 >> 2] | 0;
                $12 = ($11 | 0) == (2);
                if ($12) {
                    HEAP32[$10 >> 2] = $3;
                }
            }
        } while (0);
        return;
    }
    function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($1)) + 4 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = ($5 | 0) == ($2 | 0);
        if ($6) {
            $7 = ((($1)) + 28 | 0);
            $8 = HEAP32[$7 >> 2] | 0;
            $9 = ($8 | 0) == (1);
            if (!($9)) {
                HEAP32[$7 >> 2] = $3;
            }
        }
        return;
    }
    function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
        var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond22 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ((($1)) + 53 | 0);
        HEAP8[$5 >> 0] = 1;
        $6 = ((($1)) + 4 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = ($7 | 0) == ($3 | 0);
        do {
            if ($8) {
                $9 = ((($1)) + 52 | 0);
                HEAP8[$9 >> 0] = 1;
                $10 = ((($1)) + 16 | 0);
                $11 = HEAP32[$10 >> 2] | 0;
                $12 = ($11 | 0) == (0 | 0);
                if ($12) {
                    HEAP32[$10 >> 2] = $2;
                    $13 = ((($1)) + 24 | 0);
                    HEAP32[$13 >> 2] = $4;
                    $14 = ((($1)) + 36 | 0);
                    HEAP32[$14 >> 2] = 1;
                    $15 = ((($1)) + 48 | 0);
                    $16 = HEAP32[$15 >> 2] | 0;
                    $17 = ($16 | 0) == (1);
                    $18 = ($4 | 0) == (1);
                    $or$cond = $17 & $18;
                    if (!($or$cond)) {
                        break;
                    }
                    $19 = ((($1)) + 54 | 0);
                    HEAP8[$19 >> 0] = 1;
                    break;
                }
                $20 = ($11 | 0) == ($2 | 0);
                if (!($20)) {
                    $30 = ((($1)) + 36 | 0);
                    $31 = HEAP32[$30 >> 2] | 0;
                    $32 = (($31) + 1) | 0;
                    HEAP32[$30 >> 2] = $32;
                    $33 = ((($1)) + 54 | 0);
                    HEAP8[$33 >> 0] = 1;
                    break;
                }
                $21 = ((($1)) + 24 | 0);
                $22 = HEAP32[$21 >> 2] | 0;
                $23 = ($22 | 0) == (2);
                if ($23) {
                    HEAP32[$21 >> 2] = $4;
                    $27 = $4;
                } else {
                    $27 = $22;
                }
                $24 = ((($1)) + 48 | 0);
                $25 = HEAP32[$24 >> 2] | 0;
                $26 = ($25 | 0) == (1);
                $28 = ($27 | 0) == (1);
                $or$cond22 = $26 & $28;
                if ($or$cond22) {
                    $29 = ((($1)) + 54 | 0);
                    HEAP8[$29 >> 0] = 1;
                }
            }
        } while (0);
        return;
    }
    function ___dynamic_cast($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $$ = 0, $$0 = 0, $$33 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
        var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
        var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $or$cond30 = 0, $or$cond32 = 0, dest = 0, label = 0, sp = 0, stop = 0;
        sp = STACKTOP;
        STACKTOP = STACKTOP + 64 | 0;
        $4 = sp;
        $5 = HEAP32[$0 >> 2] | 0;
        $6 = ((($5)) + -8 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (($0) + ($7) | 0);
        $9 = ((($5)) + -4 | 0);
        $10 = HEAP32[$9 >> 2] | 0;
        HEAP32[$4 >> 2] = $2;
        $11 = ((($4)) + 4 | 0);
        HEAP32[$11 >> 2] = $0;
        $12 = ((($4)) + 8 | 0);
        HEAP32[$12 >> 2] = $1;
        $13 = ((($4)) + 12 | 0);
        HEAP32[$13 >> 2] = $3;
        $14 = ((($4)) + 16 | 0);
        $15 = ((($4)) + 20 | 0);
        $16 = ((($4)) + 24 | 0);
        $17 = ((($4)) + 28 | 0);
        $18 = ((($4)) + 32 | 0);
        $19 = ((($4)) + 40 | 0);
        dest = $14; stop = dest + 36 | 0; do { HEAP32[dest >> 2] = 0 | 0; dest = dest + 4 | 0; } while ((dest | 0) < (stop | 0)); HEAP16[$14 + 36 >> 1] = 0 | 0; HEAP8[$14 + 38 >> 0] = 0 | 0;
        $20 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0);
        L1: do {
            if ($20) {
                $21 = ((($4)) + 48 | 0);
                HEAP32[$21 >> 2] = 1;
                $22 = HEAP32[$10 >> 2] | 0;
                $23 = ((($22)) + 20 | 0);
                $24 = HEAP32[$23 >> 2] | 0;
                FUNCTION_TABLE_viiiiii[$24 & 31]($10, $4, $8, $8, 1, 0);
                $25 = HEAP32[$16 >> 2] | 0;
                $26 = ($25 | 0) == (1);
                $$ = $26 ? $8 : 0;
                $$0 = $$;
            } else {
                $27 = ((($4)) + 36 | 0);
                $28 = HEAP32[$10 >> 2] | 0;
                $29 = ((($28)) + 24 | 0);
                $30 = HEAP32[$29 >> 2] | 0;
                FUNCTION_TABLE_viiiii[$30 & 15]($10, $4, $8, 1, 0);
                $31 = HEAP32[$27 >> 2] | 0;
                switch ($31 | 0) {
                    case 0: {
                        $32 = HEAP32[$19 >> 2] | 0;
                        $33 = ($32 | 0) == (1);
                        $34 = HEAP32[$17 >> 2] | 0;
                        $35 = ($34 | 0) == (1);
                        $or$cond = $33 & $35;
                        $36 = HEAP32[$18 >> 2] | 0;
                        $37 = ($36 | 0) == (1);
                        $or$cond28 = $or$cond & $37;
                        $38 = HEAP32[$15 >> 2] | 0;
                        $$33 = $or$cond28 ? $38 : 0;
                        $$0 = $$33;
                        break L1;
                        break;
                    }
                    case 1: {
                        break;
                    }
                    default: {
                        $$0 = 0;
                        break L1;
                    }
                }
                $39 = HEAP32[$16 >> 2] | 0;
                $40 = ($39 | 0) == (1);
                if (!($40)) {
                    $41 = HEAP32[$19 >> 2] | 0;
                    $42 = ($41 | 0) == (0);
                    $43 = HEAP32[$17 >> 2] | 0;
                    $44 = ($43 | 0) == (1);
                    $or$cond30 = $42 & $44;
                    $45 = HEAP32[$18 >> 2] | 0;
                    $46 = ($45 | 0) == (1);
                    $or$cond32 = $or$cond30 & $46;
                    if (!($or$cond32)) {
                        $$0 = 0;
                        break;
                    }
                }
                $47 = HEAP32[$14 >> 2] | 0;
                $$0 = $47;
            }
        } while (0);
        STACKTOP = sp; return ($$0 | 0);
    }
    function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        __ZN10__cxxabiv116__shim_type_infoD2Ev($0);
        __ZdlPv($0);
        return;
    }
    function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        $5 = $5 | 0;
        var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $6 = ((($1)) + 8 | 0);
        $7 = HEAP32[$6 >> 2] | 0;
        $8 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $7, $5) | 0);
        if ($8) {
            __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4);
        } else {
            $9 = ((($0)) + 8 | 0);
            $10 = HEAP32[$9 >> 2] | 0;
            $11 = HEAP32[$10 >> 2] | 0;
            $12 = ((($11)) + 20 | 0);
            $13 = HEAP32[$12 >> 2] | 0;
            FUNCTION_TABLE_viiiiii[$13 & 31]($10, $1, $2, $3, $4, $5);
        }
        return;
    }
    function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        $4 = $4 | 0;
        var $$037$off038 = 0, $$037$off039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
        var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
        var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $5 = ((($1)) + 8 | 0);
        $6 = HEAP32[$5 >> 2] | 0;
        $7 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $6, $4) | 0);
        do {
            if ($7) {
                __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3);
            } else {
                $8 = HEAP32[$1 >> 2] | 0;
                $9 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $8, $4) | 0);
                if (!($9)) {
                    $43 = ((($0)) + 8 | 0);
                    $44 = HEAP32[$43 >> 2] | 0;
                    $45 = HEAP32[$44 >> 2] | 0;
                    $46 = ((($45)) + 24 | 0);
                    $47 = HEAP32[$46 >> 2] | 0;
                    FUNCTION_TABLE_viiiii[$47 & 15]($44, $1, $2, $3, $4);
                    break;
                }
                $10 = ((($1)) + 16 | 0);
                $11 = HEAP32[$10 >> 2] | 0;
                $12 = ($11 | 0) == ($2 | 0);
                if (!($12)) {
                    $13 = ((($1)) + 20 | 0);
                    $14 = HEAP32[$13 >> 2] | 0;
                    $15 = ($14 | 0) == ($2 | 0);
                    if (!($15)) {
                        $18 = ((($1)) + 32 | 0);
                        HEAP32[$18 >> 2] = $3;
                        $19 = ((($1)) + 44 | 0);
                        $20 = HEAP32[$19 >> 2] | 0;
                        $21 = ($20 | 0) == (4);
                        if ($21) {
                            break;
                        }
                        $22 = ((($1)) + 52 | 0);
                        HEAP8[$22 >> 0] = 0;
                        $23 = ((($1)) + 53 | 0);
                        HEAP8[$23 >> 0] = 0;
                        $24 = ((($0)) + 8 | 0);
                        $25 = HEAP32[$24 >> 2] | 0;
                        $26 = HEAP32[$25 >> 2] | 0;
                        $27 = ((($26)) + 20 | 0);
                        $28 = HEAP32[$27 >> 2] | 0;
                        FUNCTION_TABLE_viiiiii[$28 & 31]($25, $1, $2, $2, 1, $4);
                        $29 = HEAP8[$23 >> 0] | 0;
                        $30 = ($29 << 24 >> 24) == (0);
                        if ($30) {
                            $$037$off038 = 4;
                            label = 11;
                        } else {
                            $31 = HEAP8[$22 >> 0] | 0;
                            $32 = ($31 << 24 >> 24) == (0);
                            if ($32) {
                                $$037$off038 = 3;
                                label = 11;
                            } else {
                                $$037$off039 = 3;
                            }
                        }
                        if ((label | 0) == 11) {
                            HEAP32[$13 >> 2] = $2;
                            $33 = ((($1)) + 40 | 0);
                            $34 = HEAP32[$33 >> 2] | 0;
                            $35 = (($34) + 1) | 0;
                            HEAP32[$33 >> 2] = $35;
                            $36 = ((($1)) + 36 | 0);
                            $37 = HEAP32[$36 >> 2] | 0;
                            $38 = ($37 | 0) == (1);
                            if ($38) {
                                $39 = ((($1)) + 24 | 0);
                                $40 = HEAP32[$39 >> 2] | 0;
                                $41 = ($40 | 0) == (2);
                                if ($41) {
                                    $42 = ((($1)) + 54 | 0);
                                    HEAP8[$42 >> 0] = 1;
                                    $$037$off039 = $$037$off038;
                                } else {
                                    $$037$off039 = $$037$off038;
                                }
                            } else {
                                $$037$off039 = $$037$off038;
                            }
                        }
                        HEAP32[$19 >> 2] = $$037$off039;
                        break;
                    }
                }
                $16 = ($3 | 0) == (1);
                if ($16) {
                    $17 = ((($1)) + 32 | 0);
                    HEAP32[$17 >> 2] = 1;
                }
            }
        } while (0);
        return;
    }
    function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
        $0 = $0 | 0;
        $1 = $1 | 0;
        $2 = $2 | 0;
        $3 = $3 | 0;
        var $10 = 0, $11 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $4 = ((($1)) + 8 | 0);
        $5 = HEAP32[$4 >> 2] | 0;
        $6 = (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $5, 0) | 0);
        if ($6) {
            __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3);
        } else {
            $7 = ((($0)) + 8 | 0);
            $8 = HEAP32[$7 >> 2] | 0;
            $9 = HEAP32[$8 >> 2] | 0;
            $10 = ((($9)) + 28 | 0);
            $11 = HEAP32[$10 >> 2] | 0;
            FUNCTION_TABLE_viiii[$11 & 31]($8, $1, $2, $3);
        }
        return;
    }
    function __ZNSt9type_infoD2Ev($0) {
        $0 = $0 | 0;
        var label = 0, sp = 0;
        sp = STACKTOP;
        return;
    }
    function __ZSt15get_new_handlerv() {
        var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
        sp = STACKTOP;
        $0 = HEAP32[8473] | 0;
        $1 = (($0) + 0) | 0;
        HEAP32[8473] = $1;
        $2 = $0;
        return ($2 | 0);
    }
    function runPostSets() {
    }
    function ___muldsi3($a, $b) {
        $a = $a | 0;
        $b = $b | 0;
        var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
        $1 = $a & 65535;
        $2 = $b & 65535;
        $3 = Math_imul($2, $1) | 0;
        $6 = $a >>> 16;
        $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
        $11 = $b >>> 16;
        $12 = Math_imul($11, $1) | 0;
        return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
    }
    function ___muldi3($a$0, $a$1, $b$0, $b$1) {
        $a$0 = $a$0 | 0;
        $a$1 = $a$1 | 0;
        $b$0 = $b$0 | 0;
        $b$1 = $b$1 | 0;
        var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
        $x_sroa_0_0_extract_trunc = $a$0;
        $y_sroa_0_0_extract_trunc = $b$0;
        $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
        $1$1 = tempRet0;
        $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
        return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
    }
    function _i64Add(a, b, c, d) {
        /*
          x = a + b*2^32
          y = c + d*2^32
          result = l + h*2^32
        */
        a = a | 0; b = b | 0; c = c | 0; d = d | 0;
        var l = 0, h = 0;
        l = (a + c) >>> 0;
        h = (b + d + (((l >>> 0) < (a >>> 0)) | 0)) >>> 0; // Add carry from low word to high word on overflow.
        return ((tempRet0 = h, l | 0) | 0);
    }
    function _i64Subtract(a, b, c, d) {
        a = a | 0; b = b | 0; c = c | 0; d = d | 0;
        var l = 0, h = 0;
        l = (a - c) >>> 0;
        h = (b - d) >>> 0;
        h = (b - d - (((c >>> 0) > (a >>> 0)) | 0)) >>> 0; // Borrow one from high word to low word on underflow.
        return ((tempRet0 = h, l | 0) | 0);
    }
    function _llvm_cttz_i32(x) {
        x = x | 0;
        var ret = 0;
        ret = ((HEAP8[(((cttz_i8) + (x & 0xff)) >> 0)]) | 0);
        if ((ret | 0) < 8) return ret | 0;
        ret = ((HEAP8[(((cttz_i8) + ((x >> 8) & 0xff)) >> 0)]) | 0);
        if ((ret | 0) < 8) return (ret + 8) | 0;
        ret = ((HEAP8[(((cttz_i8) + ((x >> 16) & 0xff)) >> 0)]) | 0);
        if ((ret | 0) < 8) return (ret + 16) | 0;
        return (((HEAP8[(((cttz_i8) + (x >>> 24)) >> 0)]) | 0) + 24) | 0;
    }
    function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
        $a$0 = $a$0 | 0;
        $a$1 = $a$1 | 0;
        $b$0 = $b$0 | 0;
        $b$1 = $b$1 | 0;
        $rem = $rem | 0;
        var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
        $n_sroa_0_0_extract_trunc = $a$0;
        $n_sroa_1_4_extract_shift$0 = $a$1;
        $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
        $d_sroa_0_0_extract_trunc = $b$0;
        $d_sroa_1_4_extract_shift$0 = $b$1;
        $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
        if (($n_sroa_1_4_extract_trunc | 0) == 0) {
            $4 = ($rem | 0) != 0;
            if (($d_sroa_1_4_extract_trunc | 0) == 0) {
                if ($4) {
                    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
                    HEAP32[$rem + 4 >> 2] = 0;
                }
                $_0$1 = 0;
                $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
                return (tempRet0 = $_0$1, $_0$0) | 0;
            } else {
                if (!$4) {
                    $_0$1 = 0;
                    $_0$0 = 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                }
                HEAP32[$rem >> 2] = $a$0 & -1;
                HEAP32[$rem + 4 >> 2] = $a$1 & 0;
                $_0$1 = 0;
                $_0$0 = 0;
                return (tempRet0 = $_0$1, $_0$0) | 0;
            }
        }
        $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
        do {
            if (($d_sroa_0_0_extract_trunc | 0) == 0) {
                if ($17) {
                    if (($rem | 0) != 0) {
                        HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
                        HEAP32[$rem + 4 >> 2] = 0;
                    }
                    $_0$1 = 0;
                    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                }
                if (($n_sroa_0_0_extract_trunc | 0) == 0) {
                    if (($rem | 0) != 0) {
                        HEAP32[$rem >> 2] = 0;
                        HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
                    }
                    $_0$1 = 0;
                    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                }
                $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
                if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
                    if (($rem | 0) != 0) {
                        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
                        HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
                    }
                    $_0$1 = 0;
                    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                }
                $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
                $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
                if ($51 >>> 0 <= 30) {
                    $57 = $51 + 1 | 0;
                    $58 = 31 - $51 | 0;
                    $sr_1_ph = $57;
                    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
                    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
                    $q_sroa_0_1_ph = 0;
                    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
                    break;
                }
                if (($rem | 0) == 0) {
                    $_0$1 = 0;
                    $_0$0 = 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                }
                HEAP32[$rem >> 2] = 0 | $a$0 & -1;
                HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
                $_0$1 = 0;
                $_0$0 = 0;
                return (tempRet0 = $_0$1, $_0$0) | 0;
            } else {
                if (!$17) {
                    $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
                    $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
                    if ($119 >>> 0 <= 31) {
                        $125 = $119 + 1 | 0;
                        $126 = 31 - $119 | 0;
                        $130 = $119 - 31 >> 31;
                        $sr_1_ph = $125;
                        $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
                        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
                        $q_sroa_0_1_ph = 0;
                        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
                        break;
                    }
                    if (($rem | 0) == 0) {
                        $_0$1 = 0;
                        $_0$0 = 0;
                        return (tempRet0 = $_0$1, $_0$0) | 0;
                    }
                    HEAP32[$rem >> 2] = 0 | $a$0 & -1;
                    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
                    $_0$1 = 0;
                    $_0$0 = 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                }
                $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
                if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
                    $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
                    $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
                    $89 = 64 - $88 | 0;
                    $91 = 32 - $88 | 0;
                    $92 = $91 >> 31;
                    $95 = $88 - 32 | 0;
                    $105 = $95 >> 31;
                    $sr_1_ph = $88;
                    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
                    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
                    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
                    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
                    break;
                }
                if (($rem | 0) != 0) {
                    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
                    HEAP32[$rem + 4 >> 2] = 0;
                }
                if (($d_sroa_0_0_extract_trunc | 0) == 1) {
                    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
                    $_0$0 = 0 | $a$0 & -1;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                } else {
                    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
                    $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
                    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
                    return (tempRet0 = $_0$1, $_0$0) | 0;
                }
            }
        } while (0);
        if (($sr_1_ph | 0) == 0) {
            $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
            $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
            $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
            $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
            $carry_0_lcssa$1 = 0;
            $carry_0_lcssa$0 = 0;
        } else {
            $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
            $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
            $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
            $137$1 = tempRet0;
            $q_sroa_1_1198 = $q_sroa_1_1_ph;
            $q_sroa_0_1199 = $q_sroa_0_1_ph;
            $r_sroa_1_1200 = $r_sroa_1_1_ph;
            $r_sroa_0_1201 = $r_sroa_0_1_ph;
            $sr_1202 = $sr_1_ph;
            $carry_0203 = 0;
            while (1) {
                $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
                $149 = $carry_0203 | $q_sroa_0_1199 << 1;
                $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
                $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
                _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
                $150$1 = tempRet0;
                $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
                $152 = $151$0 & 1;
                $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
                $r_sroa_0_0_extract_trunc = $154$0;
                $r_sroa_1_4_extract_trunc = tempRet0;
                $155 = $sr_1202 - 1 | 0;
                if (($155 | 0) == 0) {
                    break;
                } else {
                    $q_sroa_1_1198 = $147;
                    $q_sroa_0_1199 = $149;
                    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
                    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
                    $sr_1202 = $155;
                    $carry_0203 = $152;
                }
            }
            $q_sroa_1_1_lcssa = $147;
            $q_sroa_0_1_lcssa = $149;
            $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
            $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
            $carry_0_lcssa$1 = 0;
            $carry_0_lcssa$0 = $152;
        }
        $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
        $q_sroa_0_0_insert_ext75$1 = 0;
        $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
        if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
            HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
        }
        $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
        $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
        $a$0 = $a$0 | 0;
        $a$1 = $a$1 | 0;
        $b$0 = $b$0 | 0;
        $b$1 = $b$1 | 0;
        var $1$0 = 0;
        $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
        return $1$0 | 0;
    }
    function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
        $a$0 = $a$0 | 0;
        $a$1 = $a$1 | 0;
        $b$0 = $b$0 | 0;
        $b$1 = $b$1 | 0;
        var $rem = 0, __stackBase__ = 0;
        __stackBase__ = STACKTOP;
        STACKTOP = STACKTOP + 16 | 0;
        $rem = __stackBase__ | 0;
        ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
        STACKTOP = __stackBase__;
        return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
    }
    function _bitshift64Lshr(low, high, bits) {
        low = low | 0; high = high | 0; bits = bits | 0;
        var ander = 0;
        if ((bits | 0) < 32) {
            ander = ((1 << bits) - 1) | 0;
            tempRet0 = high >>> bits;
            return (low >>> bits) | ((high & ander) << (32 - bits));
        }
        tempRet0 = 0;
        return (high >>> (bits - 32)) | 0;
    }
    function _bitshift64Shl(low, high, bits) {
        low = low | 0; high = high | 0; bits = bits | 0;
        var ander = 0;
        if ((bits | 0) < 32) {
            ander = ((1 << bits) - 1) | 0;
            tempRet0 = (high << bits) | ((low & (ander << (32 - bits))) >>> (32 - bits));
            return low << bits;
        }
        tempRet0 = low << (bits - 32);
        return 0;
    }
    function _llvm_bswap_i32(x) {
        x = x | 0;
        return (((x & 0xff) << 24) | (((x >> 8) & 0xff) << 16) | (((x >> 16) & 0xff) << 8) | (x >>> 24)) | 0;
    }
    function _memcpy(dest, src, num) {
        dest = dest | 0; src = src | 0; num = num | 0;
        var ret = 0;
        var aligned_dest_end = 0;
        var block_aligned_dest_end = 0;
        var dest_end = 0;
        // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
        if ((num | 0) >=
            8192
        ) {
            return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
        }

        ret = dest | 0;
        dest_end = (dest + num) | 0;
        if ((dest & 3) == (src & 3)) {
            // The initial unaligned < 4-byte front.
            while (dest & 3) {
                if ((num | 0) == 0) return ret | 0;
                HEAP8[((dest) >> 0)] = ((HEAP8[((src) >> 0)]) | 0);
                dest = (dest + 1) | 0;
                src = (src + 1) | 0;
                num = (num - 1) | 0;
            }
            aligned_dest_end = (dest_end & -4) | 0;
            block_aligned_dest_end = (aligned_dest_end - 64) | 0;
            while ((dest | 0) <= (block_aligned_dest_end | 0)) {
                HEAP32[((dest) >> 2)] = ((HEAP32[((src) >> 2)]) | 0);
                HEAP32[(((dest) + (4)) >> 2)] = ((HEAP32[(((src) + (4)) >> 2)]) | 0);
                HEAP32[(((dest) + (8)) >> 2)] = ((HEAP32[(((src) + (8)) >> 2)]) | 0);
                HEAP32[(((dest) + (12)) >> 2)] = ((HEAP32[(((src) + (12)) >> 2)]) | 0);
                HEAP32[(((dest) + (16)) >> 2)] = ((HEAP32[(((src) + (16)) >> 2)]) | 0);
                HEAP32[(((dest) + (20)) >> 2)] = ((HEAP32[(((src) + (20)) >> 2)]) | 0);
                HEAP32[(((dest) + (24)) >> 2)] = ((HEAP32[(((src) + (24)) >> 2)]) | 0);
                HEAP32[(((dest) + (28)) >> 2)] = ((HEAP32[(((src) + (28)) >> 2)]) | 0);
                HEAP32[(((dest) + (32)) >> 2)] = ((HEAP32[(((src) + (32)) >> 2)]) | 0);
                HEAP32[(((dest) + (36)) >> 2)] = ((HEAP32[(((src) + (36)) >> 2)]) | 0);
                HEAP32[(((dest) + (40)) >> 2)] = ((HEAP32[(((src) + (40)) >> 2)]) | 0);
                HEAP32[(((dest) + (44)) >> 2)] = ((HEAP32[(((src) + (44)) >> 2)]) | 0);
                HEAP32[(((dest) + (48)) >> 2)] = ((HEAP32[(((src) + (48)) >> 2)]) | 0);
                HEAP32[(((dest) + (52)) >> 2)] = ((HEAP32[(((src) + (52)) >> 2)]) | 0);
                HEAP32[(((dest) + (56)) >> 2)] = ((HEAP32[(((src) + (56)) >> 2)]) | 0);
                HEAP32[(((dest) + (60)) >> 2)] = ((HEAP32[(((src) + (60)) >> 2)]) | 0);
                dest = (dest + 64) | 0;
                src = (src + 64) | 0;
            }
            while ((dest | 0) < (aligned_dest_end | 0)) {
                HEAP32[((dest) >> 2)] = ((HEAP32[((src) >> 2)]) | 0);
                dest = (dest + 4) | 0;
                src = (src + 4) | 0;
            }
        } else {
            // In the unaligned copy case, unroll a bit as well.
            aligned_dest_end = (dest_end - 4) | 0;
            while ((dest | 0) < (aligned_dest_end | 0)) {
                HEAP8[((dest) >> 0)] = ((HEAP8[((src) >> 0)]) | 0);
                HEAP8[(((dest) + (1)) >> 0)] = ((HEAP8[(((src) + (1)) >> 0)]) | 0);
                HEAP8[(((dest) + (2)) >> 0)] = ((HEAP8[(((src) + (2)) >> 0)]) | 0);
                HEAP8[(((dest) + (3)) >> 0)] = ((HEAP8[(((src) + (3)) >> 0)]) | 0);
                dest = (dest + 4) | 0;
                src = (src + 4) | 0;
            }
        }
        // The remaining unaligned < 4 byte tail.
        while ((dest | 0) < (dest_end | 0)) {
            HEAP8[((dest) >> 0)] = ((HEAP8[((src) >> 0)]) | 0);
            dest = (dest + 1) | 0;
            src = (src + 1) | 0;
        }
        return ret | 0;
    }
    function _memmove(dest, src, num) {
        dest = dest | 0; src = src | 0; num = num | 0;
        var ret = 0;
        if (((src | 0) < (dest | 0)) & ((dest | 0) < ((src + num) | 0))) {
            // Unlikely case: Copy backwards in a safe manner
            ret = dest;
            src = (src + num) | 0;
            dest = (dest + num) | 0;
            while ((num | 0) > 0) {
                dest = (dest - 1) | 0;
                src = (src - 1) | 0;
                num = (num - 1) | 0;
                HEAP8[((dest) >> 0)] = ((HEAP8[((src) >> 0)]) | 0);
            }
            dest = ret;
        } else {
            _memcpy(dest, src, num) | 0;
        }
        return dest | 0;
    }
    function _memset(ptr, value, num) {
        ptr = ptr | 0; value = value | 0; num = num | 0;
        var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
        end = (ptr + num) | 0;

        value = value & 0xff;
        if ((num | 0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
            while ((ptr & 3) != 0) {
                HEAP8[((ptr) >> 0)] = value;
                ptr = (ptr + 1) | 0;
            }

            aligned_end = (end & -4) | 0;
            block_aligned_end = (aligned_end - 64) | 0;
            value4 = value | (value << 8) | (value << 16) | (value << 24);

            while ((ptr | 0) <= (block_aligned_end | 0)) {
                HEAP32[((ptr) >> 2)] = value4;
                HEAP32[(((ptr) + (4)) >> 2)] = value4;
                HEAP32[(((ptr) + (8)) >> 2)] = value4;
                HEAP32[(((ptr) + (12)) >> 2)] = value4;
                HEAP32[(((ptr) + (16)) >> 2)] = value4;
                HEAP32[(((ptr) + (20)) >> 2)] = value4;
                HEAP32[(((ptr) + (24)) >> 2)] = value4;
                HEAP32[(((ptr) + (28)) >> 2)] = value4;
                HEAP32[(((ptr) + (32)) >> 2)] = value4;
                HEAP32[(((ptr) + (36)) >> 2)] = value4;
                HEAP32[(((ptr) + (40)) >> 2)] = value4;
                HEAP32[(((ptr) + (44)) >> 2)] = value4;
                HEAP32[(((ptr) + (48)) >> 2)] = value4;
                HEAP32[(((ptr) + (52)) >> 2)] = value4;
                HEAP32[(((ptr) + (56)) >> 2)] = value4;
                HEAP32[(((ptr) + (60)) >> 2)] = value4;
                ptr = (ptr + 64) | 0;
            }

            while ((ptr | 0) < (aligned_end | 0)) {
                HEAP32[((ptr) >> 2)] = value4;
                ptr = (ptr + 4) | 0;
            }
        }
        // The remaining bytes.
        while ((ptr | 0) < (end | 0)) {
            HEAP8[((ptr) >> 0)] = value;
            ptr = (ptr + 1) | 0;
        }
        return (end - num) | 0;
    }
    function _sbrk(increment) {
        increment = increment | 0;
        var oldDynamicTop = 0;
        var oldDynamicTopOnChange = 0;
        var newDynamicTop = 0;
        var totalMemory = 0;
        oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0;
        newDynamicTop = oldDynamicTop + increment | 0;

        if (((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0)) // Detect and fail if we would wrap around signed 32-bit int.
            | (newDynamicTop | 0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
            abortOnCannotGrowMemory() | 0;
            ___setErrNo(12);
            return -1;
        }

        HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop;
        totalMemory = getTotalMemory() | 0;
        if ((newDynamicTop | 0) > (totalMemory | 0)) {
            if ((enlargeMemory() | 0) == 0) {
                HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop;
                ___setErrNo(12);
                return -1;
            }
        }
        return oldDynamicTop | 0;
    }


    function dynCall_ii(index, a1) {
        index = index | 0;
        a1 = a1 | 0;
        return FUNCTION_TABLE_ii[index & 3](a1 | 0) | 0;
    }


    function dynCall_iii(index, a1, a2) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0;
        return FUNCTION_TABLE_iii[index & 1](a1 | 0, a2 | 0) | 0;
    }


    function dynCall_iiii(index, a1, a2, a3) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0;
        return FUNCTION_TABLE_iiii[index & 15](a1 | 0, a2 | 0, a3 | 0) | 0;
    }


    function dynCall_iiiii(index, a1, a2, a3, a4) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0; a4 = a4 | 0;
        return FUNCTION_TABLE_iiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
    }


    function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0; a4 = a4 | 0; a5 = a5 | 0;
        return FUNCTION_TABLE_iiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
    }


    function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0; a4 = a4 | 0; a5 = a5 | 0; a6 = a6 | 0; a7 = a7 | 0;
        return FUNCTION_TABLE_iiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0;
    }


    function dynCall_iiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0; a4 = a4 | 0; a5 = a5 | 0; a6 = a6 | 0; a7 = a7 | 0; a8 = a8 | 0; a9 = a9 | 0;
        return FUNCTION_TABLE_iiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0) | 0;
    }


    function dynCall_v(index) {
        index = index | 0;

        FUNCTION_TABLE_v[index & 0]();
    }


    function dynCall_vi(index, a1) {
        index = index | 0;
        a1 = a1 | 0;
        FUNCTION_TABLE_vi[index & 15](a1 | 0);
    }


    function dynCall_vii(index, a1, a2) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0;
        FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
    }


    function dynCall_viii(index, a1, a2, a3) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0;
        FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0);
    }


    function dynCall_viiii(index, a1, a2, a3, a4) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0; a4 = a4 | 0;
        FUNCTION_TABLE_viiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
    }


    function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0; a4 = a4 | 0; a5 = a5 | 0;
        FUNCTION_TABLE_viiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
    }


    function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0; a4 = a4 | 0; a5 = a5 | 0; a6 = a6 | 0;
        FUNCTION_TABLE_viiiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
    }


    function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
        index = index | 0;
        a1 = a1 | 0; a2 = a2 | 0; a3 = a3 | 0; a4 = a4 | 0; a5 = a5 | 0; a6 = a6 | 0; a7 = a7 | 0; a8 = a8 | 0;
        FUNCTION_TABLE_viiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0);
    }

    function b0(p0) {
        p0 = p0 | 0; abort(0); return 0;
    }
    function b1(p0, p1) {
        p0 = p0 | 0; p1 = p1 | 0; abort(1); return 0;
    }
    function b2(p0, p1, p2) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; abort(2); return 0;
    }
    function b3(p0, p1, p2, p3) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; p3 = p3 | 0; abort(3); return 0;
    }
    function b4(p0, p1, p2, p3, p4) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; p3 = p3 | 0; p4 = p4 | 0; abort(4); return 0;
    }
    function b5(p0, p1, p2, p3, p4, p5, p6) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; p3 = p3 | 0; p4 = p4 | 0; p5 = p5 | 0; p6 = p6 | 0; abort(5); return 0;
    }
    function b6(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; p3 = p3 | 0; p4 = p4 | 0; p5 = p5 | 0; p6 = p6 | 0; p7 = p7 | 0; p8 = p8 | 0; abort(6); return 0;
    }
    function b7() {
        ; abort(7);
    }
    function b8(p0) {
        p0 = p0 | 0; abort(8);
    }
    function b9(p0, p1) {
        p0 = p0 | 0; p1 = p1 | 0; abort(9);
    }
    function b10(p0, p1, p2) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; abort(10);
    }
    function b11(p0, p1, p2, p3) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; p3 = p3 | 0; abort(11);
    }
    function b12(p0, p1, p2, p3, p4) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; p3 = p3 | 0; p4 = p4 | 0; abort(12);
    }
    function b13(p0, p1, p2, p3, p4, p5) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; p3 = p3 | 0; p4 = p4 | 0; p5 = p5 | 0; abort(13);
    }
    function b14(p0, p1, p2, p3, p4, p5, p6, p7) {
        p0 = p0 | 0; p1 = p1 | 0; p2 = p2 | 0; p3 = p3 | 0; p4 = p4 | 0; p5 = p5 | 0; p6 = p6 | 0; p7 = p7 | 0; abort(14);
    }

    // EMSCRIPTEN_END_FUNCS
    var FUNCTION_TABLE_ii = [b0, __ZN7WelsDec12CWelsDecoder12UninitializeEv, ___stdio_close, b0];
    var FUNCTION_TABLE_iii = [b1, __ZN7WelsDec12CWelsDecoder10InitializeEPK19TagSVCDecodingParam];
    var FUNCTION_TABLE_iiii = [b2, __ZN7WelsDec12CWelsDecoder9SetOptionE14DECODER_OPTIONPv, __ZN7WelsDec12CWelsDecoder9GetOptionE14DECODER_OPTIONPv, ___stdio_write, ___stdio_seek, _sn_write, __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv, __ZN7WelsDec23WelsDecodeMbCabacISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj, __ZN7WelsDec23WelsDecodeMbCabacPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj, __ZN7WelsDec23WelsDecodeMbCavlcISliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj, __ZN7WelsDec23WelsDecodeMbCavlcPSliceEPNS_21TagWelsDecoderContextEPNS_10TagNalUnitERj, b2, b2, b2, b2, b2];
    var FUNCTION_TABLE_iiiii = [b3, __ZN7WelsDec12CWelsDecoder12DecodeParserEPKhiP15TagParserBsInfo];
    var FUNCTION_TABLE_iiiiii = [b4, __ZN7WelsDec12CWelsDecoder18DecodeFrameNoDelayEPKhiPPhP13TagBufferInfo, __ZN7WelsDec12CWelsDecoder12DecodeFrame2EPKhiPPhP13TagBufferInfo, b4];
    var FUNCTION_TABLE_iiiiiiii = [b5, __ZN7WelsDec12CWelsDecoder11DecodeFrameEPKhiPPhPiRiS6_];
    var FUNCTION_TABLE_iiiiiiiiii = [b6, __ZN7WelsDec12CWelsDecoder13DecodeFrameExEPKhiPhiRiS4_S4_S4_];
    var FUNCTION_TABLE_v = [b7];
    var FUNCTION_TABLE_vi = [b8, __ZN10WelsCommon12CMemoryAlignD2Ev, __ZN10WelsCommon12CMemoryAlignD0Ev, __ZN7WelsDec12CWelsDecoderD2Ev, __ZN7WelsDec12CWelsDecoderD0Ev, __ZN10__cxxabiv116__shim_type_infoD2Ev, __ZN10__cxxabiv117__class_type_infoD0Ev, __ZNK10__cxxabiv116__shim_type_info5noop1Ev, __ZNK10__cxxabiv116__shim_type_info5noop2Ev, __ZN10__cxxabiv120__si_class_type_infoD0Ev, __Z18WelsNonZeroCount_cPa, b8, b8, b8, b8, b8];
    var FUNCTION_TABLE_vii = [b9, __ZN7WelsDec33WelsMapNxNNeighToSampleConstrain1EPNS_16TagNeighborAvailEPi, __ZN7WelsDec29WelsMapNxNNeighToSampleNormalEPNS_16TagNeighborAvailEPi, __ZN7WelsDec35WelsMap16x16NeighToSampleConstrain1EPNS_16TagNeighborAvailEPh, __ZN7WelsDec31WelsMap16x16NeighToSampleNormalEPNS_16TagNeighborAvailEPh, __ZN7WelsDec21WelsI16x16LumaPredV_cEPhi, __ZN7WelsDec21WelsI16x16LumaPredH_cEPhi, __ZN7WelsDec22WelsI16x16LumaPredDc_cEPhi, __ZN7WelsDec25WelsI16x16LumaPredPlane_cEPhi, __ZN7WelsDec26WelsI16x16LumaPredDcLeft_cEPhi, __ZN7WelsDec25WelsI16x16LumaPredDcTop_cEPhi, __ZN7WelsDec24WelsI16x16LumaPredDcNA_cEPhi, __ZN7WelsDec19WelsI4x4LumaPredV_cEPhi, __ZN7WelsDec19WelsI4x4LumaPredH_cEPhi, __ZN7WelsDec20WelsI4x4LumaPredDc_cEPhi, __ZN7WelsDec24WelsI4x4LumaPredDcLeft_cEPhi, __ZN7WelsDec23WelsI4x4LumaPredDcTop_cEPhi, __ZN7WelsDec22WelsI4x4LumaPredDcNA_cEPhi, __ZN7WelsDec21WelsI4x4LumaPredDDL_cEPhi, __ZN7WelsDec24WelsI4x4LumaPredDDLTop_cEPhi, __ZN7WelsDec21WelsI4x4LumaPredDDR_cEPhi, __ZN7WelsDec20WelsI4x4LumaPredVL_cEPhi, __ZN7WelsDec23WelsI4x4LumaPredVLTop_cEPhi, __ZN7WelsDec20WelsI4x4LumaPredVR_cEPhi, __ZN7WelsDec20WelsI4x4LumaPredHU_cEPhi, __ZN7WelsDec20WelsI4x4LumaPredHD_cEPhi, __ZN7WelsDec19WelsIChromaPredDc_cEPhi, __ZN7WelsDec18WelsIChromaPredH_cEPhi, __ZN7WelsDec18WelsIChromaPredV_cEPhi
        , __ZN7WelsDec22WelsIChromaPredPlane_cEPhi, __ZN7WelsDec23WelsIChromaPredDcLeft_cEPhi, __ZN7WelsDec22WelsIChromaPredDcTop_cEPhi, __ZN7WelsDec21WelsIChromaPredDcNA_cEPhi, __ZN7WelsDec20WelsBlockZero16x16_cEPsi, __ZN7WelsDec18WelsBlockZero8x8_cEPsi, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9, b9
        , b9, b9, b9, b9, b9];
    var FUNCTION_TABLE_viii = [b10, _openh264_log, __ZN7WelsDec16WelsDeblockingMbEPNS_10TagDqLayerEPNS_19tagDeblockingFilterEi, __ZN7WelsDec16IdctResAddPred_cEPhiPs, __ZN7WelsDec19IdctResAddPred8x8_cEPhiPs, __ZL15welsStderrTracePviPKc, b10, b10];
    var FUNCTION_TABLE_viiii = [b11, __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi, __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi, __ZL19ExpandPictureLuma_cPhiii, __ZL21ExpandPictureChroma_cPhiii, __Z15WelsCopy16x16_cPhiS_i, __Z13WelsCopy8x8_cPhiS_i, __ZN7WelsDec31WelsFillCacheConstrain1IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE, __ZN7WelsDec31WelsFillCacheConstrain0IntraNxNEPNS_16TagNeighborAvailEPhPaPNS_10TagDqLayerE, __ZN7WelsDec19WelsI8x8LumaPredV_cEPhibb, __ZN7WelsDec19WelsI8x8LumaPredH_cEPhibb, __ZN7WelsDec20WelsI8x8LumaPredDc_cEPhibb, __ZN7WelsDec24WelsI8x8LumaPredDcLeft_cEPhibb, __ZN7WelsDec23WelsI8x8LumaPredDcTop_cEPhibb, __ZN7WelsDec22WelsI8x8LumaPredDcNA_cEPhibb, __ZN7WelsDec21WelsI8x8LumaPredDDL_cEPhibb, __ZN7WelsDec24WelsI8x8LumaPredDDLTop_cEPhibb, __ZN7WelsDec21WelsI8x8LumaPredDDR_cEPhibb, __ZN7WelsDec20WelsI8x8LumaPredVL_cEPhibb, __ZN7WelsDec23WelsI8x8LumaPredVLTop_cEPhibb, __ZN7WelsDec20WelsI8x8LumaPredVR_cEPhibb, __ZN7WelsDec20WelsI8x8LumaPredHU_cEPhibb, __ZN7WelsDec20WelsI8x8LumaPredHD_cEPhibb, __Z17DeblockLumaEq4V_cPhiii, __Z17DeblockLumaEq4H_cPhiii, __Z20DeblockChromaEq4V2_cPhiii, __Z20DeblockChromaEq4H2_cPhiii, __ZN14welsCodecTrace16StaticCodecTraceEPviPKcPi, b11
        , b11, b11, b11];
    var FUNCTION_TABLE_viiiii = [b12, __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib, __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib, __Z17DeblockLumaLt4V_cPhiiiPa, __Z17DeblockLumaLt4H_cPhiiiPa, __Z19DeblockChromaEq4V_cPhS_iii, __Z19DeblockChromaEq4H_cPhS_iii, __Z20DeblockChromaLt4V2_cPhiiiPa, __Z20DeblockChromaLt4H2_cPhiiiPa, b12, b12, b12, b12, b12, b12, b12];
    var FUNCTION_TABLE_viiiiii = [b13, __ZN10WelsCommonL8McCopy_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer01_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer02_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer03_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer10_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer11_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer12_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer13_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer20_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer21_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer22_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer23_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer30_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer31_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer32_cEPKhiPhiii, __ZN10WelsCommonL12McHorVer33_cEPKhiPhiii, __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib, __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib, __Z19DeblockChromaLt4V_cPhS_iiiPa, __Z19DeblockChromaLt4H_cPhS_iiiPa, b13, b13, b13, b13, b13, b13, b13, b13
        , b13, b13, b13];
    var FUNCTION_TABLE_viiiiiiii = [b14, __ZN10WelsCommonL10PixelAvg_cEPhiPKhiS2_iii, __ZN10WelsCommon10McChroma_cEPKhiPhissii, __ZN10WelsCommon8McLuma_cEPKhiPhissii];

    return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _close_decoder: _close_decoder, _decode_h264buffer: _decode_h264buffer, _decode_nal: _decode_nal, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _open_decoder: _open_decoder, _sbrk: _sbrk, _strlen: _strlen, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
    // EMSCRIPTEN_END_ASM
    (Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _close_decoder = Module["_close_decoder"] = asm["_close_decoder"];
var _decode_h264buffer = Module["_decode_h264buffer"] = asm["_decode_h264buffer"];
var _decode_nal = Module["_decode_nal"] = asm["_decode_nal"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _open_decoder = Module["_open_decoder"] = asm["_open_decoder"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;




Module["cwrap"] = cwrap;


































































if (memoryInitializer) {
    if (!isDataURI(memoryInitializer)) {
        if (typeof Module['locateFile'] === 'function') {
            memoryInitializer = Module['locateFile'](memoryInitializer);
        } else if (Module['memoryInitializerPrefixURL']) {
            memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
        }
    }
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
        var data = Module['readBinary'](memoryInitializer);
        HEAPU8.set(data, GLOBAL_BASE);
    } else {
        addRunDependency('memory initializer');
        var applyMemoryInitializer = function (data) {
            if (data.byteLength) data = new Uint8Array(data);
            HEAPU8.set(data, GLOBAL_BASE);
            // Delete the typed array that contains the large blob of the memory initializer request response so that
            // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
            // its .status field can still be accessed later.
            if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
            removeRunDependency('memory initializer');
        }
        function doBrowserLoad() {
            Module['readAsync'](memoryInitializer, applyMemoryInitializer, function () {
                throw 'could not load memory initializer ' + memoryInitializer;
            });
        }
        var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
        if (memoryInitializerBytes) {
            applyMemoryInitializer(memoryInitializerBytes.buffer);
        } else
            if (Module['memoryInitializerRequest']) {
                // a network request has already been created, just use that
                function useRequest() {
                    var request = Module['memoryInitializerRequest'];
                    var response = request.response;
                    if (request.status !== 200 && request.status !== 0) {
                        var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
                        if (data) {
                            response = data.buffer;
                        } else {
                            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
                            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
                            // Look in your browser's devtools network console to see what's going on.
                            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
                            doBrowserLoad();
                            return;
                        }
                    }
                    applyMemoryInitializer(response);
                }
                if (Module['memoryInitializerRequest'].response) {
                    setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
                } else {
                    Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
                }
            } else {
                // fetch it from the network ourselves
                doBrowserLoad();
            }
    }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
    this.name = "ExitStatus";
    this.message = "Program terminated with exit(" + status + ")";
    this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!Module['calledRun']) run();
    if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}





/** @type {function(Array=)} */
function run(args) {
    args = args || Module['arguments'];

    if (runDependencies > 0) {
        return;
    }


    preRun();

    if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
    if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

    function doRun() {
        if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
        Module['calledRun'] = true;

        if (ABORT) return;

        ensureInitRuntime();

        preMain();

        if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();


        postRun();
    }

    if (Module['setStatus']) {
        Module['setStatus']('Running...');
        setTimeout(function () {
            setTimeout(function () {
                Module['setStatus']('');
            }, 1);
            doRun();
        }, 1);
    } else {
        doRun();
    }
}
Module['run'] = run;


function exit(status, implicit) {

    // if this is just main exit-ing implicitly, and the status is 0, then we
    // don't need to do anything here and can just leave. if the status is
    // non-zero, though, then we need to report it.
    // (we may have warned about this earlier, if a situation justifies doing so)
    if (implicit && Module['noExitRuntime'] && status === 0) {
        return;
    }

    if (Module['noExitRuntime']) {
    } else {

        ABORT = true;
        EXITSTATUS = status;
        STACKTOP = initialStackTop;

        exitRuntime();

        if (Module['onExit']) Module['onExit'](status);
    }

    if (ENVIRONMENT_IS_NODE) {
        process['exit'](status);
    }
    Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
    if (Module['onAbort']) {
        Module['onAbort'](what);
    }

    if (what !== undefined) {
        Module.print(what);
        Module.printErr(what);
        what = JSON.stringify(what)
    } else {
        what = '';
    }

    ABORT = true;
    EXITSTATUS = 1;

    throw 'abort(' + what + '). Build with -s ASSERTIONS=1 for more info.';
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
    if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
    while (Module['preInit'].length > 0) {
        Module['preInit'].pop()();
    }
}


Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



function frame_callback(a, b, c, width, height, stride1, stride2) {
    var data = new Uint8Array(width * height * 3 / 2);
    var x, y;


    for (y = 0; y < height; y++) {
        var ar = Module.HEAP8.subarray(a + y * stride1, a + y * stride1 + width);
        data.set(ar, y * width);
    }
    var cbofs = width * height;
    for (y = 0; y < height / 2; y++) {
        var ar = Module.HEAP8.subarray(b + y * stride2, b + y * stride2 + width / 2);
        data.set(ar, cbofs + y * width / 2);
    }

    var crofs = cbofs + width * height / 4;
    for (y = 0; y < height / 2; y++) {
        var ar = Module.HEAP8.subarray(c + y * stride2, c + y * stride2 + width / 2);
        data.set(ar, crofs + y * width / 2);
    }

    postMessage({ 'data': data, 'width': width, 'height': height });
    //postMessage(data);
}


(function (root) {
    console.log("ready to load");

    var open_decoder = Module.cwrap('open_decoder', 'number', null);
    var close_decoder = Module.cwrap('close_decoder', null, ['number']);
    var decode_h264buffer = Module.cwrap('decode_h264buffer', 'number', ['number', 'array', 'number']);
    var decode_h264nal = Module.cwrap('decode_nal', 'number', ['number', 'array', 'number']);

    var h = open_decoder();

    root.addEventListener('message', function (e) {
        var message = e.data;
        switch (message.type) {
            case 'close':
                close_decoder(h);
                break;
            case 'frame':
                if (message.data == null) {
                    decode_h264nal(h, 0, 0);
                } else {
                    var byteArray = new Uint8Array(message.data);
                    decode_h264nal(h, byteArray, byteArray.length);
                }
        };
    });
}(self));
